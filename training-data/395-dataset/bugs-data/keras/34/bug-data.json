{
    "keras:34": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_34/keras/engine/training.py": {
            "buggy_functions": [
                {
                    "function_name": "fit_generator",
                    "function_code": "@interfaces.legacy_generator_methods_support\ndef fit_generator(self,\n                  generator,\n                  steps_per_epoch=None,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"Trains the model on data yielded batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches\n            may have different sizes. For example, the last batch of the\n            epoch is commonly smaller than the others, if the size of the\n            dataset is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean. If True, use process based threading.\n            If unspecified, `use_multiprocessing` will default to False.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Boolean. Whether to shuffle the training data\n            in batch-sized chunks before each epoch.\n            Only used with instances of `Sequence` (`keras.utils.Sequence`).\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    wait_time = 0.01  # in seconds\n    epoch = initial_epoch\n\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a'\n                             ' generator based on the `keras.utils.Sequence`'\n                             ' class. Please specify `steps_per_epoch` or use'\n                             ' the `keras.utils.Sequence` class.')\n\n    # python 2 has 'next', 3 has '__next__'\n    # avoid any explicit version checks\n    val_gen = (hasattr(validation_data, 'next') or\n               hasattr(validation_data, '__next__') or\n               isinstance(validation_data, Sequence))\n    if (val_gen and not isinstance(validation_data, Sequence) and\n            not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a'\n                         ' generator based on the `keras.utils.Sequence`'\n                         ' class. Please specify `validation_steps` or use'\n                         ' the `keras.utils.Sequence` class.')\n\n    # Prepare display labels.\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n\n    # prepare callbacks\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(\n        stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(\n            cbks.ProgbarLogger(\n                count_mode='steps',\n                stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n\n    # it's possible to callback a different model than self:\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics,\n    })\n    callbacks.on_train_begin()\n\n    enqueuer = None\n    val_enqueuer = None\n\n    try:\n        if do_validation:\n            if val_gen:\n                if workers > 0:\n                    if isinstance(validation_data, Sequence):\n                        val_enqueuer = OrderedEnqueuer(\n                            validation_data,\n                            use_multiprocessing=use_multiprocessing)\n                        if validation_steps is None:\n                            validation_steps = len(validation_data)\n                    else:\n                        val_enqueuer = GeneratorEnqueuer(\n                            validation_data,\n                            use_multiprocessing=use_multiprocessing,\n                            wait_time=wait_time)\n                    val_enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n                    validation_generator = val_enqueuer.get()\n                else:\n                    validation_generator = validation_data\n            else:\n                if len(validation_data) == 2:\n                    val_x, val_y = validation_data\n                    val_sample_weight = None\n                elif len(validation_data) == 3:\n                    val_x, val_y, val_sample_weight = validation_data\n                else:\n                    raise ValueError('`validation_data` should be a tuple '\n                                     '`(val_x, val_y, val_sample_weight)` '\n                                     'or `(val_x, val_y)`. Found: ' +\n                                     str(validation_data))\n                val_x, val_y, val_sample_weights = self._standardize_user_data(\n                    val_x, val_y, val_sample_weight)\n                val_data = val_x + val_y + val_sample_weights\n                if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n                    val_data += [0.]\n                for cbk in callbacks:\n                    cbk.validation_data = val_data\n\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator,\n                                           use_multiprocessing=use_multiprocessing,\n                                           shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator,\n                                             use_multiprocessing=use_multiprocessing,\n                                             wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n\n        callback_model.stop_training = False\n        # Construct epoch logs.\n        epoch_logs = {}\n        while epoch < epochs:\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n                # build batch logs\n                batch_logs = {}\n                if isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n\n                outs = self.train_on_batch(x, y,\n                                           sample_weight=sample_weight,\n                                           class_weight=class_weight)\n\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n\n                batch_index += 1\n                steps_done += 1\n\n                # Epoch finished.\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(\n                            validation_generator,\n                            validation_steps,\n                            workers=0)\n                    else:\n                        # No need for try/except because\n                        # data has already been validated.\n                        val_outs = self.evaluate(\n                            val_x, val_y,\n                            batch_size=batch_size,\n                            sample_weight=val_sample_weights,\n                            verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    # Same labels assumed.\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n\n                if callback_model.stop_training:\n                    break\n\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n\n    callbacks.on_train_end()\n    return self.history\n",
                    "decorators": [
                        "interfaces.legacy_generator_methods_support"
                    ],
                    "docstring": "Trains the model on data yielded batch-by-batch by a Python generator.\n\nThe generator is run in parallel to the model, for efficiency.\nFor instance, this allows you to do real-time data augmentation\non images on CPU in parallel to training your model on GPU.\n\nThe use of `keras.utils.Sequence` guarantees the ordering\nand guarantees the single use of every input per epoch when\nusing `use_multiprocessing=True`.\n\n# Arguments\n    generator: A generator or an instance of `Sequence`\n        (`keras.utils.Sequence`) object in order to avoid\n        duplicate data when using multiprocessing.\n        The output of the generator must be either\n        - a tuple `(inputs, targets)`\n        - a tuple `(inputs, targets, sample_weights)`.\n        This tuple (a single output of the generator) makes a single\n        batch. Therefore, all arrays in this tuple must have the same\n        length (equal to the size of this batch). Different batches\n        may have different sizes. For example, the last batch of the\n        epoch is commonly smaller than the others, if the size of the\n        dataset is not divisible by the batch size.\n        The generator is expected to loop over its data\n        indefinitely. An epoch finishes when `steps_per_epoch`\n        batches have been seen by the model.\n    steps_per_epoch: Integer.\n        Total number of steps (batches of samples)\n        to yield from `generator` before declaring one epoch\n        finished and starting the next epoch. It should typically\n        be equal to the number of samples of your dataset\n        divided by the batch size.\n        Optional for `Sequence`: if unspecified, will use\n        the `len(generator)` as a number of steps.\n    epochs: Integer. Number of epochs to train the model.\n        An epoch is an iteration over the entire data provided,\n        as defined by `steps_per_epoch`.\n        Note that in conjunction with `initial_epoch`,\n        `epochs` is to be understood as \"final epoch\".\n        The model is not trained for a number of iterations\n        given by `epochs`, but merely until the epoch\n        of index `epochs` is reached.\n    verbose: Integer. 0, 1, or 2. Verbosity mode.\n        0 = silent, 1 = progress bar, 2 = one line per epoch.\n    callbacks: List of `keras.callbacks.Callback` instances.\n        List of callbacks to apply during training.\n        See [callbacks](/callbacks).\n    validation_data: This can be either\n        - a generator for the validation data\n        - tuple `(x_val, y_val)`\n        - tuple `(x_val, y_val, val_sample_weights)`\n        on which to evaluate\n        the loss and any model metrics at the end of each epoch.\n        The model will not be trained on this data.\n    validation_steps: Only relevant if `validation_data`\n        is a generator. Total number of steps (batches of samples)\n        to yield from `validation_data` generator before stopping.\n        Optional for `Sequence`: if unspecified, will use\n        the `len(validation_data)` as a number of steps.\n    class_weight: Optional dictionary mapping class indices (integers)\n        to a weight (float) value, used for weighting the loss function\n        (during training only).\n        This can be useful to tell the model to\n        \"pay more attention\" to samples from\n        an under-represented class.\n    max_queue_size: Integer. Maximum size for the generator queue.\n        If unspecified, `max_queue_size` will default to 10.\n    workers: Integer. Maximum number of processes to spin up\n        when using process based threading.\n        If unspecified, `workers` will default to 1. If 0, will\n        execute the generator on the main thread.\n    use_multiprocessing: Boolean. If True, use process based threading.\n        If unspecified, `use_multiprocessing` will default to False.\n        Note that because\n        this implementation relies on multiprocessing,\n        you should not pass\n        non picklable arguments to the generator\n        as they can't be passed\n        easily to children processes.\n    shuffle: Boolean. Whether to shuffle the training data\n        in batch-sized chunks before each epoch.\n        Only used with instances of `Sequence` (`keras.utils.Sequence`).\n    initial_epoch: Integer.\n        Epoch at which to start training\n        (useful for resuming a previous training run).\n\n# Returns\n    A `History` object. Its `History.history` attribute is\n    a record of training loss values and metrics values\n    at successive epochs, as well as validation loss values\n    and validation metrics values (if applicable).\n\n# Example\n\n```python\n    def generate_arrays_from_file(path):\n        while 1:\n            with open(path) as f:\n                for line in f:\n                    # create numpy arrays of input data\n                    # and labels, from each line in the file\n                    x1, x2, y = process_line(line)\n                    yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n    model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                        steps_per_epoch=10000, epochs=10)\n```\n\n# Raises\n    ValueError: In case the generator yields\n        data in an invalid format.",
                    "start_line": 1950,
                    "end_line": 2289,
                    "variables": {
                        "wait_time": [
                            2161,
                            2193,
                            2077
                        ],
                        "epoch": [
                            2275,
                            2276,
                            2202,
                            2203,
                            2078
                        ],
                        "initial_epoch": [
                            2078
                        ],
                        "do_validation": [
                            2080,
                            2082,
                            2148,
                            2252,
                            2139
                        ],
                        "bool": [
                            2080
                        ],
                        "validation_data": [
                            2080,
                            2176,
                            2170,
                            2151,
                            2153,
                            2156,
                            2159,
                            2165,
                            2167,
                            2103,
                            2104,
                            2105,
                            2106,
                            2171,
                            2168
                        ],
                        "self._make_train_function": [
                            2081
                        ],
                        "self": [
                            2081,
                            2114,
                            2083,
                            2177,
                            2180,
                            2118,
                            2120,
                            2125,
                            2126,
                            2254,
                            2289,
                            2130,
                            2131,
                            2133,
                            2261,
                            2237
                        ],
                        "self._make_test_function": [
                            2083
                        ],
                        "is_sequence": [
                            2186,
                            2093,
                            2085,
                            2086
                        ],
                        "isinstance": [
                            2241,
                            2180,
                            2085,
                            2151,
                            2266,
                            2227,
                            2229,
                            2105,
                            2106
                        ],
                        "generator": [
                            2085,
                            2187,
                            2094,
                            2191,
                            2197
                        ],
                        "Sequence": [
                            2105,
                            2106,
                            2085,
                            2151
                        ],
                        "use_multiprocessing": [
                            2086,
                            2154,
                            2188,
                            2160,
                            2192
                        ],
                        "workers": [
                            2150,
                            2086,
                            2185,
                            2162,
                            2194
                        ],
                        "warnings.warn": [
                            2087
                        ],
                        "warnings": [
                            2087
                        ],
                        "UserWarning": [
                            2088
                        ],
                        "steps_per_epoch": [
                            2252,
                            2092,
                            2094,
                            2137,
                            2206
                        ],
                        "len": [
                            2215,
                            2218,
                            2156,
                            2094,
                            2167,
                            2170
                        ],
                        "ValueError": [
                            2210,
                            2221,
                            2096,
                            2108,
                            2173
                        ],
                        "val_gen": [
                            2253,
                            2106,
                            2149,
                            2103
                        ],
                        "hasattr": [
                            2104,
                            2209,
                            2130,
                            2103
                        ],
                        "validation_steps": [
                            2256,
                            2155,
                            2107,
                            2156
                        ],
                        "out_labels": [
                            2114,
                            2115,
                            2269,
                            2243
                        ],
                        "self.metrics_names": [
                            2114
                        ],
                        "callback_metrics": [
                            2115,
                            2140
                        ],
                        "n": [
                            2115
                        ],
                        "self.history": [
                            2126,
                            2289,
                            2118
                        ],
                        "cbks.History": [
                            2118
                        ],
                        "cbks": [
                            2127,
                            2123,
                            2118,
                            2119
                        ],
                        "_callbacks": [
                            2127,
                            2122,
                            2126,
                            2119
                        ],
                        "cbks.BaseLogger": [
                            2119
                        ],
                        "self.stateful_metric_names": [
                            2120,
                            2125
                        ],
                        "verbose": [
                            2121,
                            2138
                        ],
                        "_callbacks.append": [
                            2122
                        ],
                        "cbks.ProgbarLogger": [
                            2123
                        ],
                        "callbacks": [
                            2275,
                            2182,
                            2246,
                            2235,
                            2126,
                            2127,
                            2288,
                            2134,
                            2135,
                            2203,
                            2142
                        ],
                        "cbks.CallbackList": [
                            2127
                        ],
                        "self.callback_model": [
                            2130,
                            2131
                        ],
                        "callback_model": [
                            2272,
                            2277,
                            2131,
                            2133,
                            2134,
                            2199
                        ],
                        "callbacks.set_model": [
                            2134
                        ],
                        "callbacks.set_params": [
                            2135
                        ],
                        "epochs": [
                            2136,
                            2202
                        ],
                        "callbacks.on_train_begin": [
                            2142
                        ],
                        "enqueuer": [
                            2144,
                            2282,
                            2187,
                            2283,
                            2191,
                            2194,
                            2195
                        ],
                        "val_enqueuer": [
                            2145,
                            2152,
                            2285,
                            2158,
                            2286,
                            2162,
                            2163
                        ],
                        "OrderedEnqueuer": [
                            2152,
                            2187
                        ],
                        "GeneratorEnqueuer": [
                            2158,
                            2191
                        ],
                        "val_enqueuer.start": [
                            2162
                        ],
                        "max_queue_size": [
                            2162,
                            2194
                        ],
                        "validation_generator": [
                            2163,
                            2165,
                            2255
                        ],
                        "val_enqueuer.get": [
                            2163
                        ],
                        "val_x": [
                            2177,
                            2178,
                            2179,
                            2262,
                            2168,
                            2171
                        ],
                        "val_y": [
                            2177,
                            2178,
                            2179,
                            2262,
                            2168,
                            2171
                        ],
                        "val_sample_weight": [
                            2169,
                            2178,
                            2171
                        ],
                        "str": [
                            2176,
                            2213,
                            2224
                        ],
                        "val_sample_weights": [
                            2264,
                            2177,
                            2179
                        ],
                        "self._standardize_user_data": [
                            2177
                        ],
                        "val_data": [
                            2179,
                            2181,
                            2183
                        ],
                        "self.uses_learning_phase": [
                            2180
                        ],
                        "K.learning_phase": [
                            2180
                        ],
                        "K": [
                            2180
                        ],
                        "int": [
                            2180
                        ],
                        "cbk": [
                            2182,
                            2183
                        ],
                        "cbk.validation_data": [
                            2183
                        ],
                        "shuffle": [
                            2189
                        ],
                        "enqueuer.start": [
                            2194
                        ],
                        "output_generator": [
                            2195,
                            2197,
                            2207
                        ],
                        "enqueuer.get": [
                            2195
                        ],
                        "callback_model.stop_training": [
                            2272,
                            2277,
                            2199
                        ],
                        "epoch_logs": [
                            2201,
                            2275,
                            2270
                        ],
                        "callbacks.on_epoch_begin": [
                            2203
                        ],
                        "steps_done": [
                            2249,
                            2252,
                            2204,
                            2206
                        ],
                        "batch_index": [
                            2246,
                            2248,
                            2233,
                            2235,
                            2205
                        ],
                        "generator_output": [
                            2209,
                            2213,
                            2215,
                            2216,
                            2218,
                            2219,
                            2224,
                            2207
                        ],
                        "next": [
                            2207
                        ],
                        "x": [
                            2216,
                            2219,
                            2227,
                            2228,
                            2229,
                            2230,
                            2232,
                            2237
                        ],
                        "y": [
                            2216,
                            2219,
                            2237
                        ],
                        "sample_weight": [
                            2217,
                            2219,
                            2238
                        ],
                        "batch_logs": [
                            2244,
                            2246,
                            2226,
                            2233,
                            2234,
                            2235
                        ],
                        "list": [
                            2241,
                            2266,
                            2227,
                            2230
                        ],
                        "batch_size": [
                            2228,
                            2230,
                            2263,
                            2232,
                            2234
                        ],
                        "shape": [
                            2228,
                            2230
                        ],
                        "dict": [
                            2229
                        ],
                        "x.values": [
                            2230
                        ],
                        "x.shape": [
                            2232
                        ],
                        "callbacks.on_batch_begin": [
                            2235
                        ],
                        "outs": [
                            2241,
                            2242,
                            2243,
                            2237
                        ],
                        "self.train_on_batch": [
                            2237
                        ],
                        "class_weight": [
                            2239
                        ],
                        "l": [
                            2243,
                            2244,
                            2269,
                            2270
                        ],
                        "o": [
                            2243,
                            2244,
                            2269,
                            2270
                        ],
                        "zip": [
                            2243,
                            2269
                        ],
                        "callbacks.on_batch_end": [
                            2246
                        ],
                        "val_outs": [
                            2254,
                            2261,
                            2266,
                            2267,
                            2269
                        ],
                        "self.evaluate_generator": [
                            2254
                        ],
                        "self.evaluate": [
                            2261
                        ],
                        "callbacks.on_epoch_end": [
                            2275
                        ],
                        "enqueuer.stop": [
                            2283
                        ],
                        "val_enqueuer.stop": [
                            2286
                        ],
                        "callbacks.on_train_end": [
                            2288
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1950
                        ],
                        "interfaces": [
                            1950
                        ]
                    },
                    "filtered_variables": {
                        "wait_time": [
                            2161,
                            2193,
                            2077
                        ],
                        "epoch": [
                            2275,
                            2276,
                            2202,
                            2203,
                            2078
                        ],
                        "initial_epoch": [
                            2078
                        ],
                        "do_validation": [
                            2080,
                            2082,
                            2148,
                            2252,
                            2139
                        ],
                        "validation_data": [
                            2080,
                            2176,
                            2170,
                            2151,
                            2153,
                            2156,
                            2159,
                            2165,
                            2167,
                            2103,
                            2104,
                            2105,
                            2106,
                            2171,
                            2168
                        ],
                        "self._make_train_function": [
                            2081
                        ],
                        "self": [
                            2081,
                            2114,
                            2083,
                            2177,
                            2180,
                            2118,
                            2120,
                            2125,
                            2126,
                            2254,
                            2289,
                            2130,
                            2131,
                            2133,
                            2261,
                            2237
                        ],
                        "self._make_test_function": [
                            2083
                        ],
                        "is_sequence": [
                            2186,
                            2093,
                            2085,
                            2086
                        ],
                        "generator": [
                            2085,
                            2187,
                            2094,
                            2191,
                            2197
                        ],
                        "Sequence": [
                            2105,
                            2106,
                            2085,
                            2151
                        ],
                        "use_multiprocessing": [
                            2086,
                            2154,
                            2188,
                            2160,
                            2192
                        ],
                        "workers": [
                            2150,
                            2086,
                            2185,
                            2162,
                            2194
                        ],
                        "warnings.warn": [
                            2087
                        ],
                        "warnings": [
                            2087
                        ],
                        "steps_per_epoch": [
                            2252,
                            2092,
                            2094,
                            2137,
                            2206
                        ],
                        "val_gen": [
                            2253,
                            2106,
                            2149,
                            2103
                        ],
                        "validation_steps": [
                            2256,
                            2155,
                            2107,
                            2156
                        ],
                        "out_labels": [
                            2114,
                            2115,
                            2269,
                            2243
                        ],
                        "self.metrics_names": [
                            2114
                        ],
                        "callback_metrics": [
                            2115,
                            2140
                        ],
                        "n": [
                            2115
                        ],
                        "self.history": [
                            2126,
                            2289,
                            2118
                        ],
                        "cbks.History": [
                            2118
                        ],
                        "cbks": [
                            2127,
                            2123,
                            2118,
                            2119
                        ],
                        "_callbacks": [
                            2127,
                            2122,
                            2126,
                            2119
                        ],
                        "cbks.BaseLogger": [
                            2119
                        ],
                        "self.stateful_metric_names": [
                            2120,
                            2125
                        ],
                        "verbose": [
                            2121,
                            2138
                        ],
                        "_callbacks.append": [
                            2122
                        ],
                        "cbks.ProgbarLogger": [
                            2123
                        ],
                        "callbacks": [
                            2275,
                            2182,
                            2246,
                            2235,
                            2126,
                            2127,
                            2288,
                            2134,
                            2135,
                            2203,
                            2142
                        ],
                        "cbks.CallbackList": [
                            2127
                        ],
                        "self.callback_model": [
                            2130,
                            2131
                        ],
                        "callback_model": [
                            2272,
                            2277,
                            2131,
                            2133,
                            2134,
                            2199
                        ],
                        "callbacks.set_model": [
                            2134
                        ],
                        "callbacks.set_params": [
                            2135
                        ],
                        "epochs": [
                            2136,
                            2202
                        ],
                        "callbacks.on_train_begin": [
                            2142
                        ],
                        "enqueuer": [
                            2144,
                            2282,
                            2187,
                            2283,
                            2191,
                            2194,
                            2195
                        ],
                        "val_enqueuer": [
                            2145,
                            2152,
                            2285,
                            2158,
                            2286,
                            2162,
                            2163
                        ],
                        "OrderedEnqueuer": [
                            2152,
                            2187
                        ],
                        "GeneratorEnqueuer": [
                            2158,
                            2191
                        ],
                        "val_enqueuer.start": [
                            2162
                        ],
                        "max_queue_size": [
                            2162,
                            2194
                        ],
                        "validation_generator": [
                            2163,
                            2165,
                            2255
                        ],
                        "val_enqueuer.get": [
                            2163
                        ],
                        "val_x": [
                            2177,
                            2178,
                            2179,
                            2262,
                            2168,
                            2171
                        ],
                        "val_y": [
                            2177,
                            2178,
                            2179,
                            2262,
                            2168,
                            2171
                        ],
                        "val_sample_weight": [
                            2169,
                            2178,
                            2171
                        ],
                        "val_sample_weights": [
                            2264,
                            2177,
                            2179
                        ],
                        "self._standardize_user_data": [
                            2177
                        ],
                        "val_data": [
                            2179,
                            2181,
                            2183
                        ],
                        "self.uses_learning_phase": [
                            2180
                        ],
                        "K.learning_phase": [
                            2180
                        ],
                        "K": [
                            2180
                        ],
                        "cbk": [
                            2182,
                            2183
                        ],
                        "cbk.validation_data": [
                            2183
                        ],
                        "shuffle": [
                            2189
                        ],
                        "enqueuer.start": [
                            2194
                        ],
                        "output_generator": [
                            2195,
                            2197,
                            2207
                        ],
                        "enqueuer.get": [
                            2195
                        ],
                        "callback_model.stop_training": [
                            2272,
                            2277,
                            2199
                        ],
                        "epoch_logs": [
                            2201,
                            2275,
                            2270
                        ],
                        "callbacks.on_epoch_begin": [
                            2203
                        ],
                        "steps_done": [
                            2249,
                            2252,
                            2204,
                            2206
                        ],
                        "batch_index": [
                            2246,
                            2248,
                            2233,
                            2235,
                            2205
                        ],
                        "generator_output": [
                            2209,
                            2213,
                            2215,
                            2216,
                            2218,
                            2219,
                            2224,
                            2207
                        ],
                        "x": [
                            2216,
                            2219,
                            2227,
                            2228,
                            2229,
                            2230,
                            2232,
                            2237
                        ],
                        "y": [
                            2216,
                            2219,
                            2237
                        ],
                        "sample_weight": [
                            2217,
                            2219,
                            2238
                        ],
                        "batch_logs": [
                            2244,
                            2246,
                            2226,
                            2233,
                            2234,
                            2235
                        ],
                        "batch_size": [
                            2228,
                            2230,
                            2263,
                            2232,
                            2234
                        ],
                        "shape": [
                            2228,
                            2230
                        ],
                        "x.values": [
                            2230
                        ],
                        "x.shape": [
                            2232
                        ],
                        "callbacks.on_batch_begin": [
                            2235
                        ],
                        "outs": [
                            2241,
                            2242,
                            2243,
                            2237
                        ],
                        "self.train_on_batch": [
                            2237
                        ],
                        "class_weight": [
                            2239
                        ],
                        "l": [
                            2243,
                            2244,
                            2269,
                            2270
                        ],
                        "o": [
                            2243,
                            2244,
                            2269,
                            2270
                        ],
                        "callbacks.on_batch_end": [
                            2246
                        ],
                        "val_outs": [
                            2254,
                            2261,
                            2266,
                            2267,
                            2269
                        ],
                        "self.evaluate_generator": [
                            2254
                        ],
                        "self.evaluate": [
                            2261
                        ],
                        "callbacks.on_epoch_end": [
                            2275
                        ],
                        "enqueuer.stop": [
                            2283
                        ],
                        "val_enqueuer.stop": [
                            2286
                        ],
                        "callbacks.on_train_end": [
                            2288
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1950
                        ],
                        "interfaces": [
                            1950
                        ]
                    },
                    "diff_line_number": 2165,
                    "class_data": {
                        "signature": "class Model(Container)",
                        "docstring": "The `Model` class adds training & evaluation routines to a `Container`.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name + '\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"' + name + '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss=' + str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n    if loss_weights is None:\n        loss_weights_list = [1.0 for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.0))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss_weights=' + str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' + str(loss_weights) + ' - expected a list of dicts.')\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError('When passing a list as `target_tensors`, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed target_tensors=' + str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n            tmp_target_tensors = []\n            for name in self.output_names:\n                tmp_target_tensors.append(target_tensors.get(name, None))\n            target_tensors = tmp_target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self._internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in sample_weight_mode dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name + '\" missing from sample_weight_modes dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed sample_weight_mode=' + str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            elif sample_weight_mode == 'temporal':\n                sample_weights.append(K.placeholder(ndim=2, name=name + '_sample_weights'))\n                sample_weight_modes.append('temporal')\n            else:\n                sample_weights.append(K.placeholder(ndim=1, name=name + '_sample_weights'))\n                sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n    self.metrics = metrics or []\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled because it has no loss to optimize.')\n            else:\n                total_loss = 0.0\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n    self.metrics_updates = []\n    self.stateful_metric_names = []\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n                for metric in metrics:\n                    if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n                        output_shape = self._internal_output_shapes[i]\n                        if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.binary_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.binary_crossentropy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.sparse_categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.sparse_categorical_crossentropy\n                        elif metric in ('accuracy', 'acc'):\n                            metric_fn = metrics_module.categorical_accuracy\n                        elif metric in ('crossentropy', 'ce'):\n                            metric_fn = metrics_module.categorical_crossentropy\n                        if metric in ('accuracy', 'acc'):\n                            suffix = 'acc'\n                        elif metric in ('crossentropy', 'ce'):\n                            suffix = 'ce'\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + suffix\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        if hasattr(metric_fn, 'name'):\n                            metric_name = metric_fn.name\n                        else:\n                            metric_name = metric_fn.__name__\n                        metric_name = metric_name_prefix + metric_name\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n                    if len(self.output_names) > 1:\n                        metric_name = self.output_names[i] + '_' + metric_name\n                    j = 1\n                    base_metric_name = metric_name\n                    while metric_name in self.metrics_names:\n                        metric_name = base_metric_name + '_' + str(j)\n                        j += 1\n                    self.metrics_names.append(metric_name)\n                    self.metrics_tensors.append(metric_result)\n                    if isinstance(metric_fn, Layer):\n                        self.stateful_metric_names.append(metric_name)\n                        self.metrics_updates += metric_fn.updates\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n    self._function_kwargs = kwargs\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                            "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n    if len(self.trainable_weights) != len(self._collected_trainable_weights):\n        warnings.warn(UserWarning('Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?'))",
                            "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)\n            updates = self.updates + training_updates + self.metrics_updates\n            self.train_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)",
                            "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        self.test_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates + self.metrics_updates, name='test_function', **self._function_kwargs)",
                            "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)",
                            "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name + ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have a defined shape, or ' + steps_name + ' should be specified.')\n    return num_samples",
                            "def _fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' % (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` when doing step-wise training, i.e. `steps_per_epoch` must be set.')\n    num_train_samples = self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        _callbacks.append(cbks.ProgbarLogger(count_mode, stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    out_labels = out_labels or []\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'batch_size': batch_size, 'epochs': epochs, 'steps': steps_per_epoch, 'samples': num_train_samples, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics or []})\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    for epoch in range(initial_epoch, epochs):\n        for m in self.metrics:\n            if isinstance(m, Layer):\n                m.reset_states()\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, steps=validation_steps, verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. If using HDF5 input data, pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                for i in indices_for_conversion_to_dense:\n                    ins_batch[i] = ins_batch[i].toarray()\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n                if batch_index == len(batches) - 1:\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                            "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    indices_for_conversion_to_dense = []\n    for i in range(len(self._feed_inputs)):\n        if issparse(ins[i]) and (not K.is_sparse(self._feed_inputs[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0) for i in range(len(unconcatenated_outs))]\n    else:\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                            "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if hasattr(self, 'metrics'):\n        for m in self.metrics:\n            if isinstance(m, Layer):\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs * len(batch_ids)\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                            "def _standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.')\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        elif not hasattr(loss_fn, '__name__') or getattr(losses, loss_fn.__name__, None) is None:\n            output_shapes.append(None)\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False, exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight, self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight, self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode) for ref, sw, cw, mode in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    if check_array_lengths:\n        _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y, self._feed_loss_fns, self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples')\n    return (x, y, sample_weights)",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and (steps_per_epoch is None):\n        raise ValueError('If fitting from data tensors, you should specify the `steps_per_epoch` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, batch_size=batch_size)\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, it must contain 2 (x_val, y_val) or 3 (x_val, y_val, val_sample_weights) items, however it contains %d items' % len(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, sample_weight=val_sample_weight, batch_size=batch_size)\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_split and 0.0 < validation_split < 1.0:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1.0 - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1.0 - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (_slice_arrays(sample_weights, 0, split_at), _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = [0.0]\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n    out_labels = self.metrics_names\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n    return self._fit_loop(f, ins, out_labels=out_labels, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, callback_metrics=callback_metrics, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and (steps is None):\n        raise ValueError('If evaluating from data tensors, you should specify the `steps` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, batch_size=batch_size)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def predict(self, x, batch_size=None, verbose=0, steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, you should specify the `steps` argument.')\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples. Batch size: ' + str(batch_size) + '.')\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def train_on_batch(self, x, y, sample_weight=None, class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Trains the model on data yielded batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches\n            may have different sizes. For example, the last batch of the\n            epoch is commonly smaller than the others, if the size of the\n            dataset is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean. If True, use process based threading.\n            If unspecified, `use_multiprocessing` will default to False.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Boolean. Whether to shuffle the training data\n            in batch-sized chunks before each epoch.\n            Only used with instances of `Sequence` (`keras.utils.Sequence`).\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    wait_time = 0.01\n    epoch = initial_epoch\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.')\n    val_gen = hasattr(validation_data, 'next') or hasattr(validation_data, '__next__') or isinstance(validation_data, Sequence)\n    if val_gen and (not isinstance(validation_data, Sequence)) and (not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `validation_steps` or use the `keras.utils.Sequence` class.')\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(cbks.ProgbarLogger(count_mode='steps', stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'epochs': epochs, 'steps': steps_per_epoch, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics})\n    callbacks.on_train_begin()\n    enqueuer = None\n    val_enqueuer = None\n    try:\n        if do_validation:\n            if val_gen:\n                if workers > 0:\n                    if isinstance(validation_data, Sequence):\n                        val_enqueuer = OrderedEnqueuer(validation_data, use_multiprocessing=use_multiprocessing)\n                        if validation_steps is None:\n                            validation_steps = len(validation_data)\n                    else:\n                        val_enqueuer = GeneratorEnqueuer(validation_data, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n                    val_enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n                    validation_generator = val_enqueuer.get()\n                else:\n                    validation_generator = validation_data\n            else:\n                if len(validation_data) == 2:\n                    val_x, val_y = validation_data\n                    val_sample_weight = None\n                elif len(validation_data) == 3:\n                    val_x, val_y, val_sample_weight = validation_data\n                else:\n                    raise ValueError('`validation_data` should be a tuple `(val_x, val_y, val_sample_weight)` or `(val_x, val_y)`. Found: ' + str(validation_data))\n                val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, val_sample_weight)\n                val_data = val_x + val_y + val_sample_weights\n                if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n                    val_data += [0.0]\n                for cbk in callbacks:\n                    cbk.validation_data = val_data\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n        callback_model.stop_training = False\n        epoch_logs = {}\n        while epoch < epochs:\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                batch_logs = {}\n                if isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = self.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                batch_index += 1\n                steps_done += 1\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(validation_generator, validation_steps, workers=0)\n                    else:\n                        val_outs = self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n                if callback_model.stop_training:\n                    break\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n    callbacks.on_train_end()\n    return self.history",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. Batches should at least contain one item.')\n            all_outs.append(outs)\n            steps_done += 1\n            batch_sizes.append(batch_size)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if not isinstance(outs, list):\n        return np.average(np.asarray(all_outs), weights=batch_sizes)\n    else:\n        averages = []\n        for i in range(len(outs)):\n            averages.append(np.average([out[i] for out in all_outs], weights=batch_sizes))\n        return averages",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n            else:\n                x = generator_output\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                            "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n    for metric in metrics:\n        if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n            output_shape = self._internal_output_shapes[i]\n            if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.binary_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.binary_crossentropy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.sparse_categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.sparse_categorical_crossentropy\n            elif metric in ('accuracy', 'acc'):\n                metric_fn = metrics_module.categorical_accuracy\n            elif metric in ('crossentropy', 'ce'):\n                metric_fn = metrics_module.categorical_crossentropy\n            if metric in ('accuracy', 'acc'):\n                suffix = 'acc'\n            elif metric in ('crossentropy', 'ce'):\n                suffix = 'ce'\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + suffix\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            if hasattr(metric_fn, 'name'):\n                metric_name = metric_fn.name\n            else:\n                metric_name = metric_fn.__name__\n            metric_name = metric_name_prefix + metric_name\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[i] + '_' + metric_name\n        j = 1\n        base_metric_name = metric_name\n        while metric_name in self.metrics_names:\n            metric_name = base_metric_name + '_' + str(j)\n            j += 1\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_result)\n        if isinstance(metric_fn, Layer):\n            self.stateful_metric_names.append(metric_name)\n            self.metrics_updates += metric_fn.updates"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "_check_trainable_weights_consistency(self)",
                            "_make_train_function(self)",
                            "_make_test_function(self)",
                            "_make_predict_function(self)",
                            "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                            "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                            "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                            "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                            "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                            "predict(self, x, batch_size=None, verbose=0, steps=None)",
                            "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_on_batch(self, x)",
                            "fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False)",
                            "predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "handle_metrics(metrics, weights=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1399e5e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x1399dfed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x139a5ab90>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x139a28ad0>, <keras.callbacks.ProgbarLogger object at 0x139a28d50>, <keras.callbacks.History object at 0x139a5ab90>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x111a83320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x139a28cd0>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x139a28cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x139a28cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x139a28cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x139a28350>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139a28350>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x139dab150>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139a28350>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x139a28cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123],\n       [ 48, 245],\n       [180, 156],\n       [ 11,   6],\n       [234, 110],\n       [255, 213]]), array([1, 0, 0, 1, 0, 0, 1, 0, 1, 0]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123],\n       [ 48, 245],\n       [180, 156],\n       [ 11,   6],\n       [234, 110],\n       [255, 213]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 0, 0, 1, 0, 0, 1, 0, 1, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 13130.568}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x139a28cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[13130.568]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "13130.568",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x139a28cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x139a28cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139a28350>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x139a28cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1399e5e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x1399dfed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x139d38c90>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x139a5ab90>, <keras.callbacks.ProgbarLogger object at 0x139db5690>, <keras.callbacks.History object at 0x139d38c90>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x139dfe6e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x139db5810>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x139db5810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x139db5810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x139db5810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x139db5610>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139db5610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x139dab850>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139db5610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x139db5810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[129,  39],\n       [ 45,  39],\n       [136,  92],\n       [160, 150],\n       [255, 240],\n       [234, 212],\n       [190, 117],\n       [ 59, 212],\n       [196,  89],\n       [ 41, 161]]), array([1, 0, 1, 1, 0, 0, 1, 1, 0, 1]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[129,  39],\n       [ 45,  39],\n       [136,  92],\n       [160, 150],\n       [255, 240],\n       [234, 212],\n       [190, 117],\n       [ 59, 212],\n       [196,  89],\n       [ 41, 161]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 0, 1, 1, 0, 0, 1, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 10036.873}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x139db5810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[10036.873]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "10036.873",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x139db5810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x139db5810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139db5610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x139db5810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "(array([[163, 187],\n       [181, 190],\n       [169, 225],\n       [ 47, 159],\n       [232,  21],\n       [ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123]]), array([0, 0, 0, 1, 1, 1, 0, 0, 1, 0]), array([0.00540315, 0.85240199, 0.74387946, 0.78710981, 0.28557907,\n       0.97061479, 0.15770649, 0.69320103, 0.26690052, 0.04656433]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1399e5e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x1399dfed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x139df4fd0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x139d38c90>, <keras.callbacks.ProgbarLogger object at 0x139d38f10>, <keras.callbacks.History object at 0x139df4fd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x139dfae60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x139df4950>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x139df4950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x139df4950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x139df4950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x139df4f50>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": "[array([[163, 187],\n       [181, 190],\n       [169, 225],\n       [ 47, 159],\n       [232,  21],\n       [ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123]])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "val_y": {
                                    "variable_value": "[array([[0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0]])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "val_sample_weight": {
                                    "variable_value": "array([0.00540315, 0.85240199, 0.74387946, 0.78710981, 0.28557907,\n       0.97061479, 0.15770649, 0.69320103, 0.26690052, 0.04656433])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "val_sample_weights": {
                                    "variable_value": "[array([0.00540315, 0.85240199, 0.74387946, 0.78710981, 0.28557907,\n       0.97061479, 0.15770649, 0.69320103, 0.26690052, 0.04656433])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": "[array([[163, 187],\n       [181, 190],\n       [169, 225],\n       [ 47, 159],\n       [232,  21],\n       [ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123]]), array([[0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0]]), array([0.00540315, 0.85240199, 0.74387946, 0.78710981, 0.28557907,\n       0.97061479, 0.15770649, 0.69320103, 0.26690052, 0.04656433])]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": "<keras.callbacks.History object at 0x139df4fd0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": "[array([[163, 187],\n       [181, 190],\n       [169, 225],\n       [ 47, 159],\n       [232,  21],\n       [ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123]]), array([[0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0]]), array([0.00540315, 0.85240199, 0.74387946, 0.78710981, 0.28557907,\n       0.97061479, 0.15770649, 0.69320103, 0.26690052, 0.04656433])]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139df4f50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x139dab450>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139df4f50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 3425.034423828125, 'loss': 6585.164792480468}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x139df4950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 58, 179],\n       [123,  60],\n       [129,  39],\n       [ 45,  39],\n       [136,  92],\n       [160, 150],\n       [255, 240],\n       [234, 212],\n       [190, 117],\n       [ 59, 212]]), array([1, 0, 1, 0, 1, 1, 0, 0, 1, 1]), array([0.25271136, 0.98286645, 0.50870567, 0.29303766, 0.16797875,\n       0.96581381, 0.31160127, 0.21765897, 0.79984976, 0.12367146]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[ 58, 179],\n       [123,  60],\n       [129,  39],\n       [ 45,  39],\n       [136,  92],\n       [160, 150],\n       [255, 240],\n       [234, 212],\n       [190, 117],\n       [ 59, 212]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 0, 1, 0, 1, 1, 0, 0, 1, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.25271136, 0.98286645, 0.50870567, 0.29303766, 0.16797875,\n       0.96581381, 0.31160127, 0.21765897, 0.79984976, 0.12367146])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 3143.8308}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x139df4950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[3143.8308]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "3425.034423828125",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x139df4950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[3425.034423828125]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x139df4950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139df4f50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x139df4950>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "(array([[163, 187],\n       [181, 190],\n       [169, 225],\n       [ 47, 159],\n       [232,  21],\n       [ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123]]), array([0, 0, 0, 1, 1, 1, 0, 0, 1, 0]), array([0.00540315, 0.85240199, 0.74387946, 0.78710981, 0.28557907,\n       0.97061479, 0.15770649, 0.69320103, 0.26690052, 0.04656433]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1399e5e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x1399dfed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x139db5810>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x139db5610>, <keras.callbacks.ProgbarLogger object at 0x139db5ed0>, <keras.callbacks.History object at 0x139db5810>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x139dfe8c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x139db54d0>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x139db54d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x139db54d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x139db54d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x139db5bd0>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": "[array([[163, 187],\n       [181, 190],\n       [169, 225],\n       [ 47, 159],\n       [232,  21],\n       [ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123]])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "val_y": {
                                    "variable_value": "[array([[0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0]])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "val_sample_weight": {
                                    "variable_value": "array([0.00540315, 0.85240199, 0.74387946, 0.78710981, 0.28557907,\n       0.97061479, 0.15770649, 0.69320103, 0.26690052, 0.04656433])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "val_sample_weights": {
                                    "variable_value": "[array([0.00540315, 0.85240199, 0.74387946, 0.78710981, 0.28557907,\n       0.97061479, 0.15770649, 0.69320103, 0.26690052, 0.04656433])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": "[array([[163, 187],\n       [181, 190],\n       [169, 225],\n       [ 47, 159],\n       [232,  21],\n       [ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123]]), array([[0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0]]), array([0.00540315, 0.85240199, 0.74387946, 0.78710981, 0.28557907,\n       0.97061479, 0.15770649, 0.69320103, 0.26690052, 0.04656433])]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": "<keras.callbacks.History object at 0x139db5810>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": "[array([[163, 187],\n       [181, 190],\n       [169, 225],\n       [ 47, 159],\n       [232,  21],\n       [ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123]]), array([[0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0]]), array([0.00540315, 0.85240199, 0.74387946, 0.78710981, 0.28557907,\n       0.97061479, 0.15770649, 0.69320103, 0.26690052, 0.04656433])]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139db5bd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x139dab850>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139db5bd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 3372.881591796875, 'loss': 5649.787978515625}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x139db54d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 58, 179],\n       [123,  60],\n       [129,  39],\n       [ 45,  39],\n       [136,  92],\n       [160, 150],\n       [255, 240],\n       [234, 212],\n       [190, 117],\n       [ 59, 212]]), array([1, 0, 1, 0, 1, 1, 0, 0, 1, 1]), array([0.25271136, 0.98286645, 0.50870567, 0.29303766, 0.16797875,\n       0.96581381, 0.31160127, 0.21765897, 0.79984976, 0.12367146]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[ 58, 179],\n       [123,  60],\n       [129,  39],\n       [ 45,  39],\n       [136,  92],\n       [160, 150],\n       [255, 240],\n       [234, 212],\n       [190, 117],\n       [ 59, 212]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 0, 1, 0, 1, 1, 0, 0, 1, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.25271136, 0.98286645, 0.50870567, 0.29303766, 0.16797875,\n       0.96581381, 0.31160127, 0.21765897, 0.79984976, 0.12367146])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 2418.2727}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x139db54d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[2418.2727]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "3372.881591796875",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x139db54d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[3372.881591796875]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x139db54d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139db5bd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x139db54d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x139dab750>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1399e5e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x1399dfed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x139dcf310>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x139d7b510>, <keras.callbacks.ProgbarLogger object at 0x139dcf390>, <keras.callbacks.History object at 0x139dcf310>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x139a6e2d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x139dcf710>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x139dcf710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x139dcf710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x139dcf710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x139e142d0>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x139dcf810>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139dcf810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x139dab150>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139dcf810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139e142d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x139dab2d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139e142d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 5943.0400390625, 'loss': 4641.848103027343}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x139dcf710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[220,  32],\n       [ 89, 129],\n       [231, 243],\n       [140,  91],\n       [186, 248],\n       [232,  62],\n       [ 76, 160],\n       [ 15,  33],\n       [147,   3],\n       [ 58, 179]]), array([1, 0, 1, 0, 1, 0, 1, 1, 1, 1]), array([0.21631283, 0.54234065, 0.90078412, 0.45393276, 0.29777327,\n       0.05286551, 0.68513251, 0.94873929, 0.36184511, 0.25271136]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[220,  32],\n       [ 89, 129],\n       [231, 243],\n       [140,  91],\n       [186, 248],\n       [232,  62],\n       [ 76, 160],\n       [ 15,  33],\n       [147,   3],\n       [ 58, 179]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 0, 1, 0, 1, 0, 1, 1, 1, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.21631283, 0.54234065, 0.90078412, 0.45393276, 0.29777327,\n       0.05286551, 0.68513251, 0.94873929, 0.36184511, 0.25271136])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 2368.2273}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x139dcf710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[2368.2273]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "5943.0400390625",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x139dcf710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[5943.0400390625]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x139dcf710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139e142d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139dcf810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x139dcf710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x139dab750>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1399e5e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x1399dfed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x139e19610>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x139e19750>, <keras.callbacks.ProgbarLogger object at 0x139e192d0>, <keras.callbacks.History object at 0x139e19610>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x139de6af0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x139e19390>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x139e19390>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x139e19390>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x139e19390>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x139e191d0>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x139e196d0>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139e196d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x139dab450>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139e196d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139e191d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x139dab0d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139e191d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 5358.60302734375, 'loss': 4189.5277966308595}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x139e19390>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[226, 125],\n       [220,  32],\n       [ 89, 129],\n       [231, 243],\n       [140,  91],\n       [186, 248],\n       [232,  62],\n       [ 76, 160],\n       [ 15,  33],\n       [147,   3]]), array([1, 1, 0, 1, 0, 1, 0, 1, 1, 1]), array([0.40134764, 0.21631283, 0.54234065, 0.90078412, 0.45393276,\n       0.29777327, 0.05286551, 0.68513251, 0.94873929, 0.36184511]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[226, 125],\n       [220,  32],\n       [ 89, 129],\n       [231, 243],\n       [140,  91],\n       [186, 248],\n       [232,  62],\n       [ 76, 160],\n       [ 15,  33],\n       [147,   3]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 1, 0, 1, 0, 1, 0, 1, 1, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.40134764, 0.21631283, 0.54234065, 0.90078412, 0.45393276,\n       0.29777327, 0.05286551, 0.68513251, 0.94873929, 0.36184511])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 2240.9517}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x139e19390>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[2240.9517]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "5358.60302734375",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x139e19390>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[5358.60302734375]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x139e19390>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139e191d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x139e196d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x139e19390>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x139dab750>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1399e5e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x1399dfed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x139df4990>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x139df4b90>, <keras.callbacks.ProgbarLogger object at 0x139df4d10>, <keras.callbacks.History object at 0x139df4990>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x1399f0870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x139df4cd0>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x139df4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x139df4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x139df4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x139dab750>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x1399dfed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 5986.4169921875, 'loss': 3575.4685302734374}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x139df4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 47, 159],\n       [232,  21],\n       [ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123],\n       [ 48, 245],\n       [180, 156],\n       [ 11,   6]]), array([1, 1, 1, 0, 0, 1, 0, 0, 1, 0]), array([0.78710981, 0.28557907, 0.97061479, 0.15770649, 0.69320103,\n       0.26690052, 0.04656433, 0.98842751, 0.77220709, 0.86691332]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[ 47, 159],\n       [232,  21],\n       [ 24, 150],\n       [171, 244],\n       [ 92, 140],\n       [186, 184],\n       [152, 123],\n       [ 48, 245],\n       [180, 156],\n       [ 11,   6]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 1, 1, 0, 0, 1, 0, 0, 1, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.78710981, 0.28557907, 0.97061479, 0.15770649, 0.69320103,\n       0.26690052, 0.04656433, 0.98842751, 0.77220709, 0.86691332])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 5105.282}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x139df4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[5105.282]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "5986.4169921875",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x139df4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[5986.4169921875]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x139df4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x139df4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x139dab750>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1399e5e10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x1399dfed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x139e1c5d0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x139e1c1d0>, <keras.callbacks.ProgbarLogger object at 0x139e1c650>, <keras.callbacks.History object at 0x139e1c5d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x1144e3910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x139e1c410>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x1399e53d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x139e1c410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x139e1c410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x139e1c410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x139dab750>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x1399dfed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 1134.1441650390625, 'loss': 3006.9878112792967}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x139e1c410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 48, 245],\n       [180, 156],\n       [ 11,   6],\n       [234, 110],\n       [255, 213],\n       [111, 144],\n       [138,  30],\n       [249, 153],\n       [210,  89],\n       [243,  53]]), array([0, 1, 0, 1, 0, 0, 0, 1, 0, 1]), array([0.98842751, 0.77220709, 0.86691332, 0.97496391, 0.66104488,\n       0.9606256 , 0.83030728, 0.53925287, 0.3085798 , 0.3745399 ]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[ 48, 245],\n       [180, 156],\n       [ 11,   6],\n       [234, 110],\n       [255, 213],\n       [111, 144],\n       [138,  30],\n       [249, 153],\n       [210,  89],\n       [243,  53]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([0, 1, 0, 1, 0, 0, 0, 1, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.98842751, 0.77220709, 0.86691332, 0.97496391, 0.66104488,\n       0.9606256 , 0.83030728, 0.53925287, 0.3085798 , 0.3745399 ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 5064.18}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x139e1c410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[5064.18]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "1134.1441650390625",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x139e1c410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[1134.1441650390625]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x1399e5e10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x139e1c410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x139e1c410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d79e0d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x11d7c58d0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x11d7c5d90>, <keras.callbacks.ProgbarLogger object at 0x11d7c5650>, <keras.callbacks.History object at 0x11d7c58d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x10467b320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x11d7c5510>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x11d7c5510>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x11d7c5510>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x11d7c5510>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x11d7c5f90>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11d7c5f90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11d7c5f90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x11d7c5510>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[221, 196],\n       [185, 204],\n       [210, 236],\n       [227,  89],\n       [249, 201],\n       [156, 199],\n       [168,  34],\n       [ 94,   8],\n       [104, 106],\n       [ 98,  53]]), array([1, 0, 0, 1, 0, 0, 0, 1, 1, 1]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[221, 196],\n       [185, 204],\n       [210, 236],\n       [227,  89],\n       [249, 201],\n       [156, 199],\n       [168,  34],\n       [ 94,   8],\n       [104, 106],\n       [ 98,  53]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 0, 0, 1, 0, 0, 0, 1, 1, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 62791.3}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x11d7c5510>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[62791.3]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "62791.3",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x11d7c5510>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x11d7c5510>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11d7c5f90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x11d7c5510>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d79e0d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x12c933990>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x12c933910>, <keras.callbacks.ProgbarLogger object at 0x12c933ed0>, <keras.callbacks.History object at 0x12c933990>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x12c957140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x12c9337d0>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x12c9337d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x12c9337d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x12c9337d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x12c933450>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c933450>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c933450>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x12c9337d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[101, 119],\n       [ 59,  35],\n       [160, 160],\n       [ 13, 141],\n       [140, 111],\n       [ 51, 106],\n       [ 77,   2],\n       [221,  48],\n       [131,  48],\n       [ 32, 178]]), array([0, 0, 1, 1, 1, 1, 1, 1, 0, 0]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[101, 119],\n       [ 59,  35],\n       [160, 160],\n       [ 13, 141],\n       [140, 111],\n       [ 51, 106],\n       [ 77,   2],\n       [221,  48],\n       [131,  48],\n       [ 32, 178]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([0, 0, 1, 1, 1, 1, 1, 1, 0, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 18935.012}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x12c9337d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[18935.012]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "18935.012",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x12c9337d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x12c9337d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c933450>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x12c9337d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "(array([[ 27, 202],\n       [125, 112],\n       [241, 227],\n       [ 51, 227],\n       [ 58, 228],\n       [170, 129],\n       [118,  39],\n       [ 73, 198],\n       [ 44,  23],\n       [182,  93]]), array([1, 0, 0, 0, 0, 1, 1, 1, 0, 0]), array([0.55234602, 0.50179129, 0.63127453, 0.49137459, 0.84499859,\n       0.78048632, 0.18547722, 0.72596031, 0.28928723, 0.61544927]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d79e0d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x12c973fd0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x12c973c50>, <keras.callbacks.ProgbarLogger object at 0x12c973f50>, <keras.callbacks.History object at 0x12c973fd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x12c8e3f50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x12c973c90>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x12c973c90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x12c973c90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x12c973c90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x12c973c10>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": "[array([[ 27, 202],\n       [125, 112],\n       [241, 227],\n       [ 51, 227],\n       [ 58, 228],\n       [170, 129],\n       [118,  39],\n       [ 73, 198],\n       [ 44,  23],\n       [182,  93]])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "val_y": {
                                    "variable_value": "[array([[1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0]])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "val_sample_weight": {
                                    "variable_value": "array([0.55234602, 0.50179129, 0.63127453, 0.49137459, 0.84499859,\n       0.78048632, 0.18547722, 0.72596031, 0.28928723, 0.61544927])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "val_sample_weights": {
                                    "variable_value": "[array([0.55234602, 0.50179129, 0.63127453, 0.49137459, 0.84499859,\n       0.78048632, 0.18547722, 0.72596031, 0.28928723, 0.61544927])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": "[array([[ 27, 202],\n       [125, 112],\n       [241, 227],\n       [ 51, 227],\n       [ 58, 228],\n       [170, 129],\n       [118,  39],\n       [ 73, 198],\n       [ 44,  23],\n       [182,  93]]), array([[1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0]]), array([0.55234602, 0.50179129, 0.63127453, 0.49137459, 0.84499859,\n       0.78048632, 0.18547722, 0.72596031, 0.28928723, 0.61544927])]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": "<keras.callbacks.History object at 0x12c973fd0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": "[array([[ 27, 202],\n       [125, 112],\n       [241, 227],\n       [ 51, 227],\n       [ 58, 228],\n       [170, 129],\n       [118,  39],\n       [ 73, 198],\n       [ 44,  23],\n       [182,  93]]), array([[1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0]]), array([0.55234602, 0.50179129, 0.63127453, 0.49137459, 0.84499859,\n       0.78048632, 0.18547722, 0.72596031, 0.28928723, 0.61544927])]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c973c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c973c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 21240.16015625, 'loss': 13011.422822265626}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x12c973c90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 51, 106],\n       [ 77,   2],\n       [221,  48],\n       [131,  48],\n       [ 32, 178],\n       [124, 134],\n       [ 19, 122],\n       [ 23, 249],\n       [221,  30],\n       [172, 148]]), array([1, 1, 1, 0, 0, 0, 1, 0, 0, 0]), array([0.16846477, 0.42993787, 0.42311036, 0.8373693 , 0.72501726,\n       0.72028359, 0.29907002, 0.3114859 , 0.52240338, 0.37188666]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[ 51, 106],\n       [ 77,   2],\n       [221,  48],\n       [131,  48],\n       [ 32, 178],\n       [124, 134],\n       [ 19, 122],\n       [ 23, 249],\n       [221,  30],\n       [172, 148]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 1, 1, 0, 0, 0, 1, 0, 0, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.16846477, 0.42993787, 0.42311036, 0.8373693 , 0.72501726,\n       0.72028359, 0.29907002, 0.3114859 , 0.52240338, 0.37188666])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 9028.902}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x12c973c90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[9028.902]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "21240.16015625",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x12c973c90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[21240.16015625]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x12c973c90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c973c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x12c973c90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "(array([[ 27, 202],\n       [125, 112],\n       [241, 227],\n       [ 51, 227],\n       [ 58, 228],\n       [170, 129],\n       [118,  39],\n       [ 73, 198],\n       [ 44,  23],\n       [182,  93]]), array([1, 0, 0, 0, 0, 1, 1, 1, 0, 0]), array([0.55234602, 0.50179129, 0.63127453, 0.49137459, 0.84499859,\n       0.78048632, 0.18547722, 0.72596031, 0.28928723, 0.61544927]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d79e0d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x12c993bd0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x12c919790>, <keras.callbacks.ProgbarLogger object at 0x12c993b10>, <keras.callbacks.History object at 0x12c993bd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x12c9575f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x12c993ad0>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x12c993ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x12c993ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x12c993ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x12c993fd0>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": "[array([[ 27, 202],\n       [125, 112],\n       [241, 227],\n       [ 51, 227],\n       [ 58, 228],\n       [170, 129],\n       [118,  39],\n       [ 73, 198],\n       [ 44,  23],\n       [182,  93]])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "val_y": {
                                    "variable_value": "[array([[1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0]])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "val_sample_weight": {
                                    "variable_value": "array([0.55234602, 0.50179129, 0.63127453, 0.49137459, 0.84499859,\n       0.78048632, 0.18547722, 0.72596031, 0.28928723, 0.61544927])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "val_sample_weights": {
                                    "variable_value": "[array([0.55234602, 0.50179129, 0.63127453, 0.49137459, 0.84499859,\n       0.78048632, 0.18547722, 0.72596031, 0.28928723, 0.61544927])]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": "[array([[ 27, 202],\n       [125, 112],\n       [241, 227],\n       [ 51, 227],\n       [ 58, 228],\n       [170, 129],\n       [118,  39],\n       [ 73, 198],\n       [ 44,  23],\n       [182,  93]]), array([[1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0]]), array([0.55234602, 0.50179129, 0.63127453, 0.49137459, 0.84499859,\n       0.78048632, 0.18547722, 0.72596031, 0.28928723, 0.61544927])]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": "<keras.callbacks.History object at 0x12c993bd0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": "[array([[ 27, 202],\n       [125, 112],\n       [241, 227],\n       [ 51, 227],\n       [ 58, 228],\n       [170, 129],\n       [118,  39],\n       [ 73, 198],\n       [ 44,  23],\n       [182,  93]]), array([[1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0]]), array([0.55234602, 0.50179129, 0.63127453, 0.49137459, 0.84499859,\n       0.78048632, 0.18547722, 0.72596031, 0.28928723, 0.61544927])]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c993fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c993fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 16763.47265625, 'loss': 10428.277744140625}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x12c993ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 51, 106],\n       [ 77,   2],\n       [221,  48],\n       [131,  48],\n       [ 32, 178],\n       [124, 134],\n       [ 19, 122],\n       [ 23, 249],\n       [221,  30],\n       [172, 148]]), array([1, 1, 1, 0, 0, 0, 1, 0, 0, 0]), array([0.16846477, 0.42993787, 0.42311036, 0.8373693 , 0.72501726,\n       0.72028359, 0.29907002, 0.3114859 , 0.52240338, 0.37188666]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[ 51, 106],\n       [ 77,   2],\n       [221,  48],\n       [131,  48],\n       [ 32, 178],\n       [124, 134],\n       [ 19, 122],\n       [ 23, 249],\n       [221,  30],\n       [172, 148]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 1, 1, 0, 0, 0, 1, 0, 0, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.16846477, 0.42993787, 0.42311036, 0.8373693 , 0.72501726,\n       0.72028359, 0.29907002, 0.3114859 , 0.52240338, 0.37188666])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 7039.926}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x12c993ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[7039.926]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "16763.47265625",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x12c993ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[16763.47265625]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x12c993ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c993fd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x12c993ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d79e0d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x12c973c90>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x12c973c50>, <keras.callbacks.ProgbarLogger object at 0x12c973e50>, <keras.callbacks.History object at 0x12c973c90>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x12c66caf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x12c973d90>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x12c973d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x12c973d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x12c973d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x12c94da50>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x12c973d50>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c973d50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12c94c350>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c973d50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c94da50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12c94c650>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c94da50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 4993.2216796875, 'loss': 8099.635852050781}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x12c973d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 44,  23],\n       [182,  93],\n       [ 94,  87],\n       [124,  36],\n       [174, 227],\n       [193,  72],\n       [221, 196],\n       [185, 204],\n       [210, 236],\n       [227,  89]]), array([0, 0, 1, 1, 1, 1, 1, 0, 0, 1]), array([0.28928723, 0.61544927, 0.46465196, 0.38786727, 0.36033252,\n       0.39624665, 0.95647952, 0.28320234, 0.59627897, 0.08619197]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[ 44,  23],\n       [182,  93],\n       [ 94,  87],\n       [124,  36],\n       [174, 227],\n       [193,  72],\n       [221, 196],\n       [185, 204],\n       [210, 236],\n       [227,  89]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([0, 0, 1, 1, 1, 1, 1, 0, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.28928723, 0.61544927, 0.46465196, 0.38786727, 0.36033252,\n       0.39624665, 0.95647952, 0.28320234, 0.59627897, 0.08619197])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 8750.061}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x12c973d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[8750.061]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "4993.2216796875",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x12c973d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[4993.2216796875]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x12c973d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c94da50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c973d50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x12c973d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d79e0d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x12c919790>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x12c997990>, <keras.callbacks.ProgbarLogger object at 0x12c997a50>, <keras.callbacks.History object at 0x12c919790>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d7c6af0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x12c997810>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x12c997810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x12c997810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x12c997810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x12c997410>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x12c9975d0>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c9975d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12c94c750>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c9975d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c997410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12c94c050>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c997410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 7417.48291015625, 'loss': 5655.790256347656}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x12c997810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[124,  36],\n       [174, 227],\n       [193,  72],\n       [221, 196],\n       [185, 204],\n       [210, 236],\n       [227,  89],\n       [249, 201],\n       [156, 199],\n       [168,  34]]), array([1, 1, 1, 1, 0, 0, 1, 0, 0, 0]), array([0.38786727, 0.36033252, 0.39624665, 0.95647952, 0.28320234,\n       0.59627897, 0.08619197, 0.50760645, 0.26980778, 0.07945201]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[124,  36],\n       [174, 227],\n       [193,  72],\n       [221, 196],\n       [185, 204],\n       [210, 236],\n       [227,  89],\n       [249, 201],\n       [156, 199],\n       [168,  34]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 1, 1, 1, 0, 0, 1, 0, 0, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.38786727, 0.36033252, 0.39624665, 0.95647952, 0.28320234,\n       0.59627897, 0.08619197, 0.50760645, 0.26980778, 0.07945201])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 6683.0405}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x12c997810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[6683.0405]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "7417.48291015625",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x12c997810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[7417.48291015625]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x12c997810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c997410>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x12c9975d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x12c997810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d79e0d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x12c993190>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x12c919790>, <keras.callbacks.ProgbarLogger object at 0x12c8f8810>, <keras.callbacks.History object at 0x12c993190>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x12c968b90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x12c993e50>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x12c993e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x12c993e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x12c993e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 1027.50830078125, 'loss': 3652.074333496094}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x12c993e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 51, 106],\n       [ 77,   2],\n       [221,  48],\n       [131,  48],\n       [ 32, 178],\n       [124, 134],\n       [ 19, 122],\n       [ 23, 249],\n       [221,  30],\n       [172, 148]]), array([1, 1, 1, 0, 0, 0, 1, 0, 0, 0]), array([0.16846477, 0.42993787, 0.42311036, 0.8373693 , 0.72501726,\n       0.72028359, 0.29907002, 0.3114859 , 0.52240338, 0.37188666]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[ 51, 106],\n       [ 77,   2],\n       [221,  48],\n       [131,  48],\n       [ 32, 178],\n       [124, 134],\n       [ 19, 122],\n       [ 23, 249],\n       [221,  30],\n       [172, 148]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 1, 1, 0, 0, 0, 1, 0, 0, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.16846477, 0.42993787, 0.42311036, 0.8373693 , 0.72501726,\n       0.72028359, 0.29907002, 0.3114859 , 0.52240338, 0.37188666])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 2316.7864}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x12c993e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[2316.7864]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "1027.50830078125",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x12c993e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[1027.50830078125]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x12c993e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x12c993e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d79e0d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x12c9337d0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x12c933ed0>, <keras.callbacks.ProgbarLogger object at 0x12c933450>, <keras.callbacks.History object at 0x12c9337d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d7c6af0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x12c933990>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x12c933990>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x12c933990>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x12c933990>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 2923.73583984375, 'loss': 2123.3682147216796}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x12c933990>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[174, 227],\n       [193,  72],\n       [221, 196],\n       [185, 204],\n       [210, 236],\n       [227,  89],\n       [249, 201],\n       [156, 199],\n       [168,  34],\n       [ 94,   8]]), array([1, 1, 1, 0, 0, 1, 0, 0, 0, 1]), array([0.36033252, 0.39624665, 0.95647952, 0.28320234, 0.59627897,\n       0.08619197, 0.50760645, 0.26980778, 0.07945201, 0.12171793]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[174, 227],\n       [193,  72],\n       [221, 196],\n       [185, 204],\n       [210, 236],\n       [227,  89],\n       [249, 201],\n       [156, 199],\n       [168,  34],\n       [ 94,   8]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 1, 1, 0, 0, 1, 0, 0, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.36033252, 0.39624665, 0.95647952, 0.28320234, 0.59627897,\n       0.08619197, 0.50760645, 0.26980778, 0.07945201, 0.12171793])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 1974.6985}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x12c933990>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[1974.6985]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "2923.73583984375",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x12c933990>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[2923.73583984375]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x12c933990>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x12c933990>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d79e0d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_multiprocessing.DummySequence object at 0x12c99add0>",
                                    "variable_type": "DummySequence",
                                    "variable_shape": "10"
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x12c99a890>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x12c99a710>, <keras.callbacks.ProgbarLogger object at 0x12c99a4d0>, <keras.callbacks.History object at 0x12c99a890>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x12c9575f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x12c99a590>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x12c99a590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x12c99a590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x12c99a590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object Sequence.__iter__ at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 1606.366455078125, 'loss': 0.032473503798246386}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x12c99a590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 0.0321641}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x12c99a590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.0321641]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "1606.366455078125",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x12c99a590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[1606.366455078125]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x12c99a590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x12c99a590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d79e0d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_multiprocessing.DummySequence object at 0x12c90e2d0>",
                                    "variable_type": "DummySequence",
                                    "variable_shape": "10"
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'val_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x12c90eed0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x12c94df10>, <keras.callbacks.ProgbarLogger object at 0x12c94d990>, <keras.callbacks.History object at 0x12c90eed0>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x12c963730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x12c94dfd0>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.models.Sequential object at 0x11d78d250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x12c94dfd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x12c94dfd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x12c94dfd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "validation_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x11d785dd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object Sequence.__iter__ at 0x12c796b50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 1852.244384765625, 'loss': 0.030678022541105746}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x12c94dfd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "100",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.],\n       [0., 0.]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 0.027792986}",
                                    "variable_type": "dict",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x12c94dfd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.027792986]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'loss'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "o": {
                                    "variable_value": "1852.244384765625",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x12c94dfd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[1852.244384765625]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11d79e0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x12c94dfd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x12c94dfd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "evaluate_generator",
                    "function_code": "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None,\n                       max_queue_size=10,\n                       workers=1,\n                       use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator,\n                                           use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator,\n                                             use_multiprocessing=use_multiprocessing,\n                                             wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n\n            if isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. '\n                                 'Batches should at least contain one item.')\n            all_outs.append(outs)\n\n            steps_done += 1\n            batch_sizes.append(batch_size)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if not isinstance(outs, list):\n        return np.average(np.asarray(all_outs),\n                          weights=batch_sizes)\n    else:\n        averages = []\n        for i in range(len(outs)):\n            averages.append(np.average([out[i] for out in all_outs],\n                                       weights=batch_sizes))\n        return averages\n",
                    "decorators": [
                        "interfaces.legacy_generator_methods_support"
                    ],
                    "docstring": "Evaluates the model on a data generator.\n\nThe generator should return the same kind of data\nas accepted by `test_on_batch`.\n\n# Arguments\n    generator: Generator yielding tuples (inputs, targets)\n        or (inputs, targets, sample_weights)\n        or an instance of Sequence (keras.utils.Sequence)\n        object in order to avoid duplicate data\n        when using multiprocessing.\n    steps: Total number of steps (batches of samples)\n        to yield from `generator` before stopping.\n        Optional for `Sequence`: if unspecified, will use\n        the `len(generator)` as a number of steps.\n    max_queue_size: maximum size for the generator queue\n    workers: Integer. Maximum number of processes to spin up\n        when using process based threading.\n        If unspecified, `workers` will default to 1. If 0, will\n        execute the generator on the main thread.\n    use_multiprocessing: if True, use process based threading.\n        Note that because\n        this implementation relies on multiprocessing,\n        you should not pass\n        non picklable arguments to the generator\n        as they can't be passed\n        easily to children processes.\n\n# Returns\n    Scalar test loss (if the model has a single output and no metrics)\n    or list of scalars (if the model has multiple outputs\n    and/or metrics). The attribute `model.metrics_names` will give you\n    the display labels for the scalar outputs.\n\n# Raises\n    ValueError: In case the generator yields\n        data in an invalid format.",
                    "start_line": 2291,
                    "end_line": 2416,
                    "variables": {
                        "self._make_test_function": [
                            2334
                        ],
                        "self": [
                            2388,
                            2334
                        ],
                        "steps_done": [
                            2336,
                            2401,
                            2371
                        ],
                        "wait_time": [
                            2337,
                            2365
                        ],
                        "all_outs": [
                            2409,
                            2338,
                            2414,
                            2399
                        ],
                        "batch_sizes": [
                            2402,
                            2339,
                            2410,
                            2415
                        ],
                        "is_sequence": [
                            2340,
                            2341,
                            2348,
                            2359
                        ],
                        "isinstance": [
                            2392,
                            2340,
                            2390,
                            2408
                        ],
                        "generator": [
                            2369,
                            2340,
                            2349,
                            2360,
                            2363
                        ],
                        "Sequence": [
                            2340
                        ],
                        "use_multiprocessing": [
                            2361,
                            2364,
                            2341
                        ],
                        "workers": [
                            2366,
                            2341,
                            2358
                        ],
                        "warnings.warn": [
                            2342
                        ],
                        "warnings": [
                            2342
                        ],
                        "UserWarning": [
                            2343
                        ],
                        "steps": [
                            2371,
                            2347,
                            2349
                        ],
                        "len": [
                            2378,
                            2413,
                            2381,
                            2349
                        ],
                        "ValueError": [
                            2384,
                            2397,
                            2374,
                            2351
                        ],
                        "enqueuer": [
                            2405,
                            2406,
                            2355,
                            2360,
                            2363,
                            2366,
                            2367
                        ],
                        "OrderedEnqueuer": [
                            2360
                        ],
                        "GeneratorEnqueuer": [
                            2363
                        ],
                        "enqueuer.start": [
                            2366
                        ],
                        "max_queue_size": [
                            2366
                        ],
                        "output_generator": [
                            2369,
                            2372,
                            2367
                        ],
                        "enqueuer.get": [
                            2367
                        ],
                        "generator_output": [
                            2372,
                            2373,
                            2377,
                            2378,
                            2379,
                            2381,
                            2382,
                            2387
                        ],
                        "next": [
                            2372
                        ],
                        "hasattr": [
                            2373
                        ],
                        "str": [
                            2377,
                            2387
                        ],
                        "x": [
                            2379,
                            2382,
                            2388,
                            2390,
                            2391,
                            2392,
                            2393,
                            2395
                        ],
                        "y": [
                            2379,
                            2388,
                            2382
                        ],
                        "sample_weight": [
                            2380,
                            2382,
                            2388
                        ],
                        "outs": [
                            2408,
                            2388,
                            2413,
                            2399
                        ],
                        "self.test_on_batch": [
                            2388
                        ],
                        "list": [
                            2408,
                            2393,
                            2390
                        ],
                        "batch_size": [
                            2402,
                            2391,
                            2393,
                            2395,
                            2396
                        ],
                        "shape": [
                            2393,
                            2391
                        ],
                        "dict": [
                            2392
                        ],
                        "x.values": [
                            2393
                        ],
                        "x.shape": [
                            2395
                        ],
                        "all_outs.append": [
                            2399
                        ],
                        "batch_sizes.append": [
                            2402
                        ],
                        "enqueuer.stop": [
                            2406
                        ],
                        "np.average": [
                            2409,
                            2414
                        ],
                        "np": [
                            2409,
                            2414
                        ],
                        "np.asarray": [
                            2409
                        ],
                        "averages": [
                            2416,
                            2412,
                            2414
                        ],
                        "i": [
                            2413,
                            2414
                        ],
                        "range": [
                            2413
                        ],
                        "averages.append": [
                            2414
                        ],
                        "out": [
                            2414
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            2291
                        ],
                        "interfaces": [
                            2291
                        ]
                    },
                    "filtered_variables": {
                        "self._make_test_function": [
                            2334
                        ],
                        "self": [
                            2388,
                            2334
                        ],
                        "steps_done": [
                            2336,
                            2401,
                            2371
                        ],
                        "wait_time": [
                            2337,
                            2365
                        ],
                        "all_outs": [
                            2409,
                            2338,
                            2414,
                            2399
                        ],
                        "batch_sizes": [
                            2402,
                            2339,
                            2410,
                            2415
                        ],
                        "is_sequence": [
                            2340,
                            2341,
                            2348,
                            2359
                        ],
                        "generator": [
                            2369,
                            2340,
                            2349,
                            2360,
                            2363
                        ],
                        "Sequence": [
                            2340
                        ],
                        "use_multiprocessing": [
                            2361,
                            2364,
                            2341
                        ],
                        "workers": [
                            2366,
                            2341,
                            2358
                        ],
                        "warnings.warn": [
                            2342
                        ],
                        "warnings": [
                            2342
                        ],
                        "steps": [
                            2371,
                            2347,
                            2349
                        ],
                        "enqueuer": [
                            2405,
                            2406,
                            2355,
                            2360,
                            2363,
                            2366,
                            2367
                        ],
                        "OrderedEnqueuer": [
                            2360
                        ],
                        "GeneratorEnqueuer": [
                            2363
                        ],
                        "enqueuer.start": [
                            2366
                        ],
                        "max_queue_size": [
                            2366
                        ],
                        "output_generator": [
                            2369,
                            2372,
                            2367
                        ],
                        "enqueuer.get": [
                            2367
                        ],
                        "generator_output": [
                            2372,
                            2373,
                            2377,
                            2378,
                            2379,
                            2381,
                            2382,
                            2387
                        ],
                        "x": [
                            2379,
                            2382,
                            2388,
                            2390,
                            2391,
                            2392,
                            2393,
                            2395
                        ],
                        "y": [
                            2379,
                            2388,
                            2382
                        ],
                        "sample_weight": [
                            2380,
                            2382,
                            2388
                        ],
                        "outs": [
                            2408,
                            2388,
                            2413,
                            2399
                        ],
                        "self.test_on_batch": [
                            2388
                        ],
                        "batch_size": [
                            2402,
                            2391,
                            2393,
                            2395,
                            2396
                        ],
                        "shape": [
                            2393,
                            2391
                        ],
                        "x.values": [
                            2393
                        ],
                        "x.shape": [
                            2395
                        ],
                        "all_outs.append": [
                            2399
                        ],
                        "batch_sizes.append": [
                            2402
                        ],
                        "enqueuer.stop": [
                            2406
                        ],
                        "np.average": [
                            2409,
                            2414
                        ],
                        "np": [
                            2409,
                            2414
                        ],
                        "np.asarray": [
                            2409
                        ],
                        "averages": [
                            2416,
                            2412,
                            2414
                        ],
                        "i": [
                            2413,
                            2414
                        ],
                        "averages.append": [
                            2414
                        ],
                        "out": [
                            2414
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            2291
                        ],
                        "interfaces": [
                            2291
                        ]
                    },
                    "diff_line_number": 2369,
                    "class_data": {
                        "signature": "class Model(Container)",
                        "docstring": "The `Model` class adds training & evaluation routines to a `Container`.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name + '\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"' + name + '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss=' + str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n    if loss_weights is None:\n        loss_weights_list = [1.0 for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.0))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss_weights=' + str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' + str(loss_weights) + ' - expected a list of dicts.')\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError('When passing a list as `target_tensors`, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed target_tensors=' + str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n            tmp_target_tensors = []\n            for name in self.output_names:\n                tmp_target_tensors.append(target_tensors.get(name, None))\n            target_tensors = tmp_target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self._internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in sample_weight_mode dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name + '\" missing from sample_weight_modes dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed sample_weight_mode=' + str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            elif sample_weight_mode == 'temporal':\n                sample_weights.append(K.placeholder(ndim=2, name=name + '_sample_weights'))\n                sample_weight_modes.append('temporal')\n            else:\n                sample_weights.append(K.placeholder(ndim=1, name=name + '_sample_weights'))\n                sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n    self.metrics = metrics or []\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled because it has no loss to optimize.')\n            else:\n                total_loss = 0.0\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n    self.metrics_updates = []\n    self.stateful_metric_names = []\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n                for metric in metrics:\n                    if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n                        output_shape = self._internal_output_shapes[i]\n                        if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.binary_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.binary_crossentropy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.sparse_categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.sparse_categorical_crossentropy\n                        elif metric in ('accuracy', 'acc'):\n                            metric_fn = metrics_module.categorical_accuracy\n                        elif metric in ('crossentropy', 'ce'):\n                            metric_fn = metrics_module.categorical_crossentropy\n                        if metric in ('accuracy', 'acc'):\n                            suffix = 'acc'\n                        elif metric in ('crossentropy', 'ce'):\n                            suffix = 'ce'\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + suffix\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        if hasattr(metric_fn, 'name'):\n                            metric_name = metric_fn.name\n                        else:\n                            metric_name = metric_fn.__name__\n                        metric_name = metric_name_prefix + metric_name\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n                    if len(self.output_names) > 1:\n                        metric_name = self.output_names[i] + '_' + metric_name\n                    j = 1\n                    base_metric_name = metric_name\n                    while metric_name in self.metrics_names:\n                        metric_name = base_metric_name + '_' + str(j)\n                        j += 1\n                    self.metrics_names.append(metric_name)\n                    self.metrics_tensors.append(metric_result)\n                    if isinstance(metric_fn, Layer):\n                        self.stateful_metric_names.append(metric_name)\n                        self.metrics_updates += metric_fn.updates\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n    self._function_kwargs = kwargs\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                            "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n    if len(self.trainable_weights) != len(self._collected_trainable_weights):\n        warnings.warn(UserWarning('Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?'))",
                            "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)\n            updates = self.updates + training_updates + self.metrics_updates\n            self.train_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)",
                            "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        self.test_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates + self.metrics_updates, name='test_function', **self._function_kwargs)",
                            "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)",
                            "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name + ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have a defined shape, or ' + steps_name + ' should be specified.')\n    return num_samples",
                            "def _fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' % (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` when doing step-wise training, i.e. `steps_per_epoch` must be set.')\n    num_train_samples = self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        _callbacks.append(cbks.ProgbarLogger(count_mode, stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    out_labels = out_labels or []\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'batch_size': batch_size, 'epochs': epochs, 'steps': steps_per_epoch, 'samples': num_train_samples, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics or []})\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    for epoch in range(initial_epoch, epochs):\n        for m in self.metrics:\n            if isinstance(m, Layer):\n                m.reset_states()\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, steps=validation_steps, verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. If using HDF5 input data, pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                for i in indices_for_conversion_to_dense:\n                    ins_batch[i] = ins_batch[i].toarray()\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n                if batch_index == len(batches) - 1:\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                            "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    indices_for_conversion_to_dense = []\n    for i in range(len(self._feed_inputs)):\n        if issparse(ins[i]) and (not K.is_sparse(self._feed_inputs[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0) for i in range(len(unconcatenated_outs))]\n    else:\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                            "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if hasattr(self, 'metrics'):\n        for m in self.metrics:\n            if isinstance(m, Layer):\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs * len(batch_ids)\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                            "def _standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.')\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        elif not hasattr(loss_fn, '__name__') or getattr(losses, loss_fn.__name__, None) is None:\n            output_shapes.append(None)\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False, exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight, self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight, self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode) for ref, sw, cw, mode in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    if check_array_lengths:\n        _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y, self._feed_loss_fns, self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples')\n    return (x, y, sample_weights)",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and (steps_per_epoch is None):\n        raise ValueError('If fitting from data tensors, you should specify the `steps_per_epoch` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, batch_size=batch_size)\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, it must contain 2 (x_val, y_val) or 3 (x_val, y_val, val_sample_weights) items, however it contains %d items' % len(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, sample_weight=val_sample_weight, batch_size=batch_size)\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_split and 0.0 < validation_split < 1.0:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1.0 - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1.0 - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (_slice_arrays(sample_weights, 0, split_at), _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = [0.0]\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n    out_labels = self.metrics_names\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n    return self._fit_loop(f, ins, out_labels=out_labels, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, callback_metrics=callback_metrics, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and (steps is None):\n        raise ValueError('If evaluating from data tensors, you should specify the `steps` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, batch_size=batch_size)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def predict(self, x, batch_size=None, verbose=0, steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, you should specify the `steps` argument.')\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples. Batch size: ' + str(batch_size) + '.')\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def train_on_batch(self, x, y, sample_weight=None, class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Trains the model on data yielded batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches\n            may have different sizes. For example, the last batch of the\n            epoch is commonly smaller than the others, if the size of the\n            dataset is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean. If True, use process based threading.\n            If unspecified, `use_multiprocessing` will default to False.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Boolean. Whether to shuffle the training data\n            in batch-sized chunks before each epoch.\n            Only used with instances of `Sequence` (`keras.utils.Sequence`).\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    wait_time = 0.01\n    epoch = initial_epoch\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.')\n    val_gen = hasattr(validation_data, 'next') or hasattr(validation_data, '__next__') or isinstance(validation_data, Sequence)\n    if val_gen and (not isinstance(validation_data, Sequence)) and (not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `validation_steps` or use the `keras.utils.Sequence` class.')\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(cbks.ProgbarLogger(count_mode='steps', stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'epochs': epochs, 'steps': steps_per_epoch, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics})\n    callbacks.on_train_begin()\n    enqueuer = None\n    val_enqueuer = None\n    try:\n        if do_validation:\n            if val_gen:\n                if workers > 0:\n                    if isinstance(validation_data, Sequence):\n                        val_enqueuer = OrderedEnqueuer(validation_data, use_multiprocessing=use_multiprocessing)\n                        if validation_steps is None:\n                            validation_steps = len(validation_data)\n                    else:\n                        val_enqueuer = GeneratorEnqueuer(validation_data, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n                    val_enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n                    validation_generator = val_enqueuer.get()\n                else:\n                    validation_generator = validation_data\n            else:\n                if len(validation_data) == 2:\n                    val_x, val_y = validation_data\n                    val_sample_weight = None\n                elif len(validation_data) == 3:\n                    val_x, val_y, val_sample_weight = validation_data\n                else:\n                    raise ValueError('`validation_data` should be a tuple `(val_x, val_y, val_sample_weight)` or `(val_x, val_y)`. Found: ' + str(validation_data))\n                val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, val_sample_weight)\n                val_data = val_x + val_y + val_sample_weights\n                if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n                    val_data += [0.0]\n                for cbk in callbacks:\n                    cbk.validation_data = val_data\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n        callback_model.stop_training = False\n        epoch_logs = {}\n        while epoch < epochs:\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                batch_logs = {}\n                if isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = self.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                batch_index += 1\n                steps_done += 1\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(validation_generator, validation_steps, workers=0)\n                    else:\n                        val_outs = self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n                if callback_model.stop_training:\n                    break\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n    callbacks.on_train_end()\n    return self.history",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. Batches should at least contain one item.')\n            all_outs.append(outs)\n            steps_done += 1\n            batch_sizes.append(batch_size)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if not isinstance(outs, list):\n        return np.average(np.asarray(all_outs), weights=batch_sizes)\n    else:\n        averages = []\n        for i in range(len(outs)):\n            averages.append(np.average([out[i] for out in all_outs], weights=batch_sizes))\n        return averages",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n            else:\n                x = generator_output\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                            "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n    for metric in metrics:\n        if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n            output_shape = self._internal_output_shapes[i]\n            if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.binary_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.binary_crossentropy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.sparse_categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.sparse_categorical_crossentropy\n            elif metric in ('accuracy', 'acc'):\n                metric_fn = metrics_module.categorical_accuracy\n            elif metric in ('crossentropy', 'ce'):\n                metric_fn = metrics_module.categorical_crossentropy\n            if metric in ('accuracy', 'acc'):\n                suffix = 'acc'\n            elif metric in ('crossentropy', 'ce'):\n                suffix = 'ce'\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + suffix\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            if hasattr(metric_fn, 'name'):\n                metric_name = metric_fn.name\n            else:\n                metric_name = metric_fn.__name__\n            metric_name = metric_name_prefix + metric_name\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[i] + '_' + metric_name\n        j = 1\n        base_metric_name = metric_name\n        while metric_name in self.metrics_names:\n            metric_name = base_metric_name + '_' + str(j)\n            j += 1\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_result)\n        if isinstance(metric_fn, Layer):\n            self.stateful_metric_names.append(metric_name)\n            self.metrics_updates += metric_fn.updates"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "_check_trainable_weights_consistency(self)",
                            "_make_train_function(self)",
                            "_make_test_function(self)",
                            "_make_predict_function(self)",
                            "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                            "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                            "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                            "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                            "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                            "predict(self, x, batch_size=None, verbose=0, steps=None)",
                            "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_on_batch(self, x)",
                            "fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False)",
                            "predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "handle_metrics(metrics, weights=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x12a2714d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x12a2714d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[4980.367]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "batch_sizes": {
                                    "variable_value": "[10]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12a666850>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12a666850>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[106, 220],\n       [ 75,   6],\n       [201, 209],\n       [ 20, 220],\n       [163, 130],\n       [  1,  73],\n       [151,  50],\n       [206,  56],\n       [ 98, 205],\n       [150,  63]]), array([1, 1, 0, 0, 1, 0, 0, 0, 1, 1]), array([0.1618681 , 0.07861502, 0.42682415, 0.30948782, 0.86868905,\n       0.0369706 , 0.13056968, 0.64623921, 0.77213063, 0.74340034]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[106, 220],\n       [ 75,   6],\n       [201, 209],\n       [ 20, 220],\n       [163, 130],\n       [  1,  73],\n       [151,  50],\n       [206,  56],\n       [ 98, 205],\n       [150,  63]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 1, 0, 0, 1, 0, 0, 0, 1, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.1618681 , 0.07861502, 0.42682415, 0.30948782, 0.86868905,\n       0.0369706 , 0.13056968, 0.64623921, 0.77213063, 0.74340034])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "outs": {
                                    "variable_value": "4980.367",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x12a2714d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x12a6009b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x12a709dc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x12a2714d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x12a2714d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[4008.2368]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "batch_sizes": {
                                    "variable_value": "[10]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12a666350>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x12a666350>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[150,  63],\n       [ 53, 250],\n       [222,   9],\n       [213, 174],\n       [179, 180],\n       [ 23, 115],\n       [255,  16],\n       [119, 138],\n       [148, 104],\n       [ 46,  45]]), array([1, 1, 1, 0, 1, 0, 0, 1, 1, 0]), array([0.74340034, 0.69171018, 0.34288864, 0.65759602, 0.89405327,\n       0.34684493, 0.96364346, 0.65163238, 0.28618613, 0.62604874]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[150,  63],\n       [ 53, 250],\n       [222,   9],\n       [213, 174],\n       [179, 180],\n       [ 23, 115],\n       [255,  16],\n       [119, 138],\n       [148, 104],\n       [ 46,  45]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 1, 1, 0, 1, 0, 0, 1, 1, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.74340034, 0.69171018, 0.34288864, 0.65759602, 0.89405327,\n       0.34684493, 0.96364346, 0.65163238, 0.28618613, 0.62604874])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "outs": {
                                    "variable_value": "4008.2368",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x12a2714d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x12a6f9410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x12a67fd70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x12a2714d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x12a2714d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[2755.0474]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "batch_sizes": {
                                    "variable_value": "[10]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x12a666450>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x12a666450>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[150,  63],\n       [ 53, 250],\n       [222,   9],\n       [213, 174],\n       [179, 180],\n       [ 23, 115],\n       [255,  16],\n       [119, 138],\n       [148, 104],\n       [ 46,  45]]), array([1, 1, 1, 0, 1, 0, 0, 1, 1, 0]), array([0.74340034, 0.69171018, 0.34288864, 0.65759602, 0.89405327,\n       0.34684493, 0.96364346, 0.65163238, 0.28618613, 0.62604874]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[150,  63],\n       [ 53, 250],\n       [222,   9],\n       [213, 174],\n       [179, 180],\n       [ 23, 115],\n       [255,  16],\n       [119, 138],\n       [148, 104],\n       [ 46,  45]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([1, 1, 1, 0, 1, 0, 0, 1, 1, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.74340034, 0.69171018, 0.34288864, 0.65759602, 0.89405327,\n       0.34684493, 0.96364346, 0.65163238, 0.28618613, 0.62604874])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "outs": {
                                    "variable_value": "2755.0474",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x12a2714d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x12a2b32d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x12a26b780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x12a2714d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x12a2714d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[1279.806]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "batch_sizes": {
                                    "variable_value": "[10]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x12a666450>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x12a666450>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 23, 115],\n       [255,  16],\n       [119, 138],\n       [148, 104],\n       [ 46,  45],\n       [  0, 142],\n       [240,  59],\n       [151,  58],\n       [192, 216],\n       [ 81, 151]]), array([0, 0, 1, 1, 0, 0, 1, 1, 1, 1]), array([0.34684493, 0.96364346, 0.65163238, 0.28618613, 0.62604874,\n       0.10234028, 0.92153865, 0.92217042, 0.88426519, 0.26368491]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[ 23, 115],\n       [255,  16],\n       [119, 138],\n       [148, 104],\n       [ 46,  45],\n       [  0, 142],\n       [240,  59],\n       [151,  58],\n       [192, 216],\n       [ 81, 151]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([0, 0, 1, 1, 0, 0, 1, 1, 1, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.34684493, 0.96364346, 0.65163238, 0.28618613, 0.62604874,\n       0.10234028, 0.92153865, 0.92217042, 0.88426519, 0.26368491])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "outs": {
                                    "variable_value": "1279.806",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x12a2714d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x12a672dc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x12a26c9b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x134017e50>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[6467.6826]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "batch_sizes": {
                                    "variable_value": "[10]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x13441b850>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x13441b850>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[148, 104],\n       [190,   9],\n       [227,  73],\n       [ 81, 119],\n       [167,   8],\n       [233, 158],\n       [  5, 254],\n       [ 17, 169],\n       [130, 205],\n       [228,  12]]), array([0, 1, 0, 0, 1, 1, 0, 0, 1, 0]), array([0.73173818, 0.56628879, 0.23311896, 0.52336287, 0.30055528,\n       0.86751229, 0.04762643, 0.51212681, 0.0109023 , 0.4722413 ]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[148, 104],\n       [190,   9],\n       [227,  73],\n       [ 81, 119],\n       [167,   8],\n       [233, 158],\n       [  5, 254],\n       [ 17, 169],\n       [130, 205],\n       [228,  12]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([0, 1, 0, 0, 1, 1, 0, 0, 1, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.73173818, 0.56628879, 0.23311896, 0.52336287, 0.30055528,\n       0.86751229, 0.04762643, 0.51212681, 0.0109023 , 0.4722413 ])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "outs": {
                                    "variable_value": "6467.6826",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x134458be0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1344b5d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x134017e50>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[6035.297]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "batch_sizes": {
                                    "variable_value": "[10]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x13441b350>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x13441b350>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[  3, 125],\n       [114, 125],\n       [177, 198],\n       [ 24, 142],\n       [173, 137],\n       [ 87,  78],\n       [207, 245],\n       [ 39, 230],\n       [ 25,  78],\n       [225, 191]]), array([0, 1, 0, 1, 1, 0, 0, 1, 0, 0]), array([0.64846286, 0.68647114, 0.28548172, 0.99809299, 0.71143636,\n       0.59476821, 0.25507266, 0.98588259, 0.70841604, 0.36262517]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[  3, 125],\n       [114, 125],\n       [177, 198],\n       [ 24, 142],\n       [173, 137],\n       [ 87,  78],\n       [207, 245],\n       [ 39, 230],\n       [ 25,  78],\n       [225, 191]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([0, 1, 0, 1, 1, 0, 0, 1, 0, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.64846286, 0.68647114, 0.28548172, 0.99809299, 0.71143636,\n       0.59476821, 0.25507266, 0.98588259, 0.70841604, 0.36262517])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "outs": {
                                    "variable_value": "6035.297",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x134441c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x134441d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x134017e50>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[3609.082]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "batch_sizes": {
                                    "variable_value": "[10]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x13441b450>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x13441b450>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 64,  22],\n       [229, 241],\n       [ 51,  10],\n       [193,  62],\n       [188, 138],\n       [152, 246],\n       [190, 240],\n       [200, 174],\n       [232, 118],\n       [ 73, 132]]), array([0, 1, 0, 1, 0, 0, 0, 1, 0, 0]), array([0.90153369, 0.18614482, 0.20211549, 0.02571299, 0.82352198,\n       0.03064306, 0.77217139, 0.15027546, 0.79430565, 0.95711541]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[ 64,  22],\n       [229, 241],\n       [ 51,  10],\n       [193,  62],\n       [188, 138],\n       [152, 246],\n       [190, 240],\n       [200, 174],\n       [232, 118],\n       [ 73, 132]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([0, 1, 0, 1, 0, 0, 0, 1, 0, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.90153369, 0.18614482, 0.20211549, 0.02571299, 0.82352198,\n       0.03064306, 0.77217139, 0.15027546, 0.79430565, 0.95711541])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "outs": {
                                    "variable_value": "3609.082",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x134050af0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x13409aaa0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x134017e50>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[1355.7545]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "batch_sizes": {
                                    "variable_value": "[10]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x13441b450>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x13441b450>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[ 98,  72],\n       [192, 224],\n       [ 64,  22],\n       [229, 241],\n       [ 51,  10],\n       [193,  62],\n       [188, 138],\n       [152, 246],\n       [190, 240],\n       [200, 174]]), array([0, 1, 0, 1, 0, 1, 0, 0, 0, 1]), array([0.09920883, 0.18479437, 0.90153369, 0.18614482, 0.20211549,\n       0.02571299, 0.82352198, 0.03064306, 0.77217139, 0.15027546]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[ 98,  72],\n       [192, 224],\n       [ 64,  22],\n       [229, 241],\n       [ 51,  10],\n       [193,  62],\n       [188, 138],\n       [152, 246],\n       [190, 240],\n       [200, 174]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([0, 1, 0, 1, 0, 1, 0, 0, 0, 1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.09920883, 0.18479437, 0.90153369, 0.18614482, 0.20211549,\n       0.02571299, 0.82352198, 0.03064306, 0.77217139, 0.15027546])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "outs": {
                                    "variable_value": "1355.7545",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x13409ad20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x13409a280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x134017e50>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[2065.5989]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "batch_sizes": {
                                    "variable_value": "[10]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x134010ed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x134010ed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[177, 162],\n       [227, 243],\n       [229, 125],\n       [  3, 125],\n       [114, 125],\n       [177, 198],\n       [ 24, 142],\n       [173, 137],\n       [ 87,  78],\n       [207, 245]]), array([0, 0, 1, 0, 1, 0, 1, 1, 0, 0]), array([0.26179289, 0.70656821, 0.63478751, 0.64846286, 0.68647114,\n       0.28548172, 0.99809299, 0.71143636, 0.59476821, 0.25507266]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[177, 162],\n       [227, 243],\n       [229, 125],\n       [  3, 125],\n       [114, 125],\n       [177, 198],\n       [ 24, 142],\n       [173, 137],\n       [ 87,  78],\n       [207, 245]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([0, 0, 1, 0, 1, 0, 1, 1, 0, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.26179289, 0.70656821, 0.63478751, 0.64846286, 0.68647114,\n       0.28548172, 0.99809299, 0.71143636, 0.59476821, 0.25507266])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "outs": {
                                    "variable_value": "2065.5989",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x1344aee60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1340232d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x134017e50>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[1720.5725]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "batch_sizes": {
                                    "variable_value": "[10]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x134010ed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object test_multiprocessing_training.<locals>.custom_generator at 0x134010ed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[  3, 125],\n       [114, 125],\n       [177, 198],\n       [ 24, 142],\n       [173, 137],\n       [ 87,  78],\n       [207, 245],\n       [ 39, 230],\n       [ 25,  78],\n       [225, 191]]), array([0, 1, 0, 1, 1, 0, 0, 1, 0, 0]), array([0.64846286, 0.68647114, 0.28548172, 0.99809299, 0.71143636,\n       0.59476821, 0.25507266, 0.98588259, 0.70841604, 0.36262517]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "3"
                                },
                                "x": {
                                    "variable_value": "array([[  3, 125],\n       [114, 125],\n       [177, 198],\n       [ 24, 142],\n       [173, 137],\n       [ 87,  78],\n       [207, 245],\n       [ 39, 230],\n       [ 25,  78],\n       [225, 191]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "y": {
                                    "variable_value": "array([0, 1, 0, 1, 1, 0, 0, 1, 0, 0])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "sample_weight": {
                                    "variable_value": "array([0.64846286, 0.68647114, 0.28548172, 0.99809299, 0.71143636,\n       0.59476821, 0.25507266, 0.98588259, 0.70841604, 0.36262517])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "outs": {
                                    "variable_value": "1720.5725",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x134017e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(10, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x1344aee60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1340c7500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "predict_generator",
                    "function_code": "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator,\n                                           use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator,\n                                             use_multiprocessing=use_multiprocessing,\n                                             wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                # Compatibility with the generators\n                # used for training.\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n            else:\n                # Assumes a generator that only\n                # yields inputs (not targets and sample weights).\n                x = generator_output\n\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]\n",
                    "decorators": [
                        "interfaces.legacy_generator_methods_support"
                    ],
                    "docstring": "Generates predictions for the input samples from a data generator.\n\nThe generator should return the same kind of data as accepted by\n`predict_on_batch`.\n\n# Arguments\n    generator: Generator yielding batches of input samples\n        or an instance of Sequence (keras.utils.Sequence)\n        object in order to avoid duplicate data\n        when using multiprocessing.\n    steps: Total number of steps (batches of samples)\n        to yield from `generator` before stopping.\n        Optional for `Sequence`: if unspecified, will use\n        the `len(generator)` as a number of steps.\n    max_queue_size: Maximum size for the generator queue.\n    workers: Integer. Maximum number of processes to spin up\n        when using process based threading.\n        If unspecified, `workers` will default to 1. If 0, will\n        execute the generator on the main thread.\n    use_multiprocessing: If `True`, use process based threading.\n        Note that because\n        this implementation relies on multiprocessing,\n        you should not pass\n        non picklable arguments to the generator\n        as they can't be passed\n        easily to children processes.\n    verbose: verbosity mode, 0 or 1.\n\n# Returns\n    Numpy array(s) of predictions.\n\n# Raises\n    ValueError: In case the generator yields\n        data in an invalid format.",
                    "start_line": 2418,
                    "end_line": 2543,
                    "variables": {
                        "self._make_predict_function": [
                            2459
                        ],
                        "self": [
                            2459,
                            2517
                        ],
                        "steps_done": [
                            2529,
                            2498,
                            2536,
                            2540,
                            2461,
                            2527
                        ],
                        "wait_time": [
                            2489,
                            2462
                        ],
                        "all_outs": [
                            2535,
                            2537,
                            2539,
                            2541,
                            2543,
                            2521,
                            2523,
                            2526,
                            2463
                        ],
                        "is_sequence": [
                            2464,
                            2465,
                            2483,
                            2472
                        ],
                        "isinstance": [
                            2464,
                            2500,
                            2518
                        ],
                        "generator": [
                            2464,
                            2473,
                            2484,
                            2487,
                            2493
                        ],
                        "Sequence": [
                            2464
                        ],
                        "use_multiprocessing": [
                            2488,
                            2465,
                            2485
                        ],
                        "workers": [
                            2490,
                            2465,
                            2482
                        ],
                        "warnings.warn": [
                            2466
                        ],
                        "warnings": [
                            2466
                        ],
                        "UserWarning": [
                            2467
                        ],
                        "steps": [
                            2496,
                            2473,
                            2498,
                            2471
                        ],
                        "len": [
                            2473,
                            2535,
                            2505,
                            2503
                        ],
                        "ValueError": [
                            2475,
                            2508
                        ],
                        "enqueuer": [
                            2532,
                            2533,
                            2479,
                            2484,
                            2487,
                            2490,
                            2491
                        ],
                        "OrderedEnqueuer": [
                            2484
                        ],
                        "GeneratorEnqueuer": [
                            2487
                        ],
                        "enqueuer.start": [
                            2490
                        ],
                        "max_queue_size": [
                            2490
                        ],
                        "output_generator": [
                            2491,
                            2493,
                            2499
                        ],
                        "enqueuer.get": [
                            2491
                        ],
                        "verbose": [
                            2528,
                            2495
                        ],
                        "progbar": [
                            2496,
                            2529
                        ],
                        "Progbar": [
                            2496
                        ],
                        "generator_output": [
                            2499,
                            2500,
                            2503,
                            2504,
                            2505,
                            2506,
                            2511,
                            2515
                        ],
                        "next": [
                            2499
                        ],
                        "tuple": [
                            2500
                        ],
                        "x": [
                            2504,
                            2506,
                            2515,
                            2517
                        ],
                        "_": [
                            2504,
                            2506
                        ],
                        "str": [
                            2511
                        ],
                        "outs": [
                            2517,
                            2518,
                            2519,
                            2522,
                            2525
                        ],
                        "self.predict_on_batch": [
                            2517
                        ],
                        "list": [
                            2518
                        ],
                        "out": [
                            2541,
                            2543,
                            2522,
                            2525,
                            2526
                        ],
                        "all_outs.append": [
                            2523
                        ],
                        "i": [
                            2525,
                            2526
                        ],
                        "enumerate": [
                            2525
                        ],
                        "append": [
                            2526
                        ],
                        "progbar.update": [
                            2529
                        ],
                        "enqueuer.stop": [
                            2533
                        ],
                        "np.concatenate": [
                            2539,
                            2543
                        ],
                        "np": [
                            2539,
                            2543
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            2418
                        ],
                        "interfaces": [
                            2418
                        ]
                    },
                    "filtered_variables": {
                        "self._make_predict_function": [
                            2459
                        ],
                        "self": [
                            2459,
                            2517
                        ],
                        "steps_done": [
                            2529,
                            2498,
                            2536,
                            2540,
                            2461,
                            2527
                        ],
                        "wait_time": [
                            2489,
                            2462
                        ],
                        "all_outs": [
                            2535,
                            2537,
                            2539,
                            2541,
                            2543,
                            2521,
                            2523,
                            2526,
                            2463
                        ],
                        "is_sequence": [
                            2464,
                            2465,
                            2483,
                            2472
                        ],
                        "generator": [
                            2464,
                            2473,
                            2484,
                            2487,
                            2493
                        ],
                        "Sequence": [
                            2464
                        ],
                        "use_multiprocessing": [
                            2488,
                            2465,
                            2485
                        ],
                        "workers": [
                            2490,
                            2465,
                            2482
                        ],
                        "warnings.warn": [
                            2466
                        ],
                        "warnings": [
                            2466
                        ],
                        "steps": [
                            2496,
                            2473,
                            2498,
                            2471
                        ],
                        "enqueuer": [
                            2532,
                            2533,
                            2479,
                            2484,
                            2487,
                            2490,
                            2491
                        ],
                        "OrderedEnqueuer": [
                            2484
                        ],
                        "GeneratorEnqueuer": [
                            2487
                        ],
                        "enqueuer.start": [
                            2490
                        ],
                        "max_queue_size": [
                            2490
                        ],
                        "output_generator": [
                            2491,
                            2493,
                            2499
                        ],
                        "enqueuer.get": [
                            2491
                        ],
                        "verbose": [
                            2528,
                            2495
                        ],
                        "progbar": [
                            2496,
                            2529
                        ],
                        "Progbar": [
                            2496
                        ],
                        "generator_output": [
                            2499,
                            2500,
                            2503,
                            2504,
                            2505,
                            2506,
                            2511,
                            2515
                        ],
                        "x": [
                            2504,
                            2506,
                            2515,
                            2517
                        ],
                        "_": [
                            2504,
                            2506
                        ],
                        "outs": [
                            2517,
                            2518,
                            2519,
                            2522,
                            2525
                        ],
                        "self.predict_on_batch": [
                            2517
                        ],
                        "out": [
                            2541,
                            2543,
                            2522,
                            2525,
                            2526
                        ],
                        "all_outs.append": [
                            2523
                        ],
                        "i": [
                            2525,
                            2526
                        ],
                        "append": [
                            2526
                        ],
                        "progbar.update": [
                            2529
                        ],
                        "enqueuer.stop": [
                            2533
                        ],
                        "np.concatenate": [
                            2539,
                            2543
                        ],
                        "np": [
                            2539,
                            2543
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            2418
                        ],
                        "interfaces": [
                            2418
                        ]
                    },
                    "diff_line_number": 2493,
                    "class_data": {
                        "signature": "class Model(Container)",
                        "docstring": "The `Model` class adds training & evaluation routines to a `Container`.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name + '\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"' + name + '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss=' + str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n    if loss_weights is None:\n        loss_weights_list = [1.0 for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.0))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss_weights=' + str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' + str(loss_weights) + ' - expected a list of dicts.')\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError('When passing a list as `target_tensors`, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed target_tensors=' + str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n            tmp_target_tensors = []\n            for name in self.output_names:\n                tmp_target_tensors.append(target_tensors.get(name, None))\n            target_tensors = tmp_target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self._internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in sample_weight_mode dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name + '\" missing from sample_weight_modes dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed sample_weight_mode=' + str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            elif sample_weight_mode == 'temporal':\n                sample_weights.append(K.placeholder(ndim=2, name=name + '_sample_weights'))\n                sample_weight_modes.append('temporal')\n            else:\n                sample_weights.append(K.placeholder(ndim=1, name=name + '_sample_weights'))\n                sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n    self.metrics = metrics or []\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled because it has no loss to optimize.')\n            else:\n                total_loss = 0.0\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n    self.metrics_updates = []\n    self.stateful_metric_names = []\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n                for metric in metrics:\n                    if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n                        output_shape = self._internal_output_shapes[i]\n                        if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.binary_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.binary_crossentropy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.sparse_categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.sparse_categorical_crossentropy\n                        elif metric in ('accuracy', 'acc'):\n                            metric_fn = metrics_module.categorical_accuracy\n                        elif metric in ('crossentropy', 'ce'):\n                            metric_fn = metrics_module.categorical_crossentropy\n                        if metric in ('accuracy', 'acc'):\n                            suffix = 'acc'\n                        elif metric in ('crossentropy', 'ce'):\n                            suffix = 'ce'\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + suffix\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        if hasattr(metric_fn, 'name'):\n                            metric_name = metric_fn.name\n                        else:\n                            metric_name = metric_fn.__name__\n                        metric_name = metric_name_prefix + metric_name\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n                    if len(self.output_names) > 1:\n                        metric_name = self.output_names[i] + '_' + metric_name\n                    j = 1\n                    base_metric_name = metric_name\n                    while metric_name in self.metrics_names:\n                        metric_name = base_metric_name + '_' + str(j)\n                        j += 1\n                    self.metrics_names.append(metric_name)\n                    self.metrics_tensors.append(metric_result)\n                    if isinstance(metric_fn, Layer):\n                        self.stateful_metric_names.append(metric_name)\n                        self.metrics_updates += metric_fn.updates\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n    self._function_kwargs = kwargs\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                            "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n    if len(self.trainable_weights) != len(self._collected_trainable_weights):\n        warnings.warn(UserWarning('Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?'))",
                            "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)\n            updates = self.updates + training_updates + self.metrics_updates\n            self.train_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)",
                            "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        self.test_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates + self.metrics_updates, name='test_function', **self._function_kwargs)",
                            "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)",
                            "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name + ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have a defined shape, or ' + steps_name + ' should be specified.')\n    return num_samples",
                            "def _fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' % (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` when doing step-wise training, i.e. `steps_per_epoch` must be set.')\n    num_train_samples = self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        _callbacks.append(cbks.ProgbarLogger(count_mode, stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    out_labels = out_labels or []\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'batch_size': batch_size, 'epochs': epochs, 'steps': steps_per_epoch, 'samples': num_train_samples, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics or []})\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    for epoch in range(initial_epoch, epochs):\n        for m in self.metrics:\n            if isinstance(m, Layer):\n                m.reset_states()\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, steps=validation_steps, verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. If using HDF5 input data, pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                for i in indices_for_conversion_to_dense:\n                    ins_batch[i] = ins_batch[i].toarray()\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n                if batch_index == len(batches) - 1:\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                            "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    indices_for_conversion_to_dense = []\n    for i in range(len(self._feed_inputs)):\n        if issparse(ins[i]) and (not K.is_sparse(self._feed_inputs[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0) for i in range(len(unconcatenated_outs))]\n    else:\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                            "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if hasattr(self, 'metrics'):\n        for m in self.metrics:\n            if isinstance(m, Layer):\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs * len(batch_ids)\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                            "def _standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.')\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        elif not hasattr(loss_fn, '__name__') or getattr(losses, loss_fn.__name__, None) is None:\n            output_shapes.append(None)\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False, exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight, self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight, self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode) for ref, sw, cw, mode in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    if check_array_lengths:\n        _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y, self._feed_loss_fns, self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples')\n    return (x, y, sample_weights)",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and (steps_per_epoch is None):\n        raise ValueError('If fitting from data tensors, you should specify the `steps_per_epoch` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, batch_size=batch_size)\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, it must contain 2 (x_val, y_val) or 3 (x_val, y_val, val_sample_weights) items, however it contains %d items' % len(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, sample_weight=val_sample_weight, batch_size=batch_size)\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_split and 0.0 < validation_split < 1.0:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1.0 - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1.0 - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (_slice_arrays(sample_weights, 0, split_at), _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = [0.0]\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n    out_labels = self.metrics_names\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n    return self._fit_loop(f, ins, out_labels=out_labels, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, callback_metrics=callback_metrics, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and (steps is None):\n        raise ValueError('If evaluating from data tensors, you should specify the `steps` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, batch_size=batch_size)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def predict(self, x, batch_size=None, verbose=0, steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, you should specify the `steps` argument.')\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples. Batch size: ' + str(batch_size) + '.')\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def train_on_batch(self, x, y, sample_weight=None, class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Trains the model on data yielded batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches\n            may have different sizes. For example, the last batch of the\n            epoch is commonly smaller than the others, if the size of the\n            dataset is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean. If True, use process based threading.\n            If unspecified, `use_multiprocessing` will default to False.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Boolean. Whether to shuffle the training data\n            in batch-sized chunks before each epoch.\n            Only used with instances of `Sequence` (`keras.utils.Sequence`).\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    wait_time = 0.01\n    epoch = initial_epoch\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.')\n    val_gen = hasattr(validation_data, 'next') or hasattr(validation_data, '__next__') or isinstance(validation_data, Sequence)\n    if val_gen and (not isinstance(validation_data, Sequence)) and (not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `validation_steps` or use the `keras.utils.Sequence` class.')\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(cbks.ProgbarLogger(count_mode='steps', stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'epochs': epochs, 'steps': steps_per_epoch, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics})\n    callbacks.on_train_begin()\n    enqueuer = None\n    val_enqueuer = None\n    try:\n        if do_validation:\n            if val_gen:\n                if workers > 0:\n                    if isinstance(validation_data, Sequence):\n                        val_enqueuer = OrderedEnqueuer(validation_data, use_multiprocessing=use_multiprocessing)\n                        if validation_steps is None:\n                            validation_steps = len(validation_data)\n                    else:\n                        val_enqueuer = GeneratorEnqueuer(validation_data, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n                    val_enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n                    validation_generator = val_enqueuer.get()\n                else:\n                    validation_generator = validation_data\n            else:\n                if len(validation_data) == 2:\n                    val_x, val_y = validation_data\n                    val_sample_weight = None\n                elif len(validation_data) == 3:\n                    val_x, val_y, val_sample_weight = validation_data\n                else:\n                    raise ValueError('`validation_data` should be a tuple `(val_x, val_y, val_sample_weight)` or `(val_x, val_y)`. Found: ' + str(validation_data))\n                val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, val_sample_weight)\n                val_data = val_x + val_y + val_sample_weights\n                if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n                    val_data += [0.0]\n                for cbk in callbacks:\n                    cbk.validation_data = val_data\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n        callback_model.stop_training = False\n        epoch_logs = {}\n        while epoch < epochs:\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                batch_logs = {}\n                if isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = self.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                batch_index += 1\n                steps_done += 1\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(validation_generator, validation_steps, workers=0)\n                    else:\n                        val_outs = self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n                if callback_model.stop_training:\n                    break\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n    callbacks.on_train_end()\n    return self.history",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. Batches should at least contain one item.')\n            all_outs.append(outs)\n            steps_done += 1\n            batch_sizes.append(batch_size)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if not isinstance(outs, list):\n        return np.average(np.asarray(all_outs), weights=batch_sizes)\n    else:\n        averages = []\n        for i in range(len(outs)):\n            averages.append(np.average([out[i] for out in all_outs], weights=batch_sizes))\n        return averages",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n            else:\n                x = generator_output\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                            "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n    for metric in metrics:\n        if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n            output_shape = self._internal_output_shapes[i]\n            if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.binary_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.binary_crossentropy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.sparse_categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.sparse_categorical_crossentropy\n            elif metric in ('accuracy', 'acc'):\n                metric_fn = metrics_module.categorical_accuracy\n            elif metric in ('crossentropy', 'ce'):\n                metric_fn = metrics_module.categorical_crossentropy\n            if metric in ('accuracy', 'acc'):\n                suffix = 'acc'\n            elif metric in ('crossentropy', 'ce'):\n                suffix = 'ce'\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + suffix\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            if hasattr(metric_fn, 'name'):\n                metric_name = metric_fn.name\n            else:\n                metric_name = metric_fn.__name__\n            metric_name = metric_name_prefix + metric_name\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[i] + '_' + metric_name\n        j = 1\n        base_metric_name = metric_name\n        while metric_name in self.metrics_names:\n            metric_name = base_metric_name + '_' + str(j)\n            j += 1\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_result)\n        if isinstance(metric_fn, Layer):\n            self.stateful_metric_names.append(metric_name)\n            self.metrics_updates += metric_fn.updates"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "_check_trainable_weights_consistency(self)",
                            "_make_train_function(self)",
                            "_make_test_function(self)",
                            "_make_predict_function(self)",
                            "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                            "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                            "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                            "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                            "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                            "predict(self, x, batch_size=None, verbose=0, steps=None)",
                            "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_on_batch(self, x)",
                            "fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False)",
                            "predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "handle_metrics(metrics, weights=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _standardize_input_data(data, names, shapes=None,\n                            check_batch_axis=True,\n                            exception_prefix=''):\n    \"\"\"Normalizes inputs and targets provided by users.\n\n    Users may pass data as a list of arrays, dictionary of arrays,\n    or as a single array. We normalize this to an ordered list of\n    arrays (same order as `names`), while checking that the provided\n    arrays have shapes that match the network's expectations.\n\n    # Arguments\n        data: User-provided input data (polymorphic).\n        names: List of expected array names.\n        shapes: Optional list of expected array shapes.\n        check_batch_axis: Boolean; whether to check that\n            the batch axis of the arrays matches the expected\n            value found in `shapes`.\n        exception_prefix: String prefix used for exception formatting.\n\n    # Returns\n        List of standardized input arrays (one array per model input).\n\n    # Raises\n        ValueError: in case of improperly formatted user-provided data.\n    \"\"\"\n    if not names:\n        if data is not None and hasattr(data, '__len__') and len(data):\n            raise ValueError('Error when checking model ' +\n                             exception_prefix + ': '\n                             'expected no data, but got:', data)\n        return []\n    if data is None:\n        return [None for _ in range(len(names))]\n\n    if isinstance(data, dict):\n        try:\n            data = [data[x].values if data[x].__class__.__name__ == 'DataFrame' else data[x] for x in names]\n        except KeyError as e:\n            raise ValueError(\n                'No data provided for \"' + e.args[0] + '\". Need data '\n                'for each key in: ' + str(names))\n    elif isinstance(data, list):\n        if len(names) == 1 and data and isinstance(data[0], (float, int)):\n            data = [np.asarray(data)]\n        else:\n            data = [x.values if x.__class__.__name__ == 'DataFrame' else x for x in data]\n    else:\n        data = data.values if data.__class__.__name__ == 'DataFrame' else data\n        data = [data]\n    data = [np.expand_dims(x, 1) if x is not None and x.ndim == 1 else x for x in data]\n\n    if len(data) != len(names):\n        if data and hasattr(data[0], 'shape'):\n            raise ValueError(\n                'Error when checking model ' + exception_prefix +\n                ': the list of Numpy arrays that you are passing to '\n                'your model is not the size the model expected. '\n                'Expected to see ' + str(len(names)) + ' array(s), '\n                'but instead got the following list of ' +\n                str(len(data)) + ' arrays: ' + str(data)[:200] + '...')\n        elif len(names) > 1:\n            raise ValueError(\n                'Error when checking model ' + exception_prefix +\n                ': you are passing a list as input to your model, '\n                'but the model expects a list of ' + str(len(names)) +\n                ' Numpy arrays instead. The list you passed was: ' +\n                str(data)[:200])\n        elif len(data) == 1 and not hasattr(data[0], 'shape'):\n            raise TypeError(\n                'Error when checking model ' + exception_prefix +\n                ': data should be a Numpy array, or list/dict of '\n                'Numpy arrays. Found: ' + str(data)[:200] + '...')\n        elif len(names) == 1:\n            data = [np.asarray(data)]\n\n    # Check shapes compatibility.\n    if shapes:\n        for i in range(len(names)):\n            if shapes[i] is not None:\n                data_shape = data[i].shape\n                shape = shapes[i]\n                if data[i].ndim != len(shape):\n                    raise ValueError(\n                        'Error when checking ' + exception_prefix +\n                        ': expected ' + names[i] + ' to have ' +\n                        str(len(shape)) + ' dimensions, but got array '\n                        'with shape ' + str(data_shape))\n                if not check_batch_axis:\n                    data_shape = data_shape[1:]\n                    shape = shape[1:]\n                for dim, ref_dim in zip(data_shape, shape):\n                    if ref_dim != dim and ref_dim:\n                        raise ValueError(\n                            'Error when checking ' + exception_prefix +\n                            ': expected ' + names[i] + ' to have shape ' +\n                            str(shape) + ' but got array with shape ' +\n                            str(data_shape))\n    return data",
                "def _standardize_sample_or_class_weights(x_weight, output_names, weight_type):\n    \"\"\"Maps `sample_weight` or `class_weight` to model outputs.\n\n    # Arguments\n        x_weight: User-provided `sample_weight` or `class_weight` argument.\n        output_names: List of output names (strings) in the model.\n        weight_type: A string used purely for exception printing.\n\n    # Returns\n        A list of `sample_weight` or `class_weight` where there are exactly\n            one element per model output.\n\n    # Raises\n        ValueError: In case of invalid user-provided argument.\n    \"\"\"\n    if x_weight is None or len(x_weight) == 0:\n        return [None for _ in output_names]\n    if len(output_names) == 1:\n        if isinstance(x_weight, list) and len(x_weight) == 1:\n            return x_weight\n        if isinstance(x_weight, dict) and output_names[0] in x_weight:\n            return [x_weight[output_names[0]]]\n        else:\n            return [x_weight]\n    if isinstance(x_weight, list):\n        if len(x_weight) != len(output_names):\n            raise ValueError('Provided `' + weight_type + '` was a list of ' +\n                             str(len(x_weight)) +\n                             ' elements, but the model has ' +\n                             str(len(output_names)) + ' outputs. '\n                             'You should provide one `' + weight_type + '`'\n                             'array per model output.')\n        return x_weight\n    if isinstance(x_weight, dict):\n        x_weights = []\n        for name in output_names:\n            x_weights.append(x_weight.get(name))\n        return x_weights\n    else:\n        raise TypeError('The model has multiple outputs, so `' +\n                        weight_type + '` '\n                        'should be either a list or a dict. '\n                        'Provided `' + weight_type +\n                        '` type not understood: ' +\n                        str(x_weight))",
                "def _standardize_class_weights(class_weight, output_names):\n    return _standardize_sample_or_class_weights(class_weight,\n                                                output_names,\n                                                'class_weight')",
                "def _standardize_sample_weights(sample_weight, output_names):\n    return _standardize_sample_or_class_weights(sample_weight,\n                                                output_names,\n                                                'sample_weight')",
                "def _check_array_lengths(inputs, targets, weights=None):\n    \"\"\"Checks if batch axes are the same for numpy arrays.\n\n    # Arguments\n        inputs: list of Numpy arrays of inputs.\n        targets: list of Numpy arrays of targets.\n        weights: list of Numpy arrays of sample weights.\n\n    # Raises\n        ValueError: in case of incorrectly formatted data.\n    \"\"\"\n    def set_of_lengths(x):\n        # return a set with the variation between\n        # different shapes, with None => 0\n        if x is None:\n            return {0}\n        else:\n            return set([0 if y is None else y.shape[0] for y in x])\n\n    set_x = set_of_lengths(inputs)\n    set_y = set_of_lengths(targets)\n    set_w = set_of_lengths(weights)\n    if len(set_x) > 1:\n        raise ValueError('All input arrays (x) should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([x.shape for x in inputs]))\n    if len(set_y) > 1:\n        raise ValueError('All target arrays (y) should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([y.shape for y in targets]))\n    if set_x and set_y and list(set_x)[0] != list(set_y)[0]:\n        raise ValueError('Input arrays should have '\n                         'the same number of samples as target arrays. '\n                         'Found ' + str(list(set_x)[0]) + ' input samples '\n                         'and ' + str(list(set_y)[0]) + ' target samples.')\n    if len(set_w) > 1:\n        raise ValueError('All sample_weight arrays should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([w.shape for w in weights]))\n    if set_y and set_w and list(set_y)[0] != list(set_w)[0]:\n        raise ValueError('Sample_weight arrays should have '\n                         'the same number of samples as target arrays. Got ' +\n                         str(list(set_y)[0]) + ' input samples and ' +\n                         str(list(set_w)[0]) + ' target samples.')",
                "def _check_loss_and_target_compatibility(targets, loss_fns, output_shapes):\n    \"\"\"Does validation on the compatibility of targets and loss functions.\n\n    This helps prevent users from using loss functions incorrectly.\n\n    # Arguments\n        targets: list of Numpy arrays of targets.\n        loss_fns: list of loss functions.\n        output_shapes: list of shapes of model outputs.\n\n    # Raises\n        ValueError: if a loss function or target array\n            is incompatible with an output.\n    \"\"\"\n    key_losses = {losses.mean_squared_error,\n                  losses.binary_crossentropy,\n                  losses.categorical_crossentropy}\n    for y, loss, shape in zip(targets, loss_fns, output_shapes):\n        if y is None or loss is None:\n            continue\n        if loss is losses.categorical_crossentropy:\n            if y.shape[-1] == 1:\n                raise ValueError(\n                    'You are passing a target array of shape ' + str(y.shape) +\n                    ' while using as loss `categorical_crossentropy`. '\n                    '`categorical_crossentropy` expects '\n                    'targets to be binary matrices (1s and 0s) '\n                    'of shape (samples, classes). '\n                    'If your targets are integer classes, '\n                    'you can convert them to the expected format via:\\n'\n                    '```\\n'\n                    'from keras.utils import to_categorical\\n'\n                    'y_binary = to_categorical(y_int)\\n'\n                    '```\\n'\n                    '\\n'\n                    'Alternatively, you can use the loss function '\n                    '`sparse_categorical_crossentropy` instead, '\n                    'which does expect integer targets.')\n        if loss in key_losses:\n            for target_dim, out_dim in zip(y.shape[1:], shape[1:]):\n                if out_dim is not None and target_dim != out_dim:\n                    raise ValueError(\n                        'A target array with shape ' + str(y.shape) +\n                        ' was passed for an output of shape ' + str(shape) +\n                        ' while using as loss `' + loss.__name__ + '`. '\n                        'This loss expects '\n                        'targets to have the same shape '\n                        'as the output.')",
                "def _collect_metrics(metrics, output_names):\n    \"\"\"Maps metric functions to model outputs.\n\n    # Arguments\n        metrics: a list or dict of metric functions.\n        output_names: a list of the names (strings) of model outputs.\n\n    # Returns\n        A list (one entry per model output) of lists of metric functions.\n        For instance, if the model has 2 outputs, and for the first output\n        we want to compute \"binary_accuracy\" and \"binary_crossentropy\",\n        and just \"binary_accuracy\" for the second output,\n        the list would look like:\n            `[[binary_accuracy, binary_crossentropy], [binary_accuracy]]`\n\n    # Raises\n        TypeError: if an incorrect type is passed for the `metrics` argument.\n    \"\"\"\n    if not metrics:\n        return [[] for _ in output_names]\n    if isinstance(metrics, list):\n        # we then apply all metrics to all outputs.\n        return [copy.copy(metrics) for _ in output_names]\n    elif isinstance(metrics, dict):\n        nested_metrics = []\n        for name in output_names:\n            output_metrics = metrics.get(name, [])\n            if not isinstance(output_metrics, list):\n                output_metrics = [output_metrics]\n            nested_metrics.append(output_metrics)\n        return nested_metrics\n    else:\n        raise TypeError('Type of `metrics` argument not understood. '\n                        'Expected a list or dictionary, found: ' +\n                        str(metrics))",
                "def _batch_shuffle(index_array, batch_size):\n    \"\"\"Shuffles an array in a batch-wise fashion.\n\n    Useful for shuffling HDF5 arrays\n    (where one cannot access arbitrary indices).\n\n    # Arguments\n        index_array: array of indices to be shuffled.\n        batch_size: integer.\n\n    # Returns\n        The `index_array` array, shuffled in a batch-wise fashion.\n    \"\"\"\n    batch_count = int(len(index_array) / batch_size)\n    # to reshape we need to be cleanly divisible by batch size\n    # we stash extra items and reappend them after shuffling\n    last_batch = index_array[batch_count * batch_size:]\n    index_array = index_array[:batch_count * batch_size]\n    index_array = index_array.reshape((batch_count, batch_size))\n    np.random.shuffle(index_array)\n    index_array = index_array.flatten()\n    return np.append(index_array, last_batch)",
                "def _make_batches(size, batch_size):\n    \"\"\"Returns a list of batch indices (tuples of indices).\n\n    # Arguments\n        size: Integer, total size of the data to slice into batches.\n        batch_size: Integer, batch size.\n\n    # Returns\n        A list of tuples of array indices.\n    \"\"\"\n    num_batches = (size + batch_size - 1) // batch_size  # round up\n    return [(i * batch_size, min(size, (i + 1) * batch_size))\n            for i in range(num_batches)]",
                "def _slice_arrays(arrays, start=None, stop=None):\n    \"\"\"Slice an array or list of arrays.\n\n    This takes an array-like, or a list of\n    array-likes, and outputs:\n        - arrays[start:stop] if `arrays` is an array-like\n        - [x[start:stop] for x in arrays] if `arrays` is a list\n\n    Can also work on list/array of indices: `_slice_arrays(x, indices)`\n\n    # Arguments\n        arrays: Single array or list of arrays.\n        start: can be an integer index (start index)\n            or a list/array of indices\n        stop: integer (stop index); should be None if\n            `start` was a list.\n\n    # Returns\n        A slice of the array(s).\n    \"\"\"\n    if arrays is None:\n        return [None]\n    elif isinstance(arrays, list):\n        if hasattr(start, '__len__'):\n            # hdf5 datasets only support list objects as indices\n            if hasattr(start, 'shape'):\n                start = start.tolist()\n            return [None if x is None else x[start] for x in arrays]\n        else:\n            return [None if x is None else x[start:stop] for x in arrays]\n    else:\n        if hasattr(start, '__len__'):\n            if hasattr(start, 'shape'):\n                start = start.tolist()\n            return arrays[start]\n        elif hasattr(start, '__getitem__'):\n            return arrays[start:stop]\n        else:\n            return [None]",
                "def _weighted_masked_objective(fn):\n    \"\"\"Adds support for masking and sample-weighting to an objective function.\n\n    It transforms an objective function `fn(y_true, y_pred)`\n    into a sample-weighted, cost-masked objective function\n    `fn(y_true, y_pred, weights, mask)`.\n\n    # Arguments\n        fn: The objective function to wrap,\n            with signature `fn(y_true, y_pred)`.\n\n    # Returns\n        A function with signature `fn(y_true, y_pred, weights, mask)`.\n    \"\"\"\n    if fn is None:\n        return None\n\n    def weighted(y_true, y_pred, weights, mask=None):\n        \"\"\"Wrapper function.\n\n        # Arguments\n            y_true: `y_true` argument of `fn`.\n            y_pred: `y_pred` argument of `fn`.\n            weights: Weights tensor.\n            mask: Mask tensor.\n\n        # Returns\n            Scalar tensor.\n        \"\"\"\n        # score_array has ndim >= 2\n        score_array = fn(y_true, y_pred)\n        if mask is not None:\n            # Cast the mask to floatX to avoid float64 upcasting in Theano\n            mask = K.cast(mask, K.floatx())\n            # mask should have the same shape as score_array\n            score_array *= mask\n            #  the loss per batch should be proportional\n            #  to the number of unmasked samples.\n            score_array /= K.mean(mask)\n\n        # apply sample weighting\n        if weights is not None:\n            # reduce score_array to same ndim as weight array\n            ndim = K.ndim(score_array)\n            weight_ndim = K.ndim(weights)\n            score_array = K.mean(score_array, axis=list(range(weight_ndim, ndim)))\n            score_array *= weights\n            score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))\n        return K.mean(score_array)\n    return weighted",
                "def _standardize_weights(y, sample_weight=None, class_weight=None,\n                         sample_weight_mode=None):\n    \"\"\"Performs sample weight validation and standardization.\n\n    Everything gets normalized to a single sample-wise (or timestep-wise)\n    weight array.\n\n    # Arguments\n        y: Numpy array of model targets to be weighted.\n        sample_weight: User-provided `sample_weight` argument.\n        class_weight: User-provided `class_weight` argument.\n        sample_weight_mode: One of `None` or `\"temporal\"`.\n            `\"temporal\"` indicated that we expect 2D weight data\n            that will be applied to the last 2 dimensions of\n            the targets (i.e. we are weighting timesteps, not samples).\n\n    # Returns\n        A numpy array of target weights, one entry per sample to weight.\n\n    # Raises\n        ValueError: In case of invalid user-provided arguments.\n    \"\"\"\n    if sample_weight_mode is not None:\n        if sample_weight_mode != 'temporal':\n            raise ValueError('\"sample_weight_mode '\n                             'should be None or \"temporal\". '\n                             'Found: ' + str(sample_weight_mode))\n        if len(y.shape) < 3:\n            raise ValueError('Found a sample_weight array for '\n                             'an input with shape ' +\n                             str(y.shape) + '. '\n                             'Timestep-wise sample weighting (use of '\n                             'sample_weight_mode=\"temporal\") is restricted to '\n                             'outputs that are at least 3D, i.e. that have '\n                             'a time dimension.')\n        if sample_weight is not None and len(sample_weight.shape) != 2:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + '. '\n                             'In order to use timestep-wise sample weighting, '\n                             'you should pass a 2D sample_weight array.')\n    else:\n        if sample_weight is not None and len(sample_weight.shape) != 1:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + '. '\n                             'In order to use timestep-wise sample weights, '\n                             'you should specify '\n                             'sample_weight_mode=\"temporal\" '\n                             'in compile(). If you just mean to use '\n                             'sample-wise weights, make sure your '\n                             'sample_weight array is 1D.')\n\n    if sample_weight is not None:\n        if len(sample_weight.shape) > len(y.shape):\n            raise ValueError('Found a sample_weight with shape' +\n                             str(sample_weight.shape) + '.'\n                             'Expected sample_weight with rank '\n                             'less than or equal to ' + str(len(y.shape)))\n\n        if y.shape[:sample_weight.ndim] != sample_weight.shape:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + ' for an input with shape ' +\n                             str(y.shape) + '. '\n                             'sample_weight cannot be broadcast.')\n        return sample_weight\n    elif isinstance(class_weight, dict):\n        if len(y.shape) > 2:\n            raise ValueError('`class_weight` not supported for '\n                             '3+ dimensional targets.')\n        if y.shape[1] > 1:\n            y_classes = np.argmax(y, axis=1)\n        elif y.shape[1] == 1:\n            y_classes = np.reshape(y, y.shape[0])\n        else:\n            y_classes = y\n\n        weights = np.asarray([class_weight[cls] for cls in y_classes\n                              if cls in class_weight])\n\n        if len(weights) != len(y_classes):\n            # subtract the sets to pick all missing classes\n            existing_classes = set(y_classes)\n            existing_class_weight = set(class_weight.keys())\n            raise ValueError('`class_weight` must contain all classes in the data.'\n                             ' The classes %s exist in the data but not in '\n                             '`class_weight`.'\n                             % (existing_classes - existing_class_weight))\n        return weights\n    else:\n        if sample_weight_mode is None:\n            return np.ones((y.shape[0],), dtype=K.floatx())\n        else:\n            return np.ones((y.shape[0], y.shape[1]), dtype=K.floatx())",
                "def set_of_lengths(x):\n    # return a set with the variation between\n    # different shapes, with None => 0\n    if x is None:\n        return {0}\n    else:\n        return set([0 if y is None else y.shape[0] for y in x])",
                "def weighted(y_true, y_pred, weights, mask=None):\n    \"\"\"Wrapper function.\n\n    # Arguments\n        y_true: `y_true` argument of `fn`.\n        y_pred: `y_pred` argument of `fn`.\n        weights: Weights tensor.\n        mask: Mask tensor.\n\n    # Returns\n        Scalar tensor.\n    \"\"\"\n    # score_array has ndim >= 2\n    score_array = fn(y_true, y_pred)\n    if mask is not None:\n        # Cast the mask to floatX to avoid float64 upcasting in Theano\n        mask = K.cast(mask, K.floatx())\n        # mask should have the same shape as score_array\n        score_array *= mask\n        #  the loss per batch should be proportional\n        #  to the number of unmasked samples.\n        score_array /= K.mean(mask)\n\n    # apply sample weighting\n    if weights is not None:\n        # reduce score_array to same ndim as weight array\n        ndim = K.ndim(score_array)\n        weight_ndim = K.ndim(weights)\n        score_array = K.mean(score_array, axis=list(range(weight_ndim, ndim)))\n        score_array *= weights\n        score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))\n    return K.mean(score_array)",
                "def compile(self, optimizer, loss=None, metrics=None, loss_weights=None,\n            sample_weight_mode=None, weighted_metrics=None,\n            target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n\n    # Prepare loss functions.\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss '\n                                 'dictionary: \"' + name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name +\n                              '\" missing from loss dictionary. '\n                              'We assume this was done on purpose, '\n                              'and we will not be expecting '\n                              'any data to be passed to \"' + name +\n                              '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, '\n                             'it should have one entry per model outputs. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed loss=' +\n                             str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n\n    # Prepare output masks.\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n\n    # Prepare loss weights.\n    if loss_weights is None:\n        loss_weights_list = [1. for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights '\n                                 'dictionary: \"' + name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, '\n                             'it should have one entry per model output. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed loss_weights=' +\n                             str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' +\n                        str(loss_weights) +\n                        ' - expected a list of dicts.')\n\n    # Prepare targets of model.\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError(\n                    'When passing a list as `target_tensors`, '\n                    'it should have one entry per model output. '\n                    'The model has ' + str(len(self.outputs)) +\n                    ' outputs, but you passed target_tensors=' +\n                    str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` '\n                                     'dictionary: \"' + name + '\". '\n                                     'Only expected the following keys: ' +\n                                     str(self.output_names))\n            tmp_target_tensors = []\n            for name in self.output_names:\n                tmp_target_tensors.append(target_tensors.get(name, None))\n            target_tensors = tmp_target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be '\n                            'a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self._internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape),\n                                           name=name + '_target',\n                                           sparse=K.is_sparse(self.outputs[i]),\n                                           dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n\n    # Prepare sample weights.\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in '\n                                 'sample_weight_mode dictionary: \"' +\n                                 name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name +\n                                     '\" missing from sample_weight_modes '\n                                     'dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, '\n                             'it should have one entry per model output. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed '\n                             'sample_weight_mode=' +\n                             str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            else:\n                if sample_weight_mode == 'temporal':\n                    sample_weights.append(\n                        K.placeholder(ndim=2,\n                                      name=name + '_sample_weights'))\n                    sample_weight_modes.append('temporal')\n                else:\n                    sample_weights.append(\n                        K.placeholder(ndim=1,\n                                      name=name + '_sample_weights'))\n                    sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n\n    # Prepare metrics.\n    self.metrics = metrics or []\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n\n    # Compute total loss.\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred,\n                                            sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled '\n                                 'because it has no loss to optimize.')\n            else:\n                total_loss = 0.\n\n        # Add regularization penalties\n        # and other layer-specific losses.\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n\n    # List of same size as output_names.\n    # contains tuples (metrics for output, names of metrics).\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n    self.metrics_updates = []\n    self.stateful_metric_names = []\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n\n                for metric in metrics:\n                    if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n                        # custom handling of accuracy/crossentropy\n                        # (because of class mode duality)\n                        output_shape = self._internal_output_shapes[i]\n                        if (output_shape[-1] == 1 or\n                           self.loss_functions[i] == losses.binary_crossentropy):\n                            # case: binary accuracy/crossentropy\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.binary_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.binary_crossentropy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            # case: categorical accuracy/crossentropy with sparse targets\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.sparse_categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.sparse_categorical_crossentropy\n                        else:\n                            # case: categorical accuracy/crossentropy\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.categorical_crossentropy\n                        if metric in ('accuracy', 'acc'):\n                                suffix = 'acc'\n                        elif metric in ('crossentropy', 'ce'):\n                                suffix = 'ce'\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + suffix\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        # Get metric name as string\n                        if hasattr(metric_fn, 'name'):\n                            metric_name = metric_fn.name\n                        else:\n                            metric_name = metric_fn.__name__\n                        metric_name = metric_name_prefix + metric_name\n\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred,\n                                                           weights=weights,\n                                                           mask=masks[i])\n\n                    # Append to self.metrics_names, self.metric_tensors,\n                    # self.stateful_metric_names\n                    if len(self.output_names) > 1:\n                        metric_name = self.output_names[i] + '_' + metric_name\n                    # Dedupe name\n                    j = 1\n                    base_metric_name = metric_name\n                    while metric_name in self.metrics_names:\n                        metric_name = base_metric_name + '_' + str(j)\n                        j += 1\n                    self.metrics_names.append(metric_name)\n                    self.metrics_tensors.append(metric_result)\n\n                    # Keep track of state updates created by\n                    # stateful metrics (i.e. metrics layers).\n                    if isinstance(metric_fn, Layer):\n                        self.stateful_metric_names.append(metric_name)\n                        self.metrics_updates += metric_fn.updates\n\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n\n    # Prepare gradient updates and state updates.\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n\n    # Functions for train, test and predict will\n    # be compiled lazily when required.\n    # This saves time when the user is not using all functions.\n    self._function_kwargs = kwargs\n\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n\n    # Collected trainable weights, sorted in topological order.\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n\n    if (len(self.trainable_weights) !=\n            len(self._collected_trainable_weights)):\n        warnings.warn(UserWarning(\n            'Discrepancy between trainable weights and collected trainable'\n            ' weights, did you set `model.trainable` without calling'\n            ' `model.compile` after ?'))",
                "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            inputs += [K.learning_phase()]\n\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(\n                    params=self._collected_trainable_weights,\n                    loss=self.total_loss)\n            updates = self.updates + training_updates + self.metrics_updates\n            # Gets loss and metrics. Updates weights at each call.\n            self.train_function = K.function(inputs,\n                                             [self.total_loss] + self.metrics_tensors,\n                                             updates=updates,\n                                             name='train_function',\n                                             **self._function_kwargs)",
                "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            inputs += [K.learning_phase()]\n        # Return loss and metrics, no gradient updates.\n        # Does update the network states.\n        self.test_function = K.function(inputs,\n                                        [self.total_loss] + self.metrics_tensors,\n                                        updates=self.state_updates + self.metrics_updates,\n                                        name='test_function',\n                                        **self._function_kwargs)",
                "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        # Gets network outputs. Does not update weights.\n        # Does update the network states.\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs,\n                                           self.outputs,\n                                           updates=self.state_updates,\n                                           name='predict_function',\n                                           **kwargs)",
                "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name +\n                             ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have '\n                         'a defined shape, or ' + steps_name +\n                         ' should be specified.')\n    return num_samples",
                "def _fit_loop(self, f, ins, out_labels=None, batch_size=None,\n              epochs=100, verbose=1, callbacks=None,\n              val_f=None, val_ins=None, shuffle=True,\n              callback_metrics=None, initial_epoch=0,\n              steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' %\n                  (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` '\n                             'when doing step-wise '\n                             'training, i.e. `steps_per_epoch` '\n                             'must be set.')\n\n    num_train_samples = self._check_num_samples(ins, batch_size,\n                                                steps_per_epoch,\n                                                'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(\n        stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        _callbacks.append(\n            cbks.ProgbarLogger(\n                count_mode,\n                stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    out_labels = out_labels or []\n\n    # it's possible to callback a different model than self\n    # (used by Sequential models)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'batch_size': batch_size,\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'samples': num_train_samples,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics or [],\n    })\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n\n    # To prevent a slowdown, we find beforehand the arrays that need conversion.\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and not K.is_sparse(feed[i]):\n            indices_for_conversion_to_dense.append(i)\n\n    for epoch in range(initial_epoch, epochs):\n        # Reset stateful metrics\n        for m in self.metrics:\n            if isinstance(m, Layer):\n                m.reset_states()\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins,\n                                           batch_size=batch_size,\n                                           steps=validation_steps,\n                                           verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                # Same labels assumed.\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        # Do not slice the training phase flag.\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. '\n                                    'If using HDF5 input data, '\n                                    'pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                for i in indices_for_conversion_to_dense:\n                    ins_batch[i] = ins_batch[i].toarray()\n\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n\n                if batch_index == len(batches) - 1:  # Last batch.\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins,\n                                                   batch_size=batch_size,\n                                                   verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        # Same labels assumed.\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size,\n                                          steps,\n                                          'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n\n    indices_for_conversion_to_dense = []\n    for i in range(len(self._feed_inputs)):\n        if issparse(ins[i]) and not K.is_sparse(self._feed_inputs[i]):\n            indices_for_conversion_to_dense.append(i)\n\n    if steps is not None:\n        # Step-based predictions.\n        # Since we do not know how many samples\n        # we will see, we cannot pre-allocate\n        # the returned Numpy arrays.\n        # Instead, we store one array per batch seen\n        # and concatenate them upon returning.\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0)\n                for i in range(len(unconcatenated_outs))]\n    else:\n        # Sample-based predictions.\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                # Do not slice the training phase flag.\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                # Pre-allocate the results arrays.\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n\n    if hasattr(self, 'metrics'):\n        for m in self.metrics:\n            if isinstance(m, Layer):\n                m.reset_states()\n        stateful_metric_indices = [\n            i for i, name in enumerate(self.metrics_names)\n            if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n\n    num_samples = self._check_num_samples(ins, batch_size,\n                                          steps,\n                                          'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n\n    # To prevent a slowdown, we find beforehand the arrays that need conversion.\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and not K.is_sparse(feed[i]):\n            indices_for_conversion_to_dense.append(i)\n\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                # Do not slice the training phase flag.\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.)\n                outs[0] += batch_outs * len(batch_ids)\n\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                "def _standardize_user_data(self, x, y,\n                           sample_weight=None, class_weight=None,\n                           check_array_lengths=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before '\n                           'training/testing. '\n                           'Use `model.compile(optimizer, loss)`.')\n\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        elif (not hasattr(loss_fn, '__name__') or\n              getattr(losses, loss_fn.__name__, None) is None):\n            # If `loss_fn` is not a function (e.g. callable class)\n            # or if it not in the `losses` module, then\n            # it is a user-defined loss and we make no assumptions\n            # about it.\n            output_shapes.append(None)\n        else:\n            output_shapes.append(output_shape)\n    # `check_batch_axis` is set to False since `x` may contain multiple batches\n    #  and in general `x[0].shape[0] != self._feed_input_shapes[0][0]`\n    x = _standardize_input_data(x, self._feed_input_names,\n                                self._feed_input_shapes,\n                                check_batch_axis=False,\n                                exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names,\n                                output_shapes,\n                                check_batch_axis=False,\n                                exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight,\n                                                 self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight,\n                                               self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode)\n                      for (ref, sw, cw, mode)\n                      in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n\n    if check_array_lengths:\n        _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y,\n                                         self._feed_loss_fns,\n                                         self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, '\n                             'you should only pass inputs with '\n                             'a number of samples that can be '\n                             'divided by the batch size. Found: ' +\n                             str(x[0].shape[0]) + ' samples')\n    return x, y, sample_weights",
                "def fit(self,\n        x=None,\n        y=None,\n        batch_size=None,\n        epochs=1,\n        verbose=1,\n        callbacks=None,\n        validation_split=0.,\n        validation_data=None,\n        shuffle=True,\n        class_weight=None,\n        sample_weight=None,\n        initial_epoch=0,\n        steps_per_epoch=None,\n        validation_steps=None,\n        **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    # Backwards compatibility\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    # Legacy support\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` '\n                      'has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and steps_per_epoch is None:\n        raise ValueError('If fitting from data tensors, '\n                         'you should specify the `steps_per_epoch` '\n                         'argument.')\n    # Validate user data.\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight,\n        class_weight=class_weight,\n        batch_size=batch_size)\n    # Prepare validation data.\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, '\n                             'it must contain 2 (x_val, y_val) '\n                             'or 3 (x_val, y_val, val_sample_weights) '\n                             'items, however it contains %d items' %\n                             len(validation_data))\n\n        val_x, val_y, val_sample_weights = self._standardize_user_data(\n            val_x, val_y,\n            sample_weight=val_sample_weight,\n            batch_size=batch_size)\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            val_ins = val_x + val_y + val_sample_weights + [0.]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n\n    elif validation_split and 0. < validation_split < 1.:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1. - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1. - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (\n            _slice_arrays(sample_weights, 0, split_at),\n            _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            val_ins = val_x + val_y + val_sample_weights + [0.]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            val_ins = [0.]\n\n    # Prepare input arrays and training function.\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [1.]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n\n    # Prepare display labels.\n    out_labels = self.metrics_names\n\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n\n    # Delegate logic to `_fit_loop`.\n    return self._fit_loop(f, ins, out_labels=out_labels,\n                          batch_size=batch_size, epochs=epochs,\n                          verbose=verbose, callbacks=callbacks,\n                          val_f=val_f, val_ins=val_ins, shuffle=shuffle,\n                          callback_metrics=callback_metrics,\n                          initial_epoch=initial_epoch,\n                          steps_per_epoch=steps_per_epoch,\n                          validation_steps=validation_steps)",
                "def evaluate(self, x=None, y=None,\n             batch_size=None,\n             verbose=1,\n             sample_weight=None,\n             steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    # Backwards compatibility.\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and steps is None:\n        raise ValueError('If evaluating from data tensors, '\n                         'you should specify the `steps` '\n                         'argument.')\n    # Validate user data.\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight,\n        batch_size=batch_size)\n    # Prepare inputs, delegate logic to `_test_loop`.\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [0.]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins,\n                           batch_size=batch_size,\n                           verbose=verbose,\n                           steps=steps)",
                "def predict(self, x,\n            batch_size=None,\n            verbose=0,\n            steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    # Backwards compatibility.\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, '\n                         'you should specify the `steps` '\n                         'argument.')\n    # Validate user data.\n    x = _standardize_input_data(x, self._feed_input_names,\n                                self._feed_input_shapes,\n                                check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, '\n                             'you should only pass inputs with '\n                             'a number of samples that can be '\n                             'divided by the batch size. Found: ' +\n                             str(x[0].shape[0]) + ' samples. '\n                             'Batch size: ' + str(batch_size) + '.')\n\n    # Prepare inputs, delegate logic to `_predict_loop`.\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + [0.]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size,\n                              verbose=verbose, steps=steps)",
                "def train_on_batch(self, x, y,\n                   sample_weight=None,\n                   class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight,\n        class_weight=class_weight)\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [1.]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight)\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [0.]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names,\n                                self._feed_input_shapes)\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + [0.]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                "@interfaces.legacy_generator_methods_support\ndef fit_generator(self,\n                  generator,\n                  steps_per_epoch=None,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"Trains the model on data yielded batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches\n            may have different sizes. For example, the last batch of the\n            epoch is commonly smaller than the others, if the size of the\n            dataset is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean. If True, use process based threading.\n            If unspecified, `use_multiprocessing` will default to False.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Boolean. Whether to shuffle the training data\n            in batch-sized chunks before each epoch.\n            Only used with instances of `Sequence` (`keras.utils.Sequence`).\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    wait_time = 0.01  # in seconds\n    epoch = initial_epoch\n\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a'\n                             ' generator based on the `keras.utils.Sequence`'\n                             ' class. Please specify `steps_per_epoch` or use'\n                             ' the `keras.utils.Sequence` class.')\n\n    # python 2 has 'next', 3 has '__next__'\n    # avoid any explicit version checks\n    val_gen = (hasattr(validation_data, 'next') or\n               hasattr(validation_data, '__next__') or\n               isinstance(validation_data, Sequence))\n    if (val_gen and not isinstance(validation_data, Sequence) and\n            not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a'\n                         ' generator based on the `keras.utils.Sequence`'\n                         ' class. Please specify `validation_steps` or use'\n                         ' the `keras.utils.Sequence` class.')\n\n    # Prepare display labels.\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n\n    # prepare callbacks\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(\n        stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(\n            cbks.ProgbarLogger(\n                count_mode='steps',\n                stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n\n    # it's possible to callback a different model than self:\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics,\n    })\n    callbacks.on_train_begin()\n\n    enqueuer = None\n    val_enqueuer = None\n\n    try:\n        if do_validation:\n            if val_gen:\n                if workers > 0:\n                    if isinstance(validation_data, Sequence):\n                        val_enqueuer = OrderedEnqueuer(\n                            validation_data,\n                            use_multiprocessing=use_multiprocessing)\n                        if validation_steps is None:\n                            validation_steps = len(validation_data)\n                    else:\n                        val_enqueuer = GeneratorEnqueuer(\n                            validation_data,\n                            use_multiprocessing=use_multiprocessing,\n                            wait_time=wait_time)\n                    val_enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n                    validation_generator = val_enqueuer.get()\n                else:\n                    validation_generator = validation_data\n            else:\n                if len(validation_data) == 2:\n                    val_x, val_y = validation_data\n                    val_sample_weight = None\n                elif len(validation_data) == 3:\n                    val_x, val_y, val_sample_weight = validation_data\n                else:\n                    raise ValueError('`validation_data` should be a tuple '\n                                     '`(val_x, val_y, val_sample_weight)` '\n                                     'or `(val_x, val_y)`. Found: ' +\n                                     str(validation_data))\n                val_x, val_y, val_sample_weights = self._standardize_user_data(\n                    val_x, val_y, val_sample_weight)\n                val_data = val_x + val_y + val_sample_weights\n                if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n                    val_data += [0.]\n                for cbk in callbacks:\n                    cbk.validation_data = val_data\n\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator,\n                                           use_multiprocessing=use_multiprocessing,\n                                           shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator,\n                                             use_multiprocessing=use_multiprocessing,\n                                             wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n\n        callback_model.stop_training = False\n        # Construct epoch logs.\n        epoch_logs = {}\n        while epoch < epochs:\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n                # build batch logs\n                batch_logs = {}\n                if isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n\n                outs = self.train_on_batch(x, y,\n                                           sample_weight=sample_weight,\n                                           class_weight=class_weight)\n\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n\n                batch_index += 1\n                steps_done += 1\n\n                # Epoch finished.\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(\n                            validation_generator,\n                            validation_steps,\n                            workers=0)\n                    else:\n                        # No need for try/except because\n                        # data has already been validated.\n                        val_outs = self.evaluate(\n                            val_x, val_y,\n                            batch_size=batch_size,\n                            sample_weight=val_sample_weights,\n                            verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    # Same labels assumed.\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n\n                if callback_model.stop_training:\n                    break\n\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n\n    callbacks.on_train_end()\n    return self.history",
                "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None,\n                       max_queue_size=10,\n                       workers=1,\n                       use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator,\n                                           use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator,\n                                             use_multiprocessing=use_multiprocessing,\n                                             wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n\n            if isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. '\n                                 'Batches should at least contain one item.')\n            all_outs.append(outs)\n\n            steps_done += 1\n            batch_sizes.append(batch_size)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if not isinstance(outs, list):\n        return np.average(np.asarray(all_outs),\n                          weights=batch_sizes)\n    else:\n        averages = []\n        for i in range(len(outs)):\n            averages.append(np.average([out[i] for out in all_outs],\n                                       weights=batch_sizes))\n        return averages",
                "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator,\n                                           use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator,\n                                             use_multiprocessing=use_multiprocessing,\n                                             wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                # Compatibility with the generators\n                # used for training.\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n            else:\n                # Assumes a generator that only\n                # yields inputs (not targets and sample weights).\n                x = generator_output\n\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n\n    for metric in metrics:\n        if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n            # custom handling of accuracy/crossentropy\n            # (because of class mode duality)\n            output_shape = self._internal_output_shapes[i]\n            if (output_shape[-1] == 1 or\n               self.loss_functions[i] == losses.binary_crossentropy):\n                # case: binary accuracy/crossentropy\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.binary_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.binary_crossentropy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                # case: categorical accuracy/crossentropy with sparse targets\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.sparse_categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.sparse_categorical_crossentropy\n            else:\n                # case: categorical accuracy/crossentropy\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.categorical_crossentropy\n            if metric in ('accuracy', 'acc'):\n                    suffix = 'acc'\n            elif metric in ('crossentropy', 'ce'):\n                    suffix = 'ce'\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + suffix\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            # Get metric name as string\n            if hasattr(metric_fn, 'name'):\n                metric_name = metric_fn.name\n            else:\n                metric_name = metric_fn.__name__\n            metric_name = metric_name_prefix + metric_name\n\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred,\n                                               weights=weights,\n                                               mask=masks[i])\n\n        # Append to self.metrics_names, self.metric_tensors,\n        # self.stateful_metric_names\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[i] + '_' + metric_name\n        # Dedupe name\n        j = 1\n        base_metric_name = metric_name\n        while metric_name in self.metrics_names:\n            metric_name = base_metric_name + '_' + str(j)\n            j += 1\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_result)\n\n        # Keep track of state updates created by\n        # stateful metrics (i.e. metrics layers).\n        if isinstance(metric_fn, Layer):\n            self.stateful_metric_names.append(metric_name)\n            self.metrics_updates += metric_fn.updates"
            ],
            "inscope_function_signatures": [
                "_standardize_input_data(data, names, shapes=None, check_batch_axis=True, exception_prefix='')",
                "_standardize_sample_or_class_weights(x_weight, output_names, weight_type)",
                "_standardize_class_weights(class_weight, output_names)",
                "_standardize_sample_weights(sample_weight, output_names)",
                "_check_array_lengths(inputs, targets, weights=None)",
                "_check_loss_and_target_compatibility(targets, loss_fns, output_shapes)",
                "_collect_metrics(metrics, output_names)",
                "_batch_shuffle(index_array, batch_size)",
                "_make_batches(size, batch_size)",
                "_slice_arrays(arrays, start=None, stop=None)",
                "_weighted_masked_objective(fn)",
                "_standardize_weights(y, sample_weight=None, class_weight=None, sample_weight_mode=None)",
                "set_of_lengths(x)",
                "weighted(y_true, y_pred, weights, mask=None)",
                "compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                "_check_trainable_weights_consistency(self)",
                "_make_train_function(self)",
                "_make_test_function(self)",
                "_make_predict_function(self)",
                "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None)",
                "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                "predict(self, x, batch_size=None, verbose=0, steps=None)",
                "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                "test_on_batch(self, x, y, sample_weight=None)",
                "predict_on_batch(self, x)",
                "fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                "evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False)",
                "predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                "handle_metrics(metrics, weights=None)"
            ],
            "variables_in_file": {
                "names": [
                    67,
                    99,
                    69,
                    104,
                    91,
                    78,
                    111,
                    52,
                    84,
                    87,
                    121,
                    59,
                    63
                ],
                "data": [
                    53,
                    56,
                    58,
                    61,
                    63,
                    68,
                    69,
                    70,
                    72,
                    74,
                    75,
                    76,
                    78,
                    79,
                    86,
                    93,
                    94,
                    98,
                    100,
                    106,
                    108,
                    124
                ],
                "hasattr": [
                    389,
                    390,
                    904,
                    393,
                    2209,
                    1065,
                    1453,
                    53,
                    1462,
                    2103,
                    2104,
                    2373,
                    967,
                    79,
                    978,
                    2130,
                    1365,
                    1113,
                    94,
                    1000,
                    1015,
                    1658,
                    1148,
                    381,
                    383
                ],
                "len": [
                    516,
                    529,
                    2094,
                    53,
                    59,
                    69,
                    78,
                    84,
                    86,
                    87,
                    91,
                    94,
                    99,
                    1635,
                    1638,
                    104,
                    108,
                    1645,
                    2156,
                    112,
                    628,
                    2167,
                    631,
                    2170,
                    1661,
                    637,
                    646,
                    142,
                    144,
                    145,
                    1171,
                    660,
                    152,
                    154,
                    156,
                    672,
                    675,
                    2215,
                    2218,
                    689,
                    693,
                    710,
                    1230,
                    208,
                    722,
                    212,
                    221,
                    1245,
                    765,
                    768,
                    772,
                    1288,
                    1311,
                    1314,
                    806,
                    2349,
                    819,
                    1342,
                    831,
                    2378,
                    332,
                    2381,
                    857,
                    1884,
                    1388,
                    2413,
                    1410,
                    1925,
                    917,
                    1946,
                    1435,
                    1439,
                    1443,
                    1446,
                    2473,
                    941,
                    2503,
                    2505,
                    970,
                    971,
                    478,
                    486,
                    2535,
                    492,
                    503,
                    507
                ],
                "ValueError": [
                    517,
                    510,
                    766,
                    273,
                    1811,
                    533,
                    664,
                    153,
                    1820,
                    673,
                    2210,
                    1063,
                    2475,
                    1068,
                    2221,
                    2351,
                    2096,
                    690,
                    54,
                    699,
                    2108,
                    65,
                    2374,
                    840,
                    2508,
                    80,
                    209,
                    2384,
                    213,
                    1622,
                    88,
                    217,
                    1496,
                    475,
                    2397,
                    222,
                    479,
                    1119,
                    1761,
                    226,
                    613,
                    741,
                    487,
                    1641,
                    109,
                    493,
                    752,
                    629,
                    119,
                    504,
                    2173,
                    254
                ],
                "exception_prefix": [
                    96,
                    110,
                    81,
                    55,
                    120,
                    89
                ],
                "_": [
                    2504,
                    2506,
                    301,
                    654,
                    143,
                    304,
                    660,
                    1397,
                    59,
                    637
                ],
                "range": [
                    1410,
                    772,
                    646,
                    1288,
                    1171,
                    660,
                    1300,
                    1175,
                    1183,
                    1314,
                    1443,
                    806,
                    941,
                    819,
                    59,
                    444,
                    710,
                    857,
                    355,
                    104,
                    1388,
                    2413,
                    1393,
                    637
                ],
                "isinstance": [
                    515,
                    764,
                    1667,
                    2180,
                    1418,
                    1674,
                    1678,
                    655,
                    145,
                    147,
                    1427,
                    661,
                    1302,
                    151,
                    1940,
                    1178,
                    671,
                    160,
                    2464,
                    930,
                    1828,
                    2085,
                    1190,
                    2340,
                    1322,
                    302,
                    688,
                    305,
                    1331,
                    1204,
                    309,
                    2227,
                    2229,
                    696,
                    2105,
                    2106,
                    61,
                    2241,
                    1219,
                    68,
                    69,
                    2500,
                    1236,
                    1878,
                    983,
                    1367,
                    2390,
                    2266,
                    2392,
                    2518,
                    610,
                    738,
                    1250,
                    2151,
                    2408,
                    1770,
                    1004,
                    627,
                    1395,
                    1651,
                    1018,
                    380,
                    1919
                ],
                "dict": [
                    160,
                    610,
                    515,
                    738,
                    2392,
                    305,
                    147,
                    661,
                    2229,
                    696,
                    61
                ],
                "__class__.__name__": [
                    63
                ],
                "__class__": [
                    63
                ],
                "x": [
                    1920,
                    385,
                    1922,
                    387,
                    1679,
                    1681,
                    1810,
                    1938,
                    1941,
                    1815,
                    1943,
                    1819,
                    1824,
                    1829,
                    1831,
                    2216,
                    2219,
                    1917,
                    2227,
                    2228,
                    2229,
                    2230,
                    2232,
                    2237,
                    63,
                    1473,
                    72,
                    200,
                    2504,
                    203,
                    76,
                    2379,
                    2382,
                    2506,
                    1490,
                    211,
                    1874,
                    1621,
                    1875,
                    1495,
                    1879,
                    1881,
                    1626,
                    1627,
                    1500,
                    1501,
                    2390,
                    2391,
                    1760,
                    2392,
                    2393,
                    2395,
                    1765,
                    1766,
                    1771,
                    1773,
                    2515,
                    2388,
                    2517,
                    1658,
                    1659,
                    1916,
                    1661,
                    1662
                ],
                "values": [
                    63
                ],
                "KeyError": [
                    64
                ],
                "e.args": [
                    66
                ],
                "e": [
                    66
                ],
                "str": [
                    512,
                    768,
                    2176,
                    771,
                    511,
                    274,
                    275,
                    154,
                    667,
                    156,
                    923,
                    1824,
                    1825,
                    675,
                    677,
                    2213,
                    681,
                    171,
                    2224,
                    693,
                    695,
                    316,
                    702,
                    67,
                    2377,
                    2511,
                    211,
                    84,
                    1620,
                    86,
                    215,
                    2387,
                    219,
                    220,
                    91,
                    93,
                    477,
                    224,
                    481,
                    98,
                    1371,
                    228,
                    229,
                    631,
                    488,
                    616,
                    745,
                    1500,
                    494,
                    112,
                    113,
                    633,
                    507,
                    505,
                    122,
                    123,
                    255
                ],
                "list": [
                    655,
                    145,
                    1427,
                    1302,
                    151,
                    671,
                    1190,
                    302,
                    688,
                    1331,
                    1204,
                    309,
                    2227,
                    2230,
                    444,
                    2241,
                    68,
                    1236,
                    2390,
                    2518,
                    216,
                    2393,
                    2266,
                    219,
                    220,
                    225,
                    1250,
                    228,
                    229,
                    2408,
                    627,
                    1395,
                    380,
                    764
                ],
                "float": [
                    1322,
                    1219,
                    69,
                    1418
                ],
                "int": [
                    1667,
                    1828,
                    69,
                    2180,
                    1674,
                    1770,
                    1004,
                    332,
                    1678,
                    1651,
                    1940,
                    1878,
                    983,
                    1018,
                    1659,
                    1661,
                    1919
                ],
                "np.asarray": [
                    2409,
                    100,
                    70,
                    526
                ],
                "np": [
                    1415,
                    520,
                    522,
                    526,
                    540,
                    542,
                    1312,
                    1313,
                    1319,
                    1337,
                    1213,
                    70,
                    76,
                    338,
                    340,
                    100,
                    1128,
                    2409,
                    2539,
                    2414,
                    2543
                ],
                "x.__class__.__name__": [
                    72
                ],
                "x.__class__": [
                    72
                ],
                "x.values": [
                    72,
                    2393,
                    2230
                ],
                "data.__class__.__name__": [
                    74
                ],
                "data.__class__": [
                    74
                ],
                "data.values": [
                    74
                ],
                "x.ndim": [
                    76
                ],
                "np.expand_dims": [
                    76
                ],
                "TypeError": [
                    708,
                    166,
                    680,
                    1224,
                    1225,
                    1620,
                    314,
                    95
                ],
                "shapes": [
                    105,
                    107,
                    103
                ],
                "i": [
                    104,
                    105,
                    106,
                    107,
                    108,
                    111,
                    121,
                    646,
                    647,
                    648,
                    649,
                    1171,
                    1172,
                    1173,
                    710,
                    711,
                    714,
                    715,
                    717,
                    1232,
                    1233,
                    724,
                    725,
                    727,
                    730,
                    732,
                    746,
                    747,
                    772,
                    773,
                    1288,
                    777,
                    778,
                    1289,
                    1290,
                    789,
                    790,
                    1307,
                    1308,
                    1313,
                    1314,
                    806,
                    807,
                    808,
                    1327,
                    1328,
                    819,
                    820,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    1338,
                    1339,
                    833,
                    857,
                    858,
                    1370,
                    861,
                    862,
                    863,
                    864,
                    865,
                    354,
                    355,
                    874,
                    876,
                    1388,
                    1389,
                    1390,
                    2413,
                    2414,
                    882,
                    1399,
                    1400,
                    1401,
                    1403,
                    1410,
                    1411,
                    1412,
                    1423,
                    1424,
                    913,
                    918,
                    1431,
                    1432,
                    1433,
                    1435,
                    1443,
                    1444,
                    1445,
                    941,
                    942,
                    943,
                    2525,
                    2526
                ],
                "data_shape": [
                    106,
                    113,
                    115,
                    117,
                    123
                ],
                "shape": [
                    271,
                    275,
                    1819,
                    1824,
                    1066,
                    2228,
                    2230,
                    1336,
                    1337,
                    714,
                    722,
                    1495,
                    2391,
                    729,
                    2393,
                    1115,
                    1500,
                    106,
                    107,
                    108,
                    112,
                    116,
                    117,
                    249,
                    122,
                    1659
                ],
                "ndim": [
                    442,
                    444,
                    108
                ],
                "check_batch_axis": [
                    114
                ],
                "dim": [
                    117,
                    118
                ],
                "ref_dim": [
                    117,
                    118
                ],
                "zip": [
                    2243,
                    1253,
                    1192,
                    271,
                    1487,
                    1459,
                    117,
                    1238,
                    1207,
                    249,
                    2269
                ],
                "x_weight": [
                    160,
                    163,
                    171,
                    142,
                    145,
                    146,
                    147,
                    148,
                    150,
                    151,
                    152,
                    154,
                    159
                ],
                "output_names": [
                    162,
                    301,
                    143,
                    144,
                    176,
                    304,
                    147,
                    148,
                    307,
                    182,
                    152,
                    156
                ],
                "weight_type": [
                    153,
                    169,
                    157,
                    167
                ],
                "x_weights": [
                    161,
                    163,
                    164
                ],
                "name": [
                    778,
                    781,
                    785,
                    789,
                    662,
                    663,
                    665,
                    669,
                    670,
                    797,
                    162,
                    163,
                    802,
                    307,
                    308,
                    697,
                    698,
                    700,
                    704,
                    705,
                    715,
                    723,
                    728,
                    1370,
                    1371,
                    611,
                    612,
                    739,
                    614,
                    740,
                    743,
                    618,
                    619,
                    620,
                    746,
                    751,
                    624,
                    752,
                    626,
                    755,
                    757,
                    761
                ],
                "x_weights.append": [
                    163
                ],
                "x_weight.get": [
                    163
                ],
                "_standardize_sample_or_class_weights": [
                    181,
                    175
                ],
                "class_weight": [
                    515,
                    1483,
                    526,
                    527,
                    175,
                    532,
                    1877,
                    1629,
                    2239
                ],
                "sample_weight": [
                    514,
                    2217,
                    2219,
                    181,
                    825,
                    830,
                    2238,
                    1481,
                    2380,
                    2382,
                    1876,
                    2388,
                    1628,
                    486,
                    1767,
                    488,
                    492,
                    494,
                    502,
                    503,
                    505,
                    509,
                    1918,
                    511
                ],
                "set": [
                    531,
                    203,
                    532
                ],
                "y": [
                    512,
                    1920,
                    1922,
                    516,
                    519,
                    520,
                    521,
                    522,
                    524,
                    271,
                    1679,
                    1681,
                    274,
                    540,
                    542,
                    2216,
                    2219,
                    1917,
                    1663,
                    2237,
                    1477,
                    203,
                    2379,
                    2382,
                    1487,
                    1490,
                    1491,
                    1874,
                    1621,
                    1875,
                    215,
                    1879,
                    1881,
                    1626,
                    1627,
                    2388,
                    1501,
                    253,
                    478,
                    1760,
                    481,
                    1765,
                    1766,
                    1771,
                    1773,
                    503,
                    249,
                    250,
                    507,
                    1916,
                    509,
                    255
                ],
                "y.shape": [
                    512,
                    481,
                    509,
                    503,
                    516,
                    519,
                    542,
                    521,
                    522,
                    203,
                    271,
                    274,
                    215,
                    507,
                    540,
                    253,
                    478,
                    255
                ],
                "set_x": [
                    208,
                    219,
                    205,
                    216
                ],
                "set_of_lengths": [
                    205,
                    206,
                    207
                ],
                "inputs": [
                    993,
                    1025,
                    1003,
                    205,
                    1005,
                    1008,
                    211,
                    982,
                    984,
                    1019,
                    1021
                ],
                "set_y": [
                    225,
                    228,
                    206,
                    212,
                    216,
                    220
                ],
                "targets": [
                    249,
                    206,
                    215
                ],
                "set_w": [
                    225,
                    221,
                    229,
                    207
                ],
                "weights": [
                    224,
                    868,
                    935,
                    526,
                    207,
                    912,
                    529,
                    440,
                    537,
                    443,
                    445,
                    446,
                    863
                ],
                "x.shape": [
                    2232,
                    2395,
                    211
                ],
                "w.shape": [
                    224
                ],
                "w": [
                    224
                ],
                "key_losses": [
                    246,
                    270
                ],
                "losses.mean_squared_error": [
                    246
                ],
                "losses": [
                    636,
                    1463,
                    876,
                    626,
                    882,
                    1460,
                    246,
                    247,
                    248,
                    634,
                    252
                ],
                "losses.binary_crossentropy": [
                    876,
                    247
                ],
                "losses.categorical_crossentropy": [
                    248,
                    252
                ],
                "loss": [
                    636,
                    610,
                    611,
                    619,
                    270,
                    633,
                    626,
                    627,
                    276,
                    628,
                    634,
                    249,
                    250,
                    603,
                    252,
                    605
                ],
                "loss_fns": [
                    249
                ],
                "output_shapes": [
                    1478,
                    1458,
                    1461,
                    249,
                    1468,
                    1470
                ],
                "target_dim": [
                    272,
                    271
                ],
                "out_dim": [
                    272,
                    271
                ],
                "loss.__name__": [
                    276
                ],
                "metrics": [
                    870,
                    811,
                    300,
                    302,
                    304,
                    305,
                    308,
                    852,
                    316
                ],
                "copy.copy": [
                    304,
                    1691,
                    1693
                ],
                "copy": [
                    304,
                    1691,
                    1693
                ],
                "nested_metrics": [
                    864,
                    306,
                    852,
                    311,
                    312
                ],
                "output_metrics": [
                    864,
                    934,
                    308,
                    309,
                    310,
                    311
                ],
                "metrics.get": [
                    308
                ],
                "nested_metrics.append": [
                    311
                ],
                "batch_count": [
                    336,
                    337,
                    332,
                    335
                ],
                "index_array": [
                    1217,
                    1319,
                    1128,
                    1321,
                    1415,
                    1417,
                    332,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    1211,
                    1213
                ],
                "batch_size": [
                    1155,
                    1414,
                    1808,
                    1809,
                    1819,
                    1825,
                    1699,
                    1062,
                    1318,
                    1834,
                    1201,
                    2228,
                    2230,
                    2232,
                    2234,
                    1211,
                    1215,
                    332,
                    1612,
                    1613,
                    335,
                    336,
                    337,
                    1494,
                    1495,
                    2263,
                    2391,
                    2393,
                    2395,
                    2396,
                    1630,
                    1375,
                    1248,
                    353,
                    354,
                    1758,
                    1124,
                    1759,
                    2402,
                    1768,
                    1777,
                    1650,
                    1278
                ],
                "last_batch": [
                    340,
                    335
                ],
                "index_array.reshape": [
                    337
                ],
                "np.random.shuffle": [
                    338,
                    1213
                ],
                "np.random": [
                    338,
                    1213
                ],
                "index_array.flatten": [
                    339
                ],
                "np.append": [
                    340
                ],
                "num_batches": [
                    353,
                    355
                ],
                "size": [
                    353,
                    354
                ],
                "min": [
                    354
                ],
                "arrays": [
                    385,
                    387,
                    392,
                    394,
                    378,
                    380
                ],
                "start": [
                    384,
                    385,
                    387,
                    389,
                    390,
                    391,
                    392,
                    393,
                    394,
                    381,
                    383
                ],
                "start.tolist": [
                    384,
                    391
                ],
                "stop": [
                    394,
                    387
                ],
                "fn": [
                    639,
                    413,
                    429
                ],
                "score_array": [
                    429,
                    434,
                    437,
                    442,
                    444,
                    445,
                    446,
                    447
                ],
                "y_true": [
                    861,
                    429,
                    911,
                    822,
                    829
                ],
                "y_pred": [
                    429,
                    911,
                    823,
                    829,
                    862
                ],
                "mask": [
                    430,
                    432,
                    434,
                    437,
                    826,
                    830
                ],
                "K.cast": [
                    432,
                    446
                ],
                "K": [
                    1025,
                    1667,
                    2180,
                    1289,
                    1674,
                    780,
                    910,
                    1678,
                    784,
                    1172,
                    1940,
                    796,
                    540,
                    542,
                    801,
                    1828,
                    432,
                    818,
                    437,
                    442,
                    443,
                    444,
                    828,
                    446,
                    447,
                    720,
                    722,
                    724,
                    725,
                    1878,
                    983,
                    856,
                    984,
                    986,
                    987,
                    993,
                    1770,
                    1004,
                    1005,
                    1389,
                    1008,
                    1651,
                    756,
                    760,
                    1018,
                    1019,
                    1919
                ],
                "K.floatx": [
                    432,
                    540,
                    446,
                    542
                ],
                "K.mean": [
                    444,
                    437,
                    446,
                    447
                ],
                "K.ndim": [
                    442,
                    443
                ],
                "weight_ndim": [
                    443,
                    444
                ],
                "K.not_equal": [
                    446
                ],
                "weighted": [
                    448
                ],
                "sample_weight_mode": [
                    738,
                    739,
                    771,
                    794,
                    765,
                    777,
                    751,
                    755,
                    473,
                    474,
                    539,
                    764,
                    477,
                    607
                ],
                "sample_weight.shape": [
                    486,
                    488,
                    492,
                    494,
                    503,
                    505,
                    509,
                    511
                ],
                "sample_weight.ndim": [
                    509
                ],
                "y_classes": [
                    520,
                    522,
                    524,
                    526,
                    529,
                    531
                ],
                "np.argmax": [
                    520
                ],
                "np.reshape": [
                    522
                ],
                "cls": [
                    526,
                    527
                ],
                "existing_classes": [
                    536,
                    531
                ],
                "existing_class_weight": [
                    536,
                    532
                ],
                "class_weight.keys": [
                    532
                ],
                "np.ones": [
                    540,
                    542
                ],
                "Container": [
                    545
                ],
                "self.optimizer": [
                    988,
                    987,
                    604
                ],
                "self": [
                    1024,
                    1025,
                    1026,
                    1027,
                    2081,
                    2083,
                    2114,
                    2118,
                    2120,
                    2125,
                    2126,
                    2130,
                    2131,
                    2133,
                    1626,
                    604,
                    605,
                    606,
                    607,
                    612,
                    1124,
                    616,
                    618,
                    1130,
                    1132,
                    1647,
                    1651,
                    628,
                    1141,
                    1142,
                    631,
                    1148,
                    637,
                    638,
                    1149,
                    1151,
                    2177,
                    642,
                    643,
                    644,
                    645,
                    1667,
                    2180,
                    1674,
                    652,
                    654,
                    1678,
                    1169,
                    1682,
                    1683,
                    660,
                    1686,
                    663,
                    1177,
                    1689,
                    667,
                    1690,
                    669,
                    672,
                    1698,
                    675,
                    685,
                    686,
                    1200,
                    689,
                    693,
                    698,
                    2237,
                    702,
                    704,
                    710,
                    712,
                    714,
                    715,
                    2254,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    730,
                    2261,
                    733,
                    1247,
                    740,
                    1765,
                    745,
                    746,
                    1259,
                    1770,
                    1878,
                    1774,
                    1775,
                    1776,
                    2289,
                    2388,
                    765,
                    1278,
                    768,
                    772,
                    1288,
                    1289,
                    778,
                    789,
                    1815,
                    1816,
                    1818,
                    2334,
                    804,
                    805,
                    806,
                    1828,
                    808,
                    1832,
                    1833,
                    811,
                    812,
                    813,
                    814,
                    1834,
                    819,
                    822,
                    823,
                    828,
                    831,
                    832,
                    833,
                    839,
                    847,
                    1874,
                    852,
                    853,
                    854,
                    855,
                    1365,
                    857,
                    1366,
                    1370,
                    1371,
                    861,
                    862,
                    1375,
                    1882,
                    1883,
                    874,
                    1386,
                    876,
                    882,
                    2517,
                    1916,
                    1919,
                    1923,
                    1924,
                    1938,
                    1939,
                    1940,
                    917,
                    918,
                    1944,
                    1945,
                    922,
                    2459,
                    925,
                    926,
                    931,
                    932,
                    938,
                    939,
                    940,
                    941,
                    1453,
                    943,
                    1459,
                    948,
                    950,
                    951,
                    952,
                    955,
                    956,
                    1473,
                    1474,
                    1477,
                    967,
                    970,
                    971,
                    1482,
                    1484,
                    1487,
                    978,
                    980,
                    981,
                    982,
                    983,
                    1492,
                    1493,
                    1494,
                    987,
                    988,
                    989,
                    990,
                    991,
                    993,
                    994,
                    997,
                    1000,
                    1002,
                    1003,
                    1004,
                    1008,
                    1009,
                    1010,
                    1012,
                    1015,
                    1016,
                    1017,
                    1018,
                    1019,
                    1021
                ],
                "optimizers.get": [
                    604
                ],
                "optimizers": [
                    604
                ],
                "optimizer": [
                    604
                ],
                "self.loss": [
                    605
                ],
                "self.loss_weights": [
                    606
                ],
                "loss_weights": [
                    672,
                    677,
                    678,
                    606,
                    681,
                    659,
                    661,
                    662,
                    670,
                    671
                ],
                "self.sample_weight_mode": [
                    607
                ],
                "self.output_names": [
                    772,
                    778,
                    789,
                    917,
                    663,
                    918,
                    667,
                    669,
                    698,
                    828,
                    702,
                    704,
                    833,
                    715,
                    852,
                    853,
                    612,
                    740,
                    616,
                    745,
                    618,
                    746
                ],
                "loss_functions": [
                    617,
                    626,
                    634,
                    637,
                    638,
                    639
                ],
                "warnings.warn": [
                    2466,
                    2342,
                    2087,
                    972,
                    620,
                    1616
                ],
                "warnings": [
                    2466,
                    2342,
                    2087,
                    972,
                    620,
                    1616
                ],
                "loss_functions.append": [
                    626
                ],
                "losses.get": [
                    626,
                    636,
                    634
                ],
                "loss.get": [
                    626
                ],
                "self.outputs": [
                    768,
                    1026,
                    637,
                    654,
                    660,
                    672,
                    675,
                    806,
                    689,
                    819,
                    693,
                    823,
                    831,
                    710,
                    724,
                    725,
                    727,
                    857,
                    862,
                    628,
                    631,
                    765
                ],
                "l": [
                    2243,
                    1239,
                    1253,
                    1254,
                    2244,
                    1192,
                    1193,
                    1238,
                    1207,
                    1208,
                    634,
                    2269,
                    2270
                ],
                "loss_function": [
                    636,
                    637
                ],
                "self.loss_functions": [
                    730,
                    876,
                    638,
                    882
                ],
                "weighted_losses": [
                    647,
                    824,
                    646,
                    639
                ],
                "_weighted_masked_objective": [
                    898,
                    902,
                    639
                ],
                "skip_target_indices": [
                    640,
                    711,
                    648,
                    820,
                    858
                ],
                "skip_target_weighing_indices": [
                    641,
                    773,
                    807,
                    649,
                    747,
                    942,
                    790,
                    732
                ],
                "self._feed_outputs": [
                    642,
                    727
                ],
                "self._feed_output_names": [
                    643,
                    1477,
                    1482,
                    1484,
                    728
                ],
                "self._feed_output_shapes": [
                    729,
                    1459,
                    644,
                    1493
                ],
                "self._feed_loss_fns": [
                    730,
                    1459,
                    1492,
                    645
                ],
                "skip_target_indices.append": [
                    648
                ],
                "skip_target_weighing_indices.append": [
                    649,
                    732
                ],
                "masks": [
                    652,
                    653,
                    654,
                    655,
                    656,
                    913,
                    826
                ],
                "self.compute_mask": [
                    652
                ],
                "self.inputs": [
                    652
                ],
                "loss_weights_list": [
                    678,
                    660,
                    827,
                    668,
                    670
                ],
                "loss_weights_list.append": [
                    670
                ],
                "loss_weights.get": [
                    670
                ],
                "self.targets": [
                    712,
                    861,
                    685,
                    822,
                    733
                ],
                "self._feed_targets": [
                    1386,
                    1003,
                    686,
                    1169,
                    982,
                    726
                ],
                "target_tensors": [
                    705,
                    706,
                    709,
                    716,
                    717,
                    687,
                    688,
                    689,
                    695,
                    696,
                    697
                ],
                "tmp_target_tensors": [
                    705,
                    706,
                    703
                ],
                "tmp_target_tensors.append": [
                    705
                ],
                "target_tensors.get": [
                    705
                ],
                "self.targets.append": [
                    712,
                    733
                ],
                "self._internal_output_shapes": [
                    714,
                    874
                ],
                "target": [
                    717,
                    719,
                    720,
                    721,
                    722,
                    726,
                    733
                ],
                "K.is_placeholder": [
                    720
                ],
                "K.placeholder": [
                    801,
                    780,
                    784,
                    722,
                    756,
                    760,
                    796
                ],
                "K.is_sparse": [
                    1172,
                    724,
                    1389,
                    1289
                ],
                "K.dtype": [
                    725
                ],
                "self._feed_targets.append": [
                    726
                ],
                "self._feed_outputs.append": [
                    727
                ],
                "self._feed_output_names.append": [
                    728
                ],
                "self._feed_output_shapes.append": [
                    729
                ],
                "self._feed_loss_fns.append": [
                    730
                ],
                "sample_weights": [
                    1664,
                    1665,
                    1666,
                    1920,
                    1922,
                    1679,
                    1681,
                    787,
                    792,
                    795,
                    800,
                    939,
                    943,
                    825,
                    1481,
                    1485,
                    1487,
                    1490,
                    1874,
                    1879,
                    1881,
                    1626,
                    1501,
                    863,
                    736,
                    1765,
                    1771,
                    1773,
                    763,
                    1916
                ],
                "sample_weight_modes": [
                    737,
                    803,
                    804,
                    775,
                    749,
                    782,
                    786,
                    758,
                    791,
                    762,
                    798
                ],
                "enumerate": [
                    1216,
                    1431,
                    1320,
                    1416,
                    746,
                    1370,
                    789,
                    1397,
                    1399,
                    1429,
                    1338,
                    1307,
                    2525
                ],
                "weight": [
                    774,
                    748,
                    780,
                    784,
                    787,
                    756,
                    760,
                    763
                ],
                "sample_weight_modes.append": [
                    803,
                    775,
                    749,
                    782,
                    786,
                    758,
                    791,
                    762,
                    798
                ],
                "sample_weight_mode.get": [
                    755
                ],
                "sample_weights.append": [
                    800,
                    795,
                    787,
                    792,
                    763
                ],
                "mode": [
                    777,
                    779,
                    1485,
                    1486
                ],
                "self.sample_weight_modes": [
                    808,
                    804
                ],
                "self._feed_sample_weight_modes": [
                    808,
                    805,
                    1487
                ],
                "self._feed_sample_weight_modes.append": [
                    808
                ],
                "self.metrics": [
                    1177,
                    811,
                    1366
                ],
                "self.weighted_metrics": [
                    812
                ],
                "weighted_metrics": [
                    812,
                    853
                ],
                "self.metrics_names": [
                    833,
                    2114,
                    1370,
                    813,
                    1686,
                    922,
                    925
                ],
                "self.metrics_tensors": [
                    832,
                    994,
                    814,
                    1009,
                    926
                ],
                "total_loss": [
                    834,
                    835,
                    837,
                    838,
                    938,
                    843,
                    848,
                    817
                ],
                "K.name_scope": [
                    910,
                    818,
                    856,
                    986,
                    987,
                    828
                ],
                "weighted_loss": [
                    824,
                    829
                ],
                "loss_weight": [
                    835,
                    827,
                    837
                ],
                "output_loss": [
                    832,
                    835,
                    837,
                    829
                ],
                "self.metrics_tensors.append": [
                    832,
                    926
                ],
                "self.metrics_names.append": [
                    833,
                    925
                ],
                "self.losses": [
                    847,
                    839
                ],
                "loss_tensor": [
                    848,
                    847
                ],
                "_collect_metrics": [
                    852,
                    853
                ],
                "nested_weighted_metrics": [
                    865,
                    853
                ],
                "self.metrics_updates": [
                    1010,
                    932,
                    854,
                    991
                ],
                "self.stateful_metric_names": [
                    931,
                    2120,
                    1132,
                    2125,
                    1141,
                    855,
                    1371
                ],
                "output_weighted_metrics": [
                    865,
                    935
                ],
                "metric_name_prefix": [
                    908,
                    899,
                    868
                ],
                "metric": [
                    896,
                    901,
                    870,
                    871,
                    878,
                    880,
                    884,
                    886,
                    890,
                    892,
                    894
                ],
                "output_shape": [
                    874,
                    875,
                    1459,
                    1461,
                    1470
                ],
                "metric_fn": [
                    898,
                    930,
                    932,
                    901,
                    902,
                    904,
                    905,
                    907,
                    879,
                    881,
                    885,
                    887,
                    891,
                    893
                ],
                "metrics_module.binary_accuracy": [
                    879
                ],
                "metrics_module": [
                    901,
                    879,
                    881,
                    885,
                    887,
                    891,
                    893
                ],
                "metrics_module.binary_crossentropy": [
                    881
                ],
                "losses.sparse_categorical_crossentropy": [
                    882,
                    1460
                ],
                "metrics_module.sparse_categorical_accuracy": [
                    885
                ],
                "metrics_module.sparse_categorical_crossentropy": [
                    887
                ],
                "metrics_module.categorical_accuracy": [
                    891
                ],
                "metrics_module.categorical_crossentropy": [
                    893
                ],
                "suffix": [
                    897,
                    899,
                    895
                ],
                "weighted_metric_fn": [
                    898,
                    902,
                    911
                ],
                "metric_name": [
                    899,
                    931,
                    905,
                    907,
                    908,
                    910,
                    918,
                    921,
                    922,
                    923,
                    925
                ],
                "metrics_module.get": [
                    901
                ],
                "metric_fn.name": [
                    905
                ],
                "metric_fn.__name__": [
                    907
                ],
                "metric_result": [
                    926,
                    911
                ],
                "j": [
                    920,
                    923,
                    924
                ],
                "base_metric_name": [
                    921,
                    923
                ],
                "Layer": [
                    930,
                    1367,
                    1178
                ],
                "self.stateful_metric_names.append": [
                    931
                ],
                "metric_fn.updates": [
                    932
                ],
                "handle_metrics": [
                    934,
                    935
                ],
                "self.total_loss": [
                    1009,
                    938,
                    994,
                    990
                ],
                "self.sample_weights": [
                    939,
                    941
                ],
                "self._feed_sample_weights": [
                    1386,
                    1003,
                    940,
                    943,
                    1169,
                    982
                ],
                "self._feed_sample_weights.append": [
                    943
                ],
                "self._function_kwargs": [
                    1012,
                    948,
                    997
                ],
                "kwargs": [
                    1024,
                    1029,
                    1615,
                    1618,
                    1619,
                    948,
                    1620
                ],
                "self.train_function": [
                    993,
                    1683,
                    981,
                    950,
                    1883
                ],
                "self.test_function": [
                    1924,
                    1002,
                    1775,
                    1008,
                    951,
                    1690
                ],
                "self.predict_function": [
                    1025,
                    1833,
                    952,
                    1016,
                    1945,
                    1017
                ],
                "trainable_weights": [
                    955,
                    956
                ],
                "self.trainable_weights": [
                    970,
                    955
                ],
                "self._collected_trainable_weights": [
                    971,
                    956,
                    989
                ],
                "UserWarning": [
                    2088,
                    2467,
                    972,
                    2343
                ],
                "RuntimeError": [
                    1001,
                    979,
                    1454
                ],
                "self._check_trainable_weights_consistency": [
                    980
                ],
                "self._feed_inputs": [
                    1288,
                    1289,
                    1386,
                    1003,
                    1169,
                    982,
                    1019,
                    1021
                ],
                "self.uses_learning_phase": [
                    1667,
                    1828,
                    2180,
                    1674,
                    1770,
                    1004,
                    1678,
                    1651,
                    1940,
                    1878,
                    983,
                    1018,
                    1919
                ],
                "K.learning_phase": [
                    1667,
                    1828,
                    2180,
                    1674,
                    1770,
                    1004,
                    1005,
                    1678,
                    1651,
                    1940,
                    1878,
                    983,
                    984,
                    1018,
                    1019,
                    1919
                ],
                "self.optimizer.__class__.__name__": [
                    987
                ],
                "self.optimizer.__class__": [
                    987
                ],
                "training_updates": [
                    988,
                    991
                ],
                "self.optimizer.get_updates": [
                    988
                ],
                "updates": [
                    995,
                    991
                ],
                "self.updates": [
                    991
                ],
                "K.function": [
                    1008,
                    993,
                    1025
                ],
                "self.state_updates": [
                    1010,
                    1027
                ],
                "getattr": [
                    1024,
                    1463
                ],
                "steps": [
                    1282,
                    1283,
                    1412,
                    1292,
                    1808,
                    1810,
                    1300,
                    1060,
                    2471,
                    2473,
                    1835,
                    2347,
                    2349,
                    2496,
                    2498,
                    2371,
                    1758,
                    1376,
                    1760,
                    1380,
                    1381,
                    1392,
                    1393,
                    1779,
                    1279
                ],
                "num_samples": [
                    1285,
                    1061,
                    1318,
                    1319,
                    1383,
                    1066,
                    1414,
                    1415,
                    1445,
                    1071,
                    1336,
                    1278,
                    1375
                ],
                "steps_name": [
                    1069,
                    1063
                ],
                "ins": [
                    1920,
                    1922,
                    1924,
                    1289,
                    1418,
                    1420,
                    1422,
                    1679,
                    1681,
                    1172,
                    1301,
                    1941,
                    1943,
                    1945,
                    1698,
                    1188,
                    1829,
                    1831,
                    1065,
                    1066,
                    1322,
                    1324,
                    1834,
                    1326,
                    1219,
                    1221,
                    1223,
                    1879,
                    1113,
                    1881,
                    1115,
                    1883,
                    1375,
                    1124,
                    1771,
                    1389,
                    1773,
                    1776,
                    1394,
                    1278
                ],
                "do_validation": [
                    1632,
                    2080,
                    1634,
                    2082,
                    2148,
                    1160,
                    1673,
                    2252,
                    1688,
                    1199,
                    1110,
                    1112,
                    1657,
                    2139,
                    1117,
                    1246
                ],
                "val_f": [
                    1701,
                    1200,
                    1111,
                    1690,
                    1694,
                    1247
                ],
                "val_ins": [
                    1668,
                    1701,
                    1670,
                    1675,
                    1166,
                    1200,
                    1695,
                    1652,
                    1654,
                    1111,
                    1113,
                    1115,
                    1247
                ],
                "verbose": [
                    1408,
                    1281,
                    1441,
                    1379,
                    1700,
                    2528,
                    1159,
                    2121,
                    1835,
                    1133,
                    1778,
                    1113,
                    2138,
                    1340,
                    1309,
                    2495
                ],
                "print": [
                    1114
                ],
                "validation_steps": [
                    1672,
                    1705,
                    2155,
                    2156,
                    2256,
                    1202,
                    2107,
                    1116
                ],
                "steps_per_epoch": [
                    2137,
                    1157,
                    1125,
                    1704,
                    1612,
                    2092,
                    1134,
                    2094,
                    2252,
                    1621,
                    1118,
                    2206,
                    1182,
                    1183
                ],
                "num_train_samples": [
                    1124,
                    1158,
                    1127,
                    1128,
                    1215
                ],
                "self._check_num_samples": [
                    1124,
                    1278,
                    1375
                ],
                "np.arange": [
                    1128,
                    1415,
                    1319
                ],
                "self.history": [
                    2118,
                    1130,
                    1259,
                    2126,
                    2289,
                    1142
                ],
                "cbks.History": [
                    1130,
                    2118
                ],
                "cbks": [
                    2118,
                    2119,
                    1130,
                    1131,
                    2123,
                    2127,
                    1139,
                    1143
                ],
                "_callbacks": [
                    2119,
                    2122,
                    1131,
                    2126,
                    2127,
                    1138,
                    1142,
                    1143
                ],
                "cbks.BaseLogger": [
                    1131,
                    2119
                ],
                "count_mode": [
                    1137,
                    1140,
                    1135
                ],
                "_callbacks.append": [
                    1138,
                    2122
                ],
                "cbks.ProgbarLogger": [
                    2123,
                    1139
                ],
                "callbacks": [
                    1153,
                    1154,
                    2182,
                    1163,
                    1165,
                    2203,
                    1180,
                    1187,
                    1700,
                    1195,
                    2235,
                    2246,
                    2126,
                    1231,
                    2127,
                    2134,
                    2135,
                    1241,
                    2142,
                    2275,
                    1255,
                    1258,
                    2288,
                    1142,
                    1143
                ],
                "cbks.CallbackList": [
                    2127,
                    1143
                ],
                "out_labels": [
                    1698,
                    2114,
                    2115,
                    1253,
                    2243,
                    1192,
                    2269,
                    1238,
                    1207,
                    1144,
                    1686,
                    1691,
                    1693
                ],
                "self.callback_model": [
                    2130,
                    2131,
                    1148,
                    1149
                ],
                "callback_model": [
                    2272,
                    1153,
                    2277,
                    1256,
                    1196,
                    1164,
                    2131,
                    2133,
                    2134,
                    2199,
                    1242,
                    1149,
                    1151
                ],
                "callbacks.set_model": [
                    1153,
                    2134
                ],
                "callbacks.set_params": [
                    1154,
                    2135
                ],
                "epochs": [
                    1699,
                    1156,
                    1618,
                    1175,
                    2136,
                    2202
                ],
                "callback_metrics": [
                    2115,
                    1702,
                    1161,
                    1691,
                    2140,
                    1693
                ],
                "callbacks.on_train_begin": [
                    1163,
                    2142
                ],
                "callback_model.stop_training": [
                    2272,
                    2277,
                    1256,
                    1196,
                    1164,
                    2199,
                    1242
                ],
                "cbk": [
                    2182,
                    1165,
                    1166,
                    2183
                ],
                "cbk.validation_data": [
                    1166,
                    2183
                ],
                "feed": [
                    1386,
                    1388,
                    1389,
                    1169,
                    1171,
                    1172
                ],
                "indices_for_conversion_to_dense": [
                    1287,
                    1290,
                    1387,
                    1390,
                    1327,
                    1232,
                    1423,
                    1170,
                    1173
                ],
                "issparse": [
                    1289,
                    1172,
                    1389
                ],
                "indices_for_conversion_to_dense.append": [
                    1290,
                    1173,
                    1390
                ],
                "epoch": [
                    2275,
                    2276,
                    1255,
                    1175,
                    2202,
                    2203,
                    1180,
                    2078
                ],
                "initial_epoch": [
                    1703,
                    2078,
                    1175
                ],
                "m": [
                    1366,
                    1367,
                    1368,
                    1177,
                    1178,
                    1179
                ],
                "m.reset_states": [
                    1368,
                    1179
                ],
                "callbacks.on_epoch_begin": [
                    2203,
                    1180
                ],
                "epoch_logs": [
                    2275,
                    1254,
                    1255,
                    1208,
                    2201,
                    1181,
                    2270
                ],
                "step_index": [
                    1185,
                    1187,
                    1195,
                    1183
                ],
                "batch_logs": [
                    1184,
                    1185,
                    1186,
                    1187,
                    2233,
                    2244,
                    2246,
                    1193,
                    1195,
                    1228,
                    1229,
                    1230,
                    1231,
                    2226,
                    1239,
                    1241,
                    2234,
                    2235
                ],
                "callbacks.on_batch_begin": [
                    1187,
                    2235,
                    1231
                ],
                "outs": [
                    1410,
                    1412,
                    1430,
                    1433,
                    1435,
                    1438,
                    1439,
                    1443,
                    1188,
                    1317,
                    1190,
                    1191,
                    1192,
                    1445,
                    1446,
                    1447,
                    1448,
                    1337,
                    1339,
                    2237,
                    1342,
                    1343,
                    1344,
                    2241,
                    2242,
                    2243,
                    1235,
                    1236,
                    1237,
                    1238,
                    2388,
                    2517,
                    2518,
                    2519,
                    2522,
                    2525,
                    2399,
                    1378,
                    2408,
                    2413,
                    1398,
                    1401,
                    1403,
                    1406,
                    1407
                ],
                "f": [
                    1698,
                    1188,
                    1833,
                    1834,
                    1775,
                    1776,
                    1330,
                    1235,
                    1394,
                    1301,
                    1426,
                    1683
                ],
                "o": [
                    2243,
                    2244,
                    1253,
                    1254,
                    1192,
                    1193,
                    1238,
                    1207,
                    1208,
                    1239,
                    2269,
                    2270
                ],
                "callbacks.on_batch_end": [
                    1241,
                    1195,
                    2246
                ],
                "val_outs": [
                    1250,
                    1251,
                    1253,
                    2254,
                    1200,
                    1204,
                    1205,
                    2261,
                    1207,
                    2266,
                    2267,
                    2269,
                    1247
                ],
                "self._test_loop": [
                    1200,
                    1776,
                    1247
                ],
                "shuffle": [
                    1210,
                    1212,
                    1701,
                    2189
                ],
                "_batch_shuffle": [
                    1211
                ],
                "batches": [
                    1216,
                    1318,
                    1414,
                    1320,
                    1416,
                    1245,
                    1215
                ],
                "_make_batches": [
                    1414,
                    1318,
                    1215
                ],
                "batch_index": [
                    1216,
                    2233,
                    2246,
                    1320,
                    1416,
                    2248,
                    1229,
                    1231,
                    1428,
                    1333,
                    2205,
                    1241,
                    2235,
                    1245,
                    1437
                ],
                "batch_start": [
                    1216,
                    1217,
                    1320,
                    1321,
                    1416,
                    1417,
                    1339
                ],
                "batch_end": [
                    1216,
                    1217,
                    1442,
                    1320,
                    1321,
                    1416,
                    1417,
                    1339,
                    1341
                ],
                "batch_ids": [
                    1217,
                    1221,
                    1223,
                    1321,
                    1417,
                    1324,
                    1420,
                    1230,
                    1326,
                    1422,
                    1435,
                    1439
                ],
                "ins_batch": [
                    1221,
                    1223,
                    1324,
                    1420,
                    1326,
                    1422,
                    1328,
                    1233,
                    1330,
                    1235,
                    1424,
                    1426
                ],
                "_slice_arrays": [
                    1665,
                    1666,
                    1221,
                    1223,
                    1420,
                    1324,
                    1326,
                    1422,
                    1662,
                    1663
                ],
                "toarray": [
                    1328,
                    1233,
                    1424
                ],
                "callbacks.on_epoch_end": [
                    2275,
                    1255
                ],
                "callbacks.on_train_end": [
                    2288,
                    1258
                ],
                "progbar": [
                    2496,
                    1409,
                    1442,
                    1283,
                    2529,
                    1381,
                    1285,
                    1383,
                    1341,
                    1310
                ],
                "Progbar": [
                    2496,
                    1283,
                    1381,
                    1285,
                    1383
                ],
                "unconcatenated_outs": [
                    1312,
                    1313,
                    1314,
                    1299,
                    1306,
                    1308,
                    1311
                ],
                "step": [
                    1409,
                    1393,
                    1396,
                    1300,
                    1304,
                    1405,
                    1310
                ],
                "batch_outs": [
                    1426,
                    1427,
                    1429,
                    1301,
                    1431,
                    1302,
                    1303,
                    1305,
                    1307,
                    1439,
                    1330,
                    1331,
                    1332,
                    1335,
                    1338,
                    1394,
                    1395,
                    1397,
                    1399,
                    1407
                ],
                "batch_out": [
                    1431,
                    1337,
                    1401,
                    1433,
                    1339,
                    1403,
                    1435,
                    1429,
                    1335,
                    1336,
                    1305,
                    1338,
                    1307,
                    1308,
                    1399
                ],
                "unconcatenated_outs.append": [
                    1306
                ],
                "append": [
                    1308,
                    2526
                ],
                "progbar.update": [
                    1409,
                    1442,
                    2529,
                    1341,
                    1310
                ],
                "np.concatenate": [
                    1312,
                    1313,
                    2539,
                    2543
                ],
                "batch_out.shape": [
                    1336
                ],
                "outs.append": [
                    1438,
                    1430,
                    1398,
                    1337,
                    1406
                ],
                "np.zeros": [
                    1337
                ],
                "batch_out.dtype": [
                    1337
                ],
                "stateful_metric_indices": [
                    1411,
                    1444,
                    1432,
                    1400,
                    1369,
                    1373
                ],
                "loss_fn": [
                    1459,
                    1460,
                    1462,
                    1463
                ],
                "output_shapes.append": [
                    1468,
                    1461,
                    1470
                ],
                "loss_fn.__name__": [
                    1463
                ],
                "_standardize_input_data": [
                    1473,
                    1938,
                    1477,
                    1815
                ],
                "self._feed_input_names": [
                    1473,
                    1938,
                    1815
                ],
                "self._feed_input_shapes": [
                    1816,
                    1474,
                    1939
                ],
                "_standardize_sample_weights": [
                    1481
                ],
                "class_weights": [
                    1483,
                    1487
                ],
                "_standardize_class_weights": [
                    1483
                ],
                "_standardize_weights": [
                    1485
                ],
                "ref": [
                    1485,
                    1486
                ],
                "sw": [
                    1485,
                    1486
                ],
                "cw": [
                    1485,
                    1486
                ],
                "check_array_lengths": [
                    1489
                ],
                "_check_array_lengths": [
                    1490
                ],
                "_check_loss_and_target_compatibility": [
                    1491
                ],
                "self.stateful": [
                    1818,
                    1494
                ],
                "kwargs.pop": [
                    1618
                ],
                "self._standardize_user_data": [
                    2177,
                    1765,
                    1647,
                    1874,
                    1626,
                    1916
                ],
                "validation_data": [
                    2176,
                    2080,
                    2103,
                    2104,
                    2105,
                    2106,
                    1633,
                    1635,
                    1636,
                    1638,
                    1639,
                    2151,
                    2153,
                    2156,
                    1645,
                    2159,
                    2165,
                    2167,
                    2168,
                    2170,
                    2171
                ],
                "val_x": [
                    2177,
                    2178,
                    2179,
                    1636,
                    1668,
                    1670,
                    1639,
                    1647,
                    1648,
                    1652,
                    1654,
                    2262,
                    2168,
                    2171,
                    1662
                ],
                "val_y": [
                    2177,
                    2178,
                    2179,
                    1636,
                    1668,
                    1670,
                    1639,
                    1647,
                    1648,
                    1652,
                    1654,
                    2262,
                    2168,
                    2171,
                    1663
                ],
                "val_sample_weight": [
                    2178,
                    1637,
                    1639,
                    1649,
                    2169,
                    2171
                ],
                "val_sample_weights": [
                    1664,
                    2177,
                    2179,
                    1668,
                    1670,
                    1647,
                    1652,
                    1654,
                    2264
                ],
                "validation_split": [
                    1656,
                    1659,
                    1661
                ],
                "split_at": [
                    1665,
                    1666,
                    1659,
                    1661,
                    1662,
                    1663
                ],
                "self._make_train_function": [
                    2081,
                    1682,
                    1882
                ],
                "self._make_test_function": [
                    2083,
                    1923,
                    1774,
                    1689,
                    2334
                ],
                "n": [
                    2115,
                    1691
                ],
                "self._fit_loop": [
                    1698
                ],
                "self._make_predict_function": [
                    1832,
                    2459,
                    1944
                ],
                "self._predict_loop": [
                    1834
                ],
                "outputs": [
                    1924,
                    1925,
                    1926,
                    1927,
                    1947,
                    1948,
                    1945,
                    1946,
                    1883,
                    1884,
                    1885,
                    1886
                ],
                "wait_time": [
                    2337,
                    2161,
                    2193,
                    2077,
                    2489,
                    2365,
                    2462
                ],
                "bool": [
                    2080
                ],
                "is_sequence": [
                    2464,
                    2465,
                    2340,
                    2085,
                    2086,
                    2341,
                    2472,
                    2186,
                    2348,
                    2093,
                    2483,
                    2359
                ],
                "generator": [
                    2464,
                    2369,
                    2340,
                    2085,
                    2473,
                    2187,
                    2349,
                    2094,
                    2191,
                    2484,
                    2197,
                    2487,
                    2360,
                    2363,
                    2493
                ],
                "Sequence": [
                    2464,
                    2340,
                    2085,
                    2151,
                    2105,
                    2106
                ],
                "use_multiprocessing": [
                    2465,
                    2341,
                    2086,
                    2154,
                    2188,
                    2160,
                    2192,
                    2485,
                    2488,
                    2361,
                    2364
                ],
                "workers": [
                    2465,
                    2341,
                    2150,
                    2086,
                    2185,
                    2162,
                    2194,
                    2482,
                    2358,
                    2490,
                    2366
                ],
                "val_gen": [
                    2253,
                    2106,
                    2149,
                    2103
                ],
                "enqueuer": [
                    2187,
                    2191,
                    2194,
                    2195,
                    2479,
                    2355,
                    2484,
                    2487,
                    2360,
                    2490,
                    2491,
                    2363,
                    2366,
                    2367,
                    2144,
                    2532,
                    2405,
                    2406,
                    2533,
                    2282,
                    2283
                ],
                "val_enqueuer": [
                    2145,
                    2152,
                    2285,
                    2158,
                    2286,
                    2162,
                    2163
                ],
                "OrderedEnqueuer": [
                    2152,
                    2360,
                    2187,
                    2484
                ],
                "GeneratorEnqueuer": [
                    2487,
                    2363,
                    2158,
                    2191
                ],
                "val_enqueuer.start": [
                    2162
                ],
                "max_queue_size": [
                    2490,
                    2162,
                    2366,
                    2194
                ],
                "validation_generator": [
                    2163,
                    2165,
                    2255
                ],
                "val_enqueuer.get": [
                    2163
                ],
                "val_data": [
                    2179,
                    2181,
                    2183
                ],
                "enqueuer.start": [
                    2490,
                    2194,
                    2366
                ],
                "output_generator": [
                    2207,
                    2369,
                    2499,
                    2372,
                    2195,
                    2197,
                    2491,
                    2493,
                    2367
                ],
                "enqueuer.get": [
                    2195,
                    2491,
                    2367
                ],
                "steps_done": [
                    2336,
                    2401,
                    2498,
                    2371,
                    2529,
                    2536,
                    2249,
                    2252,
                    2540,
                    2204,
                    2461,
                    2206,
                    2527
                ],
                "generator_output": [
                    2207,
                    2209,
                    2213,
                    2215,
                    2216,
                    2218,
                    2219,
                    2224,
                    2499,
                    2372,
                    2373,
                    2500,
                    2503,
                    2504,
                    2377,
                    2378,
                    2379,
                    2505,
                    2381,
                    2382,
                    2506,
                    2511,
                    2387,
                    2515
                ],
                "next": [
                    2499,
                    2372,
                    2207
                ],
                "self.train_on_batch": [
                    2237
                ],
                "self.evaluate_generator": [
                    2254
                ],
                "self.evaluate": [
                    2261
                ],
                "enqueuer.stop": [
                    2283,
                    2533,
                    2406
                ],
                "val_enqueuer.stop": [
                    2286
                ],
                "interfaces.legacy_generator_methods_support": [
                    2418,
                    2291,
                    1950
                ],
                "interfaces": [
                    2418,
                    2291,
                    1950
                ],
                "all_outs": [
                    2338,
                    2399,
                    2535,
                    2409,
                    2537,
                    2539,
                    2541,
                    2414,
                    2543,
                    2521,
                    2523,
                    2526,
                    2463
                ],
                "batch_sizes": [
                    2402,
                    2339,
                    2410,
                    2415
                ],
                "self.test_on_batch": [
                    2388
                ],
                "all_outs.append": [
                    2523,
                    2399
                ],
                "batch_sizes.append": [
                    2402
                ],
                "np.average": [
                    2409,
                    2414
                ],
                "averages": [
                    2416,
                    2412,
                    2414
                ],
                "averages.append": [
                    2414
                ],
                "out": [
                    2541,
                    2414,
                    2543,
                    2522,
                    2525,
                    2526
                ],
                "tuple": [
                    2500
                ],
                "self.predict_on_batch": [
                    2517
                ]
            },
            "filtered_variables_in_file": {
                "names": [
                    67,
                    99,
                    69,
                    104,
                    91,
                    78,
                    111,
                    52,
                    84,
                    87,
                    121,
                    59,
                    63
                ],
                "data": [
                    53,
                    56,
                    58,
                    61,
                    63,
                    68,
                    69,
                    70,
                    72,
                    74,
                    75,
                    76,
                    78,
                    79,
                    86,
                    93,
                    94,
                    98,
                    100,
                    106,
                    108,
                    124
                ],
                "exception_prefix": [
                    96,
                    110,
                    81,
                    55,
                    120,
                    89
                ],
                "_": [
                    2504,
                    2506,
                    301,
                    654,
                    143,
                    304,
                    660,
                    1397,
                    59,
                    637
                ],
                "__class__.__name__": [
                    63
                ],
                "__class__": [
                    63
                ],
                "x": [
                    1920,
                    385,
                    1922,
                    387,
                    1679,
                    1681,
                    1810,
                    1938,
                    1941,
                    1815,
                    1943,
                    1819,
                    1824,
                    1829,
                    1831,
                    2216,
                    2219,
                    1917,
                    2227,
                    2228,
                    2229,
                    2230,
                    2232,
                    2237,
                    63,
                    1473,
                    72,
                    200,
                    2504,
                    203,
                    76,
                    2379,
                    2382,
                    2506,
                    1490,
                    211,
                    1874,
                    1621,
                    1875,
                    1495,
                    1879,
                    1881,
                    1626,
                    1627,
                    1500,
                    1501,
                    2390,
                    2391,
                    1760,
                    2392,
                    2393,
                    2395,
                    1765,
                    1766,
                    1771,
                    1773,
                    2515,
                    2388,
                    2517,
                    1658,
                    1659,
                    1916,
                    1661,
                    1662
                ],
                "values": [
                    63
                ],
                "e.args": [
                    66
                ],
                "e": [
                    66
                ],
                "np.asarray": [
                    2409,
                    100,
                    70,
                    526
                ],
                "np": [
                    1415,
                    520,
                    522,
                    526,
                    540,
                    542,
                    1312,
                    1313,
                    1319,
                    1337,
                    1213,
                    70,
                    76,
                    338,
                    340,
                    100,
                    1128,
                    2409,
                    2539,
                    2414,
                    2543
                ],
                "x.__class__.__name__": [
                    72
                ],
                "x.__class__": [
                    72
                ],
                "x.values": [
                    72,
                    2393,
                    2230
                ],
                "data.__class__.__name__": [
                    74
                ],
                "data.__class__": [
                    74
                ],
                "data.values": [
                    74
                ],
                "x.ndim": [
                    76
                ],
                "np.expand_dims": [
                    76
                ],
                "shapes": [
                    105,
                    107,
                    103
                ],
                "i": [
                    104,
                    105,
                    106,
                    107,
                    108,
                    111,
                    121,
                    646,
                    647,
                    648,
                    649,
                    1171,
                    1172,
                    1173,
                    710,
                    711,
                    714,
                    715,
                    717,
                    1232,
                    1233,
                    724,
                    725,
                    727,
                    730,
                    732,
                    746,
                    747,
                    772,
                    773,
                    1288,
                    777,
                    778,
                    1289,
                    1290,
                    789,
                    790,
                    1307,
                    1308,
                    1313,
                    1314,
                    806,
                    807,
                    808,
                    1327,
                    1328,
                    819,
                    820,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    1338,
                    1339,
                    833,
                    857,
                    858,
                    1370,
                    861,
                    862,
                    863,
                    864,
                    865,
                    354,
                    355,
                    874,
                    876,
                    1388,
                    1389,
                    1390,
                    2413,
                    2414,
                    882,
                    1399,
                    1400,
                    1401,
                    1403,
                    1410,
                    1411,
                    1412,
                    1423,
                    1424,
                    913,
                    918,
                    1431,
                    1432,
                    1433,
                    1435,
                    1443,
                    1444,
                    1445,
                    941,
                    942,
                    943,
                    2525,
                    2526
                ],
                "data_shape": [
                    106,
                    113,
                    115,
                    117,
                    123
                ],
                "shape": [
                    271,
                    275,
                    1819,
                    1824,
                    1066,
                    2228,
                    2230,
                    1336,
                    1337,
                    714,
                    722,
                    1495,
                    2391,
                    729,
                    2393,
                    1115,
                    1500,
                    106,
                    107,
                    108,
                    112,
                    116,
                    117,
                    249,
                    122,
                    1659
                ],
                "ndim": [
                    442,
                    444,
                    108
                ],
                "check_batch_axis": [
                    114
                ],
                "dim": [
                    117,
                    118
                ],
                "ref_dim": [
                    117,
                    118
                ],
                "x_weight": [
                    160,
                    163,
                    171,
                    142,
                    145,
                    146,
                    147,
                    148,
                    150,
                    151,
                    152,
                    154,
                    159
                ],
                "output_names": [
                    162,
                    301,
                    143,
                    144,
                    176,
                    304,
                    147,
                    148,
                    307,
                    182,
                    152,
                    156
                ],
                "weight_type": [
                    153,
                    169,
                    157,
                    167
                ],
                "x_weights": [
                    161,
                    163,
                    164
                ],
                "name": [
                    778,
                    781,
                    785,
                    789,
                    662,
                    663,
                    665,
                    669,
                    670,
                    797,
                    162,
                    163,
                    802,
                    307,
                    308,
                    697,
                    698,
                    700,
                    704,
                    705,
                    715,
                    723,
                    728,
                    1370,
                    1371,
                    611,
                    612,
                    739,
                    614,
                    740,
                    743,
                    618,
                    619,
                    620,
                    746,
                    751,
                    624,
                    752,
                    626,
                    755,
                    757,
                    761
                ],
                "x_weights.append": [
                    163
                ],
                "x_weight.get": [
                    163
                ],
                "_standardize_sample_or_class_weights": [
                    181,
                    175
                ],
                "class_weight": [
                    515,
                    1483,
                    526,
                    527,
                    175,
                    532,
                    1877,
                    1629,
                    2239
                ],
                "sample_weight": [
                    514,
                    2217,
                    2219,
                    181,
                    825,
                    830,
                    2238,
                    1481,
                    2380,
                    2382,
                    1876,
                    2388,
                    1628,
                    486,
                    1767,
                    488,
                    492,
                    494,
                    502,
                    503,
                    505,
                    509,
                    1918,
                    511
                ],
                "y": [
                    512,
                    1920,
                    1922,
                    516,
                    519,
                    520,
                    521,
                    522,
                    524,
                    271,
                    1679,
                    1681,
                    274,
                    540,
                    542,
                    2216,
                    2219,
                    1917,
                    1663,
                    2237,
                    1477,
                    203,
                    2379,
                    2382,
                    1487,
                    1490,
                    1491,
                    1874,
                    1621,
                    1875,
                    215,
                    1879,
                    1881,
                    1626,
                    1627,
                    2388,
                    1501,
                    253,
                    478,
                    1760,
                    481,
                    1765,
                    1766,
                    1771,
                    1773,
                    503,
                    249,
                    250,
                    507,
                    1916,
                    509,
                    255
                ],
                "y.shape": [
                    512,
                    481,
                    509,
                    503,
                    516,
                    519,
                    542,
                    521,
                    522,
                    203,
                    271,
                    274,
                    215,
                    507,
                    540,
                    253,
                    478,
                    255
                ],
                "set_x": [
                    208,
                    219,
                    205,
                    216
                ],
                "set_of_lengths": [
                    205,
                    206,
                    207
                ],
                "inputs": [
                    993,
                    1025,
                    1003,
                    205,
                    1005,
                    1008,
                    211,
                    982,
                    984,
                    1019,
                    1021
                ],
                "set_y": [
                    225,
                    228,
                    206,
                    212,
                    216,
                    220
                ],
                "targets": [
                    249,
                    206,
                    215
                ],
                "set_w": [
                    225,
                    221,
                    229,
                    207
                ],
                "weights": [
                    224,
                    868,
                    935,
                    526,
                    207,
                    912,
                    529,
                    440,
                    537,
                    443,
                    445,
                    446,
                    863
                ],
                "x.shape": [
                    2232,
                    2395,
                    211
                ],
                "w.shape": [
                    224
                ],
                "w": [
                    224
                ],
                "key_losses": [
                    246,
                    270
                ],
                "losses.mean_squared_error": [
                    246
                ],
                "losses": [
                    636,
                    1463,
                    876,
                    626,
                    882,
                    1460,
                    246,
                    247,
                    248,
                    634,
                    252
                ],
                "losses.binary_crossentropy": [
                    876,
                    247
                ],
                "losses.categorical_crossentropy": [
                    248,
                    252
                ],
                "loss": [
                    636,
                    610,
                    611,
                    619,
                    270,
                    633,
                    626,
                    627,
                    276,
                    628,
                    634,
                    249,
                    250,
                    603,
                    252,
                    605
                ],
                "loss_fns": [
                    249
                ],
                "output_shapes": [
                    1478,
                    1458,
                    1461,
                    249,
                    1468,
                    1470
                ],
                "target_dim": [
                    272,
                    271
                ],
                "out_dim": [
                    272,
                    271
                ],
                "loss.__name__": [
                    276
                ],
                "metrics": [
                    870,
                    811,
                    300,
                    302,
                    304,
                    305,
                    308,
                    852,
                    316
                ],
                "copy.copy": [
                    304,
                    1691,
                    1693
                ],
                "copy": [
                    304,
                    1691,
                    1693
                ],
                "nested_metrics": [
                    864,
                    306,
                    852,
                    311,
                    312
                ],
                "output_metrics": [
                    864,
                    934,
                    308,
                    309,
                    310,
                    311
                ],
                "metrics.get": [
                    308
                ],
                "nested_metrics.append": [
                    311
                ],
                "batch_count": [
                    336,
                    337,
                    332,
                    335
                ],
                "index_array": [
                    1217,
                    1319,
                    1128,
                    1321,
                    1415,
                    1417,
                    332,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    1211,
                    1213
                ],
                "batch_size": [
                    1155,
                    1414,
                    1808,
                    1809,
                    1819,
                    1825,
                    1699,
                    1062,
                    1318,
                    1834,
                    1201,
                    2228,
                    2230,
                    2232,
                    2234,
                    1211,
                    1215,
                    332,
                    1612,
                    1613,
                    335,
                    336,
                    337,
                    1494,
                    1495,
                    2263,
                    2391,
                    2393,
                    2395,
                    2396,
                    1630,
                    1375,
                    1248,
                    353,
                    354,
                    1758,
                    1124,
                    1759,
                    2402,
                    1768,
                    1777,
                    1650,
                    1278
                ],
                "last_batch": [
                    340,
                    335
                ],
                "index_array.reshape": [
                    337
                ],
                "np.random.shuffle": [
                    338,
                    1213
                ],
                "np.random": [
                    338,
                    1213
                ],
                "index_array.flatten": [
                    339
                ],
                "np.append": [
                    340
                ],
                "num_batches": [
                    353,
                    355
                ],
                "size": [
                    353,
                    354
                ],
                "arrays": [
                    385,
                    387,
                    392,
                    394,
                    378,
                    380
                ],
                "start": [
                    384,
                    385,
                    387,
                    389,
                    390,
                    391,
                    392,
                    393,
                    394,
                    381,
                    383
                ],
                "start.tolist": [
                    384,
                    391
                ],
                "stop": [
                    394,
                    387
                ],
                "fn": [
                    639,
                    413,
                    429
                ],
                "score_array": [
                    429,
                    434,
                    437,
                    442,
                    444,
                    445,
                    446,
                    447
                ],
                "y_true": [
                    861,
                    429,
                    911,
                    822,
                    829
                ],
                "y_pred": [
                    429,
                    911,
                    823,
                    829,
                    862
                ],
                "mask": [
                    430,
                    432,
                    434,
                    437,
                    826,
                    830
                ],
                "K.cast": [
                    432,
                    446
                ],
                "K": [
                    1025,
                    1667,
                    2180,
                    1289,
                    1674,
                    780,
                    910,
                    1678,
                    784,
                    1172,
                    1940,
                    796,
                    540,
                    542,
                    801,
                    1828,
                    432,
                    818,
                    437,
                    442,
                    443,
                    444,
                    828,
                    446,
                    447,
                    720,
                    722,
                    724,
                    725,
                    1878,
                    983,
                    856,
                    984,
                    986,
                    987,
                    993,
                    1770,
                    1004,
                    1005,
                    1389,
                    1008,
                    1651,
                    756,
                    760,
                    1018,
                    1019,
                    1919
                ],
                "K.floatx": [
                    432,
                    540,
                    446,
                    542
                ],
                "K.mean": [
                    444,
                    437,
                    446,
                    447
                ],
                "K.ndim": [
                    442,
                    443
                ],
                "weight_ndim": [
                    443,
                    444
                ],
                "K.not_equal": [
                    446
                ],
                "weighted": [
                    448
                ],
                "sample_weight_mode": [
                    738,
                    739,
                    771,
                    794,
                    765,
                    777,
                    751,
                    755,
                    473,
                    474,
                    539,
                    764,
                    477,
                    607
                ],
                "sample_weight.shape": [
                    486,
                    488,
                    492,
                    494,
                    503,
                    505,
                    509,
                    511
                ],
                "sample_weight.ndim": [
                    509
                ],
                "y_classes": [
                    520,
                    522,
                    524,
                    526,
                    529,
                    531
                ],
                "np.argmax": [
                    520
                ],
                "np.reshape": [
                    522
                ],
                "cls": [
                    526,
                    527
                ],
                "existing_classes": [
                    536,
                    531
                ],
                "existing_class_weight": [
                    536,
                    532
                ],
                "class_weight.keys": [
                    532
                ],
                "np.ones": [
                    540,
                    542
                ],
                "Container": [
                    545
                ],
                "self.optimizer": [
                    988,
                    987,
                    604
                ],
                "self": [
                    1024,
                    1025,
                    1026,
                    1027,
                    2081,
                    2083,
                    2114,
                    2118,
                    2120,
                    2125,
                    2126,
                    2130,
                    2131,
                    2133,
                    1626,
                    604,
                    605,
                    606,
                    607,
                    612,
                    1124,
                    616,
                    618,
                    1130,
                    1132,
                    1647,
                    1651,
                    628,
                    1141,
                    1142,
                    631,
                    1148,
                    637,
                    638,
                    1149,
                    1151,
                    2177,
                    642,
                    643,
                    644,
                    645,
                    1667,
                    2180,
                    1674,
                    652,
                    654,
                    1678,
                    1169,
                    1682,
                    1683,
                    660,
                    1686,
                    663,
                    1177,
                    1689,
                    667,
                    1690,
                    669,
                    672,
                    1698,
                    675,
                    685,
                    686,
                    1200,
                    689,
                    693,
                    698,
                    2237,
                    702,
                    704,
                    710,
                    712,
                    714,
                    715,
                    2254,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    730,
                    2261,
                    733,
                    1247,
                    740,
                    1765,
                    745,
                    746,
                    1259,
                    1770,
                    1878,
                    1774,
                    1775,
                    1776,
                    2289,
                    2388,
                    765,
                    1278,
                    768,
                    772,
                    1288,
                    1289,
                    778,
                    789,
                    1815,
                    1816,
                    1818,
                    2334,
                    804,
                    805,
                    806,
                    1828,
                    808,
                    1832,
                    1833,
                    811,
                    812,
                    813,
                    814,
                    1834,
                    819,
                    822,
                    823,
                    828,
                    831,
                    832,
                    833,
                    839,
                    847,
                    1874,
                    852,
                    853,
                    854,
                    855,
                    1365,
                    857,
                    1366,
                    1370,
                    1371,
                    861,
                    862,
                    1375,
                    1882,
                    1883,
                    874,
                    1386,
                    876,
                    882,
                    2517,
                    1916,
                    1919,
                    1923,
                    1924,
                    1938,
                    1939,
                    1940,
                    917,
                    918,
                    1944,
                    1945,
                    922,
                    2459,
                    925,
                    926,
                    931,
                    932,
                    938,
                    939,
                    940,
                    941,
                    1453,
                    943,
                    1459,
                    948,
                    950,
                    951,
                    952,
                    955,
                    956,
                    1473,
                    1474,
                    1477,
                    967,
                    970,
                    971,
                    1482,
                    1484,
                    1487,
                    978,
                    980,
                    981,
                    982,
                    983,
                    1492,
                    1493,
                    1494,
                    987,
                    988,
                    989,
                    990,
                    991,
                    993,
                    994,
                    997,
                    1000,
                    1002,
                    1003,
                    1004,
                    1008,
                    1009,
                    1010,
                    1012,
                    1015,
                    1016,
                    1017,
                    1018,
                    1019,
                    1021
                ],
                "optimizers.get": [
                    604
                ],
                "optimizers": [
                    604
                ],
                "optimizer": [
                    604
                ],
                "self.loss": [
                    605
                ],
                "self.loss_weights": [
                    606
                ],
                "loss_weights": [
                    672,
                    677,
                    678,
                    606,
                    681,
                    659,
                    661,
                    662,
                    670,
                    671
                ],
                "self.sample_weight_mode": [
                    607
                ],
                "self.output_names": [
                    772,
                    778,
                    789,
                    917,
                    663,
                    918,
                    667,
                    669,
                    698,
                    828,
                    702,
                    704,
                    833,
                    715,
                    852,
                    853,
                    612,
                    740,
                    616,
                    745,
                    618,
                    746
                ],
                "loss_functions": [
                    617,
                    626,
                    634,
                    637,
                    638,
                    639
                ],
                "warnings.warn": [
                    2466,
                    2342,
                    2087,
                    972,
                    620,
                    1616
                ],
                "warnings": [
                    2466,
                    2342,
                    2087,
                    972,
                    620,
                    1616
                ],
                "loss_functions.append": [
                    626
                ],
                "losses.get": [
                    626,
                    636,
                    634
                ],
                "loss.get": [
                    626
                ],
                "self.outputs": [
                    768,
                    1026,
                    637,
                    654,
                    660,
                    672,
                    675,
                    806,
                    689,
                    819,
                    693,
                    823,
                    831,
                    710,
                    724,
                    725,
                    727,
                    857,
                    862,
                    628,
                    631,
                    765
                ],
                "l": [
                    2243,
                    1239,
                    1253,
                    1254,
                    2244,
                    1192,
                    1193,
                    1238,
                    1207,
                    1208,
                    634,
                    2269,
                    2270
                ],
                "loss_function": [
                    636,
                    637
                ],
                "self.loss_functions": [
                    730,
                    876,
                    638,
                    882
                ],
                "weighted_losses": [
                    647,
                    824,
                    646,
                    639
                ],
                "_weighted_masked_objective": [
                    898,
                    902,
                    639
                ],
                "skip_target_indices": [
                    640,
                    711,
                    648,
                    820,
                    858
                ],
                "skip_target_weighing_indices": [
                    641,
                    773,
                    807,
                    649,
                    747,
                    942,
                    790,
                    732
                ],
                "self._feed_outputs": [
                    642,
                    727
                ],
                "self._feed_output_names": [
                    643,
                    1477,
                    1482,
                    1484,
                    728
                ],
                "self._feed_output_shapes": [
                    729,
                    1459,
                    644,
                    1493
                ],
                "self._feed_loss_fns": [
                    730,
                    1459,
                    1492,
                    645
                ],
                "skip_target_indices.append": [
                    648
                ],
                "skip_target_weighing_indices.append": [
                    649,
                    732
                ],
                "masks": [
                    652,
                    653,
                    654,
                    655,
                    656,
                    913,
                    826
                ],
                "self.compute_mask": [
                    652
                ],
                "self.inputs": [
                    652
                ],
                "loss_weights_list": [
                    678,
                    660,
                    827,
                    668,
                    670
                ],
                "loss_weights_list.append": [
                    670
                ],
                "loss_weights.get": [
                    670
                ],
                "self.targets": [
                    712,
                    861,
                    685,
                    822,
                    733
                ],
                "self._feed_targets": [
                    1386,
                    1003,
                    686,
                    1169,
                    982,
                    726
                ],
                "target_tensors": [
                    705,
                    706,
                    709,
                    716,
                    717,
                    687,
                    688,
                    689,
                    695,
                    696,
                    697
                ],
                "tmp_target_tensors": [
                    705,
                    706,
                    703
                ],
                "tmp_target_tensors.append": [
                    705
                ],
                "target_tensors.get": [
                    705
                ],
                "self.targets.append": [
                    712,
                    733
                ],
                "self._internal_output_shapes": [
                    714,
                    874
                ],
                "target": [
                    717,
                    719,
                    720,
                    721,
                    722,
                    726,
                    733
                ],
                "K.is_placeholder": [
                    720
                ],
                "K.placeholder": [
                    801,
                    780,
                    784,
                    722,
                    756,
                    760,
                    796
                ],
                "K.is_sparse": [
                    1172,
                    724,
                    1389,
                    1289
                ],
                "K.dtype": [
                    725
                ],
                "self._feed_targets.append": [
                    726
                ],
                "self._feed_outputs.append": [
                    727
                ],
                "self._feed_output_names.append": [
                    728
                ],
                "self._feed_output_shapes.append": [
                    729
                ],
                "self._feed_loss_fns.append": [
                    730
                ],
                "sample_weights": [
                    1664,
                    1665,
                    1666,
                    1920,
                    1922,
                    1679,
                    1681,
                    787,
                    792,
                    795,
                    800,
                    939,
                    943,
                    825,
                    1481,
                    1485,
                    1487,
                    1490,
                    1874,
                    1879,
                    1881,
                    1626,
                    1501,
                    863,
                    736,
                    1765,
                    1771,
                    1773,
                    763,
                    1916
                ],
                "sample_weight_modes": [
                    737,
                    803,
                    804,
                    775,
                    749,
                    782,
                    786,
                    758,
                    791,
                    762,
                    798
                ],
                "weight": [
                    774,
                    748,
                    780,
                    784,
                    787,
                    756,
                    760,
                    763
                ],
                "sample_weight_modes.append": [
                    803,
                    775,
                    749,
                    782,
                    786,
                    758,
                    791,
                    762,
                    798
                ],
                "sample_weight_mode.get": [
                    755
                ],
                "sample_weights.append": [
                    800,
                    795,
                    787,
                    792,
                    763
                ],
                "mode": [
                    777,
                    779,
                    1485,
                    1486
                ],
                "self.sample_weight_modes": [
                    808,
                    804
                ],
                "self._feed_sample_weight_modes": [
                    808,
                    805,
                    1487
                ],
                "self._feed_sample_weight_modes.append": [
                    808
                ],
                "self.metrics": [
                    1177,
                    811,
                    1366
                ],
                "self.weighted_metrics": [
                    812
                ],
                "weighted_metrics": [
                    812,
                    853
                ],
                "self.metrics_names": [
                    833,
                    2114,
                    1370,
                    813,
                    1686,
                    922,
                    925
                ],
                "self.metrics_tensors": [
                    832,
                    994,
                    814,
                    1009,
                    926
                ],
                "total_loss": [
                    834,
                    835,
                    837,
                    838,
                    938,
                    843,
                    848,
                    817
                ],
                "K.name_scope": [
                    910,
                    818,
                    856,
                    986,
                    987,
                    828
                ],
                "weighted_loss": [
                    824,
                    829
                ],
                "loss_weight": [
                    835,
                    827,
                    837
                ],
                "output_loss": [
                    832,
                    835,
                    837,
                    829
                ],
                "self.metrics_tensors.append": [
                    832,
                    926
                ],
                "self.metrics_names.append": [
                    833,
                    925
                ],
                "self.losses": [
                    847,
                    839
                ],
                "loss_tensor": [
                    848,
                    847
                ],
                "_collect_metrics": [
                    852,
                    853
                ],
                "nested_weighted_metrics": [
                    865,
                    853
                ],
                "self.metrics_updates": [
                    1010,
                    932,
                    854,
                    991
                ],
                "self.stateful_metric_names": [
                    931,
                    2120,
                    1132,
                    2125,
                    1141,
                    855,
                    1371
                ],
                "output_weighted_metrics": [
                    865,
                    935
                ],
                "metric_name_prefix": [
                    908,
                    899,
                    868
                ],
                "metric": [
                    896,
                    901,
                    870,
                    871,
                    878,
                    880,
                    884,
                    886,
                    890,
                    892,
                    894
                ],
                "output_shape": [
                    874,
                    875,
                    1459,
                    1461,
                    1470
                ],
                "metric_fn": [
                    898,
                    930,
                    932,
                    901,
                    902,
                    904,
                    905,
                    907,
                    879,
                    881,
                    885,
                    887,
                    891,
                    893
                ],
                "metrics_module.binary_accuracy": [
                    879
                ],
                "metrics_module": [
                    901,
                    879,
                    881,
                    885,
                    887,
                    891,
                    893
                ],
                "metrics_module.binary_crossentropy": [
                    881
                ],
                "losses.sparse_categorical_crossentropy": [
                    882,
                    1460
                ],
                "metrics_module.sparse_categorical_accuracy": [
                    885
                ],
                "metrics_module.sparse_categorical_crossentropy": [
                    887
                ],
                "metrics_module.categorical_accuracy": [
                    891
                ],
                "metrics_module.categorical_crossentropy": [
                    893
                ],
                "suffix": [
                    897,
                    899,
                    895
                ],
                "weighted_metric_fn": [
                    898,
                    902,
                    911
                ],
                "metric_name": [
                    899,
                    931,
                    905,
                    907,
                    908,
                    910,
                    918,
                    921,
                    922,
                    923,
                    925
                ],
                "metrics_module.get": [
                    901
                ],
                "metric_fn.name": [
                    905
                ],
                "metric_fn.__name__": [
                    907
                ],
                "metric_result": [
                    926,
                    911
                ],
                "j": [
                    920,
                    923,
                    924
                ],
                "base_metric_name": [
                    921,
                    923
                ],
                "Layer": [
                    930,
                    1367,
                    1178
                ],
                "self.stateful_metric_names.append": [
                    931
                ],
                "metric_fn.updates": [
                    932
                ],
                "handle_metrics": [
                    934,
                    935
                ],
                "self.total_loss": [
                    1009,
                    938,
                    994,
                    990
                ],
                "self.sample_weights": [
                    939,
                    941
                ],
                "self._feed_sample_weights": [
                    1386,
                    1003,
                    940,
                    943,
                    1169,
                    982
                ],
                "self._feed_sample_weights.append": [
                    943
                ],
                "self._function_kwargs": [
                    1012,
                    948,
                    997
                ],
                "kwargs": [
                    1024,
                    1029,
                    1615,
                    1618,
                    1619,
                    948,
                    1620
                ],
                "self.train_function": [
                    993,
                    1683,
                    981,
                    950,
                    1883
                ],
                "self.test_function": [
                    1924,
                    1002,
                    1775,
                    1008,
                    951,
                    1690
                ],
                "self.predict_function": [
                    1025,
                    1833,
                    952,
                    1016,
                    1945,
                    1017
                ],
                "trainable_weights": [
                    955,
                    956
                ],
                "self.trainable_weights": [
                    970,
                    955
                ],
                "self._collected_trainable_weights": [
                    971,
                    956,
                    989
                ],
                "self._check_trainable_weights_consistency": [
                    980
                ],
                "self._feed_inputs": [
                    1288,
                    1289,
                    1386,
                    1003,
                    1169,
                    982,
                    1019,
                    1021
                ],
                "self.uses_learning_phase": [
                    1667,
                    1828,
                    2180,
                    1674,
                    1770,
                    1004,
                    1678,
                    1651,
                    1940,
                    1878,
                    983,
                    1018,
                    1919
                ],
                "K.learning_phase": [
                    1667,
                    1828,
                    2180,
                    1674,
                    1770,
                    1004,
                    1005,
                    1678,
                    1651,
                    1940,
                    1878,
                    983,
                    984,
                    1018,
                    1019,
                    1919
                ],
                "self.optimizer.__class__.__name__": [
                    987
                ],
                "self.optimizer.__class__": [
                    987
                ],
                "training_updates": [
                    988,
                    991
                ],
                "self.optimizer.get_updates": [
                    988
                ],
                "updates": [
                    995,
                    991
                ],
                "self.updates": [
                    991
                ],
                "K.function": [
                    1008,
                    993,
                    1025
                ],
                "self.state_updates": [
                    1010,
                    1027
                ],
                "steps": [
                    1282,
                    1283,
                    1412,
                    1292,
                    1808,
                    1810,
                    1300,
                    1060,
                    2471,
                    2473,
                    1835,
                    2347,
                    2349,
                    2496,
                    2498,
                    2371,
                    1758,
                    1376,
                    1760,
                    1380,
                    1381,
                    1392,
                    1393,
                    1779,
                    1279
                ],
                "num_samples": [
                    1285,
                    1061,
                    1318,
                    1319,
                    1383,
                    1066,
                    1414,
                    1415,
                    1445,
                    1071,
                    1336,
                    1278,
                    1375
                ],
                "steps_name": [
                    1069,
                    1063
                ],
                "ins": [
                    1920,
                    1922,
                    1924,
                    1289,
                    1418,
                    1420,
                    1422,
                    1679,
                    1681,
                    1172,
                    1301,
                    1941,
                    1943,
                    1945,
                    1698,
                    1188,
                    1829,
                    1831,
                    1065,
                    1066,
                    1322,
                    1324,
                    1834,
                    1326,
                    1219,
                    1221,
                    1223,
                    1879,
                    1113,
                    1881,
                    1115,
                    1883,
                    1375,
                    1124,
                    1771,
                    1389,
                    1773,
                    1776,
                    1394,
                    1278
                ],
                "do_validation": [
                    1632,
                    2080,
                    1634,
                    2082,
                    2148,
                    1160,
                    1673,
                    2252,
                    1688,
                    1199,
                    1110,
                    1112,
                    1657,
                    2139,
                    1117,
                    1246
                ],
                "val_f": [
                    1701,
                    1200,
                    1111,
                    1690,
                    1694,
                    1247
                ],
                "val_ins": [
                    1668,
                    1701,
                    1670,
                    1675,
                    1166,
                    1200,
                    1695,
                    1652,
                    1654,
                    1111,
                    1113,
                    1115,
                    1247
                ],
                "verbose": [
                    1408,
                    1281,
                    1441,
                    1379,
                    1700,
                    2528,
                    1159,
                    2121,
                    1835,
                    1133,
                    1778,
                    1113,
                    2138,
                    1340,
                    1309,
                    2495
                ],
                "validation_steps": [
                    1672,
                    1705,
                    2155,
                    2156,
                    2256,
                    1202,
                    2107,
                    1116
                ],
                "steps_per_epoch": [
                    2137,
                    1157,
                    1125,
                    1704,
                    1612,
                    2092,
                    1134,
                    2094,
                    2252,
                    1621,
                    1118,
                    2206,
                    1182,
                    1183
                ],
                "num_train_samples": [
                    1124,
                    1158,
                    1127,
                    1128,
                    1215
                ],
                "self._check_num_samples": [
                    1124,
                    1278,
                    1375
                ],
                "np.arange": [
                    1128,
                    1415,
                    1319
                ],
                "self.history": [
                    2118,
                    1130,
                    1259,
                    2126,
                    2289,
                    1142
                ],
                "cbks.History": [
                    1130,
                    2118
                ],
                "cbks": [
                    2118,
                    2119,
                    1130,
                    1131,
                    2123,
                    2127,
                    1139,
                    1143
                ],
                "_callbacks": [
                    2119,
                    2122,
                    1131,
                    2126,
                    2127,
                    1138,
                    1142,
                    1143
                ],
                "cbks.BaseLogger": [
                    1131,
                    2119
                ],
                "count_mode": [
                    1137,
                    1140,
                    1135
                ],
                "_callbacks.append": [
                    1138,
                    2122
                ],
                "cbks.ProgbarLogger": [
                    2123,
                    1139
                ],
                "callbacks": [
                    1153,
                    1154,
                    2182,
                    1163,
                    1165,
                    2203,
                    1180,
                    1187,
                    1700,
                    1195,
                    2235,
                    2246,
                    2126,
                    1231,
                    2127,
                    2134,
                    2135,
                    1241,
                    2142,
                    2275,
                    1255,
                    1258,
                    2288,
                    1142,
                    1143
                ],
                "cbks.CallbackList": [
                    2127,
                    1143
                ],
                "out_labels": [
                    1698,
                    2114,
                    2115,
                    1253,
                    2243,
                    1192,
                    2269,
                    1238,
                    1207,
                    1144,
                    1686,
                    1691,
                    1693
                ],
                "self.callback_model": [
                    2130,
                    2131,
                    1148,
                    1149
                ],
                "callback_model": [
                    2272,
                    1153,
                    2277,
                    1256,
                    1196,
                    1164,
                    2131,
                    2133,
                    2134,
                    2199,
                    1242,
                    1149,
                    1151
                ],
                "callbacks.set_model": [
                    1153,
                    2134
                ],
                "callbacks.set_params": [
                    1154,
                    2135
                ],
                "epochs": [
                    1699,
                    1156,
                    1618,
                    1175,
                    2136,
                    2202
                ],
                "callback_metrics": [
                    2115,
                    1702,
                    1161,
                    1691,
                    2140,
                    1693
                ],
                "callbacks.on_train_begin": [
                    1163,
                    2142
                ],
                "callback_model.stop_training": [
                    2272,
                    2277,
                    1256,
                    1196,
                    1164,
                    2199,
                    1242
                ],
                "cbk": [
                    2182,
                    1165,
                    1166,
                    2183
                ],
                "cbk.validation_data": [
                    1166,
                    2183
                ],
                "feed": [
                    1386,
                    1388,
                    1389,
                    1169,
                    1171,
                    1172
                ],
                "indices_for_conversion_to_dense": [
                    1287,
                    1290,
                    1387,
                    1390,
                    1327,
                    1232,
                    1423,
                    1170,
                    1173
                ],
                "issparse": [
                    1289,
                    1172,
                    1389
                ],
                "indices_for_conversion_to_dense.append": [
                    1290,
                    1173,
                    1390
                ],
                "epoch": [
                    2275,
                    2276,
                    1255,
                    1175,
                    2202,
                    2203,
                    1180,
                    2078
                ],
                "initial_epoch": [
                    1703,
                    2078,
                    1175
                ],
                "m": [
                    1366,
                    1367,
                    1368,
                    1177,
                    1178,
                    1179
                ],
                "m.reset_states": [
                    1368,
                    1179
                ],
                "callbacks.on_epoch_begin": [
                    2203,
                    1180
                ],
                "epoch_logs": [
                    2275,
                    1254,
                    1255,
                    1208,
                    2201,
                    1181,
                    2270
                ],
                "step_index": [
                    1185,
                    1187,
                    1195,
                    1183
                ],
                "batch_logs": [
                    1184,
                    1185,
                    1186,
                    1187,
                    2233,
                    2244,
                    2246,
                    1193,
                    1195,
                    1228,
                    1229,
                    1230,
                    1231,
                    2226,
                    1239,
                    1241,
                    2234,
                    2235
                ],
                "callbacks.on_batch_begin": [
                    1187,
                    2235,
                    1231
                ],
                "outs": [
                    1410,
                    1412,
                    1430,
                    1433,
                    1435,
                    1438,
                    1439,
                    1443,
                    1188,
                    1317,
                    1190,
                    1191,
                    1192,
                    1445,
                    1446,
                    1447,
                    1448,
                    1337,
                    1339,
                    2237,
                    1342,
                    1343,
                    1344,
                    2241,
                    2242,
                    2243,
                    1235,
                    1236,
                    1237,
                    1238,
                    2388,
                    2517,
                    2518,
                    2519,
                    2522,
                    2525,
                    2399,
                    1378,
                    2408,
                    2413,
                    1398,
                    1401,
                    1403,
                    1406,
                    1407
                ],
                "f": [
                    1698,
                    1188,
                    1833,
                    1834,
                    1775,
                    1776,
                    1330,
                    1235,
                    1394,
                    1301,
                    1426,
                    1683
                ],
                "o": [
                    2243,
                    2244,
                    1253,
                    1254,
                    1192,
                    1193,
                    1238,
                    1207,
                    1208,
                    1239,
                    2269,
                    2270
                ],
                "callbacks.on_batch_end": [
                    1241,
                    1195,
                    2246
                ],
                "val_outs": [
                    1250,
                    1251,
                    1253,
                    2254,
                    1200,
                    1204,
                    1205,
                    2261,
                    1207,
                    2266,
                    2267,
                    2269,
                    1247
                ],
                "self._test_loop": [
                    1200,
                    1776,
                    1247
                ],
                "shuffle": [
                    1210,
                    1212,
                    1701,
                    2189
                ],
                "_batch_shuffle": [
                    1211
                ],
                "batches": [
                    1216,
                    1318,
                    1414,
                    1320,
                    1416,
                    1245,
                    1215
                ],
                "_make_batches": [
                    1414,
                    1318,
                    1215
                ],
                "batch_index": [
                    1216,
                    2233,
                    2246,
                    1320,
                    1416,
                    2248,
                    1229,
                    1231,
                    1428,
                    1333,
                    2205,
                    1241,
                    2235,
                    1245,
                    1437
                ],
                "batch_start": [
                    1216,
                    1217,
                    1320,
                    1321,
                    1416,
                    1417,
                    1339
                ],
                "batch_end": [
                    1216,
                    1217,
                    1442,
                    1320,
                    1321,
                    1416,
                    1417,
                    1339,
                    1341
                ],
                "batch_ids": [
                    1217,
                    1221,
                    1223,
                    1321,
                    1417,
                    1324,
                    1420,
                    1230,
                    1326,
                    1422,
                    1435,
                    1439
                ],
                "ins_batch": [
                    1221,
                    1223,
                    1324,
                    1420,
                    1326,
                    1422,
                    1328,
                    1233,
                    1330,
                    1235,
                    1424,
                    1426
                ],
                "_slice_arrays": [
                    1665,
                    1666,
                    1221,
                    1223,
                    1420,
                    1324,
                    1326,
                    1422,
                    1662,
                    1663
                ],
                "toarray": [
                    1328,
                    1233,
                    1424
                ],
                "callbacks.on_epoch_end": [
                    2275,
                    1255
                ],
                "callbacks.on_train_end": [
                    2288,
                    1258
                ],
                "progbar": [
                    2496,
                    1409,
                    1442,
                    1283,
                    2529,
                    1381,
                    1285,
                    1383,
                    1341,
                    1310
                ],
                "Progbar": [
                    2496,
                    1283,
                    1381,
                    1285,
                    1383
                ],
                "unconcatenated_outs": [
                    1312,
                    1313,
                    1314,
                    1299,
                    1306,
                    1308,
                    1311
                ],
                "step": [
                    1409,
                    1393,
                    1396,
                    1300,
                    1304,
                    1405,
                    1310
                ],
                "batch_outs": [
                    1426,
                    1427,
                    1429,
                    1301,
                    1431,
                    1302,
                    1303,
                    1305,
                    1307,
                    1439,
                    1330,
                    1331,
                    1332,
                    1335,
                    1338,
                    1394,
                    1395,
                    1397,
                    1399,
                    1407
                ],
                "batch_out": [
                    1431,
                    1337,
                    1401,
                    1433,
                    1339,
                    1403,
                    1435,
                    1429,
                    1335,
                    1336,
                    1305,
                    1338,
                    1307,
                    1308,
                    1399
                ],
                "unconcatenated_outs.append": [
                    1306
                ],
                "append": [
                    1308,
                    2526
                ],
                "progbar.update": [
                    1409,
                    1442,
                    2529,
                    1341,
                    1310
                ],
                "np.concatenate": [
                    1312,
                    1313,
                    2539,
                    2543
                ],
                "batch_out.shape": [
                    1336
                ],
                "outs.append": [
                    1438,
                    1430,
                    1398,
                    1337,
                    1406
                ],
                "np.zeros": [
                    1337
                ],
                "batch_out.dtype": [
                    1337
                ],
                "stateful_metric_indices": [
                    1411,
                    1444,
                    1432,
                    1400,
                    1369,
                    1373
                ],
                "loss_fn": [
                    1459,
                    1460,
                    1462,
                    1463
                ],
                "output_shapes.append": [
                    1468,
                    1461,
                    1470
                ],
                "loss_fn.__name__": [
                    1463
                ],
                "_standardize_input_data": [
                    1473,
                    1938,
                    1477,
                    1815
                ],
                "self._feed_input_names": [
                    1473,
                    1938,
                    1815
                ],
                "self._feed_input_shapes": [
                    1816,
                    1474,
                    1939
                ],
                "_standardize_sample_weights": [
                    1481
                ],
                "class_weights": [
                    1483,
                    1487
                ],
                "_standardize_class_weights": [
                    1483
                ],
                "_standardize_weights": [
                    1485
                ],
                "ref": [
                    1485,
                    1486
                ],
                "sw": [
                    1485,
                    1486
                ],
                "cw": [
                    1485,
                    1486
                ],
                "check_array_lengths": [
                    1489
                ],
                "_check_array_lengths": [
                    1490
                ],
                "_check_loss_and_target_compatibility": [
                    1491
                ],
                "self.stateful": [
                    1818,
                    1494
                ],
                "kwargs.pop": [
                    1618
                ],
                "self._standardize_user_data": [
                    2177,
                    1765,
                    1647,
                    1874,
                    1626,
                    1916
                ],
                "validation_data": [
                    2176,
                    2080,
                    2103,
                    2104,
                    2105,
                    2106,
                    1633,
                    1635,
                    1636,
                    1638,
                    1639,
                    2151,
                    2153,
                    2156,
                    1645,
                    2159,
                    2165,
                    2167,
                    2168,
                    2170,
                    2171
                ],
                "val_x": [
                    2177,
                    2178,
                    2179,
                    1636,
                    1668,
                    1670,
                    1639,
                    1647,
                    1648,
                    1652,
                    1654,
                    2262,
                    2168,
                    2171,
                    1662
                ],
                "val_y": [
                    2177,
                    2178,
                    2179,
                    1636,
                    1668,
                    1670,
                    1639,
                    1647,
                    1648,
                    1652,
                    1654,
                    2262,
                    2168,
                    2171,
                    1663
                ],
                "val_sample_weight": [
                    2178,
                    1637,
                    1639,
                    1649,
                    2169,
                    2171
                ],
                "val_sample_weights": [
                    1664,
                    2177,
                    2179,
                    1668,
                    1670,
                    1647,
                    1652,
                    1654,
                    2264
                ],
                "validation_split": [
                    1656,
                    1659,
                    1661
                ],
                "split_at": [
                    1665,
                    1666,
                    1659,
                    1661,
                    1662,
                    1663
                ],
                "self._make_train_function": [
                    2081,
                    1682,
                    1882
                ],
                "self._make_test_function": [
                    2083,
                    1923,
                    1774,
                    1689,
                    2334
                ],
                "n": [
                    2115,
                    1691
                ],
                "self._fit_loop": [
                    1698
                ],
                "self._make_predict_function": [
                    1832,
                    2459,
                    1944
                ],
                "self._predict_loop": [
                    1834
                ],
                "outputs": [
                    1924,
                    1925,
                    1926,
                    1927,
                    1947,
                    1948,
                    1945,
                    1946,
                    1883,
                    1884,
                    1885,
                    1886
                ],
                "wait_time": [
                    2337,
                    2161,
                    2193,
                    2077,
                    2489,
                    2365,
                    2462
                ],
                "is_sequence": [
                    2464,
                    2465,
                    2340,
                    2085,
                    2086,
                    2341,
                    2472,
                    2186,
                    2348,
                    2093,
                    2483,
                    2359
                ],
                "generator": [
                    2464,
                    2369,
                    2340,
                    2085,
                    2473,
                    2187,
                    2349,
                    2094,
                    2191,
                    2484,
                    2197,
                    2487,
                    2360,
                    2363,
                    2493
                ],
                "Sequence": [
                    2464,
                    2340,
                    2085,
                    2151,
                    2105,
                    2106
                ],
                "use_multiprocessing": [
                    2465,
                    2341,
                    2086,
                    2154,
                    2188,
                    2160,
                    2192,
                    2485,
                    2488,
                    2361,
                    2364
                ],
                "workers": [
                    2465,
                    2341,
                    2150,
                    2086,
                    2185,
                    2162,
                    2194,
                    2482,
                    2358,
                    2490,
                    2366
                ],
                "val_gen": [
                    2253,
                    2106,
                    2149,
                    2103
                ],
                "enqueuer": [
                    2187,
                    2191,
                    2194,
                    2195,
                    2479,
                    2355,
                    2484,
                    2487,
                    2360,
                    2490,
                    2491,
                    2363,
                    2366,
                    2367,
                    2144,
                    2532,
                    2405,
                    2406,
                    2533,
                    2282,
                    2283
                ],
                "val_enqueuer": [
                    2145,
                    2152,
                    2285,
                    2158,
                    2286,
                    2162,
                    2163
                ],
                "OrderedEnqueuer": [
                    2152,
                    2360,
                    2187,
                    2484
                ],
                "GeneratorEnqueuer": [
                    2487,
                    2363,
                    2158,
                    2191
                ],
                "val_enqueuer.start": [
                    2162
                ],
                "max_queue_size": [
                    2490,
                    2162,
                    2366,
                    2194
                ],
                "validation_generator": [
                    2163,
                    2165,
                    2255
                ],
                "val_enqueuer.get": [
                    2163
                ],
                "val_data": [
                    2179,
                    2181,
                    2183
                ],
                "enqueuer.start": [
                    2490,
                    2194,
                    2366
                ],
                "output_generator": [
                    2207,
                    2369,
                    2499,
                    2372,
                    2195,
                    2197,
                    2491,
                    2493,
                    2367
                ],
                "enqueuer.get": [
                    2195,
                    2491,
                    2367
                ],
                "steps_done": [
                    2336,
                    2401,
                    2498,
                    2371,
                    2529,
                    2536,
                    2249,
                    2252,
                    2540,
                    2204,
                    2461,
                    2206,
                    2527
                ],
                "generator_output": [
                    2207,
                    2209,
                    2213,
                    2215,
                    2216,
                    2218,
                    2219,
                    2224,
                    2499,
                    2372,
                    2373,
                    2500,
                    2503,
                    2504,
                    2377,
                    2378,
                    2379,
                    2505,
                    2381,
                    2382,
                    2506,
                    2511,
                    2387,
                    2515
                ],
                "self.train_on_batch": [
                    2237
                ],
                "self.evaluate_generator": [
                    2254
                ],
                "self.evaluate": [
                    2261
                ],
                "enqueuer.stop": [
                    2283,
                    2533,
                    2406
                ],
                "val_enqueuer.stop": [
                    2286
                ],
                "interfaces.legacy_generator_methods_support": [
                    2418,
                    2291,
                    1950
                ],
                "interfaces": [
                    2418,
                    2291,
                    1950
                ],
                "all_outs": [
                    2338,
                    2399,
                    2535,
                    2409,
                    2537,
                    2539,
                    2541,
                    2414,
                    2543,
                    2521,
                    2523,
                    2526,
                    2463
                ],
                "batch_sizes": [
                    2402,
                    2339,
                    2410,
                    2415
                ],
                "self.test_on_batch": [
                    2388
                ],
                "all_outs.append": [
                    2523,
                    2399
                ],
                "batch_sizes.append": [
                    2402
                ],
                "np.average": [
                    2409,
                    2414
                ],
                "averages": [
                    2416,
                    2412,
                    2414
                ],
                "averages.append": [
                    2414
                ],
                "out": [
                    2541,
                    2414,
                    2543,
                    2522,
                    2525,
                    2526
                ],
                "self.predict_on_batch": [
                    2517
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_34/keras/utils/data_utils.py": {
            "buggy_functions": [],
            "inscope_functions": [
                "def _extract_archive(file_path, path='.', archive_format='auto'):\n    \"\"\"Extracts an archive if it matches tar, tar.gz, tar.bz, or zip formats.\n\n    # Arguments\n        file_path: path to the archive file\n        path: path to extract the archive file\n        archive_format: Archive format to try for extracting the file.\n            Options are 'auto', 'tar', 'zip', and None.\n            'tar' includes tar, tar.gz, and tar.bz files.\n            The default 'auto' is ['tar', 'zip'].\n            None or an empty list will return no matches found.\n\n    # Returns\n        True if a match was found and an archive extraction was completed,\n        False otherwise.\n    \"\"\"\n    if archive_format is None:\n        return False\n    if archive_format is 'auto':\n        archive_format = ['tar', 'zip']\n    if isinstance(archive_format, six.string_types):\n        archive_format = [archive_format]\n\n    for archive_type in archive_format:\n        if archive_type is 'tar':\n            open_fn = tarfile.open\n            is_match_fn = tarfile.is_tarfile\n        if archive_type is 'zip':\n            open_fn = zipfile.ZipFile\n            is_match_fn = zipfile.is_zipfile\n\n        if is_match_fn(file_path):\n            with open_fn(file_path) as archive:\n                try:\n                    archive.extractall(path)\n                except (tarfile.TarError, RuntimeError,\n                        KeyboardInterrupt):\n                    if os.path.exists(path):\n                        if os.path.isfile(path):\n                            os.remove(path)\n                        else:\n                            shutil.rmtree(path)\n                    raise\n            return True\n    return False",
                "def get_file(fname,\n             origin,\n             untar=False,\n             md5_hash=None,\n             file_hash=None,\n             cache_subdir='datasets',\n             hash_algorithm='auto',\n             extract=False,\n             archive_format='auto',\n             cache_dir=None):\n    \"\"\"Downloads a file from a URL if it not already in the cache.\n\n    By default the file at the url `origin` is downloaded to the\n    cache_dir `~/.keras`, placed in the cache_subdir `datasets`,\n    and given the filename `fname`. The final location of a file\n    `example.txt` would therefore be `~/.keras/datasets/example.txt`.\n\n    Files in tar, tar.gz, tar.bz, and zip formats can also be extracted.\n    Passing a hash will verify the file after download. The command line\n    programs `shasum` and `sha256sum` can compute the hash.\n\n    # Arguments\n        fname: Name of the file. If an absolute path `/path/to/file.txt` is\n            specified the file will be saved at that location.\n        origin: Original URL of the file.\n        untar: Deprecated in favor of 'extract'.\n            boolean, whether the file should be decompressed\n        md5_hash: Deprecated in favor of 'file_hash'.\n            md5 hash of the file for verification\n        file_hash: The expected hash string of the file after download.\n            The sha256 and md5 hash algorithms are both supported.\n        cache_subdir: Subdirectory under the Keras cache dir where the file is\n            saved. If an absolute path `/path/to/folder` is\n            specified the file will be saved at that location.\n        hash_algorithm: Select the hash algorithm to verify the file.\n            options are 'md5', 'sha256', and 'auto'.\n            The default 'auto' detects the hash algorithm in use.\n        extract: True tries extracting the file as an Archive, like tar or zip.\n        archive_format: Archive format to try for extracting the file.\n            Options are 'auto', 'tar', 'zip', and None.\n            'tar' includes tar, tar.gz, and tar.bz files.\n            The default 'auto' is ['tar', 'zip'].\n            None or an empty list will return no matches found.\n        cache_dir: Location to store cached files, when None it\n            defaults to the [Keras Directory](/faq/#where-is-the-keras-configuration-filed-stored).\n\n    # Returns\n        Path to the downloaded file\n    \"\"\"\n    if cache_dir is None:\n        cache_dir = os.path.join(os.path.expanduser('~'), '.keras')\n    if md5_hash is not None and file_hash is None:\n        file_hash = md5_hash\n        hash_algorithm = 'md5'\n    datadir_base = os.path.expanduser(cache_dir)\n    if not os.access(datadir_base, os.W_OK):\n        datadir_base = os.path.join('/tmp', '.keras')\n    datadir = os.path.join(datadir_base, cache_subdir)\n    if not os.path.exists(datadir):\n        os.makedirs(datadir)\n\n    if untar:\n        untar_fpath = os.path.join(datadir, fname)\n        fpath = untar_fpath + '.tar.gz'\n    else:\n        fpath = os.path.join(datadir, fname)\n\n    download = False\n    if os.path.exists(fpath):\n        # File found; verify integrity if a hash was provided.\n        if file_hash is not None:\n            if not validate_file(fpath, file_hash, algorithm=hash_algorithm):\n                print('A local file was found, but it seems to be '\n                      'incomplete or outdated because the ' + hash_algorithm +\n                      ' file hash does not match the original value of ' +\n                      file_hash + ' so we will re-download the data.')\n                download = True\n    else:\n        download = True\n\n    if download:\n        print('Downloading data from', origin)\n\n        class ProgressTracker(object):\n            # Maintain progbar for the lifetime of download.\n            # This design was chosen for Python 2.7 compatibility.\n            progbar = None\n\n        def dl_progress(count, block_size, total_size):\n            if ProgressTracker.progbar is None:\n                if total_size is -1:\n                    total_size = None\n                ProgressTracker.progbar = Progbar(total_size)\n            else:\n                ProgressTracker.progbar.update(count * block_size)\n\n        error_msg = 'URL fetch failure on {}: {} -- {}'\n        try:\n            try:\n                urlretrieve(origin, fpath, dl_progress)\n            except URLError as e:\n                raise Exception(error_msg.format(origin, e.errno, e.reason))\n            except HTTPError as e:\n                raise Exception(error_msg.format(origin, e.code, e.msg))\n        except (Exception, KeyboardInterrupt) as e:\n            if os.path.exists(fpath):\n                os.remove(fpath)\n            raise\n        ProgressTracker.progbar = None\n\n    if untar:\n        if not os.path.exists(untar_fpath):\n            _extract_archive(fpath, datadir, archive_format='tar')\n        return untar_fpath\n\n    if extract:\n        _extract_archive(fpath, datadir, archive_format)\n\n    return fpath",
                "def _hash_file(fpath, algorithm='sha256', chunk_size=65535):\n    \"\"\"Calculates a file sha256 or md5 hash.\n\n    # Example\n\n    ```python\n        >>> from keras.data_utils import _hash_file\n        >>> _hash_file('/path/to/file.zip')\n        'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n    ```\n\n    # Arguments\n        fpath: path to the file being validated\n        algorithm: hash algorithm, one of 'auto', 'sha256', or 'md5'.\n            The default 'auto' detects the hash algorithm in use.\n        chunk_size: Bytes to read at a time, important for large files.\n\n    # Returns\n        The file hash\n    \"\"\"\n    if (algorithm is 'sha256') or (algorithm is 'auto' and len(hash) is 64):\n        hasher = hashlib.sha256()\n    else:\n        hasher = hashlib.md5()\n\n    with open(fpath, 'rb') as fpath_file:\n        for chunk in iter(lambda: fpath_file.read(chunk_size), b''):\n            hasher.update(chunk)\n\n    return hasher.hexdigest()",
                "def validate_file(fpath, file_hash, algorithm='auto', chunk_size=65535):\n    \"\"\"Validates a file against a sha256 or md5 hash.\n\n    # Arguments\n        fpath: path to the file being validated\n        file_hash:  The expected hash string of the file.\n            The sha256 and md5 hash algorithms are both supported.\n        algorithm: Hash algorithm, one of 'auto', 'sha256', or 'md5'.\n            The default 'auto' detects the hash algorithm in use.\n        chunk_size: Bytes to read at a time, important for large files.\n\n    # Returns\n        Whether the file is valid\n    \"\"\"\n    if ((algorithm is 'sha256') or\n            (algorithm is 'auto' and len(file_hash) is 64)):\n        hasher = 'sha256'\n    else:\n        hasher = 'md5'\n\n    if str(_hash_file(fpath, hasher, chunk_size)) == str(file_hash):\n        return True\n    else:\n        return False",
                "def init_pool(seqs):\n    global _SHARED_SEQUENCES\n    _SHARED_SEQUENCES = seqs",
                "def get_index(uid, i):\n    \"\"\"Get the value from the Sequence `uid` at index `i`.\n\n    To allow multiple Sequences to be used at the same time, we use `uid` to\n    get a specific one. A single Sequence would cause the validation to\n    overwrite the training Sequence.\n\n    # Arguments\n        uid: int, Sequence identifier\n        i: index\n\n    # Returns\n        The value at index `i`.\n    \"\"\"\n    return _SHARED_SEQUENCES[uid][i]",
                "def urlretrieve(url, filename, reporthook=None, data=None):\n    \"\"\"Replacement for `urlretrive` for Python 2.\n\n    Under Python 2, `urlretrieve` relies on `FancyURLopener` from legacy\n    `urllib` module, known to have issues with proxy management.\n\n    # Arguments\n        url: url to retrieve.\n        filename: where to store the retrieved data locally.\n        reporthook: a hook function that will be called once\n            on establishment of the network connection and once\n            after each block read thereafter.\n            The hook will be passed three arguments;\n            a count of blocks transferred so far,\n            a block size in bytes, and the total size of the file.\n        data: `data` argument passed to `urlopen`.\n    \"\"\"\n\n    def chunk_read(response, chunk_size=8192, reporthook=None):\n        content_type = response.info().get('Content-Length')\n        total_size = -1\n        if content_type is not None:\n            total_size = int(content_type.strip())\n        count = 0\n        while True:\n            chunk = response.read(chunk_size)\n            count += 1\n            if reporthook is not None:\n                reporthook(count, chunk_size, total_size)\n            if chunk:\n                yield chunk\n            else:\n                break\n\n    with closing(urlopen(url, data)) as response, open(filename, 'wb') as fd:\n            for chunk in chunk_read(response, reporthook=reporthook):\n                fd.write(chunk)",
                "@abstractmethod\ndef __getitem__(self, index):\n    \"\"\"Gets batch at position `index`.\n\n    # Arguments\n        index: position of the batch in the Sequence.\n\n    # Returns\n        A batch\n    \"\"\"\n    raise NotImplementedError",
                "@abstractmethod\ndef __len__(self):\n    \"\"\"Number of batch in the Sequence.\n\n    # Returns\n        The number of batches in the Sequence.\n    \"\"\"\n    raise NotImplementedError",
                "def on_epoch_end(self):\n    \"\"\"Method called at the end of every epoch.\n    \"\"\"\n    pass",
                "@abstractmethod\ndef is_running(self):\n    raise NotImplementedError",
                "@abstractmethod\ndef start(self, workers=1, max_queue_size=10):\n    \"\"\"Starts the handler's workers.\n\n    # Arguments\n        workers: number of worker threads\n        max_queue_size: queue size\n            (when full, threads could block on `put()`).\n    \"\"\"\n    raise NotImplementedError",
                "@abstractmethod\ndef stop(self, timeout=None):\n    \"\"\"Stop running threads and wait for them to exit, if necessary.\n\n    Should be called by the same thread which called start().\n\n    # Arguments\n        timeout: maximum time to wait on thread.join()\n    \"\"\"\n    raise NotImplementedError",
                "@abstractmethod\ndef get(self):\n    \"\"\"Creates a generator to extract data from the queue.\n\n    Skip the data if it is `None`.\n\n    # Returns\n        Generator yielding tuples `(inputs, targets)`\n            or `(inputs, targets, sample_weights)`.\n    \"\"\"\n    raise NotImplementedError",
                "def __init__(self, sequence,\n             use_multiprocessing=False,\n             shuffle=False):\n    self.sequence = sequence\n    self.use_multiprocessing = use_multiprocessing\n\n    global _SEQUENCE_COUNTER\n    if _SEQUENCE_COUNTER is None:\n        try:\n            _SEQUENCE_COUNTER = multiprocessing.Value('i', 0)\n        except OSError:\n            # In this case the OS does not allow us to use\n            # multiprocessing. We resort to an int\n            # for enqueuer indexing.\n            _SEQUENCE_COUNTER = 0\n\n    if isinstance(_SEQUENCE_COUNTER, int):\n        self.uid = _SEQUENCE_COUNTER\n        _SEQUENCE_COUNTER += 1\n    else:\n        # Doing Multiprocessing.Value += x is not process-safe.\n        with _SEQUENCE_COUNTER.get_lock():\n            self.uid = _SEQUENCE_COUNTER.value\n            _SEQUENCE_COUNTER.value += 1\n\n    self.shuffle = shuffle\n    self.workers = 0\n    self.executor_fn = None\n    self.queue = None\n    self.run_thread = None\n    self.stop_signal = None",
                "def is_running(self):\n    return self.stop_signal is not None and not self.stop_signal.is_set()",
                "def start(self, workers=1, max_queue_size=10):\n    \"\"\"Start the handler's workers.\n\n    # Arguments\n        workers: number of worker threads\n        max_queue_size: queue size\n            (when full, workers could block on `put()`)\n    \"\"\"\n    if self.use_multiprocessing:\n        self.executor_fn = lambda seqs: multiprocessing.Pool(workers,\n                                                             initializer=init_pool,\n                                                             initargs=(seqs,))\n    else:\n        # We do not need the init since it's threads.\n        self.executor_fn = lambda _: ThreadPool(workers)\n    self.workers = workers\n    self.queue = queue.Queue(max_queue_size)\n    self.stop_signal = threading.Event()\n    self.run_thread = threading.Thread(target=self._run)\n    self.run_thread.daemon = True\n    self.run_thread.start()",
                "def _wait_queue(self):\n    \"\"\"Wait for the queue to be empty.\"\"\"\n    while True:\n        time.sleep(0.1)\n        if self.queue.unfinished_tasks == 0 or self.stop_signal.is_set():\n            return",
                "def _run(self):\n    \"\"\"Submits request to the executor and queue the `Future` objects.\"\"\"\n    sequence = list(range(len(self.sequence)))\n    self._send_sequence()  # Share the initial sequence\n    while True:\n        if self.shuffle:\n            random.shuffle(sequence)\n\n        with closing(self.executor_fn(_SHARED_SEQUENCES)) as executor:\n            for i in sequence:\n                if self.stop_signal.is_set():\n                    return\n                self.queue.put(\n                    executor.apply_async(get_index, (self.uid, i)), block=True)\n\n            # Done with the current epoch, waiting for the final batches\n            self._wait_queue()\n\n            if self.stop_signal.is_set():\n                # We're done\n                return\n\n        # Call the internal on epoch end.\n        self.sequence.on_epoch_end()\n        self._send_sequence()  # Update the pool",
                "def get(self):\n    \"\"\"Creates a generator to extract data from the queue.\n\n    Skip the data if it is `None`.\n\n    # Yields\n        The next element in the queue, i.e. a tuple\n        `(inputs, targets)` or\n        `(inputs, targets, sample_weights)`.\n    \"\"\"\n    try:\n        while self.is_running():\n            inputs = self.queue.get(block=True).get()\n            self.queue.task_done()\n            if inputs is not None:\n                yield inputs\n    except Exception as e:\n        self.stop()\n        six.raise_from(StopIteration(e), e)",
                "def _send_sequence(self):\n    \"\"\"Send current Sequence to all workers.\"\"\"\n    # For new processes that may spawn\n    _SHARED_SEQUENCES[self.uid] = self.sequence",
                "def stop(self, timeout=None):\n    \"\"\"Stops running threads and wait for them to exit, if necessary.\n\n    Should be called by the same thread which called `start()`.\n\n    # Arguments\n        timeout: maximum time to wait on `thread.join()`\n    \"\"\"\n    self.stop_signal.set()\n    with self.queue.mutex:\n        self.queue.queue.clear()\n        self.queue.unfinished_tasks = 0\n        self.queue.not_full.notify()\n    self.run_thread.join(timeout)\n    _SHARED_SEQUENCES[self.uid] = None",
                "def __init__(self, generator,\n             use_multiprocessing=False,\n             wait_time=0.05,\n             seed=None):\n    self.wait_time = wait_time\n    self._generator = generator\n    if os.name is 'nt' and use_multiprocessing is True:\n        # On Windows, avoid **SYSTEMATIC** error in `multiprocessing`:\n        # `TypeError: can't pickle generator objects`\n        # => Suggest multithreading instead of multiprocessing on Windows\n        raise ValueError('Using a generator with `use_multiprocessing=True`'\n                         ' is not supported on Windows (no marshalling of'\n                         ' generators across process boundaries). Instead,'\n                         ' use single thread/process or multithreading.')\n    else:\n        self._use_multiprocessing = use_multiprocessing\n    self._threads = []\n    self._stop_event = None\n    self._manager = None\n    self.queue = None\n    self.seed = seed",
                "def _data_generator_task(self):\n    if self._use_multiprocessing is False:\n        while not self._stop_event.is_set():\n            with self.genlock:\n                try:\n                    if (self.queue is not None and\n                            self.queue.qsize() < self.max_queue_size):\n                        # On all OSes, avoid **SYSTEMATIC** error\n                        # in multithreading mode:\n                        # `ValueError: generator already executing`\n                        # => Serialize calls to\n                        # infinite iterator/generator's next() function\n                        generator_output = next(self._generator)\n                        self.queue.put((True, generator_output))\n                    else:\n                        time.sleep(self.wait_time)\n                except StopIteration:\n                    break\n                except Exception as e:\n                    # Can't pickle tracebacks.\n                    # As a compromise, print the traceback and pickle None instead.\n                    if not hasattr(e, '__traceback__'):\n                        setattr(e, '__traceback__', sys.exc_info()[2])\n                    self.queue.put((False, e))\n                    self._stop_event.set()\n                    break\n    else:\n        while not self._stop_event.is_set():\n            try:\n                if (self.queue is not None and\n                        self.queue.qsize() < self.max_queue_size):\n                    generator_output = next(self._generator)\n                    self.queue.put((True, generator_output))\n                else:\n                    time.sleep(self.wait_time)\n            except StopIteration:\n                break\n            except Exception as e:\n                # Can't pickle tracebacks.\n                # As a compromise, print the traceback and pickle None instead.\n                traceback.print_exc()\n                setattr(e, '__traceback__', None)\n                self.queue.put((False, e))\n                self._stop_event.set()\n                break",
                "def start(self, workers=1, max_queue_size=10):\n    \"\"\"Kicks off threads which add data from the generator into the queue.\n\n    # Arguments\n        workers: number of worker threads\n        max_queue_size: queue size\n            (when full, threads could block on `put()`)\n    \"\"\"\n    try:\n        self.max_queue_size = max_queue_size\n        if self._use_multiprocessing:\n            self._manager = multiprocessing.Manager()\n            self.queue = self._manager.Queue(maxsize=max_queue_size)\n            self._stop_event = multiprocessing.Event()\n        else:\n            # On all OSes, avoid **SYSTEMATIC** error in multithreading mode:\n            # `ValueError: generator already executing`\n            # => Serialize calls to infinite iterator/generator's next() function\n            self.genlock = threading.Lock()\n            self.queue = queue.Queue(maxsize=max_queue_size)\n            self._stop_event = threading.Event()\n\n        for _ in range(workers):\n            if self._use_multiprocessing:\n                # Reset random seed else all children processes\n                # share the same seed\n                np.random.seed(self.seed)\n                thread = multiprocessing.Process(target=self._data_generator_task)\n                thread.daemon = True\n                if self.seed is not None:\n                    self.seed += 1\n            else:\n                thread = threading.Thread(target=self._data_generator_task)\n            self._threads.append(thread)\n            thread.start()\n    except:\n        self.stop()\n        raise",
                "def is_running(self):\n    return self._stop_event is not None and not self._stop_event.is_set()",
                "def stop(self, timeout=None):\n    \"\"\"Stops running threads and wait for them to exit, if necessary.\n\n    Should be called by the same thread which called `start()`.\n\n    # Arguments\n        timeout: maximum time to wait on `thread.join()`.\n    \"\"\"\n    if self.is_running():\n        self._stop_event.set()\n\n    for thread in self._threads:\n        if self._use_multiprocessing:\n            if thread.is_alive():\n                thread.terminate()\n        else:\n            # The thread.is_alive() test is subject to a race condition:\n            # the thread could terminate right after the test and before the\n            # join, rendering this test meaningless -> Call thread.join()\n            # always, which is ok no matter what the status of the thread.\n            thread.join(timeout)\n\n    if self._manager:\n        self._manager.shutdown()\n\n    self._threads = []\n    self._stop_event = None\n    self.queue = None",
                "def get(self):\n    \"\"\"Creates a generator to extract data from the queue.\n\n    Skip the data if it is `None`.\n\n    # Yields\n        The next element in the queue, i.e. a tuple\n        `(inputs, targets)` or\n        `(inputs, targets, sample_weights)`.\n    \"\"\"\n    while self.is_running():\n        if not self.queue.empty():\n            success, value = self.queue.get()\n            # Rethrow any exceptions found in the queue\n            if not success:\n                six.reraise(value.__class__, value, value.__traceback__)\n            # Yield regular values\n            if value is not None:\n                yield value\n        else:\n            all_finished = all([not thread.is_alive() for thread in self._threads])\n            if all_finished and self.queue.empty():\n                raise StopIteration()\n            else:\n                time.sleep(self.wait_time)\n\n    # Make sure to rethrow the first exception in the queue, if any\n    while not self.queue.empty():\n        success, value = self.queue.get()\n        if not success:\n            six.reraise(value.__class__, value, value.__traceback__)",
                "def chunk_read(response, chunk_size=8192, reporthook=None):\n    content_type = response.info().get('Content-Length')\n    total_size = -1\n    if content_type is not None:\n        total_size = int(content_type.strip())\n    count = 0\n    while True:\n        chunk = response.read(chunk_size)\n        count += 1\n        if reporthook is not None:\n            reporthook(count, chunk_size, total_size)\n        if chunk:\n            yield chunk\n        else:\n            break",
                "def dl_progress(count, block_size, total_size):\n    if ProgressTracker.progbar is None:\n        if total_size is -1:\n            total_size = None\n        ProgressTracker.progbar = Progbar(total_size)\n    else:\n        ProgressTracker.progbar.update(count * block_size)"
            ],
            "inscope_function_signatures": [
                "_extract_archive(file_path, path='.', archive_format='auto')",
                "get_file(fname, origin, untar=False, md5_hash=None, file_hash=None, cache_subdir='datasets', hash_algorithm='auto', extract=False, archive_format='auto', cache_dir=None)",
                "_hash_file(fpath, algorithm='sha256', chunk_size=65535)",
                "validate_file(fpath, file_hash, algorithm='auto', chunk_size=65535)",
                "init_pool(seqs)",
                "get_index(uid, i)",
                "urlretrieve(url, filename, reporthook=None, data=None)",
                "__getitem__(self, index)",
                "__len__(self)",
                "on_epoch_end(self)",
                "is_running(self)",
                "start(self, workers=1, max_queue_size=10)",
                "stop(self, timeout=None)",
                "get(self)",
                "__init__(self, sequence, use_multiprocessing=False, shuffle=False)",
                "is_running(self)",
                "start(self, workers=1, max_queue_size=10)",
                "_wait_queue(self)",
                "_run(self)",
                "get(self)",
                "_send_sequence(self)",
                "stop(self, timeout=None)",
                "__init__(self, generator, use_multiprocessing=False, wait_time=0.05, seed=None)",
                "_data_generator_task(self)",
                "start(self, workers=1, max_queue_size=10)",
                "is_running(self)",
                "stop(self, timeout=None)",
                "get(self)",
                "chunk_read(response, chunk_size=8192, reporthook=None)",
                "dl_progress(count, block_size, total_size)"
            ],
            "variables_in_file": {
                "ImportError": [
                    29
                ],
                "sys.version_info": [
                    34
                ],
                "sys": [
                    34,
                    662
                ],
                "content_type": [
                    56,
                    57,
                    54
                ],
                "get": [
                    572,
                    54
                ],
                "response.info": [
                    54
                ],
                "response": [
                    70,
                    60,
                    69,
                    54
                ],
                "total_size": [
                    213,
                    214,
                    55,
                    57,
                    215,
                    63
                ],
                "int": [
                    57,
                    486
                ],
                "content_type.strip": [
                    57
                ],
                "count": [
                    217,
                    58,
                    61,
                    63
                ],
                "chunk": [
                    64,
                    65,
                    70,
                    71,
                    270,
                    271,
                    60
                ],
                "response.read": [
                    60
                ],
                "chunk_size": [
                    296,
                    60,
                    270,
                    63
                ],
                "reporthook": [
                    70,
                    62,
                    63
                ],
                "closing": [
                    69,
                    542
                ],
                "urlopen": [
                    69
                ],
                "url": [
                    69
                ],
                "data": [
                    69
                ],
                "open": [
                    269,
                    69
                ],
                "filename": [
                    69
                ],
                "fd": [
                    69,
                    71
                ],
                "chunk_read": [
                    70
                ],
                "fd.write": [
                    71
                ],
                "archive_format": [
                    96,
                    97,
                    99,
                    239,
                    92,
                    94,
                    95
                ],
                "isinstance": [
                    96,
                    486
                ],
                "six.string_types": [
                    96
                ],
                "six": [
                    96,
                    578,
                    787,
                    772
                ],
                "archive_type": [
                    99,
                    100,
                    103
                ],
                "open_fn": [
                    104,
                    108,
                    101
                ],
                "tarfile.open": [
                    101
                ],
                "tarfile": [
                    101,
                    102,
                    111
                ],
                "is_match_fn": [
                    105,
                    107,
                    102
                ],
                "tarfile.is_tarfile": [
                    102
                ],
                "zipfile.ZipFile": [
                    104
                ],
                "zipfile": [
                    104,
                    105
                ],
                "zipfile.is_zipfile": [
                    105
                ],
                "file_path": [
                    107,
                    108
                ],
                "archive": [
                    108,
                    110
                ],
                "archive.extractall": [
                    110
                ],
                "path": [
                    110,
                    113,
                    114,
                    115,
                    117
                ],
                "tarfile.TarError": [
                    111
                ],
                "RuntimeError": [
                    111
                ],
                "KeyboardInterrupt": [
                    112,
                    227
                ],
                "os.path.exists": [
                    228,
                    234,
                    113,
                    181,
                    191
                ],
                "os.path": [
                    228,
                    234,
                    173,
                    113,
                    114,
                    179,
                    177,
                    180,
                    181,
                    185,
                    188,
                    191
                ],
                "os": [
                    185,
                    228,
                    229,
                    234,
                    173,
                    624,
                    177,
                    113,
                    114,
                    115,
                    178,
                    179,
                    180,
                    181,
                    182,
                    188,
                    191
                ],
                "os.path.isfile": [
                    114
                ],
                "os.remove": [
                    115,
                    229
                ],
                "shutil.rmtree": [
                    117
                ],
                "shutil": [
                    117
                ],
                "cache_dir": [
                    177,
                    172,
                    173
                ],
                "os.path.join": [
                    173,
                    179,
                    180,
                    185,
                    188
                ],
                "os.path.expanduser": [
                    177,
                    173
                ],
                "md5_hash": [
                    174,
                    175
                ],
                "file_hash": [
                    193,
                    194,
                    291,
                    198,
                    296,
                    174,
                    175
                ],
                "hash_algorithm": [
                    176,
                    194,
                    196
                ],
                "datadir_base": [
                    177,
                    178,
                    179,
                    180
                ],
                "os.access": [
                    178
                ],
                "os.W_OK": [
                    178
                ],
                "datadir": [
                    235,
                    239,
                    180,
                    181,
                    182,
                    185,
                    188
                ],
                "cache_subdir": [
                    180
                ],
                "os.makedirs": [
                    182
                ],
                "untar": [
                    184,
                    233
                ],
                "untar_fpath": [
                    185,
                    186,
                    234,
                    236
                ],
                "fname": [
                    185,
                    188
                ],
                "fpath": [
                    194,
                    228,
                    229,
                    296,
                    235,
                    269,
                    239,
                    241,
                    186,
                    188,
                    222,
                    191
                ],
                "download": [
                    201,
                    203,
                    190,
                    199
                ],
                "validate_file": [
                    194
                ],
                "print": [
                    195,
                    204
                ],
                "origin": [
                    224,
                    226,
                    204,
                    222
                ],
                "object": [
                    302,
                    398,
                    206
                ],
                "progbar": [
                    209
                ],
                "ProgressTracker.progbar": [
                    217,
                    231,
                    212,
                    215
                ],
                "ProgressTracker": [
                    217,
                    231,
                    212,
                    215
                ],
                "Progbar": [
                    215
                ],
                "ProgressTracker.progbar.update": [
                    217
                ],
                "block_size": [
                    217
                ],
                "error_msg": [
                    224,
                    226,
                    219
                ],
                "urlretrieve": [
                    222
                ],
                "dl_progress": [
                    222
                ],
                "URLError": [
                    223
                ],
                "Exception": [
                    224,
                    576,
                    226,
                    227,
                    677,
                    658
                ],
                "error_msg.format": [
                    224,
                    226
                ],
                "e.errno": [
                    224
                ],
                "e": [
                    224,
                    226,
                    578,
                    681,
                    682,
                    661,
                    662,
                    663
                ],
                "e.reason": [
                    224
                ],
                "HTTPError": [
                    225
                ],
                "e.code": [
                    226
                ],
                "e.msg": [
                    226
                ],
                "_extract_archive": [
                    235,
                    239
                ],
                "extract": [
                    238
                ],
                "algorithm": [
                    264,
                    290,
                    291
                ],
                "len": [
                    264,
                    536,
                    291
                ],
                "hash": [
                    264
                ],
                "hasher": [
                    292,
                    294,
                    296,
                    265,
                    267,
                    271,
                    273
                ],
                "hashlib.sha256": [
                    265
                ],
                "hashlib": [
                    265,
                    267
                ],
                "hashlib.md5": [
                    267
                ],
                "fpath_file": [
                    269,
                    270
                ],
                "iter": [
                    270
                ],
                "fpath_file.read": [
                    270
                ],
                "hasher.update": [
                    271
                ],
                "hasher.hexdigest": [
                    273
                ],
                "str": [
                    296
                ],
                "_hash_file": [
                    296
                ],
                "NotImplementedError": [
                    353,
                    422,
                    456,
                    362,
                    433,
                    444
                ],
                "abstractmethod": [
                    355,
                    420,
                    424,
                    435,
                    343,
                    446
                ],
                "_SHARED_SEQUENCES": [
                    583,
                    395,
                    371,
                    599,
                    378,
                    542
                ],
                "_SEQUENCE_COUNTER": [
                    484,
                    486,
                    487,
                    488,
                    491,
                    492,
                    493,
                    373,
                    477,
                    479
                ],
                "seqs": [
                    378,
                    516
                ],
                "uid": [
                    395
                ],
                "i": [
                    547,
                    395,
                    543
                ],
                "SequenceEnqueuer": [
                    602,
                    459
                ],
                "self.sequence": [
                    536,
                    473,
                    557,
                    583
                ],
                "self": [
                    513,
                    514,
                    519,
                    520,
                    521,
                    522,
                    523,
                    524,
                    525,
                    531,
                    536,
                    537,
                    539,
                    542,
                    544,
                    546,
                    547,
                    550,
                    552,
                    557,
                    558,
                    571,
                    572,
                    573,
                    577,
                    583,
                    593,
                    594,
                    595,
                    596,
                    597,
                    598,
                    599,
                    622,
                    623,
                    633,
                    634,
                    635,
                    636,
                    637,
                    638,
                    641,
                    642,
                    643,
                    645,
                    646,
                    652,
                    653,
                    655,
                    663,
                    664,
                    667,
                    669,
                    670,
                    671,
                    672,
                    674,
                    682,
                    683,
                    695,
                    696,
                    697,
                    698,
                    699,
                    704,
                    705,
                    706,
                    709,
                    712,
                    713,
                    715,
                    716,
                    718,
                    719,
                    722,
                    726,
                    736,
                    737,
                    739,
                    740,
                    750,
                    751,
                    753,
                    754,
                    755,
                    767,
                    768,
                    769,
                    777,
                    778,
                    781,
                    784,
                    785,
                    473,
                    474,
                    487,
                    492,
                    495,
                    496,
                    497,
                    498,
                    499,
                    500,
                    503
                ],
                "sequence": [
                    536,
                    473,
                    540,
                    543
                ],
                "self.use_multiprocessing": [
                    513,
                    474
                ],
                "use_multiprocessing": [
                    624,
                    633,
                    474
                ],
                "multiprocessing.Value": [
                    479
                ],
                "multiprocessing": [
                    514,
                    713,
                    697,
                    699,
                    479
                ],
                "OSError": [
                    480
                ],
                "self.uid": [
                    547,
                    583,
                    487,
                    492,
                    599
                ],
                "_SEQUENCE_COUNTER.get_lock": [
                    491
                ],
                "_SEQUENCE_COUNTER.value": [
                    492,
                    493
                ],
                "self.shuffle": [
                    539,
                    495
                ],
                "shuffle": [
                    495
                ],
                "self.workers": [
                    496,
                    520
                ],
                "self.executor_fn": [
                    497,
                    514,
                    542,
                    519
                ],
                "self.queue": [
                    768,
                    769,
                    645,
                    646,
                    521,
                    778,
                    653,
                    784,
                    785,
                    531,
                    663,
                    669,
                    670,
                    672,
                    546,
                    682,
                    698,
                    572,
                    573,
                    705,
                    594,
                    595,
                    596,
                    597,
                    498,
                    755,
                    637
                ],
                "self.run_thread": [
                    523,
                    524,
                    525,
                    499,
                    598
                ],
                "self.stop_signal": [
                    544,
                    552,
                    522,
                    593,
                    531,
                    500,
                    503
                ],
                "self.stop_signal.is_set": [
                    544,
                    552,
                    531,
                    503
                ],
                "multiprocessing.Pool": [
                    514
                ],
                "workers": [
                    520,
                    514,
                    708,
                    519
                ],
                "init_pool": [
                    515
                ],
                "ThreadPool": [
                    519
                ],
                "queue.Queue": [
                    521,
                    705
                ],
                "queue": [
                    521,
                    705
                ],
                "max_queue_size": [
                    521,
                    698,
                    705,
                    695
                ],
                "threading.Event": [
                    706,
                    522
                ],
                "threading": [
                    704,
                    706,
                    522,
                    523,
                    718
                ],
                "threading.Thread": [
                    523,
                    718
                ],
                "self._run": [
                    523
                ],
                "self.run_thread.daemon": [
                    524
                ],
                "self.run_thread.start": [
                    525
                ],
                "time.sleep": [
                    674,
                    530,
                    781,
                    655
                ],
                "time": [
                    674,
                    530,
                    781,
                    655
                ],
                "self.queue.unfinished_tasks": [
                    531,
                    596
                ],
                "list": [
                    536
                ],
                "range": [
                    536,
                    708
                ],
                "self._send_sequence": [
                    537,
                    558
                ],
                "random.shuffle": [
                    540
                ],
                "random": [
                    540
                ],
                "executor": [
                    547,
                    542
                ],
                "self.queue.put": [
                    672,
                    546,
                    682,
                    653,
                    663
                ],
                "executor.apply_async": [
                    547
                ],
                "get_index": [
                    547
                ],
                "self._wait_queue": [
                    550
                ],
                "self.sequence.on_epoch_end": [
                    557
                ],
                "self.is_running": [
                    736,
                    571,
                    767
                ],
                "inputs": [
                    572,
                    574,
                    575
                ],
                "self.queue.get": [
                    769,
                    572,
                    785
                ],
                "self.queue.task_done": [
                    573
                ],
                "self.stop": [
                    577,
                    722
                ],
                "six.raise_from": [
                    578
                ],
                "StopIteration": [
                    656,
                    779,
                    578,
                    675
                ],
                "self.stop_signal.set": [
                    593
                ],
                "self.queue.mutex": [
                    594
                ],
                "self.queue.queue.clear": [
                    595
                ],
                "self.queue.queue": [
                    595
                ],
                "self.queue.not_full.notify": [
                    597
                ],
                "self.queue.not_full": [
                    597
                ],
                "self.run_thread.join": [
                    598
                ],
                "timeout": [
                    748,
                    598
                ],
                "self.wait_time": [
                    674,
                    781,
                    622,
                    655
                ],
                "wait_time": [
                    622
                ],
                "self._generator": [
                    671,
                    652,
                    623
                ],
                "generator": [
                    623
                ],
                "os.name": [
                    624
                ],
                "ValueError": [
                    628
                ],
                "self._use_multiprocessing": [
                    641,
                    740,
                    709,
                    696,
                    633
                ],
                "self._threads": [
                    739,
                    777,
                    719,
                    753,
                    634
                ],
                "self._stop_event": [
                    737,
                    642,
                    706,
                    683,
                    754,
                    726,
                    664,
                    635,
                    667,
                    699
                ],
                "self._manager": [
                    750,
                    751,
                    697,
                    698,
                    636
                ],
                "self.seed": [
                    712,
                    715,
                    716,
                    638
                ],
                "seed": [
                    638
                ],
                "self._stop_event.is_set": [
                    642,
                    667,
                    726
                ],
                "self.genlock": [
                    704,
                    643
                ],
                "self.queue.qsize": [
                    670,
                    646
                ],
                "self.max_queue_size": [
                    670,
                    646,
                    695
                ],
                "generator_output": [
                    672,
                    652,
                    653,
                    671
                ],
                "next": [
                    652,
                    671
                ],
                "hasattr": [
                    661
                ],
                "setattr": [
                    681,
                    662
                ],
                "sys.exc_info": [
                    662
                ],
                "self._stop_event.set": [
                    664,
                    737,
                    683
                ],
                "traceback.print_exc": [
                    680
                ],
                "traceback": [
                    680
                ],
                "multiprocessing.Manager": [
                    697
                ],
                "self._manager.Queue": [
                    698
                ],
                "multiprocessing.Event": [
                    699
                ],
                "threading.Lock": [
                    704
                ],
                "_": [
                    708
                ],
                "np.random.seed": [
                    712
                ],
                "np.random": [
                    712
                ],
                "np": [
                    712
                ],
                "thread": [
                    739,
                    741,
                    742,
                    713,
                    714,
                    777,
                    748,
                    718,
                    719,
                    720
                ],
                "multiprocessing.Process": [
                    713
                ],
                "self._data_generator_task": [
                    713,
                    718
                ],
                "thread.daemon": [
                    714
                ],
                "self._threads.append": [
                    719
                ],
                "thread.start": [
                    720
                ],
                "thread.is_alive": [
                    777,
                    741
                ],
                "thread.terminate": [
                    742
                ],
                "thread.join": [
                    748
                ],
                "self._manager.shutdown": [
                    751
                ],
                "self.queue.empty": [
                    768,
                    784,
                    778
                ],
                "success": [
                    769,
                    786,
                    771,
                    785
                ],
                "value": [
                    769,
                    772,
                    774,
                    775,
                    785,
                    787
                ],
                "six.reraise": [
                    787,
                    772
                ],
                "value.__class__": [
                    787,
                    772
                ],
                "value.__traceback__": [
                    787,
                    772
                ],
                "all_finished": [
                    777,
                    778
                ],
                "all": [
                    777
                ]
            },
            "filtered_variables_in_file": {
                "sys.version_info": [
                    34
                ],
                "sys": [
                    34,
                    662
                ],
                "content_type": [
                    56,
                    57,
                    54
                ],
                "get": [
                    572,
                    54
                ],
                "response.info": [
                    54
                ],
                "response": [
                    70,
                    60,
                    69,
                    54
                ],
                "total_size": [
                    213,
                    214,
                    55,
                    57,
                    215,
                    63
                ],
                "content_type.strip": [
                    57
                ],
                "count": [
                    217,
                    58,
                    61,
                    63
                ],
                "chunk": [
                    64,
                    65,
                    70,
                    71,
                    270,
                    271,
                    60
                ],
                "response.read": [
                    60
                ],
                "chunk_size": [
                    296,
                    60,
                    270,
                    63
                ],
                "reporthook": [
                    70,
                    62,
                    63
                ],
                "closing": [
                    69,
                    542
                ],
                "urlopen": [
                    69
                ],
                "url": [
                    69
                ],
                "data": [
                    69
                ],
                "filename": [
                    69
                ],
                "fd": [
                    69,
                    71
                ],
                "chunk_read": [
                    70
                ],
                "fd.write": [
                    71
                ],
                "archive_format": [
                    96,
                    97,
                    99,
                    239,
                    92,
                    94,
                    95
                ],
                "six.string_types": [
                    96
                ],
                "six": [
                    96,
                    578,
                    787,
                    772
                ],
                "archive_type": [
                    99,
                    100,
                    103
                ],
                "open_fn": [
                    104,
                    108,
                    101
                ],
                "tarfile.open": [
                    101
                ],
                "tarfile": [
                    101,
                    102,
                    111
                ],
                "is_match_fn": [
                    105,
                    107,
                    102
                ],
                "tarfile.is_tarfile": [
                    102
                ],
                "zipfile.ZipFile": [
                    104
                ],
                "zipfile": [
                    104,
                    105
                ],
                "zipfile.is_zipfile": [
                    105
                ],
                "file_path": [
                    107,
                    108
                ],
                "archive": [
                    108,
                    110
                ],
                "archive.extractall": [
                    110
                ],
                "path": [
                    110,
                    113,
                    114,
                    115,
                    117
                ],
                "tarfile.TarError": [
                    111
                ],
                "os.path.exists": [
                    228,
                    234,
                    113,
                    181,
                    191
                ],
                "os.path": [
                    228,
                    234,
                    173,
                    113,
                    114,
                    179,
                    177,
                    180,
                    181,
                    185,
                    188,
                    191
                ],
                "os": [
                    185,
                    228,
                    229,
                    234,
                    173,
                    624,
                    177,
                    113,
                    114,
                    115,
                    178,
                    179,
                    180,
                    181,
                    182,
                    188,
                    191
                ],
                "os.path.isfile": [
                    114
                ],
                "os.remove": [
                    115,
                    229
                ],
                "shutil.rmtree": [
                    117
                ],
                "shutil": [
                    117
                ],
                "cache_dir": [
                    177,
                    172,
                    173
                ],
                "os.path.join": [
                    173,
                    179,
                    180,
                    185,
                    188
                ],
                "os.path.expanduser": [
                    177,
                    173
                ],
                "md5_hash": [
                    174,
                    175
                ],
                "file_hash": [
                    193,
                    194,
                    291,
                    198,
                    296,
                    174,
                    175
                ],
                "hash_algorithm": [
                    176,
                    194,
                    196
                ],
                "datadir_base": [
                    177,
                    178,
                    179,
                    180
                ],
                "os.access": [
                    178
                ],
                "os.W_OK": [
                    178
                ],
                "datadir": [
                    235,
                    239,
                    180,
                    181,
                    182,
                    185,
                    188
                ],
                "cache_subdir": [
                    180
                ],
                "os.makedirs": [
                    182
                ],
                "untar": [
                    184,
                    233
                ],
                "untar_fpath": [
                    185,
                    186,
                    234,
                    236
                ],
                "fname": [
                    185,
                    188
                ],
                "fpath": [
                    194,
                    228,
                    229,
                    296,
                    235,
                    269,
                    239,
                    241,
                    186,
                    188,
                    222,
                    191
                ],
                "download": [
                    201,
                    203,
                    190,
                    199
                ],
                "validate_file": [
                    194
                ],
                "origin": [
                    224,
                    226,
                    204,
                    222
                ],
                "progbar": [
                    209
                ],
                "ProgressTracker.progbar": [
                    217,
                    231,
                    212,
                    215
                ],
                "ProgressTracker": [
                    217,
                    231,
                    212,
                    215
                ],
                "Progbar": [
                    215
                ],
                "ProgressTracker.progbar.update": [
                    217
                ],
                "block_size": [
                    217
                ],
                "error_msg": [
                    224,
                    226,
                    219
                ],
                "urlretrieve": [
                    222
                ],
                "dl_progress": [
                    222
                ],
                "URLError": [
                    223
                ],
                "error_msg.format": [
                    224,
                    226
                ],
                "e.errno": [
                    224
                ],
                "e": [
                    224,
                    226,
                    578,
                    681,
                    682,
                    661,
                    662,
                    663
                ],
                "e.reason": [
                    224
                ],
                "HTTPError": [
                    225
                ],
                "e.code": [
                    226
                ],
                "e.msg": [
                    226
                ],
                "_extract_archive": [
                    235,
                    239
                ],
                "extract": [
                    238
                ],
                "algorithm": [
                    264,
                    290,
                    291
                ],
                "hasher": [
                    292,
                    294,
                    296,
                    265,
                    267,
                    271,
                    273
                ],
                "hashlib.sha256": [
                    265
                ],
                "hashlib": [
                    265,
                    267
                ],
                "hashlib.md5": [
                    267
                ],
                "fpath_file": [
                    269,
                    270
                ],
                "fpath_file.read": [
                    270
                ],
                "hasher.update": [
                    271
                ],
                "hasher.hexdigest": [
                    273
                ],
                "_hash_file": [
                    296
                ],
                "abstractmethod": [
                    355,
                    420,
                    424,
                    435,
                    343,
                    446
                ],
                "_SHARED_SEQUENCES": [
                    583,
                    395,
                    371,
                    599,
                    378,
                    542
                ],
                "_SEQUENCE_COUNTER": [
                    484,
                    486,
                    487,
                    488,
                    491,
                    492,
                    493,
                    373,
                    477,
                    479
                ],
                "seqs": [
                    378,
                    516
                ],
                "uid": [
                    395
                ],
                "i": [
                    547,
                    395,
                    543
                ],
                "SequenceEnqueuer": [
                    602,
                    459
                ],
                "self.sequence": [
                    536,
                    473,
                    557,
                    583
                ],
                "self": [
                    513,
                    514,
                    519,
                    520,
                    521,
                    522,
                    523,
                    524,
                    525,
                    531,
                    536,
                    537,
                    539,
                    542,
                    544,
                    546,
                    547,
                    550,
                    552,
                    557,
                    558,
                    571,
                    572,
                    573,
                    577,
                    583,
                    593,
                    594,
                    595,
                    596,
                    597,
                    598,
                    599,
                    622,
                    623,
                    633,
                    634,
                    635,
                    636,
                    637,
                    638,
                    641,
                    642,
                    643,
                    645,
                    646,
                    652,
                    653,
                    655,
                    663,
                    664,
                    667,
                    669,
                    670,
                    671,
                    672,
                    674,
                    682,
                    683,
                    695,
                    696,
                    697,
                    698,
                    699,
                    704,
                    705,
                    706,
                    709,
                    712,
                    713,
                    715,
                    716,
                    718,
                    719,
                    722,
                    726,
                    736,
                    737,
                    739,
                    740,
                    750,
                    751,
                    753,
                    754,
                    755,
                    767,
                    768,
                    769,
                    777,
                    778,
                    781,
                    784,
                    785,
                    473,
                    474,
                    487,
                    492,
                    495,
                    496,
                    497,
                    498,
                    499,
                    500,
                    503
                ],
                "sequence": [
                    536,
                    473,
                    540,
                    543
                ],
                "self.use_multiprocessing": [
                    513,
                    474
                ],
                "use_multiprocessing": [
                    624,
                    633,
                    474
                ],
                "multiprocessing.Value": [
                    479
                ],
                "multiprocessing": [
                    514,
                    713,
                    697,
                    699,
                    479
                ],
                "self.uid": [
                    547,
                    583,
                    487,
                    492,
                    599
                ],
                "_SEQUENCE_COUNTER.get_lock": [
                    491
                ],
                "_SEQUENCE_COUNTER.value": [
                    492,
                    493
                ],
                "self.shuffle": [
                    539,
                    495
                ],
                "shuffle": [
                    495
                ],
                "self.workers": [
                    496,
                    520
                ],
                "self.executor_fn": [
                    497,
                    514,
                    542,
                    519
                ],
                "self.queue": [
                    768,
                    769,
                    645,
                    646,
                    521,
                    778,
                    653,
                    784,
                    785,
                    531,
                    663,
                    669,
                    670,
                    672,
                    546,
                    682,
                    698,
                    572,
                    573,
                    705,
                    594,
                    595,
                    596,
                    597,
                    498,
                    755,
                    637
                ],
                "self.run_thread": [
                    523,
                    524,
                    525,
                    499,
                    598
                ],
                "self.stop_signal": [
                    544,
                    552,
                    522,
                    593,
                    531,
                    500,
                    503
                ],
                "self.stop_signal.is_set": [
                    544,
                    552,
                    531,
                    503
                ],
                "multiprocessing.Pool": [
                    514
                ],
                "workers": [
                    520,
                    514,
                    708,
                    519
                ],
                "init_pool": [
                    515
                ],
                "ThreadPool": [
                    519
                ],
                "queue.Queue": [
                    521,
                    705
                ],
                "queue": [
                    521,
                    705
                ],
                "max_queue_size": [
                    521,
                    698,
                    705,
                    695
                ],
                "threading.Event": [
                    706,
                    522
                ],
                "threading": [
                    704,
                    706,
                    522,
                    523,
                    718
                ],
                "threading.Thread": [
                    523,
                    718
                ],
                "self._run": [
                    523
                ],
                "self.run_thread.daemon": [
                    524
                ],
                "self.run_thread.start": [
                    525
                ],
                "time.sleep": [
                    674,
                    530,
                    781,
                    655
                ],
                "time": [
                    674,
                    530,
                    781,
                    655
                ],
                "self.queue.unfinished_tasks": [
                    531,
                    596
                ],
                "self._send_sequence": [
                    537,
                    558
                ],
                "random.shuffle": [
                    540
                ],
                "random": [
                    540
                ],
                "executor": [
                    547,
                    542
                ],
                "self.queue.put": [
                    672,
                    546,
                    682,
                    653,
                    663
                ],
                "executor.apply_async": [
                    547
                ],
                "get_index": [
                    547
                ],
                "self._wait_queue": [
                    550
                ],
                "self.sequence.on_epoch_end": [
                    557
                ],
                "self.is_running": [
                    736,
                    571,
                    767
                ],
                "inputs": [
                    572,
                    574,
                    575
                ],
                "self.queue.get": [
                    769,
                    572,
                    785
                ],
                "self.queue.task_done": [
                    573
                ],
                "self.stop": [
                    577,
                    722
                ],
                "six.raise_from": [
                    578
                ],
                "self.stop_signal.set": [
                    593
                ],
                "self.queue.mutex": [
                    594
                ],
                "self.queue.queue.clear": [
                    595
                ],
                "self.queue.queue": [
                    595
                ],
                "self.queue.not_full.notify": [
                    597
                ],
                "self.queue.not_full": [
                    597
                ],
                "self.run_thread.join": [
                    598
                ],
                "timeout": [
                    748,
                    598
                ],
                "self.wait_time": [
                    674,
                    781,
                    622,
                    655
                ],
                "wait_time": [
                    622
                ],
                "self._generator": [
                    671,
                    652,
                    623
                ],
                "generator": [
                    623
                ],
                "os.name": [
                    624
                ],
                "self._use_multiprocessing": [
                    641,
                    740,
                    709,
                    696,
                    633
                ],
                "self._threads": [
                    739,
                    777,
                    719,
                    753,
                    634
                ],
                "self._stop_event": [
                    737,
                    642,
                    706,
                    683,
                    754,
                    726,
                    664,
                    635,
                    667,
                    699
                ],
                "self._manager": [
                    750,
                    751,
                    697,
                    698,
                    636
                ],
                "self.seed": [
                    712,
                    715,
                    716,
                    638
                ],
                "seed": [
                    638
                ],
                "self._stop_event.is_set": [
                    642,
                    667,
                    726
                ],
                "self.genlock": [
                    704,
                    643
                ],
                "self.queue.qsize": [
                    670,
                    646
                ],
                "self.max_queue_size": [
                    670,
                    646,
                    695
                ],
                "generator_output": [
                    672,
                    652,
                    653,
                    671
                ],
                "sys.exc_info": [
                    662
                ],
                "self._stop_event.set": [
                    664,
                    737,
                    683
                ],
                "traceback.print_exc": [
                    680
                ],
                "traceback": [
                    680
                ],
                "multiprocessing.Manager": [
                    697
                ],
                "self._manager.Queue": [
                    698
                ],
                "multiprocessing.Event": [
                    699
                ],
                "threading.Lock": [
                    704
                ],
                "_": [
                    708
                ],
                "np.random.seed": [
                    712
                ],
                "np.random": [
                    712
                ],
                "np": [
                    712
                ],
                "thread": [
                    739,
                    741,
                    742,
                    713,
                    714,
                    777,
                    748,
                    718,
                    719,
                    720
                ],
                "multiprocessing.Process": [
                    713
                ],
                "self._data_generator_task": [
                    713,
                    718
                ],
                "thread.daemon": [
                    714
                ],
                "self._threads.append": [
                    719
                ],
                "thread.start": [
                    720
                ],
                "thread.is_alive": [
                    777,
                    741
                ],
                "thread.terminate": [
                    742
                ],
                "thread.join": [
                    748
                ],
                "self._manager.shutdown": [
                    751
                ],
                "self.queue.empty": [
                    768,
                    784,
                    778
                ],
                "success": [
                    769,
                    786,
                    771,
                    785
                ],
                "value": [
                    769,
                    772,
                    774,
                    775,
                    785,
                    787
                ],
                "six.reraise": [
                    787,
                    772
                ],
                "value.__class__": [
                    787,
                    772
                ],
                "value.__traceback__": [
                    787,
                    772
                ],
                "all_finished": [
                    777,
                    778
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_34/tests/test_multiprocessing.py",
                "test_function": "test_multiprocessing_training",
                "test_function_code": "@keras_test\ndef test_multiprocessing_training():\n    arr_data = np.random.randint(0, 256, (50, 2))\n    arr_labels = np.random.randint(0, 2, 50)\n    arr_weights = np.random.random(50)\n\n    def custom_generator(use_weights=False):\n        batch_size = 10\n        n_samples = 50\n\n        while True:\n            batch_index = np.random.randint(0, n_samples - batch_size)\n            start = batch_index\n            end = start + batch_size\n            X = arr_data[start: end]\n            y = arr_labels[start: end]\n            if use_weights:\n                w = arr_weights[start: end]\n                yield X, y, w\n            else:\n                yield X, y\n\n    # Build a NN\n    model = Sequential()\n    model.add(Dense(1, input_shape=(2, )))\n    model.compile(loss='mse', optimizer='adadelta')\n\n    # - Produce data on 4 worker processes, consume on main process:\n    #   - Each worker process runs OWN copy of generator\n    #   - BUT on Windows, `multiprocessing` won't marshall generators across\n    #     process boundaries -> make sure `fit_generator()` raises ValueError\n    #     exception and does not attempt to run the generator.\n    if os.name is 'nt':\n        with pytest.raises(ValueError):\n            model.fit_generator(custom_generator(),\n                                steps_per_epoch=STEPS_PER_EPOCH,\n                                epochs=1,\n                                verbose=1,\n                                validation_steps=None,\n                                max_queue_size=10,\n                                workers=WORKERS,\n                                use_multiprocessing=True)\n    else:\n        model.fit_generator(custom_generator(),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            epochs=1,\n                            verbose=1,\n                            validation_steps=None,\n                            max_queue_size=10,\n                            workers=WORKERS,\n                            use_multiprocessing=True)\n\n    # - Produce data on 4 worker threads, consume on main thread:\n    #   - All worker threads share the SAME generator\n    model.fit_generator(custom_generator(),\n                        steps_per_epoch=STEPS_PER_EPOCH,\n                        epochs=1,\n                        verbose=1,\n                        validation_steps=None,\n                        max_queue_size=10,\n                        workers=WORKERS,\n                        use_multiprocessing=False)\n\n    # - Produce data on 1 worker process, consume on main process:\n    #   - Worker process runs generator\n    #   - BUT on Windows, `multiprocessing` won't marshall generators across\n    #     process boundaries -> make sure `fit_generator()` raises ValueError\n    #     exception and does not attempt to run the generator.\n    if os.name is 'nt':\n        with pytest.raises(ValueError):\n            model.fit_generator(custom_generator(True),\n                                steps_per_epoch=STEPS_PER_EPOCH,\n                                validation_data=(arr_data[:10],\n                                                 arr_labels[:10],\n                                                 arr_weights[:10]),\n                                validation_steps=1,\n                                max_queue_size=10,\n                                workers=1,\n                                use_multiprocessing=True)\n    else:\n        model.fit_generator(custom_generator(True),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            validation_data=(arr_data[:10],\n                                             arr_labels[:10],\n                                             arr_weights[:10]),\n                            validation_steps=1,\n                            max_queue_size=10,\n                            workers=1,\n                            use_multiprocessing=True)\n\n    # - Produce data on 1 worker thread, consume on main thread:\n    #   - Worker thread is the only thread running the generator\n    model.fit_generator(custom_generator(True),\n                        steps_per_epoch=STEPS_PER_EPOCH,\n                        validation_data=(arr_data[:10],\n                                         arr_labels[:10],\n                                         arr_weights[:10]),\n                        validation_steps=1,\n                        max_queue_size=10,\n                        workers=1,\n                        use_multiprocessing=False)\n\n    # - Produce data on 1 worker process, consume on main process:\n    #   - Worker process runs generator\n    #   - BUT on Windows, `multiprocessing` won't marshall generators across\n    #     process boundaries -> make sure `fit_generator()` raises ValueError\n    #     exception and does not attempt to run the generator.\n    if os.name is 'nt':\n        with pytest.raises(ValueError):\n            model.fit_generator(custom_generator(True),\n                                steps_per_epoch=STEPS_PER_EPOCH,\n                                validation_data=custom_generator(True),\n                                validation_steps=1,\n                                max_queue_size=10,\n                                workers=1,\n                                use_multiprocessing=True)\n    else:\n        model.fit_generator(custom_generator(True),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            validation_data=custom_generator(True),\n                            validation_steps=1,\n                            max_queue_size=10,\n                            workers=1,\n                            use_multiprocessing=True)\n\n    # - Produce data on 1 worker thread AT A TIME, consume on main thread:\n    #   - Worker threads for training and validation run generator SEQUENTIALLY\n    model.fit_generator(custom_generator(True),\n                        steps_per_epoch=STEPS_PER_EPOCH,\n                        validation_data=custom_generator(True),\n                        validation_steps=1,\n                        max_queue_size=10,\n                        workers=1,\n                        use_multiprocessing=False)\n\n    # - Produce and consume data without a queue on main thread\n    #   - Make sure the value of `use_multiprocessing` is ignored\n    model.fit_generator(custom_generator(True),\n                        steps_per_epoch=STEPS_PER_EPOCH,\n                        validation_data=custom_generator(True),\n                        validation_steps=1,\n                        max_queue_size=10,\n                        workers=0,\n                        use_multiprocessing=True)\n    model.fit_generator(custom_generator(True),\n                        steps_per_epoch=STEPS_PER_EPOCH,\n                        validation_data=custom_generator(True),\n                        validation_steps=1,\n                        max_queue_size=10,\n                        workers=0,\n                        use_multiprocessing=False)\n\n    # - For Sequence\n    model.fit_generator(DummySequence(),\n                        steps_per_epoch=STEPS_PER_EPOCH,\n                        validation_data=custom_generator(True),\n                        validation_steps=1,\n                        max_queue_size=10,\n                        workers=0,\n                        use_multiprocessing=True)\n    model.fit_generator(DummySequence(),\n                        steps_per_epoch=STEPS_PER_EPOCH,\n                        validation_data=custom_generator(True),\n                        validation_steps=1,\n                        max_queue_size=10,\n                        workers=0,\n                        use_multiprocessing=False)\n\n    # Test invalid use cases\n    def invalid_generator():\n        while True:\n            yield arr_data[:10], arr_data[:10], arr_labels[:10], arr_labels[:10]\n\n    # not specified `validation_steps`\n    with pytest.raises(ValueError):\n        model.fit_generator(custom_generator(),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            validation_data=custom_generator(),\n                            validation_steps=None,\n                            max_queue_size=10,\n                            workers=1,\n                            use_multiprocessing=False)\n\n    # validation data is neither a tuple nor a triple.\n    with pytest.raises(ValueError):\n        model.fit_generator(custom_generator(),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            validation_data=(arr_data[:10],\n                                             arr_data[:10],\n                                             arr_labels[:10],\n                                             arr_weights[:10]),\n                            validation_steps=1,\n                            max_queue_size=10,\n                            workers=1,\n                            use_multiprocessing=False)\n\n    # validation generator is neither a tuple nor a triple.\n    with pytest.raises(ValueError):\n        model.fit_generator(custom_generator(),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            validation_data=invalid_generator(),\n                            validation_steps=1,\n                            max_queue_size=10,\n                            workers=1,\n                            use_multiprocessing=False)",
                "test_error": "TypeError: 'DummySequence' object is not an iterator",
                "full_test_error": "@keras_test\n    def test_multiprocessing_training():\n        arr_data = np.random.randint(0, 256, (50, 2))\n        arr_labels = np.random.randint(0, 2, 50)\n        arr_weights = np.random.random(50)\n    \n        def custom_generator(use_weights=False):\n            batch_size = 10\n            n_samples = 50\n    \n            while True:\n                batch_index = np.random.randint(0, n_samples - batch_size)\n                start = batch_index\n                end = start + batch_size\n                X = arr_data[start: end]\n                y = arr_labels[start: end]\n                if use_weights:\n                    w = arr_weights[start: end]\n                    yield X, y, w\n                else:\n                    yield X, y\n    \n        # Build a NN\n        model = Sequential()\n        model.add(Dense(1, input_shape=(2, )))\n        model.compile(loss='mse', optimizer='adadelta')\n    \n        # - Produce data on 4 worker processes, consume on main process:\n        #   - Each worker process runs OWN copy of generator\n        #   - BUT on Windows, `multiprocessing` won't marshall generators across\n        #     process boundaries -> make sure `fit_generator()` raises ValueError\n        #     exception and does not attempt to run the generator.\n        if os.name is 'nt':\n            with pytest.raises(ValueError):\n                model.fit_generator(custom_generator(),\n                                    steps_per_epoch=STEPS_PER_EPOCH,\n                                    epochs=1,\n                                    verbose=1,\n                                    validation_steps=None,\n                                    max_queue_size=10,\n                                    workers=WORKERS,\n                                    use_multiprocessing=True)\n        else:\n            model.fit_generator(custom_generator(),\n                                steps_per_epoch=STEPS_PER_EPOCH,\n                                epochs=1,\n                                verbose=1,\n                                validation_steps=None,\n                                max_queue_size=10,\n                                workers=WORKERS,\n                                use_multiprocessing=True)\n    \n        # - Produce data on 4 worker threads, consume on main thread:\n        #   - All worker threads share the SAME generator\n        model.fit_generator(custom_generator(),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            epochs=1,\n                            verbose=1,\n                            validation_steps=None,\n                            max_queue_size=10,\n                            workers=WORKERS,\n                            use_multiprocessing=False)\n    \n        # - Produce data on 1 worker process, consume on main process:\n        #   - Worker process runs generator\n        #   - BUT on Windows, `multiprocessing` won't marshall generators across\n        #     process boundaries -> make sure `fit_generator()` raises ValueError\n        #     exception and does not attempt to run the generator.\n        if os.name is 'nt':\n            with pytest.raises(ValueError):\n                model.fit_generator(custom_generator(True),\n                                    steps_per_epoch=STEPS_PER_EPOCH,\n                                    validation_data=(arr_data[:10],\n                                                     arr_labels[:10],\n                                                     arr_weights[:10]),\n                                    validation_steps=1,\n                                    max_queue_size=10,\n                                    workers=1,\n                                    use_multiprocessing=True)\n        else:\n            model.fit_generator(custom_generator(True),\n                                steps_per_epoch=STEPS_PER_EPOCH,\n                                validation_data=(arr_data[:10],\n                                                 arr_labels[:10],\n                                                 arr_weights[:10]),\n                                validation_steps=1,\n                                max_queue_size=10,\n                                workers=1,\n                                use_multiprocessing=True)\n    \n        # - Produce data on 1 worker thread, consume on main thread:\n        #   - Worker thread is the only thread running the generator\n        model.fit_generator(custom_generator(True),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            validation_data=(arr_data[:10],\n                                             arr_labels[:10],\n                                             arr_weights[:10]),\n                            validation_steps=1,\n                            max_queue_size=10,\n                            workers=1,\n                            use_multiprocessing=False)\n    \n        # - Produce data on 1 worker process, consume on main process:\n        #   - Worker process runs generator\n        #   - BUT on Windows, `multiprocessing` won't marshall generators across\n        #     process boundaries -> make sure `fit_generator()` raises ValueError\n        #     exception and does not attempt to run the generator.\n        if os.name is 'nt':\n            with pytest.raises(ValueError):\n                model.fit_generator(custom_generator(True),\n                                    steps_per_epoch=STEPS_PER_EPOCH,\n                                    validation_data=custom_generator(True),\n                                    validation_steps=1,\n                                    max_queue_size=10,\n                                    workers=1,\n                                    use_multiprocessing=True)\n        else:\n            model.fit_generator(custom_generator(True),\n                                steps_per_epoch=STEPS_PER_EPOCH,\n                                validation_data=custom_generator(True),\n                                validation_steps=1,\n                                max_queue_size=10,\n                                workers=1,\n                                use_multiprocessing=True)\n    \n        # - Produce data on 1 worker thread AT A TIME, consume on main thread:\n        #   - Worker threads for training and validation run generator SEQUENTIALLY\n        model.fit_generator(custom_generator(True),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            validation_data=custom_generator(True),\n                            validation_steps=1,\n                            max_queue_size=10,\n                            workers=1,\n                            use_multiprocessing=False)\n    \n        # - Produce and consume data without a queue on main thread\n        #   - Make sure the value of `use_multiprocessing` is ignored\n        model.fit_generator(custom_generator(True),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            validation_data=custom_generator(True),\n                            validation_steps=1,\n                            max_queue_size=10,\n                            workers=0,\n                            use_multiprocessing=True)\n        model.fit_generator(custom_generator(True),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            validation_data=custom_generator(True),\n                            validation_steps=1,\n                            max_queue_size=10,\n                            workers=0,\n                            use_multiprocessing=False)\n    \n        # - For Sequence\n        model.fit_generator(DummySequence(),\n                            steps_per_epoch=STEPS_PER_EPOCH,\n                            validation_data=custom_generator(True),\n                            validation_steps=1,\n                            max_queue_size=10,\n                            workers=0,\n>                           use_multiprocessing=True)\n\ntests/test_multiprocessing.py:194: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/legacy/interfaces.py:91: in wrapper\n    return func(*args, **kwargs)\nkeras/models.py:1253: in fit_generator\n    initial_epoch=initial_epoch)\nkeras/legacy/interfaces.py:91: in wrapper\n    return func(*args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <keras.engine.training.Model object at 0x13332acd0>\ngenerator = <test_multiprocessing.DummySequence object at 0x10e2dc990>\nsteps_per_epoch = 100, epochs = 1, verbose = 1\ncallbacks = <keras.callbacks.CallbackList object at 0x1336c8910>\nvalidation_data = <generator object test_multiprocessing_training.<locals>.custom_generator at 0x13331fd50>\nvalidation_steps = 1, class_weight = None, max_queue_size = 10, workers = 0\nuse_multiprocessing = True, shuffle = True, initial_epoch = 0\n\n    @interfaces.legacy_generator_methods_support\n    def fit_generator(self,\n                      generator,\n                      steps_per_epoch=None,\n                      epochs=1,\n                      verbose=1,\n                      callbacks=None,\n                      validation_data=None,\n                      validation_steps=None,\n                      class_weight=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      shuffle=True,\n                      initial_epoch=0):\n        \"\"\"Trains the model on data yielded batch-by-batch by a Python generator.\n    \n        The generator is run in parallel to the model, for efficiency.\n        For instance, this allows you to do real-time data augmentation\n        on images on CPU in parallel to training your model on GPU.\n    \n        The use of `keras.utils.Sequence` guarantees the ordering\n        and guarantees the single use of every input per epoch when\n        using `use_multiprocessing=True`.\n    \n        # Arguments\n            generator: A generator or an instance of `Sequence`\n                (`keras.utils.Sequence`) object in order to avoid\n                duplicate data when using multiprocessing.\n                The output of the generator must be either\n                - a tuple `(inputs, targets)`\n                - a tuple `(inputs, targets, sample_weights)`.\n                This tuple (a single output of the generator) makes a single\n                batch. Therefore, all arrays in this tuple must have the same\n                length (equal to the size of this batch). Different batches\n                may have different sizes. For example, the last batch of the\n                epoch is commonly smaller than the others, if the size of the\n                dataset is not divisible by the batch size.\n                The generator is expected to loop over its data\n                indefinitely. An epoch finishes when `steps_per_epoch`\n                batches have been seen by the model.\n            steps_per_epoch: Integer.\n                Total number of steps (batches of samples)\n                to yield from `generator` before declaring one epoch\n                finished and starting the next epoch. It should typically\n                be equal to the number of samples of your dataset\n                divided by the batch size.\n                Optional for `Sequence`: if unspecified, will use\n                the `len(generator)` as a number of steps.\n            epochs: Integer. Number of epochs to train the model.\n                An epoch is an iteration over the entire data provided,\n                as defined by `steps_per_epoch`.\n                Note that in conjunction with `initial_epoch`,\n                `epochs` is to be understood as \"final epoch\".\n                The model is not trained for a number of iterations\n                given by `epochs`, but merely until the epoch\n                of index `epochs` is reached.\n            verbose: Integer. 0, 1, or 2. Verbosity mode.\n                0 = silent, 1 = progress bar, 2 = one line per epoch.\n            callbacks: List of `keras.callbacks.Callback` instances.\n                List of callbacks to apply during training.\n                See [callbacks](/callbacks).\n            validation_data: This can be either\n                - a generator for the validation data\n                - tuple `(x_val, y_val)`\n                - tuple `(x_val, y_val, val_sample_weights)`\n                on which to evaluate\n                the loss and any model metrics at the end of each epoch.\n                The model will not be trained on this data.\n            validation_steps: Only relevant if `validation_data`\n                is a generator. Total number of steps (batches of samples)\n                to yield from `validation_data` generator before stopping.\n                Optional for `Sequence`: if unspecified, will use\n                the `len(validation_data)` as a number of steps.\n            class_weight: Optional dictionary mapping class indices (integers)\n                to a weight (float) value, used for weighting the loss function\n                (during training only).\n                This can be useful to tell the model to\n                \"pay more attention\" to samples from\n                an under-represented class.\n            max_queue_size: Integer. Maximum size for the generator queue.\n                If unspecified, `max_queue_size` will default to 10.\n            workers: Integer. Maximum number of processes to spin up\n                when using process based threading.\n                If unspecified, `workers` will default to 1. If 0, will\n                execute the generator on the main thread.\n            use_multiprocessing: Boolean. If True, use process based threading.\n                If unspecified, `use_multiprocessing` will default to False.\n                Note that because\n                this implementation relies on multiprocessing,\n                you should not pass\n                non picklable arguments to the generator\n                as they can't be passed\n                easily to children processes.\n            shuffle: Boolean. Whether to shuffle the training data\n                in batch-sized chunks before each epoch.\n                Only used with instances of `Sequence` (`keras.utils.Sequence`).\n            initial_epoch: Integer.\n                Epoch at which to start training\n                (useful for resuming a previous training run).\n    \n        # Returns\n            A `History` object. Its `History.history` attribute is\n            a record of training loss values and metrics values\n            at successive epochs, as well as validation loss values\n            and validation metrics values (if applicable).\n    \n        # Example\n    \n        ```python\n            def generate_arrays_from_file(path):\n                while 1:\n                    with open(path) as f:\n                        for line in f:\n                            # create numpy arrays of input data\n                            # and labels, from each line in the file\n                            x1, x2, y = process_line(line)\n                            yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n    \n            model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                                steps_per_epoch=10000, epochs=10)\n        ```\n    \n        # Raises\n            ValueError: In case the generator yields\n                data in an invalid format.\n        \"\"\"\n        wait_time = 0.01  # in seconds\n        epoch = initial_epoch\n    \n        do_validation = bool(validation_data)\n        self._make_train_function()\n        if do_validation:\n            self._make_test_function()\n    \n        is_sequence = isinstance(generator, Sequence)\n        if not is_sequence and use_multiprocessing and workers > 1:\n            warnings.warn(\n                UserWarning('Using a generator with `use_multiprocessing=True`'\n                            ' and multiple workers may duplicate your data.'\n                            ' Please consider using the`keras.utils.Sequence'\n                            ' class.'))\n        if steps_per_epoch is None:\n            if is_sequence:\n                steps_per_epoch = len(generator)\n            else:\n                raise ValueError('`steps_per_epoch=None` is only valid for a'\n                                 ' generator based on the `keras.utils.Sequence`'\n                                 ' class. Please specify `steps_per_epoch` or use'\n                                 ' the `keras.utils.Sequence` class.')\n    \n        # python 2 has 'next', 3 has '__next__'\n        # avoid any explicit version checks\n        val_gen = (hasattr(validation_data, 'next') or\n                   hasattr(validation_data, '__next__') or\n                   isinstance(validation_data, Sequence))\n        if (val_gen and not isinstance(validation_data, Sequence) and\n                not validation_steps):\n            raise ValueError('`validation_steps=None` is only valid for a'\n                             ' generator based on the `keras.utils.Sequence`'\n                             ' class. Please specify `validation_steps` or use'\n                             ' the `keras.utils.Sequence` class.')\n    \n        # Prepare display labels.\n        out_labels = self.metrics_names\n        callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    \n        # prepare callbacks\n        self.history = cbks.History()\n        _callbacks = [cbks.BaseLogger(\n            stateful_metrics=self.stateful_metric_names)]\n        if verbose:\n            _callbacks.append(\n                cbks.ProgbarLogger(\n                    count_mode='steps',\n                    stateful_metrics=self.stateful_metric_names))\n        _callbacks += (callbacks or []) + [self.history]\n        callbacks = cbks.CallbackList(_callbacks)\n    \n        # it's possible to callback a different model than self:\n        if hasattr(self, 'callback_model') and self.callback_model:\n            callback_model = self.callback_model\n        else:\n            callback_model = self\n        callbacks.set_model(callback_model)\n        callbacks.set_params({\n            'epochs': epochs,\n            'steps': steps_per_epoch,\n            'verbose': verbose,\n            'do_validation': do_validation,\n            'metrics': callback_metrics,\n        })\n        callbacks.on_train_begin()\n    \n        enqueuer = None\n        val_enqueuer = None\n    \n        try:\n            if do_validation:\n                if val_gen:\n                    if workers > 0:\n                        if isinstance(validation_data, Sequence):\n                            val_enqueuer = OrderedEnqueuer(\n                                validation_data,\n                                use_multiprocessing=use_multiprocessing)\n                            if validation_steps is None:\n                                validation_steps = len(validation_data)\n                        else:\n                            val_enqueuer = GeneratorEnqueuer(\n                                validation_data,\n                                use_multiprocessing=use_multiprocessing,\n                                wait_time=wait_time)\n                        val_enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n                        validation_generator = val_enqueuer.get()\n                    else:\n                        validation_generator = validation_data\n                else:\n                    if len(validation_data) == 2:\n                        val_x, val_y = validation_data\n                        val_sample_weight = None\n                    elif len(validation_data) == 3:\n                        val_x, val_y, val_sample_weight = validation_data\n                    else:\n                        raise ValueError('`validation_data` should be a tuple '\n                                         '`(val_x, val_y, val_sample_weight)` '\n                                         'or `(val_x, val_y)`. Found: ' +\n                                         str(validation_data))\n                    val_x, val_y, val_sample_weights = self._standardize_user_data(\n                        val_x, val_y, val_sample_weight)\n                    val_data = val_x + val_y + val_sample_weights\n                    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n                        val_data += [0.]\n                    for cbk in callbacks:\n                        cbk.validation_data = val_data\n    \n            if workers > 0:\n                if is_sequence:\n                    enqueuer = OrderedEnqueuer(generator,\n                                               use_multiprocessing=use_multiprocessing,\n                                               shuffle=shuffle)\n                else:\n                    enqueuer = GeneratorEnqueuer(generator,\n                                                 use_multiprocessing=use_multiprocessing,\n                                                 wait_time=wait_time)\n                enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n                output_generator = enqueuer.get()\n            else:\n                output_generator = generator\n    \n            callback_model.stop_training = False\n            # Construct epoch logs.\n            epoch_logs = {}\n            while epoch < epochs:\n                callbacks.on_epoch_begin(epoch)\n                steps_done = 0\n                batch_index = 0\n                while steps_done < steps_per_epoch:\n>                   generator_output = next(output_generator)\nE                   TypeError: 'DummySequence' object is not an iterator\n\nkeras/engine/training.py:2207: TypeError",
                "traceback": "keras/legacy/interfaces.py:91: in wrapper\n    return func(*args, **kwargs)\nkeras/models.py:1253: in fit_generator\n    initial_epoch=initial_epoch)\nkeras/legacy/interfaces.py:91: in wrapper\n    return func(*args, **kwargs)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <keras.engine.training.Model object at 0x13332acd0>\ngenerator = <test_multiprocessing.DummySequence object at 0x10e2dc990>\nsteps_per_epoch = 100, epochs = 1, verbose = 1\ncallbacks = <keras.callbacks.CallbackList object at 0x1336c8910>\nvalidation_data = <generator object test_multiprocessing_training.<locals>.custom_generator at 0x13331fd50>\nvalidation_steps = 1, class_weight = None, max_queue_size = 10, workers = 0\nuse_multiprocessing = True, shuffle = True, initial_epoch = 0\n\n    @interfaces.legacy_generator_methods_support\n    def fit_generator(self,\n                      generator,\n                      steps_per_epoch=None,\n                      epochs=1,\n                      verbose=1,\n                      callbacks=None,\n                      validation_data=None,\n                      validation_steps=None,\n                      class_weight=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      shuffle=True,\n                      initial_epoch=0):\n        \"\"\"Trains the model on data yielded batch-by-batch by a Python generator.\n    \n        The generator is run in parallel to the model, for efficiency.\n        For instance, this allows you to do real-time data augmentation\n        on images on CPU in parallel to training your model on GPU.\n    \n        The use of `keras.utils.Sequence` guarantees the ordering\n        and guarantees the single use of every input per epoch when\n        using `use_multiprocessing=True`.\n    \n        # Arguments\n            generator: A generator or an instance of `Sequence`\n                (`keras.utils.Sequence`) object in order to avoid\n                duplicate data when using multiprocessing.\n                The output of the generator must be either\n                - a tuple `(inputs, targets)`\n                - a tuple `(inputs, targets, sample_weights)`.\n                This tuple (a single output of the generator) makes a single\n                batch. Therefore, all arrays in this tuple must have the same\n                length (equal to the size of this batch). Different batches\n                may have different sizes. For example, the last batch of the\n                epoch is commonly smaller than the others, if the size of the\n                dataset is not divisible by the batch size.\n                The generator is expected to loop over its data\n                indefinitely. An epoch finishes when `steps_per_epoch`\n                batches have been seen by the model.\n            steps_per_epoch: Integer.\n                Total number of steps (batches of samples)\n                to yield from `generator` before declaring one epoch\n                finished and starting the next epoch. It should typically\n                be equal to the number of samples of your dataset\n                divided by the batch size.\n                Optional for `Sequence`: if unspecified, will use\n                the `len(generator)` as a number of steps.\n            epochs: Integer. Number of epochs to train the model.\n                An epoch is an iteration over the entire data provided,\n                as defined by `steps_per_epoch`.\n                Note that in conjunction with `initial_epoch`,\n                `epochs` is to be understood as \"final epoch\".\n                The model is not trained for a number of iterations\n                given by `epochs`, but merely until the epoch\n                of index `epochs` is reached.\n            verbose: Integer. 0, 1, or 2. Verbosity mode.\n                0 = silent, 1 = progress bar, 2 = one line per epoch.\n            callbacks: List of `keras.callbacks.Callback` instances.\n                List of callbacks to apply during training.\n                See [callbacks](/callbacks).\n            validation_data: This can be either\n                - a generator for the validation data\n                - tuple `(x_val, y_val)`\n                - tuple `(x_val, y_val, val_sample_weights)`\n                on which to evaluate\n                the loss and any model metrics at the end of each epoch.\n                The model will not be trained on this data.\n            validation_steps: Only relevant if `validation_data`\n                is a generator. Total number of steps (batches of samples)\n                to yield from `validation_data` generator before stopping.\n                Optional for `Sequence`: if unspecified, will use\n                the `len(validation_data)` as a number of steps.\n            class_weight: Optional dictionary mapping class indices (integers)\n                to a weight (float) value, used for weighting the loss function\n                (during training only).\n                This can be useful to tell the model to\n                \"pay more attention\" to samples from\n                an under-represented class.\n            max_queue_size: Integer. Maximum size for the generator queue.\n                If unspecified, `max_queue_size` will default to 10.\n            workers: Integer. Maximum number of processes to spin up\n                when using process based threading.\n                If unspecified, `workers` will default to 1. If 0, will\n                execute the generator on the main thread.\n            use_multiprocessing: Boolean. If True, use process based threading.\n                If unspecified, `use_multiprocessing` will default to False.\n                Note that because\n                this implementation relies on multiprocessing,\n                you should not pass\n                non picklable arguments to the generator\n                as they can't be passed\n                easily to children processes.\n            shuffle: Boolean. Whether to shuffle the training data\n                in batch-sized chunks before each epoch.\n                Only used with instances of `Sequence` (`keras.utils.Sequence`).\n            initial_epoch: Integer.\n                Epoch at which to start training\n                (useful for resuming a previous training run).\n    \n        # Returns\n            A `History` object. Its `History.history` attribute is\n            a record of training loss values and metrics values\n            at successive epochs, as well as validation loss values\n            and validation metrics values (if applicable).\n    \n        # Example\n    \n        ```python\n            def generate_arrays_from_file(path):\n                while 1:\n                    with open(path) as f:\n                        for line in f:\n                            # create numpy arrays of input data\n                            # and labels, from each line in the file\n                            x1, x2, y = process_line(line)\n                            yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n    \n            model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                                steps_per_epoch=10000, epochs=10)\n        ```\n    \n        # Raises\n            ValueError: In case the generator yields\n                data in an invalid format.\n        \"\"\"\n        wait_time = 0.01  # in seconds\n        epoch = initial_epoch\n    \n        do_validation = bool(validation_data)\n        self._make_train_function()\n        if do_validation:\n            self._make_test_function()\n    \n        is_sequence = isinstance(generator, Sequence)\n        if not is_sequence and use_multiprocessing and workers > 1:\n            warnings.warn(\n                UserWarning('Using a generator with `use_multiprocessing=True`'\n                            ' and multiple workers may duplicate your data.'\n                            ' Please consider using the`keras.utils.Sequence'\n                            ' class.'))\n        if steps_per_epoch is None:\n            if is_sequence:\n                steps_per_epoch = len(generator)\n            else:\n                raise ValueError('`steps_per_epoch=None` is only valid for a'\n                                 ' generator based on the `keras.utils.Sequence`'\n                                 ' class. Please specify `steps_per_epoch` or use'\n                                 ' the `keras.utils.Sequence` class.')\n    \n        # python 2 has 'next', 3 has '__next__'\n        # avoid any explicit version checks\n        val_gen = (hasattr(validation_data, 'next') or\n                   hasattr(validation_data, '__next__') or\n                   isinstance(validation_data, Sequence))\n        if (val_gen and not isinstance(validation_data, Sequence) and\n                not validation_steps):\n            raise ValueError('`validation_steps=None` is only valid for a'\n                             ' generator based on the `keras.utils.Sequence`'\n                             ' class. Please specify `validation_steps` or use'\n                             ' the `keras.utils.Sequence` class.')\n    \n        # Prepare display labels.\n        out_labels = self.metrics_names\n        callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    \n        # prepare callbacks\n        self.history = cbks.History()\n        _callbacks = [cbks.BaseLogger(\n            stateful_metrics=self.stateful_metric_names)]\n        if verbose:\n            _callbacks.append(\n                cbks.ProgbarLogger(\n                    count_mode='steps',\n                    stateful_metrics=self.stateful_metric_names))\n        _callbacks += (callbacks or []) + [self.history]\n        callbacks = cbks.CallbackList(_callbacks)\n    \n        # it's possible to callback a different model than self:\n        if hasattr(self, 'callback_model') and self.callback_model:\n            callback_model = self.callback_model\n        else:\n            callback_model = self\n        callbacks.set_model(callback_model)\n        callbacks.set_params({\n            'epochs': epochs,\n            'steps': steps_per_epoch,\n            'verbose': verbose,\n            'do_validation': do_validation,\n            'metrics': callback_metrics,\n        })\n        callbacks.on_train_begin()\n    \n        enqueuer = None\n        val_enqueuer = None\n    \n        try:\n            if do_validation:\n                if val_gen:\n                    if workers > 0:\n                        if isinstance(validation_data, Sequence):\n                            val_enqueuer = OrderedEnqueuer(\n                                validation_data,\n                                use_multiprocessing=use_multiprocessing)\n                            if validation_steps is None:\n                                validation_steps = len(validation_data)\n                        else:\n                            val_enqueuer = GeneratorEnqueuer(\n                                validation_data,\n                                use_multiprocessing=use_multiprocessing,\n                                wait_time=wait_time)\n                        val_enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n                        validation_generator = val_enqueuer.get()\n                    else:\n                        validation_generator = validation_data\n                else:\n                    if len(validation_data) == 2:\n                        val_x, val_y = validation_data\n                        val_sample_weight = None\n                    elif len(validation_data) == 3:\n                        val_x, val_y, val_sample_weight = validation_data\n                    else:\n                        raise ValueError('`validation_data` should be a tuple '\n                                         '`(val_x, val_y, val_sample_weight)` '\n                                         'or `(val_x, val_y)`. Found: ' +\n                                         str(validation_data))\n                    val_x, val_y, val_sample_weights = self._standardize_user_data(\n                        val_x, val_y, val_sample_weight)\n                    val_data = val_x + val_y + val_sample_weights\n                    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n                        val_data += [0.]\n                    for cbk in callbacks:\n                        cbk.validation_data = val_data\n    \n            if workers > 0:\n                if is_sequence:\n                    enqueuer = OrderedEnqueuer(generator,\n                                               use_multiprocessing=use_multiprocessing,\n                                               shuffle=shuffle)\n                else:\n                    enqueuer = GeneratorEnqueuer(generator,\n                                                 use_multiprocessing=use_multiprocessing,\n                                                 wait_time=wait_time)\n                enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n                output_generator = enqueuer.get()\n            else:\n                output_generator = generator\n    \n            callback_model.stop_training = False\n            # Construct epoch logs.\n            epoch_logs = {}\n            while epoch < epochs:\n                callbacks.on_epoch_begin(epoch)\n                steps_done = 0\n                batch_index = 0\n                while steps_done < steps_per_epoch:\n>                   generator_output = next(output_generator)\nE                   TypeError: 'DummySequence' object is not an iterator\n\nkeras/engine/training.py:2207: TypeError",
                "test_function_decorators": [
                    "keras_test"
                ]
            }
        ]
    }
}