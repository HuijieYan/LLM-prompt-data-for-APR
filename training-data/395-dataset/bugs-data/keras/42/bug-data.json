{
    "keras:42": {
        "/Volumes/SSD2T/bgp_envs/repos/keras_42/keras/engine/training.py": {
            "buggy_functions": [
                {
                    "function_name": "fit_generator",
                    "function_code": "@interfaces.legacy_generator_methods_support\ndef fit_generator(self,\n                  generator,\n                  steps_per_epoch,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"Fits the model on data yielded batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence` (`keras.utils.Sequence`)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single batch.\n            Therefore, all arrays in this tuple must have the same length (equal\n            to the size of this batch). Different batches may have different sizes.\n            For example, the last batch of the epoch is commonly smaller than the\n            others, if the size of the dataset is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size. Not used if using `Sequence`.\n        epochs: Integer, total number of iterations on the data.\n        verbose: Verbosity mode, 0, 1, or 2.\n        callbacks: List of callbacks to be called during training.\n        validation_data: This can be either\n            - a generator for the validation data\n            - a tuple (inputs, targets)\n            - a tuple (inputs, targets, sample_weights).\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        class_weight: Dictionary mapping class indices to a weight\n            for the class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1.\n        use_multiprocessing: Boolean. If True, use process based threading.\n            If unspecified, `workers` will default to False.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (keras.utils.Sequence).\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n\n    # Returns\n        A `History` object.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                f = open(path)\n                for line in f:\n                    # create numpy arrays of input data\n                    # and labels, from each line in the file\n                    x1, x2, y = process_line(line)\n                    yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n                f.close()\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    wait_time = 0.01  # in seconds\n    epoch = initial_epoch\n\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n\n    # python 2 has 'next', 3 has '__next__'\n    # avoid any explicit version checks\n    val_gen = (hasattr(validation_data, 'next') or\n               hasattr(validation_data, '__next__') or\n               isinstance(validation_data, Sequence))\n    if val_gen and not validation_steps:\n        raise ValueError('When using a generator for validation data, '\n                         'you must specify a value for '\n                         '`validation_steps`.')\n\n    # Prepare display labels.\n    out_labels = self._get_deduped_metrics_names()\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n\n    # prepare callbacks\n    self.history = cbks.History()\n    callbacks = [cbks.BaseLogger()] + (callbacks or []) + [self.history]\n    if verbose:\n        callbacks += [cbks.ProgbarLogger(count_mode='steps')]\n    callbacks = cbks.CallbackList(callbacks)\n\n    # it's possible to callback a different model than self:\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics,\n    })\n    callbacks.on_train_begin()\n\n    if do_validation and not val_gen:\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('`validation_data` should be a tuple '\n                             '`(val_x, val_y, val_sample_weight)` '\n                             'or `(val_x, val_y)`. Found: ' +\n                             str(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(\n            val_x, val_y, val_sample_weight)\n        val_data = val_x + val_y + val_sample_weights\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            val_data += [0.]\n        for cbk in callbacks:\n            cbk.validation_data = val_data\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if is_sequence:\n        steps_per_epoch = len(generator)\n    enqueuer = None\n\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator,\n                                       use_multiprocessing=use_multiprocessing,\n                                       shuffle=shuffle)\n        else:\n            enqueuer = GeneratorEnqueuer(generator,\n                                         use_multiprocessing=use_multiprocessing,\n                                         wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n\n        callback_model.stop_training = False\n        while epoch < epochs:\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n                # build batch logs\n                batch_logs = {}\n                if isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n\n                outs = self.train_on_batch(x, y,\n                                           sample_weight=sample_weight,\n                                           class_weight=class_weight)\n\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n\n                # Construct epoch logs.\n                epoch_logs = {}\n                batch_index += 1\n                steps_done += 1\n\n                # Epoch finished.\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(\n                            validation_data,\n                            validation_steps,\n                            max_queue_size=max_queue_size,\n                            workers=workers,\n                            use_multiprocessing=use_multiprocessing)\n                    else:\n                        # No need for try/except because\n                        # data has already been validated.\n                        val_outs = self.evaluate(\n                            val_x, val_y,\n                            batch_size=batch_size,\n                            sample_weight=val_sample_weights,\n                            verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    # Same labels assumed.\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n\n                if callback_model.stop_training:\n                    break\n\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    callbacks.on_train_end()\n    return self.history\n",
                    "decorators": [
                        "interfaces.legacy_generator_methods_support"
                    ],
                    "docstring": "Fits the model on data yielded batch-by-batch by a Python generator.\n\nThe generator is run in parallel to the model, for efficiency.\nFor instance, this allows you to do real-time data augmentation\non images on CPU in parallel to training your model on GPU.\n\nThe use of `keras.utils.Sequence` guarantees the ordering\nand guarantees the single use of every input per epoch when\nusing `use_multiprocessing=True`.\n\n# Arguments\n    generator: A generator or an instance of `Sequence` (`keras.utils.Sequence`)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        The output of the generator must be either\n        - a tuple `(inputs, targets)`\n        - a tuple `(inputs, targets, sample_weights)`.\n        This tuple (a single output of the generator) makes a single batch.\n        Therefore, all arrays in this tuple must have the same length (equal\n        to the size of this batch). Different batches may have different sizes.\n        For example, the last batch of the epoch is commonly smaller than the\n        others, if the size of the dataset is not divisible by the batch size.\n        The generator is expected to loop over its data\n        indefinitely. An epoch finishes when `steps_per_epoch`\n        batches have been seen by the model.\n    steps_per_epoch: Total number of steps (batches of samples)\n        to yield from `generator` before declaring one epoch\n        finished and starting the next epoch. It should typically\n        be equal to the number of samples of your dataset\n        divided by the batch size. Not used if using `Sequence`.\n    epochs: Integer, total number of iterations on the data.\n    verbose: Verbosity mode, 0, 1, or 2.\n    callbacks: List of callbacks to be called during training.\n    validation_data: This can be either\n        - a generator for the validation data\n        - a tuple (inputs, targets)\n        - a tuple (inputs, targets, sample_weights).\n    validation_steps: Only relevant if `validation_data`\n        is a generator. Total number of steps (batches of samples)\n        to yield from `generator` before stopping.\n    class_weight: Dictionary mapping class indices to a weight\n        for the class.\n    max_queue_size: Integer. Maximum size for the generator queue.\n        If unspecified, `max_queue_size` will default to 10.\n    workers: Integer. Maximum number of processes to spin up\n        when using process based threading.\n        If unspecified, `workers` will default to 1.\n    use_multiprocessing: Boolean. If True, use process based threading.\n        If unspecified, `workers` will default to False.\n        Note that because\n        this implementation relies on multiprocessing,\n        you should not pass\n        non picklable arguments to the generator\n        as they can't be passed\n        easily to children processes.\n    shuffle: Whether to shuffle the order of the batches at\n        the beginning of each epoch. Only used with instances\n        of `Sequence` (keras.utils.Sequence).\n    initial_epoch: Epoch at which to start training\n        (useful for resuming a previous training run)\n\n# Returns\n    A `History` object.\n\n# Example\n\n```python\n    def generate_arrays_from_file(path):\n        while 1:\n            f = open(path)\n            for line in f:\n                # create numpy arrays of input data\n                # and labels, from each line in the file\n                x1, x2, y = process_line(line)\n                yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n            f.close()\n\n    model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                        steps_per_epoch=10000, epochs=10)\n```\n\n# Raises\n    ValueError: In case the generator yields\n        data in an invalid format.",
                    "start_line": 1900,
                    "end_line": 2173,
                    "variables": {
                        "wait_time": [
                            2000,
                            2081
                        ],
                        "epoch": [
                            2086,
                            2087,
                            2001,
                            2163,
                            2164
                        ],
                        "initial_epoch": [
                            2001
                        ],
                        "do_validation": [
                            2003,
                            2005,
                            2039,
                            2138,
                            2044
                        ],
                        "bool": [
                            2003
                        ],
                        "validation_data": [
                            2048,
                            2049,
                            2054,
                            2003,
                            2141,
                            2010,
                            2011,
                            2012,
                            2045,
                            2046
                        ],
                        "self._make_train_function": [
                            2004
                        ],
                        "self": [
                            2019,
                            2149,
                            2023,
                            2024,
                            2055,
                            2058,
                            2121,
                            2030,
                            2031,
                            2033,
                            2004,
                            2006,
                            2140,
                            2173
                        ],
                        "self._make_test_function": [
                            2006
                        ],
                        "val_gen": [
                            2010,
                            2139,
                            2044,
                            2013
                        ],
                        "hasattr": [
                            2010,
                            2011,
                            2093,
                            2030
                        ],
                        "isinstance": [
                            2113,
                            2058,
                            2154,
                            2125,
                            2062,
                            2012,
                            2111
                        ],
                        "Sequence": [
                            2012,
                            2062
                        ],
                        "validation_steps": [
                            2013,
                            2142
                        ],
                        "ValueError": [
                            2094,
                            2105,
                            2051,
                            2014
                        ],
                        "out_labels": [
                            2019,
                            2020,
                            2157,
                            2127
                        ],
                        "self._get_deduped_metrics_names": [
                            2019
                        ],
                        "callback_metrics": [
                            2040,
                            2020
                        ],
                        "n": [
                            2020
                        ],
                        "self.history": [
                            2024,
                            2173,
                            2023
                        ],
                        "cbks.History": [
                            2023
                        ],
                        "cbks": [
                            2024,
                            2026,
                            2027,
                            2023
                        ],
                        "callbacks": [
                            2087,
                            2024,
                            2119,
                            2026,
                            2027,
                            2060,
                            2034,
                            2035,
                            2130,
                            2163,
                            2042,
                            2172
                        ],
                        "cbks.BaseLogger": [
                            2024
                        ],
                        "verbose": [
                            2025,
                            2038
                        ],
                        "cbks.ProgbarLogger": [
                            2026
                        ],
                        "cbks.CallbackList": [
                            2027
                        ],
                        "self.callback_model": [
                            2030,
                            2031
                        ],
                        "callback_model": [
                            2085,
                            2031,
                            2160,
                            2033,
                            2034,
                            2165
                        ],
                        "callbacks.set_model": [
                            2034
                        ],
                        "callbacks.set_params": [
                            2035
                        ],
                        "epochs": [
                            2036,
                            2086
                        ],
                        "steps_per_epoch": [
                            2090,
                            2138,
                            2037,
                            2070
                        ],
                        "callbacks.on_train_begin": [
                            2042
                        ],
                        "len": [
                            2048,
                            2099,
                            2102,
                            2070,
                            2045
                        ],
                        "val_x": [
                            2049,
                            2150,
                            2055,
                            2056,
                            2057,
                            2046
                        ],
                        "val_y": [
                            2049,
                            2150,
                            2055,
                            2056,
                            2057,
                            2046
                        ],
                        "val_sample_weight": [
                            2056,
                            2049,
                            2047
                        ],
                        "str": [
                            2097,
                            2108,
                            2054
                        ],
                        "val_sample_weights": [
                            2152,
                            2057,
                            2055
                        ],
                        "self._standardize_user_data": [
                            2055
                        ],
                        "val_data": [
                            2057,
                            2059,
                            2061
                        ],
                        "self.uses_learning_phase": [
                            2058
                        ],
                        "K.learning_phase": [
                            2058
                        ],
                        "K": [
                            2058
                        ],
                        "int": [
                            2058
                        ],
                        "cbk": [
                            2060,
                            2061
                        ],
                        "cbk.validation_data": [
                            2061
                        ],
                        "is_sequence": [
                            2074,
                            2069,
                            2062,
                            2063
                        ],
                        "generator": [
                            2075,
                            2079,
                            2062,
                            2070
                        ],
                        "use_multiprocessing": [
                            2080,
                            2145,
                            2076,
                            2063
                        ],
                        "workers": [
                            2144,
                            2082,
                            2063
                        ],
                        "warnings.warn": [
                            2064
                        ],
                        "warnings": [
                            2064
                        ],
                        "UserWarning": [
                            2065
                        ],
                        "enqueuer": [
                            2082,
                            2083,
                            2071,
                            2169,
                            2170,
                            2075,
                            2079
                        ],
                        "OrderedEnqueuer": [
                            2075
                        ],
                        "shuffle": [
                            2077
                        ],
                        "GeneratorEnqueuer": [
                            2079
                        ],
                        "enqueuer.start": [
                            2082
                        ],
                        "max_queue_size": [
                            2082,
                            2143
                        ],
                        "output_generator": [
                            2091,
                            2083
                        ],
                        "enqueuer.get": [
                            2083
                        ],
                        "callback_model.stop_training": [
                            2160,
                            2165,
                            2085
                        ],
                        "callbacks.on_epoch_begin": [
                            2087
                        ],
                        "steps_done": [
                            2088,
                            2090,
                            2138,
                            2135
                        ],
                        "batch_index": [
                            2117,
                            2119,
                            2089,
                            2130,
                            2134
                        ],
                        "generator_output": [
                            2091,
                            2093,
                            2097,
                            2099,
                            2100,
                            2102,
                            2103,
                            2108
                        ],
                        "next": [
                            2091
                        ],
                        "x": [
                            2112,
                            2113,
                            2114,
                            2116,
                            2121,
                            2100,
                            2103,
                            2111
                        ],
                        "y": [
                            2121,
                            2100,
                            2103
                        ],
                        "sample_weight": [
                            2122,
                            2101,
                            2103
                        ],
                        "batch_logs": [
                            2117,
                            2118,
                            2119,
                            2128,
                            2130,
                            2110
                        ],
                        "list": [
                            2114,
                            2125,
                            2154,
                            2111
                        ],
                        "batch_size": [
                            2112,
                            2114,
                            2116,
                            2118,
                            2151
                        ],
                        "shape": [
                            2112,
                            2114
                        ],
                        "dict": [
                            2113
                        ],
                        "x.values": [
                            2114
                        ],
                        "x.shape": [
                            2116
                        ],
                        "callbacks.on_batch_begin": [
                            2119
                        ],
                        "outs": [
                            2121,
                            2125,
                            2126,
                            2127
                        ],
                        "self.train_on_batch": [
                            2121
                        ],
                        "class_weight": [
                            2123
                        ],
                        "l": [
                            2128,
                            2157,
                            2158,
                            2127
                        ],
                        "o": [
                            2128,
                            2157,
                            2158,
                            2127
                        ],
                        "zip": [
                            2157,
                            2127
                        ],
                        "callbacks.on_batch_end": [
                            2130
                        ],
                        "epoch_logs": [
                            2163,
                            2133,
                            2158
                        ],
                        "val_outs": [
                            2149,
                            2154,
                            2155,
                            2157,
                            2140
                        ],
                        "self.evaluate_generator": [
                            2140
                        ],
                        "self.evaluate": [
                            2149
                        ],
                        "callbacks.on_epoch_end": [
                            2163
                        ],
                        "enqueuer.stop": [
                            2170
                        ],
                        "callbacks.on_train_end": [
                            2172
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1900
                        ],
                        "interfaces": [
                            1900
                        ]
                    },
                    "filtered_variables": {
                        "wait_time": [
                            2000,
                            2081
                        ],
                        "epoch": [
                            2086,
                            2087,
                            2001,
                            2163,
                            2164
                        ],
                        "initial_epoch": [
                            2001
                        ],
                        "do_validation": [
                            2003,
                            2005,
                            2039,
                            2138,
                            2044
                        ],
                        "validation_data": [
                            2048,
                            2049,
                            2054,
                            2003,
                            2141,
                            2010,
                            2011,
                            2012,
                            2045,
                            2046
                        ],
                        "self._make_train_function": [
                            2004
                        ],
                        "self": [
                            2019,
                            2149,
                            2023,
                            2024,
                            2055,
                            2058,
                            2121,
                            2030,
                            2031,
                            2033,
                            2004,
                            2006,
                            2140,
                            2173
                        ],
                        "self._make_test_function": [
                            2006
                        ],
                        "val_gen": [
                            2010,
                            2139,
                            2044,
                            2013
                        ],
                        "Sequence": [
                            2012,
                            2062
                        ],
                        "validation_steps": [
                            2013,
                            2142
                        ],
                        "out_labels": [
                            2019,
                            2020,
                            2157,
                            2127
                        ],
                        "self._get_deduped_metrics_names": [
                            2019
                        ],
                        "callback_metrics": [
                            2040,
                            2020
                        ],
                        "n": [
                            2020
                        ],
                        "self.history": [
                            2024,
                            2173,
                            2023
                        ],
                        "cbks.History": [
                            2023
                        ],
                        "cbks": [
                            2024,
                            2026,
                            2027,
                            2023
                        ],
                        "callbacks": [
                            2087,
                            2024,
                            2119,
                            2026,
                            2027,
                            2060,
                            2034,
                            2035,
                            2130,
                            2163,
                            2042,
                            2172
                        ],
                        "cbks.BaseLogger": [
                            2024
                        ],
                        "verbose": [
                            2025,
                            2038
                        ],
                        "cbks.ProgbarLogger": [
                            2026
                        ],
                        "cbks.CallbackList": [
                            2027
                        ],
                        "self.callback_model": [
                            2030,
                            2031
                        ],
                        "callback_model": [
                            2085,
                            2031,
                            2160,
                            2033,
                            2034,
                            2165
                        ],
                        "callbacks.set_model": [
                            2034
                        ],
                        "callbacks.set_params": [
                            2035
                        ],
                        "epochs": [
                            2036,
                            2086
                        ],
                        "steps_per_epoch": [
                            2090,
                            2138,
                            2037,
                            2070
                        ],
                        "callbacks.on_train_begin": [
                            2042
                        ],
                        "val_x": [
                            2049,
                            2150,
                            2055,
                            2056,
                            2057,
                            2046
                        ],
                        "val_y": [
                            2049,
                            2150,
                            2055,
                            2056,
                            2057,
                            2046
                        ],
                        "val_sample_weight": [
                            2056,
                            2049,
                            2047
                        ],
                        "val_sample_weights": [
                            2152,
                            2057,
                            2055
                        ],
                        "self._standardize_user_data": [
                            2055
                        ],
                        "val_data": [
                            2057,
                            2059,
                            2061
                        ],
                        "self.uses_learning_phase": [
                            2058
                        ],
                        "K.learning_phase": [
                            2058
                        ],
                        "K": [
                            2058
                        ],
                        "cbk": [
                            2060,
                            2061
                        ],
                        "cbk.validation_data": [
                            2061
                        ],
                        "is_sequence": [
                            2074,
                            2069,
                            2062,
                            2063
                        ],
                        "generator": [
                            2075,
                            2079,
                            2062,
                            2070
                        ],
                        "use_multiprocessing": [
                            2080,
                            2145,
                            2076,
                            2063
                        ],
                        "workers": [
                            2144,
                            2082,
                            2063
                        ],
                        "warnings.warn": [
                            2064
                        ],
                        "warnings": [
                            2064
                        ],
                        "enqueuer": [
                            2082,
                            2083,
                            2071,
                            2169,
                            2170,
                            2075,
                            2079
                        ],
                        "OrderedEnqueuer": [
                            2075
                        ],
                        "shuffle": [
                            2077
                        ],
                        "GeneratorEnqueuer": [
                            2079
                        ],
                        "enqueuer.start": [
                            2082
                        ],
                        "max_queue_size": [
                            2082,
                            2143
                        ],
                        "output_generator": [
                            2091,
                            2083
                        ],
                        "enqueuer.get": [
                            2083
                        ],
                        "callback_model.stop_training": [
                            2160,
                            2165,
                            2085
                        ],
                        "callbacks.on_epoch_begin": [
                            2087
                        ],
                        "steps_done": [
                            2088,
                            2090,
                            2138,
                            2135
                        ],
                        "batch_index": [
                            2117,
                            2119,
                            2089,
                            2130,
                            2134
                        ],
                        "generator_output": [
                            2091,
                            2093,
                            2097,
                            2099,
                            2100,
                            2102,
                            2103,
                            2108
                        ],
                        "x": [
                            2112,
                            2113,
                            2114,
                            2116,
                            2121,
                            2100,
                            2103,
                            2111
                        ],
                        "y": [
                            2121,
                            2100,
                            2103
                        ],
                        "sample_weight": [
                            2122,
                            2101,
                            2103
                        ],
                        "batch_logs": [
                            2117,
                            2118,
                            2119,
                            2128,
                            2130,
                            2110
                        ],
                        "batch_size": [
                            2112,
                            2114,
                            2116,
                            2118,
                            2151
                        ],
                        "shape": [
                            2112,
                            2114
                        ],
                        "x.values": [
                            2114
                        ],
                        "x.shape": [
                            2116
                        ],
                        "callbacks.on_batch_begin": [
                            2119
                        ],
                        "outs": [
                            2121,
                            2125,
                            2126,
                            2127
                        ],
                        "self.train_on_batch": [
                            2121
                        ],
                        "class_weight": [
                            2123
                        ],
                        "l": [
                            2128,
                            2157,
                            2158,
                            2127
                        ],
                        "o": [
                            2128,
                            2157,
                            2158,
                            2127
                        ],
                        "callbacks.on_batch_end": [
                            2130
                        ],
                        "epoch_logs": [
                            2163,
                            2133,
                            2158
                        ],
                        "val_outs": [
                            2149,
                            2154,
                            2155,
                            2157,
                            2140
                        ],
                        "self.evaluate_generator": [
                            2140
                        ],
                        "self.evaluate": [
                            2149
                        ],
                        "callbacks.on_epoch_end": [
                            2163
                        ],
                        "enqueuer.stop": [
                            2170
                        ],
                        "callbacks.on_train_end": [
                            2172
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1900
                        ],
                        "interfaces": [
                            1900
                        ]
                    },
                    "diff_line_number": 1903,
                    "class_data": {
                        "signature": "class Model(Container)",
                        "docstring": "The `Model` class adds training & evaluation routines to a `Container`.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def compile(self, optimizer, loss, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name + '\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"' + name + '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss=' + str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n    if loss_weights is None:\n        loss_weights_list = [1.0 for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.0))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss_weights=' + str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' + str(loss_weights) + ' - expected a list of dicts.')\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError('When passing a list as `target_tensors`, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed target_tensors=' + str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n            _target_tensors = []\n            for name in self.output_names:\n                _target_tensors.append(target_tensors.get(name, None))\n            target_tensors = _target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self.internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in sample_weight_mode dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name + '\" missing from sample_weight_modes dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed sample_weight_mode=' + str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            elif sample_weight_mode == 'temporal':\n                sample_weights.append(K.placeholder(ndim=2, name=name + '_sample_weights'))\n                sample_weight_modes.append('temporal')\n            else:\n                sample_weights.append(K.placeholder(ndim=1, name=name + '_sample_weights'))\n                sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n    self.metrics = metrics\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled because it has no loss to optimize.')\n            else:\n                total_loss = 0.0\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n\n    def append_metric(layer_index, metric_name, metric_tensor):\n        \"\"\"Helper function used in loop below.\"\"\"\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[layer_index] + '_' + metric_name\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_tensor)\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n                for metric in metrics:\n                    if metric == 'accuracy' or metric == 'acc':\n                        output_shape = self.internal_output_shapes[i]\n                        if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                            acc_fn = metrics_module.binary_accuracy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            acc_fn = metrics_module.sparse_categorical_accuracy\n                        else:\n                            acc_fn = metrics_module.categorical_accuracy\n                        weighted_metric_fn = _weighted_masked_objective(acc_fn)\n                        metric_name = metric_name_prefix + 'acc'\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + metric_fn.__name__\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n                    append_metric(i, metric_name, metric_result)\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n    self._function_kwargs = kwargs\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                            "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n    if len(self.trainable_weights) != len(self._collected_trainable_weights):\n        warnings.warn(UserWarning('Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?'))",
                            "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)\n            updates = self.updates + training_updates\n            self.train_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)",
                            "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        self.test_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates, name='test_function', **self._function_kwargs)",
                            "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)",
                            "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name + ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have a defined shape, or ' + steps_name + ' should be specified.')\n    return num_samples",
                            "def _fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' % (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` when doing step-wise training, i.e. `steps_per_epoch` must be set.')\n    num_train_samples = self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n    self.history = cbks.History()\n    callbacks = [cbks.BaseLogger()] + (callbacks or []) + [self.history]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        callbacks += [cbks.ProgbarLogger(count_mode)]\n    callbacks = cbks.CallbackList(callbacks)\n    out_labels = out_labels or []\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'batch_size': batch_size, 'epochs': epochs, 'steps': steps_per_epoch, 'samples': num_train_samples, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics or []})\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n    for epoch in range(initial_epoch, epochs):\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, steps=validation_steps, verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. If using HDF5 input data, pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n                if batch_index == len(batches) - 1:\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                            "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    if steps is not None:\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0) for i in range(len(unconcatenated_outs))]\n    else:\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                            "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs * len(batch_ids)\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                            "def _standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_batch_axis=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.')\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False, exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight, self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight, self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode) for ref, sw, cw, mode in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y, self._feed_loss_fns, self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples')\n    return (x, y, sample_weights)",
                            "def _get_deduped_metrics_names(self):\n    out_labels = self.metrics_names\n    deduped_out_labels = []\n    for i, label in enumerate(out_labels):\n        new_label = label\n        if out_labels.count(label) > 1:\n            dup_idx = out_labels[:i].count(label)\n            new_label += '_' + str(dup_idx + 1)\n        deduped_out_labels.append(new_label)\n    return deduped_out_labels",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and (steps_per_epoch is None):\n        raise ValueError('If fitting from data tensors, you should specify the `steps_per_epoch` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, check_batch_axis=False, batch_size=batch_size)\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, it must contain 2 (x_val, y_val) or 3 (x_val, y_val, val_sample_weights) items, however it contains %d items' % len(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, sample_weight=val_sample_weight, check_batch_axis=False, batch_size=batch_size)\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_split and 0.0 < validation_split < 1.0:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1.0 - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1.0 - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (_slice_arrays(sample_weights, 0, split_at), _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = [0.0]\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n    out_labels = self._get_deduped_metrics_names()\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n    return self._fit_loop(f, ins, out_labels=out_labels, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, callback_metrics=callback_metrics, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            The default `None` is equal to the number of samples in\n            your dataset divided by the batch size.\n\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and (steps is None):\n        raise ValueError('If evaluating from data tensors, you should specify the `steps` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, check_batch_axis=False, batch_size=batch_size)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def predict(self, x, batch_size=None, verbose=0, steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, you should specify the `steps` argument.')\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples. Batch size: ' + str(batch_size) + '.')\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def train_on_batch(self, x, y, sample_weight=None, class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, check_batch_axis=True)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, check_batch_axis=True)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Fits the model on data yielded batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence` (`keras.utils.Sequence`)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single batch.\n            Therefore, all arrays in this tuple must have the same length (equal\n            to the size of this batch). Different batches may have different sizes.\n            For example, the last batch of the epoch is commonly smaller than the\n            others, if the size of the dataset is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size. Not used if using `Sequence`.\n        epochs: Integer, total number of iterations on the data.\n        verbose: Verbosity mode, 0, 1, or 2.\n        callbacks: List of callbacks to be called during training.\n        validation_data: This can be either\n            - a generator for the validation data\n            - a tuple (inputs, targets)\n            - a tuple (inputs, targets, sample_weights).\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        class_weight: Dictionary mapping class indices to a weight\n            for the class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1.\n        use_multiprocessing: Boolean. If True, use process based threading.\n            If unspecified, `workers` will default to False.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (keras.utils.Sequence).\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n\n    # Returns\n        A `History` object.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                f = open(path)\n                for line in f:\n                    # create numpy arrays of input data\n                    # and labels, from each line in the file\n                    x1, x2, y = process_line(line)\n                    yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n                f.close()\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    wait_time = 0.01\n    epoch = initial_epoch\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n    val_gen = hasattr(validation_data, 'next') or hasattr(validation_data, '__next__') or isinstance(validation_data, Sequence)\n    if val_gen and (not validation_steps):\n        raise ValueError('When using a generator for validation data, you must specify a value for `validation_steps`.')\n    out_labels = self._get_deduped_metrics_names()\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    self.history = cbks.History()\n    callbacks = [cbks.BaseLogger()] + (callbacks or []) + [self.history]\n    if verbose:\n        callbacks += [cbks.ProgbarLogger(count_mode='steps')]\n    callbacks = cbks.CallbackList(callbacks)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'epochs': epochs, 'steps': steps_per_epoch, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics})\n    callbacks.on_train_begin()\n    if do_validation and (not val_gen):\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('`validation_data` should be a tuple `(val_x, val_y, val_sample_weight)` or `(val_x, val_y)`. Found: ' + str(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, val_sample_weight)\n        val_data = val_x + val_y + val_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_data += [0.0]\n        for cbk in callbacks:\n            cbk.validation_data = val_data\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if is_sequence:\n        steps_per_epoch = len(generator)\n    enqueuer = None\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)\n        else:\n            enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n        callback_model.stop_training = False\n        while epoch < epochs:\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                batch_logs = {}\n                if isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = self.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                epoch_logs = {}\n                batch_index += 1\n                steps_done += 1\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(validation_data, validation_steps, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing)\n                    else:\n                        val_outs = self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n                if callback_model.stop_training:\n                    break\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    callbacks.on_train_end()\n    return self.history",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Not used if using Sequence.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n            when using process based threading\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if is_sequence:\n        steps = len(generator)\n    enqueuer = None\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n        else:\n            enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if isinstance(x, list):\n                batch_size = len(x[0])\n            elif isinstance(x, dict):\n                batch_size = len(list(x.values())[0])\n            else:\n                batch_size = len(x)\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. Batches should at least contain one item.')\n            all_outs.append(outs)\n            steps_done += 1\n            batch_sizes.append(batch_size)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if not isinstance(outs, list):\n        return np.average(np.asarray(all_outs), weights=batch_sizes)\n    else:\n        averages = []\n        for i in range(len(outs)):\n            averages.append(np.average([out[i] for out in all_outs], weights=batch_sizes))\n        return averages",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n                or an instance of Sequence (keras.utils.Sequence)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Not used if using Sequence.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Maximum number of processes to spin up\n            when using process based threading\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if is_sequence:\n        steps = len(generator)\n    enqueuer = None\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n        else:\n            enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n            else:\n                x = generator_output\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                            "def append_metric(layer_index, metric_name, metric_tensor):\n    \"\"\"Helper function used in loop below.\"\"\"\n    if len(self.output_names) > 1:\n        metric_name = self.output_names[layer_index] + '_' + metric_name\n    self.metrics_names.append(metric_name)\n    self.metrics_tensors.append(metric_tensor)",
                            "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n    for metric in metrics:\n        if metric == 'accuracy' or metric == 'acc':\n            output_shape = self.internal_output_shapes[i]\n            if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                acc_fn = metrics_module.binary_accuracy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                acc_fn = metrics_module.sparse_categorical_accuracy\n            else:\n                acc_fn = metrics_module.categorical_accuracy\n            weighted_metric_fn = _weighted_masked_objective(acc_fn)\n            metric_name = metric_name_prefix + 'acc'\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + metric_fn.__name__\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n        append_metric(i, metric_name, metric_result)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "compile(self, optimizer, loss, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "_check_trainable_weights_consistency(self)",
                            "_make_train_function(self)",
                            "_make_test_function(self)",
                            "_make_predict_function(self)",
                            "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                            "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                            "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                            "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                            "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_batch_axis=True, batch_size=None)",
                            "_get_deduped_metrics_names(self)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                            "predict(self, x, batch_size=None, verbose=0, steps=None)",
                            "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_on_batch(self, x)",
                            "fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False)",
                            "predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "append_metric(layer_index, metric_name, metric_tensor)",
                            "handle_metrics(metrics, weights=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x12016bc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_deduped_metrics_names": {
                                    "variable_value": "<bound method Model._get_deduped_metrics_names of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x1209b1a50>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "[<keras.callbacks.LambdaCallback object at 0x1202aced0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_model_methods.<locals>.gen_data at 0x1207a85d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x12016bc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'dense_1_loss', 'dropout_loss', 'dense_1_acc']",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "self._get_deduped_metrics_names": {
                                    "variable_value": "<bound method Model._get_deduped_metrics_names of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'dense_1_loss', 'dropout_loss', 'dense_1_acc', 'val_loss', 'val_dense_1_loss', 'val_dropout_loss', 'val_dense_1_acc']",
                                    "variable_type": "list",
                                    "variable_shape": "8"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x120a4dbd0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x120a4dcd0>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x12016bc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x120a4dcd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x120a4dcd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x120a4dcd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_model_methods.<locals>.gen_data at 0x1207a85d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x120a4dc90>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x120a4dc90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x1209f6bd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x120a4dc90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x120a4dcd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.68389742, 0.68656958, 0.12304801],\n       [0.90332913, 0.88595017, 0.76395713],\n       [0.67974538, 0.67379425, 0.59777445],\n       [0.99836862, 0.99590563, 0.01940391]]), array([[0.52038166, 0.12598864, 0.8119034 ],\n       [0.20756741, 0.1576778 , 0.42953632],\n       [0.21173422, 0.99993825, 0.22949244],\n       [0.3141676 , 0.43470153, 0.48557716]])], [array([[0.03656572, 0.70157338, 0.83062039, 0.0023794 ],\n       [0.12583487, 0.43129106, 0.95887697, 0.68122926],\n       [0.04760603, 0.38943786, 0.85904334, 0.57663211],\n       [0.5344417 , 0.8639696 , 0.1274715 , 0.50069859]]), array([[0.34851625, 0.69492986, 0.03597828],\n       [0.30940984, 0.94859431, 0.01386315],\n       [0.96339618, 0.74766492, 0.76747084],\n       [0.29945115, 0.81737127, 0.75514561]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.68389742, 0.68656958, 0.12304801],\n       [0.90332913, 0.88595017, 0.76395713],\n       [0.67974538, 0.67379425, 0.59777445],\n       [0.99836862, 0.99590563, 0.01940391]]), array([[0.52038166, 0.12598864, 0.8119034 ],\n       [0.20756741, 0.1576778 , 0.42953632],\n       [0.21173422, 0.99993825, 0.22949244],\n       [0.3141676 , 0.43470153, 0.48557716]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.03656572, 0.70157338, 0.83062039, 0.0023794 ],\n       [0.12583487, 0.43129106, 0.95887697, 0.68122926],\n       [0.04760603, 0.38943786, 0.85904334, 0.57663211],\n       [0.5344417 , 0.8639696 , 0.1274715 , 0.50069859]]), array([[0.34851625, 0.69492986, 0.03597828],\n       [0.30940984, 0.94859431, 0.01386315],\n       [0.96339618, 0.74766492, 0.76747084],\n       [0.29945115, 0.81737127, 0.75514561]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 2, 'size': 4, 'loss': 0.8526942, 'dense_1_loss': 0.55068207, 'dropout_loss': 0.30201215, 'dense_1_acc': 0.0}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x120a4dcd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.8526942, 0.55068207, 0.30201215, 0.0]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'dense_1_acc'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "o": {
                                    "variable_value": "0.0",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x120a4dcd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x120a4dcd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x120a4dc90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x120a4dcd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<test_training.RandomSequence object at 0x120a4dbd0>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x12016bc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_deduped_metrics_names": {
                                    "variable_value": "<bound method Model._get_deduped_metrics_names of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x1202261d0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "[<keras.callbacks.LambdaCallback object at 0x1202aced0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x120b2d850>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<test_training.RandomSequence object at 0x120a4dbd0>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x12016bc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'dense_1_loss', 'dropout_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_deduped_metrics_names": {
                                    "variable_value": "<bound method Model._get_deduped_metrics_names of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'dense_1_loss', 'dropout_loss', 'val_loss', 'val_dense_1_loss', 'val_dropout_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x120c858d0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x120a4d910>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x12016bc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x120a4d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x120a4d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x120a4d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x120b2d850>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x120a6de50>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x120a6de50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x120d081d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x120a6de50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x120a4d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.89947281, 0.50729508, 0.16525524],\n       [0.7311738 , 0.02287368, 0.68215156],\n       [0.27848281, 0.31071748, 0.75175925]]), array([[0.84429485, 0.22843553, 0.27110819],\n       [0.86944387, 0.77738696, 0.30132648],\n       [0.7073652 , 0.70088379, 0.51428724]])], [array([[0.90604443, 0.5779843 , 0.9554894 , 0.63651507],\n       [0.41219489, 0.2366511 , 0.06197529, 0.72415156],\n       [0.44966835, 0.59541603, 0.67184062, 0.0617229 ]]), array([[0.91359438, 0.72828207, 0.93929761],\n       [0.85100659, 0.77564914, 0.53009888],\n       [0.12910541, 0.60466749, 0.36772151]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.89947281, 0.50729508, 0.16525524],\n       [0.7311738 , 0.02287368, 0.68215156],\n       [0.27848281, 0.31071748, 0.75175925]]), array([[0.84429485, 0.22843553, 0.27110819],\n       [0.86944387, 0.77738696, 0.30132648],\n       [0.7073652 , 0.70088379, 0.51428724]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.90604443, 0.5779843 , 0.9554894 , 0.63651507],\n       [0.41219489, 0.2366511 , 0.06197529, 0.72415156],\n       [0.44966835, 0.59541603, 0.67184062, 0.0617229 ]]), array([[0.91359438, 0.72828207, 0.93929761],\n       [0.85100659, 0.77564914, 0.53009888],\n       [0.12910541, 0.60466749, 0.36772151]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 11, 'size': 3, 'loss': 0.63698876, 'dense_1_loss': 0.3399129, 'dropout_loss': 0.59415174}",
                                    "variable_type": "dict",
                                    "variable_shape": "5"
                                },
                                "batch_size": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x120a4d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.63698876, 0.3399129, 0.59415174]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'dropout_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "o": {
                                    "variable_value": "0.15088863298296928",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x120a4d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 0.4215802314380805, 'val_dense_1_loss': 0.3461359118421872, 'val_dropout_loss': 0.15088863298296928, 'loss': 0.6758785247802734, 'dense_1_loss': 0.43636742730935413, 'dropout_loss': 0.47902220487594604}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "val_outs": {
                                    "variable_value": "[0.4215802314380805, 0.3461359118421872, 0.15088863298296928]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x12016bc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x120a4d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x120a6de50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x120a4d910>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11c82dc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_model_methods.<locals>.gen_data at 0x11cdd1e50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_deduped_metrics_names": {
                                    "variable_value": "<bound method Model._get_deduped_metrics_names of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x11cf12c50>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "[<keras.callbacks.LambdaCallback object at 0x11ce1af90>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11c82dc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object test_model_methods.<locals>.gen_data at 0x11cdd1e50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'dense_1_loss', 'dropout_loss', 'dense_1_acc']",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "self._get_deduped_metrics_names": {
                                    "variable_value": "<bound method Model._get_deduped_metrics_names of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'dense_1_loss', 'dropout_loss', 'dense_1_acc', 'val_loss', 'val_dense_1_loss', 'val_dropout_loss', 'val_dense_1_acc']",
                                    "variable_type": "list",
                                    "variable_shape": "8"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x11cf3f790>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x11cf3f890>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11c82dc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x11cf3f890>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x11cf3f890>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x11cf3f890>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x11cf3f850>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11cf3f850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x11cefabd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11cf3f850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x11cf3f890>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.86465969, 0.69413771, 0.05506568],\n       [0.21144521, 0.49466917, 0.1505625 ],\n       [0.47016825, 0.1292024 , 0.80401759],\n       [0.50387469, 0.63183802, 0.19221844]]), array([[0.61965171, 0.82266373, 0.37809904],\n       [0.80696857, 0.54841751, 0.28498012],\n       [0.69702285, 0.42609379, 0.06874416],\n       [0.35217772, 0.67785112, 0.13895752]])], [array([[0.29023803, 0.756203  , 0.83381223, 0.5416979 ],\n       [0.5010157 , 0.96146172, 0.63277181, 0.70205705],\n       [0.8143053 , 0.71021384, 0.00839889, 0.61422148],\n       [0.19768451, 0.89841108, 0.44849266, 0.98806532]]), array([[0.9233358 , 0.20478846, 0.69256504],\n       [0.12718177, 0.77563684, 0.94648266],\n       [0.6125881 , 0.73333256, 0.79563694],\n       [0.03354728, 0.94523331, 0.02567696]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.86465969, 0.69413771, 0.05506568],\n       [0.21144521, 0.49466917, 0.1505625 ],\n       [0.47016825, 0.1292024 , 0.80401759],\n       [0.50387469, 0.63183802, 0.19221844]]), array([[0.61965171, 0.82266373, 0.37809904],\n       [0.80696857, 0.54841751, 0.28498012],\n       [0.69702285, 0.42609379, 0.06874416],\n       [0.35217772, 0.67785112, 0.13895752]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.29023803, 0.756203  , 0.83381223, 0.5416979 ],\n       [0.5010157 , 0.96146172, 0.63277181, 0.70205705],\n       [0.8143053 , 0.71021384, 0.00839889, 0.61422148],\n       [0.19768451, 0.89841108, 0.44849266, 0.98806532]]), array([[0.9233358 , 0.20478846, 0.69256504],\n       [0.12718177, 0.77563684, 0.94648266],\n       [0.6125881 , 0.73333256, 0.79563694],\n       [0.03354728, 0.94523331, 0.02567696]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 2, 'size': 4, 'loss': 0.67149377, 'dense_1_loss': 0.37108946, 'dropout_loss': 0.30040434, 'dense_1_acc': 0.5}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x11cf3f890>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.67149377, 0.37108946, 0.30040434, 0.5]",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'dense_1_acc'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "o": {
                                    "variable_value": "0.5",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x11cf3f890>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x11cf3f890>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11cf3f850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x11cf3f890>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11c6f5850>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11c82dc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11d027ed0>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_deduped_metrics_names": {
                                    "variable_value": "<bound method Model._get_deduped_metrics_names of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x11ce9bd90>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "[<keras.callbacks.LambdaCallback object at 0x11ce1af90>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11c6f5850>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11c82dc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11d027ed0>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'dense_1_loss', 'dropout_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_deduped_metrics_names": {
                                    "variable_value": "<bound method Model._get_deduped_metrics_names of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'dense_1_loss', 'dropout_loss', 'val_loss', 'val_dense_1_loss', 'val_dropout_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x11d1c1610>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x11c6f5a10>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11c82dc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x11c6f5a10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x11c6f5a10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x11c6f5a10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x11cf5c9d0>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x11cf5c9d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x11d209f50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x11cf5c9d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x11c6f5a10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.42539783, 0.06940259, 0.70981497],\n       [0.98280321, 0.55120263, 0.92976956],\n       [0.9288296 , 0.44775611, 0.48413897]]), array([[0.34366096, 0.50221919, 0.39409579],\n       [0.20991012, 0.62740317, 0.16780508],\n       [0.7212347 , 0.50851689, 0.03747724]])], [array([[0.5273249 , 0.2834142 , 0.93955055, 0.80589557],\n       [0.56587904, 0.63932667, 0.22139173, 0.80863649],\n       [0.42591463, 0.04897318, 0.15023184, 0.9449394 ]]), array([[0.81497819, 0.85335149, 0.68441645],\n       [0.30369732, 0.04090895, 0.53995583],\n       [0.29863502, 0.96223239, 0.78240748]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.42539783, 0.06940259, 0.70981497],\n       [0.98280321, 0.55120263, 0.92976956],\n       [0.9288296 , 0.44775611, 0.48413897]]), array([[0.34366096, 0.50221919, 0.39409579],\n       [0.20991012, 0.62740317, 0.16780508],\n       [0.7212347 , 0.50851689, 0.03747724]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.5273249 , 0.2834142 , 0.93955055, 0.80589557],\n       [0.56587904, 0.63932667, 0.22139173, 0.80863649],\n       [0.42591463, 0.04897318, 0.15023184, 0.9449394 ]]), array([[0.81497819, 0.85335149, 0.68441645],\n       [0.30369732, 0.04090895, 0.53995583],\n       [0.29863502, 0.96223239, 0.78240748]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 2, 'size': 3, 'loss': 0.6050993, 'dense_1_loss': 0.466216, 'dropout_loss': 0.27776667}",
                                    "variable_type": "dict",
                                    "variable_shape": "5"
                                },
                                "batch_size": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x11c6f5a10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.6050993, 0.466216, 0.27776667]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'dropout_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "o": {
                                    "variable_value": "0.19002539664506912",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x11c6f5a10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 0.38444467385609943, 'val_dense_1_loss': 0.28943197925885517, 'val_dropout_loss': 0.19002539664506912, 'loss': 0.5377910335858663, 'dense_1_loss': 0.41976839303970337, 'dropout_loss': 0.23604529102643332}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "val_outs": {
                                    "variable_value": "[0.38444467385609943, 0.28943197925885517, 0.19002539664506912]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x11c6f5a10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x11cf5c9d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x11c6f5a10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11d232f90>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11c82dc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11d027ed0>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_deduped_metrics_names": {
                                    "variable_value": "<bound method Model._get_deduped_metrics_names of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x11d1c1610>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "[<keras.callbacks.LambdaCallback object at 0x11ce1af90>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11d232f90>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11c82dc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11d027ed0>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'dense_1_loss', 'dropout_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._get_deduped_metrics_names": {
                                    "variable_value": "<bound method Model._get_deduped_metrics_names of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'dense_1_loss', 'dropout_loss', 'val_loss', 'val_dense_1_loss', 'val_dropout_loss']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x11d28b650>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x11d297d90>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11c82dc10>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x11d297d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x11d297d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x11d297d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x11d297d10>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x11d297d10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x11d001d50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x11d297d10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x11d297d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.86919442, 0.01022678, 0.78182416],\n       [0.76873898, 0.33514133, 0.12550731],\n       [0.96409235, 0.92237709, 0.49148406]]), array([[0.81294398, 0.25635629, 0.26236191],\n       [0.58152568, 0.78553664, 0.82533197],\n       [0.70569139, 0.37743695, 0.16323861]])], [array([[0.57781632, 0.65867782, 0.8322712 , 0.90312791],\n       [0.76454258, 0.88409476, 0.44953492, 0.21019419],\n       [0.24588727, 0.7728599 , 0.61537155, 0.60901902]]), array([[0.28649007, 0.41941392, 0.74844313],\n       [0.70654193, 0.15896712, 0.06032052],\n       [0.58312316, 0.50687334, 0.44537105]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.86919442, 0.01022678, 0.78182416],\n       [0.76873898, 0.33514133, 0.12550731],\n       [0.96409235, 0.92237709, 0.49148406]]), array([[0.81294398, 0.25635629, 0.26236191],\n       [0.58152568, 0.78553664, 0.82533197],\n       [0.70569139, 0.37743695, 0.16323861]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.57781632, 0.65867782, 0.8322712 , 0.90312791],\n       [0.76454258, 0.88409476, 0.44953492, 0.21019419],\n       [0.24588727, 0.7728599 , 0.61537155, 0.60901902]]), array([[0.28649007, 0.41941392, 0.74844313],\n       [0.70654193, 0.15896712, 0.06032052],\n       [0.58312316, 0.50687334, 0.44537105]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 11, 'size': 3, 'loss': 0.31752744, 'dense_1_loss': 0.22893125, 'dropout_loss': 0.1771924}",
                                    "variable_type": "dict",
                                    "variable_shape": "5"
                                },
                                "batch_size": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x11d297d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.31752744, 0.22893125, 0.1771924]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'dropout_loss'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "o": {
                                    "variable_value": "0.16674401052296162",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x11d297d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 0.3223796288172404, 'val_dense_1_loss': 0.23900761952002844, 'val_dropout_loss': 0.16674401052296162, 'loss': 0.48969362179438275, 'dense_1_loss': 0.23799744620919228, 'dropout_loss': 0.5033923648297787}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "val_outs": {
                                    "variable_value": "[0.3223796288172404, 0.23900761952002844, 0.16674401052296162]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11c82dc10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x11d297d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x11d297d10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x11d297d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "evaluate_generator",
                    "function_code": "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps,\n                       max_queue_size=10,\n                       workers=1,\n                       use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Not used if using Sequence.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n            when using process based threading\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if is_sequence:\n        steps = len(generator)\n    enqueuer = None\n\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator,\n                                       use_multiprocessing=use_multiprocessing)\n        else:\n            enqueuer = GeneratorEnqueuer(generator,\n                                         use_multiprocessing=use_multiprocessing,\n                                         wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n\n            if isinstance(x, list):\n                batch_size = len(x[0])\n            elif isinstance(x, dict):\n                batch_size = len(list(x.values())[0])\n            else:\n                batch_size = len(x)\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. '\n                                 'Batches should at least contain one item.')\n            all_outs.append(outs)\n\n            steps_done += 1\n            batch_sizes.append(batch_size)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if not isinstance(outs, list):\n        return np.average(np.asarray(all_outs),\n                          weights=batch_sizes)\n    else:\n        averages = []\n        for i in range(len(outs)):\n            averages.append(np.average([out[i] for out in all_outs],\n                                       weights=batch_sizes))\n        return averages\n",
                    "decorators": [
                        "interfaces.legacy_generator_methods_support"
                    ],
                    "docstring": "Evaluates the model on a data generator.\n\nThe generator should return the same kind of data\nas accepted by `test_on_batch`.\n\n# Arguments\n    generator: Generator yielding tuples (inputs, targets)\n        or (inputs, targets, sample_weights)\n        or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n    steps: Total number of steps (batches of samples)\n        to yield from `generator` before stopping.\n        Not used if using Sequence.\n    max_queue_size: maximum size for the generator queue\n    workers: maximum number of processes to spin up\n        when using process based threading\n    use_multiprocessing: if True, use process based threading.\n        Note that because\n        this implementation relies on multiprocessing,\n        you should not pass\n        non picklable arguments to the generator\n        as they can't be passed\n        easily to children processes.\n\n# Returns\n    Scalar test loss (if the model has a single output and no metrics)\n    or list of scalars (if the model has multiple outputs\n    and/or metrics). The attribute `model.metrics_names` will give you\n    the display labels for the scalar outputs.\n\n# Raises\n    ValueError: In case the generator yields\n        data in an invalid format.",
                    "start_line": 2175,
                    "end_line": 2288,
                    "variables": {
                        "self._make_test_function": [
                            2215
                        ],
                        "self": [
                            2260,
                            2215
                        ],
                        "steps_done": [
                            2217,
                            2243,
                            2273
                        ],
                        "wait_time": [
                            2218,
                            2239
                        ],
                        "all_outs": [
                            2281,
                            2219,
                            2286,
                            2271
                        ],
                        "batch_sizes": [
                            2274,
                            2220,
                            2282,
                            2287
                        ],
                        "is_sequence": [
                            2233,
                            2228,
                            2221,
                            2222
                        ],
                        "isinstance": [
                            2264,
                            2280,
                            2221,
                            2262
                        ],
                        "generator": [
                            2234,
                            2221,
                            2237,
                            2229
                        ],
                        "Sequence": [
                            2221
                        ],
                        "use_multiprocessing": [
                            2235,
                            2238,
                            2222
                        ],
                        "workers": [
                            2240,
                            2222
                        ],
                        "warnings.warn": [
                            2223
                        ],
                        "warnings": [
                            2223
                        ],
                        "UserWarning": [
                            2224
                        ],
                        "steps": [
                            2243,
                            2229
                        ],
                        "len": [
                            2250,
                            2253,
                            2285,
                            2229,
                            2263,
                            2265,
                            2267
                        ],
                        "enqueuer": [
                            2240,
                            2241,
                            2277,
                            2278,
                            2230,
                            2234,
                            2237
                        ],
                        "OrderedEnqueuer": [
                            2234
                        ],
                        "GeneratorEnqueuer": [
                            2237
                        ],
                        "enqueuer.start": [
                            2240
                        ],
                        "max_queue_size": [
                            2240
                        ],
                        "output_generator": [
                            2241,
                            2244
                        ],
                        "enqueuer.get": [
                            2241
                        ],
                        "generator_output": [
                            2244,
                            2245,
                            2249,
                            2250,
                            2251,
                            2253,
                            2254,
                            2259
                        ],
                        "next": [
                            2244
                        ],
                        "hasattr": [
                            2245
                        ],
                        "ValueError": [
                            2256,
                            2269,
                            2246
                        ],
                        "str": [
                            2249,
                            2259
                        ],
                        "x": [
                            2251,
                            2254,
                            2260,
                            2262,
                            2263,
                            2264,
                            2265,
                            2267
                        ],
                        "y": [
                            2251,
                            2260,
                            2254
                        ],
                        "sample_weight": [
                            2260,
                            2252,
                            2254
                        ],
                        "outs": [
                            2280,
                            2260,
                            2285,
                            2271
                        ],
                        "self.test_on_batch": [
                            2260
                        ],
                        "list": [
                            2280,
                            2265,
                            2262
                        ],
                        "batch_size": [
                            2274,
                            2263,
                            2265,
                            2267,
                            2268
                        ],
                        "dict": [
                            2264
                        ],
                        "x.values": [
                            2265
                        ],
                        "all_outs.append": [
                            2271
                        ],
                        "batch_sizes.append": [
                            2274
                        ],
                        "enqueuer.stop": [
                            2278
                        ],
                        "np.average": [
                            2281,
                            2286
                        ],
                        "np": [
                            2281,
                            2286
                        ],
                        "np.asarray": [
                            2281
                        ],
                        "averages": [
                            2288,
                            2284,
                            2286
                        ],
                        "i": [
                            2285,
                            2286
                        ],
                        "range": [
                            2285
                        ],
                        "averages.append": [
                            2286
                        ],
                        "out": [
                            2286
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            2175
                        ],
                        "interfaces": [
                            2175
                        ]
                    },
                    "filtered_variables": {
                        "self._make_test_function": [
                            2215
                        ],
                        "self": [
                            2260,
                            2215
                        ],
                        "steps_done": [
                            2217,
                            2243,
                            2273
                        ],
                        "wait_time": [
                            2218,
                            2239
                        ],
                        "all_outs": [
                            2281,
                            2219,
                            2286,
                            2271
                        ],
                        "batch_sizes": [
                            2274,
                            2220,
                            2282,
                            2287
                        ],
                        "is_sequence": [
                            2233,
                            2228,
                            2221,
                            2222
                        ],
                        "generator": [
                            2234,
                            2221,
                            2237,
                            2229
                        ],
                        "Sequence": [
                            2221
                        ],
                        "use_multiprocessing": [
                            2235,
                            2238,
                            2222
                        ],
                        "workers": [
                            2240,
                            2222
                        ],
                        "warnings.warn": [
                            2223
                        ],
                        "warnings": [
                            2223
                        ],
                        "steps": [
                            2243,
                            2229
                        ],
                        "enqueuer": [
                            2240,
                            2241,
                            2277,
                            2278,
                            2230,
                            2234,
                            2237
                        ],
                        "OrderedEnqueuer": [
                            2234
                        ],
                        "GeneratorEnqueuer": [
                            2237
                        ],
                        "enqueuer.start": [
                            2240
                        ],
                        "max_queue_size": [
                            2240
                        ],
                        "output_generator": [
                            2241,
                            2244
                        ],
                        "enqueuer.get": [
                            2241
                        ],
                        "generator_output": [
                            2244,
                            2245,
                            2249,
                            2250,
                            2251,
                            2253,
                            2254,
                            2259
                        ],
                        "x": [
                            2251,
                            2254,
                            2260,
                            2262,
                            2263,
                            2264,
                            2265,
                            2267
                        ],
                        "y": [
                            2251,
                            2260,
                            2254
                        ],
                        "sample_weight": [
                            2260,
                            2252,
                            2254
                        ],
                        "outs": [
                            2280,
                            2260,
                            2285,
                            2271
                        ],
                        "self.test_on_batch": [
                            2260
                        ],
                        "batch_size": [
                            2274,
                            2263,
                            2265,
                            2267,
                            2268
                        ],
                        "x.values": [
                            2265
                        ],
                        "all_outs.append": [
                            2271
                        ],
                        "batch_sizes.append": [
                            2274
                        ],
                        "enqueuer.stop": [
                            2278
                        ],
                        "np.average": [
                            2281,
                            2286
                        ],
                        "np": [
                            2281,
                            2286
                        ],
                        "np.asarray": [
                            2281
                        ],
                        "averages": [
                            2288,
                            2284,
                            2286
                        ],
                        "i": [
                            2285,
                            2286
                        ],
                        "averages.append": [
                            2286
                        ],
                        "out": [
                            2286
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            2175
                        ],
                        "interfaces": [
                            2175
                        ]
                    },
                    "diff_line_number": 2176,
                    "class_data": {
                        "signature": "class Model(Container)",
                        "docstring": "The `Model` class adds training & evaluation routines to a `Container`.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def compile(self, optimizer, loss, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name + '\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"' + name + '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss=' + str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n    if loss_weights is None:\n        loss_weights_list = [1.0 for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.0))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss_weights=' + str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' + str(loss_weights) + ' - expected a list of dicts.')\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError('When passing a list as `target_tensors`, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed target_tensors=' + str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n            _target_tensors = []\n            for name in self.output_names:\n                _target_tensors.append(target_tensors.get(name, None))\n            target_tensors = _target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self.internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in sample_weight_mode dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name + '\" missing from sample_weight_modes dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed sample_weight_mode=' + str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            elif sample_weight_mode == 'temporal':\n                sample_weights.append(K.placeholder(ndim=2, name=name + '_sample_weights'))\n                sample_weight_modes.append('temporal')\n            else:\n                sample_weights.append(K.placeholder(ndim=1, name=name + '_sample_weights'))\n                sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n    self.metrics = metrics\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled because it has no loss to optimize.')\n            else:\n                total_loss = 0.0\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n\n    def append_metric(layer_index, metric_name, metric_tensor):\n        \"\"\"Helper function used in loop below.\"\"\"\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[layer_index] + '_' + metric_name\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_tensor)\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n                for metric in metrics:\n                    if metric == 'accuracy' or metric == 'acc':\n                        output_shape = self.internal_output_shapes[i]\n                        if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                            acc_fn = metrics_module.binary_accuracy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            acc_fn = metrics_module.sparse_categorical_accuracy\n                        else:\n                            acc_fn = metrics_module.categorical_accuracy\n                        weighted_metric_fn = _weighted_masked_objective(acc_fn)\n                        metric_name = metric_name_prefix + 'acc'\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + metric_fn.__name__\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n                    append_metric(i, metric_name, metric_result)\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n    self._function_kwargs = kwargs\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                            "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n    if len(self.trainable_weights) != len(self._collected_trainable_weights):\n        warnings.warn(UserWarning('Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?'))",
                            "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)\n            updates = self.updates + training_updates\n            self.train_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)",
                            "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        self.test_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates, name='test_function', **self._function_kwargs)",
                            "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)",
                            "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name + ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have a defined shape, or ' + steps_name + ' should be specified.')\n    return num_samples",
                            "def _fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' % (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` when doing step-wise training, i.e. `steps_per_epoch` must be set.')\n    num_train_samples = self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n    self.history = cbks.History()\n    callbacks = [cbks.BaseLogger()] + (callbacks or []) + [self.history]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        callbacks += [cbks.ProgbarLogger(count_mode)]\n    callbacks = cbks.CallbackList(callbacks)\n    out_labels = out_labels or []\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'batch_size': batch_size, 'epochs': epochs, 'steps': steps_per_epoch, 'samples': num_train_samples, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics or []})\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n    for epoch in range(initial_epoch, epochs):\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, steps=validation_steps, verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. If using HDF5 input data, pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n                if batch_index == len(batches) - 1:\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                            "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    if steps is not None:\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0) for i in range(len(unconcatenated_outs))]\n    else:\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                            "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs * len(batch_ids)\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                            "def _standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_batch_axis=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.')\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False, exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight, self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight, self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode) for ref, sw, cw, mode in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y, self._feed_loss_fns, self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples')\n    return (x, y, sample_weights)",
                            "def _get_deduped_metrics_names(self):\n    out_labels = self.metrics_names\n    deduped_out_labels = []\n    for i, label in enumerate(out_labels):\n        new_label = label\n        if out_labels.count(label) > 1:\n            dup_idx = out_labels[:i].count(label)\n            new_label += '_' + str(dup_idx + 1)\n        deduped_out_labels.append(new_label)\n    return deduped_out_labels",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and (steps_per_epoch is None):\n        raise ValueError('If fitting from data tensors, you should specify the `steps_per_epoch` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, check_batch_axis=False, batch_size=batch_size)\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, it must contain 2 (x_val, y_val) or 3 (x_val, y_val, val_sample_weights) items, however it contains %d items' % len(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, sample_weight=val_sample_weight, check_batch_axis=False, batch_size=batch_size)\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_split and 0.0 < validation_split < 1.0:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1.0 - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1.0 - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (_slice_arrays(sample_weights, 0, split_at), _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = [0.0]\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n    out_labels = self._get_deduped_metrics_names()\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n    return self._fit_loop(f, ins, out_labels=out_labels, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, callback_metrics=callback_metrics, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            The default `None` is equal to the number of samples in\n            your dataset divided by the batch size.\n\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and (steps is None):\n        raise ValueError('If evaluating from data tensors, you should specify the `steps` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, check_batch_axis=False, batch_size=batch_size)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def predict(self, x, batch_size=None, verbose=0, steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, you should specify the `steps` argument.')\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples. Batch size: ' + str(batch_size) + '.')\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def train_on_batch(self, x, y, sample_weight=None, class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, check_batch_axis=True)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, check_batch_axis=True)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Fits the model on data yielded batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence` (`keras.utils.Sequence`)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single batch.\n            Therefore, all arrays in this tuple must have the same length (equal\n            to the size of this batch). Different batches may have different sizes.\n            For example, the last batch of the epoch is commonly smaller than the\n            others, if the size of the dataset is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size. Not used if using `Sequence`.\n        epochs: Integer, total number of iterations on the data.\n        verbose: Verbosity mode, 0, 1, or 2.\n        callbacks: List of callbacks to be called during training.\n        validation_data: This can be either\n            - a generator for the validation data\n            - a tuple (inputs, targets)\n            - a tuple (inputs, targets, sample_weights).\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        class_weight: Dictionary mapping class indices to a weight\n            for the class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1.\n        use_multiprocessing: Boolean. If True, use process based threading.\n            If unspecified, `workers` will default to False.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (keras.utils.Sequence).\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n\n    # Returns\n        A `History` object.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                f = open(path)\n                for line in f:\n                    # create numpy arrays of input data\n                    # and labels, from each line in the file\n                    x1, x2, y = process_line(line)\n                    yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n                f.close()\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    wait_time = 0.01\n    epoch = initial_epoch\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n    val_gen = hasattr(validation_data, 'next') or hasattr(validation_data, '__next__') or isinstance(validation_data, Sequence)\n    if val_gen and (not validation_steps):\n        raise ValueError('When using a generator for validation data, you must specify a value for `validation_steps`.')\n    out_labels = self._get_deduped_metrics_names()\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    self.history = cbks.History()\n    callbacks = [cbks.BaseLogger()] + (callbacks or []) + [self.history]\n    if verbose:\n        callbacks += [cbks.ProgbarLogger(count_mode='steps')]\n    callbacks = cbks.CallbackList(callbacks)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'epochs': epochs, 'steps': steps_per_epoch, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics})\n    callbacks.on_train_begin()\n    if do_validation and (not val_gen):\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('`validation_data` should be a tuple `(val_x, val_y, val_sample_weight)` or `(val_x, val_y)`. Found: ' + str(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, val_sample_weight)\n        val_data = val_x + val_y + val_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_data += [0.0]\n        for cbk in callbacks:\n            cbk.validation_data = val_data\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if is_sequence:\n        steps_per_epoch = len(generator)\n    enqueuer = None\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)\n        else:\n            enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n        callback_model.stop_training = False\n        while epoch < epochs:\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                batch_logs = {}\n                if isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = self.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                epoch_logs = {}\n                batch_index += 1\n                steps_done += 1\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(validation_data, validation_steps, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing)\n                    else:\n                        val_outs = self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n                if callback_model.stop_training:\n                    break\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    callbacks.on_train_end()\n    return self.history",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Not used if using Sequence.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n            when using process based threading\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if is_sequence:\n        steps = len(generator)\n    enqueuer = None\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n        else:\n            enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if isinstance(x, list):\n                batch_size = len(x[0])\n            elif isinstance(x, dict):\n                batch_size = len(list(x.values())[0])\n            else:\n                batch_size = len(x)\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. Batches should at least contain one item.')\n            all_outs.append(outs)\n            steps_done += 1\n            batch_sizes.append(batch_size)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if not isinstance(outs, list):\n        return np.average(np.asarray(all_outs), weights=batch_sizes)\n    else:\n        averages = []\n        for i in range(len(outs)):\n            averages.append(np.average([out[i] for out in all_outs], weights=batch_sizes))\n        return averages",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n                or an instance of Sequence (keras.utils.Sequence)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Not used if using Sequence.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Maximum number of processes to spin up\n            when using process based threading\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if is_sequence:\n        steps = len(generator)\n    enqueuer = None\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n        else:\n            enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n            else:\n                x = generator_output\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                            "def append_metric(layer_index, metric_name, metric_tensor):\n    \"\"\"Helper function used in loop below.\"\"\"\n    if len(self.output_names) > 1:\n        metric_name = self.output_names[layer_index] + '_' + metric_name\n    self.metrics_names.append(metric_name)\n    self.metrics_tensors.append(metric_tensor)",
                            "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n    for metric in metrics:\n        if metric == 'accuracy' or metric == 'acc':\n            output_shape = self.internal_output_shapes[i]\n            if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                acc_fn = metrics_module.binary_accuracy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                acc_fn = metrics_module.sparse_categorical_accuracy\n            else:\n                acc_fn = metrics_module.categorical_accuracy\n            weighted_metric_fn = _weighted_masked_objective(acc_fn)\n            metric_name = metric_name_prefix + 'acc'\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + metric_fn.__name__\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n        append_metric(i, metric_name, metric_result)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "compile(self, optimizer, loss, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "_check_trainable_weights_consistency(self)",
                            "_make_train_function(self)",
                            "_make_test_function(self)",
                            "_make_predict_function(self)",
                            "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                            "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                            "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                            "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                            "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_batch_axis=True, batch_size=None)",
                            "_get_deduped_metrics_names(self)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                            "predict(self, x, batch_size=None, verbose=0, steps=None)",
                            "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_on_batch(self, x)",
                            "fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False)",
                            "predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "append_metric(layer_index, metric_name, metric_tensor)",
                            "handle_metrics(metrics, weights=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11ba99b90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11b5a4910>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11ba99b90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.43478924, 0.3603548, 0.14886889], [0.36705336, 0.30667576, 0.12075517], [0.63594234, 0.5603654, 0.15115392], [0.6047348, 0.47430292, 0.26086375], [0.43330535, 0.34182936, 0.18295199], [0.5021579, 0.39108145, 0.22215289], [1.0183613, 0.8889669, 0.25878882], [0.5460498, 0.48752925, 0.117041096], [0.62268525, 0.53240526, 0.18055998], [0.4988863, 0.38733536, 0.22310188], [0.54901236, 0.49958658, 0.09885156], [0.7405246, 0.64587295, 0.18930332]]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11b5a4910>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x11bfef2d0>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x11bfef2d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x11c01f050>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x11bfef2d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.06364211, 0.91873827, 0.29246766],\n       [0.56317219, 0.46401304, 0.66592638],\n       [0.94615394, 0.31155016, 0.35879793],\n       [0.33056712, 0.27694341, 0.72402732]]), array([[0.55691766, 0.85325085, 0.63083606],\n       [0.03024192, 0.00725367, 0.49444938],\n       [0.06758234, 0.55498629, 0.2178433 ],\n       [0.63620866, 0.08136425, 0.28565557]])], [array([[0.23063886, 0.58904583, 0.91727718, 0.88265869],\n       [0.37852092, 0.49005522, 0.76551115, 0.99076109],\n       [0.17797607, 0.83438086, 0.13388972, 0.49978166],\n       [0.49840963, 0.73446532, 0.85878963, 0.91817892]]), array([[0.65050816, 0.55332738, 0.22849416],\n       [0.33393808, 0.52959248, 0.08400825],\n       [0.9231632 , 0.11809758, 0.70253357],\n       [0.98770937, 0.06755489, 0.72832728]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.06364211, 0.91873827, 0.29246766],\n       [0.56317219, 0.46401304, 0.66592638],\n       [0.94615394, 0.31155016, 0.35879793],\n       [0.33056712, 0.27694341, 0.72402732]]), array([[0.55691766, 0.85325085, 0.63083606],\n       [0.03024192, 0.00725367, 0.49444938],\n       [0.06758234, 0.55498629, 0.2178433 ],\n       [0.63620866, 0.08136425, 0.28565557]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.23063886, 0.58904583, 0.91727718, 0.88265869],\n       [0.37852092, 0.49005522, 0.76551115, 0.99076109],\n       [0.17797607, 0.83438086, 0.13388972, 0.49978166],\n       [0.49840963, 0.73446532, 0.85878963, 0.91817892]]), array([[0.65050816, 0.55332738, 0.22849416],\n       [0.33393808, 0.52959248, 0.08400825],\n       [0.9231632 , 0.11809758, 0.70253357],\n       [0.98770937, 0.06755489, 0.72832728]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.7405246, 0.64587295, 0.18930332]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x11bfdd9b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x11bfe0c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x11bfef2d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.579458549618721, 0.48969216644763947, 0.17953277317186198]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x11bfd5e10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11ba99b90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11b5a4910>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11ba99b90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.42760837, 0.31867683, 0.21786308], [0.50338036, 0.45801693, 0.09072681], [0.59970343, 0.5372016, 0.12500376], [0.563921, 0.50100714, 0.12582764], [0.56526715, 0.48459587, 0.16134252], [0.34898034, 0.25988337, 0.17819394], [0.47834978, 0.43251222, 0.09167512], [0.606823, 0.54974127, 0.114163525], [0.60106426, 0.5163286, 0.16947135], [0.698393, 0.62181544, 0.15315509], [0.82799304, 0.7430424, 0.16990122], [0.44529063, 0.3521268, 0.18632767]]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11b5a4910>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x11c0115d0>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x11c0115d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x11bf91ed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x11c0115d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.36083389, 0.38765095, 0.56269239],\n       [0.45901095, 0.34889794, 0.9665299 ],\n       [0.01075463, 0.39099198, 0.40643696],\n       [0.69836097, 0.06273113, 0.35578256]]), array([[0.07932968, 0.39126057, 0.48438273],\n       [0.77697142, 0.84237858, 0.61697644],\n       [0.445441  , 0.27504658, 0.30226733],\n       [0.77115375, 0.01027664, 0.69404553]])], [array([[0.92522013, 0.41367367, 0.86234565, 0.22744539],\n       [0.19219494, 0.79482556, 0.00394997, 0.88653457],\n       [0.79087008, 0.01601463, 0.91393423, 0.05520715],\n       [0.23012612, 0.24273538, 0.89487843, 0.7183912 ]]), array([[0.70853359, 0.61946204, 0.5368384 ],\n       [0.57399383, 0.11935923, 0.17475318],\n       [0.43620264, 0.49245417, 0.51516894],\n       [0.66163813, 0.96945879, 0.72544659]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.36083389, 0.38765095, 0.56269239],\n       [0.45901095, 0.34889794, 0.9665299 ],\n       [0.01075463, 0.39099198, 0.40643696],\n       [0.69836097, 0.06273113, 0.35578256]]), array([[0.07932968, 0.39126057, 0.48438273],\n       [0.77697142, 0.84237858, 0.61697644],\n       [0.445441  , 0.27504658, 0.30226733],\n       [0.77115375, 0.01027664, 0.69404553]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.92522013, 0.41367367, 0.86234565, 0.22744539],\n       [0.19219494, 0.79482556, 0.00394997, 0.88653457],\n       [0.79087008, 0.01601463, 0.91393423, 0.05520715],\n       [0.23012612, 0.24273538, 0.89487843, 0.7183912 ]]), array([[0.70853359, 0.61946204, 0.5368384 ],\n       [0.57399383, 0.11935923, 0.17475318],\n       [0.43620264, 0.49245417, 0.51516894],\n       [0.66163813, 0.96945879, 0.72544659]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.44529063, 0.3521268, 0.18632767]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c00c0a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x11bfe03c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x11c0115d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.5555645277102789, 0.4812457039952278, 0.14863764308393002]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x11bfee410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11ba99b90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11b5a4910>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11ba99b90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.5687295, 0.5173009, 0.102857225], [0.39400935, 0.32764, 0.13273871], [0.59582067, 0.52718085, 0.1372796], [0.5276178, 0.46300814, 0.12921934], [0.45241767, 0.37969515, 0.14544505], [0.41690737, 0.33350378, 0.16680719], [0.3705487, 0.29349744, 0.15410249], [0.34512553, 0.28307462, 0.12410181], [0.36788353, 0.27358505, 0.18859695], [0.6746122, 0.53292906, 0.28336632], [0.575097, 0.5052192, 0.1397556], [0.46868575, 0.40399808, 0.12937537]]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11b5a4910>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x11c009610>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x11c009610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x11bf91ed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x11c009610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.26147993, 0.17301679, 0.8085558 ],\n       [0.69502782, 0.83632212, 0.95276091],\n       [0.13878838, 0.96491646, 0.27787984],\n       [0.56362407, 0.54460241, 0.8762624 ]]), array([[0.70747155, 0.88468352, 0.76816983],\n       [0.20110856, 0.33570945, 0.38084348],\n       [0.3733988 , 0.44794975, 0.0152938 ],\n       [0.44902867, 0.83363081, 0.23411107]])], [array([[0.95582741, 0.14668835, 0.72818807, 0.44186293],\n       [0.58645602, 0.43869913, 0.32006215, 0.52971702],\n       [0.73079337, 0.9298033 , 0.21448508, 0.89365366],\n       [0.77089859, 0.78623926, 0.25325146, 0.50235676]]), array([[0.23569209, 0.86071573, 0.48066275],\n       [0.62897586, 0.69624412, 0.00402209],\n       [0.61390752, 0.69618839, 0.81998754],\n       [0.50184078, 0.82355343, 0.08661787]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.26147993, 0.17301679, 0.8085558 ],\n       [0.69502782, 0.83632212, 0.95276091],\n       [0.13878838, 0.96491646, 0.27787984],\n       [0.56362407, 0.54460241, 0.8762624 ]]), array([[0.70747155, 0.88468352, 0.76816983],\n       [0.20110856, 0.33570945, 0.38084348],\n       [0.3733988 , 0.44794975, 0.0152938 ],\n       [0.44902867, 0.83363081, 0.23411107]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.95582741, 0.14668835, 0.72818807, 0.44186293],\n       [0.58645602, 0.43869913, 0.32006215, 0.52971702],\n       [0.73079337, 0.9298033 , 0.21448508, 0.89365366],\n       [0.77089859, 0.78623926, 0.25325146, 0.50235676]]), array([[0.23569209, 0.86071573, 0.48066275],\n       [0.62897586, 0.69624412, 0.00402209],\n       [0.61390752, 0.69618839, 0.81998754],\n       [0.50184078, 0.82355343, 0.08661787]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.46868575, 0.40399808, 0.12937537]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x11bffde10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x11bfe0460>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x11c009610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.4797879283626874, 0.403386024137338, 0.15280380472540855]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c01abe0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11ba99b90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11b5a4910>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11ba99b90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.35331696, 0.2818654, 0.14290313], [0.56447095, 0.42699766, 0.2749466], [0.3624668, 0.2726799, 0.17957386], [0.4842219, 0.42231777, 0.123808265], [0.64714706, 0.57748216, 0.13932978], [0.71243846, 0.62853074, 0.16781543], [0.59757835, 0.47989878, 0.23535913], [0.4440346, 0.39090928, 0.10625062], [0.41221142, 0.35250187, 0.11941911], [0.463804, 0.35825267, 0.2111027], [0.639226, 0.53829163, 0.20186879], [0.40733877, 0.29351246, 0.22765261]]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11b5a4910>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x11bfd6d90>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x11bfd6d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x11bf91ed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x11bfd6d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.27352922, 0.05286283, 0.94042757],\n       [0.50106924, 0.00787138, 0.7631181 ],\n       [0.4964912 , 0.59354997, 0.45218237],\n       [0.65130581, 0.55179036, 0.94870663]]), array([[0.46071967, 0.81494063, 0.86163634],\n       [0.54036698, 0.90726489, 0.15434195],\n       [0.83535232, 0.30408043, 0.58290243],\n       [0.60753669, 0.35961765, 0.91108031]])], [array([[0.66826146, 0.97608233, 0.04107576, 0.57433553],\n       [0.0958966 , 0.62901516, 0.85205499, 0.62940714],\n       [0.5236998 , 0.14071842, 0.55479905, 0.10277081],\n       [0.05918456, 0.84456956, 0.19579008, 0.37069752]]), array([[0.17142197, 0.67535278, 0.37783605],\n       [0.92138052, 0.08646618, 0.57832576],\n       [0.13300276, 0.00469222, 0.41412632],\n       [0.76746797, 0.16250712, 0.06249179]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.27352922, 0.05286283, 0.94042757],\n       [0.50106924, 0.00787138, 0.7631181 ],\n       [0.4964912 , 0.59354997, 0.45218237],\n       [0.65130581, 0.55179036, 0.94870663]]), array([[0.46071967, 0.81494063, 0.86163634],\n       [0.54036698, 0.90726489, 0.15434195],\n       [0.83535232, 0.30408043, 0.58290243],\n       [0.60753669, 0.35961765, 0.91108031]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.66826146, 0.97608233, 0.04107576, 0.57433553],\n       [0.0958966 , 0.62901516, 0.85205499, 0.62940714],\n       [0.5236998 , 0.14071842, 0.55479905, 0.10277081],\n       [0.05918456, 0.84456956, 0.19579008, 0.37069752]]), array([[0.17142197, 0.67535278, 0.37783605],\n       [0.92138052, 0.08646618, 0.57832576],\n       [0.13300276, 0.00469222, 0.41412632],\n       [0.76746797, 0.16250712, 0.06249179]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.40733877, 0.29351246, 0.22765261]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x11bfee8c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c012fa0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x11bfd6d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.5073546096682549, 0.4186033606529236, 0.17750250237683454]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x11bff3e60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11ba99b90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11b5a4910>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11ba99b90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.54241234, 0.4930701, 0.09868454], [0.47300375, 0.39212087, 0.16176575], [0.4707186, 0.33822674, 0.2649837], [0.46940285, 0.40136892, 0.13606787], [0.44746423, 0.34941527, 0.1960979], [0.3882001, 0.3180464, 0.14030746], [0.31223997, 0.2572948, 0.10989034], [0.41702616, 0.29415566, 0.245741], [0.23511258, 0.17626278, 0.11769958], [0.40851876, 0.32307017, 0.17089717], [0.38101262, 0.30554953, 0.15092616], [0.5048729, 0.4010499, 0.20764607]]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x11b5a4910>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x11c011650>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x11c011650>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x11bf91ed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x11c011650>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.9990801 , 0.99089342, 0.65337513],\n       [0.47150476, 0.69910774, 0.23104381],\n       [0.28272419, 0.43185839, 0.82473332],\n       [0.84341601, 0.22484338, 0.40699854]]), array([[0.52579673, 0.06685922, 0.41067536],\n       [0.26885491, 0.61506655, 0.23072547],\n       [0.49622586, 0.1570849 , 0.29379607],\n       [0.40141406, 0.34245804, 0.09743459]])], [array([[0.70025432, 0.81802171, 0.18588056, 0.54044199],\n       [0.03001231, 0.20897283, 0.57967774, 0.69582878],\n       [0.72342018, 0.23802979, 0.66508853, 0.11986185],\n       [0.8441385 , 0.54075204, 0.36440169, 0.08842968]]), array([[0.48364699, 0.97565138, 0.25092466],\n       [0.08489106, 0.90180582, 0.84889089],\n       [0.82998891, 0.8734955 , 0.09682442],\n       [0.3816458 , 0.26804943, 0.78372545]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.9990801 , 0.99089342, 0.65337513],\n       [0.47150476, 0.69910774, 0.23104381],\n       [0.28272419, 0.43185839, 0.82473332],\n       [0.84341601, 0.22484338, 0.40699854]]), array([[0.52579673, 0.06685922, 0.41067536],\n       [0.26885491, 0.61506655, 0.23072547],\n       [0.49622586, 0.1570849 , 0.29379607],\n       [0.40141406, 0.34245804, 0.09743459]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.70025432, 0.81802171, 0.18588056, 0.54044199],\n       [0.03001231, 0.20897283, 0.57967774, 0.69582878],\n       [0.72342018, 0.23802979, 0.66508853, 0.11986185],\n       [0.8441385 , 0.54075204, 0.36440169, 0.08842968]]), array([[0.48364699, 0.97565138, 0.25092466],\n       [0.08489106, 0.90180582, 0.84889089],\n       [0.82998891, 0.8734955 , 0.09682442],\n       [0.3816458 , 0.26804943, 0.78372545]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.5048729, 0.4010499, 0.20764607]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11ba99b90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c0009b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x11bfd59b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x11c011650>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.4208320726950963, 0.33746926113963127, 0.16672562869886556]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x11bff38c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.51460606, 0.3849615, 0.25928915], [0.5342891, 0.44016582, 0.18824658], [0.88040006, 0.7941537, 0.17249277]]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x124f49d90>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f49d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x124ee3e50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f49d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.96146394, 0.99372731, 0.79684975],\n       [0.45218007, 0.76953606, 0.64706103],\n       [0.86737985, 0.15775621, 0.18729718],\n       [0.81902761, 0.76327241, 0.20678424]]), array([[0.25034081, 0.77157018, 0.52979288],\n       [0.18184095, 0.8354398 , 0.01280039],\n       [0.30444513, 0.91730204, 0.63976126],\n       [0.83455754, 0.37990328, 0.56047037]])], [array([[0.30723748, 0.72631748, 0.2011939 , 0.21722662],\n       [0.96057463, 0.90294217, 0.95512905, 0.29157277],\n       [0.26662318, 0.27975269, 0.65548605, 0.65835115],\n       [0.67208423, 0.61651168, 0.43783614, 0.35466062]]), array([[0.03865979, 0.13087694, 0.31513569],\n       [0.73073398, 0.29913987, 0.17835878],\n       [0.623021  , 0.04472638, 0.64026021],\n       [0.82789671, 0.66915784, 0.48539402]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.96146394, 0.99372731, 0.79684975],\n       [0.45218007, 0.76953606, 0.64706103],\n       [0.86737985, 0.15775621, 0.18729718],\n       [0.81902761, 0.76327241, 0.20678424]]), array([[0.25034081, 0.77157018, 0.52979288],\n       [0.18184095, 0.8354398 , 0.01280039],\n       [0.30444513, 0.91730204, 0.63976126],\n       [0.83455754, 0.37990328, 0.56047037]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.30723748, 0.72631748, 0.2011939 , 0.21722662],\n       [0.96057463, 0.90294217, 0.95512905, 0.29157277],\n       [0.26662318, 0.27975269, 0.65548605, 0.65835115],\n       [0.67208423, 0.61651168, 0.43783614, 0.35466062]]), array([[0.03865979, 0.13087694, 0.31513569],\n       [0.73073398, 0.29913987, 0.17835878],\n       [0.623021  , 0.04472638, 0.64026021],\n       [0.82789671, 0.66915784, 0.48539402]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.88040006, 0.7941537, 0.17249277]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f596e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f74d20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f49d90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.6430984139442444, 0.5397603313128153, 0.20667616526285806]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f6b3c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.41814446, 0.31136954, 0.21354982], [0.37811947, 0.31324515, 0.12974866], [0.56555074, 0.4966114, 0.13787872]]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x124f64dd0>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f64dd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x124ee3e50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f64dd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.62081672, 0.97946055, 0.04748819],\n       [0.35486837, 0.94368316, 0.92844045],\n       [0.34013291, 0.98202233, 0.09960833],\n       [0.13110365, 0.85809917, 0.08334769]]), array([[0.33786115, 0.91961005, 0.35147082],\n       [0.50552644, 0.46063685, 0.04446071],\n       [0.88301209, 0.39364015, 0.87464933],\n       [0.78210012, 0.27913415, 0.01797512]])], [array([[0.29502771, 0.6929166 , 0.97703282, 0.06258885],\n       [0.81035054, 0.05275316, 0.95007733, 0.22875001],\n       [0.91961647, 0.18520139, 0.77468971, 0.22455342],\n       [0.97078611, 0.3492102 , 0.48814113, 0.25692342]]), array([[0.75707145, 0.32520799, 0.35542195],\n       [0.71044147, 0.64244014, 0.00120623],\n       [0.78665181, 0.3728057 , 0.18301016],\n       [0.57883694, 0.07883886, 0.71010674]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.62081672, 0.97946055, 0.04748819],\n       [0.35486837, 0.94368316, 0.92844045],\n       [0.34013291, 0.98202233, 0.09960833],\n       [0.13110365, 0.85809917, 0.08334769]]), array([[0.33786115, 0.91961005, 0.35147082],\n       [0.50552644, 0.46063685, 0.04446071],\n       [0.88301209, 0.39364015, 0.87464933],\n       [0.78210012, 0.27913415, 0.01797512]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.29502771, 0.6929166 , 0.97703282, 0.06258885],\n       [0.81035054, 0.05275316, 0.95007733, 0.22875001],\n       [0.91961647, 0.18520139, 0.77468971, 0.22455342],\n       [0.97078611, 0.3492102 , 0.48814113, 0.25692342]]), array([[0.75707145, 0.32520799, 0.35542195],\n       [0.71044147, 0.64244014, 0.00120623],\n       [0.78665181, 0.3728057 , 0.18301016],\n       [0.57883694, 0.07883886, 0.71010674]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.56555074, 0.4966114, 0.13787872]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f12d20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f1e0a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f64dd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.4539382259051005, 0.3737420241038005, 0.16039239863554636]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f32960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.6615312, 0.55994105, 0.20318037], [0.70298594, 0.6377227, 0.1305265], [0.8069262, 0.7068294, 0.20019352]]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x124f384d0>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f384d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x124ee3e50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f384d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.35897088, 0.9360801 , 0.16099434],\n       [0.76461903, 0.29433911, 0.64933723],\n       [0.41378191, 0.9871747 , 0.79384352],\n       [0.31321491, 0.63166353, 0.98299989]]), array([[0.85185071, 0.02458488, 0.45512674],\n       [0.08087269, 0.78443682, 0.60817451],\n       [0.54444496, 0.08947701, 0.11142159],\n       [0.61371193, 0.8669396 , 0.98550664]])], [array([[0.1012147 , 0.87112552, 0.81188348, 0.9189506 ],\n       [0.11021396, 0.70334452, 0.59977335, 0.9334383 ],\n       [0.96037323, 0.24305981, 0.19659822, 0.3692798 ],\n       [0.29452367, 0.22593226, 0.13492917, 0.39008849]]), array([[7.54950505e-01, 4.96348520e-01, 9.76960050e-01],\n       [2.78072768e-01, 2.47528517e-02, 2.99230677e-01],\n       [3.30535599e-04, 9.70796974e-01, 1.53136459e-01],\n       [7.58986097e-01, 6.34289780e-01, 7.93538356e-01]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.35897088, 0.9360801 , 0.16099434],\n       [0.76461903, 0.29433911, 0.64933723],\n       [0.41378191, 0.9871747 , 0.79384352],\n       [0.31321491, 0.63166353, 0.98299989]]), array([[0.85185071, 0.02458488, 0.45512674],\n       [0.08087269, 0.78443682, 0.60817451],\n       [0.54444496, 0.08947701, 0.11142159],\n       [0.61371193, 0.8669396 , 0.98550664]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.1012147 , 0.87112552, 0.81188348, 0.9189506 ],\n       [0.11021396, 0.70334452, 0.59977335, 0.9334383 ],\n       [0.96037323, 0.24305981, 0.19659822, 0.3692798 ],\n       [0.29452367, 0.22593226, 0.13492917, 0.39008849]]), array([[7.54950505e-01, 4.96348520e-01, 9.76960050e-01],\n       [2.78072768e-01, 2.47528517e-02, 2.99230677e-01],\n       [3.30535599e-04, 9.70796974e-01, 1.53136459e-01],\n       [7.58986097e-01, 6.34289780e-01, 7.93538356e-01]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.8069262, 0.7068294, 0.20019352]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f05b40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f24910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f384d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.7238144477208456, 0.6348310510317484, 0.1779667983452479]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f5e5f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.6461084, 0.5464712, 0.19927436], [0.64947146, 0.5144756, 0.2699918], [0.39718083, 0.31797406, 0.15841351]]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x124f2e050>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f2e050>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x124ee3e50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f2e050>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.16118158, 0.0934259 , 0.59920108],\n       [0.91053504, 0.02995439, 0.90902718],\n       [0.23930188, 0.56711055, 0.97887156],\n       [0.00853075, 0.7678208 , 0.07009553]]), array([[0.67349272, 0.20229691, 0.26918264],\n       [0.87809349, 0.67387692, 0.66705078],\n       [0.72552057, 0.25358423, 0.40614238],\n       [0.74824626, 0.83951088, 0.89302122]])], [array([[0.43797138, 0.31698052, 0.49741958, 0.05960084],\n       [0.9005212 , 0.37456686, 0.40523314, 0.32744639],\n       [0.28224262, 0.31615216, 0.15762586, 0.72696102],\n       [0.37728478, 0.81615186, 0.05057714, 0.42233852]]), array([[0.31736478, 0.57790609, 0.40841145],\n       [0.29569362, 0.04278023, 0.96185563],\n       [0.71684347, 0.67163929, 0.47048901],\n       [0.90612056, 0.26670253, 0.38580701]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.16118158, 0.0934259 , 0.59920108],\n       [0.91053504, 0.02995439, 0.90902718],\n       [0.23930188, 0.56711055, 0.97887156],\n       [0.00853075, 0.7678208 , 0.07009553]]), array([[0.67349272, 0.20229691, 0.26918264],\n       [0.87809349, 0.67387692, 0.66705078],\n       [0.72552057, 0.25358423, 0.40614238],\n       [0.74824626, 0.83951088, 0.89302122]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.43797138, 0.31698052, 0.49741958, 0.05960084],\n       [0.9005212 , 0.37456686, 0.40523314, 0.32744639],\n       [0.28224262, 0.31615216, 0.15762586, 0.72696102],\n       [0.37728478, 0.81615186, 0.05057714, 0.42233852]]), array([[0.31736478, 0.57790609, 0.40841145],\n       [0.29569362, 0.04278023, 0.96185563],\n       [0.71684347, 0.67163929, 0.47048901],\n       [0.90612056, 0.26670253, 0.38580701]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.39718083, 0.31797406, 0.15841351]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f32b40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f24910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f2e050>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.5642535587151846, 0.4596402744452159, 0.20922655363877615]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f2dd70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.56239927, 0.43204725, 0.26070404], [0.62621295, 0.556198, 0.14002988], [0.5458373, 0.513125, 0.0654245]]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x124f25c10>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f25c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x124ee3e50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f25c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.58129446, 0.02373438, 0.11332262],\n       [0.90401382, 0.52001693, 0.86354927],\n       [0.08143225, 0.93035041, 0.49740969],\n       [0.40949505, 0.01142614, 0.927886  ]]), array([[0.36626849, 0.71523978, 0.94935674],\n       [0.21010302, 0.99923369, 0.34036015],\n       [0.39567613, 0.78754022, 0.59221691],\n       [0.8525329 , 0.28414204, 0.32740092]])], [array([[0.37905108, 0.21153852, 0.39361047, 0.55832004],\n       [0.88593508, 0.07591436, 0.39118881, 0.91526354],\n       [0.07297989, 0.86344611, 0.7847476 , 0.86434831],\n       [0.09150054, 0.66605875, 0.11099262, 0.32243483]]), array([[0.66207498, 0.98841544, 0.99110688],\n       [0.04649187, 0.97736283, 0.78600779],\n       [0.66171269, 0.34870133, 0.42793987],\n       [0.79983103, 0.56200983, 0.48565958]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.58129446, 0.02373438, 0.11332262],\n       [0.90401382, 0.52001693, 0.86354927],\n       [0.08143225, 0.93035041, 0.49740969],\n       [0.40949505, 0.01142614, 0.927886  ]]), array([[0.36626849, 0.71523978, 0.94935674],\n       [0.21010302, 0.99923369, 0.34036015],\n       [0.39567613, 0.78754022, 0.59221691],\n       [0.8525329 , 0.28414204, 0.32740092]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.37905108, 0.21153852, 0.39361047, 0.55832004],\n       [0.88593508, 0.07591436, 0.39118881, 0.91526354],\n       [0.07297989, 0.86344611, 0.7847476 , 0.86434831],\n       [0.09150054, 0.66605875, 0.11099262, 0.32243483]]), array([[0.66207498, 0.98841544, 0.99110688],\n       [0.04649187, 0.97736283, 0.78600779],\n       [0.66171269, 0.34870133, 0.42793987],\n       [0.79983103, 0.56200983, 0.48565958]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.5458373, 0.513125, 0.0654245]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f2ac80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f74a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f25c10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.5781498352686564, 0.5004567503929138, 0.1553861399491628]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f32b40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.6901686, 0.61132735, 0.1576826], [0.42689228, 0.346789, 0.16020657], [0.5844875, 0.4794148, 0.21014538], [0.7323592, 0.6805601, 0.10359814], [0.73074853, 0.5916288, 0.27823946], [0.37123322, 0.25993827, 0.22258991], [0.5349329, 0.45267418, 0.16451742], [0.5747422, 0.5054593, 0.13856575], [0.37985364, 0.31040835, 0.13889056], [0.52718955, 0.42045864, 0.21346182], [0.58053696, 0.49508196, 0.17090994], [0.41660193, 0.37973058, 0.07374268]]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x124f25650>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f25650>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x124ee3e50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f25650>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.0667217 , 0.52734857, 0.57219157],\n       [0.87569072, 0.68959463, 0.85503919],\n       [0.64624814, 0.15719682, 0.52154561],\n       [0.86629977, 0.11257901, 0.49277478]]), array([[0.31595864, 0.33570364, 0.37304461],\n       [0.30618868, 0.79586389, 0.47614337],\n       [0.69884021, 0.34811901, 0.36257986],\n       [0.52251226, 0.15813573, 0.59352794]])], [array([[0.59400148, 0.22251062, 0.9558654 , 0.15748479],\n       [0.6285673 , 0.31849327, 0.80288687, 0.01614445],\n       [0.72537504, 0.08010634, 0.98066941, 0.42329461],\n       [0.13521681, 0.17255045, 0.00433702, 0.9866218 ]]), array([[0.54346881, 0.47293502, 0.35678917],\n       [0.1509412 , 0.79280151, 0.73718878],\n       [0.18516886, 0.13064043, 0.88090963],\n       [0.88166619, 0.05232957, 0.6358514 ]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.0667217 , 0.52734857, 0.57219157],\n       [0.87569072, 0.68959463, 0.85503919],\n       [0.64624814, 0.15719682, 0.52154561],\n       [0.86629977, 0.11257901, 0.49277478]]), array([[0.31595864, 0.33570364, 0.37304461],\n       [0.30618868, 0.79586389, 0.47614337],\n       [0.69884021, 0.34811901, 0.36257986],\n       [0.52251226, 0.15813573, 0.59352794]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.59400148, 0.22251062, 0.9558654 , 0.15748479],\n       [0.6285673 , 0.31849327, 0.80288687, 0.01614445],\n       [0.72537504, 0.08010634, 0.98066941, 0.42329461],\n       [0.13521681, 0.17255045, 0.00433702, 0.9866218 ]]), array([[0.54346881, 0.47293502, 0.35678917],\n       [0.1509412 , 0.79280151, 0.73718878],\n       [0.18516886, 0.13064043, 0.88090963],\n       [0.88166619, 0.05232957, 0.6358514 ]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.41660193, 0.37973058, 0.07374268]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x124d89280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f59e10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f25650>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.545812209447225, 0.46112261215845746, 0.16937918588519096]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f020a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.54558754, 0.46719286, 0.15678942], [0.5606868, 0.47893184, 0.16350994], [0.5309315, 0.4218186, 0.21822569], [0.5441041, 0.47386003, 0.1404881], [0.6347296, 0.56474286, 0.13997346], [0.42504054, 0.3832676, 0.08354589], [0.49888676, 0.3222699, 0.35323375], [0.4664781, 0.33278286, 0.26739052], [0.52973384, 0.46306616, 0.1333354], [0.42379034, 0.3373381, 0.1729045], [0.5617026, 0.52249455, 0.078416154], [0.34463888, 0.2774204, 0.13443696]]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x124f7ee50>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f7ee50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x124ee3cd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f7ee50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.36255848, 0.32554028, 0.27288037],\n       [0.74933362, 0.62078358, 0.66804768],\n       [0.46189327, 0.37022388, 0.69904227],\n       [0.5199628 , 0.7466738 , 0.59248695]]), array([[0.44446034, 0.07193606, 0.84381796],\n       [0.16456201, 0.47439927, 0.86226104],\n       [0.56384906, 0.8749389 , 0.23166852],\n       [0.91027684, 0.67510821, 0.36381958]])], [array([[0.30102079, 0.23463137, 0.5246636 , 0.99322407],\n       [0.53208684, 0.29560616, 0.537702  , 0.27712251],\n       [0.13987061, 0.20430233, 0.18521238, 0.13594131],\n       [0.47841041, 0.32662121, 0.55337966, 0.16850298]]), array([[0.70767202, 0.95255668, 0.6929079 ],\n       [0.02270839, 0.51473423, 0.90515961],\n       [0.14877889, 0.78005598, 0.59954457],\n       [0.52686581, 0.17071827, 0.42765552]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.36255848, 0.32554028, 0.27288037],\n       [0.74933362, 0.62078358, 0.66804768],\n       [0.46189327, 0.37022388, 0.69904227],\n       [0.5199628 , 0.7466738 , 0.59248695]]), array([[0.44446034, 0.07193606, 0.84381796],\n       [0.16456201, 0.47439927, 0.86226104],\n       [0.56384906, 0.8749389 , 0.23166852],\n       [0.91027684, 0.67510821, 0.36381958]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.30102079, 0.23463137, 0.5246636 , 0.99322407],\n       [0.53208684, 0.29560616, 0.537702  , 0.27712251],\n       [0.13987061, 0.20430233, 0.18521238, 0.13594131],\n       [0.47841041, 0.32662121, 0.55337966, 0.16850298]]), array([[0.70767202, 0.95255668, 0.6929079 ],\n       [0.02270839, 0.51473423, 0.90515961],\n       [0.14877889, 0.78005598, 0.59954457],\n       [0.52686581, 0.17071827, 0.42765552]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.34463888, 0.2774204, 0.13443696]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f2a230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f73780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f7ee50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.5055258870124817, 0.42043214788039523, 0.1701874832312266]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f30aa0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.6066196, 0.4789353, 0.2553686], [0.46725014, 0.3881641, 0.15817207], [0.47740483, 0.38844192, 0.1779258], [0.62187296, 0.57665324, 0.09043948], [0.56743133, 0.48903906, 0.1567846], [0.49610364, 0.4191224, 0.1539625], [0.57864857, 0.41777515, 0.32174677], [0.30311483, 0.27566713, 0.05489541], [0.49438697, 0.43489158, 0.11899075], [0.6163805, 0.5926072, 0.047546674], [0.5809674, 0.4470216, 0.2678917], [0.65677804, 0.56600916, 0.1815377]]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x124f8a610>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f8a610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x124ee3e50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f8a610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.33817427, 0.62266695, 0.81420826],\n       [0.35501951, 0.75688013, 0.4909019 ],\n       [0.1181884 , 0.34564654, 0.76444204],\n       [0.86807882, 0.09144315, 0.1762272 ]]), array([[0.83472319, 0.46984927, 0.25289273],\n       [0.17663428, 0.77588343, 0.74801539],\n       [0.34101512, 0.62078184, 0.5121561 ],\n       [0.3127045 , 0.63524128, 0.89156557]])], [array([[0.76959643, 0.454872  , 0.19606079, 0.9598814 ],\n       [0.88963466, 0.2174656 , 0.14193316, 0.67114687],\n       [0.93750484, 0.80671161, 0.48179978, 0.32039199],\n       [0.08980099, 0.8577148 , 0.16984752, 0.53302747]]), array([[0.00885542, 0.55717385, 0.95164908],\n       [0.1575886 , 0.48330796, 0.23481613],\n       [0.97053691, 0.92479776, 0.7005783 ],\n       [0.64008992, 0.7730993 , 0.86399791]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.33817427, 0.62266695, 0.81420826],\n       [0.35501951, 0.75688013, 0.4909019 ],\n       [0.1181884 , 0.34564654, 0.76444204],\n       [0.86807882, 0.09144315, 0.1762272 ]]), array([[0.83472319, 0.46984927, 0.25289273],\n       [0.17663428, 0.77588343, 0.74801539],\n       [0.34101512, 0.62078184, 0.5121561 ],\n       [0.3127045 , 0.63524128, 0.89156557]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.76959643, 0.454872  , 0.19606079, 0.9598814 ],\n       [0.88963466, 0.2174656 , 0.14193316, 0.67114687],\n       [0.93750484, 0.80671161, 0.48179978, 0.32039199],\n       [0.08980099, 0.8577148 , 0.16984752, 0.53302747]]), array([[0.00885542, 0.55717385, 0.95164908],\n       [0.1575886 , 0.48330796, 0.23481613],\n       [0.97053691, 0.92479776, 0.7005783 ],\n       [0.64008992, 0.7730993 , 0.86399791]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.65677804, 0.56600916, 0.1815377]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x124d8ebe0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f2a820>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f8a610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.5389132375518481, 0.4561939885218938, 0.1654385027165214]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f6bbe0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.65892714, 0.5606628, 0.19652864], [0.35459012, 0.3218634, 0.0654534], [0.50024694, 0.4033363, 0.19382128], [0.3250729, 0.27730694, 0.09553193], [0.41858006, 0.34441373, 0.14833269], [0.51780784, 0.41592312, 0.20376942], [0.38455582, 0.28997314, 0.18916532], [0.49853447, 0.43211097, 0.132847], [0.6988913, 0.64953697, 0.098708615], [0.34700957, 0.2679209, 0.15817732], [0.5499375, 0.48153466, 0.13680561], [0.5653699, 0.5148835, 0.10097278]]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x124f43050>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f43050>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x124ee3cd0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f43050>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.15148187, 0.94467102, 0.28643745],\n       [0.56488287, 0.34070074, 0.04779857],\n       [0.47523799, 0.53076222, 0.10442199],\n       [0.57938871, 0.94116723, 0.04265485]]), array([[0.85520852, 0.2908867 , 0.12416909],\n       [0.34693432, 0.73206614, 0.66797644],\n       [0.59871207, 0.87129583, 0.14360852],\n       [0.23587851, 0.72539938, 0.0785954 ]])], [array([[0.38166767, 0.91796451, 0.15707416, 0.43770584],\n       [0.95248681, 0.19707685, 0.16365225, 0.9958723 ],\n       [0.53157054, 0.26390398, 0.99598464, 0.41142724],\n       [0.84110759, 0.57099008, 0.13691352, 0.37837521]]), array([[0.2180313 , 0.3047938 , 0.24353361],\n       [0.85560272, 0.39548131, 0.84182553],\n       [0.55856851, 0.97017941, 0.36974087],\n       [0.49775294, 0.21835379, 0.05063075]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.15148187, 0.94467102, 0.28643745],\n       [0.56488287, 0.34070074, 0.04779857],\n       [0.47523799, 0.53076222, 0.10442199],\n       [0.57938871, 0.94116723, 0.04265485]]), array([[0.85520852, 0.2908867 , 0.12416909],\n       [0.34693432, 0.73206614, 0.66797644],\n       [0.59871207, 0.87129583, 0.14360852],\n       [0.23587851, 0.72539938, 0.0785954 ]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.38166767, 0.91796451, 0.15707416, 0.43770584],\n       [0.95248681, 0.19707685, 0.16365225, 0.9958723 ],\n       [0.53157054, 0.26390398, 0.99598464, 0.41142724],\n       [0.84110759, 0.57099008, 0.13691352, 0.37837521]]), array([[0.2180313 , 0.3047938 , 0.24353361],\n       [0.85560272, 0.39548131, 0.84182553],\n       [0.55856851, 0.97017941, 0.36974087],\n       [0.49775294, 0.21835379, 0.05063075]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.5653699, 0.5148835, 0.10097278]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f302d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f5eb90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f43050>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.48496029525995255, 0.4132888714472453, 0.14334283334513506]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f2f870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1249c3ad0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "all_outs": {
                                    "variable_value": "[[0.41950727, 0.35948023, 0.120054066], [0.5654399, 0.4509784, 0.22892293], [0.26550314, 0.21235207, 0.10630213], [0.5054479, 0.38180578, 0.24728431], [0.43543264, 0.36852765, 0.13380998], [0.42980528, 0.33044994, 0.19871065], [0.57919616, 0.48011607, 0.19816013], [0.4378156, 0.3810622, 0.11350678], [0.4465485, 0.38143343, 0.13023013], [0.329549, 0.21144718, 0.23620364], [0.46202698, 0.31210297, 0.29984802], [0.48004413, 0.38418287, 0.19172248]]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "batch_sizes": {
                                    "variable_value": "[4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "12"
                                },
                                "is_sequence": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<test_training.RandomSequence object at 0x124d83410>",
                                    "variable_type": "RandomSequence",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "12",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x124f7a0d0>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method OrderedEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f7a0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x124ee3e50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f7a0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "([array([[0.1666424 , 0.02808437, 0.04728545],\n       [0.92650071, 0.64206074, 0.20517754],\n       [0.68593616, 0.7556727 , 0.96791923],\n       [0.3319848 , 0.88145588, 0.51738595]]), array([[0.28363756, 0.84335295, 0.28743659],\n       [0.59924312, 0.7870272 , 0.95572432],\n       [0.77808597, 0.49343089, 0.1070173 ],\n       [0.88461408, 0.67128363, 0.54732547]])], [array([[0.85167516, 0.16027743, 0.96002806, 0.91147528],\n       [0.11314163, 0.20392882, 0.76089254, 0.19545772],\n       [0.48618211, 0.52051434, 0.72084854, 0.39492516],\n       [0.26999433, 0.64245305, 0.50842478, 0.68415258]]), array([[0.1789909 , 0.90475301, 0.17668381],\n       [0.23849805, 0.48510301, 0.08204889],\n       [0.20450682, 0.18376177, 0.98650642],\n       [0.73168607, 0.80026952, 0.32223564]])])",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "[array([[0.1666424 , 0.02808437, 0.04728545],\n       [0.92650071, 0.64206074, 0.20517754],\n       [0.68593616, 0.7556727 , 0.96791923],\n       [0.3319848 , 0.88145588, 0.51738595]]), array([[0.28363756, 0.84335295, 0.28743659],\n       [0.59924312, 0.7870272 , 0.95572432],\n       [0.77808597, 0.49343089, 0.1070173 ],\n       [0.88461408, 0.67128363, 0.54732547]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "y": {
                                    "variable_value": "[array([[0.85167516, 0.16027743, 0.96002806, 0.91147528],\n       [0.11314163, 0.20392882, 0.76089254, 0.19545772],\n       [0.48618211, 0.52051434, 0.72084854, 0.39492516],\n       [0.26999433, 0.64245305, 0.50842478, 0.68415258]]), array([[0.1789909 , 0.90475301, 0.17668381],\n       [0.23849805, 0.48510301, 0.08204889],\n       [0.20450682, 0.18376177, 0.98650642],\n       [0.73168607, 0.80026952, 0.32223564]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.48004413, 0.38418287, 0.19172248]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x1249c3ad0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "all_outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f5eb90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f2a870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method OrderedEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x124f7a0d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.44635970890522003, 0.3544948995113373, 0.1837296038866043]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x124f74500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "predict_generator",
                    "function_code": "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n                or an instance of Sequence (keras.utils.Sequence)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Not used if using Sequence.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Maximum number of processes to spin up\n            when using process based threading\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if is_sequence:\n        steps = len(generator)\n    enqueuer = None\n\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator,\n                                       use_multiprocessing=use_multiprocessing)\n        else:\n            enqueuer = GeneratorEnqueuer(generator,\n                                         use_multiprocessing=use_multiprocessing,\n                                         wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                # Compatibility with the generators\n                # used for training.\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n            else:\n                # Assumes a generator that only\n                # yields inputs (not targets and sample weights).\n                x = generator_output\n\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]\n",
                    "decorators": [
                        "interfaces.legacy_generator_methods_support"
                    ],
                    "docstring": "Generates predictions for the input samples from a data generator.\n\nThe generator should return the same kind of data as accepted by\n`predict_on_batch`.\n\n# Arguments\n    generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n    steps: Total number of steps (batches of samples)\n        to yield from `generator` before stopping.\n        Not used if using Sequence.\n    max_queue_size: Maximum size for the generator queue.\n    workers: Maximum number of processes to spin up\n        when using process based threading\n    use_multiprocessing: If `True`, use process based threading.\n        Note that because\n        this implementation relies on multiprocessing,\n        you should not pass\n        non picklable arguments to the generator\n        as they can't be passed\n        easily to children processes.\n    verbose: verbosity mode, 0 or 1.\n\n# Returns\n    Numpy array(s) of predictions.\n\n# Raises\n    ValueError: In case the generator yields\n        data in an invalid format.",
                    "start_line": 2290,
                    "end_line": 2403,
                    "variables": {
                        "self._make_predict_function": [
                            2328
                        ],
                        "self": [
                            2328,
                            2377
                        ],
                        "steps_done": [
                            2400,
                            2387,
                            2389,
                            2358,
                            2330,
                            2396
                        ],
                        "wait_time": [
                            2331,
                            2351
                        ],
                        "all_outs": [
                            2401,
                            2403,
                            2381,
                            2383,
                            2386,
                            2395,
                            2332,
                            2397,
                            2399
                        ],
                        "is_sequence": [
                            2345,
                            2340,
                            2333,
                            2334
                        ],
                        "isinstance": [
                            2360,
                            2378,
                            2333
                        ],
                        "generator": [
                            2349,
                            2346,
                            2341,
                            2333
                        ],
                        "Sequence": [
                            2333
                        ],
                        "use_multiprocessing": [
                            2350,
                            2347,
                            2334
                        ],
                        "workers": [
                            2352,
                            2334
                        ],
                        "warnings.warn": [
                            2335
                        ],
                        "warnings": [
                            2335
                        ],
                        "UserWarning": [
                            2336
                        ],
                        "steps": [
                            2356,
                            2341,
                            2358
                        ],
                        "len": [
                            2395,
                            2365,
                            2363,
                            2341
                        ],
                        "enqueuer": [
                            2342,
                            2346,
                            2349,
                            2352,
                            2353,
                            2392,
                            2393
                        ],
                        "OrderedEnqueuer": [
                            2346
                        ],
                        "GeneratorEnqueuer": [
                            2349
                        ],
                        "enqueuer.start": [
                            2352
                        ],
                        "max_queue_size": [
                            2352
                        ],
                        "output_generator": [
                            2353,
                            2359
                        ],
                        "enqueuer.get": [
                            2353
                        ],
                        "verbose": [
                            2355,
                            2388
                        ],
                        "progbar": [
                            2356,
                            2389
                        ],
                        "Progbar": [
                            2356
                        ],
                        "generator_output": [
                            2371,
                            2375,
                            2359,
                            2360,
                            2363,
                            2364,
                            2365,
                            2366
                        ],
                        "next": [
                            2359
                        ],
                        "tuple": [
                            2360
                        ],
                        "x": [
                            2377,
                            2364,
                            2366,
                            2375
                        ],
                        "_": [
                            2364,
                            2366
                        ],
                        "ValueError": [
                            2368
                        ],
                        "str": [
                            2371
                        ],
                        "outs": [
                            2377,
                            2378,
                            2379,
                            2382,
                            2385
                        ],
                        "self.predict_on_batch": [
                            2377
                        ],
                        "list": [
                            2378
                        ],
                        "out": [
                            2401,
                            2403,
                            2382,
                            2385,
                            2386
                        ],
                        "all_outs.append": [
                            2383
                        ],
                        "i": [
                            2385,
                            2386
                        ],
                        "enumerate": [
                            2385
                        ],
                        "append": [
                            2386
                        ],
                        "progbar.update": [
                            2389
                        ],
                        "enqueuer.stop": [
                            2393
                        ],
                        "np.concatenate": [
                            2403,
                            2399
                        ],
                        "np": [
                            2403,
                            2399
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            2290
                        ],
                        "interfaces": [
                            2290
                        ]
                    },
                    "filtered_variables": {
                        "self._make_predict_function": [
                            2328
                        ],
                        "self": [
                            2328,
                            2377
                        ],
                        "steps_done": [
                            2400,
                            2387,
                            2389,
                            2358,
                            2330,
                            2396
                        ],
                        "wait_time": [
                            2331,
                            2351
                        ],
                        "all_outs": [
                            2401,
                            2403,
                            2381,
                            2383,
                            2386,
                            2395,
                            2332,
                            2397,
                            2399
                        ],
                        "is_sequence": [
                            2345,
                            2340,
                            2333,
                            2334
                        ],
                        "generator": [
                            2349,
                            2346,
                            2341,
                            2333
                        ],
                        "Sequence": [
                            2333
                        ],
                        "use_multiprocessing": [
                            2350,
                            2347,
                            2334
                        ],
                        "workers": [
                            2352,
                            2334
                        ],
                        "warnings.warn": [
                            2335
                        ],
                        "warnings": [
                            2335
                        ],
                        "steps": [
                            2356,
                            2341,
                            2358
                        ],
                        "enqueuer": [
                            2342,
                            2346,
                            2349,
                            2352,
                            2353,
                            2392,
                            2393
                        ],
                        "OrderedEnqueuer": [
                            2346
                        ],
                        "GeneratorEnqueuer": [
                            2349
                        ],
                        "enqueuer.start": [
                            2352
                        ],
                        "max_queue_size": [
                            2352
                        ],
                        "output_generator": [
                            2353,
                            2359
                        ],
                        "enqueuer.get": [
                            2353
                        ],
                        "verbose": [
                            2355,
                            2388
                        ],
                        "progbar": [
                            2356,
                            2389
                        ],
                        "Progbar": [
                            2356
                        ],
                        "generator_output": [
                            2371,
                            2375,
                            2359,
                            2360,
                            2363,
                            2364,
                            2365,
                            2366
                        ],
                        "x": [
                            2377,
                            2364,
                            2366,
                            2375
                        ],
                        "_": [
                            2364,
                            2366
                        ],
                        "outs": [
                            2377,
                            2378,
                            2379,
                            2382,
                            2385
                        ],
                        "self.predict_on_batch": [
                            2377
                        ],
                        "out": [
                            2401,
                            2403,
                            2382,
                            2385,
                            2386
                        ],
                        "all_outs.append": [
                            2383
                        ],
                        "i": [
                            2385,
                            2386
                        ],
                        "append": [
                            2386
                        ],
                        "progbar.update": [
                            2389
                        ],
                        "enqueuer.stop": [
                            2393
                        ],
                        "np.concatenate": [
                            2403,
                            2399
                        ],
                        "np": [
                            2403,
                            2399
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            2290
                        ],
                        "interfaces": [
                            2290
                        ]
                    },
                    "diff_line_number": 2291,
                    "class_data": {
                        "signature": "class Model(Container)",
                        "docstring": "The `Model` class adds training & evaluation routines to a `Container`.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def compile(self, optimizer, loss, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name + '\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"' + name + '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss=' + str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n    if loss_weights is None:\n        loss_weights_list = [1.0 for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.0))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss_weights=' + str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' + str(loss_weights) + ' - expected a list of dicts.')\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError('When passing a list as `target_tensors`, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed target_tensors=' + str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n            _target_tensors = []\n            for name in self.output_names:\n                _target_tensors.append(target_tensors.get(name, None))\n            target_tensors = _target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self.internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in sample_weight_mode dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name + '\" missing from sample_weight_modes dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed sample_weight_mode=' + str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            elif sample_weight_mode == 'temporal':\n                sample_weights.append(K.placeholder(ndim=2, name=name + '_sample_weights'))\n                sample_weight_modes.append('temporal')\n            else:\n                sample_weights.append(K.placeholder(ndim=1, name=name + '_sample_weights'))\n                sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n    self.metrics = metrics\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled because it has no loss to optimize.')\n            else:\n                total_loss = 0.0\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n\n    def append_metric(layer_index, metric_name, metric_tensor):\n        \"\"\"Helper function used in loop below.\"\"\"\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[layer_index] + '_' + metric_name\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_tensor)\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n                for metric in metrics:\n                    if metric == 'accuracy' or metric == 'acc':\n                        output_shape = self.internal_output_shapes[i]\n                        if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                            acc_fn = metrics_module.binary_accuracy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            acc_fn = metrics_module.sparse_categorical_accuracy\n                        else:\n                            acc_fn = metrics_module.categorical_accuracy\n                        weighted_metric_fn = _weighted_masked_objective(acc_fn)\n                        metric_name = metric_name_prefix + 'acc'\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + metric_fn.__name__\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n                    append_metric(i, metric_name, metric_result)\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n    self._function_kwargs = kwargs\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                            "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n    if len(self.trainable_weights) != len(self._collected_trainable_weights):\n        warnings.warn(UserWarning('Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?'))",
                            "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)\n            updates = self.updates + training_updates\n            self.train_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)",
                            "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        self.test_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates, name='test_function', **self._function_kwargs)",
                            "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)",
                            "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name + ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have a defined shape, or ' + steps_name + ' should be specified.')\n    return num_samples",
                            "def _fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' % (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` when doing step-wise training, i.e. `steps_per_epoch` must be set.')\n    num_train_samples = self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n    self.history = cbks.History()\n    callbacks = [cbks.BaseLogger()] + (callbacks or []) + [self.history]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        callbacks += [cbks.ProgbarLogger(count_mode)]\n    callbacks = cbks.CallbackList(callbacks)\n    out_labels = out_labels or []\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'batch_size': batch_size, 'epochs': epochs, 'steps': steps_per_epoch, 'samples': num_train_samples, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics or []})\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n    for epoch in range(initial_epoch, epochs):\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, steps=validation_steps, verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. If using HDF5 input data, pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n                if batch_index == len(batches) - 1:\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                            "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    if steps is not None:\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0) for i in range(len(unconcatenated_outs))]\n    else:\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                            "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs * len(batch_ids)\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                            "def _standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_batch_axis=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.')\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False, exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight, self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight, self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode) for ref, sw, cw, mode in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y, self._feed_loss_fns, self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples')\n    return (x, y, sample_weights)",
                            "def _get_deduped_metrics_names(self):\n    out_labels = self.metrics_names\n    deduped_out_labels = []\n    for i, label in enumerate(out_labels):\n        new_label = label\n        if out_labels.count(label) > 1:\n            dup_idx = out_labels[:i].count(label)\n            new_label += '_' + str(dup_idx + 1)\n        deduped_out_labels.append(new_label)\n    return deduped_out_labels",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and (steps_per_epoch is None):\n        raise ValueError('If fitting from data tensors, you should specify the `steps_per_epoch` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, check_batch_axis=False, batch_size=batch_size)\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, it must contain 2 (x_val, y_val) or 3 (x_val, y_val, val_sample_weights) items, however it contains %d items' % len(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, sample_weight=val_sample_weight, check_batch_axis=False, batch_size=batch_size)\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_split and 0.0 < validation_split < 1.0:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1.0 - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1.0 - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (_slice_arrays(sample_weights, 0, split_at), _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = [0.0]\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n    out_labels = self._get_deduped_metrics_names()\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n    return self._fit_loop(f, ins, out_labels=out_labels, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, callback_metrics=callback_metrics, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            The default `None` is equal to the number of samples in\n            your dataset divided by the batch size.\n\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and (steps is None):\n        raise ValueError('If evaluating from data tensors, you should specify the `steps` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, check_batch_axis=False, batch_size=batch_size)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def predict(self, x, batch_size=None, verbose=0, steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, you should specify the `steps` argument.')\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples. Batch size: ' + str(batch_size) + '.')\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def train_on_batch(self, x, y, sample_weight=None, class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, check_batch_axis=True)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, check_batch_axis=True)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Fits the model on data yielded batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence` (`keras.utils.Sequence`)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single batch.\n            Therefore, all arrays in this tuple must have the same length (equal\n            to the size of this batch). Different batches may have different sizes.\n            For example, the last batch of the epoch is commonly smaller than the\n            others, if the size of the dataset is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size. Not used if using `Sequence`.\n        epochs: Integer, total number of iterations on the data.\n        verbose: Verbosity mode, 0, 1, or 2.\n        callbacks: List of callbacks to be called during training.\n        validation_data: This can be either\n            - a generator for the validation data\n            - a tuple (inputs, targets)\n            - a tuple (inputs, targets, sample_weights).\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        class_weight: Dictionary mapping class indices to a weight\n            for the class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1.\n        use_multiprocessing: Boolean. If True, use process based threading.\n            If unspecified, `workers` will default to False.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (keras.utils.Sequence).\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n\n    # Returns\n        A `History` object.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                f = open(path)\n                for line in f:\n                    # create numpy arrays of input data\n                    # and labels, from each line in the file\n                    x1, x2, y = process_line(line)\n                    yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n                f.close()\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    wait_time = 0.01\n    epoch = initial_epoch\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n    val_gen = hasattr(validation_data, 'next') or hasattr(validation_data, '__next__') or isinstance(validation_data, Sequence)\n    if val_gen and (not validation_steps):\n        raise ValueError('When using a generator for validation data, you must specify a value for `validation_steps`.')\n    out_labels = self._get_deduped_metrics_names()\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    self.history = cbks.History()\n    callbacks = [cbks.BaseLogger()] + (callbacks or []) + [self.history]\n    if verbose:\n        callbacks += [cbks.ProgbarLogger(count_mode='steps')]\n    callbacks = cbks.CallbackList(callbacks)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'epochs': epochs, 'steps': steps_per_epoch, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics})\n    callbacks.on_train_begin()\n    if do_validation and (not val_gen):\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('`validation_data` should be a tuple `(val_x, val_y, val_sample_weight)` or `(val_x, val_y)`. Found: ' + str(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, val_sample_weight)\n        val_data = val_x + val_y + val_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_data += [0.0]\n        for cbk in callbacks:\n            cbk.validation_data = val_data\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if is_sequence:\n        steps_per_epoch = len(generator)\n    enqueuer = None\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)\n        else:\n            enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n        callback_model.stop_training = False\n        while epoch < epochs:\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                batch_logs = {}\n                if isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = self.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                epoch_logs = {}\n                batch_index += 1\n                steps_done += 1\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(validation_data, validation_steps, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing)\n                    else:\n                        val_outs = self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n                if callback_model.stop_training:\n                    break\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    callbacks.on_train_end()\n    return self.history",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Not used if using Sequence.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n            when using process based threading\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if is_sequence:\n        steps = len(generator)\n    enqueuer = None\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n        else:\n            enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if isinstance(x, list):\n                batch_size = len(x[0])\n            elif isinstance(x, dict):\n                batch_size = len(list(x.values())[0])\n            else:\n                batch_size = len(x)\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. Batches should at least contain one item.')\n            all_outs.append(outs)\n            steps_done += 1\n            batch_sizes.append(batch_size)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if not isinstance(outs, list):\n        return np.average(np.asarray(all_outs), weights=batch_sizes)\n    else:\n        averages = []\n        for i in range(len(outs)):\n            averages.append(np.average([out[i] for out in all_outs], weights=batch_sizes))\n        return averages",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n                or an instance of Sequence (keras.utils.Sequence)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Not used if using Sequence.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Maximum number of processes to spin up\n            when using process based threading\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if is_sequence:\n        steps = len(generator)\n    enqueuer = None\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n        else:\n            enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n            else:\n                x = generator_output\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                            "def append_metric(layer_index, metric_name, metric_tensor):\n    \"\"\"Helper function used in loop below.\"\"\"\n    if len(self.output_names) > 1:\n        metric_name = self.output_names[layer_index] + '_' + metric_name\n    self.metrics_names.append(metric_name)\n    self.metrics_tensors.append(metric_tensor)",
                            "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n    for metric in metrics:\n        if metric == 'accuracy' or metric == 'acc':\n            output_shape = self.internal_output_shapes[i]\n            if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                acc_fn = metrics_module.binary_accuracy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                acc_fn = metrics_module.sparse_categorical_accuracy\n            else:\n                acc_fn = metrics_module.categorical_accuracy\n            weighted_metric_fn = _weighted_masked_objective(acc_fn)\n            metric_name = metric_name_prefix + 'acc'\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + metric_fn.__name__\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n        append_metric(i, metric_name, metric_result)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "compile(self, optimizer, loss, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "_check_trainable_weights_consistency(self)",
                            "_make_train_function(self)",
                            "_make_test_function(self)",
                            "_make_predict_function(self)",
                            "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                            "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                            "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                            "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                            "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_batch_axis=True, batch_size=None)",
                            "_get_deduped_metrics_names(self)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                            "predict(self, x, batch_size=None, verbose=0, steps=None)",
                            "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_on_batch(self, x)",
                            "fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False)",
                            "predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "append_metric(layer_index, metric_name, metric_tensor)",
                            "handle_metrics(metrics, weights=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _standardize_input_data(data, names, shapes=None,\n                            check_batch_axis=True,\n                            exception_prefix=''):\n    \"\"\"Normalizes inputs and targets provided by users.\n\n    Users may pass data as a list of arrays, dictionary of arrays,\n    or as a single array. We normalize this to an ordered list of\n    arrays (same order as `names`), while checking that the provided\n    arrays have shapes that match the network's expectations.\n\n    # Arguments\n        data: User-provided input data (polymorphic).\n        names: List of expected array names.\n        shapes: Optional list of expected array shapes.\n        check_batch_axis: Boolean; whether to check that\n            the batch axis of the arrays matches the expected\n            value found in `shapes`.\n        exception_prefix: String prefix used for exception formatting.\n\n    # Returns\n        List of standardized input arrays (one array per model input).\n\n    # Raises\n        ValueError: in case of improperly formatted user-provided data.\n    \"\"\"\n    if not names:\n        if data is not None and hasattr(data, '__len__') and len(data):\n            raise ValueError('Error when checking model ' +\n                             exception_prefix + ': '\n                             'expected no data, but got:', data)\n        return []\n    if data is None:\n        return [None for _ in range(len(names))]\n    if isinstance(data, dict):\n        for key, value in data.items():\n            if value.__class__.__name__ == 'DataFrame':\n                data[key] = value.values\n        arrays = []\n        for name in names:\n            if name not in data:\n                raise ValueError('No data provided for \"' +\n                                 name + '\". Need data for each key in: ' +\n                                 str(names))\n            arrays.append(data[name])\n    elif isinstance(data, list):\n        for key, value in enumerate(data):\n            if value.__class__.__name__ == 'DataFrame':\n                data[key] = value.values\n        if len(data) != len(names):\n            if data and hasattr(data[0], 'shape'):\n                raise ValueError('Error when checking model ' +\n                                 exception_prefix +\n                                 ': the list of Numpy arrays '\n                                 'that you are passing to your model '\n                                 'is not the size the model expected. '\n                                 'Expected to see ' + str(len(names)) +\n                                 ' array(s), but instead got '\n                                 'the following list of ' + str(len(data)) +\n                                 ' arrays: ' + str(data)[:200] +\n                                 '...')\n            else:\n                if len(names) == 1:\n                    data = [np.asarray(data)]\n                else:\n                    raise ValueError(\n                        'Error when checking model ' +\n                        exception_prefix +\n                        ': you are passing a list as '\n                        'input to your model, '\n                        'but the model expects '\n                        'a list of ' + str(len(names)) +\n                        ' Numpy arrays instead. '\n                        'The list you passed was: ' +\n                        str(data)[:200])\n        arrays = data\n    else:\n        if data.__class__.__name__ == 'DataFrame':\n            # test if data is a DataFrame, without pandas installed\n            data = data.values\n        if not hasattr(data, 'shape'):\n            raise TypeError('Error when checking model ' +\n                            exception_prefix +\n                            ': data should be a Numpy array, '\n                            'or list/dict of Numpy arrays. '\n                            'Found: ' + str(data)[:200] + '...')\n        if len(names) > 1:\n            # Case: model expects multiple inputs but only received\n            # a single Numpy array.\n            raise ValueError('The model expects ' + str(len(names)) + ' ' +\n                             exception_prefix +\n                             ' arrays, but only received one array. '\n                             'Found: array with shape ' + str(data.shape))\n        arrays = [data]\n\n    # Make arrays at least 2D.\n    for i in range(len(names)):\n        array = arrays[i]\n        if len(array.shape) == 1:\n            array = np.expand_dims(array, 1)\n            arrays[i] = array\n\n    # Check shapes compatibility.\n    if shapes:\n        for i in range(len(names)):\n            if shapes[i] is None:\n                continue\n            array = arrays[i]\n            if len(array.shape) != len(shapes[i]):\n                raise ValueError('Error when checking ' + exception_prefix +\n                                 ': expected ' + names[i] +\n                                 ' to have ' + str(len(shapes[i])) +\n                                 ' dimensions, but got array with shape ' +\n                                 str(array.shape))\n            for j, (dim, ref_dim) in enumerate(zip(array.shape, shapes[i])):\n                if not j and not check_batch_axis:\n                    # skip the first axis\n                    continue\n                if ref_dim:\n                    if ref_dim != dim:\n                        raise ValueError(\n                            'Error when checking ' + exception_prefix +\n                            ': expected ' + names[i] +\n                            ' to have shape ' + str(shapes[i]) +\n                            ' but got array with shape ' +\n                            str(array.shape))\n    return arrays",
                "def _standardize_sample_or_class_weights(x_weight, output_names, weight_type):\n    \"\"\"Maps `sample_weight` or `class_weight` to model outputs.\n\n    # Arguments\n        x_weight: User-provided `sample_weight` or `class_weight` argument.\n        output_names: List of output names (strings) in the model.\n        weight_type: A string used purely for exception printing.\n\n    # Returns\n        A list of `sample_weight` or `class_weight` where there are exactly\n            one element per model output.\n\n    # Raises\n        ValueError: In case of invalid user-provided argument.\n    \"\"\"\n    if x_weight is None or len(x_weight) == 0:\n        return [None for _ in output_names]\n    if len(output_names) == 1:\n        if isinstance(x_weight, list) and len(x_weight) == 1:\n            return x_weight\n        if isinstance(x_weight, dict) and output_names[0] in x_weight:\n            return [x_weight[output_names[0]]]\n        else:\n            return [x_weight]\n    if isinstance(x_weight, list):\n        if len(x_weight) != len(output_names):\n            raise ValueError('Provided `' + weight_type + '` was a list of ' +\n                             str(len(x_weight)) +\n                             ' elements, but the model has ' +\n                             str(len(output_names)) + ' outputs. '\n                             'You should provide one `' + weight_type + '`'\n                             'array per model output.')\n        return x_weight\n    if isinstance(x_weight, dict):\n        x_weights = []\n        for name in output_names:\n            x_weights.append(x_weight.get(name))\n        return x_weights\n    else:\n        raise TypeError('The model has multiple outputs, so `' +\n                        weight_type + '` '\n                        'should be either a list of a dict. '\n                        'Provided `' + weight_type +\n                        '` type not understood: ' +\n                        str(x_weight))",
                "def _standardize_class_weights(class_weight, output_names):\n    return _standardize_sample_or_class_weights(class_weight,\n                                                output_names,\n                                                'class_weight')",
                "def _standardize_sample_weights(sample_weight, output_names):\n    return _standardize_sample_or_class_weights(sample_weight,\n                                                output_names,\n                                                'sample_weight')",
                "def _check_array_lengths(inputs, targets, weights=None):\n    \"\"\"Does user input validation for numpy arrays.\n\n    # Arguments\n        inputs: list of Numpy arrays of inputs.\n        targets: list of Numpy arrays of targets.\n        weights: list of Numpy arrays of sample weights.\n\n    # Raises\n        ValueError: in case of incorrectly formatted data.\n    \"\"\"\n    def set_of_lengths(x):\n        # return a set with the variation between\n        # different shapes, with None => 0\n        if x is None:\n            return {0}\n        else:\n            return set([0 if y is None else y.shape[0] for y in x])\n\n    set_x = set_of_lengths(inputs)\n    set_y = set_of_lengths(targets)\n    set_w = set_of_lengths(weights)\n    if len(set_x) > 1:\n        raise ValueError('All input arrays (x) should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([x.shape for x in inputs]))\n    if len(set_y) > 1:\n        raise ValueError('All target arrays (y) should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([y.shape for y in targets]))\n    if set_x and set_y and list(set_x)[0] != list(set_y)[0]:\n        raise ValueError('Input arrays should have '\n                         'the same number of samples as target arrays. '\n                         'Found ' + str(list(set_x)[0]) + ' input samples '\n                         'and ' + str(list(set_y)[0]) + ' target samples.')\n    if len(set_w) > 1:\n        raise ValueError('All sample_weight arrays should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([w.shape for w in weights]))\n    if set_y and set_w and list(set_y)[0] != list(set_w)[0]:\n        raise ValueError('Sample_weight arrays should have '\n                         'the same number of samples as target arrays. Got ' +\n                         str(list(set_y)[0]) + ' input samples and ' +\n                         str(list(set_w)[0]) + ' target samples.')",
                "def _check_loss_and_target_compatibility(targets, loss_fns, output_shapes):\n    \"\"\"Does validation on the compatibility of targets and loss functions.\n\n    This helps prevent users from using loss functions incorrectly.\n\n    # Arguments\n        targets: list of Numpy arrays of targets.\n        loss_fns: list of loss functions.\n        output_shapes: list of shapes of model outputs.\n\n    # Raises\n        ValueError: if a loss function or target array\n            is incompatible with an output.\n    \"\"\"\n    key_losses = {losses.mean_squared_error,\n                  losses.binary_crossentropy,\n                  losses.categorical_crossentropy}\n    for y, loss, shape in zip(targets, loss_fns, output_shapes):\n        if loss is None:\n            continue\n        if loss is losses.categorical_crossentropy:\n            if y.shape[-1] == 1:\n                raise ValueError(\n                    'You are passing a target array of shape ' + str(y.shape) +\n                    ' while using as loss `categorical_crossentropy`. '\n                    '`categorical_crossentropy` expects '\n                    'targets to be binary matrices (1s and 0s) '\n                    'of shape (samples, classes). '\n                    'If your targets are integer classes, '\n                    'you can convert them to the expected format via:\\n'\n                    '```\\n'\n                    'from keras.utils import to_categorical\\n'\n                    'y_binary = to_categorical(y_int)\\n'\n                    '```\\n'\n                    '\\n'\n                    'Alternatively, you can use the loss function '\n                    '`sparse_categorical_crossentropy` instead, '\n                    'which does expect integer targets.')\n        if loss in key_losses:\n            for target_dim, out_dim in zip(y.shape[1:], shape[1:]):\n                if out_dim is not None and target_dim != out_dim:\n                    raise ValueError(\n                        'A target array with shape ' + str(y.shape) +\n                        ' was passed for an output of shape ' + str(shape) +\n                        ' while using as loss `' + loss.__name__ + '`. '\n                        'This loss expects '\n                        'targets to have the same shape '\n                        'as the output.')",
                "def _collect_metrics(metrics, output_names):\n    \"\"\"Maps metric functions to model outputs.\n\n    # Arguments\n        metrics: a list or dict of metric functions.\n        output_names: a list of the names (strings) of model outputs.\n\n    # Returns\n        A list (one entry per model output) of lists of metric functions.\n        For instance, if the model has 2 outputs, and for the first output\n        we want to compute \"binary_accuracy\" and \"binary_crossentropy\",\n        and just \"binary_accuracy\" for the second output,\n        the list would look like:\n            `[[binary_accuracy, binary_crossentropy], [binary_accuracy]]`\n\n    # Raises\n        TypeError: if an incorrect type is passed for the `metrics` argument.\n    \"\"\"\n    if not metrics:\n        return [[] for _ in output_names]\n    if isinstance(metrics, list):\n        # we then apply all metrics to all outputs.\n        return [copy.copy(metrics) for _ in output_names]\n    elif isinstance(metrics, dict):\n        nested_metrics = []\n        for name in output_names:\n            output_metrics = metrics.get(name, [])\n            if not isinstance(output_metrics, list):\n                output_metrics = [output_metrics]\n            nested_metrics.append(output_metrics)\n        return nested_metrics\n    else:\n        raise TypeError('Type of `metrics` argument not understood. '\n                        'Expected a list or dictionary, found: ' +\n                        str(metrics))",
                "def _batch_shuffle(index_array, batch_size):\n    \"\"\"Shuffles an array in a batch-wise fashion.\n\n    Useful for shuffling HDF5 arrays\n    (where one cannot access arbitrary indices).\n\n    # Arguments\n        index_array: array of indices to be shuffled.\n        batch_size: integer.\n\n    # Returns\n        The `index_array` array, shuffled in a batch-wise fashion.\n    \"\"\"\n    batch_count = int(len(index_array) / batch_size)\n    # to reshape we need to be cleanly divisible by batch size\n    # we stash extra items and reappend them after shuffling\n    last_batch = index_array[batch_count * batch_size:]\n    index_array = index_array[:batch_count * batch_size]\n    index_array = index_array.reshape((batch_count, batch_size))\n    np.random.shuffle(index_array)\n    index_array = index_array.flatten()\n    return np.append(index_array, last_batch)",
                "def _make_batches(size, batch_size):\n    \"\"\"Returns a list of batch indices (tuples of indices).\n\n    # Arguments\n        size: Integer, total size of the data to slice into batches.\n        batch_size: Integer, batch size.\n\n    # Returns\n        A list of tuples of array indices.\n    \"\"\"\n    num_batches = (size + batch_size - 1) // batch_size  # round up\n    return [(i * batch_size, min(size, (i + 1) * batch_size))\n            for i in range(num_batches)]",
                "def _slice_arrays(arrays, start=None, stop=None):\n    \"\"\"Slice an array or list of arrays.\n\n    This takes an array-like, or a list of\n    array-likes, and outputs:\n        - arrays[start:stop] if `arrays` is an array-like\n        - [x[start:stop] for x in arrays] if `arrays` is a list\n\n    Can also work on list/array of indices: `_slice_arrays(x, indices)`\n\n    # Arguments\n        arrays: Single array or list of arrays.\n        start: can be an integer index (start index)\n            or a list/array of indices\n        stop: integer (stop index); should be None if\n            `start` was a list.\n\n    # Returns\n        A slice of the array(s).\n    \"\"\"\n    if arrays is None:\n        return [None]\n    elif isinstance(arrays, list):\n        if hasattr(start, '__len__'):\n            # hdf5 datasets only support list objects as indices\n            if hasattr(start, 'shape'):\n                start = start.tolist()\n            return [None if x is None else x[start] for x in arrays]\n        else:\n            return [None if x is None else x[start:stop] for x in arrays]\n    else:\n        if hasattr(start, '__len__'):\n            if hasattr(start, 'shape'):\n                start = start.tolist()\n            return arrays[start]\n        elif hasattr(start, '__getitem__'):\n            return arrays[start:stop]\n        else:\n            return [None]",
                "def _weighted_masked_objective(fn):\n    \"\"\"Adds support for masking and sample-weighting to an objective function.\n\n    It transforms an objective function `fn(y_true, y_pred)`\n    into a sample-weighted, cost-masked objective function\n    `fn(y_true, y_pred, weights, mask)`.\n\n    # Arguments\n        fn: The objective function to wrap,\n            with signature `fn(y_true, y_pred)`.\n\n    # Returns\n        A function with signature `fn(y_true, y_pred, weights, mask)`.\n    \"\"\"\n    if fn is None:\n        return None\n\n    def weighted(y_true, y_pred, weights, mask=None):\n        \"\"\"Wrapper function.\n\n        # Arguments\n            y_true: `y_true` argument of `fn`.\n            y_pred: `y_pred` argument of `fn`.\n            weights: Weights tensor.\n            mask: Mask tensor.\n\n        # Returns\n            Scalar tensor.\n        \"\"\"\n        # score_array has ndim >= 2\n        score_array = fn(y_true, y_pred)\n        if mask is not None:\n            # Cast the mask to floatX to avoid float64 upcasting in theano\n            mask = K.cast(mask, K.floatx())\n            # mask should have the same shape as score_array\n            score_array *= mask\n            #  the loss per batch should be proportional\n            #  to the number of unmasked samples.\n            score_array /= K.mean(mask)\n\n        # apply sample weighting\n        if weights is not None:\n            # reduce score_array to same ndim as weight array\n            ndim = K.ndim(score_array)\n            weight_ndim = K.ndim(weights)\n            score_array = K.mean(score_array, axis=list(range(weight_ndim, ndim)))\n            score_array *= weights\n            score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))\n        return K.mean(score_array)\n    return weighted",
                "def _standardize_weights(y, sample_weight=None, class_weight=None,\n                         sample_weight_mode=None):\n    \"\"\"Performs sample weight validation and standardization.\n\n    Everything gets normalized to a single sample-wise (or timestep-wise)\n    weight array.\n\n    # Arguments\n        y: Numpy array of model targets to be weighted.\n        sample_weight: User-provided `sample_weight` argument.\n        class_weight: User-provided `class_weight` argument.\n        sample_weight_mode: One of `None` or `\"temporal\"`.\n            `\"temporal\"` indicated that we expect 2D weight data\n            that will be applied to the last 2 dimensions of\n            the targets (i.e. we are weighting timesteps, not samples).\n\n    # Returns\n        A numpy array of target weights, one entry per sample to weight.\n\n    # Raises\n        ValueError: In case of invalid user-provided arguments.\n    \"\"\"\n    if sample_weight_mode is not None:\n        if sample_weight_mode != 'temporal':\n            raise ValueError('\"sample_weight_mode '\n                             'should be None or \"temporal\". '\n                             'Found: ' + str(sample_weight_mode))\n        if len(y.shape) < 3:\n            raise ValueError('Found a sample_weight array for '\n                             'an input with shape ' +\n                             str(y.shape) + '. '\n                             'Timestep-wise sample weighting (use of '\n                             'sample_weight_mode=\"temporal\") is restricted to '\n                             'outputs that are at least 3D, i.e. that have '\n                             'a time dimension.')\n        if sample_weight is not None and len(sample_weight.shape) != 2:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + '. '\n                             'In order to use timestep-wise sample weighting, '\n                             'you should pass a 2D sample_weight array.')\n    else:\n        if sample_weight is not None and len(sample_weight.shape) != 1:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + '. '\n                             'In order to use timestep-wise sample weights, '\n                             'you should specify '\n                             'sample_weight_mode=\"temporal\" '\n                             'in compile(). If you just mean to use '\n                             'sample-wise weights, make sure your '\n                             'sample_weight array is 1D.')\n\n    if sample_weight is not None:\n        if len(sample_weight.shape) > len(y.shape):\n            raise ValueError('Found a sample_weight with shape' +\n                             str(sample_weight.shape) + '.'\n                             'Expected sample_weight with rank '\n                             'less than or equal to ' + str(len(y.shape)))\n\n        if y.shape[:sample_weight.ndim] != sample_weight.shape:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + ' for an input with shape ' +\n                             str(y.shape) + '. '\n                             'sample_weight cannot be broadcast.')\n        return sample_weight\n    elif isinstance(class_weight, dict):\n        if len(y.shape) > 2:\n            raise ValueError('`class_weight` not supported for '\n                             '3+ dimensional targets.')\n        if y.shape[1] > 1:\n            y_classes = y.argmax(axis=1)\n        elif y.shape[1] == 1:\n            y_classes = np.reshape(y, y.shape[0])\n        else:\n            y_classes = y\n\n        weights = np.asarray([class_weight[cls] for cls in y_classes\n                              if cls in class_weight])\n\n        if len(weights) != len(y_classes):\n            # subtract the sets to pick all missing classes\n            existing_classes = set(y_classes)\n            existing_class_weight = set(class_weight.keys())\n            raise ValueError('`class_weight` must contain all classes in the data.'\n                             ' The classes %s exist in the data but not in '\n                             '`class_weight`.'\n                             % (existing_classes - existing_class_weight))\n        return weights\n    else:\n        if sample_weight_mode is None:\n            return np.ones((y.shape[0],), dtype=K.floatx())\n        else:\n            return np.ones((y.shape[0], y.shape[1]), dtype=K.floatx())",
                "def set_of_lengths(x):\n    # return a set with the variation between\n    # different shapes, with None => 0\n    if x is None:\n        return {0}\n    else:\n        return set([0 if y is None else y.shape[0] for y in x])",
                "def weighted(y_true, y_pred, weights, mask=None):\n    \"\"\"Wrapper function.\n\n    # Arguments\n        y_true: `y_true` argument of `fn`.\n        y_pred: `y_pred` argument of `fn`.\n        weights: Weights tensor.\n        mask: Mask tensor.\n\n    # Returns\n        Scalar tensor.\n    \"\"\"\n    # score_array has ndim >= 2\n    score_array = fn(y_true, y_pred)\n    if mask is not None:\n        # Cast the mask to floatX to avoid float64 upcasting in theano\n        mask = K.cast(mask, K.floatx())\n        # mask should have the same shape as score_array\n        score_array *= mask\n        #  the loss per batch should be proportional\n        #  to the number of unmasked samples.\n        score_array /= K.mean(mask)\n\n    # apply sample weighting\n    if weights is not None:\n        # reduce score_array to same ndim as weight array\n        ndim = K.ndim(score_array)\n        weight_ndim = K.ndim(weights)\n        score_array = K.mean(score_array, axis=list(range(weight_ndim, ndim)))\n        score_array *= weights\n        score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))\n    return K.mean(score_array)",
                "def compile(self, optimizer, loss, metrics=None, loss_weights=None,\n            sample_weight_mode=None, weighted_metrics=None,\n            target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n\n    # Prepare loss functions.\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss '\n                                 'dictionary: \"' + name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name +\n                              '\" missing from loss dictionary. '\n                              'We assume this was done on purpose, '\n                              'and we will not be expecting '\n                              'any data to be passed to \"' + name +\n                              '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, '\n                             'it should have one entry per model outputs. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed loss=' +\n                             str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n\n    # Prepare output masks.\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n\n    # Prepare loss weights.\n    if loss_weights is None:\n        loss_weights_list = [1. for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights '\n                                 'dictionary: \"' + name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, '\n                             'it should have one entry per model outputs. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed loss_weights=' +\n                             str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' +\n                        str(loss_weights) +\n                        ' - expected a list of dicts.')\n\n    # Prepare targets of model.\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError(\n                    'When passing a list as `target_tensors`, '\n                    'it should have one entry per model outputs. '\n                    'The model has ' + str(len(self.outputs)) +\n                    ' outputs, but you passed target_tensors=' +\n                    str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` '\n                                     'dictionary: \"' + name + '\". '\n                                     'Only expected the following keys: ' +\n                                     str(self.output_names))\n            _target_tensors = []\n            for name in self.output_names:\n                _target_tensors.append(target_tensors.get(name, None))\n            target_tensors = _target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be '\n                            'a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self.internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape),\n                                           name=name + '_target',\n                                           sparse=K.is_sparse(self.outputs[i]),\n                                           dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n\n    # Prepare sample weights.\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in '\n                                 'sample_weight_mode dictionary: \"' +\n                                 name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name +\n                                     '\" missing from sample_weight_modes '\n                                     'dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, '\n                             'it should have one entry per model outputs. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed '\n                             'sample_weight_mode=' +\n                             str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            else:\n                if sample_weight_mode == 'temporal':\n                    sample_weights.append(\n                        K.placeholder(ndim=2,\n                                      name=name + '_sample_weights'))\n                    sample_weight_modes.append('temporal')\n                else:\n                    sample_weights.append(\n                        K.placeholder(ndim=1,\n                                      name=name + '_sample_weights'))\n                    sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n\n    # Prepare metrics.\n    self.metrics = metrics\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n\n    # Compute total loss.\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred,\n                                            sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled '\n                                 'because it has no loss to optimize.')\n            else:\n                total_loss = 0.\n\n        # Add regularization penalties\n        # and other layer-specific losses.\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n\n    # List of same size as output_names.\n    # contains tuples (metrics for output, names of metrics).\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n\n    def append_metric(layer_index, metric_name, metric_tensor):\n        \"\"\"Helper function used in loop below.\"\"\"\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[layer_index] + '_' + metric_name\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_tensor)\n\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n\n                for metric in metrics:\n                    if metric == 'accuracy' or metric == 'acc':\n                        # custom handling of accuracy\n                        # (because of class mode duality)\n                        output_shape = self.internal_output_shapes[i]\n                        if (output_shape[-1] == 1 or\n                           self.loss_functions[i] == losses.binary_crossentropy):\n                            # case: binary accuracy\n                            acc_fn = metrics_module.binary_accuracy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            # case: categorical accuracy with sparse targets\n                            acc_fn = metrics_module.sparse_categorical_accuracy\n                        else:\n                            acc_fn = metrics_module.categorical_accuracy\n\n                        weighted_metric_fn = _weighted_masked_objective(acc_fn)\n                        metric_name = metric_name_prefix + 'acc'\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + metric_fn.__name__\n\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred,\n                                                           weights=weights,\n                                                           mask=masks[i])\n                    append_metric(i, metric_name, metric_result)\n\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n\n    # Prepare gradient updates and state updates.\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n\n    # Functions for train, test and predict will\n    # be compiled lazily when required.\n    # This saves time when the user is not using all functions.\n    self._function_kwargs = kwargs\n\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n\n    # Collected trainable weights, sorted in topological order.\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n\n    if (len(self.trainable_weights) !=\n            len(self._collected_trainable_weights)):\n        warnings.warn(UserWarning(\n            'Discrepancy between trainable weights and collected trainable'\n            ' weights, did you set `model.trainable` without calling'\n            ' `model.compile` after ?'))",
                "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            inputs += [K.learning_phase()]\n\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(\n                    params=self._collected_trainable_weights,\n                    loss=self.total_loss)\n            updates = self.updates + training_updates\n            # Gets loss and metrics. Updates weights at each call.\n            self.train_function = K.function(inputs,\n                                             [self.total_loss] + self.metrics_tensors,\n                                             updates=updates,\n                                             name='train_function',\n                                             **self._function_kwargs)",
                "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            inputs += [K.learning_phase()]\n        # Return loss and metrics, no gradient updates.\n        # Does update the network states.\n        self.test_function = K.function(inputs,\n                                        [self.total_loss] + self.metrics_tensors,\n                                        updates=self.state_updates,\n                                        name='test_function',\n                                        **self._function_kwargs)",
                "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        # Gets network outputs. Does not update weights.\n        # Does update the network states.\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs,\n                                           self.outputs,\n                                           updates=self.state_updates,\n                                           name='predict_function',\n                                           **kwargs)",
                "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name +\n                             ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have '\n                         'a defined shape, or ' + steps_name +\n                         ' should be specified.')\n    return num_samples",
                "def _fit_loop(self, f, ins, out_labels=None, batch_size=None,\n              epochs=100, verbose=1, callbacks=None,\n              val_f=None, val_ins=None, shuffle=True,\n              callback_metrics=None, initial_epoch=0,\n              steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' %\n                  (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` '\n                             'when doing step-wise '\n                             'training, i.e. `steps_per_epoch` '\n                             'must be set.')\n\n    num_train_samples = self._check_num_samples(ins, batch_size,\n                                                steps_per_epoch,\n                                                'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n\n    self.history = cbks.History()\n    callbacks = [cbks.BaseLogger()] + (callbacks or []) + [self.history]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        callbacks += [cbks.ProgbarLogger(count_mode)]\n    callbacks = cbks.CallbackList(callbacks)\n    out_labels = out_labels or []\n\n    # it's possible to callback a different model than self\n    # (used by Sequential models)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'batch_size': batch_size,\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'samples': num_train_samples,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics or [],\n    })\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n\n    for epoch in range(initial_epoch, epochs):\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins,\n                                           batch_size=batch_size,\n                                           steps=validation_steps,\n                                           verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                # Same labels assumed.\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        # Do not slice the training phase flag.\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. '\n                                    'If using HDF5 input data, '\n                                    'pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n\n                if batch_index == len(batches) - 1:  # Last batch.\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins,\n                                                   batch_size=batch_size,\n                                                   verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        # Same labels assumed.\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size,\n                                          steps,\n                                          'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    if steps is not None:\n        # Step-based predictions.\n        # Since we do not know how many samples\n        # we will see, we cannot pre-allocate\n        # the returned Numpy arrays.\n        # Instead, we store one array per batch seen\n        # and concatenate them upon returning.\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0)\n                for i in range(len(unconcatenated_outs))]\n    else:\n        # Sample-based predictions.\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                # Do not slice the training phase flag.\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                # Pre-allocate the results arrays.\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size,\n                                          steps,\n                                          'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.)\n                for i, batch_out in enumerate(batch_outs):\n                    outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                # Do not slice the training phase flag.\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.)\n                for i, batch_out in enumerate(batch_outs):\n                    outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.)\n                outs[0] += batch_outs * len(batch_ids)\n\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                "def _standardize_user_data(self, x, y,\n                           sample_weight=None, class_weight=None,\n                           check_batch_axis=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before '\n                           'training/testing. '\n                           'Use `model.compile(optimizer, loss)`.')\n\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names,\n                                self._feed_input_shapes,\n                                check_batch_axis=False,\n                                exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names,\n                                output_shapes,\n                                check_batch_axis=False,\n                                exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight,\n                                                 self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight,\n                                               self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode)\n                      for (ref, sw, cw, mode)\n                      in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y,\n                                         self._feed_loss_fns,\n                                         self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, '\n                             'you should only pass inputs with '\n                             'a number of samples that can be '\n                             'divided by the batch size. Found: ' +\n                             str(x[0].shape[0]) + ' samples')\n    return x, y, sample_weights",
                "def _get_deduped_metrics_names(self):\n    out_labels = self.metrics_names\n\n    # Rename duplicated metrics name\n    # (can happen with an output layer shared among multiple dataflows).\n    deduped_out_labels = []\n    for i, label in enumerate(out_labels):\n        new_label = label\n        if out_labels.count(label) > 1:\n            dup_idx = out_labels[:i].count(label)\n            new_label += '_' + str(dup_idx + 1)\n        deduped_out_labels.append(new_label)\n    return deduped_out_labels",
                "def fit(self,\n        x=None,\n        y=None,\n        batch_size=None,\n        epochs=1,\n        verbose=1,\n        callbacks=None,\n        validation_split=0.,\n        validation_data=None,\n        shuffle=True,\n        class_weight=None,\n        sample_weight=None,\n        initial_epoch=0,\n        steps_per_epoch=None,\n        validation_steps=None,\n        **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    # Backwards compatibility\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    # Legacy support\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` '\n                      'has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and steps_per_epoch is None:\n        raise ValueError('If fitting from data tensors, '\n                         'you should specify the `steps_per_epoch` '\n                         'argument.')\n    # Validate user data.\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight,\n        class_weight=class_weight,\n        check_batch_axis=False,\n        batch_size=batch_size)\n    # Prepare validation data.\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, '\n                             'it must contain 2 (x_val, y_val) '\n                             'or 3 (x_val, y_val, val_sample_weights) '\n                             'items, however it contains %d items' %\n                             len(validation_data))\n\n        val_x, val_y, val_sample_weights = self._standardize_user_data(\n            val_x, val_y,\n            sample_weight=val_sample_weight,\n            check_batch_axis=False,\n            batch_size=batch_size)\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            val_ins = val_x + val_y + val_sample_weights + [0.]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n\n    elif validation_split and 0. < validation_split < 1.:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1. - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1. - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (\n            _slice_arrays(sample_weights, 0, split_at),\n            _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            val_ins = val_x + val_y + val_sample_weights + [0.]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            val_ins = [0.]\n\n    # Prepare input arrays and training function.\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [1.]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n\n    # Prepare display labels.\n    out_labels = self._get_deduped_metrics_names()\n\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n\n    # Delegate logic to `_fit_loop`.\n    return self._fit_loop(f, ins, out_labels=out_labels,\n                          batch_size=batch_size, epochs=epochs,\n                          verbose=verbose, callbacks=callbacks,\n                          val_f=val_f, val_ins=val_ins, shuffle=shuffle,\n                          callback_metrics=callback_metrics,\n                          initial_epoch=initial_epoch,\n                          steps_per_epoch=steps_per_epoch,\n                          validation_steps=validation_steps)",
                "def evaluate(self, x=None, y=None,\n             batch_size=None,\n             verbose=1,\n             sample_weight=None,\n             steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            The default `None` is equal to the number of samples in\n            your dataset divided by the batch size.\n\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    # Backwards compatibility.\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and steps is None:\n        raise ValueError('If evaluating from data tensors, '\n                         'you should specify the `steps` '\n                         'argument.')\n    # Validate user data.\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight,\n        check_batch_axis=False,\n        batch_size=batch_size)\n    # Prepare inputs, delegate logic to `_test_loop`.\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [0.]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins,\n                           batch_size=batch_size,\n                           verbose=verbose,\n                           steps=steps)",
                "def predict(self, x,\n            batch_size=None,\n            verbose=0,\n            steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    # Backwards compatibility.\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, '\n                         'you should specify the `steps` '\n                         'argument.')\n    # Validate user data.\n    x = _standardize_input_data(x, self._feed_input_names,\n                                self._feed_input_shapes,\n                                check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, '\n                             'you should only pass inputs with '\n                             'a number of samples that can be '\n                             'divided by the batch size. Found: ' +\n                             str(x[0].shape[0]) + ' samples. '\n                             'Batch size: ' + str(batch_size) + '.')\n\n    # Prepare inputs, delegate logic to `_predict_loop`.\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + [0.]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size,\n                              verbose=verbose, steps=steps)",
                "def train_on_batch(self, x, y,\n                   sample_weight=None,\n                   class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight,\n        class_weight=class_weight,\n        check_batch_axis=True)\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [1.]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight,\n        check_batch_axis=True)\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [0.]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names,\n                                self._feed_input_shapes)\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + [0.]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                "@interfaces.legacy_generator_methods_support\ndef fit_generator(self,\n                  generator,\n                  steps_per_epoch,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"Fits the model on data yielded batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence` (`keras.utils.Sequence`)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single batch.\n            Therefore, all arrays in this tuple must have the same length (equal\n            to the size of this batch). Different batches may have different sizes.\n            For example, the last batch of the epoch is commonly smaller than the\n            others, if the size of the dataset is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size. Not used if using `Sequence`.\n        epochs: Integer, total number of iterations on the data.\n        verbose: Verbosity mode, 0, 1, or 2.\n        callbacks: List of callbacks to be called during training.\n        validation_data: This can be either\n            - a generator for the validation data\n            - a tuple (inputs, targets)\n            - a tuple (inputs, targets, sample_weights).\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        class_weight: Dictionary mapping class indices to a weight\n            for the class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1.\n        use_multiprocessing: Boolean. If True, use process based threading.\n            If unspecified, `workers` will default to False.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (keras.utils.Sequence).\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n\n    # Returns\n        A `History` object.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                f = open(path)\n                for line in f:\n                    # create numpy arrays of input data\n                    # and labels, from each line in the file\n                    x1, x2, y = process_line(line)\n                    yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n                f.close()\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    wait_time = 0.01  # in seconds\n    epoch = initial_epoch\n\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n\n    # python 2 has 'next', 3 has '__next__'\n    # avoid any explicit version checks\n    val_gen = (hasattr(validation_data, 'next') or\n               hasattr(validation_data, '__next__') or\n               isinstance(validation_data, Sequence))\n    if val_gen and not validation_steps:\n        raise ValueError('When using a generator for validation data, '\n                         'you must specify a value for '\n                         '`validation_steps`.')\n\n    # Prepare display labels.\n    out_labels = self._get_deduped_metrics_names()\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n\n    # prepare callbacks\n    self.history = cbks.History()\n    callbacks = [cbks.BaseLogger()] + (callbacks or []) + [self.history]\n    if verbose:\n        callbacks += [cbks.ProgbarLogger(count_mode='steps')]\n    callbacks = cbks.CallbackList(callbacks)\n\n    # it's possible to callback a different model than self:\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics,\n    })\n    callbacks.on_train_begin()\n\n    if do_validation and not val_gen:\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('`validation_data` should be a tuple '\n                             '`(val_x, val_y, val_sample_weight)` '\n                             'or `(val_x, val_y)`. Found: ' +\n                             str(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(\n            val_x, val_y, val_sample_weight)\n        val_data = val_x + val_y + val_sample_weights\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            val_data += [0.]\n        for cbk in callbacks:\n            cbk.validation_data = val_data\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if is_sequence:\n        steps_per_epoch = len(generator)\n    enqueuer = None\n\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator,\n                                       use_multiprocessing=use_multiprocessing,\n                                       shuffle=shuffle)\n        else:\n            enqueuer = GeneratorEnqueuer(generator,\n                                         use_multiprocessing=use_multiprocessing,\n                                         wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n\n        callback_model.stop_training = False\n        while epoch < epochs:\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n                # build batch logs\n                batch_logs = {}\n                if isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n\n                outs = self.train_on_batch(x, y,\n                                           sample_weight=sample_weight,\n                                           class_weight=class_weight)\n\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n\n                # Construct epoch logs.\n                epoch_logs = {}\n                batch_index += 1\n                steps_done += 1\n\n                # Epoch finished.\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(\n                            validation_data,\n                            validation_steps,\n                            max_queue_size=max_queue_size,\n                            workers=workers,\n                            use_multiprocessing=use_multiprocessing)\n                    else:\n                        # No need for try/except because\n                        # data has already been validated.\n                        val_outs = self.evaluate(\n                            val_x, val_y,\n                            batch_size=batch_size,\n                            sample_weight=val_sample_weights,\n                            verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    # Same labels assumed.\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n\n                if callback_model.stop_training:\n                    break\n\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    callbacks.on_train_end()\n    return self.history",
                "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps,\n                       max_queue_size=10,\n                       workers=1,\n                       use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Not used if using Sequence.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n            when using process based threading\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if is_sequence:\n        steps = len(generator)\n    enqueuer = None\n\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator,\n                                       use_multiprocessing=use_multiprocessing)\n        else:\n            enqueuer = GeneratorEnqueuer(generator,\n                                         use_multiprocessing=use_multiprocessing,\n                                         wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n\n            if isinstance(x, list):\n                batch_size = len(x[0])\n            elif isinstance(x, dict):\n                batch_size = len(list(x.values())[0])\n            else:\n                batch_size = len(x)\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. '\n                                 'Batches should at least contain one item.')\n            all_outs.append(outs)\n\n            steps_done += 1\n            batch_sizes.append(batch_size)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if not isinstance(outs, list):\n        return np.average(np.asarray(all_outs),\n                          weights=batch_sizes)\n    else:\n        averages = []\n        for i in range(len(outs)):\n            averages.append(np.average([out[i] for out in all_outs],\n                                       weights=batch_sizes))\n        return averages",
                "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n                or an instance of Sequence (keras.utils.Sequence)\n                object in order to avoid duplicate data\n                when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Not used if using Sequence.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Maximum number of processes to spin up\n            when using process based threading\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if is_sequence:\n        steps = len(generator)\n    enqueuer = None\n\n    try:\n        if is_sequence:\n            enqueuer = OrderedEnqueuer(generator,\n                                       use_multiprocessing=use_multiprocessing)\n        else:\n            enqueuer = GeneratorEnqueuer(generator,\n                                         use_multiprocessing=use_multiprocessing,\n                                         wait_time=wait_time)\n        enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n        output_generator = enqueuer.get()\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                # Compatibility with the generators\n                # used for training.\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n            else:\n                # Assumes a generator that only\n                # yields inputs (not targets and sample weights).\n                x = generator_output\n\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                "def append_metric(layer_index, metric_name, metric_tensor):\n    \"\"\"Helper function used in loop below.\"\"\"\n    if len(self.output_names) > 1:\n        metric_name = self.output_names[layer_index] + '_' + metric_name\n    self.metrics_names.append(metric_name)\n    self.metrics_tensors.append(metric_tensor)",
                "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n\n    for metric in metrics:\n        if metric == 'accuracy' or metric == 'acc':\n            # custom handling of accuracy\n            # (because of class mode duality)\n            output_shape = self.internal_output_shapes[i]\n            if (output_shape[-1] == 1 or\n               self.loss_functions[i] == losses.binary_crossentropy):\n                # case: binary accuracy\n                acc_fn = metrics_module.binary_accuracy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                # case: categorical accuracy with sparse targets\n                acc_fn = metrics_module.sparse_categorical_accuracy\n            else:\n                acc_fn = metrics_module.categorical_accuracy\n\n            weighted_metric_fn = _weighted_masked_objective(acc_fn)\n            metric_name = metric_name_prefix + 'acc'\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + metric_fn.__name__\n\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred,\n                                               weights=weights,\n                                               mask=masks[i])\n        append_metric(i, metric_name, metric_result)"
            ],
            "inscope_function_signatures": [
                "_standardize_input_data(data, names, shapes=None, check_batch_axis=True, exception_prefix='')",
                "_standardize_sample_or_class_weights(x_weight, output_names, weight_type)",
                "_standardize_class_weights(class_weight, output_names)",
                "_standardize_sample_weights(sample_weight, output_names)",
                "_check_array_lengths(inputs, targets, weights=None)",
                "_check_loss_and_target_compatibility(targets, loss_fns, output_shapes)",
                "_collect_metrics(metrics, output_names)",
                "_batch_shuffle(index_array, batch_size)",
                "_make_batches(size, batch_size)",
                "_slice_arrays(arrays, start=None, stop=None)",
                "_weighted_masked_objective(fn)",
                "_standardize_weights(y, sample_weight=None, class_weight=None, sample_weight_mode=None)",
                "set_of_lengths(x)",
                "weighted(y_true, y_pred, weights, mask=None)",
                "compile(self, optimizer, loss, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                "_check_trainable_weights_consistency(self)",
                "_make_train_function(self)",
                "_make_test_function(self)",
                "_make_predict_function(self)",
                "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_batch_axis=True, batch_size=None)",
                "_get_deduped_metrics_names(self)",
                "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                "predict(self, x, batch_size=None, verbose=0, steps=None)",
                "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                "test_on_batch(self, x, y, sample_weight=None)",
                "predict_on_batch(self, x)",
                "fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                "evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False)",
                "predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                "append_metric(layer_index, metric_name, metric_tensor)",
                "handle_metrics(metrics, weights=None)"
            ],
            "variables_in_file": {
                "ImportError": [
                    16
                ],
                "names": [
                    67,
                    99,
                    132,
                    71,
                    138,
                    77,
                    114,
                    84,
                    117,
                    54,
                    150,
                    90,
                    124,
                    61
                ],
                "data": [
                    55,
                    58,
                    60,
                    62,
                    63,
                    65,
                    68,
                    72,
                    73,
                    74,
                    76,
                    77,
                    78,
                    86,
                    87,
                    91,
                    102,
                    103,
                    105,
                    107,
                    108,
                    113,
                    120,
                    121
                ],
                "hasattr": [
                    411,
                    413,
                    419,
                    420,
                    1062,
                    423,
                    2093,
                    55,
                    1603,
                    2245,
                    967,
                    78,
                    978,
                    1110,
                    2010,
                    2011,
                    1000,
                    108,
                    2030,
                    1393,
                    1140,
                    1015
                ],
                "len": [
                    2048,
                    516,
                    522,
                    533,
                    2070,
                    537,
                    546,
                    1579,
                    1582,
                    559,
                    2099,
                    1589,
                    2102,
                    55,
                    61,
                    1606,
                    77,
                    84,
                    86,
                    90,
                    99,
                    114,
                    117,
                    124,
                    126,
                    132,
                    136,
                    139,
                    658,
                    661,
                    667,
                    676,
                    172,
                    174,
                    175,
                    690,
                    2229,
                    182,
                    184,
                    186,
                    1211,
                    702,
                    705,
                    1223,
                    2250,
                    2253,
                    719,
                    723,
                    2263,
                    2265,
                    2267,
                    740,
                    2285,
                    238,
                    752,
                    242,
                    251,
                    1283,
                    1286,
                    795,
                    798,
                    1311,
                    802,
                    2341,
                    1833,
                    2363,
                    2365,
                    836,
                    1357,
                    849,
                    1875,
                    2395,
                    861,
                    1376,
                    1380,
                    1384,
                    1896,
                    362,
                    1386,
                    887,
                    893,
                    941,
                    970,
                    971,
                    508,
                    2045
                ],
                "ValueError": [
                    256,
                    643,
                    771,
                    517,
                    2051,
                    137,
                    523,
                    782,
                    1425,
                    659,
                    148,
                    534,
                    284,
                    540,
                    796,
                    1565,
                    547,
                    1060,
                    1065,
                    1708,
                    2094,
                    303,
                    1585,
                    563,
                    694,
                    183,
                    56,
                    2105,
                    703,
                    2368,
                    69,
                    2246,
                    79,
                    720,
                    2256,
                    729,
                    1116,
                    93,
                    2014,
                    1759,
                    2269,
                    870,
                    1768,
                    239,
                    243,
                    117,
                    247,
                    505,
                    252,
                    509
                ],
                "exception_prefix": [
                    137,
                    110,
                    80,
                    149,
                    118,
                    57,
                    95
                ],
                "_": [
                    1347,
                    331,
                    684,
                    173,
                    334,
                    690,
                    667,
                    2364,
                    61,
                    2366
                ],
                "range": [
                    385,
                    132,
                    1286,
                    1160,
                    1164,
                    667,
                    802,
                    676,
                    941,
                    690,
                    61,
                    1343,
                    836,
                    1357,
                    849,
                    474,
                    740,
                    1384,
                    2285,
                    1272,
                    124,
                    893
                ],
                "isinstance": [
                    640,
                    768,
                    1274,
                    2058,
                    1294,
                    2062,
                    657,
                    1171,
                    1300,
                    410,
                    794,
                    2333,
                    545,
                    1185,
                    1827,
                    685,
                    2221,
                    175,
                    1200,
                    177,
                    691,
                    181,
                    1718,
                    2360,
                    1596,
                    701,
                    190,
                    62,
                    1214,
                    1345,
                    2111,
                    2113,
                    73,
                    2378,
                    332,
                    1228,
                    718,
                    335,
                    1612,
                    1869,
                    2125,
                    339,
                    1364,
                    1619,
                    726,
                    983,
                    1623,
                    2262,
                    2264,
                    1371,
                    2012,
                    1890,
                    2280,
                    2154,
                    1004,
                    1776,
                    1018
                ],
                "dict": [
                    640,
                    545,
                    768,
                    2113,
                    335,
                    177,
                    691,
                    726,
                    62,
                    190,
                    2264
                ],
                "key": [
                    65,
                    74,
                    76,
                    63
                ],
                "value": [
                    64,
                    65,
                    74,
                    75,
                    76,
                    63
                ],
                "data.items": [
                    63
                ],
                "value.__class__.__name__": [
                    64,
                    75
                ],
                "value.__class__": [
                    64,
                    75
                ],
                "value.values": [
                    65,
                    76
                ],
                "arrays": [
                    128,
                    417,
                    66,
                    422,
                    103,
                    72,
                    135,
                    424,
                    410,
                    408,
                    121,
                    154,
                    125,
                    415
                ],
                "name": [
                    641,
                    642,
                    769,
                    644,
                    770,
                    773,
                    648,
                    649,
                    650,
                    776,
                    781,
                    654,
                    782,
                    656,
                    785,
                    787,
                    791,
                    808,
                    811,
                    815,
                    819,
                    692,
                    693,
                    695,
                    699,
                    700,
                    827,
                    192,
                    193,
                    832,
                    67,
                    68,
                    70,
                    72,
                    337,
                    338,
                    727,
                    728,
                    730,
                    734,
                    735,
                    745,
                    753,
                    758
                ],
                "str": [
                    258,
                    259,
                    518,
                    646,
                    775,
                    2054,
                    139,
                    524,
                    141,
                    661,
                    1429,
                    151,
                    535,
                    153,
                    537,
                    663,
                    1563,
                    285,
                    541,
                    542,
                    798,
                    801,
                    1442,
                    304,
                    305,
                    2097,
                    184,
                    697,
                    186,
                    2108,
                    705,
                    707,
                    2371,
                    71,
                    711,
                    201,
                    2249,
                    723,
                    84,
                    725,
                    86,
                    87,
                    2259,
                    346,
                    732,
                    99,
                    102,
                    1772,
                    1773,
                    113,
                    241,
                    117,
                    245,
                    120,
                    249,
                    250,
                    507,
                    254,
                    511
                ],
                "arrays.append": [
                    72
                ],
                "list": [
                    258,
                    259,
                    1274,
                    657,
                    1171,
                    1300,
                    410,
                    794,
                    1185,
                    685,
                    175,
                    181,
                    701,
                    1214,
                    2111,
                    1345,
                    2114,
                    73,
                    2378,
                    332,
                    1228,
                    718,
                    2125,
                    339,
                    2262,
                    2265,
                    474,
                    1371,
                    2280,
                    2154,
                    246,
                    249,
                    250,
                    255
                ],
                "enumerate": [
                    1347,
                    1349,
                    1375,
                    776,
                    74,
                    1292,
                    1197,
                    142,
                    2385,
                    1362,
                    819,
                    1307,
                    1373,
                    1438,
                    1279
                ],
                "np.asarray": [
                    2281,
                    91,
                    556
                ],
                "np": [
                    1284,
                    1285,
                    1291,
                    1306,
                    552,
                    1194,
                    556,
                    570,
                    572,
                    1361,
                    91,
                    2399,
                    2403,
                    1125,
                    2281,
                    2286,
                    368,
                    370,
                    127
                ],
                "data.__class__.__name__": [
                    105
                ],
                "data.__class__": [
                    105
                ],
                "data.values": [
                    107
                ],
                "TypeError": [
                    738,
                    196,
                    710,
                    109,
                    1205,
                    1206,
                    344,
                    1563
                ],
                "data.shape": [
                    120
                ],
                "i": [
                    124,
                    125,
                    128,
                    132,
                    133,
                    135,
                    136,
                    138,
                    139,
                    142,
                    150,
                    151,
                    676,
                    677,
                    678,
                    679,
                    740,
                    741,
                    744,
                    745,
                    747,
                    2285,
                    2286,
                    754,
                    755,
                    757,
                    760,
                    762,
                    1279,
                    1280,
                    1285,
                    1286,
                    776,
                    777,
                    1307,
                    1308,
                    802,
                    803,
                    807,
                    808,
                    819,
                    820,
                    836,
                    837,
                    838,
                    1349,
                    1350,
                    1357,
                    1358,
                    849,
                    850,
                    2385,
                    852,
                    853,
                    854,
                    855,
                    856,
                    857,
                    858,
                    2386,
                    863,
                    1375,
                    1376,
                    1384,
                    1385,
                    893,
                    894,
                    384,
                    385,
                    897,
                    898,
                    899,
                    900,
                    901,
                    910,
                    912,
                    915,
                    1438,
                    1441,
                    931,
                    932,
                    941,
                    942,
                    943
                ],
                "array": [
                    128,
                    135,
                    136,
                    141,
                    142,
                    153,
                    125,
                    126,
                    127
                ],
                "array.shape": [
                    136,
                    141,
                    142,
                    153,
                    126
                ],
                "np.expand_dims": [
                    127
                ],
                "shapes": [
                    131,
                    133,
                    136,
                    139,
                    142,
                    151
                ],
                "j": [
                    142,
                    143
                ],
                "dim": [
                    147,
                    142
                ],
                "ref_dim": [
                    146,
                    147,
                    142
                ],
                "zip": [
                    1216,
                    1188,
                    1418,
                    301,
                    142,
                    1231,
                    2127,
                    2157,
                    1173,
                    279,
                    1399
                ],
                "check_batch_axis": [
                    143
                ],
                "x_weight": [
                    193,
                    201,
                    172,
                    175,
                    176,
                    177,
                    178,
                    180,
                    181,
                    182,
                    184,
                    189,
                    190
                ],
                "output_names": [
                    192,
                    331,
                    173,
                    174,
                    206,
                    334,
                    177,
                    178,
                    337,
                    212,
                    182,
                    186
                ],
                "weight_type": [
                    199,
                    187,
                    197,
                    183
                ],
                "x_weights": [
                    193,
                    194,
                    191
                ],
                "x_weights.append": [
                    193
                ],
                "x_weight.get": [
                    193
                ],
                "_standardize_sample_or_class_weights": [
                    211,
                    205
                ],
                "class_weight": [
                    545,
                    1825,
                    1572,
                    1414,
                    2123,
                    556,
                    557,
                    205,
                    562
                ],
                "sample_weight": [
                    516,
                    1412,
                    518,
                    522,
                    524,
                    532,
                    533,
                    535,
                    539,
                    541,
                    544,
                    1824,
                    1571,
                    1714,
                    2101,
                    2103,
                    2122,
                    1867,
                    2252,
                    2254,
                    211,
                    2260,
                    855,
                    860
                ],
                "x": [
                    1419,
                    1424,
                    1429,
                    1430,
                    1564,
                    1822,
                    415,
                    1823,
                    417,
                    1569,
                    1570,
                    1828,
                    1830,
                    1707,
                    1712,
                    1713,
                    2100,
                    1719,
                    2103,
                    1721,
                    2364,
                    2366,
                    2111,
                    2112,
                    2113,
                    2114,
                    1603,
                    1604,
                    2116,
                    1606,
                    1607,
                    2375,
                    1865,
                    1866,
                    2121,
                    2251,
                    2377,
                    1870,
                    2254,
                    1872,
                    2260,
                    2262,
                    2263,
                    1624,
                    2264,
                    1626,
                    2265,
                    2267,
                    1758,
                    1888,
                    1763,
                    1891,
                    1893,
                    230,
                    1767,
                    233,
                    1772,
                    241,
                    1777,
                    1779,
                    1404
                ],
                "set": [
                    233,
                    562,
                    561
                ],
                "y": [
                    1408,
                    1418,
                    1419,
                    1420,
                    533,
                    1430,
                    279,
                    537,
                    539,
                    283,
                    285,
                    542,
                    1564,
                    1822,
                    1569,
                    546,
                    1570,
                    1823,
                    549,
                    550,
                    551,
                    552,
                    1828,
                    554,
                    1707,
                    1830,
                    301,
                    304,
                    1712,
                    1713,
                    2100,
                    1719,
                    2103,
                    1721,
                    570,
                    572,
                    1608,
                    1865,
                    1866,
                    2121,
                    2251,
                    1870,
                    2254,
                    1872,
                    2260,
                    1624,
                    1626,
                    233,
                    245,
                    508,
                    511
                ],
                "y.shape": [
                    546,
                    549,
                    551,
                    552,
                    233,
                    301,
                    304,
                    245,
                    533,
                    572,
                    539,
                    537,
                    570,
                    283,
                    508,
                    285,
                    542,
                    511
                ],
                "set_x": [
                    249,
                    235,
                    238,
                    246
                ],
                "set_of_lengths": [
                    235,
                    236,
                    237
                ],
                "inputs": [
                    993,
                    1025,
                    235,
                    1003,
                    1005,
                    1008,
                    241,
                    982,
                    984,
                    1019,
                    1021
                ],
                "set_y": [
                    258,
                    236,
                    242,
                    246,
                    250,
                    255
                ],
                "targets": [
                    236,
                    245,
                    279
                ],
                "set_w": [
                    259,
                    251,
                    237,
                    255
                ],
                "weights": [
                    930,
                    899,
                    935,
                    904,
                    556,
                    237,
                    559,
                    470,
                    567,
                    473,
                    475,
                    476,
                    254
                ],
                "x.shape": [
                    241,
                    2116
                ],
                "w.shape": [
                    254
                ],
                "w": [
                    254
                ],
                "key_losses": [
                    276,
                    300
                ],
                "losses.mean_squared_error": [
                    276
                ],
                "losses": [
                    1400,
                    656,
                    912,
                    915,
                    276,
                    277,
                    278,
                    666,
                    664,
                    282
                ],
                "losses.binary_crossentropy": [
                    912,
                    277
                ],
                "losses.categorical_crossentropy": [
                    282,
                    278
                ],
                "loss": [
                    640,
                    641,
                    663,
                    649,
                    300,
                    664,
                    656,
                    657,
                    306,
                    658,
                    666,
                    279,
                    280,
                    633,
                    282,
                    635
                ],
                "shape": [
                    2112,
                    2114,
                    1604,
                    1063,
                    744,
                    1767,
                    759,
                    1772,
                    301,
                    752,
                    305,
                    1424,
                    1429,
                    279,
                    1112,
                    1305,
                    1306
                ],
                "loss_fns": [
                    279
                ],
                "output_shapes": [
                    1409,
                    1398,
                    279,
                    1401,
                    1403
                ],
                "target_dim": [
                    301,
                    302
                ],
                "out_dim": [
                    301,
                    302
                ],
                "loss.__name__": [
                    306
                ],
                "metrics": [
                    841,
                    330,
                    906,
                    332,
                    334,
                    335,
                    338,
                    882,
                    346
                ],
                "copy.copy": [
                    1638,
                    1636,
                    334
                ],
                "copy": [
                    1638,
                    1636,
                    334
                ],
                "nested_metrics": [
                    900,
                    336,
                    882,
                    341,
                    342
                ],
                "output_metrics": [
                    900,
                    934,
                    338,
                    339,
                    340,
                    341
                ],
                "metrics.get": [
                    338
                ],
                "nested_metrics.append": [
                    341
                ],
                "batch_count": [
                    362,
                    365,
                    366,
                    367
                ],
                "int": [
                    1890,
                    1827,
                    1604,
                    1606,
                    1623,
                    362,
                    2058,
                    1004,
                    1612,
                    1869,
                    1776,
                    1619,
                    1718,
                    983,
                    1018,
                    1596
                ],
                "index_array": [
                    1125,
                    1192,
                    362,
                    1194,
                    1291,
                    365,
                    366,
                    367,
                    368,
                    369,
                    370,
                    1198,
                    1293,
                    1361,
                    1363
                ],
                "batch_size": [
                    384,
                    1290,
                    1423,
                    1424,
                    1555,
                    1556,
                    1182,
                    1059,
                    1574,
                    1192,
                    1705,
                    1706,
                    1196,
                    1716,
                    1333,
                    1595,
                    1725,
                    2112,
                    2114,
                    2116,
                    2118,
                    1226,
                    1360,
                    2263,
                    2265,
                    2267,
                    1756,
                    1757,
                    2268,
                    1121,
                    2274,
                    1767,
                    1256,
                    2151,
                    362,
                    1644,
                    365,
                    366,
                    367,
                    1773,
                    1782,
                    1147,
                    383
                ],
                "last_batch": [
                    370,
                    365
                ],
                "index_array.reshape": [
                    367
                ],
                "np.random.shuffle": [
                    368,
                    1194
                ],
                "np.random": [
                    368,
                    1194
                ],
                "index_array.flatten": [
                    369
                ],
                "np.append": [
                    370
                ],
                "num_batches": [
                    385,
                    383
                ],
                "size": [
                    384,
                    383
                ],
                "min": [
                    384
                ],
                "start": [
                    417,
                    419,
                    420,
                    421,
                    422,
                    423,
                    424,
                    411,
                    413,
                    414,
                    415
                ],
                "start.tolist": [
                    421,
                    414
                ],
                "stop": [
                    424,
                    417
                ],
                "fn": [
                    443,
                    669,
                    459
                ],
                "score_array": [
                    459,
                    464,
                    467,
                    472,
                    474,
                    475,
                    476,
                    477
                ],
                "y_true": [
                    929,
                    897,
                    459,
                    852,
                    859
                ],
                "y_pred": [
                    929,
                    898,
                    459,
                    853,
                    859
                ],
                "mask": [
                    460,
                    462,
                    464,
                    467,
                    856,
                    860
                ],
                "K.cast": [
                    476,
                    462
                ],
                "K": [
                    1025,
                    2058,
                    786,
                    790,
                    928,
                    1827,
                    810,
                    814,
                    1718,
                    826,
                    570,
                    572,
                    1596,
                    831,
                    1612,
                    1869,
                    462,
                    848,
                    467,
                    1619,
                    983,
                    472,
                    473,
                    474,
                    858,
                    476,
                    477,
                    984,
                    986,
                    987,
                    993,
                    1890,
                    1623,
                    1004,
                    1005,
                    750,
                    752,
                    1008,
                    754,
                    755,
                    1776,
                    1018,
                    1019,
                    892
                ],
                "K.floatx": [
                    570,
                    476,
                    462,
                    572
                ],
                "K.mean": [
                    474,
                    467,
                    476,
                    477
                ],
                "ndim": [
                    472,
                    474
                ],
                "K.ndim": [
                    472,
                    473
                ],
                "weight_ndim": [
                    473,
                    474
                ],
                "K.not_equal": [
                    476
                ],
                "weighted": [
                    478
                ],
                "sample_weight_mode": [
                    768,
                    769,
                    795,
                    801,
                    807,
                    781,
                    785,
                    824,
                    503,
                    504,
                    569,
                    794,
                    507,
                    637
                ],
                "sample_weight.shape": [
                    516,
                    518,
                    522,
                    524,
                    533,
                    535,
                    539,
                    541
                ],
                "sample_weight.ndim": [
                    539
                ],
                "y_classes": [
                    550,
                    552,
                    554,
                    556,
                    559,
                    561
                ],
                "y.argmax": [
                    550
                ],
                "np.reshape": [
                    552
                ],
                "cls": [
                    556,
                    557
                ],
                "existing_classes": [
                    561,
                    566
                ],
                "existing_class_weight": [
                    562,
                    566
                ],
                "class_weight.keys": [
                    562
                ],
                "np.ones": [
                    570,
                    572
                ],
                "Container": [
                    575
                ],
                "self.optimizer": [
                    634,
                    987,
                    988
                ],
                "self": [
                    1024,
                    1025,
                    1026,
                    1027,
                    2055,
                    2058,
                    1569,
                    1591,
                    1596,
                    2121,
                    1612,
                    1619,
                    1623,
                    1627,
                    1628,
                    2140,
                    1631,
                    1121,
                    1634,
                    1635,
                    2149,
                    1127,
                    1128,
                    1643,
                    1140,
                    1141,
                    1143,
                    634,
                    635,
                    636,
                    637,
                    2173,
                    642,
                    646,
                    648,
                    658,
                    661,
                    667,
                    668,
                    1181,
                    672,
                    673,
                    674,
                    675,
                    2215,
                    682,
                    684,
                    1712,
                    690,
                    693,
                    1718,
                    697,
                    1722,
                    699,
                    1723,
                    1724,
                    702,
                    705,
                    1225,
                    715,
                    716,
                    719,
                    723,
                    2260,
                    1237,
                    728,
                    732,
                    734,
                    1763,
                    740,
                    1764,
                    742,
                    1766,
                    744,
                    745,
                    1256,
                    1776,
                    754,
                    755,
                    756,
                    757,
                    758,
                    759,
                    760,
                    1780,
                    1781,
                    763,
                    1782,
                    770,
                    775,
                    776,
                    2328,
                    795,
                    798,
                    1822,
                    802,
                    1827,
                    1831,
                    808,
                    1832,
                    819,
                    1333,
                    834,
                    835,
                    836,
                    838,
                    841,
                    842,
                    843,
                    844,
                    1865,
                    1869,
                    2377,
                    849,
                    1873,
                    1874,
                    852,
                    853,
                    858,
                    861,
                    862,
                    863,
                    1888,
                    1889,
                    1890,
                    869,
                    1894,
                    1895,
                    877,
                    1393,
                    882,
                    883,
                    887,
                    888,
                    889,
                    890,
                    1399,
                    1404,
                    893,
                    1405,
                    1408,
                    897,
                    898,
                    1413,
                    1415,
                    1418,
                    1421,
                    910,
                    1422,
                    912,
                    1423,
                    915,
                    1433,
                    938,
                    939,
                    940,
                    941,
                    943,
                    948,
                    950,
                    951,
                    952,
                    955,
                    956,
                    967,
                    970,
                    971,
                    978,
                    980,
                    981,
                    982,
                    983,
                    2004,
                    2006,
                    987,
                    988,
                    989,
                    990,
                    991,
                    993,
                    994,
                    2019,
                    997,
                    2023,
                    1000,
                    2024,
                    1002,
                    1003,
                    1004,
                    2030,
                    2031,
                    1008,
                    1009,
                    1010,
                    2033,
                    1012,
                    1015,
                    1016,
                    1017,
                    1018,
                    1019,
                    1021
                ],
                "optimizers.get": [
                    634
                ],
                "optimizers": [
                    634
                ],
                "optimizer": [
                    634
                ],
                "self.loss": [
                    635
                ],
                "self.loss_weights": [
                    636
                ],
                "loss_weights": [
                    636,
                    707,
                    708,
                    711,
                    689,
                    691,
                    692,
                    700,
                    701,
                    702
                ],
                "self.sample_weight_mode": [
                    637
                ],
                "self.output_names": [
                    642,
                    770,
                    646,
                    775,
                    648,
                    776,
                    802,
                    808,
                    819,
                    693,
                    697,
                    699,
                    728,
                    858,
                    732,
                    734,
                    863,
                    745,
                    882,
                    883,
                    887,
                    888
                ],
                "loss_functions": [
                    647,
                    656,
                    664,
                    667,
                    668,
                    669
                ],
                "warnings.warn": [
                    650,
                    972,
                    2223,
                    2064,
                    1559,
                    2335
                ],
                "warnings": [
                    650,
                    972,
                    2223,
                    2064,
                    1559,
                    2335
                ],
                "loss_functions.append": [
                    656
                ],
                "losses.get": [
                    656,
                    666,
                    664
                ],
                "loss.get": [
                    656
                ],
                "self.outputs": [
                    898,
                    1026,
                    658,
                    661,
                    795,
                    667,
                    798,
                    684,
                    690,
                    702,
                    705,
                    836,
                    719,
                    849,
                    723,
                    853,
                    861,
                    740,
                    754,
                    755,
                    757,
                    893
                ],
                "l": [
                    1216,
                    1217,
                    1188,
                    1189,
                    2157,
                    2158,
                    1231,
                    1232,
                    2127,
                    2128,
                    1173,
                    1174,
                    664
                ],
                "loss_function": [
                    666,
                    667
                ],
                "self.loss_functions": [
                    760,
                    915,
                    668,
                    912
                ],
                "weighted_losses": [
                    676,
                    669,
                    854,
                    677
                ],
                "_weighted_masked_objective": [
                    921,
                    669,
                    925
                ],
                "skip_target_indices": [
                    741,
                    678,
                    670,
                    850,
                    894
                ],
                "skip_target_weighing_indices": [
                    803,
                    837,
                    679,
                    777,
                    942,
                    820,
                    762,
                    671
                ],
                "self._feed_outputs": [
                    672,
                    757
                ],
                "self._feed_output_names": [
                    1408,
                    673,
                    1413,
                    1415,
                    758
                ],
                "self._feed_output_shapes": [
                    674,
                    1399,
                    1422,
                    759
                ],
                "self._feed_loss_fns": [
                    760,
                    675,
                    1421,
                    1399
                ],
                "skip_target_indices.append": [
                    678
                ],
                "skip_target_weighing_indices.append": [
                    762,
                    679
                ],
                "masks": [
                    931,
                    682,
                    683,
                    684,
                    685,
                    686,
                    856
                ],
                "self.compute_mask": [
                    682
                ],
                "self.inputs": [
                    682
                ],
                "loss_weights_list": [
                    708,
                    690,
                    857,
                    698,
                    700
                ],
                "loss_weights_list.append": [
                    700
                ],
                "loss_weights.get": [
                    700
                ],
                "self.targets": [
                    897,
                    742,
                    715,
                    852,
                    763
                ],
                "self._feed_targets": [
                    1003,
                    716,
                    756,
                    982
                ],
                "target_tensors": [
                    736,
                    739,
                    746,
                    747,
                    717,
                    718,
                    719,
                    725,
                    726,
                    727,
                    735
                ],
                "_target_tensors": [
                    736,
                    733,
                    735
                ],
                "_target_tensors.append": [
                    735
                ],
                "target_tensors.get": [
                    735
                ],
                "self.targets.append": [
                    763,
                    742
                ],
                "self.internal_output_shapes": [
                    744,
                    910
                ],
                "target": [
                    747,
                    749,
                    750,
                    751,
                    752,
                    756,
                    763
                ],
                "K.is_placeholder": [
                    750
                ],
                "K.placeholder": [
                    810,
                    814,
                    752,
                    786,
                    790,
                    826,
                    831
                ],
                "K.is_sparse": [
                    754
                ],
                "K.dtype": [
                    755
                ],
                "self._feed_targets.append": [
                    756
                ],
                "self._feed_outputs.append": [
                    757
                ],
                "self._feed_output_names.append": [
                    758
                ],
                "self._feed_output_shapes.append": [
                    759
                ],
                "self._feed_loss_fns.append": [
                    760
                ],
                "sample_weights": [
                    899,
                    1412,
                    1416,
                    1418,
                    1419,
                    1430,
                    793,
                    1822,
                    1569,
                    1828,
                    1830,
                    939,
                    943,
                    1712,
                    817,
                    822,
                    1719,
                    825,
                    1721,
                    830,
                    1609,
                    1610,
                    1611,
                    1865,
                    1870,
                    1872,
                    855,
                    1624,
                    1626,
                    766
                ],
                "sample_weight_modes": [
                    833,
                    834,
                    805,
                    779,
                    812,
                    816,
                    788,
                    821,
                    792,
                    828,
                    767
                ],
                "weight": [
                    804,
                    778,
                    810,
                    814,
                    817,
                    786,
                    790,
                    793
                ],
                "sample_weight_modes.append": [
                    833,
                    805,
                    779,
                    812,
                    816,
                    788,
                    821,
                    792,
                    828
                ],
                "sample_weight_mode.get": [
                    785
                ],
                "sample_weights.append": [
                    817,
                    822,
                    825,
                    793,
                    830
                ],
                "mode": [
                    1416,
                    809,
                    1417,
                    807
                ],
                "self.sample_weight_modes": [
                    834,
                    838
                ],
                "self._feed_sample_weight_modes": [
                    1418,
                    835,
                    838
                ],
                "self._feed_sample_weight_modes.append": [
                    838
                ],
                "self.metrics": [
                    841
                ],
                "self.weighted_metrics": [
                    842
                ],
                "weighted_metrics": [
                    842,
                    883
                ],
                "self.metrics_names": [
                    889,
                    1433,
                    843,
                    863
                ],
                "self.metrics_tensors": [
                    994,
                    844,
                    1009,
                    890,
                    862
                ],
                "total_loss": [
                    864,
                    865,
                    867,
                    868,
                    873,
                    938,
                    878,
                    847
                ],
                "K.name_scope": [
                    928,
                    848,
                    986,
                    987,
                    892,
                    858
                ],
                "weighted_loss": [
                    859,
                    854
                ],
                "loss_weight": [
                    857,
                    867,
                    865
                ],
                "output_loss": [
                    867,
                    865,
                    859,
                    862
                ],
                "self.metrics_tensors.append": [
                    890,
                    862
                ],
                "self.metrics_names.append": [
                    889,
                    863
                ],
                "self.losses": [
                    877,
                    869
                ],
                "loss_tensor": [
                    877,
                    878
                ],
                "_collect_metrics": [
                    882,
                    883
                ],
                "nested_weighted_metrics": [
                    883,
                    901
                ],
                "metric_name": [
                    928,
                    932,
                    888,
                    889,
                    922,
                    926
                ],
                "layer_index": [
                    888
                ],
                "metric_tensor": [
                    890
                ],
                "output_weighted_metrics": [
                    901,
                    935
                ],
                "metric_name_prefix": [
                    904,
                    922,
                    926
                ],
                "metric": [
                    906,
                    907,
                    924
                ],
                "output_shape": [
                    910,
                    911,
                    1399,
                    1401,
                    1403
                ],
                "acc_fn": [
                    921,
                    914,
                    917,
                    919
                ],
                "metrics_module.binary_accuracy": [
                    914
                ],
                "metrics_module": [
                    914,
                    924,
                    917,
                    919
                ],
                "losses.sparse_categorical_crossentropy": [
                    1400,
                    915
                ],
                "metrics_module.sparse_categorical_accuracy": [
                    917
                ],
                "metrics_module.categorical_accuracy": [
                    919
                ],
                "weighted_metric_fn": [
                    921,
                    929,
                    925
                ],
                "metric_fn": [
                    924,
                    925,
                    926
                ],
                "metrics_module.get": [
                    924
                ],
                "metric_fn.__name__": [
                    926
                ],
                "metric_result": [
                    929,
                    932
                ],
                "append_metric": [
                    932
                ],
                "handle_metrics": [
                    934,
                    935
                ],
                "self.total_loss": [
                    1009,
                    938,
                    994,
                    990
                ],
                "self.sample_weights": [
                    939,
                    941
                ],
                "self._feed_sample_weights": [
                    1003,
                    940,
                    982,
                    943
                ],
                "self._feed_sample_weights.append": [
                    943
                ],
                "self._function_kwargs": [
                    1012,
                    948,
                    997
                ],
                "kwargs": [
                    1024,
                    1029,
                    948,
                    1558,
                    1561,
                    1562,
                    1563
                ],
                "self.train_function": [
                    993,
                    1832,
                    981,
                    950,
                    1628
                ],
                "self.test_function": [
                    1635,
                    1002,
                    1008,
                    1874,
                    951,
                    1723
                ],
                "self.predict_function": [
                    1025,
                    1895,
                    1781,
                    952,
                    1016,
                    1017
                ],
                "trainable_weights": [
                    955,
                    956
                ],
                "self.trainable_weights": [
                    970,
                    955
                ],
                "self._collected_trainable_weights": [
                    971,
                    956,
                    989
                ],
                "UserWarning": [
                    2224,
                    2065,
                    2336,
                    972
                ],
                "RuntimeError": [
                    1001,
                    1394,
                    979
                ],
                "self._check_trainable_weights_consistency": [
                    980
                ],
                "self._feed_inputs": [
                    1003,
                    1021,
                    982,
                    1019
                ],
                "self.uses_learning_phase": [
                    1890,
                    1827,
                    1623,
                    2058,
                    1004,
                    1612,
                    1869,
                    1776,
                    1619,
                    1718,
                    983,
                    1018,
                    1596
                ],
                "K.learning_phase": [
                    1890,
                    1827,
                    1623,
                    2058,
                    1004,
                    1005,
                    1612,
                    1869,
                    1776,
                    1619,
                    1718,
                    983,
                    984,
                    1018,
                    1019,
                    1596
                ],
                "self.optimizer.__class__.__name__": [
                    987
                ],
                "self.optimizer.__class__": [
                    987
                ],
                "training_updates": [
                    988,
                    991
                ],
                "self.optimizer.get_updates": [
                    988
                ],
                "updates": [
                    995,
                    991
                ],
                "self.updates": [
                    991
                ],
                "K.function": [
                    1008,
                    993,
                    1025
                ],
                "self.state_updates": [
                    1010,
                    1027
                ],
                "getattr": [
                    1024
                ],
                "steps": [
                    1057,
                    2341,
                    1705,
                    1707,
                    2356,
                    2229,
                    1334,
                    2358,
                    1338,
                    1339,
                    1342,
                    1727,
                    1343,
                    2243,
                    1358,
                    1756,
                    1758,
                    1257,
                    1260,
                    1261,
                    1264,
                    1783,
                    1272
                ],
                "num_samples": [
                    1058,
                    1063,
                    1256,
                    1385,
                    1290,
                    1291,
                    1068,
                    1263,
                    1360,
                    1361,
                    1333,
                    1305,
                    1341
                ],
                "steps_name": [
                    1066,
                    1060
                ],
                "ins": [
                    1294,
                    1296,
                    1169,
                    1298,
                    1828,
                    1062,
                    1063,
                    1830,
                    1832,
                    1200,
                    1202,
                    1204,
                    1333,
                    1719,
                    1721,
                    1724,
                    1344,
                    1870,
                    1872,
                    1874,
                    1364,
                    1110,
                    1366,
                    1368,
                    1112,
                    1624,
                    1626,
                    1121,
                    1891,
                    1893,
                    1895,
                    1256,
                    1643,
                    1777,
                    1779,
                    1782,
                    1273
                ],
                "do_validation": [
                    1152,
                    1633,
                    1602,
                    2138,
                    1224,
                    1576,
                    1578,
                    2044,
                    1618,
                    1107,
                    2003,
                    1109,
                    2005,
                    2039,
                    1114,
                    1180
                ],
                "val_f": [
                    1635,
                    1639,
                    1225,
                    1646,
                    1108,
                    1181
                ],
                "val_ins": [
                    1597,
                    1158,
                    1640,
                    1225,
                    1613,
                    1646,
                    1615,
                    1108,
                    1620,
                    1110,
                    1112,
                    1181,
                    1599
                ],
                "verbose": [
                    1281,
                    1382,
                    1129,
                    2025,
                    1259,
                    1355,
                    1645,
                    2355,
                    2388,
                    1110,
                    1783,
                    2038,
                    1337,
                    1309,
                    1726,
                    1151
                ],
                "print": [
                    1111
                ],
                "validation_steps": [
                    1617,
                    1650,
                    1113,
                    2013,
                    2142,
                    1183
                ],
                "steps_per_epoch": [
                    1122,
                    1130,
                    1163,
                    1164,
                    2090,
                    1649,
                    1555,
                    2037,
                    2070,
                    2138,
                    1115,
                    1564,
                    1149
                ],
                "num_train_samples": [
                    1121,
                    1124,
                    1125,
                    1196,
                    1150
                ],
                "self._check_num_samples": [
                    1256,
                    1121,
                    1333
                ],
                "np.arange": [
                    1361,
                    1291,
                    1125
                ],
                "self.history": [
                    2023,
                    1128,
                    2024,
                    1127,
                    1237,
                    2173
                ],
                "cbks.History": [
                    2023,
                    1127
                ],
                "cbks": [
                    2023,
                    1128,
                    1127,
                    2024,
                    2026,
                    2027,
                    1134,
                    1135
                ],
                "callbacks": [
                    1155,
                    1157,
                    1161,
                    2060,
                    1168,
                    1176,
                    2042,
                    2087,
                    1212,
                    1219,
                    2119,
                    1233,
                    2130,
                    1236,
                    1128,
                    2024,
                    2026,
                    2027,
                    1645,
                    1134,
                    1135,
                    2034,
                    2035,
                    2163,
                    1145,
                    1146,
                    2172
                ],
                "cbks.BaseLogger": [
                    1128,
                    2024
                ],
                "count_mode": [
                    1131,
                    1133,
                    1134
                ],
                "cbks.ProgbarLogger": [
                    2026,
                    1134
                ],
                "cbks.CallbackList": [
                    2027,
                    1135
                ],
                "out_labels": [
                    1216,
                    1440,
                    1441,
                    2019,
                    1188,
                    1636,
                    1638,
                    2020,
                    1643,
                    2157,
                    1231,
                    1136,
                    2127,
                    1173,
                    1433,
                    1438,
                    1631
                ],
                "self.callback_model": [
                    1140,
                    1141,
                    2030,
                    2031
                ],
                "callback_model": [
                    1177,
                    1156,
                    1220,
                    2085,
                    2031,
                    2160,
                    2033,
                    1234,
                    2034,
                    1141,
                    2165,
                    1143,
                    1145
                ],
                "callbacks.set_model": [
                    1145,
                    2034
                ],
                "callbacks.set_params": [
                    1146,
                    2035
                ],
                "epochs": [
                    2086,
                    1160,
                    1644,
                    2036,
                    1561,
                    1148
                ],
                "callback_metrics": [
                    1153,
                    1636,
                    2020,
                    1638,
                    1647,
                    2040
                ],
                "callbacks.on_train_begin": [
                    2042,
                    1155
                ],
                "callback_model.stop_training": [
                    1220,
                    1156,
                    2085,
                    2160,
                    1234,
                    2165,
                    1177
                ],
                "cbk": [
                    2061,
                    2060,
                    1157,
                    1158
                ],
                "cbk.validation_data": [
                    2061,
                    1158
                ],
                "epoch": [
                    2086,
                    2087,
                    1160,
                    1161,
                    1233,
                    2001,
                    2163,
                    2164
                ],
                "initial_epoch": [
                    1160,
                    2001,
                    1648
                ],
                "callbacks.on_epoch_begin": [
                    1161,
                    2087
                ],
                "epoch_logs": [
                    1189,
                    1162,
                    2158,
                    1232,
                    1233,
                    2163,
                    2133
                ],
                "step_index": [
                    1168,
                    1164,
                    1176,
                    1166
                ],
                "batch_logs": [
                    1217,
                    1219,
                    2117,
                    2118,
                    2119,
                    1165,
                    1166,
                    1167,
                    1168,
                    2128,
                    2130,
                    1174,
                    1176,
                    1209,
                    1210,
                    1211,
                    1212,
                    2110
                ],
                "callbacks.on_batch_begin": [
                    1168,
                    1212,
                    2119
                ],
                "outs": [
                    1289,
                    1169,
                    1171,
                    1172,
                    1173,
                    1306,
                    1308,
                    1311,
                    1312,
                    1313,
                    1336,
                    1213,
                    1214,
                    1215,
                    1216,
                    1348,
                    1350,
                    1353,
                    1354,
                    2121,
                    2377,
                    1357,
                    1358,
                    2125,
                    2126,
                    2127,
                    2378,
                    2379,
                    2260,
                    2382,
                    2385,
                    1374,
                    2271,
                    1376,
                    1379,
                    1380,
                    1384,
                    1385,
                    1386,
                    1387,
                    1388,
                    2280,
                    2285
                ],
                "f": [
                    1344,
                    1724,
                    1643,
                    1169,
                    1299,
                    1781,
                    1782,
                    1273,
                    1370,
                    1723,
                    1628,
                    1213
                ],
                "o": [
                    1216,
                    1217,
                    1188,
                    1189,
                    2157,
                    2158,
                    1231,
                    1232,
                    2127,
                    2128,
                    1173,
                    1174
                ],
                "callbacks.on_batch_end": [
                    1176,
                    2130,
                    1219
                ],
                "val_outs": [
                    1185,
                    1186,
                    1188,
                    2149,
                    1225,
                    2154,
                    2155,
                    1228,
                    1229,
                    2157,
                    1231,
                    2140,
                    1181
                ],
                "self._test_loop": [
                    1225,
                    1724,
                    1181
                ],
                "shuffle": [
                    1193,
                    2077,
                    1646,
                    1191
                ],
                "_batch_shuffle": [
                    1192
                ],
                "batches": [
                    1223,
                    1290,
                    1292,
                    1196,
                    1197,
                    1360,
                    1362
                ],
                "_make_batches": [
                    1360,
                    1290,
                    1196
                ],
                "batch_index": [
                    1378,
                    1219,
                    2117,
                    1223,
                    2119,
                    2089,
                    1292,
                    1197,
                    1362,
                    2130,
                    1302,
                    1372,
                    2134,
                    1210,
                    1212
                ],
                "batch_start": [
                    1292,
                    1293,
                    1197,
                    1198,
                    1362,
                    1363,
                    1308
                ],
                "batch_end": [
                    1383,
                    1292,
                    1293,
                    1197,
                    1198,
                    1362,
                    1363,
                    1308,
                    1310
                ],
                "batch_ids": [
                    1376,
                    1380,
                    1293,
                    1198,
                    1296,
                    1202,
                    1298,
                    1204,
                    1363,
                    1366,
                    1368,
                    1211
                ],
                "float": [
                    1200,
                    1364,
                    1294
                ],
                "ins_batch": [
                    1296,
                    1202,
                    1298,
                    1204,
                    1299,
                    1366,
                    1368,
                    1370,
                    1213
                ],
                "_slice_arrays": [
                    1607,
                    1608,
                    1610,
                    1611,
                    1296,
                    1202,
                    1298,
                    1204,
                    1366,
                    1368
                ],
                "callbacks.on_epoch_end": [
                    1233,
                    2163
                ],
                "callbacks.on_train_end": [
                    2172,
                    1236
                ],
                "progbar": [
                    1282,
                    1383,
                    1356,
                    1261,
                    1263,
                    2356,
                    2389,
                    1339,
                    1341,
                    1310
                ],
                "Progbar": [
                    1261,
                    1263,
                    2356,
                    1339,
                    1341
                ],
                "unconcatenated_outs": [
                    1280,
                    1283,
                    1284,
                    1285,
                    1286,
                    1271,
                    1278
                ],
                "step": [
                    1282,
                    1346,
                    1352,
                    1356,
                    1272,
                    1276,
                    1343
                ],
                "batch_outs": [
                    1299,
                    1300,
                    1301,
                    1304,
                    1307,
                    1344,
                    1345,
                    1347,
                    1349,
                    1354,
                    1370,
                    1371,
                    1373,
                    1375,
                    1380,
                    1273,
                    1274,
                    1275,
                    1277,
                    1279
                ],
                "batch_out": [
                    1280,
                    1376,
                    1349,
                    1350,
                    1375,
                    1373,
                    1304,
                    1305,
                    1306,
                    1307,
                    1308,
                    1277,
                    1279
                ],
                "unconcatenated_outs.append": [
                    1278
                ],
                "append": [
                    1280,
                    2386
                ],
                "progbar.update": [
                    1282,
                    1383,
                    1356,
                    2389,
                    1310
                ],
                "np.concatenate": [
                    2403,
                    1284,
                    1285,
                    2399
                ],
                "batch_out.shape": [
                    1305
                ],
                "outs.append": [
                    1379,
                    1348,
                    1353,
                    1306,
                    1374
                ],
                "np.zeros": [
                    1306
                ],
                "batch_out.dtype": [
                    1306
                ],
                "loss_fn": [
                    1400,
                    1399
                ],
                "output_shapes.append": [
                    1401,
                    1403
                ],
                "_standardize_input_data": [
                    1408,
                    1763,
                    1404,
                    1888
                ],
                "self._feed_input_names": [
                    1888,
                    1763,
                    1404
                ],
                "self._feed_input_shapes": [
                    1889,
                    1764,
                    1405
                ],
                "_standardize_sample_weights": [
                    1412
                ],
                "class_weights": [
                    1418,
                    1414
                ],
                "_standardize_class_weights": [
                    1414
                ],
                "_standardize_weights": [
                    1416
                ],
                "ref": [
                    1416,
                    1417
                ],
                "sw": [
                    1416,
                    1417
                ],
                "cw": [
                    1416,
                    1417
                ],
                "_check_array_lengths": [
                    1419
                ],
                "_check_loss_and_target_compatibility": [
                    1420
                ],
                "self.stateful": [
                    1766,
                    1423
                ],
                "deduped_out_labels": [
                    1443,
                    1444,
                    1437
                ],
                "label": [
                    1440,
                    1441,
                    1438,
                    1439
                ],
                "new_label": [
                    1442,
                    1443,
                    1439
                ],
                "out_labels.count": [
                    1440
                ],
                "dup_idx": [
                    1441,
                    1442
                ],
                "count": [
                    1441
                ],
                "deduped_out_labels.append": [
                    1443
                ],
                "kwargs.pop": [
                    1561
                ],
                "self._standardize_user_data": [
                    1569,
                    2055,
                    1865,
                    1712,
                    1591,
                    1822
                ],
                "validation_data": [
                    2048,
                    2049,
                    2054,
                    1577,
                    1579,
                    1580,
                    1582,
                    1583,
                    2003,
                    2141,
                    1589,
                    2010,
                    2011,
                    2012,
                    2045,
                    2046
                ],
                "val_x": [
                    2049,
                    2150,
                    1607,
                    2055,
                    2056,
                    2057,
                    1580,
                    1613,
                    1583,
                    1615,
                    1591,
                    1592,
                    1597,
                    2046,
                    1599
                ],
                "val_y": [
                    2049,
                    2150,
                    2055,
                    1608,
                    2056,
                    2057,
                    1580,
                    1613,
                    1583,
                    1615,
                    1591,
                    1592,
                    1597,
                    2046,
                    1599
                ],
                "val_sample_weight": [
                    2049,
                    2056,
                    1581,
                    1583,
                    1593,
                    2047
                ],
                "val_sample_weights": [
                    2055,
                    2152,
                    1609,
                    2057,
                    1613,
                    1615,
                    1591,
                    1597,
                    1599
                ],
                "validation_split": [
                    1601,
                    1604,
                    1606
                ],
                "split_at": [
                    1604,
                    1606,
                    1607,
                    1608,
                    1610,
                    1611
                ],
                "self._make_train_function": [
                    1627,
                    2004,
                    1831
                ],
                "self._get_deduped_metrics_names": [
                    2019,
                    1631
                ],
                "self._make_test_function": [
                    1634,
                    2215,
                    1873,
                    2006,
                    1722
                ],
                "n": [
                    1636,
                    2020
                ],
                "self._fit_loop": [
                    1643
                ],
                "self._make_predict_function": [
                    2328,
                    1780,
                    1894
                ],
                "self._predict_loop": [
                    1782
                ],
                "outputs": [
                    1895,
                    1832,
                    1833,
                    1834,
                    1835,
                    1896,
                    1897,
                    1898,
                    1874,
                    1875,
                    1876,
                    1877
                ],
                "wait_time": [
                    2081,
                    2218,
                    2351,
                    2000,
                    2331,
                    2239
                ],
                "bool": [
                    2003
                ],
                "val_gen": [
                    2010,
                    2139,
                    2044,
                    2013
                ],
                "Sequence": [
                    2333,
                    2012,
                    2221,
                    2062
                ],
                "val_data": [
                    2057,
                    2059,
                    2061
                ],
                "is_sequence": [
                    2340,
                    2345,
                    2221,
                    2062,
                    2063,
                    2222,
                    2228,
                    2069,
                    2233,
                    2074,
                    2333,
                    2334
                ],
                "generator": [
                    2333,
                    2341,
                    2346,
                    2221,
                    2062,
                    2349,
                    2229,
                    2070,
                    2234,
                    2075,
                    2237,
                    2079
                ],
                "use_multiprocessing": [
                    2080,
                    2145,
                    2347,
                    2222,
                    2063,
                    2350,
                    2235,
                    2076,
                    2238,
                    2334
                ],
                "workers": [
                    2144,
                    2240,
                    2082,
                    2222,
                    2063,
                    2352,
                    2334
                ],
                "enqueuer": [
                    2071,
                    2075,
                    2079,
                    2082,
                    2083,
                    2342,
                    2346,
                    2349,
                    2352,
                    2353,
                    2230,
                    2234,
                    2237,
                    2240,
                    2241,
                    2392,
                    2393,
                    2277,
                    2278,
                    2169,
                    2170
                ],
                "OrderedEnqueuer": [
                    2234,
                    2075,
                    2346
                ],
                "GeneratorEnqueuer": [
                    2349,
                    2237,
                    2079
                ],
                "enqueuer.start": [
                    2240,
                    2082,
                    2352
                ],
                "max_queue_size": [
                    2240,
                    2082,
                    2352,
                    2143
                ],
                "output_generator": [
                    2241,
                    2083,
                    2244,
                    2091,
                    2353,
                    2359
                ],
                "enqueuer.get": [
                    2241,
                    2083,
                    2353
                ],
                "steps_done": [
                    2400,
                    2273,
                    2243,
                    2088,
                    2217,
                    2090,
                    2330,
                    2387,
                    2389,
                    2358,
                    2135,
                    2138,
                    2396
                ],
                "generator_output": [
                    2091,
                    2093,
                    2097,
                    2099,
                    2100,
                    2102,
                    2103,
                    2360,
                    2359,
                    2363,
                    2108,
                    2364,
                    2365,
                    2366,
                    2371,
                    2244,
                    2245,
                    2375,
                    2249,
                    2250,
                    2251,
                    2253,
                    2254,
                    2259
                ],
                "next": [
                    2091,
                    2244,
                    2359
                ],
                "x.values": [
                    2265,
                    2114
                ],
                "self.train_on_batch": [
                    2121
                ],
                "self.evaluate_generator": [
                    2140
                ],
                "self.evaluate": [
                    2149
                ],
                "enqueuer.stop": [
                    2393,
                    2170,
                    2278
                ],
                "interfaces.legacy_generator_methods_support": [
                    2290,
                    1900,
                    2175
                ],
                "interfaces": [
                    2290,
                    1900,
                    2175
                ],
                "all_outs": [
                    2401,
                    2403,
                    2399,
                    2281,
                    2219,
                    2381,
                    2286,
                    2383,
                    2386,
                    2395,
                    2332,
                    2397,
                    2271
                ],
                "batch_sizes": [
                    2274,
                    2220,
                    2282,
                    2287
                ],
                "self.test_on_batch": [
                    2260
                ],
                "all_outs.append": [
                    2383,
                    2271
                ],
                "batch_sizes.append": [
                    2274
                ],
                "np.average": [
                    2281,
                    2286
                ],
                "averages": [
                    2288,
                    2284,
                    2286
                ],
                "averages.append": [
                    2286
                ],
                "out": [
                    2401,
                    2403,
                    2382,
                    2286,
                    2385,
                    2386
                ],
                "tuple": [
                    2360
                ],
                "self.predict_on_batch": [
                    2377
                ]
            },
            "filtered_variables_in_file": {
                "names": [
                    67,
                    99,
                    132,
                    71,
                    138,
                    77,
                    114,
                    84,
                    117,
                    54,
                    150,
                    90,
                    124,
                    61
                ],
                "data": [
                    55,
                    58,
                    60,
                    62,
                    63,
                    65,
                    68,
                    72,
                    73,
                    74,
                    76,
                    77,
                    78,
                    86,
                    87,
                    91,
                    102,
                    103,
                    105,
                    107,
                    108,
                    113,
                    120,
                    121
                ],
                "exception_prefix": [
                    137,
                    110,
                    80,
                    149,
                    118,
                    57,
                    95
                ],
                "_": [
                    1347,
                    331,
                    684,
                    173,
                    334,
                    690,
                    667,
                    2364,
                    61,
                    2366
                ],
                "key": [
                    65,
                    74,
                    76,
                    63
                ],
                "value": [
                    64,
                    65,
                    74,
                    75,
                    76,
                    63
                ],
                "data.items": [
                    63
                ],
                "value.__class__.__name__": [
                    64,
                    75
                ],
                "value.__class__": [
                    64,
                    75
                ],
                "value.values": [
                    65,
                    76
                ],
                "arrays": [
                    128,
                    417,
                    66,
                    422,
                    103,
                    72,
                    135,
                    424,
                    410,
                    408,
                    121,
                    154,
                    125,
                    415
                ],
                "name": [
                    641,
                    642,
                    769,
                    644,
                    770,
                    773,
                    648,
                    649,
                    650,
                    776,
                    781,
                    654,
                    782,
                    656,
                    785,
                    787,
                    791,
                    808,
                    811,
                    815,
                    819,
                    692,
                    693,
                    695,
                    699,
                    700,
                    827,
                    192,
                    193,
                    832,
                    67,
                    68,
                    70,
                    72,
                    337,
                    338,
                    727,
                    728,
                    730,
                    734,
                    735,
                    745,
                    753,
                    758
                ],
                "arrays.append": [
                    72
                ],
                "np.asarray": [
                    2281,
                    91,
                    556
                ],
                "np": [
                    1284,
                    1285,
                    1291,
                    1306,
                    552,
                    1194,
                    556,
                    570,
                    572,
                    1361,
                    91,
                    2399,
                    2403,
                    1125,
                    2281,
                    2286,
                    368,
                    370,
                    127
                ],
                "data.__class__.__name__": [
                    105
                ],
                "data.__class__": [
                    105
                ],
                "data.values": [
                    107
                ],
                "data.shape": [
                    120
                ],
                "i": [
                    124,
                    125,
                    128,
                    132,
                    133,
                    135,
                    136,
                    138,
                    139,
                    142,
                    150,
                    151,
                    676,
                    677,
                    678,
                    679,
                    740,
                    741,
                    744,
                    745,
                    747,
                    2285,
                    2286,
                    754,
                    755,
                    757,
                    760,
                    762,
                    1279,
                    1280,
                    1285,
                    1286,
                    776,
                    777,
                    1307,
                    1308,
                    802,
                    803,
                    807,
                    808,
                    819,
                    820,
                    836,
                    837,
                    838,
                    1349,
                    1350,
                    1357,
                    1358,
                    849,
                    850,
                    2385,
                    852,
                    853,
                    854,
                    855,
                    856,
                    857,
                    858,
                    2386,
                    863,
                    1375,
                    1376,
                    1384,
                    1385,
                    893,
                    894,
                    384,
                    385,
                    897,
                    898,
                    899,
                    900,
                    901,
                    910,
                    912,
                    915,
                    1438,
                    1441,
                    931,
                    932,
                    941,
                    942,
                    943
                ],
                "array": [
                    128,
                    135,
                    136,
                    141,
                    142,
                    153,
                    125,
                    126,
                    127
                ],
                "array.shape": [
                    136,
                    141,
                    142,
                    153,
                    126
                ],
                "np.expand_dims": [
                    127
                ],
                "shapes": [
                    131,
                    133,
                    136,
                    139,
                    142,
                    151
                ],
                "j": [
                    142,
                    143
                ],
                "dim": [
                    147,
                    142
                ],
                "ref_dim": [
                    146,
                    147,
                    142
                ],
                "check_batch_axis": [
                    143
                ],
                "x_weight": [
                    193,
                    201,
                    172,
                    175,
                    176,
                    177,
                    178,
                    180,
                    181,
                    182,
                    184,
                    189,
                    190
                ],
                "output_names": [
                    192,
                    331,
                    173,
                    174,
                    206,
                    334,
                    177,
                    178,
                    337,
                    212,
                    182,
                    186
                ],
                "weight_type": [
                    199,
                    187,
                    197,
                    183
                ],
                "x_weights": [
                    193,
                    194,
                    191
                ],
                "x_weights.append": [
                    193
                ],
                "x_weight.get": [
                    193
                ],
                "_standardize_sample_or_class_weights": [
                    211,
                    205
                ],
                "class_weight": [
                    545,
                    1825,
                    1572,
                    1414,
                    2123,
                    556,
                    557,
                    205,
                    562
                ],
                "sample_weight": [
                    516,
                    1412,
                    518,
                    522,
                    524,
                    532,
                    533,
                    535,
                    539,
                    541,
                    544,
                    1824,
                    1571,
                    1714,
                    2101,
                    2103,
                    2122,
                    1867,
                    2252,
                    2254,
                    211,
                    2260,
                    855,
                    860
                ],
                "x": [
                    1419,
                    1424,
                    1429,
                    1430,
                    1564,
                    1822,
                    415,
                    1823,
                    417,
                    1569,
                    1570,
                    1828,
                    1830,
                    1707,
                    1712,
                    1713,
                    2100,
                    1719,
                    2103,
                    1721,
                    2364,
                    2366,
                    2111,
                    2112,
                    2113,
                    2114,
                    1603,
                    1604,
                    2116,
                    1606,
                    1607,
                    2375,
                    1865,
                    1866,
                    2121,
                    2251,
                    2377,
                    1870,
                    2254,
                    1872,
                    2260,
                    2262,
                    2263,
                    1624,
                    2264,
                    1626,
                    2265,
                    2267,
                    1758,
                    1888,
                    1763,
                    1891,
                    1893,
                    230,
                    1767,
                    233,
                    1772,
                    241,
                    1777,
                    1779,
                    1404
                ],
                "y": [
                    1408,
                    1418,
                    1419,
                    1420,
                    533,
                    1430,
                    279,
                    537,
                    539,
                    283,
                    285,
                    542,
                    1564,
                    1822,
                    1569,
                    546,
                    1570,
                    1823,
                    549,
                    550,
                    551,
                    552,
                    1828,
                    554,
                    1707,
                    1830,
                    301,
                    304,
                    1712,
                    1713,
                    2100,
                    1719,
                    2103,
                    1721,
                    570,
                    572,
                    1608,
                    1865,
                    1866,
                    2121,
                    2251,
                    1870,
                    2254,
                    1872,
                    2260,
                    1624,
                    1626,
                    233,
                    245,
                    508,
                    511
                ],
                "y.shape": [
                    546,
                    549,
                    551,
                    552,
                    233,
                    301,
                    304,
                    245,
                    533,
                    572,
                    539,
                    537,
                    570,
                    283,
                    508,
                    285,
                    542,
                    511
                ],
                "set_x": [
                    249,
                    235,
                    238,
                    246
                ],
                "set_of_lengths": [
                    235,
                    236,
                    237
                ],
                "inputs": [
                    993,
                    1025,
                    235,
                    1003,
                    1005,
                    1008,
                    241,
                    982,
                    984,
                    1019,
                    1021
                ],
                "set_y": [
                    258,
                    236,
                    242,
                    246,
                    250,
                    255
                ],
                "targets": [
                    236,
                    245,
                    279
                ],
                "set_w": [
                    259,
                    251,
                    237,
                    255
                ],
                "weights": [
                    930,
                    899,
                    935,
                    904,
                    556,
                    237,
                    559,
                    470,
                    567,
                    473,
                    475,
                    476,
                    254
                ],
                "x.shape": [
                    241,
                    2116
                ],
                "w.shape": [
                    254
                ],
                "w": [
                    254
                ],
                "key_losses": [
                    276,
                    300
                ],
                "losses.mean_squared_error": [
                    276
                ],
                "losses": [
                    1400,
                    656,
                    912,
                    915,
                    276,
                    277,
                    278,
                    666,
                    664,
                    282
                ],
                "losses.binary_crossentropy": [
                    912,
                    277
                ],
                "losses.categorical_crossentropy": [
                    282,
                    278
                ],
                "loss": [
                    640,
                    641,
                    663,
                    649,
                    300,
                    664,
                    656,
                    657,
                    306,
                    658,
                    666,
                    279,
                    280,
                    633,
                    282,
                    635
                ],
                "shape": [
                    2112,
                    2114,
                    1604,
                    1063,
                    744,
                    1767,
                    759,
                    1772,
                    301,
                    752,
                    305,
                    1424,
                    1429,
                    279,
                    1112,
                    1305,
                    1306
                ],
                "loss_fns": [
                    279
                ],
                "output_shapes": [
                    1409,
                    1398,
                    279,
                    1401,
                    1403
                ],
                "target_dim": [
                    301,
                    302
                ],
                "out_dim": [
                    301,
                    302
                ],
                "loss.__name__": [
                    306
                ],
                "metrics": [
                    841,
                    330,
                    906,
                    332,
                    334,
                    335,
                    338,
                    882,
                    346
                ],
                "copy.copy": [
                    1638,
                    1636,
                    334
                ],
                "copy": [
                    1638,
                    1636,
                    334
                ],
                "nested_metrics": [
                    900,
                    336,
                    882,
                    341,
                    342
                ],
                "output_metrics": [
                    900,
                    934,
                    338,
                    339,
                    340,
                    341
                ],
                "metrics.get": [
                    338
                ],
                "nested_metrics.append": [
                    341
                ],
                "batch_count": [
                    362,
                    365,
                    366,
                    367
                ],
                "index_array": [
                    1125,
                    1192,
                    362,
                    1194,
                    1291,
                    365,
                    366,
                    367,
                    368,
                    369,
                    370,
                    1198,
                    1293,
                    1361,
                    1363
                ],
                "batch_size": [
                    384,
                    1290,
                    1423,
                    1424,
                    1555,
                    1556,
                    1182,
                    1059,
                    1574,
                    1192,
                    1705,
                    1706,
                    1196,
                    1716,
                    1333,
                    1595,
                    1725,
                    2112,
                    2114,
                    2116,
                    2118,
                    1226,
                    1360,
                    2263,
                    2265,
                    2267,
                    1756,
                    1757,
                    2268,
                    1121,
                    2274,
                    1767,
                    1256,
                    2151,
                    362,
                    1644,
                    365,
                    366,
                    367,
                    1773,
                    1782,
                    1147,
                    383
                ],
                "last_batch": [
                    370,
                    365
                ],
                "index_array.reshape": [
                    367
                ],
                "np.random.shuffle": [
                    368,
                    1194
                ],
                "np.random": [
                    368,
                    1194
                ],
                "index_array.flatten": [
                    369
                ],
                "np.append": [
                    370
                ],
                "num_batches": [
                    385,
                    383
                ],
                "size": [
                    384,
                    383
                ],
                "start": [
                    417,
                    419,
                    420,
                    421,
                    422,
                    423,
                    424,
                    411,
                    413,
                    414,
                    415
                ],
                "start.tolist": [
                    421,
                    414
                ],
                "stop": [
                    424,
                    417
                ],
                "fn": [
                    443,
                    669,
                    459
                ],
                "score_array": [
                    459,
                    464,
                    467,
                    472,
                    474,
                    475,
                    476,
                    477
                ],
                "y_true": [
                    929,
                    897,
                    459,
                    852,
                    859
                ],
                "y_pred": [
                    929,
                    898,
                    459,
                    853,
                    859
                ],
                "mask": [
                    460,
                    462,
                    464,
                    467,
                    856,
                    860
                ],
                "K.cast": [
                    476,
                    462
                ],
                "K": [
                    1025,
                    2058,
                    786,
                    790,
                    928,
                    1827,
                    810,
                    814,
                    1718,
                    826,
                    570,
                    572,
                    1596,
                    831,
                    1612,
                    1869,
                    462,
                    848,
                    467,
                    1619,
                    983,
                    472,
                    473,
                    474,
                    858,
                    476,
                    477,
                    984,
                    986,
                    987,
                    993,
                    1890,
                    1623,
                    1004,
                    1005,
                    750,
                    752,
                    1008,
                    754,
                    755,
                    1776,
                    1018,
                    1019,
                    892
                ],
                "K.floatx": [
                    570,
                    476,
                    462,
                    572
                ],
                "K.mean": [
                    474,
                    467,
                    476,
                    477
                ],
                "ndim": [
                    472,
                    474
                ],
                "K.ndim": [
                    472,
                    473
                ],
                "weight_ndim": [
                    473,
                    474
                ],
                "K.not_equal": [
                    476
                ],
                "weighted": [
                    478
                ],
                "sample_weight_mode": [
                    768,
                    769,
                    795,
                    801,
                    807,
                    781,
                    785,
                    824,
                    503,
                    504,
                    569,
                    794,
                    507,
                    637
                ],
                "sample_weight.shape": [
                    516,
                    518,
                    522,
                    524,
                    533,
                    535,
                    539,
                    541
                ],
                "sample_weight.ndim": [
                    539
                ],
                "y_classes": [
                    550,
                    552,
                    554,
                    556,
                    559,
                    561
                ],
                "y.argmax": [
                    550
                ],
                "np.reshape": [
                    552
                ],
                "cls": [
                    556,
                    557
                ],
                "existing_classes": [
                    561,
                    566
                ],
                "existing_class_weight": [
                    562,
                    566
                ],
                "class_weight.keys": [
                    562
                ],
                "np.ones": [
                    570,
                    572
                ],
                "Container": [
                    575
                ],
                "self.optimizer": [
                    634,
                    987,
                    988
                ],
                "self": [
                    1024,
                    1025,
                    1026,
                    1027,
                    2055,
                    2058,
                    1569,
                    1591,
                    1596,
                    2121,
                    1612,
                    1619,
                    1623,
                    1627,
                    1628,
                    2140,
                    1631,
                    1121,
                    1634,
                    1635,
                    2149,
                    1127,
                    1128,
                    1643,
                    1140,
                    1141,
                    1143,
                    634,
                    635,
                    636,
                    637,
                    2173,
                    642,
                    646,
                    648,
                    658,
                    661,
                    667,
                    668,
                    1181,
                    672,
                    673,
                    674,
                    675,
                    2215,
                    682,
                    684,
                    1712,
                    690,
                    693,
                    1718,
                    697,
                    1722,
                    699,
                    1723,
                    1724,
                    702,
                    705,
                    1225,
                    715,
                    716,
                    719,
                    723,
                    2260,
                    1237,
                    728,
                    732,
                    734,
                    1763,
                    740,
                    1764,
                    742,
                    1766,
                    744,
                    745,
                    1256,
                    1776,
                    754,
                    755,
                    756,
                    757,
                    758,
                    759,
                    760,
                    1780,
                    1781,
                    763,
                    1782,
                    770,
                    775,
                    776,
                    2328,
                    795,
                    798,
                    1822,
                    802,
                    1827,
                    1831,
                    808,
                    1832,
                    819,
                    1333,
                    834,
                    835,
                    836,
                    838,
                    841,
                    842,
                    843,
                    844,
                    1865,
                    1869,
                    2377,
                    849,
                    1873,
                    1874,
                    852,
                    853,
                    858,
                    861,
                    862,
                    863,
                    1888,
                    1889,
                    1890,
                    869,
                    1894,
                    1895,
                    877,
                    1393,
                    882,
                    883,
                    887,
                    888,
                    889,
                    890,
                    1399,
                    1404,
                    893,
                    1405,
                    1408,
                    897,
                    898,
                    1413,
                    1415,
                    1418,
                    1421,
                    910,
                    1422,
                    912,
                    1423,
                    915,
                    1433,
                    938,
                    939,
                    940,
                    941,
                    943,
                    948,
                    950,
                    951,
                    952,
                    955,
                    956,
                    967,
                    970,
                    971,
                    978,
                    980,
                    981,
                    982,
                    983,
                    2004,
                    2006,
                    987,
                    988,
                    989,
                    990,
                    991,
                    993,
                    994,
                    2019,
                    997,
                    2023,
                    1000,
                    2024,
                    1002,
                    1003,
                    1004,
                    2030,
                    2031,
                    1008,
                    1009,
                    1010,
                    2033,
                    1012,
                    1015,
                    1016,
                    1017,
                    1018,
                    1019,
                    1021
                ],
                "optimizers.get": [
                    634
                ],
                "optimizers": [
                    634
                ],
                "optimizer": [
                    634
                ],
                "self.loss": [
                    635
                ],
                "self.loss_weights": [
                    636
                ],
                "loss_weights": [
                    636,
                    707,
                    708,
                    711,
                    689,
                    691,
                    692,
                    700,
                    701,
                    702
                ],
                "self.sample_weight_mode": [
                    637
                ],
                "self.output_names": [
                    642,
                    770,
                    646,
                    775,
                    648,
                    776,
                    802,
                    808,
                    819,
                    693,
                    697,
                    699,
                    728,
                    858,
                    732,
                    734,
                    863,
                    745,
                    882,
                    883,
                    887,
                    888
                ],
                "loss_functions": [
                    647,
                    656,
                    664,
                    667,
                    668,
                    669
                ],
                "warnings.warn": [
                    650,
                    972,
                    2223,
                    2064,
                    1559,
                    2335
                ],
                "warnings": [
                    650,
                    972,
                    2223,
                    2064,
                    1559,
                    2335
                ],
                "loss_functions.append": [
                    656
                ],
                "losses.get": [
                    656,
                    666,
                    664
                ],
                "loss.get": [
                    656
                ],
                "self.outputs": [
                    898,
                    1026,
                    658,
                    661,
                    795,
                    667,
                    798,
                    684,
                    690,
                    702,
                    705,
                    836,
                    719,
                    849,
                    723,
                    853,
                    861,
                    740,
                    754,
                    755,
                    757,
                    893
                ],
                "l": [
                    1216,
                    1217,
                    1188,
                    1189,
                    2157,
                    2158,
                    1231,
                    1232,
                    2127,
                    2128,
                    1173,
                    1174,
                    664
                ],
                "loss_function": [
                    666,
                    667
                ],
                "self.loss_functions": [
                    760,
                    915,
                    668,
                    912
                ],
                "weighted_losses": [
                    676,
                    669,
                    854,
                    677
                ],
                "_weighted_masked_objective": [
                    921,
                    669,
                    925
                ],
                "skip_target_indices": [
                    741,
                    678,
                    670,
                    850,
                    894
                ],
                "skip_target_weighing_indices": [
                    803,
                    837,
                    679,
                    777,
                    942,
                    820,
                    762,
                    671
                ],
                "self._feed_outputs": [
                    672,
                    757
                ],
                "self._feed_output_names": [
                    1408,
                    673,
                    1413,
                    1415,
                    758
                ],
                "self._feed_output_shapes": [
                    674,
                    1399,
                    1422,
                    759
                ],
                "self._feed_loss_fns": [
                    760,
                    675,
                    1421,
                    1399
                ],
                "skip_target_indices.append": [
                    678
                ],
                "skip_target_weighing_indices.append": [
                    762,
                    679
                ],
                "masks": [
                    931,
                    682,
                    683,
                    684,
                    685,
                    686,
                    856
                ],
                "self.compute_mask": [
                    682
                ],
                "self.inputs": [
                    682
                ],
                "loss_weights_list": [
                    708,
                    690,
                    857,
                    698,
                    700
                ],
                "loss_weights_list.append": [
                    700
                ],
                "loss_weights.get": [
                    700
                ],
                "self.targets": [
                    897,
                    742,
                    715,
                    852,
                    763
                ],
                "self._feed_targets": [
                    1003,
                    716,
                    756,
                    982
                ],
                "target_tensors": [
                    736,
                    739,
                    746,
                    747,
                    717,
                    718,
                    719,
                    725,
                    726,
                    727,
                    735
                ],
                "_target_tensors": [
                    736,
                    733,
                    735
                ],
                "_target_tensors.append": [
                    735
                ],
                "target_tensors.get": [
                    735
                ],
                "self.targets.append": [
                    763,
                    742
                ],
                "self.internal_output_shapes": [
                    744,
                    910
                ],
                "target": [
                    747,
                    749,
                    750,
                    751,
                    752,
                    756,
                    763
                ],
                "K.is_placeholder": [
                    750
                ],
                "K.placeholder": [
                    810,
                    814,
                    752,
                    786,
                    790,
                    826,
                    831
                ],
                "K.is_sparse": [
                    754
                ],
                "K.dtype": [
                    755
                ],
                "self._feed_targets.append": [
                    756
                ],
                "self._feed_outputs.append": [
                    757
                ],
                "self._feed_output_names.append": [
                    758
                ],
                "self._feed_output_shapes.append": [
                    759
                ],
                "self._feed_loss_fns.append": [
                    760
                ],
                "sample_weights": [
                    899,
                    1412,
                    1416,
                    1418,
                    1419,
                    1430,
                    793,
                    1822,
                    1569,
                    1828,
                    1830,
                    939,
                    943,
                    1712,
                    817,
                    822,
                    1719,
                    825,
                    1721,
                    830,
                    1609,
                    1610,
                    1611,
                    1865,
                    1870,
                    1872,
                    855,
                    1624,
                    1626,
                    766
                ],
                "sample_weight_modes": [
                    833,
                    834,
                    805,
                    779,
                    812,
                    816,
                    788,
                    821,
                    792,
                    828,
                    767
                ],
                "weight": [
                    804,
                    778,
                    810,
                    814,
                    817,
                    786,
                    790,
                    793
                ],
                "sample_weight_modes.append": [
                    833,
                    805,
                    779,
                    812,
                    816,
                    788,
                    821,
                    792,
                    828
                ],
                "sample_weight_mode.get": [
                    785
                ],
                "sample_weights.append": [
                    817,
                    822,
                    825,
                    793,
                    830
                ],
                "mode": [
                    1416,
                    809,
                    1417,
                    807
                ],
                "self.sample_weight_modes": [
                    834,
                    838
                ],
                "self._feed_sample_weight_modes": [
                    1418,
                    835,
                    838
                ],
                "self._feed_sample_weight_modes.append": [
                    838
                ],
                "self.metrics": [
                    841
                ],
                "self.weighted_metrics": [
                    842
                ],
                "weighted_metrics": [
                    842,
                    883
                ],
                "self.metrics_names": [
                    889,
                    1433,
                    843,
                    863
                ],
                "self.metrics_tensors": [
                    994,
                    844,
                    1009,
                    890,
                    862
                ],
                "total_loss": [
                    864,
                    865,
                    867,
                    868,
                    873,
                    938,
                    878,
                    847
                ],
                "K.name_scope": [
                    928,
                    848,
                    986,
                    987,
                    892,
                    858
                ],
                "weighted_loss": [
                    859,
                    854
                ],
                "loss_weight": [
                    857,
                    867,
                    865
                ],
                "output_loss": [
                    867,
                    865,
                    859,
                    862
                ],
                "self.metrics_tensors.append": [
                    890,
                    862
                ],
                "self.metrics_names.append": [
                    889,
                    863
                ],
                "self.losses": [
                    877,
                    869
                ],
                "loss_tensor": [
                    877,
                    878
                ],
                "_collect_metrics": [
                    882,
                    883
                ],
                "nested_weighted_metrics": [
                    883,
                    901
                ],
                "metric_name": [
                    928,
                    932,
                    888,
                    889,
                    922,
                    926
                ],
                "layer_index": [
                    888
                ],
                "metric_tensor": [
                    890
                ],
                "output_weighted_metrics": [
                    901,
                    935
                ],
                "metric_name_prefix": [
                    904,
                    922,
                    926
                ],
                "metric": [
                    906,
                    907,
                    924
                ],
                "output_shape": [
                    910,
                    911,
                    1399,
                    1401,
                    1403
                ],
                "acc_fn": [
                    921,
                    914,
                    917,
                    919
                ],
                "metrics_module.binary_accuracy": [
                    914
                ],
                "metrics_module": [
                    914,
                    924,
                    917,
                    919
                ],
                "losses.sparse_categorical_crossentropy": [
                    1400,
                    915
                ],
                "metrics_module.sparse_categorical_accuracy": [
                    917
                ],
                "metrics_module.categorical_accuracy": [
                    919
                ],
                "weighted_metric_fn": [
                    921,
                    929,
                    925
                ],
                "metric_fn": [
                    924,
                    925,
                    926
                ],
                "metrics_module.get": [
                    924
                ],
                "metric_fn.__name__": [
                    926
                ],
                "metric_result": [
                    929,
                    932
                ],
                "append_metric": [
                    932
                ],
                "handle_metrics": [
                    934,
                    935
                ],
                "self.total_loss": [
                    1009,
                    938,
                    994,
                    990
                ],
                "self.sample_weights": [
                    939,
                    941
                ],
                "self._feed_sample_weights": [
                    1003,
                    940,
                    982,
                    943
                ],
                "self._feed_sample_weights.append": [
                    943
                ],
                "self._function_kwargs": [
                    1012,
                    948,
                    997
                ],
                "kwargs": [
                    1024,
                    1029,
                    948,
                    1558,
                    1561,
                    1562,
                    1563
                ],
                "self.train_function": [
                    993,
                    1832,
                    981,
                    950,
                    1628
                ],
                "self.test_function": [
                    1635,
                    1002,
                    1008,
                    1874,
                    951,
                    1723
                ],
                "self.predict_function": [
                    1025,
                    1895,
                    1781,
                    952,
                    1016,
                    1017
                ],
                "trainable_weights": [
                    955,
                    956
                ],
                "self.trainable_weights": [
                    970,
                    955
                ],
                "self._collected_trainable_weights": [
                    971,
                    956,
                    989
                ],
                "self._check_trainable_weights_consistency": [
                    980
                ],
                "self._feed_inputs": [
                    1003,
                    1021,
                    982,
                    1019
                ],
                "self.uses_learning_phase": [
                    1890,
                    1827,
                    1623,
                    2058,
                    1004,
                    1612,
                    1869,
                    1776,
                    1619,
                    1718,
                    983,
                    1018,
                    1596
                ],
                "K.learning_phase": [
                    1890,
                    1827,
                    1623,
                    2058,
                    1004,
                    1005,
                    1612,
                    1869,
                    1776,
                    1619,
                    1718,
                    983,
                    984,
                    1018,
                    1019,
                    1596
                ],
                "self.optimizer.__class__.__name__": [
                    987
                ],
                "self.optimizer.__class__": [
                    987
                ],
                "training_updates": [
                    988,
                    991
                ],
                "self.optimizer.get_updates": [
                    988
                ],
                "updates": [
                    995,
                    991
                ],
                "self.updates": [
                    991
                ],
                "K.function": [
                    1008,
                    993,
                    1025
                ],
                "self.state_updates": [
                    1010,
                    1027
                ],
                "steps": [
                    1057,
                    2341,
                    1705,
                    1707,
                    2356,
                    2229,
                    1334,
                    2358,
                    1338,
                    1339,
                    1342,
                    1727,
                    1343,
                    2243,
                    1358,
                    1756,
                    1758,
                    1257,
                    1260,
                    1261,
                    1264,
                    1783,
                    1272
                ],
                "num_samples": [
                    1058,
                    1063,
                    1256,
                    1385,
                    1290,
                    1291,
                    1068,
                    1263,
                    1360,
                    1361,
                    1333,
                    1305,
                    1341
                ],
                "steps_name": [
                    1066,
                    1060
                ],
                "ins": [
                    1294,
                    1296,
                    1169,
                    1298,
                    1828,
                    1062,
                    1063,
                    1830,
                    1832,
                    1200,
                    1202,
                    1204,
                    1333,
                    1719,
                    1721,
                    1724,
                    1344,
                    1870,
                    1872,
                    1874,
                    1364,
                    1110,
                    1366,
                    1368,
                    1112,
                    1624,
                    1626,
                    1121,
                    1891,
                    1893,
                    1895,
                    1256,
                    1643,
                    1777,
                    1779,
                    1782,
                    1273
                ],
                "do_validation": [
                    1152,
                    1633,
                    1602,
                    2138,
                    1224,
                    1576,
                    1578,
                    2044,
                    1618,
                    1107,
                    2003,
                    1109,
                    2005,
                    2039,
                    1114,
                    1180
                ],
                "val_f": [
                    1635,
                    1639,
                    1225,
                    1646,
                    1108,
                    1181
                ],
                "val_ins": [
                    1597,
                    1158,
                    1640,
                    1225,
                    1613,
                    1646,
                    1615,
                    1108,
                    1620,
                    1110,
                    1112,
                    1181,
                    1599
                ],
                "verbose": [
                    1281,
                    1382,
                    1129,
                    2025,
                    1259,
                    1355,
                    1645,
                    2355,
                    2388,
                    1110,
                    1783,
                    2038,
                    1337,
                    1309,
                    1726,
                    1151
                ],
                "validation_steps": [
                    1617,
                    1650,
                    1113,
                    2013,
                    2142,
                    1183
                ],
                "steps_per_epoch": [
                    1122,
                    1130,
                    1163,
                    1164,
                    2090,
                    1649,
                    1555,
                    2037,
                    2070,
                    2138,
                    1115,
                    1564,
                    1149
                ],
                "num_train_samples": [
                    1121,
                    1124,
                    1125,
                    1196,
                    1150
                ],
                "self._check_num_samples": [
                    1256,
                    1121,
                    1333
                ],
                "np.arange": [
                    1361,
                    1291,
                    1125
                ],
                "self.history": [
                    2023,
                    1128,
                    2024,
                    1127,
                    1237,
                    2173
                ],
                "cbks.History": [
                    2023,
                    1127
                ],
                "cbks": [
                    2023,
                    1128,
                    1127,
                    2024,
                    2026,
                    2027,
                    1134,
                    1135
                ],
                "callbacks": [
                    1155,
                    1157,
                    1161,
                    2060,
                    1168,
                    1176,
                    2042,
                    2087,
                    1212,
                    1219,
                    2119,
                    1233,
                    2130,
                    1236,
                    1128,
                    2024,
                    2026,
                    2027,
                    1645,
                    1134,
                    1135,
                    2034,
                    2035,
                    2163,
                    1145,
                    1146,
                    2172
                ],
                "cbks.BaseLogger": [
                    1128,
                    2024
                ],
                "count_mode": [
                    1131,
                    1133,
                    1134
                ],
                "cbks.ProgbarLogger": [
                    2026,
                    1134
                ],
                "cbks.CallbackList": [
                    2027,
                    1135
                ],
                "out_labels": [
                    1216,
                    1440,
                    1441,
                    2019,
                    1188,
                    1636,
                    1638,
                    2020,
                    1643,
                    2157,
                    1231,
                    1136,
                    2127,
                    1173,
                    1433,
                    1438,
                    1631
                ],
                "self.callback_model": [
                    1140,
                    1141,
                    2030,
                    2031
                ],
                "callback_model": [
                    1177,
                    1156,
                    1220,
                    2085,
                    2031,
                    2160,
                    2033,
                    1234,
                    2034,
                    1141,
                    2165,
                    1143,
                    1145
                ],
                "callbacks.set_model": [
                    1145,
                    2034
                ],
                "callbacks.set_params": [
                    1146,
                    2035
                ],
                "epochs": [
                    2086,
                    1160,
                    1644,
                    2036,
                    1561,
                    1148
                ],
                "callback_metrics": [
                    1153,
                    1636,
                    2020,
                    1638,
                    1647,
                    2040
                ],
                "callbacks.on_train_begin": [
                    2042,
                    1155
                ],
                "callback_model.stop_training": [
                    1220,
                    1156,
                    2085,
                    2160,
                    1234,
                    2165,
                    1177
                ],
                "cbk": [
                    2061,
                    2060,
                    1157,
                    1158
                ],
                "cbk.validation_data": [
                    2061,
                    1158
                ],
                "epoch": [
                    2086,
                    2087,
                    1160,
                    1161,
                    1233,
                    2001,
                    2163,
                    2164
                ],
                "initial_epoch": [
                    1160,
                    2001,
                    1648
                ],
                "callbacks.on_epoch_begin": [
                    1161,
                    2087
                ],
                "epoch_logs": [
                    1189,
                    1162,
                    2158,
                    1232,
                    1233,
                    2163,
                    2133
                ],
                "step_index": [
                    1168,
                    1164,
                    1176,
                    1166
                ],
                "batch_logs": [
                    1217,
                    1219,
                    2117,
                    2118,
                    2119,
                    1165,
                    1166,
                    1167,
                    1168,
                    2128,
                    2130,
                    1174,
                    1176,
                    1209,
                    1210,
                    1211,
                    1212,
                    2110
                ],
                "callbacks.on_batch_begin": [
                    1168,
                    1212,
                    2119
                ],
                "outs": [
                    1289,
                    1169,
                    1171,
                    1172,
                    1173,
                    1306,
                    1308,
                    1311,
                    1312,
                    1313,
                    1336,
                    1213,
                    1214,
                    1215,
                    1216,
                    1348,
                    1350,
                    1353,
                    1354,
                    2121,
                    2377,
                    1357,
                    1358,
                    2125,
                    2126,
                    2127,
                    2378,
                    2379,
                    2260,
                    2382,
                    2385,
                    1374,
                    2271,
                    1376,
                    1379,
                    1380,
                    1384,
                    1385,
                    1386,
                    1387,
                    1388,
                    2280,
                    2285
                ],
                "f": [
                    1344,
                    1724,
                    1643,
                    1169,
                    1299,
                    1781,
                    1782,
                    1273,
                    1370,
                    1723,
                    1628,
                    1213
                ],
                "o": [
                    1216,
                    1217,
                    1188,
                    1189,
                    2157,
                    2158,
                    1231,
                    1232,
                    2127,
                    2128,
                    1173,
                    1174
                ],
                "callbacks.on_batch_end": [
                    1176,
                    2130,
                    1219
                ],
                "val_outs": [
                    1185,
                    1186,
                    1188,
                    2149,
                    1225,
                    2154,
                    2155,
                    1228,
                    1229,
                    2157,
                    1231,
                    2140,
                    1181
                ],
                "self._test_loop": [
                    1225,
                    1724,
                    1181
                ],
                "shuffle": [
                    1193,
                    2077,
                    1646,
                    1191
                ],
                "_batch_shuffle": [
                    1192
                ],
                "batches": [
                    1223,
                    1290,
                    1292,
                    1196,
                    1197,
                    1360,
                    1362
                ],
                "_make_batches": [
                    1360,
                    1290,
                    1196
                ],
                "batch_index": [
                    1378,
                    1219,
                    2117,
                    1223,
                    2119,
                    2089,
                    1292,
                    1197,
                    1362,
                    2130,
                    1302,
                    1372,
                    2134,
                    1210,
                    1212
                ],
                "batch_start": [
                    1292,
                    1293,
                    1197,
                    1198,
                    1362,
                    1363,
                    1308
                ],
                "batch_end": [
                    1383,
                    1292,
                    1293,
                    1197,
                    1198,
                    1362,
                    1363,
                    1308,
                    1310
                ],
                "batch_ids": [
                    1376,
                    1380,
                    1293,
                    1198,
                    1296,
                    1202,
                    1298,
                    1204,
                    1363,
                    1366,
                    1368,
                    1211
                ],
                "ins_batch": [
                    1296,
                    1202,
                    1298,
                    1204,
                    1299,
                    1366,
                    1368,
                    1370,
                    1213
                ],
                "_slice_arrays": [
                    1607,
                    1608,
                    1610,
                    1611,
                    1296,
                    1202,
                    1298,
                    1204,
                    1366,
                    1368
                ],
                "callbacks.on_epoch_end": [
                    1233,
                    2163
                ],
                "callbacks.on_train_end": [
                    2172,
                    1236
                ],
                "progbar": [
                    1282,
                    1383,
                    1356,
                    1261,
                    1263,
                    2356,
                    2389,
                    1339,
                    1341,
                    1310
                ],
                "Progbar": [
                    1261,
                    1263,
                    2356,
                    1339,
                    1341
                ],
                "unconcatenated_outs": [
                    1280,
                    1283,
                    1284,
                    1285,
                    1286,
                    1271,
                    1278
                ],
                "step": [
                    1282,
                    1346,
                    1352,
                    1356,
                    1272,
                    1276,
                    1343
                ],
                "batch_outs": [
                    1299,
                    1300,
                    1301,
                    1304,
                    1307,
                    1344,
                    1345,
                    1347,
                    1349,
                    1354,
                    1370,
                    1371,
                    1373,
                    1375,
                    1380,
                    1273,
                    1274,
                    1275,
                    1277,
                    1279
                ],
                "batch_out": [
                    1280,
                    1376,
                    1349,
                    1350,
                    1375,
                    1373,
                    1304,
                    1305,
                    1306,
                    1307,
                    1308,
                    1277,
                    1279
                ],
                "unconcatenated_outs.append": [
                    1278
                ],
                "append": [
                    1280,
                    2386
                ],
                "progbar.update": [
                    1282,
                    1383,
                    1356,
                    2389,
                    1310
                ],
                "np.concatenate": [
                    2403,
                    1284,
                    1285,
                    2399
                ],
                "batch_out.shape": [
                    1305
                ],
                "outs.append": [
                    1379,
                    1348,
                    1353,
                    1306,
                    1374
                ],
                "np.zeros": [
                    1306
                ],
                "batch_out.dtype": [
                    1306
                ],
                "loss_fn": [
                    1400,
                    1399
                ],
                "output_shapes.append": [
                    1401,
                    1403
                ],
                "_standardize_input_data": [
                    1408,
                    1763,
                    1404,
                    1888
                ],
                "self._feed_input_names": [
                    1888,
                    1763,
                    1404
                ],
                "self._feed_input_shapes": [
                    1889,
                    1764,
                    1405
                ],
                "_standardize_sample_weights": [
                    1412
                ],
                "class_weights": [
                    1418,
                    1414
                ],
                "_standardize_class_weights": [
                    1414
                ],
                "_standardize_weights": [
                    1416
                ],
                "ref": [
                    1416,
                    1417
                ],
                "sw": [
                    1416,
                    1417
                ],
                "cw": [
                    1416,
                    1417
                ],
                "_check_array_lengths": [
                    1419
                ],
                "_check_loss_and_target_compatibility": [
                    1420
                ],
                "self.stateful": [
                    1766,
                    1423
                ],
                "deduped_out_labels": [
                    1443,
                    1444,
                    1437
                ],
                "label": [
                    1440,
                    1441,
                    1438,
                    1439
                ],
                "new_label": [
                    1442,
                    1443,
                    1439
                ],
                "out_labels.count": [
                    1440
                ],
                "dup_idx": [
                    1441,
                    1442
                ],
                "count": [
                    1441
                ],
                "deduped_out_labels.append": [
                    1443
                ],
                "kwargs.pop": [
                    1561
                ],
                "self._standardize_user_data": [
                    1569,
                    2055,
                    1865,
                    1712,
                    1591,
                    1822
                ],
                "validation_data": [
                    2048,
                    2049,
                    2054,
                    1577,
                    1579,
                    1580,
                    1582,
                    1583,
                    2003,
                    2141,
                    1589,
                    2010,
                    2011,
                    2012,
                    2045,
                    2046
                ],
                "val_x": [
                    2049,
                    2150,
                    1607,
                    2055,
                    2056,
                    2057,
                    1580,
                    1613,
                    1583,
                    1615,
                    1591,
                    1592,
                    1597,
                    2046,
                    1599
                ],
                "val_y": [
                    2049,
                    2150,
                    2055,
                    1608,
                    2056,
                    2057,
                    1580,
                    1613,
                    1583,
                    1615,
                    1591,
                    1592,
                    1597,
                    2046,
                    1599
                ],
                "val_sample_weight": [
                    2049,
                    2056,
                    1581,
                    1583,
                    1593,
                    2047
                ],
                "val_sample_weights": [
                    2055,
                    2152,
                    1609,
                    2057,
                    1613,
                    1615,
                    1591,
                    1597,
                    1599
                ],
                "validation_split": [
                    1601,
                    1604,
                    1606
                ],
                "split_at": [
                    1604,
                    1606,
                    1607,
                    1608,
                    1610,
                    1611
                ],
                "self._make_train_function": [
                    1627,
                    2004,
                    1831
                ],
                "self._get_deduped_metrics_names": [
                    2019,
                    1631
                ],
                "self._make_test_function": [
                    1634,
                    2215,
                    1873,
                    2006,
                    1722
                ],
                "n": [
                    1636,
                    2020
                ],
                "self._fit_loop": [
                    1643
                ],
                "self._make_predict_function": [
                    2328,
                    1780,
                    1894
                ],
                "self._predict_loop": [
                    1782
                ],
                "outputs": [
                    1895,
                    1832,
                    1833,
                    1834,
                    1835,
                    1896,
                    1897,
                    1898,
                    1874,
                    1875,
                    1876,
                    1877
                ],
                "wait_time": [
                    2081,
                    2218,
                    2351,
                    2000,
                    2331,
                    2239
                ],
                "val_gen": [
                    2010,
                    2139,
                    2044,
                    2013
                ],
                "Sequence": [
                    2333,
                    2012,
                    2221,
                    2062
                ],
                "val_data": [
                    2057,
                    2059,
                    2061
                ],
                "is_sequence": [
                    2340,
                    2345,
                    2221,
                    2062,
                    2063,
                    2222,
                    2228,
                    2069,
                    2233,
                    2074,
                    2333,
                    2334
                ],
                "generator": [
                    2333,
                    2341,
                    2346,
                    2221,
                    2062,
                    2349,
                    2229,
                    2070,
                    2234,
                    2075,
                    2237,
                    2079
                ],
                "use_multiprocessing": [
                    2080,
                    2145,
                    2347,
                    2222,
                    2063,
                    2350,
                    2235,
                    2076,
                    2238,
                    2334
                ],
                "workers": [
                    2144,
                    2240,
                    2082,
                    2222,
                    2063,
                    2352,
                    2334
                ],
                "enqueuer": [
                    2071,
                    2075,
                    2079,
                    2082,
                    2083,
                    2342,
                    2346,
                    2349,
                    2352,
                    2353,
                    2230,
                    2234,
                    2237,
                    2240,
                    2241,
                    2392,
                    2393,
                    2277,
                    2278,
                    2169,
                    2170
                ],
                "OrderedEnqueuer": [
                    2234,
                    2075,
                    2346
                ],
                "GeneratorEnqueuer": [
                    2349,
                    2237,
                    2079
                ],
                "enqueuer.start": [
                    2240,
                    2082,
                    2352
                ],
                "max_queue_size": [
                    2240,
                    2082,
                    2352,
                    2143
                ],
                "output_generator": [
                    2241,
                    2083,
                    2244,
                    2091,
                    2353,
                    2359
                ],
                "enqueuer.get": [
                    2241,
                    2083,
                    2353
                ],
                "steps_done": [
                    2400,
                    2273,
                    2243,
                    2088,
                    2217,
                    2090,
                    2330,
                    2387,
                    2389,
                    2358,
                    2135,
                    2138,
                    2396
                ],
                "generator_output": [
                    2091,
                    2093,
                    2097,
                    2099,
                    2100,
                    2102,
                    2103,
                    2360,
                    2359,
                    2363,
                    2108,
                    2364,
                    2365,
                    2366,
                    2371,
                    2244,
                    2245,
                    2375,
                    2249,
                    2250,
                    2251,
                    2253,
                    2254,
                    2259
                ],
                "x.values": [
                    2265,
                    2114
                ],
                "self.train_on_batch": [
                    2121
                ],
                "self.evaluate_generator": [
                    2140
                ],
                "self.evaluate": [
                    2149
                ],
                "enqueuer.stop": [
                    2393,
                    2170,
                    2278
                ],
                "interfaces.legacy_generator_methods_support": [
                    2290,
                    1900,
                    2175
                ],
                "interfaces": [
                    2290,
                    1900,
                    2175
                ],
                "all_outs": [
                    2401,
                    2403,
                    2399,
                    2281,
                    2219,
                    2381,
                    2286,
                    2383,
                    2386,
                    2395,
                    2332,
                    2397,
                    2271
                ],
                "batch_sizes": [
                    2274,
                    2220,
                    2282,
                    2287
                ],
                "self.test_on_batch": [
                    2260
                ],
                "all_outs.append": [
                    2383,
                    2271
                ],
                "batch_sizes.append": [
                    2274
                ],
                "np.average": [
                    2281,
                    2286
                ],
                "averages": [
                    2288,
                    2284,
                    2286
                ],
                "averages.append": [
                    2286
                ],
                "out": [
                    2401,
                    2403,
                    2382,
                    2286,
                    2385,
                    2386
                ],
                "self.predict_on_batch": [
                    2377
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/keras_42/keras/models.py": {
            "buggy_functions": [
                {
                    "function_name": "fit_generator",
                    "function_code": "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator,\n                  steps_per_epoch,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"Fits the model on data generated batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    # Arguments\n        generator: A generator.\n            The output of the generator must be either\n            - a tuple (inputs, targets)\n            - a tuple (inputs, targets, sample_weights).\n            All arrays should contain the same number of samples.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n        epochs: Integer, total number of iterations on the data.\n            Note that in conjunction with initial_epoch, the parameter\n            epochs is to be understood as \"final epoch\". The model is\n            not trained for n steps given by epochs, but until the\n            epoch epochs is reached.\n        verbose: Verbosity mode, 0, 1, or 2.\n        callbacks: List of callbacks to be called during training.\n        validation_data: This can be either\n            - A generator for the validation data\n            - A tuple (inputs, targets)\n            - A tuple (inputs, targets, sample_weights).\n        validation_steps: Only relevant if `validation_data`\n            is a generator.\n            Number of steps to yield from validation generator\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n        class_weight: Dictionary mapping class indices to a weight\n            for the class.\n        max_queue_size: Maximum size for the generator queue\n        workers: Maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (keras.utils.Sequence).\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                f = open(path)\n                for line in f:\n                    # create Numpy arrays of input data\n                    # and labels, from each line in the file\n                    x, y = process_line(line)\n                    yield (x, y)\n                f.close()\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=1000, epochs=10)\n    ```\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled '\n                           'before being used.')\n    return self.model.fit_generator(generator,\n                                    steps_per_epoch,\n                                    epochs,\n                                    verbose=verbose,\n                                    callbacks=callbacks,\n                                    validation_data=validation_data,\n                                    validation_steps=validation_steps,\n                                    class_weight=class_weight,\n                                    max_queue_size=max_queue_size,\n                                    workers=workers,\n                                    use_multiprocessing=use_multiprocessing,\n                                    shuffle=shuffle,\n                                    initial_epoch=initial_epoch)\n",
                    "decorators": [
                        "interfaces.legacy_generator_methods_support"
                    ],
                    "docstring": "Fits the model on data generated batch-by-batch by a Python generator.\n\nThe generator is run in parallel to the model, for efficiency.\nFor instance, this allows you to do real-time data augmentation\non images on CPU in parallel to training your model on GPU.\n\n# Arguments\n    generator: A generator.\n        The output of the generator must be either\n        - a tuple (inputs, targets)\n        - a tuple (inputs, targets, sample_weights).\n        All arrays should contain the same number of samples.\n        The generator is expected to loop over its data\n        indefinitely. An epoch finishes when `steps_per_epoch`\n        batches have been seen by the model.\n    steps_per_epoch: Total number of steps (batches of samples)\n        to yield from `generator` before declaring one epoch\n        finished and starting the next epoch. It should typically\n        be equal to the number of samples of your dataset\n        divided by the batch size.\n    epochs: Integer, total number of iterations on the data.\n        Note that in conjunction with initial_epoch, the parameter\n        epochs is to be understood as \"final epoch\". The model is\n        not trained for n steps given by epochs, but until the\n        epoch epochs is reached.\n    verbose: Verbosity mode, 0, 1, or 2.\n    callbacks: List of callbacks to be called during training.\n    validation_data: This can be either\n        - A generator for the validation data\n        - A tuple (inputs, targets)\n        - A tuple (inputs, targets, sample_weights).\n    validation_steps: Only relevant if `validation_data`\n        is a generator.\n        Number of steps to yield from validation generator\n        at the end of every epoch. It should typically\n        be equal to the number of samples of your\n        validation dataset divided by the batch size.\n    class_weight: Dictionary mapping class indices to a weight\n        for the class.\n    max_queue_size: Maximum size for the generator queue\n    workers: Maximum number of processes to spin up\n    use_multiprocessing: if True, use process based threading.\n        Note that because\n        this implementation relies on multiprocessing,\n        you should not pass\n        non picklable arguments to the generator\n        as they can't be passed\n        easily to children processes.\n    shuffle: Whether to shuffle the order of the batches at\n        the beginning of each epoch. Only used with instances\n        of `Sequence` (keras.utils.Sequence).\n    initial_epoch: Epoch at which to start training\n        (useful for resuming a previous training run).\n\n# Returns\n    A `History` object.\n\n# Raises\n    RuntimeError: if the model was never compiled.\n\n# Example\n\n```python\n    def generate_arrays_from_file(path):\n        while 1:\n            f = open(path)\n            for line in f:\n                # create Numpy arrays of input data\n                # and labels, from each line in the file\n                x, y = process_line(line)\n                yield (x, y)\n            f.close()\n\n    model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                        steps_per_epoch=1000, epochs=10)\n```",
                    "start_line": 1117,
                    "end_line": 1223,
                    "variables": {
                        "self.built": [
                            1208
                        ],
                        "self": [
                            1208,
                            1211
                        ],
                        "RuntimeError": [
                            1209
                        ],
                        "self.model.fit_generator": [
                            1211
                        ],
                        "self.model": [
                            1211
                        ],
                        "generator": [
                            1211
                        ],
                        "steps_per_epoch": [
                            1212
                        ],
                        "epochs": [
                            1213
                        ],
                        "verbose": [
                            1214
                        ],
                        "callbacks": [
                            1215
                        ],
                        "validation_data": [
                            1216
                        ],
                        "validation_steps": [
                            1217
                        ],
                        "class_weight": [
                            1218
                        ],
                        "max_queue_size": [
                            1219
                        ],
                        "workers": [
                            1220
                        ],
                        "use_multiprocessing": [
                            1221
                        ],
                        "shuffle": [
                            1222
                        ],
                        "initial_epoch": [
                            1223
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1117
                        ],
                        "interfaces": [
                            1117
                        ]
                    },
                    "filtered_variables": {
                        "self.built": [
                            1208
                        ],
                        "self": [
                            1208,
                            1211
                        ],
                        "self.model.fit_generator": [
                            1211
                        ],
                        "self.model": [
                            1211
                        ],
                        "generator": [
                            1211
                        ],
                        "steps_per_epoch": [
                            1212
                        ],
                        "epochs": [
                            1213
                        ],
                        "verbose": [
                            1214
                        ],
                        "callbacks": [
                            1215
                        ],
                        "validation_data": [
                            1216
                        ],
                        "validation_steps": [
                            1217
                        ],
                        "class_weight": [
                            1218
                        ],
                        "max_queue_size": [
                            1219
                        ],
                        "workers": [
                            1220
                        ],
                        "use_multiprocessing": [
                            1221
                        ],
                        "shuffle": [
                            1222
                        ],
                        "initial_epoch": [
                            1223
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1117
                        ],
                        "interfaces": [
                            1117
                        ]
                    },
                    "diff_line_number": 1119,
                    "class_data": {
                        "signature": "class Sequential(Model)",
                        "docstring": "Linear stack of layers.\n\n# Arguments\n    layers: list of layers to add to the model.\n\n# Note\n    The first layer passed to a Sequential model\n    should have a defined input shape. What that\n    means is that it should have received an `input_shape`\n    or `batch_input_shape` argument,\n    or for some type of layers (recurrent, Dense...)\n    an `input_dim` argument.\n\n# Example\n\n    ```python\n        model = Sequential()\n        # first layer must have a defined input shape\n        model.add(Dense(32, input_dim=500))\n        # afterwards, Keras does automatic shape inference\n        model.add(Dense(32))\n\n        # also possible (equivalent to the above):\n        model = Sequential()\n        model.add(Dense(32, input_shape=(500,)))\n        model.add(Dense(32))\n\n        # also possible (equivalent to the above):\n        model = Sequential()\n        # here the batch dimension is None,\n        # which means any batch size will be accepted by the model.\n        model.add(Dense(32, batch_input_shape=(None, 500)))\n        model.add(Dense(32))\n    ```",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, layers=None, name=None):\n    self.layers = []\n    self.model = None\n    self.inputs = []\n    self.outputs = []\n    self._trainable = True\n    self._initial_weights = None\n    self.inbound_nodes = []\n    self.outbound_nodes = []\n    self.built = False\n    if not name:\n        prefix = 'sequential_'\n        name = prefix + str(K.get_uid(prefix))\n    self.name = name\n    if layers:\n        for layer in layers:\n            self.add(layer)",
                            "def add(self, layer):\n    \"\"\"Adds a layer instance on top of the layer stack.\n\n    # Arguments\n        layer: layer instance.\n\n    # Raises\n        TypeError: If `layer` is not a layer instance.\n        ValueError: In case the `layer` argument does not\n            know its input shape.\n        ValueError: In case the `layer` argument has\n            multiple output tensors, or is already connected\n            somewhere else (forbidden in `Sequential` models).\n    \"\"\"\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))\n    if not self.outputs:\n        if not isinstance(layer, (InputLayer, legacy_layers.Merge)):\n            if isinstance(layer, (Model, Sequential)):\n                if not layer.layers:\n                    raise ValueError('Cannot add an empty model to a `Sequential` model.')\n                first_layer = layer.layers[0]\n                while isinstance(first_layer, (Model, Sequential)):\n                    first_layer = first_layer.layers[0]\n                batch_shape = first_layer.batch_input_shape\n                dtype = first_layer.dtype\n            else:\n                if not hasattr(layer, 'batch_input_shape'):\n                    raise ValueError('The first layer in a Sequential model must get an `input_shape` or `batch_input_shape` argument.')\n                batch_shape = layer.batch_input_shape\n                dtype = layer.dtype\n            x = Input(batch_shape=batch_shape, dtype=dtype, name=layer.name + '_input')\n            layer(x)\n        if len(layer.inbound_nodes[-1].output_tensors) != 1:\n            raise ValueError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        self.outputs = [layer.inbound_nodes[-1].output_tensors[0]]\n        self.inputs = topology.get_source_inputs(self.outputs[0])\n        topology.Node(outbound_layer=self, inbound_layers=[], node_indices=[], tensor_indices=[], input_tensors=self.inputs, output_tensors=self.outputs, input_masks=[None for _ in self.inputs], output_masks=[None], input_shapes=[x._keras_shape for x in self.inputs], output_shapes=[self.outputs[0]._keras_shape])\n    else:\n        output_tensor = layer(self.outputs[0])\n        if isinstance(output_tensor, list):\n            raise TypeError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        self.outputs = [output_tensor]\n        self.inbound_nodes[0].output_tensors = self.outputs\n        self.inbound_nodes[0].output_shapes = [self.outputs[0]._keras_shape]\n    self.layers.append(layer)\n    self.built = False",
                            "def pop(self):\n    \"\"\"Removes the last layer in the model.\n\n    # Raises\n        TypeError: if there are no layers in the model.\n    \"\"\"\n    if not self.layers:\n        raise TypeError('There are no layers in the model.')\n    self.layers.pop()\n    if not self.layers:\n        self.outputs = []\n        self.inbound_nodes = []\n        self.outbound_nodes = []\n    else:\n        self.layers[-1].outbound_nodes = []\n        self.outputs = [self.layers[-1].output]\n        self.inbound_nodes[0].output_tensors = self.outputs\n        self.inbound_nodes[0].output_shapes = [self.outputs[0]._keras_shape]\n    self.built = False",
                            "def get_layer(self, name=None, index=None):\n    \"\"\"Retrieve a layer that is part of the model.\n\n    Returns a layer based on either its name (unique)\n    or its index in the graph. Indices are based on\n    order of horizontal graph traversal (bottom-up).\n\n    # Arguments\n        name: string, name of layer.\n        index: integer, index of layer.\n\n    # Returns\n        A layer instance.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.get_layer(name, index)",
                            "def call(self, inputs, mask=None):\n    if not self.built:\n        self.build()\n    return self.model.call(inputs, mask)",
                            "def build(self, input_shape=None):\n    if not self.inputs or not self.outputs:\n        raise TypeError('Sequential model cannot be built: model is empty. Add some layers first.')\n    self.model = Model(self.inputs, self.outputs[0], name=self.name + '_model')\n    self.model.trainable = self.trainable\n    self.supports_masking = self.model.supports_masking\n    self._output_mask_cache = self.model._output_mask_cache\n    self._output_tensor_cache = self.model._output_tensor_cache\n    self._output_shape_cache = self.model._output_shape_cache\n    self.input_layers = self.model.input_layers\n    self.input_layers_node_indices = self.model.input_layers_node_indices\n    self.input_layers_tensor_indices = self.model.input_layers_tensor_indices\n    self.output_layers = self.model.output_layers\n    self.output_layers_node_indices = self.model.output_layers_node_indices\n    self.output_layers_tensor_indices = self.model.output_layers_tensor_indices\n    self.nodes_by_depth = self.model.nodes_by_depth\n    self.container_nodes = self.model.container_nodes\n    self.output_names = self.model.output_names\n    self.input_names = self.model.input_names\n    self._feed_input_names = self.model._feed_input_names\n    self._feed_inputs = self.model._feed_inputs\n    self.model.callback_model = self\n    self.built = True",
                            "@property\ndef uses_learning_phase(self):\n    if not self.built:\n        self.build()\n    return self.model.uses_learning_phase",
                            "@property\ndef _flattened_layers(self):\n    layers = []\n    if self.layers:\n        if isinstance(self.layers[0], legacy_layers.Merge):\n            merge = self.layers[0]\n            for layer in merge.layers:\n                if hasattr(layer, '_flattened_layers'):\n                    for sublayer in layer._flattened_layers:\n                        if sublayer not in layers:\n                            layers.append(sublayer)\n                elif hasattr(layer, 'layers'):\n                    for sublayer in layer.layers:\n                        if sublayer not in layers:\n                            layers.append(sublayer)\n                elif layer not in layers:\n                    layers.append(layer)\n        elif self.layers[0] not in layers:\n            layers.append(self.layers[0])\n        for layer in self.layers[1:]:\n            if layer not in layers:\n                layers.append(layer)\n    return layers",
                            "def _gather_list_attr(self, attr):\n    all_attrs = []\n    for layer in self._flattened_layers:\n        all_attrs += getattr(layer, attr, [])\n    return all_attrs",
                            "@property\ndef trainable(self):\n    return self._trainable",
                            "@trainable.setter\ndef trainable(self, value):\n    if self.model:\n        self.model.trainable = value\n    self._trainable = value",
                            "@property\ndef trainable_weights(self):\n    if not self.trainable:\n        return []\n    return self._gather_list_attr('trainable_weights')",
                            "@property\ndef non_trainable_weights(self):\n    weights = self._gather_list_attr('non_trainable_weights')\n    if not self.trainable:\n        trainable_weights = self._gather_list_attr('trainable_weights')\n        return trainable_weights + weights\n    return weights",
                            "@property\ndef updates(self):\n    if not self.built:\n        self.build()\n    return self.model.updates",
                            "@property\ndef state_updates(self):\n    if not self.built:\n        self.build()\n    return self.model.state_updates",
                            "def get_updates_for(self, inputs):\n    if not self.built:\n        self.build()\n    return self.model.get_updates_for(inputs)",
                            "@property\ndef losses(self):\n    if not self.built:\n        self.build()\n    return self.model.losses",
                            "def get_losses_for(self, inputs):\n    if not self.built:\n        self.build()\n    return self.model.get_losses_for(inputs)",
                            "@property\ndef regularizers(self):\n    if not self.built:\n        self.build()\n    return self.model.regularizers",
                            "def get_weights(self):\n    \"\"\"Retrieves the weights of the model.\n\n    # Returns\n        A flat list of Numpy arrays\n        (one array per model weight).\n    \"\"\"\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n        weights = []\n        for layer in layers:\n            weights.append(layer.get_weights())\n        return weights\n    if not self.built:\n        self.build()\n    return self.model.get_weights()",
                            "def set_weights(self, weights):\n    \"\"\"Sets the weights of the model.\n\n    # Arguments\n        weights: Should be a list\n            of Numpy arrays with shapes and types matching\n            the output of `model.get_weights()`.\n    \"\"\"\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n        for layer in layers:\n            nb_param = len(layer.weights)\n            layer.set_weights(weights[:nb_param])\n            weights = weights[nb_param:]\n    if not self.built:\n        self.build()\n    self.model.set_weights(weights)",
                            "def load_weights(self, filepath, by_name=False):\n    if h5py is None:\n        raise ImportError('`load_weights` requires h5py.')\n    f = h5py.File(filepath, mode='r')\n    if 'layer_names' not in f.attrs and 'model_weights' in f:\n        f = f['model_weights']\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n    else:\n        layers = self.layers\n    if by_name:\n        topology.load_weights_from_hdf5_group_by_name(f, layers)\n    else:\n        topology.load_weights_from_hdf5_group(f, layers)\n    if hasattr(f, 'close'):\n        f.close()",
                            "def save_weights(self, filepath, overwrite=True):\n    if h5py is None:\n        raise ImportError('`save_weights` requires h5py.')\n    if not overwrite and os.path.isfile(filepath):\n        proceed = ask_to_proceed_with_overwrite(filepath)\n        if not proceed:\n            return\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n    else:\n        layers = self.layers\n    f = h5py.File(filepath, 'w')\n    topology.save_weights_to_hdf5_group(f, layers)\n    f.flush()\n    f.close()",
                            "def compile(self, optimizer, loss, metrics=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer object.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create a placeholder for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensor (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument.\n            It should be a single tensor\n            (for a single-output `Sequential` model).\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n\n    # Example\n        ```python\n            model = Sequential()\n            model.add(Dense(32, input_shape=(500,)))\n            model.add(Dense(10, activation='softmax'))\n            model.compile(optimizer='rmsprop',\n                          loss='categorical_crossentropy',\n                          metrics=['accuracy'])\n        ```\n    \"\"\"\n    self.build()\n    self.model.compile(optimizer, loss, metrics=metrics, sample_weight_mode=sample_weight_mode, weighted_metrics=weighted_metrics, target_tensors=target_tensors, **kwargs)\n    self.optimizer = self.model.optimizer\n    self.loss = self.model.loss\n    self.metrics = self.model.metrics\n    self.loss_weights = self.model.loss_weights\n    self.sample_weight_mode = self.model.sample_weight_mode\n    self.weighted_metrics = self.model.weighted_metrics\n    self.targets = self.model.targets\n    self.metrics_tensors = self.model.metrics_tensors\n    self.metrics_names = self.model.metrics_names\n    self.sample_weights = self.model.sample_weights\n    self.total_loss = self.model.total_loss",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data.\n            If the input layer in the model is named, you can also pass a\n            dictionary mapping the input name to a Numpy array.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data.\n            If the output layer in the model is named, you can also pass a\n            dictionary mapping the output name to a Numpy array.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, it will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            This will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.')\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.fit(x, y, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, validation_split=validation_split, validation_data=validation_data, shuffle=shuffle, class_weight=class_weight, sample_weight=sample_weight, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x, y, batch_size=32, verbose=1, sample_weight=None):\n    \"\"\"Computes the loss on some input data, batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        batch_size: integer. Number of samples per gradient update.\n        verbose: verbosity mode, 0 or 1.\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.evaluate(x, y, batch_size=batch_size, verbose=verbose, sample_weight=sample_weight)",
                            "def predict(self, x, batch_size=32, verbose=0):\n    \"\"\"Generates output predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: the input data, as a Numpy array.\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict(x, batch_size=batch_size, verbose=verbose)",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict_on_batch(x)",
                            "def train_on_batch(self, x, y, class_weight=None, sample_weight=None):\n    \"\"\"Single gradient update over one batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        class_weight: dictionary mapping classes to a weight value,\n            used for scaling the loss function (during training only).\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar training loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Evaluates the model over a single batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.test_on_batch(x, y, sample_weight=sample_weight)",
                            "def predict_proba(self, x, batch_size=32, verbose=0):\n    \"\"\"Generates class probability predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of probability predictions.\n    \"\"\"\n    preds = self.predict(x, batch_size, verbose)\n    if preds.min() < 0.0 or preds.max() > 1.0:\n        warnings.warn('Network returning invalid probability values. The last layer might not normalize predictions into probabilities (like softmax or sigmoid would).')\n    return preds",
                            "def predict_classes(self, x, batch_size=32, verbose=0):\n    \"\"\"Generate class predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A numpy array of class predictions.\n    \"\"\"\n    proba = self.predict(x, batch_size=batch_size, verbose=verbose)\n    if proba.shape[-1] > 1:\n        return proba.argmax(axis=-1)\n    else:\n        return (proba > 0.5).astype('int32')",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Fits the model on data generated batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    # Arguments\n        generator: A generator.\n            The output of the generator must be either\n            - a tuple (inputs, targets)\n            - a tuple (inputs, targets, sample_weights).\n            All arrays should contain the same number of samples.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n        epochs: Integer, total number of iterations on the data.\n            Note that in conjunction with initial_epoch, the parameter\n            epochs is to be understood as \"final epoch\". The model is\n            not trained for n steps given by epochs, but until the\n            epoch epochs is reached.\n        verbose: Verbosity mode, 0, 1, or 2.\n        callbacks: List of callbacks to be called during training.\n        validation_data: This can be either\n            - A generator for the validation data\n            - A tuple (inputs, targets)\n            - A tuple (inputs, targets, sample_weights).\n        validation_steps: Only relevant if `validation_data`\n            is a generator.\n            Number of steps to yield from validation generator\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n        class_weight: Dictionary mapping class indices to a weight\n            for the class.\n        max_queue_size: Maximum size for the generator queue\n        workers: Maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (keras.utils.Sequence).\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                f = open(path)\n                for line in f:\n                    # create Numpy arrays of input data\n                    # and labels, from each line in the file\n                    x, y = process_line(line)\n                    yield (x, y)\n                f.close()\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=1000, epochs=10)\n    ```\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.fit_generator(generator, steps_per_epoch, epochs, verbose=verbose, callbacks=callbacks, validation_data=validation_data, validation_steps=validation_steps, class_weight=class_weight, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing, shuffle=shuffle, initial_epoch=initial_epoch)",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because this implementation\n            relies on multiprocessing, you should not pass\n            non picklable arguments to the generator\n            as they can't be passed easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.evaluate_generator(generator, steps, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing)",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: generator yielding batches of input samples.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because this implementation\n            relies on multiprocessing, you should not pass\n            non picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict_generator(generator, steps, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing, verbose=verbose)",
                            "def get_config(self):\n    if isinstance(self.layers[0], legacy_layers.Merge):\n        return self.legacy_get_config()\n    config = []\n    for layer in self.layers:\n        config.append({'class_name': layer.__class__.__name__, 'config': layer.get_config()})\n    return copy.deepcopy(config)",
                            "@classmethod\ndef from_config(cls, config, custom_objects=None):\n    if 'class_name' not in config[0] or config[0]['class_name'] == 'Merge':\n        return cls.legacy_from_config(config)\n    model = cls()\n    for conf in config:\n        layer = layer_module.deserialize(conf, custom_objects=custom_objects)\n        model.add(layer)\n    return model",
                            "def legacy_get_config(self):\n    \"\"\"Retrieves the model configuration as a Python list.\n\n    # Returns\n        A list of dicts (each dict is a layer config).\n    \"\"\"\n    config = []\n    if isinstance(self.layers[0], legacy_layers.Merge):\n        assert hasattr(self.layers[0], 'layers')\n        layers = []\n        for layer in self.layers[0].layers:\n            layer_config = {'class_name': layer.__class__.__name__, 'config': layer.get_config()}\n            layers.append(layer_config)\n        merge_config = self.layers[0].get_config()\n        merge_config['layers'] = layers\n        config.append({'class_name': 'Merge', 'config': merge_config})\n    else:\n        config.append({'class_name': self.layers[0].__class__.__name__, 'config': self.layers[0].get_config()})\n    for layer in self.layers[1:]:\n        config.append({'class_name': layer.__class__.__name__, 'config': layer.get_config()})\n    return copy.deepcopy(config)",
                            "@classmethod\ndef legacy_from_config(cls, config, layer_cache=None):\n    \"\"\"Load a model from a legacy configuration.\n\n    # Arguments\n        config: dictionary with configuration.\n        layer_cache: cache to draw pre-existing layer.\n\n    # Returns\n        The loaded Model.\n    \"\"\"\n    if not layer_cache:\n        layer_cache = {}\n\n    def normalize_legacy_config(conf):\n        if 'class_name' not in conf:\n            class_name = conf['name']\n            name = conf.get('custom_name')\n            conf['name'] = name\n            return {'class_name': class_name, 'config': conf}\n        return conf\n    model = cls()\n\n    def get_or_create_layer(layer_data):\n        name = layer_data['config'].get('name')\n        if name in layer_cache:\n            return layer_cache[name]\n        layer = layer_module.deserialize(layer_data)\n        layer_cache[name] = layer\n        return layer\n    first_layer = config[0]\n    first_layer = normalize_legacy_config(first_layer)\n    if first_layer['class_name'] == 'Merge':\n        merge_inputs = []\n        first_layer_config = first_layer['config']\n        for merge_input_config in first_layer_config.pop('layers'):\n            merge_input = layer_module.deserialize(merge_input_config)\n            merge_inputs.append(merge_input)\n        first_layer_config['layers'] = merge_inputs\n        merge = legacy_layers.Merge.from_config(first_layer_config)\n        model.add(merge)\n    else:\n        layer = get_or_create_layer(first_layer)\n        model.add(layer)\n    for conf in config[1:]:\n        conf = normalize_legacy_config(conf)\n        layer = get_or_create_layer(conf)\n        model.add(layer)\n    return model",
                            "def normalize_legacy_config(conf):\n    if 'class_name' not in conf:\n        class_name = conf['name']\n        name = conf.get('custom_name')\n        conf['name'] = name\n        return {'class_name': class_name, 'config': conf}\n    return conf",
                            "def get_or_create_layer(layer_data):\n    name = layer_data['config'].get('name')\n    if name in layer_cache:\n        return layer_cache[name]\n    layer = layer_module.deserialize(layer_data)\n    layer_cache[name] = layer\n    return layer"
                        ],
                        "constructor_variables": [
                            "layers",
                            "outbound_nodes",
                            "model",
                            "_trainable",
                            "inputs",
                            "name",
                            "built",
                            "inbound_nodes",
                            "prefix",
                            "_initial_weights",
                            "outputs"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, layers=None, name=None)",
                            "add(self, layer)",
                            "pop(self)",
                            "get_layer(self, name=None, index=None)",
                            "call(self, inputs, mask=None)",
                            "build(self, input_shape=None)",
                            "uses_learning_phase(self)",
                            "_flattened_layers(self)",
                            "_gather_list_attr(self, attr)",
                            "trainable(self)",
                            "trainable(self, value)",
                            "trainable_weights(self)",
                            "non_trainable_weights(self)",
                            "updates(self)",
                            "state_updates(self)",
                            "get_updates_for(self, inputs)",
                            "losses(self)",
                            "get_losses_for(self, inputs)",
                            "regularizers(self)",
                            "get_weights(self)",
                            "set_weights(self, weights)",
                            "load_weights(self, filepath, by_name=False)",
                            "save_weights(self, filepath, overwrite=True)",
                            "compile(self, optimizer, loss, metrics=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x, y, batch_size=32, verbose=1, sample_weight=None)",
                            "predict(self, x, batch_size=32, verbose=0)",
                            "predict_on_batch(self, x)",
                            "train_on_batch(self, x, y, class_weight=None, sample_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_proba(self, x, batch_size=32, verbose=0)",
                            "predict_classes(self, x, batch_size=32, verbose=0)",
                            "fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False)",
                            "predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "get_config(self)",
                            "from_config(cls, config, custom_objects=None)",
                            "legacy_get_config(self)",
                            "legacy_from_config(cls, config, layer_cache=None)",
                            "normalize_legacy_config(conf)",
                            "get_or_create_layer(layer_data)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "evaluate_generator",
                    "function_code": "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps,\n                       max_queue_size=10, workers=1,\n                       use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because this implementation\n            relies on multiprocessing, you should not pass\n            non picklable arguments to the generator\n            as they can't be passed easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled '\n                           'before being used.')\n    return self.model.evaluate_generator(generator,\n                                         steps,\n                                         max_queue_size=max_queue_size,\n                                         workers=workers,\n                                         use_multiprocessing=use_multiprocessing)\n",
                    "decorators": [
                        "interfaces.legacy_generator_methods_support"
                    ],
                    "docstring": "Evaluates the model on a data generator.\n\nThe generator should return the same kind of data\nas accepted by `test_on_batch`.\n\n# Arguments\n    generator: Generator yielding tuples (inputs, targets)\n        or (inputs, targets, sample_weights)\n    steps: Total number of steps (batches of samples)\n        to yield from `generator` before stopping.\n    max_queue_size: maximum size for the generator queue\n    workers: maximum number of processes to spin up\n    use_multiprocessing: if True, use process based threading.\n        Note that because this implementation\n        relies on multiprocessing, you should not pass\n        non picklable arguments to the generator\n        as they can't be passed easily to children processes.\n\n# Returns\n    Scalar test loss (if the model has no metrics)\n    or list of scalars (if the model computes other metrics).\n    The attribute `model.metrics_names` will give you\n    the display labels for the scalar outputs.\n\n# Raises\n    RuntimeError: if the model was never compiled.",
                    "start_line": 1225,
                    "end_line": 1263,
                    "variables": {
                        "self.built": [
                            1256
                        ],
                        "self": [
                            1256,
                            1259
                        ],
                        "RuntimeError": [
                            1257
                        ],
                        "self.model.evaluate_generator": [
                            1259
                        ],
                        "self.model": [
                            1259
                        ],
                        "generator": [
                            1259
                        ],
                        "steps": [
                            1260
                        ],
                        "max_queue_size": [
                            1261
                        ],
                        "workers": [
                            1262
                        ],
                        "use_multiprocessing": [
                            1263
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1225
                        ],
                        "interfaces": [
                            1225
                        ]
                    },
                    "filtered_variables": {
                        "self.built": [
                            1256
                        ],
                        "self": [
                            1256,
                            1259
                        ],
                        "self.model.evaluate_generator": [
                            1259
                        ],
                        "self.model": [
                            1259
                        ],
                        "generator": [
                            1259
                        ],
                        "steps": [
                            1260
                        ],
                        "max_queue_size": [
                            1261
                        ],
                        "workers": [
                            1262
                        ],
                        "use_multiprocessing": [
                            1263
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1225
                        ],
                        "interfaces": [
                            1225
                        ]
                    },
                    "diff_line_number": 1226,
                    "class_data": {
                        "signature": "class Sequential(Model)",
                        "docstring": "Linear stack of layers.\n\n# Arguments\n    layers: list of layers to add to the model.\n\n# Note\n    The first layer passed to a Sequential model\n    should have a defined input shape. What that\n    means is that it should have received an `input_shape`\n    or `batch_input_shape` argument,\n    or for some type of layers (recurrent, Dense...)\n    an `input_dim` argument.\n\n# Example\n\n    ```python\n        model = Sequential()\n        # first layer must have a defined input shape\n        model.add(Dense(32, input_dim=500))\n        # afterwards, Keras does automatic shape inference\n        model.add(Dense(32))\n\n        # also possible (equivalent to the above):\n        model = Sequential()\n        model.add(Dense(32, input_shape=(500,)))\n        model.add(Dense(32))\n\n        # also possible (equivalent to the above):\n        model = Sequential()\n        # here the batch dimension is None,\n        # which means any batch size will be accepted by the model.\n        model.add(Dense(32, batch_input_shape=(None, 500)))\n        model.add(Dense(32))\n    ```",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, layers=None, name=None):\n    self.layers = []\n    self.model = None\n    self.inputs = []\n    self.outputs = []\n    self._trainable = True\n    self._initial_weights = None\n    self.inbound_nodes = []\n    self.outbound_nodes = []\n    self.built = False\n    if not name:\n        prefix = 'sequential_'\n        name = prefix + str(K.get_uid(prefix))\n    self.name = name\n    if layers:\n        for layer in layers:\n            self.add(layer)",
                            "def add(self, layer):\n    \"\"\"Adds a layer instance on top of the layer stack.\n\n    # Arguments\n        layer: layer instance.\n\n    # Raises\n        TypeError: If `layer` is not a layer instance.\n        ValueError: In case the `layer` argument does not\n            know its input shape.\n        ValueError: In case the `layer` argument has\n            multiple output tensors, or is already connected\n            somewhere else (forbidden in `Sequential` models).\n    \"\"\"\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))\n    if not self.outputs:\n        if not isinstance(layer, (InputLayer, legacy_layers.Merge)):\n            if isinstance(layer, (Model, Sequential)):\n                if not layer.layers:\n                    raise ValueError('Cannot add an empty model to a `Sequential` model.')\n                first_layer = layer.layers[0]\n                while isinstance(first_layer, (Model, Sequential)):\n                    first_layer = first_layer.layers[0]\n                batch_shape = first_layer.batch_input_shape\n                dtype = first_layer.dtype\n            else:\n                if not hasattr(layer, 'batch_input_shape'):\n                    raise ValueError('The first layer in a Sequential model must get an `input_shape` or `batch_input_shape` argument.')\n                batch_shape = layer.batch_input_shape\n                dtype = layer.dtype\n            x = Input(batch_shape=batch_shape, dtype=dtype, name=layer.name + '_input')\n            layer(x)\n        if len(layer.inbound_nodes[-1].output_tensors) != 1:\n            raise ValueError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        self.outputs = [layer.inbound_nodes[-1].output_tensors[0]]\n        self.inputs = topology.get_source_inputs(self.outputs[0])\n        topology.Node(outbound_layer=self, inbound_layers=[], node_indices=[], tensor_indices=[], input_tensors=self.inputs, output_tensors=self.outputs, input_masks=[None for _ in self.inputs], output_masks=[None], input_shapes=[x._keras_shape for x in self.inputs], output_shapes=[self.outputs[0]._keras_shape])\n    else:\n        output_tensor = layer(self.outputs[0])\n        if isinstance(output_tensor, list):\n            raise TypeError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        self.outputs = [output_tensor]\n        self.inbound_nodes[0].output_tensors = self.outputs\n        self.inbound_nodes[0].output_shapes = [self.outputs[0]._keras_shape]\n    self.layers.append(layer)\n    self.built = False",
                            "def pop(self):\n    \"\"\"Removes the last layer in the model.\n\n    # Raises\n        TypeError: if there are no layers in the model.\n    \"\"\"\n    if not self.layers:\n        raise TypeError('There are no layers in the model.')\n    self.layers.pop()\n    if not self.layers:\n        self.outputs = []\n        self.inbound_nodes = []\n        self.outbound_nodes = []\n    else:\n        self.layers[-1].outbound_nodes = []\n        self.outputs = [self.layers[-1].output]\n        self.inbound_nodes[0].output_tensors = self.outputs\n        self.inbound_nodes[0].output_shapes = [self.outputs[0]._keras_shape]\n    self.built = False",
                            "def get_layer(self, name=None, index=None):\n    \"\"\"Retrieve a layer that is part of the model.\n\n    Returns a layer based on either its name (unique)\n    or its index in the graph. Indices are based on\n    order of horizontal graph traversal (bottom-up).\n\n    # Arguments\n        name: string, name of layer.\n        index: integer, index of layer.\n\n    # Returns\n        A layer instance.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.get_layer(name, index)",
                            "def call(self, inputs, mask=None):\n    if not self.built:\n        self.build()\n    return self.model.call(inputs, mask)",
                            "def build(self, input_shape=None):\n    if not self.inputs or not self.outputs:\n        raise TypeError('Sequential model cannot be built: model is empty. Add some layers first.')\n    self.model = Model(self.inputs, self.outputs[0], name=self.name + '_model')\n    self.model.trainable = self.trainable\n    self.supports_masking = self.model.supports_masking\n    self._output_mask_cache = self.model._output_mask_cache\n    self._output_tensor_cache = self.model._output_tensor_cache\n    self._output_shape_cache = self.model._output_shape_cache\n    self.input_layers = self.model.input_layers\n    self.input_layers_node_indices = self.model.input_layers_node_indices\n    self.input_layers_tensor_indices = self.model.input_layers_tensor_indices\n    self.output_layers = self.model.output_layers\n    self.output_layers_node_indices = self.model.output_layers_node_indices\n    self.output_layers_tensor_indices = self.model.output_layers_tensor_indices\n    self.nodes_by_depth = self.model.nodes_by_depth\n    self.container_nodes = self.model.container_nodes\n    self.output_names = self.model.output_names\n    self.input_names = self.model.input_names\n    self._feed_input_names = self.model._feed_input_names\n    self._feed_inputs = self.model._feed_inputs\n    self.model.callback_model = self\n    self.built = True",
                            "@property\ndef uses_learning_phase(self):\n    if not self.built:\n        self.build()\n    return self.model.uses_learning_phase",
                            "@property\ndef _flattened_layers(self):\n    layers = []\n    if self.layers:\n        if isinstance(self.layers[0], legacy_layers.Merge):\n            merge = self.layers[0]\n            for layer in merge.layers:\n                if hasattr(layer, '_flattened_layers'):\n                    for sublayer in layer._flattened_layers:\n                        if sublayer not in layers:\n                            layers.append(sublayer)\n                elif hasattr(layer, 'layers'):\n                    for sublayer in layer.layers:\n                        if sublayer not in layers:\n                            layers.append(sublayer)\n                elif layer not in layers:\n                    layers.append(layer)\n        elif self.layers[0] not in layers:\n            layers.append(self.layers[0])\n        for layer in self.layers[1:]:\n            if layer not in layers:\n                layers.append(layer)\n    return layers",
                            "def _gather_list_attr(self, attr):\n    all_attrs = []\n    for layer in self._flattened_layers:\n        all_attrs += getattr(layer, attr, [])\n    return all_attrs",
                            "@property\ndef trainable(self):\n    return self._trainable",
                            "@trainable.setter\ndef trainable(self, value):\n    if self.model:\n        self.model.trainable = value\n    self._trainable = value",
                            "@property\ndef trainable_weights(self):\n    if not self.trainable:\n        return []\n    return self._gather_list_attr('trainable_weights')",
                            "@property\ndef non_trainable_weights(self):\n    weights = self._gather_list_attr('non_trainable_weights')\n    if not self.trainable:\n        trainable_weights = self._gather_list_attr('trainable_weights')\n        return trainable_weights + weights\n    return weights",
                            "@property\ndef updates(self):\n    if not self.built:\n        self.build()\n    return self.model.updates",
                            "@property\ndef state_updates(self):\n    if not self.built:\n        self.build()\n    return self.model.state_updates",
                            "def get_updates_for(self, inputs):\n    if not self.built:\n        self.build()\n    return self.model.get_updates_for(inputs)",
                            "@property\ndef losses(self):\n    if not self.built:\n        self.build()\n    return self.model.losses",
                            "def get_losses_for(self, inputs):\n    if not self.built:\n        self.build()\n    return self.model.get_losses_for(inputs)",
                            "@property\ndef regularizers(self):\n    if not self.built:\n        self.build()\n    return self.model.regularizers",
                            "def get_weights(self):\n    \"\"\"Retrieves the weights of the model.\n\n    # Returns\n        A flat list of Numpy arrays\n        (one array per model weight).\n    \"\"\"\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n        weights = []\n        for layer in layers:\n            weights.append(layer.get_weights())\n        return weights\n    if not self.built:\n        self.build()\n    return self.model.get_weights()",
                            "def set_weights(self, weights):\n    \"\"\"Sets the weights of the model.\n\n    # Arguments\n        weights: Should be a list\n            of Numpy arrays with shapes and types matching\n            the output of `model.get_weights()`.\n    \"\"\"\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n        for layer in layers:\n            nb_param = len(layer.weights)\n            layer.set_weights(weights[:nb_param])\n            weights = weights[nb_param:]\n    if not self.built:\n        self.build()\n    self.model.set_weights(weights)",
                            "def load_weights(self, filepath, by_name=False):\n    if h5py is None:\n        raise ImportError('`load_weights` requires h5py.')\n    f = h5py.File(filepath, mode='r')\n    if 'layer_names' not in f.attrs and 'model_weights' in f:\n        f = f['model_weights']\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n    else:\n        layers = self.layers\n    if by_name:\n        topology.load_weights_from_hdf5_group_by_name(f, layers)\n    else:\n        topology.load_weights_from_hdf5_group(f, layers)\n    if hasattr(f, 'close'):\n        f.close()",
                            "def save_weights(self, filepath, overwrite=True):\n    if h5py is None:\n        raise ImportError('`save_weights` requires h5py.')\n    if not overwrite and os.path.isfile(filepath):\n        proceed = ask_to_proceed_with_overwrite(filepath)\n        if not proceed:\n            return\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n    else:\n        layers = self.layers\n    f = h5py.File(filepath, 'w')\n    topology.save_weights_to_hdf5_group(f, layers)\n    f.flush()\n    f.close()",
                            "def compile(self, optimizer, loss, metrics=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer object.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create a placeholder for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensor (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument.\n            It should be a single tensor\n            (for a single-output `Sequential` model).\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n\n    # Example\n        ```python\n            model = Sequential()\n            model.add(Dense(32, input_shape=(500,)))\n            model.add(Dense(10, activation='softmax'))\n            model.compile(optimizer='rmsprop',\n                          loss='categorical_crossentropy',\n                          metrics=['accuracy'])\n        ```\n    \"\"\"\n    self.build()\n    self.model.compile(optimizer, loss, metrics=metrics, sample_weight_mode=sample_weight_mode, weighted_metrics=weighted_metrics, target_tensors=target_tensors, **kwargs)\n    self.optimizer = self.model.optimizer\n    self.loss = self.model.loss\n    self.metrics = self.model.metrics\n    self.loss_weights = self.model.loss_weights\n    self.sample_weight_mode = self.model.sample_weight_mode\n    self.weighted_metrics = self.model.weighted_metrics\n    self.targets = self.model.targets\n    self.metrics_tensors = self.model.metrics_tensors\n    self.metrics_names = self.model.metrics_names\n    self.sample_weights = self.model.sample_weights\n    self.total_loss = self.model.total_loss",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data.\n            If the input layer in the model is named, you can also pass a\n            dictionary mapping the input name to a Numpy array.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data.\n            If the output layer in the model is named, you can also pass a\n            dictionary mapping the output name to a Numpy array.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, it will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            This will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.')\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.fit(x, y, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, validation_split=validation_split, validation_data=validation_data, shuffle=shuffle, class_weight=class_weight, sample_weight=sample_weight, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x, y, batch_size=32, verbose=1, sample_weight=None):\n    \"\"\"Computes the loss on some input data, batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        batch_size: integer. Number of samples per gradient update.\n        verbose: verbosity mode, 0 or 1.\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.evaluate(x, y, batch_size=batch_size, verbose=verbose, sample_weight=sample_weight)",
                            "def predict(self, x, batch_size=32, verbose=0):\n    \"\"\"Generates output predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: the input data, as a Numpy array.\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict(x, batch_size=batch_size, verbose=verbose)",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict_on_batch(x)",
                            "def train_on_batch(self, x, y, class_weight=None, sample_weight=None):\n    \"\"\"Single gradient update over one batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        class_weight: dictionary mapping classes to a weight value,\n            used for scaling the loss function (during training only).\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar training loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Evaluates the model over a single batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.test_on_batch(x, y, sample_weight=sample_weight)",
                            "def predict_proba(self, x, batch_size=32, verbose=0):\n    \"\"\"Generates class probability predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of probability predictions.\n    \"\"\"\n    preds = self.predict(x, batch_size, verbose)\n    if preds.min() < 0.0 or preds.max() > 1.0:\n        warnings.warn('Network returning invalid probability values. The last layer might not normalize predictions into probabilities (like softmax or sigmoid would).')\n    return preds",
                            "def predict_classes(self, x, batch_size=32, verbose=0):\n    \"\"\"Generate class predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A numpy array of class predictions.\n    \"\"\"\n    proba = self.predict(x, batch_size=batch_size, verbose=verbose)\n    if proba.shape[-1] > 1:\n        return proba.argmax(axis=-1)\n    else:\n        return (proba > 0.5).astype('int32')",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Fits the model on data generated batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    # Arguments\n        generator: A generator.\n            The output of the generator must be either\n            - a tuple (inputs, targets)\n            - a tuple (inputs, targets, sample_weights).\n            All arrays should contain the same number of samples.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n        epochs: Integer, total number of iterations on the data.\n            Note that in conjunction with initial_epoch, the parameter\n            epochs is to be understood as \"final epoch\". The model is\n            not trained for n steps given by epochs, but until the\n            epoch epochs is reached.\n        verbose: Verbosity mode, 0, 1, or 2.\n        callbacks: List of callbacks to be called during training.\n        validation_data: This can be either\n            - A generator for the validation data\n            - A tuple (inputs, targets)\n            - A tuple (inputs, targets, sample_weights).\n        validation_steps: Only relevant if `validation_data`\n            is a generator.\n            Number of steps to yield from validation generator\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n        class_weight: Dictionary mapping class indices to a weight\n            for the class.\n        max_queue_size: Maximum size for the generator queue\n        workers: Maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (keras.utils.Sequence).\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                f = open(path)\n                for line in f:\n                    # create Numpy arrays of input data\n                    # and labels, from each line in the file\n                    x, y = process_line(line)\n                    yield (x, y)\n                f.close()\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=1000, epochs=10)\n    ```\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.fit_generator(generator, steps_per_epoch, epochs, verbose=verbose, callbacks=callbacks, validation_data=validation_data, validation_steps=validation_steps, class_weight=class_weight, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing, shuffle=shuffle, initial_epoch=initial_epoch)",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because this implementation\n            relies on multiprocessing, you should not pass\n            non picklable arguments to the generator\n            as they can't be passed easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.evaluate_generator(generator, steps, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing)",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: generator yielding batches of input samples.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because this implementation\n            relies on multiprocessing, you should not pass\n            non picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict_generator(generator, steps, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing, verbose=verbose)",
                            "def get_config(self):\n    if isinstance(self.layers[0], legacy_layers.Merge):\n        return self.legacy_get_config()\n    config = []\n    for layer in self.layers:\n        config.append({'class_name': layer.__class__.__name__, 'config': layer.get_config()})\n    return copy.deepcopy(config)",
                            "@classmethod\ndef from_config(cls, config, custom_objects=None):\n    if 'class_name' not in config[0] or config[0]['class_name'] == 'Merge':\n        return cls.legacy_from_config(config)\n    model = cls()\n    for conf in config:\n        layer = layer_module.deserialize(conf, custom_objects=custom_objects)\n        model.add(layer)\n    return model",
                            "def legacy_get_config(self):\n    \"\"\"Retrieves the model configuration as a Python list.\n\n    # Returns\n        A list of dicts (each dict is a layer config).\n    \"\"\"\n    config = []\n    if isinstance(self.layers[0], legacy_layers.Merge):\n        assert hasattr(self.layers[0], 'layers')\n        layers = []\n        for layer in self.layers[0].layers:\n            layer_config = {'class_name': layer.__class__.__name__, 'config': layer.get_config()}\n            layers.append(layer_config)\n        merge_config = self.layers[0].get_config()\n        merge_config['layers'] = layers\n        config.append({'class_name': 'Merge', 'config': merge_config})\n    else:\n        config.append({'class_name': self.layers[0].__class__.__name__, 'config': self.layers[0].get_config()})\n    for layer in self.layers[1:]:\n        config.append({'class_name': layer.__class__.__name__, 'config': layer.get_config()})\n    return copy.deepcopy(config)",
                            "@classmethod\ndef legacy_from_config(cls, config, layer_cache=None):\n    \"\"\"Load a model from a legacy configuration.\n\n    # Arguments\n        config: dictionary with configuration.\n        layer_cache: cache to draw pre-existing layer.\n\n    # Returns\n        The loaded Model.\n    \"\"\"\n    if not layer_cache:\n        layer_cache = {}\n\n    def normalize_legacy_config(conf):\n        if 'class_name' not in conf:\n            class_name = conf['name']\n            name = conf.get('custom_name')\n            conf['name'] = name\n            return {'class_name': class_name, 'config': conf}\n        return conf\n    model = cls()\n\n    def get_or_create_layer(layer_data):\n        name = layer_data['config'].get('name')\n        if name in layer_cache:\n            return layer_cache[name]\n        layer = layer_module.deserialize(layer_data)\n        layer_cache[name] = layer\n        return layer\n    first_layer = config[0]\n    first_layer = normalize_legacy_config(first_layer)\n    if first_layer['class_name'] == 'Merge':\n        merge_inputs = []\n        first_layer_config = first_layer['config']\n        for merge_input_config in first_layer_config.pop('layers'):\n            merge_input = layer_module.deserialize(merge_input_config)\n            merge_inputs.append(merge_input)\n        first_layer_config['layers'] = merge_inputs\n        merge = legacy_layers.Merge.from_config(first_layer_config)\n        model.add(merge)\n    else:\n        layer = get_or_create_layer(first_layer)\n        model.add(layer)\n    for conf in config[1:]:\n        conf = normalize_legacy_config(conf)\n        layer = get_or_create_layer(conf)\n        model.add(layer)\n    return model",
                            "def normalize_legacy_config(conf):\n    if 'class_name' not in conf:\n        class_name = conf['name']\n        name = conf.get('custom_name')\n        conf['name'] = name\n        return {'class_name': class_name, 'config': conf}\n    return conf",
                            "def get_or_create_layer(layer_data):\n    name = layer_data['config'].get('name')\n    if name in layer_cache:\n        return layer_cache[name]\n    layer = layer_module.deserialize(layer_data)\n    layer_cache[name] = layer\n    return layer"
                        ],
                        "constructor_variables": [
                            "layers",
                            "outbound_nodes",
                            "model",
                            "_trainable",
                            "inputs",
                            "name",
                            "built",
                            "inbound_nodes",
                            "prefix",
                            "_initial_weights",
                            "outputs"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, layers=None, name=None)",
                            "add(self, layer)",
                            "pop(self)",
                            "get_layer(self, name=None, index=None)",
                            "call(self, inputs, mask=None)",
                            "build(self, input_shape=None)",
                            "uses_learning_phase(self)",
                            "_flattened_layers(self)",
                            "_gather_list_attr(self, attr)",
                            "trainable(self)",
                            "trainable(self, value)",
                            "trainable_weights(self)",
                            "non_trainable_weights(self)",
                            "updates(self)",
                            "state_updates(self)",
                            "get_updates_for(self, inputs)",
                            "losses(self)",
                            "get_losses_for(self, inputs)",
                            "regularizers(self)",
                            "get_weights(self)",
                            "set_weights(self, weights)",
                            "load_weights(self, filepath, by_name=False)",
                            "save_weights(self, filepath, overwrite=True)",
                            "compile(self, optimizer, loss, metrics=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x, y, batch_size=32, verbose=1, sample_weight=None)",
                            "predict(self, x, batch_size=32, verbose=0)",
                            "predict_on_batch(self, x)",
                            "train_on_batch(self, x, y, class_weight=None, sample_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_proba(self, x, batch_size=32, verbose=0)",
                            "predict_classes(self, x, batch_size=32, verbose=0)",
                            "fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False)",
                            "predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "get_config(self)",
                            "from_config(cls, config, custom_objects=None)",
                            "legacy_get_config(self)",
                            "legacy_from_config(cls, config, layer_cache=None)",
                            "normalize_legacy_config(conf)",
                            "get_or_create_layer(layer_data)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "predict_generator",
                    "function_code": "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps,\n                      max_queue_size=10, workers=1,\n                      use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: generator yielding batches of input samples.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because this implementation\n            relies on multiprocessing, you should not pass\n            non picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict_generator(generator, steps,\n                                        max_queue_size=max_queue_size,\n                                        workers=workers,\n                                        use_multiprocessing=use_multiprocessing,\n                                        verbose=verbose)\n",
                    "decorators": [
                        "interfaces.legacy_generator_methods_support"
                    ],
                    "docstring": "Generates predictions for the input samples from a data generator.\n\nThe generator should return the same kind of data as accepted by\n`predict_on_batch`.\n\n# Arguments\n    generator: generator yielding batches of input samples.\n    steps: Total number of steps (batches of samples)\n        to yield from `generator` before stopping.\n    max_queue_size: maximum size for the generator queue\n    workers: maximum number of processes to spin up\n    use_multiprocessing: if True, use process based threading.\n        Note that because this implementation\n        relies on multiprocessing, you should not pass\n        non picklable arguments to the generator\n        as they can't be passed easily to children processes.\n    verbose: verbosity mode, 0 or 1.\n\n# Returns\n    A Numpy array of predictions.",
                    "start_line": 1265,
                    "end_line": 1296,
                    "variables": {
                        "self.built": [
                            1290
                        ],
                        "self": [
                            1290,
                            1291,
                            1292
                        ],
                        "self.build": [
                            1291
                        ],
                        "self.model.predict_generator": [
                            1292
                        ],
                        "self.model": [
                            1292
                        ],
                        "generator": [
                            1292
                        ],
                        "steps": [
                            1292
                        ],
                        "max_queue_size": [
                            1293
                        ],
                        "workers": [
                            1294
                        ],
                        "use_multiprocessing": [
                            1295
                        ],
                        "verbose": [
                            1296
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1265
                        ],
                        "interfaces": [
                            1265
                        ]
                    },
                    "filtered_variables": {
                        "self.built": [
                            1290
                        ],
                        "self": [
                            1290,
                            1291,
                            1292
                        ],
                        "self.build": [
                            1291
                        ],
                        "self.model.predict_generator": [
                            1292
                        ],
                        "self.model": [
                            1292
                        ],
                        "generator": [
                            1292
                        ],
                        "steps": [
                            1292
                        ],
                        "max_queue_size": [
                            1293
                        ],
                        "workers": [
                            1294
                        ],
                        "use_multiprocessing": [
                            1295
                        ],
                        "verbose": [
                            1296
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1265
                        ],
                        "interfaces": [
                            1265
                        ]
                    },
                    "diff_line_number": 1266,
                    "class_data": {
                        "signature": "class Sequential(Model)",
                        "docstring": "Linear stack of layers.\n\n# Arguments\n    layers: list of layers to add to the model.\n\n# Note\n    The first layer passed to a Sequential model\n    should have a defined input shape. What that\n    means is that it should have received an `input_shape`\n    or `batch_input_shape` argument,\n    or for some type of layers (recurrent, Dense...)\n    an `input_dim` argument.\n\n# Example\n\n    ```python\n        model = Sequential()\n        # first layer must have a defined input shape\n        model.add(Dense(32, input_dim=500))\n        # afterwards, Keras does automatic shape inference\n        model.add(Dense(32))\n\n        # also possible (equivalent to the above):\n        model = Sequential()\n        model.add(Dense(32, input_shape=(500,)))\n        model.add(Dense(32))\n\n        # also possible (equivalent to the above):\n        model = Sequential()\n        # here the batch dimension is None,\n        # which means any batch size will be accepted by the model.\n        model.add(Dense(32, batch_input_shape=(None, 500)))\n        model.add(Dense(32))\n    ```",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, layers=None, name=None):\n    self.layers = []\n    self.model = None\n    self.inputs = []\n    self.outputs = []\n    self._trainable = True\n    self._initial_weights = None\n    self.inbound_nodes = []\n    self.outbound_nodes = []\n    self.built = False\n    if not name:\n        prefix = 'sequential_'\n        name = prefix + str(K.get_uid(prefix))\n    self.name = name\n    if layers:\n        for layer in layers:\n            self.add(layer)",
                            "def add(self, layer):\n    \"\"\"Adds a layer instance on top of the layer stack.\n\n    # Arguments\n        layer: layer instance.\n\n    # Raises\n        TypeError: If `layer` is not a layer instance.\n        ValueError: In case the `layer` argument does not\n            know its input shape.\n        ValueError: In case the `layer` argument has\n            multiple output tensors, or is already connected\n            somewhere else (forbidden in `Sequential` models).\n    \"\"\"\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be an instance of class Layer. Found: ' + str(layer))\n    if not self.outputs:\n        if not isinstance(layer, (InputLayer, legacy_layers.Merge)):\n            if isinstance(layer, (Model, Sequential)):\n                if not layer.layers:\n                    raise ValueError('Cannot add an empty model to a `Sequential` model.')\n                first_layer = layer.layers[0]\n                while isinstance(first_layer, (Model, Sequential)):\n                    first_layer = first_layer.layers[0]\n                batch_shape = first_layer.batch_input_shape\n                dtype = first_layer.dtype\n            else:\n                if not hasattr(layer, 'batch_input_shape'):\n                    raise ValueError('The first layer in a Sequential model must get an `input_shape` or `batch_input_shape` argument.')\n                batch_shape = layer.batch_input_shape\n                dtype = layer.dtype\n            x = Input(batch_shape=batch_shape, dtype=dtype, name=layer.name + '_input')\n            layer(x)\n        if len(layer.inbound_nodes[-1].output_tensors) != 1:\n            raise ValueError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        self.outputs = [layer.inbound_nodes[-1].output_tensors[0]]\n        self.inputs = topology.get_source_inputs(self.outputs[0])\n        topology.Node(outbound_layer=self, inbound_layers=[], node_indices=[], tensor_indices=[], input_tensors=self.inputs, output_tensors=self.outputs, input_masks=[None for _ in self.inputs], output_masks=[None], input_shapes=[x._keras_shape for x in self.inputs], output_shapes=[self.outputs[0]._keras_shape])\n    else:\n        output_tensor = layer(self.outputs[0])\n        if isinstance(output_tensor, list):\n            raise TypeError('All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.')\n        self.outputs = [output_tensor]\n        self.inbound_nodes[0].output_tensors = self.outputs\n        self.inbound_nodes[0].output_shapes = [self.outputs[0]._keras_shape]\n    self.layers.append(layer)\n    self.built = False",
                            "def pop(self):\n    \"\"\"Removes the last layer in the model.\n\n    # Raises\n        TypeError: if there are no layers in the model.\n    \"\"\"\n    if not self.layers:\n        raise TypeError('There are no layers in the model.')\n    self.layers.pop()\n    if not self.layers:\n        self.outputs = []\n        self.inbound_nodes = []\n        self.outbound_nodes = []\n    else:\n        self.layers[-1].outbound_nodes = []\n        self.outputs = [self.layers[-1].output]\n        self.inbound_nodes[0].output_tensors = self.outputs\n        self.inbound_nodes[0].output_shapes = [self.outputs[0]._keras_shape]\n    self.built = False",
                            "def get_layer(self, name=None, index=None):\n    \"\"\"Retrieve a layer that is part of the model.\n\n    Returns a layer based on either its name (unique)\n    or its index in the graph. Indices are based on\n    order of horizontal graph traversal (bottom-up).\n\n    # Arguments\n        name: string, name of layer.\n        index: integer, index of layer.\n\n    # Returns\n        A layer instance.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.get_layer(name, index)",
                            "def call(self, inputs, mask=None):\n    if not self.built:\n        self.build()\n    return self.model.call(inputs, mask)",
                            "def build(self, input_shape=None):\n    if not self.inputs or not self.outputs:\n        raise TypeError('Sequential model cannot be built: model is empty. Add some layers first.')\n    self.model = Model(self.inputs, self.outputs[0], name=self.name + '_model')\n    self.model.trainable = self.trainable\n    self.supports_masking = self.model.supports_masking\n    self._output_mask_cache = self.model._output_mask_cache\n    self._output_tensor_cache = self.model._output_tensor_cache\n    self._output_shape_cache = self.model._output_shape_cache\n    self.input_layers = self.model.input_layers\n    self.input_layers_node_indices = self.model.input_layers_node_indices\n    self.input_layers_tensor_indices = self.model.input_layers_tensor_indices\n    self.output_layers = self.model.output_layers\n    self.output_layers_node_indices = self.model.output_layers_node_indices\n    self.output_layers_tensor_indices = self.model.output_layers_tensor_indices\n    self.nodes_by_depth = self.model.nodes_by_depth\n    self.container_nodes = self.model.container_nodes\n    self.output_names = self.model.output_names\n    self.input_names = self.model.input_names\n    self._feed_input_names = self.model._feed_input_names\n    self._feed_inputs = self.model._feed_inputs\n    self.model.callback_model = self\n    self.built = True",
                            "@property\ndef uses_learning_phase(self):\n    if not self.built:\n        self.build()\n    return self.model.uses_learning_phase",
                            "@property\ndef _flattened_layers(self):\n    layers = []\n    if self.layers:\n        if isinstance(self.layers[0], legacy_layers.Merge):\n            merge = self.layers[0]\n            for layer in merge.layers:\n                if hasattr(layer, '_flattened_layers'):\n                    for sublayer in layer._flattened_layers:\n                        if sublayer not in layers:\n                            layers.append(sublayer)\n                elif hasattr(layer, 'layers'):\n                    for sublayer in layer.layers:\n                        if sublayer not in layers:\n                            layers.append(sublayer)\n                elif layer not in layers:\n                    layers.append(layer)\n        elif self.layers[0] not in layers:\n            layers.append(self.layers[0])\n        for layer in self.layers[1:]:\n            if layer not in layers:\n                layers.append(layer)\n    return layers",
                            "def _gather_list_attr(self, attr):\n    all_attrs = []\n    for layer in self._flattened_layers:\n        all_attrs += getattr(layer, attr, [])\n    return all_attrs",
                            "@property\ndef trainable(self):\n    return self._trainable",
                            "@trainable.setter\ndef trainable(self, value):\n    if self.model:\n        self.model.trainable = value\n    self._trainable = value",
                            "@property\ndef trainable_weights(self):\n    if not self.trainable:\n        return []\n    return self._gather_list_attr('trainable_weights')",
                            "@property\ndef non_trainable_weights(self):\n    weights = self._gather_list_attr('non_trainable_weights')\n    if not self.trainable:\n        trainable_weights = self._gather_list_attr('trainable_weights')\n        return trainable_weights + weights\n    return weights",
                            "@property\ndef updates(self):\n    if not self.built:\n        self.build()\n    return self.model.updates",
                            "@property\ndef state_updates(self):\n    if not self.built:\n        self.build()\n    return self.model.state_updates",
                            "def get_updates_for(self, inputs):\n    if not self.built:\n        self.build()\n    return self.model.get_updates_for(inputs)",
                            "@property\ndef losses(self):\n    if not self.built:\n        self.build()\n    return self.model.losses",
                            "def get_losses_for(self, inputs):\n    if not self.built:\n        self.build()\n    return self.model.get_losses_for(inputs)",
                            "@property\ndef regularizers(self):\n    if not self.built:\n        self.build()\n    return self.model.regularizers",
                            "def get_weights(self):\n    \"\"\"Retrieves the weights of the model.\n\n    # Returns\n        A flat list of Numpy arrays\n        (one array per model weight).\n    \"\"\"\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n        weights = []\n        for layer in layers:\n            weights.append(layer.get_weights())\n        return weights\n    if not self.built:\n        self.build()\n    return self.model.get_weights()",
                            "def set_weights(self, weights):\n    \"\"\"Sets the weights of the model.\n\n    # Arguments\n        weights: Should be a list\n            of Numpy arrays with shapes and types matching\n            the output of `model.get_weights()`.\n    \"\"\"\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n        for layer in layers:\n            nb_param = len(layer.weights)\n            layer.set_weights(weights[:nb_param])\n            weights = weights[nb_param:]\n    if not self.built:\n        self.build()\n    self.model.set_weights(weights)",
                            "def load_weights(self, filepath, by_name=False):\n    if h5py is None:\n        raise ImportError('`load_weights` requires h5py.')\n    f = h5py.File(filepath, mode='r')\n    if 'layer_names' not in f.attrs and 'model_weights' in f:\n        f = f['model_weights']\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n    else:\n        layers = self.layers\n    if by_name:\n        topology.load_weights_from_hdf5_group_by_name(f, layers)\n    else:\n        topology.load_weights_from_hdf5_group(f, layers)\n    if hasattr(f, 'close'):\n        f.close()",
                            "def save_weights(self, filepath, overwrite=True):\n    if h5py is None:\n        raise ImportError('`save_weights` requires h5py.')\n    if not overwrite and os.path.isfile(filepath):\n        proceed = ask_to_proceed_with_overwrite(filepath)\n        if not proceed:\n            return\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n    else:\n        layers = self.layers\n    f = h5py.File(filepath, 'w')\n    topology.save_weights_to_hdf5_group(f, layers)\n    f.flush()\n    f.close()",
                            "def compile(self, optimizer, loss, metrics=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer object.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create a placeholder for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensor (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument.\n            It should be a single tensor\n            (for a single-output `Sequential` model).\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n\n    # Example\n        ```python\n            model = Sequential()\n            model.add(Dense(32, input_shape=(500,)))\n            model.add(Dense(10, activation='softmax'))\n            model.compile(optimizer='rmsprop',\n                          loss='categorical_crossentropy',\n                          metrics=['accuracy'])\n        ```\n    \"\"\"\n    self.build()\n    self.model.compile(optimizer, loss, metrics=metrics, sample_weight_mode=sample_weight_mode, weighted_metrics=weighted_metrics, target_tensors=target_tensors, **kwargs)\n    self.optimizer = self.model.optimizer\n    self.loss = self.model.loss\n    self.metrics = self.model.metrics\n    self.loss_weights = self.model.loss_weights\n    self.sample_weight_mode = self.model.sample_weight_mode\n    self.weighted_metrics = self.model.weighted_metrics\n    self.targets = self.model.targets\n    self.metrics_tensors = self.model.metrics_tensors\n    self.metrics_names = self.model.metrics_names\n    self.sample_weights = self.model.sample_weights\n    self.total_loss = self.model.total_loss",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data.\n            If the input layer in the model is named, you can also pass a\n            dictionary mapping the input name to a Numpy array.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data.\n            If the output layer in the model is named, you can also pass a\n            dictionary mapping the output name to a Numpy array.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, it will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            This will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.')\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.fit(x, y, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, validation_split=validation_split, validation_data=validation_data, shuffle=shuffle, class_weight=class_weight, sample_weight=sample_weight, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x, y, batch_size=32, verbose=1, sample_weight=None):\n    \"\"\"Computes the loss on some input data, batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        batch_size: integer. Number of samples per gradient update.\n        verbose: verbosity mode, 0 or 1.\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.evaluate(x, y, batch_size=batch_size, verbose=verbose, sample_weight=sample_weight)",
                            "def predict(self, x, batch_size=32, verbose=0):\n    \"\"\"Generates output predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: the input data, as a Numpy array.\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict(x, batch_size=batch_size, verbose=verbose)",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict_on_batch(x)",
                            "def train_on_batch(self, x, y, class_weight=None, sample_weight=None):\n    \"\"\"Single gradient update over one batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        class_weight: dictionary mapping classes to a weight value,\n            used for scaling the loss function (during training only).\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar training loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Evaluates the model over a single batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.test_on_batch(x, y, sample_weight=sample_weight)",
                            "def predict_proba(self, x, batch_size=32, verbose=0):\n    \"\"\"Generates class probability predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of probability predictions.\n    \"\"\"\n    preds = self.predict(x, batch_size, verbose)\n    if preds.min() < 0.0 or preds.max() > 1.0:\n        warnings.warn('Network returning invalid probability values. The last layer might not normalize predictions into probabilities (like softmax or sigmoid would).')\n    return preds",
                            "def predict_classes(self, x, batch_size=32, verbose=0):\n    \"\"\"Generate class predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A numpy array of class predictions.\n    \"\"\"\n    proba = self.predict(x, batch_size=batch_size, verbose=verbose)\n    if proba.shape[-1] > 1:\n        return proba.argmax(axis=-1)\n    else:\n        return (proba > 0.5).astype('int32')",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Fits the model on data generated batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    # Arguments\n        generator: A generator.\n            The output of the generator must be either\n            - a tuple (inputs, targets)\n            - a tuple (inputs, targets, sample_weights).\n            All arrays should contain the same number of samples.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n        epochs: Integer, total number of iterations on the data.\n            Note that in conjunction with initial_epoch, the parameter\n            epochs is to be understood as \"final epoch\". The model is\n            not trained for n steps given by epochs, but until the\n            epoch epochs is reached.\n        verbose: Verbosity mode, 0, 1, or 2.\n        callbacks: List of callbacks to be called during training.\n        validation_data: This can be either\n            - A generator for the validation data\n            - A tuple (inputs, targets)\n            - A tuple (inputs, targets, sample_weights).\n        validation_steps: Only relevant if `validation_data`\n            is a generator.\n            Number of steps to yield from validation generator\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n        class_weight: Dictionary mapping class indices to a weight\n            for the class.\n        max_queue_size: Maximum size for the generator queue\n        workers: Maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (keras.utils.Sequence).\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                f = open(path)\n                for line in f:\n                    # create Numpy arrays of input data\n                    # and labels, from each line in the file\n                    x, y = process_line(line)\n                    yield (x, y)\n                f.close()\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=1000, epochs=10)\n    ```\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.fit_generator(generator, steps_per_epoch, epochs, verbose=verbose, callbacks=callbacks, validation_data=validation_data, validation_steps=validation_steps, class_weight=class_weight, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing, shuffle=shuffle, initial_epoch=initial_epoch)",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because this implementation\n            relies on multiprocessing, you should not pass\n            non picklable arguments to the generator\n            as they can't be passed easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled before being used.')\n    return self.model.evaluate_generator(generator, steps, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing)",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: generator yielding batches of input samples.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because this implementation\n            relies on multiprocessing, you should not pass\n            non picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict_generator(generator, steps, max_queue_size=max_queue_size, workers=workers, use_multiprocessing=use_multiprocessing, verbose=verbose)",
                            "def get_config(self):\n    if isinstance(self.layers[0], legacy_layers.Merge):\n        return self.legacy_get_config()\n    config = []\n    for layer in self.layers:\n        config.append({'class_name': layer.__class__.__name__, 'config': layer.get_config()})\n    return copy.deepcopy(config)",
                            "@classmethod\ndef from_config(cls, config, custom_objects=None):\n    if 'class_name' not in config[0] or config[0]['class_name'] == 'Merge':\n        return cls.legacy_from_config(config)\n    model = cls()\n    for conf in config:\n        layer = layer_module.deserialize(conf, custom_objects=custom_objects)\n        model.add(layer)\n    return model",
                            "def legacy_get_config(self):\n    \"\"\"Retrieves the model configuration as a Python list.\n\n    # Returns\n        A list of dicts (each dict is a layer config).\n    \"\"\"\n    config = []\n    if isinstance(self.layers[0], legacy_layers.Merge):\n        assert hasattr(self.layers[0], 'layers')\n        layers = []\n        for layer in self.layers[0].layers:\n            layer_config = {'class_name': layer.__class__.__name__, 'config': layer.get_config()}\n            layers.append(layer_config)\n        merge_config = self.layers[0].get_config()\n        merge_config['layers'] = layers\n        config.append({'class_name': 'Merge', 'config': merge_config})\n    else:\n        config.append({'class_name': self.layers[0].__class__.__name__, 'config': self.layers[0].get_config()})\n    for layer in self.layers[1:]:\n        config.append({'class_name': layer.__class__.__name__, 'config': layer.get_config()})\n    return copy.deepcopy(config)",
                            "@classmethod\ndef legacy_from_config(cls, config, layer_cache=None):\n    \"\"\"Load a model from a legacy configuration.\n\n    # Arguments\n        config: dictionary with configuration.\n        layer_cache: cache to draw pre-existing layer.\n\n    # Returns\n        The loaded Model.\n    \"\"\"\n    if not layer_cache:\n        layer_cache = {}\n\n    def normalize_legacy_config(conf):\n        if 'class_name' not in conf:\n            class_name = conf['name']\n            name = conf.get('custom_name')\n            conf['name'] = name\n            return {'class_name': class_name, 'config': conf}\n        return conf\n    model = cls()\n\n    def get_or_create_layer(layer_data):\n        name = layer_data['config'].get('name')\n        if name in layer_cache:\n            return layer_cache[name]\n        layer = layer_module.deserialize(layer_data)\n        layer_cache[name] = layer\n        return layer\n    first_layer = config[0]\n    first_layer = normalize_legacy_config(first_layer)\n    if first_layer['class_name'] == 'Merge':\n        merge_inputs = []\n        first_layer_config = first_layer['config']\n        for merge_input_config in first_layer_config.pop('layers'):\n            merge_input = layer_module.deserialize(merge_input_config)\n            merge_inputs.append(merge_input)\n        first_layer_config['layers'] = merge_inputs\n        merge = legacy_layers.Merge.from_config(first_layer_config)\n        model.add(merge)\n    else:\n        layer = get_or_create_layer(first_layer)\n        model.add(layer)\n    for conf in config[1:]:\n        conf = normalize_legacy_config(conf)\n        layer = get_or_create_layer(conf)\n        model.add(layer)\n    return model",
                            "def normalize_legacy_config(conf):\n    if 'class_name' not in conf:\n        class_name = conf['name']\n        name = conf.get('custom_name')\n        conf['name'] = name\n        return {'class_name': class_name, 'config': conf}\n    return conf",
                            "def get_or_create_layer(layer_data):\n    name = layer_data['config'].get('name')\n    if name in layer_cache:\n        return layer_cache[name]\n    layer = layer_module.deserialize(layer_data)\n    layer_cache[name] = layer\n    return layer"
                        ],
                        "constructor_variables": [
                            "layers",
                            "outbound_nodes",
                            "model",
                            "_trainable",
                            "inputs",
                            "name",
                            "built",
                            "inbound_nodes",
                            "prefix",
                            "_initial_weights",
                            "outputs"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, layers=None, name=None)",
                            "add(self, layer)",
                            "pop(self)",
                            "get_layer(self, name=None, index=None)",
                            "call(self, inputs, mask=None)",
                            "build(self, input_shape=None)",
                            "uses_learning_phase(self)",
                            "_flattened_layers(self)",
                            "_gather_list_attr(self, attr)",
                            "trainable(self)",
                            "trainable(self, value)",
                            "trainable_weights(self)",
                            "non_trainable_weights(self)",
                            "updates(self)",
                            "state_updates(self)",
                            "get_updates_for(self, inputs)",
                            "losses(self)",
                            "get_losses_for(self, inputs)",
                            "regularizers(self)",
                            "get_weights(self)",
                            "set_weights(self, weights)",
                            "load_weights(self, filepath, by_name=False)",
                            "save_weights(self, filepath, overwrite=True)",
                            "compile(self, optimizer, loss, metrics=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x, y, batch_size=32, verbose=1, sample_weight=None)",
                            "predict(self, x, batch_size=32, verbose=0)",
                            "predict_on_batch(self, x)",
                            "train_on_batch(self, x, y, class_weight=None, sample_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_proba(self, x, batch_size=32, verbose=0)",
                            "predict_classes(self, x, batch_size=32, verbose=0)",
                            "fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False)",
                            "predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "get_config(self)",
                            "from_config(cls, config, custom_objects=None)",
                            "legacy_get_config(self)",
                            "legacy_from_config(cls, config, layer_cache=None)",
                            "normalize_legacy_config(conf)",
                            "get_or_create_layer(layer_data)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def save_model(model, filepath, overwrite=True, include_optimizer=True):\n    \"\"\"Save a model to a HDF5 file.\n\n    The saved model contains:\n        - the model's configuration (topology)\n        - the model's weights\n        - the model's optimizer's state (if any)\n\n    Thus the saved model can be reinstantiated in\n    the exact same state, without any of the code\n    used for model definition or training.\n\n    # Arguments\n        model: Keras model instance to be saved.\n        filepath: String, path where to save the model.\n        overwrite: Whether we should overwrite any existing\n            model at the target location, or instead\n            ask the user with a manual prompt.\n        include_optimizer: If True, save optimizer's state together.\n\n    # Raises\n        ImportError: if h5py is not available.\n    \"\"\"\n\n    if h5py is None:\n        raise ImportError('`save_model` requires h5py.')\n\n    def get_json_type(obj):\n        \"\"\"Serialize any object to a JSON-serializable structure.\n\n        # Arguments\n            obj: the object to serialize\n\n        # Returns\n            JSON-serializable structure representing `obj`.\n\n        # Raises\n            TypeError: if `obj` cannot be serialized.\n        \"\"\"\n        # if obj is a serializable Keras class instance\n        # e.g. optimizer, layer\n        if hasattr(obj, 'get_config'):\n            return {'class_name': obj.__class__.__name__,\n                    'config': obj.get_config()}\n\n        # if obj is any numpy type\n        if type(obj).__module__ == np.__name__:\n            if isinstance(obj, np.ndarray):\n                return {'type': type(obj),\n                        'value': obj.tolist()}\n            else:\n                return obj.item()\n\n        # misc functions (e.g. loss function)\n        if callable(obj):\n            return obj.__name__\n\n        # if obj is a python 'type'\n        if type(obj).__name__ == type.__name__:\n            return obj.__name__\n\n        raise TypeError('Not JSON Serializable:', obj)\n\n    from . import __version__ as keras_version\n\n    # If file exists and should not be overwritten.\n    if not overwrite and os.path.isfile(filepath):\n        proceed = ask_to_proceed_with_overwrite(filepath)\n        if not proceed:\n            return\n\n    with h5py.File(filepath, mode='w') as f:\n        f.attrs['keras_version'] = str(keras_version).encode('utf8')\n        f.attrs['backend'] = K.backend().encode('utf8')\n        f.attrs['model_config'] = json.dumps({\n            'class_name': model.__class__.__name__,\n            'config': model.get_config()\n        }, default=get_json_type).encode('utf8')\n\n        model_weights_group = f.create_group('model_weights')\n        if legacy_models.needs_legacy_support(model):\n            model_layers = legacy_models.legacy_sequential_layers(model)\n        else:\n            model_layers = model.layers\n        topology.save_weights_to_hdf5_group(model_weights_group, model_layers)\n\n        if include_optimizer and hasattr(model, 'optimizer'):\n            if isinstance(model.optimizer, optimizers.TFOptimizer):\n                warnings.warn(\n                    'TensorFlow optimizers do not '\n                    'make it possible to access '\n                    'optimizer attributes or optimizer state '\n                    'after instantiation. '\n                    'As a result, we cannot save the optimizer '\n                    'as part of the model save file.'\n                    'You will have to compile your model again '\n                    'after loading it. '\n                    'Prefer using a Keras optimizer instead '\n                    '(see keras.io/optimizers).')\n            else:\n                f.attrs['training_config'] = json.dumps({\n                    'optimizer_config': {\n                        'class_name': model.optimizer.__class__.__name__,\n                        'config': model.optimizer.get_config()\n                    },\n                    'loss': model.loss,\n                    'metrics': model.metrics,\n                    'sample_weight_mode': model.sample_weight_mode,\n                    'loss_weights': model.loss_weights,\n                }, default=get_json_type).encode('utf8')\n\n                # Save optimizer weights.\n                symbolic_weights = getattr(model.optimizer, 'weights')\n                if symbolic_weights:\n                    optimizer_weights_group = f.create_group('optimizer_weights')\n                    weight_values = K.batch_get_value(symbolic_weights)\n                    weight_names = []\n                    for i, (w, val) in enumerate(zip(symbolic_weights,\n                                                     weight_values)):\n                        # Default values of symbolic_weights is /variable\n                        # for theano and cntk\n                        if K.backend() == 'theano' or K.backend() == 'cntk':\n                            if hasattr(w, 'name'):\n                                if w.name.split('/')[-1] == 'variable':\n                                    name = str(w.name) + '_' + str(i)\n                                else:\n                                    name = str(w.name)\n                            else:\n                                name = 'param_' + str(i)\n                        else:\n                            if hasattr(w, 'name') and w.name:\n                                name = str(w.name)\n                            else:\n                                name = 'param_' + str(i)\n                        weight_names.append(name.encode('utf8'))\n                    optimizer_weights_group.attrs['weight_names'] = weight_names\n                    for name, val in zip(weight_names, weight_values):\n                        param_dset = optimizer_weights_group.create_dataset(\n                            name,\n                            val.shape,\n                            dtype=val.dtype)\n                        if not val.shape:\n                            # scalar\n                            param_dset[()] = val\n                        else:\n                            param_dset[:] = val\n        f.flush()",
                "def load_model(filepath, custom_objects=None, compile=True):\n    \"\"\"Loads a model saved via `save_model`.\n\n    # Arguments\n        filepath: String, path to the saved model.\n        custom_objects: Optional dictionary mapping names\n            (strings) to custom classes or functions to be\n            considered during deserialization.\n        compile: Boolean, whether to compile the model\n            after loading.\n\n    # Returns\n        A Keras model instance. If an optimizer was found\n        as part of the saved model, the model is already\n        compiled. Otherwise, the model is uncompiled and\n        a warning will be displayed. When `compile` is set\n        to False, the compilation is omitted without any\n        warning.\n\n    # Raises\n        ImportError: if h5py is not available.\n        ValueError: In case of an invalid savefile.\n    \"\"\"\n    if h5py is None:\n        raise ImportError('`load_model` requires h5py.')\n\n    if not custom_objects:\n        custom_objects = {}\n\n    def convert_custom_objects(obj):\n        \"\"\"Handles custom object lookup.\n\n        # Arguments\n            obj: object, dict, or list.\n\n        # Returns\n            The same structure, where occurrences\n                of a custom object name have been replaced\n                with the custom object.\n        \"\"\"\n        if isinstance(obj, list):\n            deserialized = []\n            for value in obj:\n                deserialized.append(convert_custom_objects(value))\n            return deserialized\n        if isinstance(obj, dict):\n            deserialized = {}\n            for key, value in obj.items():\n                deserialized[key] = convert_custom_objects(value)\n            return deserialized\n        if obj in custom_objects:\n            return custom_objects[obj]\n        return obj\n    with h5py.File(filepath, mode='r') as f:\n        # instantiate model\n        model_config = f.attrs.get('model_config')\n        if model_config is None:\n            raise ValueError('No model found in config file.')\n        model_config = json.loads(model_config.decode('utf-8'))\n        model = model_from_config(model_config, custom_objects=custom_objects)\n\n        # set weights\n        topology.load_weights_from_hdf5_group(f['model_weights'], model.layers)\n\n        # Early return if compilation is not required.\n        if not compile:\n            return model\n\n        # instantiate optimizer\n        training_config = f.attrs.get('training_config')\n        if training_config is None:\n            warnings.warn('No training configuration found in save file: '\n                          'the model was *not* compiled. Compile it manually.')\n            return model\n        training_config = json.loads(training_config.decode('utf-8'))\n        optimizer_config = training_config['optimizer_config']\n        optimizer = optimizers.deserialize(optimizer_config,\n                                           custom_objects=custom_objects)\n\n        # Recover loss functions and metrics.\n        loss = convert_custom_objects(training_config['loss'])\n        metrics = convert_custom_objects(training_config['metrics'])\n        sample_weight_mode = training_config['sample_weight_mode']\n        loss_weights = training_config['loss_weights']\n\n        # Compile model.\n        model.compile(optimizer=optimizer,\n                      loss=loss,\n                      metrics=metrics,\n                      loss_weights=loss_weights,\n                      sample_weight_mode=sample_weight_mode)\n\n        # Set optimizer weights.\n        if 'optimizer_weights' in f:\n            # Build train function (to get weight updates).\n            if isinstance(model, Sequential):\n                model.model._make_train_function()\n            else:\n                model._make_train_function()\n            optimizer_weights_group = f['optimizer_weights']\n            optimizer_weight_names = [n.decode('utf8') for n in\n                                      optimizer_weights_group.attrs['weight_names']]\n            optimizer_weight_values = [optimizer_weights_group[n] for n in\n                                       optimizer_weight_names]\n            try:\n                model.optimizer.set_weights(optimizer_weight_values)\n            except ValueError:\n                warnings.warn('Error in loading the saved optimizer '\n                              'state. As a result, your model is '\n                              'starting with a freshly initialized '\n                              'optimizer.')\n    return model",
                "def model_from_config(config, custom_objects=None):\n    \"\"\"Instantiates a Keras model from its config.\n\n    # Arguments\n        config: Configuration dictionary.\n        custom_objects: Optional dictionary mapping names\n            (strings) to custom classes or functions to be\n            considered during deserialization.\n\n    # Returns\n        A Keras model instance (uncompiled).\n\n    # Raises\n        TypeError: if `config` is not a dictionary.\n    \"\"\"\n    if isinstance(config, list):\n        raise TypeError('`model_from_config` expects a dictionary, not a list. '\n                        'Maybe you meant to use '\n                        '`Sequential.from_config(config)`?')\n    return layer_module.deserialize(config, custom_objects=custom_objects)",
                "def model_from_yaml(yaml_string, custom_objects=None):\n    \"\"\"Parses a yaml model configuration file and returns a model instance.\n\n    # Arguments\n        yaml_string: YAML string encoding a model configuration.\n        custom_objects: Optional dictionary mapping names\n            (strings) to custom classes or functions to be\n            considered during deserialization.\n\n    # Returns\n        A Keras model instance (uncompiled).\n    \"\"\"\n    config = yaml.load(yaml_string)\n    return layer_module.deserialize(config, custom_objects=custom_objects)",
                "def model_from_json(json_string, custom_objects=None):\n    \"\"\"Parses a JSON model configuration file and returns a model instance.\n\n    # Arguments\n        json_string: JSON string encoding a model configuration.\n        custom_objects: Optional dictionary mapping names\n            (strings) to custom classes or functions to be\n            considered during deserialization.\n\n    # Returns\n        A Keras model instance (uncompiled).\n    \"\"\"\n    config = json.loads(json_string)\n    return layer_module.deserialize(config, custom_objects=custom_objects)",
                "def _clone_functional_model(model, input_tensors=None):\n    \"\"\"Clone a functional `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Model` instance, got ', model)\n    if isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a functional `Model` instance, '\n                         'got a `Sequential` instance instead:', model)\n\n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    if input_tensors is None:\n        # Create placeholders to build the model on top of.\n        input_layers = []\n        input_tensors = []\n        for layer in model.input_layers:\n            input_tensor = Input(batch_shape=layer.batch_input_shape,\n                                 dtype=layer.dtype,\n                                 sparse=layer.sparse,\n                                 name=layer.name)\n            input_tensors.append(input_tensor)\n            # Cache newly created input layer.\n            newly_created_input_layer = input_tensor._keras_history[0]\n            layer_map[layer] = newly_created_input_layer\n        for original_input_layer, cloned_input_layer in zip(model.input_layers, input_layers):\n            layer_map[original_input_layer] = cloned_input_layer\n    else:\n        # Make sure that all input tensors come from a Keras layer.\n        # If tensor comes from an input layer: cache the input layer.\n        input_tensors = topology._to_list(input_tensors)\n        _input_tensors = []\n        for i, x in enumerate(input_tensors):\n            if not K.is_keras_tensor(x):\n                name = model.input_layers[i].name\n                input_tensor = Input(tensor=x,\n                                     name='input_wrapper_for_' + name)\n                _input_tensors.append(input_tensor)\n                # Cache newly created input layer.\n                original_input_layer = x._keras_history[0]\n                newly_created_input_layer = input_tensor._keras_history[0]\n                layer_map[original_input_layer] = newly_created_input_layer\n            else:\n                _input_tensors.append(x)\n        input_tensors = _input_tensors\n\n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n\n    # Iterated over every node in the reference model, in depth order.\n    depth_keys = list(model.nodes_by_depth.keys())\n    depth_keys.sort(reverse=True)\n    for depth in depth_keys:\n        nodes = model.nodes_by_depth[depth]\n        for node in nodes:\n            # Recover the corresponding layer.\n            layer = node.outbound_layer\n\n            # Get or create layer.\n            if layer not in layer_map:\n                # Clone layer.\n                new_layer = layer.__class__.from_config(layer.get_config())\n                layer_map[layer] = new_layer\n                layer = new_layer\n            else:\n                # Reuse previously cloned layer.\n                layer = layer_map[layer]\n                # Don't call InputLayer multiple times.\n                if isinstance(layer, topology.InputLayer):\n                    continue\n\n            # Gather inputs to call the new layer.\n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n\n            # If all previous input tensors are available in tensor_map,\n            # then call node.inbound_layer on them.\n            computed_data = []  # List of tuples (input, mask).\n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n\n            if len(computed_data) == len(reference_input_tensors):\n                # Call layer.\n                if node.arguments:\n                    kwargs = node.arguments\n                else:\n                    kwargs = {}\n                if len(computed_data) == 1:\n                    computed_tensor, computed_mask = computed_data[0]\n                    if has_arg(layer.call, 'mask'):\n                        if 'mask' not in kwargs:\n                            kwargs['mask'] = computed_mask\n                    output_tensors = topology._to_list(\n                        layer(computed_tensor, **kwargs))\n                    output_masks = topology._to_list(\n                        layer.compute_mask(computed_tensor,\n                                           computed_mask))\n                    computed_tensors = [computed_tensor]\n                    computed_masks = [computed_mask]\n                else:\n                    computed_tensors = [x[0] for x in computed_data]\n                    computed_masks = [x[1] for x in computed_data]\n                    if has_arg(layer.call, 'mask'):\n                        if 'mask' not in kwargs:\n                            kwargs['mask'] = computed_masks\n                    output_tensors = topology._to_list(\n                        layer(computed_tensors, **kwargs))\n                    output_masks = topology._to_list(\n                        layer.compute_mask(computed_tensors,\n                                           computed_masks))\n                # Update tensor_map.\n                for x, y, mask in zip(reference_output_tensors,\n                                      output_tensors,\n                                      output_masks):\n                    tensor_map[x] = (y, mask)\n\n    # Check that we did compute the model outputs,\n    # then instantiate a new model from inputs and outputs.\n    output_tensors = []\n    for x in model.outputs:\n        assert x in tensor_map, 'Could not compute output ' + str(x)\n        tensor, _ = tensor_map[x]\n        output_tensors.append(tensor)\n    return Model(input_tensors, output_tensors, name=model.name)",
                "def _clone_sequential_model(model, input_tensors=None):\n    \"\"\"Clone a `Sequential` model instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Sequential`.\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Sequential` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if not isinstance(model, Sequential):\n        raise ValueError('Expected `model` argument '\n                         'to be a `Sequential` model instance, '\n                         'but got:', model)\n\n    def clone(layer):\n        return layer.__class__.from_config(layer.get_config())\n\n    layers = [clone(layer) for layer in model.layers]\n    if input_tensors is None:\n        return Sequential(layers=layers, name=model.name)\n    else:\n        if len(topology._to_list(input_tensors)) != 1:\n            raise ValueError('To clone a `Sequential` model, we expect '\n                             ' at most one tensor '\n                             'as part of `input_tensors`.')\n        x = topology._to_list(input_tensors)[0]\n        if K.is_keras_tensor(x):\n            origin_layer = x._keras_history[0]\n            if isinstance(origin_layer, topology.InputLayer):\n                return Sequential(layers=[origin_layer] + layers,\n                                  name=model.name)\n            else:\n                raise ValueError('Cannot clone a `Sequential` model on top '\n                                 'of a tensor that comes from a Keras layer '\n                                 'other than an `InputLayer`. '\n                                 'Use the functional API instead.')\n        input_tensor = Input(tensor=x,\n                             name='input_wrapper_for_' + str(x.name))\n        input_layer = input_tensor._keras_history[0]\n        return Sequential(layers=[input_layer] + layers, name=model.name)",
                "def clone_model(model, input_tensors=None):\n    \"\"\"Clone any `Model` instance.\n\n    Model cloning is similar to calling a model on new inputs,\n    except that it creates new layers (and thus new weights) instead\n    of sharing the weights of the existing layers.\n\n    # Arguments\n        model: Instance of `Model`\n            (could be a functional model or a Sequential model).\n        input_tensors: optional list of input tensors\n            to build the model upon. If not provided,\n            placeholders will be created.\n\n    # Returns\n        An instance of `Model` reproducing the behavior\n        of the original model, on top of new inputs tensors,\n        using newly instantiated weights.\n\n    # Raises\n        ValueError: in case of invalid `model` argument value.\n    \"\"\"\n    if isinstance(model, Sequential):\n        return _clone_sequential_model(model, input_tensors=input_tensors)\n    else:\n        return _clone_functional_model(model, input_tensors=input_tensors)",
                "def get_json_type(obj):\n    \"\"\"Serialize any object to a JSON-serializable structure.\n\n    # Arguments\n        obj: the object to serialize\n\n    # Returns\n        JSON-serializable structure representing `obj`.\n\n    # Raises\n        TypeError: if `obj` cannot be serialized.\n    \"\"\"\n    # if obj is a serializable Keras class instance\n    # e.g. optimizer, layer\n    if hasattr(obj, 'get_config'):\n        return {'class_name': obj.__class__.__name__,\n                'config': obj.get_config()}\n\n    # if obj is any numpy type\n    if type(obj).__module__ == np.__name__:\n        if isinstance(obj, np.ndarray):\n            return {'type': type(obj),\n                    'value': obj.tolist()}\n        else:\n            return obj.item()\n\n    # misc functions (e.g. loss function)\n    if callable(obj):\n        return obj.__name__\n\n    # if obj is a python 'type'\n    if type(obj).__name__ == type.__name__:\n        return obj.__name__\n\n    raise TypeError('Not JSON Serializable:', obj)",
                "def convert_custom_objects(obj):\n    \"\"\"Handles custom object lookup.\n\n    # Arguments\n        obj: object, dict, or list.\n\n    # Returns\n        The same structure, where occurrences\n            of a custom object name have been replaced\n            with the custom object.\n    \"\"\"\n    if isinstance(obj, list):\n        deserialized = []\n        for value in obj:\n            deserialized.append(convert_custom_objects(value))\n        return deserialized\n    if isinstance(obj, dict):\n        deserialized = {}\n        for key, value in obj.items():\n            deserialized[key] = convert_custom_objects(value)\n        return deserialized\n    if obj in custom_objects:\n        return custom_objects[obj]\n    return obj",
                "def __init__(self, layers=None, name=None):\n    self.layers = []  # Stack of layers.\n    self.model = None  # Internal Model instance.\n    self.inputs = []  # List of input tensors\n    self.outputs = []  # List of length 1: the output tensor (unique).\n    self._trainable = True\n    self._initial_weights = None\n\n    # Model attributes.\n    self.inbound_nodes = []\n    self.outbound_nodes = []\n    self.built = False\n\n    # Set model name.\n    if not name:\n        prefix = 'sequential_'\n        name = prefix + str(K.get_uid(prefix))\n    self.name = name\n\n    # Add to the model any layers passed to the constructor.\n    if layers:\n        for layer in layers:\n            self.add(layer)",
                "def add(self, layer):\n    \"\"\"Adds a layer instance on top of the layer stack.\n\n    # Arguments\n        layer: layer instance.\n\n    # Raises\n        TypeError: If `layer` is not a layer instance.\n        ValueError: In case the `layer` argument does not\n            know its input shape.\n        ValueError: In case the `layer` argument has\n            multiple output tensors, or is already connected\n            somewhere else (forbidden in `Sequential` models).\n    \"\"\"\n    if not isinstance(layer, Layer):\n        raise TypeError('The added layer must be '\n                        'an instance of class Layer. '\n                        'Found: ' + str(layer))\n    if not self.outputs:\n        # First layer in model: check that it is an input layer.\n        if not isinstance(layer, (InputLayer, legacy_layers.Merge)):\n            # Create an input layer.\n            # First, we need to infer its expected input shape and dtype.\n            if isinstance(layer, (Model, Sequential)):\n                # We were passed a model as first layer.\n                # This requires a specific way to figure out the\n                # input shape and dtype.\n                if not layer.layers:\n                    raise ValueError('Cannot add an empty model '\n                                     'to a `Sequential` model.')\n                # In case of nested models: recover the first layer\n                # of the deepest model to infer input shape and dtype.\n                first_layer = layer.layers[0]\n                while isinstance(first_layer, (Model, Sequential)):\n                    first_layer = first_layer.layers[0]\n                batch_shape = first_layer.batch_input_shape\n                dtype = first_layer.dtype\n            else:\n                # We were passed a regular layer, and it should\n                # know about its input shape. Otherwise, that's an error.\n                if not hasattr(layer, 'batch_input_shape'):\n                    raise ValueError('The first layer in a '\n                                     'Sequential model must '\n                                     'get an `input_shape` or '\n                                     '`batch_input_shape` argument.')\n                batch_shape = layer.batch_input_shape\n                dtype = layer.dtype\n            # Instantiate the input layer.\n            x = Input(batch_shape=batch_shape,\n                      dtype=dtype,\n                      name=layer.name + '_input')\n            # This will build the current layer\n            # and create the node connecting the current layer\n            # to the input layer we just created.\n            layer(x)\n\n        if len(layer.inbound_nodes[-1].output_tensors) != 1:\n            raise ValueError('All layers in a Sequential model '\n                             'should have a single output tensor. '\n                             'For multi-output layers, '\n                             'use the functional API.')\n\n        self.outputs = [layer.inbound_nodes[-1].output_tensors[0]]\n        self.inputs = topology.get_source_inputs(self.outputs[0])\n\n        # We create an input node, which we will keep updated\n        # as we add more layers\n        topology.Node(outbound_layer=self,\n                      inbound_layers=[],\n                      node_indices=[],\n                      tensor_indices=[],\n                      input_tensors=self.inputs,\n                      output_tensors=self.outputs,\n                      # no model-level masking for now\n                      input_masks=[None for _ in self.inputs],\n                      output_masks=[None],\n                      input_shapes=[x._keras_shape for x in self.inputs],\n                      output_shapes=[self.outputs[0]._keras_shape])\n    else:\n        output_tensor = layer(self.outputs[0])\n        if isinstance(output_tensor, list):\n            raise TypeError('All layers in a Sequential model '\n                            'should have a single output tensor. '\n                            'For multi-output layers, '\n                            'use the functional API.')\n        self.outputs = [output_tensor]\n        # update self.inbound_nodes\n        self.inbound_nodes[0].output_tensors = self.outputs\n        self.inbound_nodes[0].output_shapes = [self.outputs[0]._keras_shape]\n\n    self.layers.append(layer)\n    self.built = False",
                "def pop(self):\n    \"\"\"Removes the last layer in the model.\n\n    # Raises\n        TypeError: if there are no layers in the model.\n    \"\"\"\n    if not self.layers:\n        raise TypeError('There are no layers in the model.')\n\n    self.layers.pop()\n    if not self.layers:\n        self.outputs = []\n        self.inbound_nodes = []\n        self.outbound_nodes = []\n    else:\n        self.layers[-1].outbound_nodes = []\n        self.outputs = [self.layers[-1].output]\n        # update self.inbound_nodes\n        self.inbound_nodes[0].output_tensors = self.outputs\n        self.inbound_nodes[0].output_shapes = [self.outputs[0]._keras_shape]\n    self.built = False",
                "def get_layer(self, name=None, index=None):\n    \"\"\"Retrieve a layer that is part of the model.\n\n    Returns a layer based on either its name (unique)\n    or its index in the graph. Indices are based on\n    order of horizontal graph traversal (bottom-up).\n\n    # Arguments\n        name: string, name of layer.\n        index: integer, index of layer.\n\n    # Returns\n        A layer instance.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.get_layer(name, index)",
                "def call(self, inputs, mask=None):\n    if not self.built:\n        self.build()\n    return self.model.call(inputs, mask)",
                "def build(self, input_shape=None):\n    if not self.inputs or not self.outputs:\n        raise TypeError('Sequential model cannot be built: model is empty.'\n                        ' Add some layers first.')\n    # actually create the model\n    self.model = Model(self.inputs, self.outputs[0],\n                       name=self.name + '_model')\n    self.model.trainable = self.trainable\n\n    # mirror model attributes\n    self.supports_masking = self.model.supports_masking\n    self._output_mask_cache = self.model._output_mask_cache\n    self._output_tensor_cache = self.model._output_tensor_cache\n    self._output_shape_cache = self.model._output_shape_cache\n    self.input_layers = self.model.input_layers\n    self.input_layers_node_indices = self.model.input_layers_node_indices\n    self.input_layers_tensor_indices = self.model.input_layers_tensor_indices\n    self.output_layers = self.model.output_layers\n    self.output_layers_node_indices = self.model.output_layers_node_indices\n    self.output_layers_tensor_indices = self.model.output_layers_tensor_indices\n    self.nodes_by_depth = self.model.nodes_by_depth\n    self.container_nodes = self.model.container_nodes\n    self.output_names = self.model.output_names\n    self.input_names = self.model.input_names\n    self._feed_input_names = self.model._feed_input_names\n    self._feed_inputs = self.model._feed_inputs\n\n    # Make sure child model callbacks\n    # will call the parent Sequential model.\n    self.model.callback_model = self\n    self.built = True",
                "@property\ndef uses_learning_phase(self):\n    if not self.built:\n        self.build()\n    return self.model.uses_learning_phase",
                "@property\ndef _flattened_layers(self):\n    layers = []\n    if self.layers:\n        # Support for legacy models\n        if isinstance(self.layers[0], legacy_layers.Merge):\n            merge = self.layers[0]\n            for layer in merge.layers:\n                if hasattr(layer, '_flattened_layers'):\n                    for sublayer in layer._flattened_layers:\n                        if sublayer not in layers:\n                            layers.append(sublayer)\n                elif hasattr(layer, 'layers'):\n                    for sublayer in layer.layers:\n                        if sublayer not in layers:\n                            layers.append(sublayer)\n                else:\n                    if layer not in layers:\n                        layers.append(layer)\n        else:\n            if self.layers[0] not in layers:\n                layers.append(self.layers[0])\n        for layer in self.layers[1:]:\n            if layer not in layers:\n                layers.append(layer)\n    return layers",
                "def _gather_list_attr(self, attr):\n    all_attrs = []\n    for layer in self._flattened_layers:\n        all_attrs += getattr(layer, attr, [])\n    return all_attrs",
                "@property\ndef trainable(self):\n    return self._trainable",
                "@trainable.setter\ndef trainable(self, value):\n    if self.model:\n        self.model.trainable = value\n    self._trainable = value",
                "@property\ndef trainable_weights(self):\n    if not self.trainable:\n        return []\n    # Support for legacy behavior\n    return self._gather_list_attr('trainable_weights')",
                "@property\ndef non_trainable_weights(self):\n    # Support for legacy behavior\n    weights = self._gather_list_attr('non_trainable_weights')\n    if not self.trainable:\n        trainable_weights = self._gather_list_attr('trainable_weights')\n        return trainable_weights + weights\n    return weights",
                "@property\ndef updates(self):\n    if not self.built:\n        self.build()\n    return self.model.updates",
                "@property\ndef state_updates(self):\n    if not self.built:\n        self.build()\n    return self.model.state_updates",
                "def get_updates_for(self, inputs):\n    if not self.built:\n        self.build()\n    return self.model.get_updates_for(inputs)",
                "@property\ndef losses(self):\n    if not self.built:\n        self.build()\n    return self.model.losses",
                "def get_losses_for(self, inputs):\n    if not self.built:\n        self.build()\n    return self.model.get_losses_for(inputs)",
                "@property\ndef regularizers(self):\n    if not self.built:\n        self.build()\n    return self.model.regularizers",
                "def get_weights(self):\n    \"\"\"Retrieves the weights of the model.\n\n    # Returns\n        A flat list of Numpy arrays\n        (one array per model weight).\n    \"\"\"\n    # Legacy support\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n        weights = []\n        for layer in layers:\n            weights.append(layer.get_weights())\n        return weights\n\n    if not self.built:\n        self.build()\n    return self.model.get_weights()",
                "def set_weights(self, weights):\n    \"\"\"Sets the weights of the model.\n\n    # Arguments\n        weights: Should be a list\n            of Numpy arrays with shapes and types matching\n            the output of `model.get_weights()`.\n    \"\"\"\n    # Legacy support\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n        for layer in layers:\n            nb_param = len(layer.weights)\n            layer.set_weights(weights[:nb_param])\n            weights = weights[nb_param:]\n\n    if not self.built:\n        self.build()\n    self.model.set_weights(weights)",
                "def load_weights(self, filepath, by_name=False):\n    if h5py is None:\n        raise ImportError('`load_weights` requires h5py.')\n    f = h5py.File(filepath, mode='r')\n    if 'layer_names' not in f.attrs and 'model_weights' in f:\n        f = f['model_weights']\n\n    # Legacy support\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n    else:\n        layers = self.layers\n    if by_name:\n        topology.load_weights_from_hdf5_group_by_name(f, layers)\n    else:\n        topology.load_weights_from_hdf5_group(f, layers)\n    if hasattr(f, 'close'):\n        f.close()",
                "def save_weights(self, filepath, overwrite=True):\n    if h5py is None:\n        raise ImportError('`save_weights` requires h5py.')\n    # If file exists and should not be overwritten:\n    if not overwrite and os.path.isfile(filepath):\n        proceed = ask_to_proceed_with_overwrite(filepath)\n        if not proceed:\n            return\n    # Legacy support\n    if legacy_models.needs_legacy_support(self):\n        layers = legacy_models.legacy_sequential_layers(self)\n    else:\n        layers = self.layers\n\n    f = h5py.File(filepath, 'w')\n    topology.save_weights_to_hdf5_group(f, layers)\n    f.flush()\n    f.close()",
                "def compile(self, optimizer, loss,\n            metrics=None,\n            sample_weight_mode=None,\n            weighted_metrics=None,\n            target_tensors=None,\n            **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer object.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create a placeholder for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensor (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument.\n            It should be a single tensor\n            (for a single-output `Sequential` model).\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n\n    # Example\n        ```python\n            model = Sequential()\n            model.add(Dense(32, input_shape=(500,)))\n            model.add(Dense(10, activation='softmax'))\n            model.compile(optimizer='rmsprop',\n                          loss='categorical_crossentropy',\n                          metrics=['accuracy'])\n        ```\n    \"\"\"\n    # create the underlying model\n    self.build()\n    # call compile method of Model class\n    self.model.compile(optimizer, loss,\n                       metrics=metrics,\n                       sample_weight_mode=sample_weight_mode,\n                       weighted_metrics=weighted_metrics,\n                       target_tensors=target_tensors,\n                       **kwargs)\n    self.optimizer = self.model.optimizer\n    self.loss = self.model.loss\n    self.metrics = self.model.metrics\n    self.loss_weights = self.model.loss_weights\n    self.sample_weight_mode = self.model.sample_weight_mode\n    self.weighted_metrics = self.model.weighted_metrics\n    self.targets = self.model.targets\n    self.metrics_tensors = self.model.metrics_tensors\n    self.metrics_names = self.model.metrics_names\n    self.sample_weights = self.model.sample_weights\n    self.total_loss = self.model.total_loss",
                "def fit(self,\n        x=None,\n        y=None,\n        batch_size=None,\n        epochs=1,\n        verbose=1,\n        callbacks=None,\n        validation_split=0.,\n        validation_data=None,\n        shuffle=True,\n        class_weight=None,\n        sample_weight=None,\n        initial_epoch=0,\n        steps_per_epoch=None,\n        validation_steps=None,\n        **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data.\n            If the input layer in the model is named, you can also pass a\n            dictionary mapping the input name to a Numpy array.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data.\n            If the output layer in the model is named, you can also pass a\n            dictionary mapping the output name to a Numpy array.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, it will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            This will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    # Legacy support\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` '\n                      'has been renamed `epochs`.')\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled '\n                           'before being used.')\n    return self.model.fit(x, y,\n                          batch_size=batch_size,\n                          epochs=epochs,\n                          verbose=verbose,\n                          callbacks=callbacks,\n                          validation_split=validation_split,\n                          validation_data=validation_data,\n                          shuffle=shuffle,\n                          class_weight=class_weight,\n                          sample_weight=sample_weight,\n                          initial_epoch=initial_epoch,\n                          steps_per_epoch=steps_per_epoch,\n                          validation_steps=validation_steps)",
                "def evaluate(self, x, y, batch_size=32, verbose=1,\n             sample_weight=None):\n    \"\"\"Computes the loss on some input data, batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        batch_size: integer. Number of samples per gradient update.\n        verbose: verbosity mode, 0 or 1.\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled '\n                           'before being used.')\n    return self.model.evaluate(x, y,\n                               batch_size=batch_size,\n                               verbose=verbose,\n                               sample_weight=sample_weight)",
                "def predict(self, x, batch_size=32, verbose=0):\n    \"\"\"Generates output predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: the input data, as a Numpy array.\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict(x, batch_size=batch_size, verbose=verbose)",
                "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict_on_batch(x)",
                "def train_on_batch(self, x, y, class_weight=None,\n                   sample_weight=None):\n    \"\"\"Single gradient update over one batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        class_weight: dictionary mapping classes to a weight value,\n            used for scaling the loss function (during training only).\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar training loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled '\n                           'before being used.')\n    return self.model.train_on_batch(x, y,\n                                     sample_weight=sample_weight,\n                                     class_weight=class_weight)",
                "def test_on_batch(self, x, y,\n                  sample_weight=None):\n    \"\"\"Evaluates the model over a single batch of samples.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        y: labels, as a Numpy array.\n        sample_weight: sample weights, as a Numpy array.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled '\n                           'before being used.')\n    return self.model.test_on_batch(x, y,\n                                    sample_weight=sample_weight)",
                "def predict_proba(self, x, batch_size=32, verbose=0):\n    \"\"\"Generates class probability predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of probability predictions.\n    \"\"\"\n    preds = self.predict(x, batch_size, verbose)\n    if preds.min() < 0. or preds.max() > 1.:\n        warnings.warn('Network returning invalid probability values. '\n                      'The last layer might not normalize predictions '\n                      'into probabilities '\n                      '(like softmax or sigmoid would).')\n    return preds",
                "def predict_classes(self, x, batch_size=32, verbose=0):\n    \"\"\"Generate class predictions for the input samples.\n\n    The input samples are processed batch by batch.\n\n    # Arguments\n        x: input data, as a Numpy array or list of Numpy arrays\n            (if the model has multiple inputs).\n        batch_size: integer.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A numpy array of class predictions.\n    \"\"\"\n    proba = self.predict(x, batch_size=batch_size, verbose=verbose)\n    if proba.shape[-1] > 1:\n        return proba.argmax(axis=-1)\n    else:\n        return (proba > 0.5).astype('int32')",
                "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator,\n                  steps_per_epoch,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"Fits the model on data generated batch-by-batch by a Python generator.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    # Arguments\n        generator: A generator.\n            The output of the generator must be either\n            - a tuple (inputs, targets)\n            - a tuple (inputs, targets, sample_weights).\n            All arrays should contain the same number of samples.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n        epochs: Integer, total number of iterations on the data.\n            Note that in conjunction with initial_epoch, the parameter\n            epochs is to be understood as \"final epoch\". The model is\n            not trained for n steps given by epochs, but until the\n            epoch epochs is reached.\n        verbose: Verbosity mode, 0, 1, or 2.\n        callbacks: List of callbacks to be called during training.\n        validation_data: This can be either\n            - A generator for the validation data\n            - A tuple (inputs, targets)\n            - A tuple (inputs, targets, sample_weights).\n        validation_steps: Only relevant if `validation_data`\n            is a generator.\n            Number of steps to yield from validation generator\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n        class_weight: Dictionary mapping class indices to a weight\n            for the class.\n        max_queue_size: Maximum size for the generator queue\n        workers: Maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        shuffle: Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (keras.utils.Sequence).\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while 1:\n                f = open(path)\n                for line in f:\n                    # create Numpy arrays of input data\n                    # and labels, from each line in the file\n                    x, y = process_line(line)\n                    yield (x, y)\n                f.close()\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=1000, epochs=10)\n    ```\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled '\n                           'before being used.')\n    return self.model.fit_generator(generator,\n                                    steps_per_epoch,\n                                    epochs,\n                                    verbose=verbose,\n                                    callbacks=callbacks,\n                                    validation_data=validation_data,\n                                    validation_steps=validation_steps,\n                                    class_weight=class_weight,\n                                    max_queue_size=max_queue_size,\n                                    workers=workers,\n                                    use_multiprocessing=use_multiprocessing,\n                                    shuffle=shuffle,\n                                    initial_epoch=initial_epoch)",
                "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps,\n                       max_queue_size=10, workers=1,\n                       use_multiprocessing=False):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because this implementation\n            relies on multiprocessing, you should not pass\n            non picklable arguments to the generator\n            as they can't be passed easily to children processes.\n\n    # Returns\n        Scalar test loss (if the model has no metrics)\n        or list of scalars (if the model computes other metrics).\n        The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        RuntimeError: if the model was never compiled.\n    \"\"\"\n    if not self.built:\n        raise RuntimeError('The model needs to be compiled '\n                           'before being used.')\n    return self.model.evaluate_generator(generator,\n                                         steps,\n                                         max_queue_size=max_queue_size,\n                                         workers=workers,\n                                         use_multiprocessing=use_multiprocessing)",
                "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps,\n                      max_queue_size=10, workers=1,\n                      use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: generator yielding batches of input samples.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n        max_queue_size: maximum size for the generator queue\n        workers: maximum number of processes to spin up\n        use_multiprocessing: if True, use process based threading.\n            Note that because this implementation\n            relies on multiprocessing, you should not pass\n            non picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        A Numpy array of predictions.\n    \"\"\"\n    if not self.built:\n        self.build()\n    return self.model.predict_generator(generator, steps,\n                                        max_queue_size=max_queue_size,\n                                        workers=workers,\n                                        use_multiprocessing=use_multiprocessing,\n                                        verbose=verbose)",
                "def get_config(self):\n    if isinstance(self.layers[0], legacy_layers.Merge):\n        return self.legacy_get_config()\n\n    config = []\n    for layer in self.layers:\n        config.append({'class_name': layer.__class__.__name__,\n                       'config': layer.get_config()})\n    return copy.deepcopy(config)",
                "@classmethod\ndef from_config(cls, config, custom_objects=None):\n    if 'class_name' not in config[0] or config[0]['class_name'] == 'Merge':\n        return cls.legacy_from_config(config)\n\n    model = cls()\n    for conf in config:\n        layer = layer_module.deserialize(conf, custom_objects=custom_objects)\n        model.add(layer)\n    return model",
                "def legacy_get_config(self):\n    \"\"\"Retrieves the model configuration as a Python list.\n\n    # Returns\n        A list of dicts (each dict is a layer config).\n    \"\"\"\n    config = []\n    if isinstance(self.layers[0], legacy_layers.Merge):\n        assert hasattr(self.layers[0], 'layers')\n        layers = []\n        for layer in self.layers[0].layers:\n            layer_config = {'class_name': layer.__class__.__name__,\n                            'config': layer.get_config()}\n            layers.append(layer_config)\n        merge_config = self.layers[0].get_config()\n        merge_config['layers'] = layers\n        config.append({'class_name': 'Merge', 'config': merge_config})\n    else:\n        config.append({'class_name': self.layers[0].__class__.__name__,\n                       'config': self.layers[0].get_config()})\n    for layer in self.layers[1:]:\n        config.append({'class_name': layer.__class__.__name__,\n                       'config': layer.get_config()})\n    return copy.deepcopy(config)",
                "@classmethod\ndef legacy_from_config(cls, config, layer_cache=None):\n    \"\"\"Load a model from a legacy configuration.\n\n    # Arguments\n        config: dictionary with configuration.\n        layer_cache: cache to draw pre-existing layer.\n\n    # Returns\n        The loaded Model.\n    \"\"\"\n    if not layer_cache:\n        layer_cache = {}\n\n    def normalize_legacy_config(conf):\n        if 'class_name' not in conf:\n            class_name = conf['name']\n            name = conf.get('custom_name')\n            conf['name'] = name\n            return {'class_name': class_name,\n                    'config': conf}\n        return conf\n\n    # the model we will return\n    model = cls()\n\n    def get_or_create_layer(layer_data):\n        name = layer_data['config'].get('name')\n        if name in layer_cache:\n            return layer_cache[name]\n        layer = layer_module.deserialize(layer_data)\n        layer_cache[name] = layer\n        return layer\n\n    first_layer = config[0]\n    first_layer = normalize_legacy_config(first_layer)\n    if first_layer['class_name'] == 'Merge':\n        merge_inputs = []\n        first_layer_config = first_layer['config']\n        for merge_input_config in first_layer_config.pop('layers'):\n            merge_input = layer_module.deserialize(merge_input_config)\n            merge_inputs.append(merge_input)\n        first_layer_config['layers'] = merge_inputs\n        merge = legacy_layers.Merge.from_config(first_layer_config)\n        model.add(merge)\n    else:\n        layer = get_or_create_layer(first_layer)\n        model.add(layer)\n\n    for conf in config[1:]:\n        conf = normalize_legacy_config(conf)\n        layer = get_or_create_layer(conf)\n        model.add(layer)\n    return model",
                "def clone(layer):\n    return layer.__class__.from_config(layer.get_config())",
                "def normalize_legacy_config(conf):\n    if 'class_name' not in conf:\n        class_name = conf['name']\n        name = conf.get('custom_name')\n        conf['name'] = name\n        return {'class_name': class_name,\n                'config': conf}\n    return conf",
                "def get_or_create_layer(layer_data):\n    name = layer_data['config'].get('name')\n    if name in layer_cache:\n        return layer_cache[name]\n    layer = layer_module.deserialize(layer_data)\n    layer_cache[name] = layer\n    return layer"
            ],
            "inscope_function_signatures": [
                "save_model(model, filepath, overwrite=True, include_optimizer=True)",
                "load_model(filepath, custom_objects=None, compile=True)",
                "model_from_config(config, custom_objects=None)",
                "model_from_yaml(yaml_string, custom_objects=None)",
                "model_from_json(json_string, custom_objects=None)",
                "_clone_functional_model(model, input_tensors=None)",
                "_clone_sequential_model(model, input_tensors=None)",
                "clone_model(model, input_tensors=None)",
                "get_json_type(obj)",
                "convert_custom_objects(obj)",
                "__init__(self, layers=None, name=None)",
                "add(self, layer)",
                "pop(self)",
                "get_layer(self, name=None, index=None)",
                "call(self, inputs, mask=None)",
                "build(self, input_shape=None)",
                "uses_learning_phase(self)",
                "_flattened_layers(self)",
                "_gather_list_attr(self, attr)",
                "trainable(self)",
                "trainable(self, value)",
                "trainable_weights(self)",
                "non_trainable_weights(self)",
                "updates(self)",
                "state_updates(self)",
                "get_updates_for(self, inputs)",
                "losses(self)",
                "get_losses_for(self, inputs)",
                "regularizers(self)",
                "get_weights(self)",
                "set_weights(self, weights)",
                "load_weights(self, filepath, by_name=False)",
                "save_weights(self, filepath, overwrite=True)",
                "compile(self, optimizer, loss, metrics=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                "evaluate(self, x, y, batch_size=32, verbose=1, sample_weight=None)",
                "predict(self, x, batch_size=32, verbose=0)",
                "predict_on_batch(self, x)",
                "train_on_batch(self, x, y, class_weight=None, sample_weight=None)",
                "test_on_batch(self, x, y, sample_weight=None)",
                "predict_proba(self, x, batch_size=32, verbose=0)",
                "predict_classes(self, x, batch_size=32, verbose=0)",
                "fit_generator(self, generator, steps_per_epoch, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                "evaluate_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False)",
                "predict_generator(self, generator, steps, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                "get_config(self)",
                "from_config(cls, config, custom_objects=None)",
                "legacy_get_config(self)",
                "legacy_from_config(cls, config, layer_cache=None)",
                "clone(layer)",
                "normalize_legacy_config(conf)",
                "get_or_create_layer(layer_data)"
            ],
            "variables_in_file": {
                "ImportError": [
                    739,
                    205,
                    720,
                    57,
                    28
                ],
                "h5py": [
                    738,
                    103,
                    234,
                    204,
                    719,
                    751,
                    721,
                    56,
                    29
                ],
                "hasattr": [
                    162,
                    450,
                    73,
                    1327,
                    594,
                    118,
                    598,
                    154,
                    734
                ],
                "obj": [
                    73,
                    74,
                    75,
                    78,
                    79,
                    80,
                    81,
                    83,
                    86,
                    87,
                    90,
                    91,
                    221,
                    93,
                    223,
                    226,
                    228,
                    231,
                    232,
                    233
                ],
                "obj.__class__.__name__": [
                    74
                ],
                "obj.__class__": [
                    74
                ],
                "obj.get_config": [
                    75
                ],
                "__module__": [
                    78
                ],
                "type": [
                    80,
                    90,
                    78
                ],
                "np.__name__": [
                    78
                ],
                "np": [
                    78,
                    79
                ],
                "isinstance": [
                    1421,
                    1424,
                    1299,
                    276,
                    1567,
                    424,
                    430,
                    1326,
                    433,
                    1586,
                    310,
                    443,
                    79,
                    591,
                    1487,
                    1622,
                    221,
                    226,
                    490,
                    119
                ],
                "np.ndarray": [
                    79
                ],
                "obj.tolist": [
                    81
                ],
                "obj.item": [
                    83
                ],
                "callable": [
                    86
                ],
                "obj.__name__": [
                    91,
                    87
                ],
                "__name__": [
                    90
                ],
                "type.__name__": [
                    90
                ],
                "TypeError": [
                    550,
                    425,
                    491,
                    943,
                    311,
                    93,
                    510
                ],
                "overwrite": [
                    98,
                    741
                ],
                "os.path.isfile": [
                    98,
                    741
                ],
                "os.path": [
                    98,
                    741
                ],
                "os": [
                    98,
                    741
                ],
                "filepath": [
                    98,
                    99,
                    741,
                    742,
                    103,
                    234,
                    751,
                    721
                ],
                "proceed": [
                    99,
                    100,
                    742,
                    743
                ],
                "ask_to_proceed_with_overwrite": [
                    99,
                    742
                ],
                "h5py.File": [
                    721,
                    234,
                    751,
                    103
                ],
                "f": [
                    132,
                    146,
                    274,
                    280,
                    178,
                    721,
                    722,
                    723,
                    731,
                    733,
                    734,
                    735,
                    103,
                    104,
                    105,
                    106,
                    234,
                    236,
                    111,
                    751,
                    752,
                    753,
                    243,
                    754,
                    250
                ],
                "f.attrs": [
                    132,
                    104,
                    105,
                    106,
                    236,
                    722,
                    250
                ],
                "encode": [
                    104,
                    105,
                    106,
                    132
                ],
                "str": [
                    160,
                    163,
                    1540,
                    165,
                    104,
                    427,
                    943,
                    402,
                    1595,
                    156,
                    158
                ],
                "keras_version": [
                    104
                ],
                "K.backend": [
                    105,
                    153
                ],
                "K": [
                    105,
                    1452,
                    1584,
                    402,
                    147,
                    153
                ],
                "json.dumps": [
                    106,
                    132
                ],
                "json": [
                    132,
                    106,
                    239,
                    345,
                    255
                ],
                "model.__class__.__name__": [
                    107
                ],
                "model.__class__": [
                    107
                ],
                "model": [
                    1539,
                    134,
                    135,
                    1543,
                    137,
                    138,
                    139,
                    140,
                    267,
                    1421,
                    1423,
                    144,
                    1424,
                    1427,
                    276,
                    277,
                    279,
                    1435,
                    286,
                    1567,
                    1313,
                    1570,
                    292,
                    1316,
                    1317,
                    1444,
                    1575,
                    1577,
                    1453,
                    1588,
                    1465,
                    1469,
                    1597,
                    1472,
                    1622,
                    1623,
                    1368,
                    1625,
                    247,
                    107,
                    108,
                    1388,
                    1391,
                    112,
                    113,
                    240,
                    115,
                    243,
                    1396,
                    118,
                    119,
                    1397,
                    254
                ],
                "model.get_config": [
                    108
                ],
                "get_json_type": [
                    109,
                    141
                ],
                "model_weights_group": [
                    116,
                    111
                ],
                "f.create_group": [
                    146,
                    111
                ],
                "legacy_models.needs_legacy_support": [
                    707,
                    746,
                    687,
                    112,
                    726
                ],
                "legacy_models": [
                    707,
                    708,
                    746,
                    747,
                    687,
                    112,
                    113,
                    688,
                    726,
                    727
                ],
                "model_layers": [
                    113,
                    115,
                    116
                ],
                "legacy_models.legacy_sequential_layers": [
                    708,
                    747,
                    688,
                    113,
                    727
                ],
                "model.layers": [
                    115,
                    1575,
                    243
                ],
                "topology.save_weights_to_hdf5_group": [
                    752,
                    116
                ],
                "topology": [
                    733,
                    1449,
                    1512,
                    1514,
                    1579,
                    1487,
                    752,
                    1583,
                    1586,
                    243,
                    116,
                    1525,
                    1527,
                    473,
                    731,
                    477
                ],
                "include_optimizer": [
                    118
                ],
                "model.optimizer": [
                    134,
                    135,
                    144,
                    119,
                    286
                ],
                "optimizers.TFOptimizer": [
                    119
                ],
                "optimizers": [
                    257,
                    119
                ],
                "warnings.warn": [
                    288,
                    1091,
                    939,
                    120,
                    252
                ],
                "warnings": [
                    288,
                    1091,
                    939,
                    120,
                    252
                ],
                "model.optimizer.__class__.__name__": [
                    134
                ],
                "model.optimizer.__class__": [
                    134
                ],
                "model.optimizer.get_config": [
                    135
                ],
                "model.loss": [
                    137
                ],
                "model.metrics": [
                    138
                ],
                "model.sample_weight_mode": [
                    139
                ],
                "model.loss_weights": [
                    140
                ],
                "symbolic_weights": [
                    144,
                    145,
                    147,
                    149
                ],
                "getattr": [
                    144,
                    616
                ],
                "optimizer_weights_group": [
                    167,
                    169,
                    146,
                    280,
                    282,
                    283
                ],
                "weight_values": [
                    168,
                    147,
                    150
                ],
                "K.batch_get_value": [
                    147
                ],
                "weight_names": [
                    168,
                    148,
                    166,
                    167
                ],
                "i": [
                    160,
                    165,
                    1451,
                    1453,
                    149,
                    156
                ],
                "w": [
                    162,
                    163,
                    149,
                    154,
                    155,
                    156,
                    158
                ],
                "val": [
                    168,
                    171,
                    172,
                    173,
                    175,
                    177,
                    149
                ],
                "enumerate": [
                    1451,
                    149
                ],
                "zip": [
                    1444,
                    168,
                    149,
                    1465,
                    1531
                ],
                "w.name.split": [
                    155
                ],
                "w.name": [
                    162,
                    163,
                    155,
                    156,
                    158
                ],
                "name": [
                    400,
                    402,
                    403,
                    156,
                    541,
                    158,
                    160,
                    163,
                    165,
                    166,
                    168,
                    170,
                    1453,
                    1455,
                    1361,
                    1362,
                    1371,
                    1372,
                    1373,
                    1375
                ],
                "weight_names.append": [
                    166
                ],
                "name.encode": [
                    166
                ],
                "optimizer_weights_group.attrs": [
                    282,
                    167
                ],
                "param_dset": [
                    169,
                    177,
                    175
                ],
                "optimizer_weights_group.create_dataset": [
                    169
                ],
                "val.shape": [
                    171,
                    173
                ],
                "val.dtype": [
                    172
                ],
                "f.flush": [
                    753,
                    178
                ],
                "custom_objects": [
                    258,
                    1315,
                    231,
                    232,
                    330,
                    346,
                    207,
                    208,
                    240,
                    314
                ],
                "list": [
                    490,
                    221,
                    310,
                    1469
                ],
                "deserialized": [
                    224,
                    225,
                    227,
                    229,
                    230,
                    222
                ],
                "value": [
                    224,
                    228,
                    229,
                    626,
                    627,
                    223
                ],
                "deserialized.append": [
                    224
                ],
                "convert_custom_objects": [
                    224,
                    261,
                    229,
                    262
                ],
                "dict": [
                    226
                ],
                "key": [
                    228,
                    229
                ],
                "obj.items": [
                    228
                ],
                "model_config": [
                    240,
                    236,
                    237,
                    239
                ],
                "f.attrs.get": [
                    250,
                    236
                ],
                "ValueError": [
                    1568,
                    451,
                    1580,
                    238,
                    1422,
                    1425,
                    467,
                    438,
                    1590,
                    287
                ],
                "json.loads": [
                    345,
                    255,
                    239
                ],
                "model_config.decode": [
                    239
                ],
                "model_from_config": [
                    240
                ],
                "topology.load_weights_from_hdf5_group": [
                    243,
                    733
                ],
                "compile": [
                    246
                ],
                "training_config": [
                    256,
                    261,
                    262,
                    263,
                    264,
                    250,
                    251,
                    255
                ],
                "training_config.decode": [
                    255
                ],
                "optimizer_config": [
                    256,
                    257
                ],
                "optimizer": [
                    816,
                    257,
                    267
                ],
                "optimizers.deserialize": [
                    257
                ],
                "loss": [
                    816,
                    268,
                    261
                ],
                "metrics": [
                    817,
                    269,
                    262
                ],
                "sample_weight_mode": [
                    818,
                    271,
                    263
                ],
                "loss_weights": [
                    264,
                    270
                ],
                "model.compile": [
                    267
                ],
                "Sequential": [
                    1577,
                    1424,
                    433,
                    1587,
                    276,
                    1622,
                    443,
                    1597,
                    1567
                ],
                "model.model._make_train_function": [
                    277
                ],
                "model.model": [
                    277
                ],
                "model._make_train_function": [
                    279
                ],
                "optimizer_weight_names": [
                    281,
                    284
                ],
                "n.decode": [
                    281
                ],
                "n": [
                    281,
                    283
                ],
                "optimizer_weight_values": [
                    283,
                    286
                ],
                "model.optimizer.set_weights": [
                    286
                ],
                "config": [
                    1302,
                    1304,
                    1306,
                    1310,
                    1311,
                    1314,
                    1325,
                    310,
                    1335,
                    1337,
                    314,
                    1340,
                    1342,
                    329,
                    330,
                    345,
                    346,
                    1378,
                    1393
                ],
                "layer_module.deserialize": [
                    1315,
                    1384,
                    330,
                    346,
                    314,
                    1374
                ],
                "layer_module": [
                    1315,
                    1384,
                    330,
                    346,
                    314,
                    1374
                ],
                "yaml.load": [
                    329
                ],
                "yaml": [
                    329
                ],
                "yaml_string": [
                    329
                ],
                "json_string": [
                    345
                ],
                "Model": [
                    1543,
                    553,
                    1421,
                    433,
                    443,
                    349
                ],
                "self.layers": [
                    512,
                    513,
                    387,
                    518,
                    519,
                    1299,
                    1303,
                    1326,
                    1327,
                    1329,
                    1333,
                    1337,
                    1338,
                    1339,
                    589,
                    591,
                    592,
                    729,
                    606,
                    607,
                    608,
                    749,
                    500,
                    509
                ],
                "self": [
                    512,
                    513,
                    514,
                    515,
                    516,
                    518,
                    519,
                    521,
                    522,
                    523,
                    1043,
                    1046,
                    539,
                    540,
                    541,
                    544,
                    545,
                    546,
                    549,
                    553,
                    554,
                    555,
                    1069,
                    558,
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565,
                    566,
                    567,
                    568,
                    569,
                    570,
                    571,
                    572,
                    573,
                    577,
                    578,
                    1089,
                    582,
                    583,
                    584,
                    589,
                    591,
                    592,
                    1111,
                    606,
                    607,
                    608,
                    615,
                    621,
                    625,
                    626,
                    627,
                    631,
                    634,
                    639,
                    640,
                    641,
                    647,
                    648,
                    649,
                    653,
                    654,
                    655,
                    658,
                    659,
                    660,
                    664,
                    665,
                    666,
                    669,
                    670,
                    671,
                    675,
                    676,
                    677,
                    687,
                    688,
                    694,
                    695,
                    696,
                    1208,
                    1211,
                    707,
                    708,
                    714,
                    715,
                    716,
                    726,
                    727,
                    729,
                    1256,
                    746,
                    747,
                    1259,
                    749,
                    1290,
                    1291,
                    1292,
                    1072,
                    1299,
                    1300,
                    1303,
                    814,
                    1326,
                    816,
                    1327,
                    1329,
                    1333,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    831,
                    832,
                    1337,
                    1338,
                    1339,
                    387,
                    388,
                    389,
                    390,
                    391,
                    392,
                    395,
                    396,
                    397,
                    403,
                    408,
                    428,
                    945,
                    948,
                    983,
                    472,
                    473,
                    986,
                    477,
                    481,
                    482,
                    484,
                    486,
                    487,
                    489,
                    1004,
                    1005,
                    1006,
                    495,
                    497,
                    498,
                    500,
                    501,
                    1018,
                    1019,
                    1020,
                    509
                ],
                "self.model": [
                    388,
                    649,
                    816,
                    1292,
                    655,
                    1072,
                    660,
                    1046,
                    666,
                    541,
                    671,
                    546,
                    948,
                    677,
                    553,
                    555,
                    558,
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565,
                    566,
                    567,
                    568,
                    569,
                    570,
                    571,
                    572,
                    573,
                    696,
                    822,
                    823,
                    577,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    584,
                    832,
                    716,
                    1211,
                    831,
                    986,
                    1259,
                    1006,
                    625,
                    626,
                    824,
                    1020
                ],
                "self.inputs": [
                    481,
                    484,
                    389,
                    486,
                    549,
                    553,
                    473
                ],
                "self.outputs": [
                    482,
                    514,
                    549,
                    390,
                    487,
                    519,
                    489,
                    521,
                    522,
                    428,
                    553,
                    495,
                    497,
                    498,
                    472,
                    473
                ],
                "self._trainable": [
                    627,
                    621,
                    391
                ],
                "self._initial_weights": [
                    392
                ],
                "self.inbound_nodes": [
                    515,
                    521,
                    522,
                    395,
                    497,
                    498
                ],
                "self.outbound_nodes": [
                    396,
                    516
                ],
                "self.built": [
                    647,
                    1290,
                    523,
                    397,
                    653,
                    658,
                    1043,
                    664,
                    539,
                    669,
                    544,
                    675,
                    1069,
                    945,
                    694,
                    1208,
                    578,
                    582,
                    714,
                    983,
                    1256,
                    1004,
                    501,
                    1018
                ],
                "prefix": [
                    401,
                    402
                ],
                "K.get_uid": [
                    402
                ],
                "self.name": [
                    554,
                    403
                ],
                "layers": [
                    406,
                    407,
                    1575,
                    1577,
                    688,
                    1328,
                    690,
                    1329,
                    1332,
                    1587,
                    1334,
                    1597,
                    708,
                    709,
                    588,
                    596,
                    597,
                    727,
                    600,
                    601,
                    729,
                    603,
                    604,
                    731,
                    606,
                    607,
                    733,
                    609,
                    610,
                    611,
                    747,
                    749,
                    752
                ],
                "layer": [
                    407,
                    408,
                    1303,
                    1304,
                    1305,
                    1435,
                    1436,
                    1437,
                    1438,
                    1439,
                    1315,
                    1316,
                    1443,
                    1573,
                    1575,
                    424,
                    427,
                    430,
                    433,
                    690,
                    691,
                    1329,
                    437,
                    1330,
                    1331,
                    442,
                    1339,
                    1340,
                    1341,
                    450,
                    1475,
                    709,
                    710,
                    455,
                    456,
                    711,
                    1478,
                    1480,
                    460,
                    1481,
                    1482,
                    1485,
                    464,
                    593,
                    466,
                    594,
                    595,
                    1487,
                    598,
                    599,
                    472,
                    603,
                    604,
                    1374,
                    1375,
                    608,
                    609,
                    610,
                    1376,
                    1509,
                    615,
                    616,
                    489,
                    1513,
                    1515,
                    1390,
                    1391,
                    1522,
                    1395,
                    500,
                    1396,
                    1526,
                    1528
                ],
                "self.add": [
                    408
                ],
                "Layer": [
                    424
                ],
                "InputLayer": [
                    430
                ],
                "legacy_layers.Merge": [
                    1387,
                    1326,
                    430,
                    591,
                    1299
                ],
                "legacy_layers": [
                    1387,
                    1326,
                    430,
                    591,
                    1299
                ],
                "layer.layers": [
                    442,
                    437,
                    599
                ],
                "first_layer": [
                    1378,
                    1379,
                    1380,
                    1382,
                    1390,
                    442,
                    443,
                    444,
                    445,
                    446
                ],
                "first_layer.layers": [
                    444
                ],
                "batch_shape": [
                    458,
                    445,
                    455
                ],
                "first_layer.batch_input_shape": [
                    445
                ],
                "dtype": [
                    456,
                    459,
                    446
                ],
                "first_layer.dtype": [
                    446
                ],
                "layer.batch_input_shape": [
                    1436,
                    455
                ],
                "layer.dtype": [
                    456,
                    1437
                ],
                "x": [
                    1539,
                    1540,
                    1541,
                    1046,
                    1451,
                    1452,
                    1454,
                    1583,
                    1072,
                    1584,
                    1458,
                    1585,
                    948,
                    1462,
                    1465,
                    1466,
                    1594,
                    1595,
                    1089,
                    458,
                    464,
                    1111,
                    1497,
                    986,
                    1498,
                    1499,
                    486,
                    1006,
                    1520,
                    1521,
                    1531,
                    1020,
                    1534
                ],
                "Input": [
                    458,
                    1436,
                    1454,
                    1594
                ],
                "layer.name": [
                    460,
                    1439
                ],
                "len": [
                    1507,
                    710,
                    1579,
                    466,
                    1501
                ],
                "output_tensors": [
                    1538,
                    1542,
                    1543,
                    1512,
                    521,
                    497,
                    466,
                    1525,
                    472,
                    1532
                ],
                "layer.inbound_nodes": [
                    472,
                    466
                ],
                "topology.get_source_inputs": [
                    473
                ],
                "topology.Node": [
                    477
                ],
                "_": [
                    484,
                    1541
                ],
                "x._keras_shape": [
                    486
                ],
                "_keras_shape": [
                    498,
                    522,
                    487
                ],
                "output_tensor": [
                    489,
                    490,
                    495
                ],
                "output_shapes": [
                    498,
                    522
                ],
                "self.layers.append": [
                    500
                ],
                "self.layers.pop": [
                    512
                ],
                "outbound_nodes": [
                    518
                ],
                "output": [
                    519
                ],
                "self.build": [
                    545,
                    676,
                    583,
                    648,
                    715,
                    1291,
                    1005,
                    654,
                    814,
                    659,
                    695,
                    665,
                    1019,
                    540,
                    670
                ],
                "self.model.get_layer": [
                    541
                ],
                "index": [
                    541
                ],
                "self.model.call": [
                    546
                ],
                "inputs": [
                    546,
                    660,
                    671
                ],
                "mask": [
                    546,
                    1531,
                    1534
                ],
                "self.model.trainable": [
                    626,
                    555
                ],
                "self.trainable": [
                    640,
                    555,
                    631
                ],
                "self.supports_masking": [
                    558
                ],
                "self.model.supports_masking": [
                    558
                ],
                "self._output_mask_cache": [
                    559
                ],
                "self.model._output_mask_cache": [
                    559
                ],
                "self._output_tensor_cache": [
                    560
                ],
                "self.model._output_tensor_cache": [
                    560
                ],
                "self._output_shape_cache": [
                    561
                ],
                "self.model._output_shape_cache": [
                    561
                ],
                "self.input_layers": [
                    562
                ],
                "self.model.input_layers": [
                    562
                ],
                "self.input_layers_node_indices": [
                    563
                ],
                "self.model.input_layers_node_indices": [
                    563
                ],
                "self.input_layers_tensor_indices": [
                    564
                ],
                "self.model.input_layers_tensor_indices": [
                    564
                ],
                "self.output_layers": [
                    565
                ],
                "self.model.output_layers": [
                    565
                ],
                "self.output_layers_node_indices": [
                    566
                ],
                "self.model.output_layers_node_indices": [
                    566
                ],
                "self.output_layers_tensor_indices": [
                    567
                ],
                "self.model.output_layers_tensor_indices": [
                    567
                ],
                "self.nodes_by_depth": [
                    568
                ],
                "self.model.nodes_by_depth": [
                    568
                ],
                "self.container_nodes": [
                    569
                ],
                "self.model.container_nodes": [
                    569
                ],
                "self.output_names": [
                    570
                ],
                "self.model.output_names": [
                    570
                ],
                "self.input_names": [
                    571
                ],
                "self.model.input_names": [
                    571
                ],
                "self._feed_input_names": [
                    572
                ],
                "self.model._feed_input_names": [
                    572
                ],
                "self._feed_inputs": [
                    573
                ],
                "self.model._feed_inputs": [
                    573
                ],
                "self.model.callback_model": [
                    577
                ],
                "self.model.uses_learning_phase": [
                    584
                ],
                "property": [
                    673,
                    580,
                    645,
                    586,
                    619,
                    651,
                    629,
                    662,
                    636
                ],
                "merge": [
                    592,
                    593,
                    1387,
                    1388
                ],
                "merge.layers": [
                    593
                ],
                "sublayer": [
                    595,
                    596,
                    597,
                    599,
                    600,
                    601
                ],
                "layer._flattened_layers": [
                    595
                ],
                "layers.append": [
                    610,
                    1332,
                    597,
                    601,
                    604,
                    607
                ],
                "all_attrs": [
                    616,
                    617,
                    614
                ],
                "self._flattened_layers": [
                    615
                ],
                "attr": [
                    616
                ],
                "trainable.setter": [
                    623
                ],
                "trainable": [
                    623
                ],
                "self._gather_list_attr": [
                    641,
                    634,
                    639
                ],
                "weights": [
                    642,
                    643,
                    711,
                    712,
                    716,
                    689,
                    691,
                    692,
                    639
                ],
                "trainable_weights": [
                    641,
                    642
                ],
                "self.model.updates": [
                    649
                ],
                "self.model.state_updates": [
                    655
                ],
                "self.model.get_updates_for": [
                    660
                ],
                "self.model.losses": [
                    666
                ],
                "self.model.get_losses_for": [
                    671
                ],
                "self.model.regularizers": [
                    677
                ],
                "weights.append": [
                    691
                ],
                "layer.get_weights": [
                    691
                ],
                "self.model.get_weights": [
                    696
                ],
                "nb_param": [
                    712,
                    710,
                    711
                ],
                "layer.weights": [
                    710
                ],
                "layer.set_weights": [
                    711
                ],
                "self.model.set_weights": [
                    716
                ],
                "by_name": [
                    730
                ],
                "topology.load_weights_from_hdf5_group_by_name": [
                    731
                ],
                "f.close": [
                    754,
                    735
                ],
                "self.model.compile": [
                    816
                ],
                "weighted_metrics": [
                    819
                ],
                "target_tensors": [
                    820
                ],
                "kwargs": [
                    1504,
                    1506,
                    1510,
                    1511,
                    1513,
                    938,
                    941,
                    942,
                    943,
                    1523,
                    1524,
                    821,
                    1526
                ],
                "self.optimizer": [
                    822
                ],
                "self.model.optimizer": [
                    822
                ],
                "self.loss": [
                    823
                ],
                "self.model.loss": [
                    823
                ],
                "self.metrics": [
                    824
                ],
                "self.model.metrics": [
                    824
                ],
                "self.loss_weights": [
                    825
                ],
                "self.model.loss_weights": [
                    825
                ],
                "self.sample_weight_mode": [
                    826
                ],
                "self.model.sample_weight_mode": [
                    826
                ],
                "self.weighted_metrics": [
                    827
                ],
                "self.model.weighted_metrics": [
                    827
                ],
                "self.targets": [
                    828
                ],
                "self.model.targets": [
                    828
                ],
                "self.metrics_tensors": [
                    829
                ],
                "self.model.metrics_tensors": [
                    829
                ],
                "self.metrics_names": [
                    830
                ],
                "self.model.metrics_names": [
                    830
                ],
                "self.sample_weights": [
                    831
                ],
                "self.model.sample_weights": [
                    831
                ],
                "self.total_loss": [
                    832
                ],
                "self.model.total_loss": [
                    832
                ],
                "epochs": [
                    941,
                    950,
                    1213
                ],
                "kwargs.pop": [
                    941
                ],
                "RuntimeError": [
                    1257,
                    1070,
                    946,
                    1044,
                    984,
                    1209
                ],
                "self.model.fit": [
                    948
                ],
                "y": [
                    1072,
                    1466,
                    948,
                    1046,
                    1465,
                    986,
                    1531,
                    1534
                ],
                "batch_size": [
                    1089,
                    1006,
                    949,
                    1111,
                    987
                ],
                "verbose": [
                    1089,
                    1006,
                    1296,
                    951,
                    1111,
                    988,
                    1214
                ],
                "callbacks": [
                    952,
                    1215
                ],
                "validation_split": [
                    953
                ],
                "validation_data": [
                    1216,
                    954
                ],
                "shuffle": [
                    955,
                    1222
                ],
                "class_weight": [
                    1048,
                    1218,
                    956
                ],
                "sample_weight": [
                    989,
                    1073,
                    957,
                    1047
                ],
                "initial_epoch": [
                    958,
                    1223
                ],
                "steps_per_epoch": [
                    1212,
                    959
                ],
                "validation_steps": [
                    960,
                    1217
                ],
                "self.model.evaluate": [
                    986
                ],
                "self.model.predict": [
                    1006
                ],
                "self.model.predict_on_batch": [
                    1020
                ],
                "self.model.train_on_batch": [
                    1046
                ],
                "self.model.test_on_batch": [
                    1072
                ],
                "preds": [
                    1089,
                    1090,
                    1095
                ],
                "self.predict": [
                    1089,
                    1111
                ],
                "preds.min": [
                    1090
                ],
                "preds.max": [
                    1090
                ],
                "proba": [
                    1112,
                    1113,
                    1115,
                    1111
                ],
                "proba.shape": [
                    1112
                ],
                "proba.argmax": [
                    1113
                ],
                "astype": [
                    1115
                ],
                "self.model.fit_generator": [
                    1211
                ],
                "generator": [
                    1211,
                    1292,
                    1259
                ],
                "max_queue_size": [
                    1293,
                    1219,
                    1261
                ],
                "workers": [
                    1220,
                    1262,
                    1294
                ],
                "use_multiprocessing": [
                    1295,
                    1221,
                    1263
                ],
                "interfaces.legacy_generator_methods_support": [
                    1225,
                    1265,
                    1117
                ],
                "interfaces": [
                    1225,
                    1265,
                    1117
                ],
                "self.model.evaluate_generator": [
                    1259
                ],
                "steps": [
                    1260,
                    1292
                ],
                "self.model.predict_generator": [
                    1292
                ],
                "self.legacy_get_config": [
                    1300
                ],
                "config.append": [
                    1304,
                    1337,
                    1340,
                    1335
                ],
                "layer.__class__.__name__": [
                    1304,
                    1330,
                    1340
                ],
                "layer.__class__": [
                    1573,
                    1480,
                    1330,
                    1304,
                    1340
                ],
                "layer.get_config": [
                    1573,
                    1480,
                    1331,
                    1305,
                    1341
                ],
                "copy.deepcopy": [
                    1306,
                    1342
                ],
                "copy": [
                    1306,
                    1342
                ],
                "cls.legacy_from_config": [
                    1311
                ],
                "cls": [
                    1368,
                    1313,
                    1311
                ],
                "conf": [
                    1314,
                    1315,
                    1359,
                    1360,
                    1361,
                    1362,
                    1393,
                    1364,
                    1365,
                    1394,
                    1395
                ],
                "model.add": [
                    1388,
                    1396,
                    1316,
                    1391
                ],
                "classmethod": [
                    1344,
                    1308
                ],
                "layer_config": [
                    1330,
                    1332
                ],
                "merge_config": [
                    1333,
                    1334,
                    1335
                ],
                "get_config": [
                    1338,
                    1333
                ],
                "__class__.__name__": [
                    1337
                ],
                "__class__": [
                    1337
                ],
                "layer_cache": [
                    1355,
                    1356,
                    1372,
                    1373,
                    1375
                ],
                "class_name": [
                    1360,
                    1363
                ],
                "conf.get": [
                    1361
                ],
                "get": [
                    1371
                ],
                "layer_data": [
                    1371,
                    1374
                ],
                "normalize_legacy_config": [
                    1394,
                    1379
                ],
                "merge_inputs": [
                    1385,
                    1386,
                    1381
                ],
                "first_layer_config": [
                    1386,
                    1387,
                    1382,
                    1383
                ],
                "merge_input_config": [
                    1384,
                    1383
                ],
                "first_layer_config.pop": [
                    1383
                ],
                "merge_input": [
                    1384,
                    1385
                ],
                "merge_inputs.append": [
                    1385
                ],
                "legacy_layers.Merge.from_config": [
                    1387
                ],
                "get_or_create_layer": [
                    1395,
                    1390
                ],
                "layer_map": [
                    1443,
                    1445,
                    1478,
                    1481,
                    1485,
                    1460,
                    1429
                ],
                "tensor_map": [
                    1540,
                    1541,
                    1466,
                    1430,
                    1498,
                    1499,
                    1534
                ],
                "input_tensors": [
                    1440,
                    1463,
                    1623,
                    1543,
                    1576,
                    1449,
                    1451,
                    1579,
                    1583,
                    1625,
                    1431,
                    1465,
                    1434
                ],
                "input_layers": [
                    1433,
                    1444
                ],
                "model.input_layers": [
                    1435,
                    1444,
                    1453
                ],
                "input_tensor": [
                    1440,
                    1442,
                    1454,
                    1456,
                    1459,
                    1594,
                    1436,
                    1596
                ],
                "layer.sparse": [
                    1438
                ],
                "input_tensors.append": [
                    1440
                ],
                "newly_created_input_layer": [
                    1442,
                    1443,
                    1460,
                    1459
                ],
                "input_tensor._keras_history": [
                    1442,
                    1459,
                    1596
                ],
                "original_input_layer": [
                    1458,
                    1460,
                    1444,
                    1445
                ],
                "cloned_input_layer": [
                    1444,
                    1445
                ],
                "topology._to_list": [
                    1512,
                    1449,
                    1514,
                    1579,
                    1583,
                    1525,
                    1527
                ],
                "_input_tensors": [
                    1456,
                    1450,
                    1462,
                    1463
                ],
                "K.is_keras_tensor": [
                    1584,
                    1452
                ],
                "_input_tensors.append": [
                    1456,
                    1462
                ],
                "x._keras_history": [
                    1585,
                    1458
                ],
                "model.inputs": [
                    1465
                ],
                "depth_keys": [
                    1469,
                    1470,
                    1471
                ],
                "model.nodes_by_depth.keys": [
                    1469
                ],
                "model.nodes_by_depth": [
                    1472,
                    1469
                ],
                "depth_keys.sort": [
                    1470
                ],
                "depth": [
                    1472,
                    1471
                ],
                "nodes": [
                    1472,
                    1473
                ],
                "node": [
                    1504,
                    1473,
                    1475,
                    1491,
                    1492,
                    1503
                ],
                "node.outbound_layer": [
                    1475
                ],
                "new_layer": [
                    1480,
                    1481,
                    1482
                ],
                "layer.__class__.from_config": [
                    1480,
                    1573
                ],
                "topology.InputLayer": [
                    1586,
                    1487
                ],
                "reference_input_tensors": [
                    1497,
                    1491,
                    1501
                ],
                "node.input_tensors": [
                    1491
                ],
                "reference_output_tensors": [
                    1531,
                    1492
                ],
                "node.output_tensors": [
                    1492
                ],
                "computed_data": [
                    1507,
                    1508,
                    1520,
                    1521,
                    1496,
                    1499,
                    1501
                ],
                "computed_data.append": [
                    1499
                ],
                "node.arguments": [
                    1504,
                    1503
                ],
                "computed_tensor": [
                    1513,
                    1515,
                    1508,
                    1517
                ],
                "computed_mask": [
                    1518,
                    1508,
                    1516,
                    1511
                ],
                "has_arg": [
                    1522,
                    1509
                ],
                "layer.call": [
                    1522,
                    1509
                ],
                "output_masks": [
                    1514,
                    1533,
                    1527
                ],
                "layer.compute_mask": [
                    1528,
                    1515
                ],
                "computed_tensors": [
                    1520,
                    1528,
                    1517,
                    1526
                ],
                "computed_masks": [
                    1521,
                    1524,
                    1529,
                    1518
                ],
                "model.outputs": [
                    1539
                ],
                "tensor": [
                    1541,
                    1542
                ],
                "output_tensors.append": [
                    1542
                ],
                "model.name": [
                    1577,
                    1588,
                    1597,
                    1543
                ],
                "clone": [
                    1575
                ],
                "origin_layer": [
                    1585,
                    1586,
                    1587
                ],
                "x.name": [
                    1595
                ],
                "input_layer": [
                    1596,
                    1597
                ],
                "_clone_sequential_model": [
                    1623
                ],
                "_clone_functional_model": [
                    1625
                ]
            },
            "filtered_variables_in_file": {
                "h5py": [
                    738,
                    103,
                    234,
                    204,
                    719,
                    751,
                    721,
                    56,
                    29
                ],
                "obj": [
                    73,
                    74,
                    75,
                    78,
                    79,
                    80,
                    81,
                    83,
                    86,
                    87,
                    90,
                    91,
                    221,
                    93,
                    223,
                    226,
                    228,
                    231,
                    232,
                    233
                ],
                "obj.__class__.__name__": [
                    74
                ],
                "obj.__class__": [
                    74
                ],
                "obj.get_config": [
                    75
                ],
                "__module__": [
                    78
                ],
                "np.__name__": [
                    78
                ],
                "np": [
                    78,
                    79
                ],
                "np.ndarray": [
                    79
                ],
                "obj.tolist": [
                    81
                ],
                "obj.item": [
                    83
                ],
                "obj.__name__": [
                    91,
                    87
                ],
                "type.__name__": [
                    90
                ],
                "overwrite": [
                    98,
                    741
                ],
                "os.path.isfile": [
                    98,
                    741
                ],
                "os.path": [
                    98,
                    741
                ],
                "os": [
                    98,
                    741
                ],
                "filepath": [
                    98,
                    99,
                    741,
                    742,
                    103,
                    234,
                    751,
                    721
                ],
                "proceed": [
                    99,
                    100,
                    742,
                    743
                ],
                "ask_to_proceed_with_overwrite": [
                    99,
                    742
                ],
                "h5py.File": [
                    721,
                    234,
                    751,
                    103
                ],
                "f": [
                    132,
                    146,
                    274,
                    280,
                    178,
                    721,
                    722,
                    723,
                    731,
                    733,
                    734,
                    735,
                    103,
                    104,
                    105,
                    106,
                    234,
                    236,
                    111,
                    751,
                    752,
                    753,
                    243,
                    754,
                    250
                ],
                "f.attrs": [
                    132,
                    104,
                    105,
                    106,
                    236,
                    722,
                    250
                ],
                "encode": [
                    104,
                    105,
                    106,
                    132
                ],
                "keras_version": [
                    104
                ],
                "K.backend": [
                    105,
                    153
                ],
                "K": [
                    105,
                    1452,
                    1584,
                    402,
                    147,
                    153
                ],
                "json.dumps": [
                    106,
                    132
                ],
                "json": [
                    132,
                    106,
                    239,
                    345,
                    255
                ],
                "model.__class__.__name__": [
                    107
                ],
                "model.__class__": [
                    107
                ],
                "model": [
                    1539,
                    134,
                    135,
                    1543,
                    137,
                    138,
                    139,
                    140,
                    267,
                    1421,
                    1423,
                    144,
                    1424,
                    1427,
                    276,
                    277,
                    279,
                    1435,
                    286,
                    1567,
                    1313,
                    1570,
                    292,
                    1316,
                    1317,
                    1444,
                    1575,
                    1577,
                    1453,
                    1588,
                    1465,
                    1469,
                    1597,
                    1472,
                    1622,
                    1623,
                    1368,
                    1625,
                    247,
                    107,
                    108,
                    1388,
                    1391,
                    112,
                    113,
                    240,
                    115,
                    243,
                    1396,
                    118,
                    119,
                    1397,
                    254
                ],
                "model.get_config": [
                    108
                ],
                "get_json_type": [
                    109,
                    141
                ],
                "model_weights_group": [
                    116,
                    111
                ],
                "f.create_group": [
                    146,
                    111
                ],
                "legacy_models.needs_legacy_support": [
                    707,
                    746,
                    687,
                    112,
                    726
                ],
                "legacy_models": [
                    707,
                    708,
                    746,
                    747,
                    687,
                    112,
                    113,
                    688,
                    726,
                    727
                ],
                "model_layers": [
                    113,
                    115,
                    116
                ],
                "legacy_models.legacy_sequential_layers": [
                    708,
                    747,
                    688,
                    113,
                    727
                ],
                "model.layers": [
                    115,
                    1575,
                    243
                ],
                "topology.save_weights_to_hdf5_group": [
                    752,
                    116
                ],
                "topology": [
                    733,
                    1449,
                    1512,
                    1514,
                    1579,
                    1487,
                    752,
                    1583,
                    1586,
                    243,
                    116,
                    1525,
                    1527,
                    473,
                    731,
                    477
                ],
                "include_optimizer": [
                    118
                ],
                "model.optimizer": [
                    134,
                    135,
                    144,
                    119,
                    286
                ],
                "optimizers.TFOptimizer": [
                    119
                ],
                "optimizers": [
                    257,
                    119
                ],
                "warnings.warn": [
                    288,
                    1091,
                    939,
                    120,
                    252
                ],
                "warnings": [
                    288,
                    1091,
                    939,
                    120,
                    252
                ],
                "model.optimizer.__class__.__name__": [
                    134
                ],
                "model.optimizer.__class__": [
                    134
                ],
                "model.optimizer.get_config": [
                    135
                ],
                "model.loss": [
                    137
                ],
                "model.metrics": [
                    138
                ],
                "model.sample_weight_mode": [
                    139
                ],
                "model.loss_weights": [
                    140
                ],
                "symbolic_weights": [
                    144,
                    145,
                    147,
                    149
                ],
                "optimizer_weights_group": [
                    167,
                    169,
                    146,
                    280,
                    282,
                    283
                ],
                "weight_values": [
                    168,
                    147,
                    150
                ],
                "K.batch_get_value": [
                    147
                ],
                "weight_names": [
                    168,
                    148,
                    166,
                    167
                ],
                "i": [
                    160,
                    165,
                    1451,
                    1453,
                    149,
                    156
                ],
                "w": [
                    162,
                    163,
                    149,
                    154,
                    155,
                    156,
                    158
                ],
                "val": [
                    168,
                    171,
                    172,
                    173,
                    175,
                    177,
                    149
                ],
                "w.name.split": [
                    155
                ],
                "w.name": [
                    162,
                    163,
                    155,
                    156,
                    158
                ],
                "name": [
                    400,
                    402,
                    403,
                    156,
                    541,
                    158,
                    160,
                    163,
                    165,
                    166,
                    168,
                    170,
                    1453,
                    1455,
                    1361,
                    1362,
                    1371,
                    1372,
                    1373,
                    1375
                ],
                "weight_names.append": [
                    166
                ],
                "name.encode": [
                    166
                ],
                "optimizer_weights_group.attrs": [
                    282,
                    167
                ],
                "param_dset": [
                    169,
                    177,
                    175
                ],
                "optimizer_weights_group.create_dataset": [
                    169
                ],
                "val.shape": [
                    171,
                    173
                ],
                "val.dtype": [
                    172
                ],
                "f.flush": [
                    753,
                    178
                ],
                "custom_objects": [
                    258,
                    1315,
                    231,
                    232,
                    330,
                    346,
                    207,
                    208,
                    240,
                    314
                ],
                "deserialized": [
                    224,
                    225,
                    227,
                    229,
                    230,
                    222
                ],
                "value": [
                    224,
                    228,
                    229,
                    626,
                    627,
                    223
                ],
                "deserialized.append": [
                    224
                ],
                "convert_custom_objects": [
                    224,
                    261,
                    229,
                    262
                ],
                "key": [
                    228,
                    229
                ],
                "obj.items": [
                    228
                ],
                "model_config": [
                    240,
                    236,
                    237,
                    239
                ],
                "f.attrs.get": [
                    250,
                    236
                ],
                "json.loads": [
                    345,
                    255,
                    239
                ],
                "model_config.decode": [
                    239
                ],
                "model_from_config": [
                    240
                ],
                "topology.load_weights_from_hdf5_group": [
                    243,
                    733
                ],
                "training_config": [
                    256,
                    261,
                    262,
                    263,
                    264,
                    250,
                    251,
                    255
                ],
                "training_config.decode": [
                    255
                ],
                "optimizer_config": [
                    256,
                    257
                ],
                "optimizer": [
                    816,
                    257,
                    267
                ],
                "optimizers.deserialize": [
                    257
                ],
                "loss": [
                    816,
                    268,
                    261
                ],
                "metrics": [
                    817,
                    269,
                    262
                ],
                "sample_weight_mode": [
                    818,
                    271,
                    263
                ],
                "loss_weights": [
                    264,
                    270
                ],
                "model.compile": [
                    267
                ],
                "Sequential": [
                    1577,
                    1424,
                    433,
                    1587,
                    276,
                    1622,
                    443,
                    1597,
                    1567
                ],
                "model.model._make_train_function": [
                    277
                ],
                "model.model": [
                    277
                ],
                "model._make_train_function": [
                    279
                ],
                "optimizer_weight_names": [
                    281,
                    284
                ],
                "n.decode": [
                    281
                ],
                "n": [
                    281,
                    283
                ],
                "optimizer_weight_values": [
                    283,
                    286
                ],
                "model.optimizer.set_weights": [
                    286
                ],
                "config": [
                    1302,
                    1304,
                    1306,
                    1310,
                    1311,
                    1314,
                    1325,
                    310,
                    1335,
                    1337,
                    314,
                    1340,
                    1342,
                    329,
                    330,
                    345,
                    346,
                    1378,
                    1393
                ],
                "layer_module.deserialize": [
                    1315,
                    1384,
                    330,
                    346,
                    314,
                    1374
                ],
                "layer_module": [
                    1315,
                    1384,
                    330,
                    346,
                    314,
                    1374
                ],
                "yaml.load": [
                    329
                ],
                "yaml": [
                    329
                ],
                "yaml_string": [
                    329
                ],
                "json_string": [
                    345
                ],
                "Model": [
                    1543,
                    553,
                    1421,
                    433,
                    443,
                    349
                ],
                "self.layers": [
                    512,
                    513,
                    387,
                    518,
                    519,
                    1299,
                    1303,
                    1326,
                    1327,
                    1329,
                    1333,
                    1337,
                    1338,
                    1339,
                    589,
                    591,
                    592,
                    729,
                    606,
                    607,
                    608,
                    749,
                    500,
                    509
                ],
                "self": [
                    512,
                    513,
                    514,
                    515,
                    516,
                    518,
                    519,
                    521,
                    522,
                    523,
                    1043,
                    1046,
                    539,
                    540,
                    541,
                    544,
                    545,
                    546,
                    549,
                    553,
                    554,
                    555,
                    1069,
                    558,
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565,
                    566,
                    567,
                    568,
                    569,
                    570,
                    571,
                    572,
                    573,
                    577,
                    578,
                    1089,
                    582,
                    583,
                    584,
                    589,
                    591,
                    592,
                    1111,
                    606,
                    607,
                    608,
                    615,
                    621,
                    625,
                    626,
                    627,
                    631,
                    634,
                    639,
                    640,
                    641,
                    647,
                    648,
                    649,
                    653,
                    654,
                    655,
                    658,
                    659,
                    660,
                    664,
                    665,
                    666,
                    669,
                    670,
                    671,
                    675,
                    676,
                    677,
                    687,
                    688,
                    694,
                    695,
                    696,
                    1208,
                    1211,
                    707,
                    708,
                    714,
                    715,
                    716,
                    726,
                    727,
                    729,
                    1256,
                    746,
                    747,
                    1259,
                    749,
                    1290,
                    1291,
                    1292,
                    1072,
                    1299,
                    1300,
                    1303,
                    814,
                    1326,
                    816,
                    1327,
                    1329,
                    1333,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    831,
                    832,
                    1337,
                    1338,
                    1339,
                    387,
                    388,
                    389,
                    390,
                    391,
                    392,
                    395,
                    396,
                    397,
                    403,
                    408,
                    428,
                    945,
                    948,
                    983,
                    472,
                    473,
                    986,
                    477,
                    481,
                    482,
                    484,
                    486,
                    487,
                    489,
                    1004,
                    1005,
                    1006,
                    495,
                    497,
                    498,
                    500,
                    501,
                    1018,
                    1019,
                    1020,
                    509
                ],
                "self.model": [
                    388,
                    649,
                    816,
                    1292,
                    655,
                    1072,
                    660,
                    1046,
                    666,
                    541,
                    671,
                    546,
                    948,
                    677,
                    553,
                    555,
                    558,
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565,
                    566,
                    567,
                    568,
                    569,
                    570,
                    571,
                    572,
                    573,
                    696,
                    822,
                    823,
                    577,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    584,
                    832,
                    716,
                    1211,
                    831,
                    986,
                    1259,
                    1006,
                    625,
                    626,
                    824,
                    1020
                ],
                "self.inputs": [
                    481,
                    484,
                    389,
                    486,
                    549,
                    553,
                    473
                ],
                "self.outputs": [
                    482,
                    514,
                    549,
                    390,
                    487,
                    519,
                    489,
                    521,
                    522,
                    428,
                    553,
                    495,
                    497,
                    498,
                    472,
                    473
                ],
                "self._trainable": [
                    627,
                    621,
                    391
                ],
                "self._initial_weights": [
                    392
                ],
                "self.inbound_nodes": [
                    515,
                    521,
                    522,
                    395,
                    497,
                    498
                ],
                "self.outbound_nodes": [
                    396,
                    516
                ],
                "self.built": [
                    647,
                    1290,
                    523,
                    397,
                    653,
                    658,
                    1043,
                    664,
                    539,
                    669,
                    544,
                    675,
                    1069,
                    945,
                    694,
                    1208,
                    578,
                    582,
                    714,
                    983,
                    1256,
                    1004,
                    501,
                    1018
                ],
                "prefix": [
                    401,
                    402
                ],
                "K.get_uid": [
                    402
                ],
                "self.name": [
                    554,
                    403
                ],
                "layers": [
                    406,
                    407,
                    1575,
                    1577,
                    688,
                    1328,
                    690,
                    1329,
                    1332,
                    1587,
                    1334,
                    1597,
                    708,
                    709,
                    588,
                    596,
                    597,
                    727,
                    600,
                    601,
                    729,
                    603,
                    604,
                    731,
                    606,
                    607,
                    733,
                    609,
                    610,
                    611,
                    747,
                    749,
                    752
                ],
                "layer": [
                    407,
                    408,
                    1303,
                    1304,
                    1305,
                    1435,
                    1436,
                    1437,
                    1438,
                    1439,
                    1315,
                    1316,
                    1443,
                    1573,
                    1575,
                    424,
                    427,
                    430,
                    433,
                    690,
                    691,
                    1329,
                    437,
                    1330,
                    1331,
                    442,
                    1339,
                    1340,
                    1341,
                    450,
                    1475,
                    709,
                    710,
                    455,
                    456,
                    711,
                    1478,
                    1480,
                    460,
                    1481,
                    1482,
                    1485,
                    464,
                    593,
                    466,
                    594,
                    595,
                    1487,
                    598,
                    599,
                    472,
                    603,
                    604,
                    1374,
                    1375,
                    608,
                    609,
                    610,
                    1376,
                    1509,
                    615,
                    616,
                    489,
                    1513,
                    1515,
                    1390,
                    1391,
                    1522,
                    1395,
                    500,
                    1396,
                    1526,
                    1528
                ],
                "self.add": [
                    408
                ],
                "Layer": [
                    424
                ],
                "InputLayer": [
                    430
                ],
                "legacy_layers.Merge": [
                    1387,
                    1326,
                    430,
                    591,
                    1299
                ],
                "legacy_layers": [
                    1387,
                    1326,
                    430,
                    591,
                    1299
                ],
                "layer.layers": [
                    442,
                    437,
                    599
                ],
                "first_layer": [
                    1378,
                    1379,
                    1380,
                    1382,
                    1390,
                    442,
                    443,
                    444,
                    445,
                    446
                ],
                "first_layer.layers": [
                    444
                ],
                "batch_shape": [
                    458,
                    445,
                    455
                ],
                "first_layer.batch_input_shape": [
                    445
                ],
                "dtype": [
                    456,
                    459,
                    446
                ],
                "first_layer.dtype": [
                    446
                ],
                "layer.batch_input_shape": [
                    1436,
                    455
                ],
                "layer.dtype": [
                    456,
                    1437
                ],
                "x": [
                    1539,
                    1540,
                    1541,
                    1046,
                    1451,
                    1452,
                    1454,
                    1583,
                    1072,
                    1584,
                    1458,
                    1585,
                    948,
                    1462,
                    1465,
                    1466,
                    1594,
                    1595,
                    1089,
                    458,
                    464,
                    1111,
                    1497,
                    986,
                    1498,
                    1499,
                    486,
                    1006,
                    1520,
                    1521,
                    1531,
                    1020,
                    1534
                ],
                "Input": [
                    458,
                    1436,
                    1454,
                    1594
                ],
                "layer.name": [
                    460,
                    1439
                ],
                "output_tensors": [
                    1538,
                    1542,
                    1543,
                    1512,
                    521,
                    497,
                    466,
                    1525,
                    472,
                    1532
                ],
                "layer.inbound_nodes": [
                    472,
                    466
                ],
                "topology.get_source_inputs": [
                    473
                ],
                "topology.Node": [
                    477
                ],
                "_": [
                    484,
                    1541
                ],
                "x._keras_shape": [
                    486
                ],
                "_keras_shape": [
                    498,
                    522,
                    487
                ],
                "output_tensor": [
                    489,
                    490,
                    495
                ],
                "output_shapes": [
                    498,
                    522
                ],
                "self.layers.append": [
                    500
                ],
                "self.layers.pop": [
                    512
                ],
                "outbound_nodes": [
                    518
                ],
                "output": [
                    519
                ],
                "self.build": [
                    545,
                    676,
                    583,
                    648,
                    715,
                    1291,
                    1005,
                    654,
                    814,
                    659,
                    695,
                    665,
                    1019,
                    540,
                    670
                ],
                "self.model.get_layer": [
                    541
                ],
                "index": [
                    541
                ],
                "self.model.call": [
                    546
                ],
                "inputs": [
                    546,
                    660,
                    671
                ],
                "mask": [
                    546,
                    1531,
                    1534
                ],
                "self.model.trainable": [
                    626,
                    555
                ],
                "self.trainable": [
                    640,
                    555,
                    631
                ],
                "self.supports_masking": [
                    558
                ],
                "self.model.supports_masking": [
                    558
                ],
                "self._output_mask_cache": [
                    559
                ],
                "self.model._output_mask_cache": [
                    559
                ],
                "self._output_tensor_cache": [
                    560
                ],
                "self.model._output_tensor_cache": [
                    560
                ],
                "self._output_shape_cache": [
                    561
                ],
                "self.model._output_shape_cache": [
                    561
                ],
                "self.input_layers": [
                    562
                ],
                "self.model.input_layers": [
                    562
                ],
                "self.input_layers_node_indices": [
                    563
                ],
                "self.model.input_layers_node_indices": [
                    563
                ],
                "self.input_layers_tensor_indices": [
                    564
                ],
                "self.model.input_layers_tensor_indices": [
                    564
                ],
                "self.output_layers": [
                    565
                ],
                "self.model.output_layers": [
                    565
                ],
                "self.output_layers_node_indices": [
                    566
                ],
                "self.model.output_layers_node_indices": [
                    566
                ],
                "self.output_layers_tensor_indices": [
                    567
                ],
                "self.model.output_layers_tensor_indices": [
                    567
                ],
                "self.nodes_by_depth": [
                    568
                ],
                "self.model.nodes_by_depth": [
                    568
                ],
                "self.container_nodes": [
                    569
                ],
                "self.model.container_nodes": [
                    569
                ],
                "self.output_names": [
                    570
                ],
                "self.model.output_names": [
                    570
                ],
                "self.input_names": [
                    571
                ],
                "self.model.input_names": [
                    571
                ],
                "self._feed_input_names": [
                    572
                ],
                "self.model._feed_input_names": [
                    572
                ],
                "self._feed_inputs": [
                    573
                ],
                "self.model._feed_inputs": [
                    573
                ],
                "self.model.callback_model": [
                    577
                ],
                "self.model.uses_learning_phase": [
                    584
                ],
                "merge": [
                    592,
                    593,
                    1387,
                    1388
                ],
                "merge.layers": [
                    593
                ],
                "sublayer": [
                    595,
                    596,
                    597,
                    599,
                    600,
                    601
                ],
                "layer._flattened_layers": [
                    595
                ],
                "layers.append": [
                    610,
                    1332,
                    597,
                    601,
                    604,
                    607
                ],
                "all_attrs": [
                    616,
                    617,
                    614
                ],
                "self._flattened_layers": [
                    615
                ],
                "attr": [
                    616
                ],
                "trainable.setter": [
                    623
                ],
                "trainable": [
                    623
                ],
                "self._gather_list_attr": [
                    641,
                    634,
                    639
                ],
                "weights": [
                    642,
                    643,
                    711,
                    712,
                    716,
                    689,
                    691,
                    692,
                    639
                ],
                "trainable_weights": [
                    641,
                    642
                ],
                "self.model.updates": [
                    649
                ],
                "self.model.state_updates": [
                    655
                ],
                "self.model.get_updates_for": [
                    660
                ],
                "self.model.losses": [
                    666
                ],
                "self.model.get_losses_for": [
                    671
                ],
                "self.model.regularizers": [
                    677
                ],
                "weights.append": [
                    691
                ],
                "layer.get_weights": [
                    691
                ],
                "self.model.get_weights": [
                    696
                ],
                "nb_param": [
                    712,
                    710,
                    711
                ],
                "layer.weights": [
                    710
                ],
                "layer.set_weights": [
                    711
                ],
                "self.model.set_weights": [
                    716
                ],
                "by_name": [
                    730
                ],
                "topology.load_weights_from_hdf5_group_by_name": [
                    731
                ],
                "f.close": [
                    754,
                    735
                ],
                "self.model.compile": [
                    816
                ],
                "weighted_metrics": [
                    819
                ],
                "target_tensors": [
                    820
                ],
                "kwargs": [
                    1504,
                    1506,
                    1510,
                    1511,
                    1513,
                    938,
                    941,
                    942,
                    943,
                    1523,
                    1524,
                    821,
                    1526
                ],
                "self.optimizer": [
                    822
                ],
                "self.model.optimizer": [
                    822
                ],
                "self.loss": [
                    823
                ],
                "self.model.loss": [
                    823
                ],
                "self.metrics": [
                    824
                ],
                "self.model.metrics": [
                    824
                ],
                "self.loss_weights": [
                    825
                ],
                "self.model.loss_weights": [
                    825
                ],
                "self.sample_weight_mode": [
                    826
                ],
                "self.model.sample_weight_mode": [
                    826
                ],
                "self.weighted_metrics": [
                    827
                ],
                "self.model.weighted_metrics": [
                    827
                ],
                "self.targets": [
                    828
                ],
                "self.model.targets": [
                    828
                ],
                "self.metrics_tensors": [
                    829
                ],
                "self.model.metrics_tensors": [
                    829
                ],
                "self.metrics_names": [
                    830
                ],
                "self.model.metrics_names": [
                    830
                ],
                "self.sample_weights": [
                    831
                ],
                "self.model.sample_weights": [
                    831
                ],
                "self.total_loss": [
                    832
                ],
                "self.model.total_loss": [
                    832
                ],
                "epochs": [
                    941,
                    950,
                    1213
                ],
                "kwargs.pop": [
                    941
                ],
                "self.model.fit": [
                    948
                ],
                "y": [
                    1072,
                    1466,
                    948,
                    1046,
                    1465,
                    986,
                    1531,
                    1534
                ],
                "batch_size": [
                    1089,
                    1006,
                    949,
                    1111,
                    987
                ],
                "verbose": [
                    1089,
                    1006,
                    1296,
                    951,
                    1111,
                    988,
                    1214
                ],
                "callbacks": [
                    952,
                    1215
                ],
                "validation_split": [
                    953
                ],
                "validation_data": [
                    1216,
                    954
                ],
                "shuffle": [
                    955,
                    1222
                ],
                "class_weight": [
                    1048,
                    1218,
                    956
                ],
                "sample_weight": [
                    989,
                    1073,
                    957,
                    1047
                ],
                "initial_epoch": [
                    958,
                    1223
                ],
                "steps_per_epoch": [
                    1212,
                    959
                ],
                "validation_steps": [
                    960,
                    1217
                ],
                "self.model.evaluate": [
                    986
                ],
                "self.model.predict": [
                    1006
                ],
                "self.model.predict_on_batch": [
                    1020
                ],
                "self.model.train_on_batch": [
                    1046
                ],
                "self.model.test_on_batch": [
                    1072
                ],
                "preds": [
                    1089,
                    1090,
                    1095
                ],
                "self.predict": [
                    1089,
                    1111
                ],
                "preds.min": [
                    1090
                ],
                "preds.max": [
                    1090
                ],
                "proba": [
                    1112,
                    1113,
                    1115,
                    1111
                ],
                "proba.shape": [
                    1112
                ],
                "proba.argmax": [
                    1113
                ],
                "astype": [
                    1115
                ],
                "self.model.fit_generator": [
                    1211
                ],
                "generator": [
                    1211,
                    1292,
                    1259
                ],
                "max_queue_size": [
                    1293,
                    1219,
                    1261
                ],
                "workers": [
                    1220,
                    1262,
                    1294
                ],
                "use_multiprocessing": [
                    1295,
                    1221,
                    1263
                ],
                "interfaces.legacy_generator_methods_support": [
                    1225,
                    1265,
                    1117
                ],
                "interfaces": [
                    1225,
                    1265,
                    1117
                ],
                "self.model.evaluate_generator": [
                    1259
                ],
                "steps": [
                    1260,
                    1292
                ],
                "self.model.predict_generator": [
                    1292
                ],
                "self.legacy_get_config": [
                    1300
                ],
                "config.append": [
                    1304,
                    1337,
                    1340,
                    1335
                ],
                "layer.__class__.__name__": [
                    1304,
                    1330,
                    1340
                ],
                "layer.__class__": [
                    1573,
                    1480,
                    1330,
                    1304,
                    1340
                ],
                "layer.get_config": [
                    1573,
                    1480,
                    1331,
                    1305,
                    1341
                ],
                "copy.deepcopy": [
                    1306,
                    1342
                ],
                "copy": [
                    1306,
                    1342
                ],
                "cls.legacy_from_config": [
                    1311
                ],
                "cls": [
                    1368,
                    1313,
                    1311
                ],
                "conf": [
                    1314,
                    1315,
                    1359,
                    1360,
                    1361,
                    1362,
                    1393,
                    1364,
                    1365,
                    1394,
                    1395
                ],
                "model.add": [
                    1388,
                    1396,
                    1316,
                    1391
                ],
                "layer_config": [
                    1330,
                    1332
                ],
                "merge_config": [
                    1333,
                    1334,
                    1335
                ],
                "get_config": [
                    1338,
                    1333
                ],
                "__class__.__name__": [
                    1337
                ],
                "__class__": [
                    1337
                ],
                "layer_cache": [
                    1355,
                    1356,
                    1372,
                    1373,
                    1375
                ],
                "class_name": [
                    1360,
                    1363
                ],
                "conf.get": [
                    1361
                ],
                "get": [
                    1371
                ],
                "layer_data": [
                    1371,
                    1374
                ],
                "normalize_legacy_config": [
                    1394,
                    1379
                ],
                "merge_inputs": [
                    1385,
                    1386,
                    1381
                ],
                "first_layer_config": [
                    1386,
                    1387,
                    1382,
                    1383
                ],
                "merge_input_config": [
                    1384,
                    1383
                ],
                "first_layer_config.pop": [
                    1383
                ],
                "merge_input": [
                    1384,
                    1385
                ],
                "merge_inputs.append": [
                    1385
                ],
                "legacy_layers.Merge.from_config": [
                    1387
                ],
                "get_or_create_layer": [
                    1395,
                    1390
                ],
                "layer_map": [
                    1443,
                    1445,
                    1478,
                    1481,
                    1485,
                    1460,
                    1429
                ],
                "tensor_map": [
                    1540,
                    1541,
                    1466,
                    1430,
                    1498,
                    1499,
                    1534
                ],
                "input_tensors": [
                    1440,
                    1463,
                    1623,
                    1543,
                    1576,
                    1449,
                    1451,
                    1579,
                    1583,
                    1625,
                    1431,
                    1465,
                    1434
                ],
                "input_layers": [
                    1433,
                    1444
                ],
                "model.input_layers": [
                    1435,
                    1444,
                    1453
                ],
                "input_tensor": [
                    1440,
                    1442,
                    1454,
                    1456,
                    1459,
                    1594,
                    1436,
                    1596
                ],
                "layer.sparse": [
                    1438
                ],
                "input_tensors.append": [
                    1440
                ],
                "newly_created_input_layer": [
                    1442,
                    1443,
                    1460,
                    1459
                ],
                "input_tensor._keras_history": [
                    1442,
                    1459,
                    1596
                ],
                "original_input_layer": [
                    1458,
                    1460,
                    1444,
                    1445
                ],
                "cloned_input_layer": [
                    1444,
                    1445
                ],
                "topology._to_list": [
                    1512,
                    1449,
                    1514,
                    1579,
                    1583,
                    1525,
                    1527
                ],
                "_input_tensors": [
                    1456,
                    1450,
                    1462,
                    1463
                ],
                "K.is_keras_tensor": [
                    1584,
                    1452
                ],
                "_input_tensors.append": [
                    1456,
                    1462
                ],
                "x._keras_history": [
                    1585,
                    1458
                ],
                "model.inputs": [
                    1465
                ],
                "depth_keys": [
                    1469,
                    1470,
                    1471
                ],
                "model.nodes_by_depth.keys": [
                    1469
                ],
                "model.nodes_by_depth": [
                    1472,
                    1469
                ],
                "depth_keys.sort": [
                    1470
                ],
                "depth": [
                    1472,
                    1471
                ],
                "nodes": [
                    1472,
                    1473
                ],
                "node": [
                    1504,
                    1473,
                    1475,
                    1491,
                    1492,
                    1503
                ],
                "node.outbound_layer": [
                    1475
                ],
                "new_layer": [
                    1480,
                    1481,
                    1482
                ],
                "layer.__class__.from_config": [
                    1480,
                    1573
                ],
                "topology.InputLayer": [
                    1586,
                    1487
                ],
                "reference_input_tensors": [
                    1497,
                    1491,
                    1501
                ],
                "node.input_tensors": [
                    1491
                ],
                "reference_output_tensors": [
                    1531,
                    1492
                ],
                "node.output_tensors": [
                    1492
                ],
                "computed_data": [
                    1507,
                    1508,
                    1520,
                    1521,
                    1496,
                    1499,
                    1501
                ],
                "computed_data.append": [
                    1499
                ],
                "node.arguments": [
                    1504,
                    1503
                ],
                "computed_tensor": [
                    1513,
                    1515,
                    1508,
                    1517
                ],
                "computed_mask": [
                    1518,
                    1508,
                    1516,
                    1511
                ],
                "has_arg": [
                    1522,
                    1509
                ],
                "layer.call": [
                    1522,
                    1509
                ],
                "output_masks": [
                    1514,
                    1533,
                    1527
                ],
                "layer.compute_mask": [
                    1528,
                    1515
                ],
                "computed_tensors": [
                    1520,
                    1528,
                    1517,
                    1526
                ],
                "computed_masks": [
                    1521,
                    1524,
                    1529,
                    1518
                ],
                "model.outputs": [
                    1539
                ],
                "tensor": [
                    1541,
                    1542
                ],
                "output_tensors.append": [
                    1542
                ],
                "model.name": [
                    1577,
                    1588,
                    1597,
                    1543
                ],
                "clone": [
                    1575
                ],
                "origin_layer": [
                    1585,
                    1586,
                    1587
                ],
                "x.name": [
                    1595
                ],
                "input_layer": [
                    1596,
                    1597
                ],
                "_clone_sequential_model": [
                    1623
                ],
                "_clone_functional_model": [
                    1625
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/keras_42/tests/keras/engine/test_training.py",
                "test_function": "test_model_methods",
                "test_function_code": "@keras_test\ndef test_model_methods():\n    a = Input(shape=(3,), name='input_a')\n    b = Input(shape=(3,), name='input_b')\n\n    a_2 = Dense(4, name='dense_1')(a)\n    dp = Dropout(0.5, name='dropout')\n    b_2 = dp(b)\n\n    model = Model([a, b], [a_2, b_2])\n\n    optimizer = 'rmsprop'\n    loss = 'mse'\n    loss_weights = [1., 0.5]\n\n    input_a_np = np.random.random((10, 3))\n    input_b_np = np.random.random((10, 3))\n\n    output_a_np = np.random.random((10, 4))\n    output_b_np = np.random.random((10, 3))\n\n    # training/testing doesn't work before compiling.\n    with pytest.raises(RuntimeError):\n        model.train_on_batch([input_a_np, input_b_np], [output_a_np, output_b_np])\n\n    model.compile(optimizer, loss, metrics=[], loss_weights=loss_weights,\n                  sample_weight_mode=None)\n\n    # test train_on_batch\n    out = model.train_on_batch([input_a_np, input_b_np],\n                               [output_a_np, output_b_np])\n    out = model.train_on_batch({'input_a': input_a_np, 'input_b': input_b_np},\n                               [output_a_np, output_b_np])\n    out = model.train_on_batch({'input_a': input_a_np, 'input_b': input_b_np},\n                               {'dense_1': output_a_np, 'dropout': output_b_np})\n\n    # test fit\n    out = model.fit([input_a_np, input_b_np],\n                    [output_a_np, output_b_np], epochs=1, batch_size=4)\n    out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},\n                    [output_a_np, output_b_np], epochs=1, batch_size=4)\n    out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},\n                    {'dense_1': output_a_np, 'dropout': output_b_np},\n                    epochs=1, batch_size=4)\n\n    # test validation_split\n    out = model.fit([input_a_np, input_b_np],\n                    [output_a_np, output_b_np],\n                    epochs=1, batch_size=4, validation_split=0.5)\n    out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},\n                    [output_a_np, output_b_np],\n                    epochs=1, batch_size=4, validation_split=0.5)\n\n    # test validation data\n    out = model.fit([input_a_np, input_b_np],\n                    [output_a_np, output_b_np],\n                    epochs=1, batch_size=4,\n                    validation_data=([input_a_np, input_b_np], [output_a_np, output_b_np]))\n    out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},\n                    [output_a_np, output_b_np],\n                    epochs=1, batch_size=4, validation_split=0.5,\n                    validation_data=({'input_a': input_a_np, 'input_b': input_b_np}, [output_a_np, output_b_np]))\n    out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},\n                    {'dense_1': output_a_np, 'dropout': output_b_np},\n                    epochs=1, batch_size=4, validation_split=0.5,\n                    validation_data=(\n                        {'input_a': input_a_np, 'input_b': input_b_np},\n                        {'dense_1': output_a_np, 'dropout': output_b_np}))\n\n    # test_on_batch\n    out = model.test_on_batch([input_a_np, input_b_np],\n                              [output_a_np, output_b_np])\n    out = model.test_on_batch({'input_a': input_a_np, 'input_b': input_b_np},\n                              [output_a_np, output_b_np])\n    out = model.test_on_batch({'input_a': input_a_np, 'input_b': input_b_np},\n                              {'dense_1': output_a_np, 'dropout': output_b_np})\n\n    # predict_on_batch\n    out = model.predict_on_batch([input_a_np, input_b_np])\n    out = model.predict_on_batch({'input_a': input_a_np, 'input_b': input_b_np})\n\n    # predict, evaluate\n    input_a_np = np.random.random((10, 3))\n    input_b_np = np.random.random((10, 3))\n\n    output_a_np = np.random.random((10, 4))\n    output_b_np = np.random.random((10, 3))\n\n    out = model.evaluate([input_a_np, input_b_np], [output_a_np, output_b_np], batch_size=4)\n    out = model.predict([input_a_np, input_b_np], batch_size=4)\n\n    # with sample_weight\n    input_a_np = np.random.random((10, 3))\n    input_b_np = np.random.random((10, 3))\n\n    output_a_np = np.random.random((10, 4))\n    output_b_np = np.random.random((10, 3))\n\n    sample_weight = [None, np.random.random((10,))]\n    out = model.train_on_batch([input_a_np, input_b_np],\n                               [output_a_np, output_b_np],\n                               sample_weight=sample_weight)\n\n    out = model.test_on_batch([input_a_np, input_b_np],\n                              [output_a_np, output_b_np],\n                              sample_weight=sample_weight)\n\n    # test accuracy metric\n    model.compile(optimizer, loss, metrics=['acc'],\n                  sample_weight_mode=None)\n\n    out = model.train_on_batch([input_a_np, input_b_np],\n                               [output_a_np, output_b_np])\n    assert len(out) == 5\n    out = model.test_on_batch([input_a_np, input_b_np],\n                              [output_a_np, output_b_np])\n    assert len(out) == 5\n\n    # this should also work\n    model.compile(optimizer, loss, metrics={'dense_1': 'acc'},\n                  sample_weight_mode=None)\n\n    out = model.train_on_batch([input_a_np, input_b_np],\n                               [output_a_np, output_b_np])\n    assert len(out) == 4\n    out = model.test_on_batch([input_a_np, input_b_np],\n                              [output_a_np, output_b_np])\n    assert len(out) == 4\n\n    # and this as well\n    model.compile(optimizer, loss, metrics={'dense_1': ['acc']},\n                  sample_weight_mode=None)\n\n    out = model.train_on_batch([input_a_np, input_b_np],\n                               [output_a_np, output_b_np])\n    assert len(out) == 4\n    out = model.test_on_batch([input_a_np, input_b_np],\n                              [output_a_np, output_b_np])\n    assert len(out) == 4\n\n    # test starting from non-zero initial epoch\n    trained_epochs = []\n    trained_batches = []\n\n    # define tracer callback\n    def on_epoch_begin(epoch, logs):\n        trained_epochs.append(epoch)\n\n    def on_batch_begin(batch, logs):\n        trained_batches.append(batch)\n\n    tracker_cb = LambdaCallback(on_epoch_begin=on_epoch_begin,\n                                on_batch_begin=on_batch_begin)\n\n    out = model.fit([input_a_np, input_b_np],\n                    [output_a_np, output_b_np], epochs=5, batch_size=4,\n                    initial_epoch=2, callbacks=[tracker_cb])\n    assert trained_epochs == [2, 3, 4]\n\n    # test starting from non-zero initial epoch for generator too\n    trained_epochs = []\n\n    def gen_data(batch_sz):\n        while True:\n            yield ([np.random.random((batch_sz, 3)), np.random.random((batch_sz, 3))],\n                   [np.random.random((batch_sz, 4)), np.random.random((batch_sz, 3))])\n\n    out = model.fit_generator(gen_data(4), steps_per_epoch=3, epochs=5,\n                              initial_epoch=2, callbacks=[tracker_cb])\n    assert trained_epochs == [2, 3, 4]\n\n    # test with a custom metric function\n    def mse(y_true, y_pred):\n        return K.mean(K.pow(y_true - y_pred, 2))\n\n    model.compile(optimizer, loss, metrics=[mse],\n                  sample_weight_mode=None)\n\n    out = model.train_on_batch([input_a_np, input_b_np],\n                               [output_a_np, output_b_np])\n    out_len = 1 + 2 * (1 + 1)  # total loss + 2 outputs * (loss + metric)\n    assert len(out) == out_len\n    out = model.test_on_batch([input_a_np, input_b_np],\n                              [output_a_np, output_b_np])\n    assert len(out) == out_len\n\n    input_a_np = np.random.random((10, 3))\n    input_b_np = np.random.random((10, 3))\n\n    output_a_np = np.random.random((10, 4))\n    output_b_np = np.random.random((10, 3))\n\n    out = model.fit([input_a_np, input_b_np], [output_a_np, output_b_np], batch_size=4, epochs=1)\n    out = model.evaluate([input_a_np, input_b_np], [output_a_np, output_b_np], batch_size=4)\n    out = model.predict([input_a_np, input_b_np], batch_size=4)\n\n    # empty batch\n    with pytest.raises(ValueError):\n        def gen_data():\n            while True:\n                yield (np.asarray([]), np.asarray([]))\n        out = model.evaluate_generator(gen_data(), steps=1)\n\n    # x is not a list of numpy arrays.\n    with pytest.raises(ValueError):\n        out = model.predict([None])\n\n    # x does not match _feed_input_names.\n    with pytest.raises(ValueError):\n        out = model.predict([input_a_np, None, input_b_np])\n    with pytest.raises(ValueError):\n        out = model.predict([None, input_a_np, input_b_np])\n\n    # all input/output/weight arrays should have the same number of samples.\n    with pytest.raises(ValueError):\n        out = model.train_on_batch([input_a_np, input_b_np[:2]],\n                                   [output_a_np, output_b_np],\n                                   sample_weight=sample_weight)\n    with pytest.raises(ValueError):\n        out = model.train_on_batch([input_a_np, input_b_np],\n                                   [output_a_np, output_b_np[:2]],\n                                   sample_weight=sample_weight)\n    with pytest.raises(ValueError):\n        out = model.train_on_batch([input_a_np, input_b_np],\n                                   [output_a_np, output_b_np],\n                                   sample_weight=[sample_weight[1], sample_weight[1][:2]])\n\n    # `sample_weight` is neither a dict nor a list.\n    with pytest.raises(TypeError):\n        out = model.train_on_batch([input_a_np, input_b_np],\n                                   [output_a_np, output_b_np],\n                                   sample_weight=tuple(sample_weight))\n\n    # `validation_data` is neither a tuple nor a triple.\n    with pytest.raises(ValueError):\n        out = model.fit([input_a_np, input_b_np],\n                        [output_a_np, output_b_np],\n                        epochs=1, batch_size=4,\n                        validation_data=([input_a_np, input_b_np],))\n\n    # `loss` does not match outputs.\n    with pytest.raises(ValueError):\n        model.compile(optimizer, loss=['mse', 'mae', 'mape'])\n\n    # `loss_weights` does not match output_names.\n    with pytest.raises(ValueError):\n        model.compile(optimizer, loss='mse', loss_weights={'lstm': 0.5})\n\n    # `loss_weights` does not match outputs.\n    with pytest.raises(ValueError):\n        model.compile(optimizer, loss='mse', loss_weights=[0.5])\n\n    # `loss_weights` is invalid type.\n    with pytest.raises(TypeError):\n        model.compile(optimizer, loss='mse', loss_weights=(0.5, 0.5))\n\n    # `sample_weight_mode` does not match output_names.\n    with pytest.raises(ValueError):\n        model.compile(optimizer, loss='mse', sample_weight_mode={'lstm': 'temporal'})\n\n    # `sample_weight_mode` does not match output_names.\n    with pytest.raises(ValueError):\n        model.compile(optimizer, loss='mse', sample_weight_mode=['temporal'])\n\n    # `sample_weight_mode` matches output_names partially.\n    with pytest.raises(ValueError):\n        model.compile(optimizer, loss='mse', sample_weight_mode={'dense_1': 'temporal'})\n\n    # `loss` does not exist.\n    with pytest.raises(ValueError):\n        model.compile(optimizer, loss=[])\n\n    model.compile(optimizer, loss=['mse', 'mae'])\n    model.compile(optimizer, loss='mse', loss_weights={'dense_1': 0.2, 'dropout': 0.8})\n    model.compile(optimizer, loss='mse', loss_weights=[0.2, 0.8])\n\n    # the rank of weight arrays should be 1.\n    with pytest.raises(ValueError):\n        out = model.train_on_batch([input_a_np, input_b_np],\n                                   [output_a_np, output_b_np],\n                                   sample_weight=[None, np.random.random((10, 20, 30))])\n\n    model.compile(optimizer, loss='mse', sample_weight_mode={'dense_1': None, 'dropout': 'temporal'})\n    model.compile(optimizer, loss='mse', sample_weight_mode=[None, 'temporal'])\n\n    # the rank of output arrays should be at least 3D.\n    with pytest.raises(ValueError):\n        out = model.train_on_batch([input_a_np, input_b_np],\n                                   [output_a_np, output_b_np],\n                                   sample_weight=sample_weight)\n\n    model.compile(optimizer, loss, metrics=[], loss_weights=loss_weights,\n                  sample_weight_mode=None)\n    trained_epochs = []\n    trained_batches = []\n    out = model.fit_generator(generator=RandomSequence(3), steps_per_epoch=3, epochs=5,\n                              initial_epoch=0, validation_data=RandomSequence(4),\n                              validation_steps=3, callbacks=[tracker_cb])\n    assert trained_epochs == [0, 1, 2, 3, 4]\n    assert trained_batches == list(range(3)) * 5\n\n    # steps_per_epoch will be equal to len of sequence if it's unspecified\n    trained_epochs = []\n    trained_batches = []\n    out = model.fit_generator(generator=RandomSequence(3), epochs=5,\n                              initial_epoch=0, validation_data=RandomSequence(4),\n                              callbacks=[tracker_cb])\n    assert trained_epochs == [0, 1, 2, 3, 4]\n    assert trained_batches == list(range(12)) * 5\n\n    # fit_generator will throw an exception if steps is unspecified for regular generator\n    with pytest.raises(ValueError):\n        def gen_data():\n            while True:\n                yield (np.asarray([]), np.asarray([]))\n        out = model.fit_generator(generator=gen_data(), epochs=5,\n                                  initial_epoch=0, validation_data=gen_data(),\n                                  callbacks=[tracker_cb])",
                "test_error": "assert [0,\\n 1,\\n 2,\\n 3,\\n 4,\\n 5,\\n 6,\\n 7,\\n 8,\\n 9,\\n 10,\\n 11,\\n 0,\\n 1,\\n 2,\\n 3,\\n 4,\\n 5,\\n 6,\\n 7,\\n 8,\\n 9,\\n 10,\\n 11,\\n 0,\\n 1,\\n 2,\\n 3,\\n 4,\\n 5,\\n 6,\\n 7,\\n 8,\\n 9,\\n 10,\\n 11,\\n 0,\\n 1,\\n 2,\\n 3,\\n 4,\\n 5,\\n 6,\\n 7,\\n 8,\\n 9,\\n 10,\\n 11,\\n 0,\\n 1,\\n 2,\\n 3,\\n 4,\\n 5,\\n 6,\\n 7,\\n 8,\\n 9,\\n 10,\\n 11] == [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]   At index 3 diff: 3 != 0   Left contains 45 more items, first extra item: 3   Full diff:     [      0,      1,      2,   +  3,   +  4,   +  5,   +  6,   +  7,   +  8,   +  9,   +  10,   +  11,      0,      1,      2,   +  3,   +  4,   +  5,   +  6,   +  7,   +  8,   +  9,   +  10,   +  11,      0,      1,      2,   +  3,   +  4,   +  5,   +  6,   +  7,   +  8,   +  9,   +  10,   +  11,      0,      1,      2,   +  3,   +  4,   +  5,   +  6,   +  7,   +  8,   +  9,   +  10,   +  11,      0,      1,      2,   +  3,   +  4,   +  5,   +  6,   +  7,   +  8,   +  9,   +  10,   +  11,     ]",
                "full_test_error": "@keras_test\n    def test_model_methods():\n        a = Input(shape=(3,), name='input_a')\n        b = Input(shape=(3,), name='input_b')\n    \n        a_2 = Dense(4, name='dense_1')(a)\n        dp = Dropout(0.5, name='dropout')\n        b_2 = dp(b)\n    \n        model = Model([a, b], [a_2, b_2])\n    \n        optimizer = 'rmsprop'\n        loss = 'mse'\n        loss_weights = [1., 0.5]\n    \n        input_a_np = np.random.random((10, 3))\n        input_b_np = np.random.random((10, 3))\n    \n        output_a_np = np.random.random((10, 4))\n        output_b_np = np.random.random((10, 3))\n    \n        # training/testing doesn't work before compiling.\n        with pytest.raises(RuntimeError):\n            model.train_on_batch([input_a_np, input_b_np], [output_a_np, output_b_np])\n    \n        model.compile(optimizer, loss, metrics=[], loss_weights=loss_weights,\n                      sample_weight_mode=None)\n    \n        # test train_on_batch\n        out = model.train_on_batch([input_a_np, input_b_np],\n                                   [output_a_np, output_b_np])\n        out = model.train_on_batch({'input_a': input_a_np, 'input_b': input_b_np},\n                                   [output_a_np, output_b_np])\n        out = model.train_on_batch({'input_a': input_a_np, 'input_b': input_b_np},\n                                   {'dense_1': output_a_np, 'dropout': output_b_np})\n    \n        # test fit\n        out = model.fit([input_a_np, input_b_np],\n                        [output_a_np, output_b_np], epochs=1, batch_size=4)\n        out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},\n                        [output_a_np, output_b_np], epochs=1, batch_size=4)\n        out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},\n                        {'dense_1': output_a_np, 'dropout': output_b_np},\n                        epochs=1, batch_size=4)\n    \n        # test validation_split\n        out = model.fit([input_a_np, input_b_np],\n                        [output_a_np, output_b_np],\n                        epochs=1, batch_size=4, validation_split=0.5)\n        out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},\n                        [output_a_np, output_b_np],\n                        epochs=1, batch_size=4, validation_split=0.5)\n    \n        # test validation data\n        out = model.fit([input_a_np, input_b_np],\n                        [output_a_np, output_b_np],\n                        epochs=1, batch_size=4,\n                        validation_data=([input_a_np, input_b_np], [output_a_np, output_b_np]))\n        out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},\n                        [output_a_np, output_b_np],\n                        epochs=1, batch_size=4, validation_split=0.5,\n                        validation_data=({'input_a': input_a_np, 'input_b': input_b_np}, [output_a_np, output_b_np]))\n        out = model.fit({'input_a': input_a_np, 'input_b': input_b_np},\n                        {'dense_1': output_a_np, 'dropout': output_b_np},\n                        epochs=1, batch_size=4, validation_split=0.5,\n                        validation_data=(\n                            {'input_a': input_a_np, 'input_b': input_b_np},\n                            {'dense_1': output_a_np, 'dropout': output_b_np}))\n    \n        # test_on_batch\n        out = model.test_on_batch([input_a_np, input_b_np],\n                                  [output_a_np, output_b_np])\n        out = model.test_on_batch({'input_a': input_a_np, 'input_b': input_b_np},\n                                  [output_a_np, output_b_np])\n        out = model.test_on_batch({'input_a': input_a_np, 'input_b': input_b_np},\n                                  {'dense_1': output_a_np, 'dropout': output_b_np})\n    \n        # predict_on_batch\n        out = model.predict_on_batch([input_a_np, input_b_np])\n        out = model.predict_on_batch({'input_a': input_a_np, 'input_b': input_b_np})\n    \n        # predict, evaluate\n        input_a_np = np.random.random((10, 3))\n        input_b_np = np.random.random((10, 3))\n    \n        output_a_np = np.random.random((10, 4))\n        output_b_np = np.random.random((10, 3))\n    \n        out = model.evaluate([input_a_np, input_b_np], [output_a_np, output_b_np], batch_size=4)\n        out = model.predict([input_a_np, input_b_np], batch_size=4)\n    \n        # with sample_weight\n        input_a_np = np.random.random((10, 3))\n        input_b_np = np.random.random((10, 3))\n    \n        output_a_np = np.random.random((10, 4))\n        output_b_np = np.random.random((10, 3))\n    \n        sample_weight = [None, np.random.random((10,))]\n        out = model.train_on_batch([input_a_np, input_b_np],\n                                   [output_a_np, output_b_np],\n                                   sample_weight=sample_weight)\n    \n        out = model.test_on_batch([input_a_np, input_b_np],\n                                  [output_a_np, output_b_np],\n                                  sample_weight=sample_weight)\n    \n        # test accuracy metric\n        model.compile(optimizer, loss, metrics=['acc'],\n                      sample_weight_mode=None)\n    \n        out = model.train_on_batch([input_a_np, input_b_np],\n                                   [output_a_np, output_b_np])\n        assert len(out) == 5\n        out = model.test_on_batch([input_a_np, input_b_np],\n                                  [output_a_np, output_b_np])\n        assert len(out) == 5\n    \n        # this should also work\n        model.compile(optimizer, loss, metrics={'dense_1': 'acc'},\n                      sample_weight_mode=None)\n    \n        out = model.train_on_batch([input_a_np, input_b_np],\n                                   [output_a_np, output_b_np])\n        assert len(out) == 4\n        out = model.test_on_batch([input_a_np, input_b_np],\n                                  [output_a_np, output_b_np])\n        assert len(out) == 4\n    \n        # and this as well\n        model.compile(optimizer, loss, metrics={'dense_1': ['acc']},\n                      sample_weight_mode=None)\n    \n        out = model.train_on_batch([input_a_np, input_b_np],\n                                   [output_a_np, output_b_np])\n        assert len(out) == 4\n        out = model.test_on_batch([input_a_np, input_b_np],\n                                  [output_a_np, output_b_np])\n        assert len(out) == 4\n    \n        # test starting from non-zero initial epoch\n        trained_epochs = []\n        trained_batches = []\n    \n        # define tracer callback\n        def on_epoch_begin(epoch, logs):\n            trained_epochs.append(epoch)\n    \n        def on_batch_begin(batch, logs):\n            trained_batches.append(batch)\n    \n        tracker_cb = LambdaCallback(on_epoch_begin=on_epoch_begin,\n                                    on_batch_begin=on_batch_begin)\n    \n        out = model.fit([input_a_np, input_b_np],\n                        [output_a_np, output_b_np], epochs=5, batch_size=4,\n                        initial_epoch=2, callbacks=[tracker_cb])\n        assert trained_epochs == [2, 3, 4]\n    \n        # test starting from non-zero initial epoch for generator too\n        trained_epochs = []\n    \n        def gen_data(batch_sz):\n            while True:\n                yield ([np.random.random((batch_sz, 3)), np.random.random((batch_sz, 3))],\n                       [np.random.random((batch_sz, 4)), np.random.random((batch_sz, 3))])\n    \n        out = model.fit_generator(gen_data(4), steps_per_epoch=3, epochs=5,\n                                  initial_epoch=2, callbacks=[tracker_cb])\n        assert trained_epochs == [2, 3, 4]\n    \n        # test with a custom metric function\n        def mse(y_true, y_pred):\n            return K.mean(K.pow(y_true - y_pred, 2))\n    \n        model.compile(optimizer, loss, metrics=[mse],\n                      sample_weight_mode=None)\n    \n        out = model.train_on_batch([input_a_np, input_b_np],\n                                   [output_a_np, output_b_np])\n        out_len = 1 + 2 * (1 + 1)  # total loss + 2 outputs * (loss + metric)\n        assert len(out) == out_len\n        out = model.test_on_batch([input_a_np, input_b_np],\n                                  [output_a_np, output_b_np])\n        assert len(out) == out_len\n    \n        input_a_np = np.random.random((10, 3))\n        input_b_np = np.random.random((10, 3))\n    \n        output_a_np = np.random.random((10, 4))\n        output_b_np = np.random.random((10, 3))\n    \n        out = model.fit([input_a_np, input_b_np], [output_a_np, output_b_np], batch_size=4, epochs=1)\n        out = model.evaluate([input_a_np, input_b_np], [output_a_np, output_b_np], batch_size=4)\n        out = model.predict([input_a_np, input_b_np], batch_size=4)\n    \n        # empty batch\n        with pytest.raises(ValueError):\n            def gen_data():\n                while True:\n                    yield (np.asarray([]), np.asarray([]))\n            out = model.evaluate_generator(gen_data(), steps=1)\n    \n        # x is not a list of numpy arrays.\n        with pytest.raises(ValueError):\n            out = model.predict([None])\n    \n        # x does not match _feed_input_names.\n        with pytest.raises(ValueError):\n            out = model.predict([input_a_np, None, input_b_np])\n        with pytest.raises(ValueError):\n            out = model.predict([None, input_a_np, input_b_np])\n    \n        # all input/output/weight arrays should have the same number of samples.\n        with pytest.raises(ValueError):\n            out = model.train_on_batch([input_a_np, input_b_np[:2]],\n                                       [output_a_np, output_b_np],\n                                       sample_weight=sample_weight)\n        with pytest.raises(ValueError):\n            out = model.train_on_batch([input_a_np, input_b_np],\n                                       [output_a_np, output_b_np[:2]],\n                                       sample_weight=sample_weight)\n        with pytest.raises(ValueError):\n            out = model.train_on_batch([input_a_np, input_b_np],\n                                       [output_a_np, output_b_np],\n                                       sample_weight=[sample_weight[1], sample_weight[1][:2]])\n    \n        # `sample_weight` is neither a dict nor a list.\n        with pytest.raises(TypeError):\n            out = model.train_on_batch([input_a_np, input_b_np],\n                                       [output_a_np, output_b_np],\n                                       sample_weight=tuple(sample_weight))\n    \n        # `validation_data` is neither a tuple nor a triple.\n        with pytest.raises(ValueError):\n            out = model.fit([input_a_np, input_b_np],\n                            [output_a_np, output_b_np],\n                            epochs=1, batch_size=4,\n                            validation_data=([input_a_np, input_b_np],))\n    \n        # `loss` does not match outputs.\n        with pytest.raises(ValueError):\n            model.compile(optimizer, loss=['mse', 'mae', 'mape'])\n    \n        # `loss_weights` does not match output_names.\n        with pytest.raises(ValueError):\n            model.compile(optimizer, loss='mse', loss_weights={'lstm': 0.5})\n    \n        # `loss_weights` does not match outputs.\n        with pytest.raises(ValueError):\n            model.compile(optimizer, loss='mse', loss_weights=[0.5])\n    \n        # `loss_weights` is invalid type.\n        with pytest.raises(TypeError):\n            model.compile(optimizer, loss='mse', loss_weights=(0.5, 0.5))\n    \n        # `sample_weight_mode` does not match output_names.\n        with pytest.raises(ValueError):\n            model.compile(optimizer, loss='mse', sample_weight_mode={'lstm': 'temporal'})\n    \n        # `sample_weight_mode` does not match output_names.\n        with pytest.raises(ValueError):\n            model.compile(optimizer, loss='mse', sample_weight_mode=['temporal'])\n    \n        # `sample_weight_mode` matches output_names partially.\n        with pytest.raises(ValueError):\n            model.compile(optimizer, loss='mse', sample_weight_mode={'dense_1': 'temporal'})\n    \n        # `loss` does not exist.\n        with pytest.raises(ValueError):\n            model.compile(optimizer, loss=[])\n    \n        model.compile(optimizer, loss=['mse', 'mae'])\n        model.compile(optimizer, loss='mse', loss_weights={'dense_1': 0.2, 'dropout': 0.8})\n        model.compile(optimizer, loss='mse', loss_weights=[0.2, 0.8])\n    \n        # the rank of weight arrays should be 1.\n        with pytest.raises(ValueError):\n            out = model.train_on_batch([input_a_np, input_b_np],\n                                       [output_a_np, output_b_np],\n                                       sample_weight=[None, np.random.random((10, 20, 30))])\n    \n        model.compile(optimizer, loss='mse', sample_weight_mode={'dense_1': None, 'dropout': 'temporal'})\n        model.compile(optimizer, loss='mse', sample_weight_mode=[None, 'temporal'])\n    \n        # the rank of output arrays should be at least 3D.\n        with pytest.raises(ValueError):\n            out = model.train_on_batch([input_a_np, input_b_np],\n                                       [output_a_np, output_b_np],\n                                       sample_weight=sample_weight)\n    \n        model.compile(optimizer, loss, metrics=[], loss_weights=loss_weights,\n                      sample_weight_mode=None)\n        trained_epochs = []\n        trained_batches = []\n        out = model.fit_generator(generator=RandomSequence(3), steps_per_epoch=3, epochs=5,\n                                  initial_epoch=0, validation_data=RandomSequence(4),\n                                  validation_steps=3, callbacks=[tracker_cb])\n        assert trained_epochs == [0, 1, 2, 3, 4]\n>       assert trained_batches == list(range(3)) * 5\nE       assert [0,\\n 1,\\n 2,\\n 3,\\n 4,\\n 5,\\n 6,\\n 7,\\n 8,\\n 9,\\n 10,\\n 11,\\n 0,\\n 1,\\n 2,\\n 3,\\n 4,\\n 5,\\n 6,\\n 7,\\n 8,\\n 9,\\n 10,\\n 11,\\n 0,\\n 1,\\n 2,\\n 3,\\n 4,\\n 5,\\n 6,\\n 7,\\n 8,\\n 9,\\n 10,\\n 11,\\n 0,\\n 1,\\n 2,\\n 3,\\n 4,\\n 5,\\n 6,\\n 7,\\n 8,\\n 9,\\n 10,\\n 11,\\n 0,\\n 1,\\n 2,\\n 3,\\n 4,\\n 5,\\n 6,\\n 7,\\n 8,\\n 9,\\n 10,\\n 11] == [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]\nE         At index 3 diff: 3 != 0\nE         Left contains 45 more items, first extra item: 3\nE         Full diff:\nE           [\nE            0,\nE            1,\nE            2,\nE         +  3,\nE         +  4,\nE         +  5,\nE         +  6,\nE         +  7,\nE         +  8,\nE         +  9,\nE         +  10,\nE         +  11,\nE            0,\nE            1,\nE            2,\nE         +  3,\nE         +  4,\nE         +  5,\nE         +  6,\nE         +  7,\nE         +  8,\nE         +  9,\nE         +  10,\nE         +  11,\nE            0,\nE            1,\nE            2,\nE         +  3,\nE         +  4,\nE         +  5,\nE         +  6,\nE         +  7,\nE         +  8,\nE         +  9,\nE         +  10,\nE         +  11,\nE            0,\nE            1,\nE            2,\nE         +  3,\nE         +  4,\nE         +  5,\nE         +  6,\nE         +  7,\nE         +  8,\nE         +  9,\nE         +  10,\nE         +  11,\nE            0,\nE            1,\nE            2,\nE         +  3,\nE         +  4,\nE         +  5,\nE         +  6,\nE         +  7,\nE         +  8,\nE         +  9,\nE         +  10,\nE         +  11,\nE           ]\n\ntests/keras/engine/test_training.py:393: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "keras_test"
                ]
            }
        ]
    }
}