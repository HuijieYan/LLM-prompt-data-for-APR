{
    "keras:11": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_11/keras/engine/training_generator.py": {
            "buggy_functions": [
                {
                    "function_name": "fit_generator",
                    "function_code": "def fit_generator(model,\n                  generator,\n                  steps_per_epoch=None,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"See docstring for `Model.fit_generator`.\"\"\"\n    epoch = initial_epoch\n\n    do_validation = bool(validation_data)\n    model._make_train_function()\n    if do_validation:\n        model._make_test_function()\n\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a'\n                             ' generator based on the '\n                             '`keras.utils.Sequence`'\n                             ' class. Please specify `steps_per_epoch` '\n                             'or use the `keras.utils.Sequence` class.')\n\n    # python 2 has 'next', 3 has '__next__'\n    # avoid any explicit version checks\n    val_gen = (hasattr(validation_data, 'next') or\n               hasattr(validation_data, '__next__') or\n               isinstance(validation_data, Sequence))\n    if (val_gen and not isinstance(validation_data, Sequence) and\n            not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a'\n                         ' generator based on the `keras.utils.Sequence`'\n                         ' class. Please specify `validation_steps` or use'\n                         ' the `keras.utils.Sequence` class.')\n\n    # Prepare display labels.\n    out_labels = model.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n\n    # prepare callbacks\n    model.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(\n        stateful_metrics=model.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(\n            cbks.ProgbarLogger(\n                count_mode='steps',\n                stateful_metrics=model.stateful_metric_names))\n    _callbacks += (callbacks or []) + [model.history]\n    callbacks = cbks.CallbackList(_callbacks)\n\n    # it's possible to callback a different model than self:\n    if hasattr(model, 'callback_model') and model.callback_model:\n        callback_model = model.callback_model\n    else:\n        callback_model = model\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics,\n    })\n    callbacks.on_train_begin()\n\n    enqueuer = None\n    val_enqueuer = None\n\n    try:\n        if do_validation:\n            if val_gen and workers > 0:\n                # Create an Enqueuer that can be reused\n                val_data = validation_data\n                if isinstance(val_data, Sequence):\n                    val_enqueuer = OrderedEnqueuer(\n                        val_data,\n                        use_multiprocessing=use_multiprocessing)\n                    validation_steps = validation_steps or len(val_data)\n                else:\n                    val_enqueuer = GeneratorEnqueuer(\n                        val_data,\n                        use_multiprocessing=use_multiprocessing)\n                val_enqueuer.start(workers=workers,\n                                   max_queue_size=max_queue_size)\n                val_enqueuer_gen = val_enqueuer.get()\n            elif val_gen:\n                val_data = validation_data\n                if isinstance(val_data, Sequence):\n                    val_enqueuer_gen = iter_sequence_infinite(val_data)\n                    validation_steps = validation_steps or len(val_data)\n                else:\n                    val_enqueuer_gen = val_data\n            else:\n                # Prepare data for validation\n                if len(validation_data) == 2:\n                    val_x, val_y = validation_data\n                    val_sample_weight = None\n                elif len(validation_data) == 3:\n                    val_x, val_y, val_sample_weight = validation_data\n                else:\n                    raise ValueError('`validation_data` should be a tuple '\n                                     '`(val_x, val_y, val_sample_weight)` '\n                                     'or `(val_x, val_y)`. Found: ' +\n                                     str(validation_data))\n                val_x, val_y, val_sample_weights = model._standardize_user_data(\n                    val_x, val_y, val_sample_weight)\n                val_data = val_x + val_y + val_sample_weights\n                if model.uses_learning_phase and not isinstance(K.learning_phase(),\n                                                                int):\n                    val_data += [0.]\n                for cbk in callbacks:\n                    cbk.validation_data = val_data\n\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing,\n                    shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        callback_model.stop_training = False\n        # Construct epoch logs.\n        epoch_logs = {}\n        while epoch < epochs:\n            for m in model.stateful_metric_functions:\n                m.reset_states()\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n                # build batch logs\n                batch_logs = {}\n                if x is None or len(x) == 0:\n                    # Handle data tensors support when no input given\n                    # step-size = 1 for data tensors\n                    batch_size = 1\n                elif isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n\n                outs = model.train_on_batch(x, y,\n                                            sample_weight=sample_weight,\n                                            class_weight=class_weight)\n\n                outs = to_list(outs)\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n\n                batch_index += 1\n                steps_done += 1\n\n                # Epoch finished.\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = model.evaluate_generator(\n                            val_enqueuer_gen,\n                            validation_steps,\n                            workers=0)\n                    else:\n                        # No need for try/except because\n                        # data has already been validated.\n                        val_outs = model.evaluate(\n                            val_x, val_y,\n                            batch_size=batch_size,\n                            sample_weight=val_sample_weights,\n                            verbose=0)\n                    val_outs = to_list(val_outs)\n                    # Same labels assumed.\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n\n                if callback_model.stop_training:\n                    break\n\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n\n    callbacks.on_train_end()\n    return model.history\n",
                    "decorators": [],
                    "docstring": "See docstring for `Model.fit_generator`.",
                    "start_line": 21,
                    "end_line": 263,
                    "variables": {
                        "epoch": [
                            36,
                            172,
                            175,
                            249,
                            250
                        ],
                        "initial_epoch": [
                            36
                        ],
                        "do_validation": [
                            98,
                            227,
                            38,
                            40,
                            107
                        ],
                        "bool": [
                            38
                        ],
                        "validation_data": [
                            64,
                            65,
                            132,
                            133,
                            38,
                            135,
                            136,
                            141,
                            110,
                            124,
                            62,
                            63
                        ],
                        "model._make_train_function": [
                            39
                        ],
                        "model": [
                            229,
                            39,
                            263,
                            73,
                            41,
                            236,
                            77,
                            142,
                            79,
                            173,
                            145,
                            84,
                            85,
                            213,
                            89,
                            90,
                            92
                        ],
                        "model._make_test_function": [
                            41
                        ],
                        "is_sequence": [
                            164,
                            43,
                            44,
                            51,
                            152
                        ],
                        "isinstance": [
                            64,
                            65,
                            43,
                            203,
                            205,
                            111,
                            145,
                            125
                        ],
                        "generator": [
                            165,
                            167,
                            43,
                            52,
                            154,
                            159
                        ],
                        "Sequence": [
                            64,
                            65,
                            43,
                            111,
                            125
                        ],
                        "use_multiprocessing": [
                            160,
                            44,
                            114,
                            119,
                            155
                        ],
                        "workers": [
                            161,
                            108,
                            44,
                            151,
                            120
                        ],
                        "warnings.warn": [
                            45
                        ],
                        "warnings": [
                            45
                        ],
                        "UserWarning": [
                            46
                        ],
                        "steps_per_epoch": [
                            96,
                            227,
                            178,
                            50,
                            52
                        ],
                        "len": [
                            132,
                            135,
                            199,
                            115,
                            52,
                            187,
                            190,
                            127
                        ],
                        "ValueError": [
                            193,
                            67,
                            138,
                            182,
                            54
                        ],
                        "val_gen": [
                            65,
                            228,
                            108,
                            123,
                            62
                        ],
                        "hasattr": [
                            89,
                            181,
                            62,
                            63
                        ],
                        "validation_steps": [
                            231,
                            66,
                            115,
                            127
                        ],
                        "out_labels": [
                            73,
                            74,
                            243,
                            218
                        ],
                        "model.metrics_names": [
                            73
                        ],
                        "callback_metrics": [
                            74,
                            99
                        ],
                        "n": [
                            74
                        ],
                        "model.history": [
                            85,
                            77,
                            263
                        ],
                        "cbks.History": [
                            77
                        ],
                        "cbks": [
                            86,
                            82,
                            77,
                            78
                        ],
                        "_callbacks": [
                            81,
                            85,
                            78,
                            86
                        ],
                        "cbks.BaseLogger": [
                            78
                        ],
                        "model.stateful_metric_names": [
                            84,
                            79
                        ],
                        "verbose": [
                            80,
                            97
                        ],
                        "_callbacks.append": [
                            81
                        ],
                        "cbks.ProgbarLogger": [
                            82
                        ],
                        "callbacks": [
                            101,
                            262,
                            175,
                            211,
                            148,
                            85,
                            86,
                            221,
                            249,
                            93,
                            94
                        ],
                        "cbks.CallbackList": [
                            86
                        ],
                        "model.callback_model": [
                            89,
                            90
                        ],
                        "callback_model": [
                            169,
                            246,
                            90,
                            251,
                            92,
                            93
                        ],
                        "callbacks.set_model": [
                            93
                        ],
                        "callbacks.set_params": [
                            94
                        ],
                        "epochs": [
                            172,
                            95
                        ],
                        "callbacks.on_train_begin": [
                            101
                        ],
                        "enqueuer": [
                            256,
                            161,
                            162,
                            257,
                            103,
                            153,
                            158
                        ],
                        "val_enqueuer": [
                            259,
                            260,
                            104,
                            112,
                            117,
                            120,
                            122
                        ],
                        "val_data": [
                            129,
                            110,
                            111,
                            144,
                            113,
                            115,
                            147,
                            149,
                            118,
                            124,
                            125,
                            126,
                            127
                        ],
                        "OrderedEnqueuer": [
                            112,
                            153
                        ],
                        "GeneratorEnqueuer": [
                            117,
                            158
                        ],
                        "val_enqueuer.start": [
                            120
                        ],
                        "max_queue_size": [
                            121,
                            161
                        ],
                        "val_enqueuer_gen": [
                            129,
                            122,
                            126,
                            230
                        ],
                        "val_enqueuer.get": [
                            122
                        ],
                        "iter_sequence_infinite": [
                            165,
                            126
                        ],
                        "val_x": [
                            133,
                            136,
                            237,
                            142,
                            143,
                            144
                        ],
                        "val_y": [
                            133,
                            136,
                            237,
                            142,
                            143,
                            144
                        ],
                        "val_sample_weight": [
                            136,
                            134,
                            143
                        ],
                        "str": [
                            185,
                            196,
                            141
                        ],
                        "val_sample_weights": [
                            144,
                            142,
                            239
                        ],
                        "model._standardize_user_data": [
                            142
                        ],
                        "model.uses_learning_phase": [
                            145
                        ],
                        "K.learning_phase": [
                            145
                        ],
                        "K": [
                            145
                        ],
                        "int": [
                            146
                        ],
                        "cbk": [
                            148,
                            149
                        ],
                        "cbk.validation_data": [
                            149
                        ],
                        "shuffle": [
                            156
                        ],
                        "enqueuer.start": [
                            161
                        ],
                        "output_generator": [
                            162,
                            179,
                            165,
                            167
                        ],
                        "enqueuer.get": [
                            162
                        ],
                        "callback_model.stop_training": [
                            169,
                            251,
                            246
                        ],
                        "epoch_logs": [
                            249,
                            171,
                            244
                        ],
                        "m": [
                            173,
                            174
                        ],
                        "model.stateful_metric_functions": [
                            173
                        ],
                        "m.reset_states": [
                            174
                        ],
                        "callbacks.on_epoch_begin": [
                            175
                        ],
                        "steps_done": [
                            176,
                            224,
                            178,
                            227
                        ],
                        "batch_index": [
                            177,
                            209,
                            211,
                            221,
                            223
                        ],
                        "generator_output": [
                            196,
                            179,
                            181,
                            185,
                            187,
                            188,
                            190,
                            191
                        ],
                        "next": [
                            179
                        ],
                        "x": [
                            199,
                            203,
                            204,
                            205,
                            206,
                            208,
                            213,
                            188,
                            191
                        ],
                        "y": [
                            188,
                            213,
                            191
                        ],
                        "sample_weight": [
                            189,
                            214,
                            191
                        ],
                        "batch_logs": [
                            198,
                            209,
                            210,
                            211,
                            219,
                            221
                        ],
                        "batch_size": [
                            202,
                            204,
                            206,
                            238,
                            208,
                            210
                        ],
                        "list": [
                            203,
                            206
                        ],
                        "shape": [
                            204,
                            206
                        ],
                        "dict": [
                            205
                        ],
                        "x.values": [
                            206
                        ],
                        "x.shape": [
                            208
                        ],
                        "callbacks.on_batch_begin": [
                            211
                        ],
                        "outs": [
                            217,
                            218,
                            213
                        ],
                        "model.train_on_batch": [
                            213
                        ],
                        "class_weight": [
                            215
                        ],
                        "to_list": [
                            217,
                            241
                        ],
                        "l": [
                            218,
                            219,
                            244,
                            243
                        ],
                        "o": [
                            218,
                            219,
                            244,
                            243
                        ],
                        "zip": [
                            218,
                            243
                        ],
                        "callbacks.on_batch_end": [
                            221
                        ],
                        "val_outs": [
                            241,
                            243,
                            236,
                            229
                        ],
                        "model.evaluate_generator": [
                            229
                        ],
                        "model.evaluate": [
                            236
                        ],
                        "callbacks.on_epoch_end": [
                            249
                        ],
                        "enqueuer.stop": [
                            257
                        ],
                        "val_enqueuer.stop": [
                            260
                        ],
                        "callbacks.on_train_end": [
                            262
                        ]
                    },
                    "filtered_variables": {
                        "epoch": [
                            36,
                            172,
                            175,
                            249,
                            250
                        ],
                        "initial_epoch": [
                            36
                        ],
                        "do_validation": [
                            98,
                            227,
                            38,
                            40,
                            107
                        ],
                        "validation_data": [
                            64,
                            65,
                            132,
                            133,
                            38,
                            135,
                            136,
                            141,
                            110,
                            124,
                            62,
                            63
                        ],
                        "model._make_train_function": [
                            39
                        ],
                        "model": [
                            229,
                            39,
                            263,
                            73,
                            41,
                            236,
                            77,
                            142,
                            79,
                            173,
                            145,
                            84,
                            85,
                            213,
                            89,
                            90,
                            92
                        ],
                        "model._make_test_function": [
                            41
                        ],
                        "is_sequence": [
                            164,
                            43,
                            44,
                            51,
                            152
                        ],
                        "generator": [
                            165,
                            167,
                            43,
                            52,
                            154,
                            159
                        ],
                        "Sequence": [
                            64,
                            65,
                            43,
                            111,
                            125
                        ],
                        "use_multiprocessing": [
                            160,
                            44,
                            114,
                            119,
                            155
                        ],
                        "workers": [
                            161,
                            108,
                            44,
                            151,
                            120
                        ],
                        "warnings.warn": [
                            45
                        ],
                        "warnings": [
                            45
                        ],
                        "steps_per_epoch": [
                            96,
                            227,
                            178,
                            50,
                            52
                        ],
                        "val_gen": [
                            65,
                            228,
                            108,
                            123,
                            62
                        ],
                        "validation_steps": [
                            231,
                            66,
                            115,
                            127
                        ],
                        "out_labels": [
                            73,
                            74,
                            243,
                            218
                        ],
                        "model.metrics_names": [
                            73
                        ],
                        "callback_metrics": [
                            74,
                            99
                        ],
                        "n": [
                            74
                        ],
                        "model.history": [
                            85,
                            77,
                            263
                        ],
                        "cbks.History": [
                            77
                        ],
                        "cbks": [
                            86,
                            82,
                            77,
                            78
                        ],
                        "_callbacks": [
                            81,
                            85,
                            78,
                            86
                        ],
                        "cbks.BaseLogger": [
                            78
                        ],
                        "model.stateful_metric_names": [
                            84,
                            79
                        ],
                        "verbose": [
                            80,
                            97
                        ],
                        "_callbacks.append": [
                            81
                        ],
                        "cbks.ProgbarLogger": [
                            82
                        ],
                        "callbacks": [
                            101,
                            262,
                            175,
                            211,
                            148,
                            85,
                            86,
                            221,
                            249,
                            93,
                            94
                        ],
                        "cbks.CallbackList": [
                            86
                        ],
                        "model.callback_model": [
                            89,
                            90
                        ],
                        "callback_model": [
                            169,
                            246,
                            90,
                            251,
                            92,
                            93
                        ],
                        "callbacks.set_model": [
                            93
                        ],
                        "callbacks.set_params": [
                            94
                        ],
                        "epochs": [
                            172,
                            95
                        ],
                        "callbacks.on_train_begin": [
                            101
                        ],
                        "enqueuer": [
                            256,
                            161,
                            162,
                            257,
                            103,
                            153,
                            158
                        ],
                        "val_enqueuer": [
                            259,
                            260,
                            104,
                            112,
                            117,
                            120,
                            122
                        ],
                        "val_data": [
                            129,
                            110,
                            111,
                            144,
                            113,
                            115,
                            147,
                            149,
                            118,
                            124,
                            125,
                            126,
                            127
                        ],
                        "OrderedEnqueuer": [
                            112,
                            153
                        ],
                        "GeneratorEnqueuer": [
                            117,
                            158
                        ],
                        "val_enqueuer.start": [
                            120
                        ],
                        "max_queue_size": [
                            121,
                            161
                        ],
                        "val_enqueuer_gen": [
                            129,
                            122,
                            126,
                            230
                        ],
                        "val_enqueuer.get": [
                            122
                        ],
                        "iter_sequence_infinite": [
                            165,
                            126
                        ],
                        "val_x": [
                            133,
                            136,
                            237,
                            142,
                            143,
                            144
                        ],
                        "val_y": [
                            133,
                            136,
                            237,
                            142,
                            143,
                            144
                        ],
                        "val_sample_weight": [
                            136,
                            134,
                            143
                        ],
                        "val_sample_weights": [
                            144,
                            142,
                            239
                        ],
                        "model._standardize_user_data": [
                            142
                        ],
                        "model.uses_learning_phase": [
                            145
                        ],
                        "K.learning_phase": [
                            145
                        ],
                        "K": [
                            145
                        ],
                        "cbk": [
                            148,
                            149
                        ],
                        "cbk.validation_data": [
                            149
                        ],
                        "shuffle": [
                            156
                        ],
                        "enqueuer.start": [
                            161
                        ],
                        "output_generator": [
                            162,
                            179,
                            165,
                            167
                        ],
                        "enqueuer.get": [
                            162
                        ],
                        "callback_model.stop_training": [
                            169,
                            251,
                            246
                        ],
                        "epoch_logs": [
                            249,
                            171,
                            244
                        ],
                        "m": [
                            173,
                            174
                        ],
                        "model.stateful_metric_functions": [
                            173
                        ],
                        "m.reset_states": [
                            174
                        ],
                        "callbacks.on_epoch_begin": [
                            175
                        ],
                        "steps_done": [
                            176,
                            224,
                            178,
                            227
                        ],
                        "batch_index": [
                            177,
                            209,
                            211,
                            221,
                            223
                        ],
                        "generator_output": [
                            196,
                            179,
                            181,
                            185,
                            187,
                            188,
                            190,
                            191
                        ],
                        "x": [
                            199,
                            203,
                            204,
                            205,
                            206,
                            208,
                            213,
                            188,
                            191
                        ],
                        "y": [
                            188,
                            213,
                            191
                        ],
                        "sample_weight": [
                            189,
                            214,
                            191
                        ],
                        "batch_logs": [
                            198,
                            209,
                            210,
                            211,
                            219,
                            221
                        ],
                        "batch_size": [
                            202,
                            204,
                            206,
                            238,
                            208,
                            210
                        ],
                        "shape": [
                            204,
                            206
                        ],
                        "x.values": [
                            206
                        ],
                        "x.shape": [
                            208
                        ],
                        "callbacks.on_batch_begin": [
                            211
                        ],
                        "outs": [
                            217,
                            218,
                            213
                        ],
                        "model.train_on_batch": [
                            213
                        ],
                        "class_weight": [
                            215
                        ],
                        "to_list": [
                            217,
                            241
                        ],
                        "l": [
                            218,
                            219,
                            244,
                            243
                        ],
                        "o": [
                            218,
                            219,
                            244,
                            243
                        ],
                        "callbacks.on_batch_end": [
                            221
                        ],
                        "val_outs": [
                            241,
                            243,
                            236,
                            229
                        ],
                        "model.evaluate_generator": [
                            229
                        ],
                        "model.evaluate": [
                            236
                        ],
                        "callbacks.on_epoch_end": [
                            249
                        ],
                        "enqueuer.stop": [
                            257
                        ],
                        "val_enqueuer.stop": [
                            260
                        ],
                        "callbacks.on_train_end": [
                            262
                        ]
                    },
                    "diff_line_number": 43,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x1228c5410>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": "13"
                                },
                                "model._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.sequential.Sequential object at 0x122876250>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x122876250>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x122876250>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x122810990>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": "32"
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "callback_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.history": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_enqueuer_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.sequential.Sequential object at 0x122876250>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.sequential.Sequential object at 0x122876250>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.sequential.Sequential object at 0x122876250>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.sequential.Sequential object at 0x122876250>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x122bee090>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": "13"
                                },
                                "model._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x122ba4310>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x122be4e50>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": "32"
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "callback_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.history": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_enqueuer_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "epoch": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x122bee090>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": "13"
                                },
                                "model._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x122ba4310>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x122be4e50>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": "32"
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "32",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_use_sequence_api": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'acc', 'val_loss', 'val_acc']",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x122c22550>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x122cb8e10>, <keras.callbacks.History object at 0x122c22550>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x122c03b90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x122cf5e90>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x122ba4310>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x122cf5e90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x122cf5e90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x122cf5e90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x122d1f9d0>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x122cf5e50>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x122bee090>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": "13"
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "<bound method SequenceEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x122cf5e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_enqueuer_gen": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x122ca9550>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x122cf5e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method SequenceEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x122d1f9d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x122ca9950>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x122d1f9d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 0.2183877158164978, 'val_acc': 1.0, 'loss': 0.2086639392375946, 'acc': 0.992}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x122cf5e90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "32",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "32",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[-2.0783713e-01,  1.0750935e+00,  1.6342150e+00],\n         [ 2.6392055e+00,  2.9304042e+00,  1.1656756e+00],\n         [ 2.1207149e+00,  3.0131710e+00,  2.5377371e+00],\n         ...,\n         [ 1.1843039e+00,  1.9201680e+00,  1.8345100e+00],\n         [ 2.5859745e+00,  1.7151275e+00,  2.6378784e+00],\n         [ 1.6198679e+00,  1.5506989e+00,  1.3594722e+00]],\n\n        [[ 7.1758449e-01,  1.3566396e+00,  2.3198130e+00],\n         [ 1.8361199e+00,  2.7080095e+00,  1.9032062e+00],\n         [ 1.9586180e+00,  3.2447667e+00,  1.3327366e+00],\n         ...,\n         [ 1.4493848e+00,  1.5430127e+00,  3.0418837e+00],\n         [ 2.0806425e+00,  1.6993059e+00,  1.9157428e+00],\n         [ 1.6542403e+00,  2.9301264e+00,  2.1998103e+00]],\n\n        [[ 2.7066860e+00,  1.8667526e+00,  2.3633432e+00],\n         [ 2.9572968e+00,  1.9458206e+00,  1.5713048e+00],\n         [ 3.3930674e+00,  1.6797551e+00,  1.6070844e+00],\n         ...,\n         [ 1.5491219e+00,  6.2329668e-01,  2.5800567e+00],\n         [ 8.5716301e-01,  2.0689530e+00,  1.9611883e+00],\n         [ 1.5796970e+00,  4.5936736e-01,  3.1868424e+00]],\n\n        ...,\n\n        [[ 7.8768313e-01,  1.5158268e+00,  1.4813147e+00],\n         [ 1.7264440e+00,  3.3037879e+00,  1.6388944e+00],\n         [ 1.2496084e+00,  1.6124549e+00,  2.5423353e+00],\n         ...,\n         [ 2.0250096e+00,  1.4448082e+00,  2.7140589e+00],\n         [ 3.7840371e+00,  2.2092528e+00,  1.6333160e+00],\n         [ 1.8481419e+00,  2.1965289e+00,  1.8402805e+00]],\n\n        [[ 2.9664333e+00,  2.1316760e+00,  2.4106843e+00],\n         [ 2.0907309e+00,  2.3793738e+00,  9.6667105e-01],\n         [ 1.6861354e+00,  1.6720480e+00,  2.1705530e+00],\n         ...,\n         [ 3.0431094e+00,  1.5637701e+00,  2.9001145e+00],\n         [ 1.8089887e+00,  2.1542141e+00,  2.4494247e+00],\n         [ 1.8606045e+00, -5.5219654e-02,  1.8658253e+00]],\n\n        [[ 1.5662967e+00,  1.5879498e+00,  2.0735910e+00],\n         [ 7.6668882e-01,  2.2918782e+00,  1.8353183e+00],\n         [ 1.6106222e+00,  2.8840454e+00,  1.0835993e+00],\n         ...,\n         [ 2.3031757e+00,  1.0265197e+00,  2.3582270e+00],\n         [ 1.2331629e+00,  2.2609205e+00,  1.3356831e+00],\n         [ 2.2762461e+00,  2.2745833e+00,  1.5268695e+00]]],\n\n\n       [[[ 1.7957646e+00,  1.2317644e+00,  4.3678847e-01],\n         [ 1.6546299e+00,  1.8887240e+00,  4.9091721e-01],\n         [ 7.9935020e-01,  8.5091925e-01,  2.1514623e+00],\n         ...,\n         [ 4.9211320e-01,  9.6777070e-01,  1.1858555e+00],\n         [ 1.8422350e+00,  8.8132644e-01,  7.2989368e-01],\n         [ 1.1623946e+00,  8.7757367e-01,  6.9761664e-01]],\n\n        [[ 9.1036791e-01,  1.2771292e+00,  1.2448179e+00],\n         [ 6.6888016e-01,  1.3193974e+00,  3.8987303e-01],\n         [ 1.3637017e+00,  2.1000721e-01,  9.4072109e-01],\n         ...,\n         [ 1.5066246e+00,  9.3894154e-01,  1.4550344e+00],\n         [ 1.1824805e+00,  1.0173413e+00,  1.2182800e+00],\n         [ 1.5616348e+00,  8.3661580e-01,  1.1248345e+00]],\n\n        [[ 6.0662782e-01,  9.3043852e-01,  9.3818450e-01],\n         [ 1.3470377e+00,  1.4271083e+00,  7.1601495e-02],\n         [ 8.1690729e-01,  1.0243541e+00,  9.8481005e-01],\n         ...,\n         [ 1.6508211e+00,  9.8635000e-01, -6.1137718e-01],\n         [ 1.1015705e+00,  2.8954276e-01,  2.5088590e-01],\n         [ 9.5142293e-01,  6.8954241e-01,  1.3598256e-01]],\n\n        ...,\n\n        [[ 1.7353743e+00,  8.1115723e-01,  1.4101893e+00],\n         [ 3.0375496e-01,  8.0488139e-01,  1.5043489e+00],\n         [ 1.3335373e+00,  1.9164810e+00,  5.4303384e-01],\n         ...,\n         [ 1.3173124e+00, -4.6963340e-01,  6.6322482e-01],\n         [ 8.4153521e-01,  7.4419326e-01,  7.2109461e-01],\n         [ 7.8836900e-01,  9.9557376e-01,  5.3203428e-01]],\n\n        [[ 1.7960677e+00,  9.6371543e-01,  1.4680879e+00],\n         [ 1.4463661e+00,  1.7620796e+00,  2.7651954e+00],\n         [ 7.0906734e-01,  3.7377292e-01,  3.3894509e-01],\n         ...,\n         [ 1.4586000e+00,  1.6347295e+00,  8.4036630e-01],\n         [ 8.5912243e-02,  2.5988832e+00,  1.6452633e+00],\n         [ 1.8663685e+00,  3.0241494e+00, -9.3210414e-02]],\n\n        [[ 4.8021531e-01,  1.0147623e+00,  1.6300198e+00],\n         [ 4.7992152e-01,  1.2919909e+00, -1.4639641e-03],\n         [ 6.1533219e-01,  7.2623026e-01,  1.0496211e+00],\n         ...,\n         [ 3.3586180e-01,  1.1519792e+00,  6.6259468e-01],\n         [ 2.0192211e+00,  2.4142095e-01,  7.2239494e-01],\n         [ 5.9149605e-01,  5.4013968e-02,  1.3124204e+00]]],\n\n\n       [[[ 1.3841360e+00,  1.0938445e+00,  1.6286221e+00],\n         [ 1.4156270e+00,  1.4547125e+00,  1.3089206e+00],\n         [ 1.4785036e+00,  9.6497673e-01,  1.8150340e+00],\n         ...,\n         [ 1.5122024e+00, -5.9992921e-02,  6.3554180e-01],\n         [ 2.7406946e-01,  1.2611431e+00,  1.7038935e+00],\n         [ 2.2236593e+00,  1.0790454e+00,  2.3068688e+00]],\n\n        [[ 6.4111024e-01,  1.2684938e+00,  1.5167878e+00],\n         [-2.0480125e-01, -3.3168849e-01,  1.4608729e+00],\n         [ 2.0971055e+00,  4.3539852e-01,  8.4130085e-01],\n         ...,\n         [ 1.2961092e+00,  1.3144161e+00,  1.1048037e+00],\n         [ 1.8299923e+00, -5.0342226e-01,  5.9243953e-01],\n         [ 1.1060297e+00, -3.4911934e-01,  1.0541332e+00]],\n\n        [[ 1.7474110e-01,  3.3293283e-01,  1.2895299e+00],\n         [ 1.7143039e+00,  1.2176235e+00,  1.1909565e+00],\n         [ 6.8808609e-01,  9.7053301e-01,  1.8937926e+00],\n         ...,\n         [ 2.0714998e+00,  1.6486827e+00,  1.7455195e+00],\n         [ 2.2706454e+00,  4.4188988e-01,  3.8273785e-01],\n         [-1.0775423e-01,  7.2745836e-01,  1.6913574e+00]],\n\n        ...,\n\n        [[ 1.1991267e+00, -1.8429340e-01,  1.3232330e+00],\n         [ 2.4863634e+00,  1.6715473e+00, -1.8373159e-01],\n         [ 8.9553750e-01,  1.4045540e+00,  5.7890272e-01],\n         ...,\n         [ 8.2193929e-01,  9.4643641e-01,  5.8602661e-01],\n         [ 1.9965988e+00,  1.9413691e+00, -3.9535287e-01],\n         [ 9.7296315e-01,  1.6379961e+00,  1.4537182e+00]],\n\n        [[ 1.2166777e+00,  1.5112091e+00,  4.5663202e-01],\n         [ 3.2914180e-01,  1.4389485e+00,  1.1970434e+00],\n         [ 4.5249856e-01,  1.2125831e+00,  1.7039777e+00],\n         ...,\n         [ 1.1594579e+00,  1.3908660e+00,  1.7567829e+00],\n         [ 6.0723102e-01,  1.4407182e+00,  6.4759815e-01],\n         [ 2.3276250e+00,  1.8035364e+00, -4.1836709e-02]],\n\n        [[ 9.9066186e-01,  5.9907007e-01,  1.3207871e+00],\n         [ 4.6695587e-01,  1.2809891e+00,  1.1947852e+00],\n         [ 1.5556819e+00,  8.6807841e-01,  4.3991244e-01],\n         ...,\n         [ 1.2525150e+00,  1.4809012e+00,  1.7645252e+00],\n         [ 3.1635958e-01,  3.3828008e-01,  1.3427496e+00],\n         [ 1.4665048e+00,  9.2846346e-01,  1.5103046e-02]]],\n\n\n       ...,\n\n\n       [[[ 4.8666731e-01,  2.6852527e+00,  1.5580723e+00],\n         [ 1.6237441e+00,  1.5643846e+00,  2.0052474e+00],\n         [ 2.4831018e+00,  1.5172626e+00,  1.9334910e+00],\n         ...,\n         [ 2.7310579e+00,  1.5544020e+00,  2.6830471e+00],\n         [ 1.8894255e+00,  8.1385380e-01,  5.1554954e-01],\n         [ 1.4059529e+00,  2.7544990e+00,  3.1900752e+00]],\n\n        [[ 1.8720112e+00,  2.4197822e+00,  1.5159535e+00],\n         [ 8.0350262e-01,  2.1990170e+00,  1.2052040e+00],\n         [ 2.2841818e+00,  2.1507056e+00,  3.8553135e+00],\n         ...,\n         [ 2.6965508e+00,  3.2032936e+00,  2.5258029e+00],\n         [ 1.0276935e+00,  1.3689277e+00,  1.9202605e+00],\n         [ 4.0133467e+00,  3.2216949e+00,  2.1089451e+00]],\n\n        [[ 2.3178191e+00,  3.7932460e+00,  1.1037848e+00],\n         [ 2.3471043e+00,  1.8118887e+00,  1.9252098e+00],\n         [ 3.2612953e+00,  1.4374930e+00,  1.1296314e+00],\n         ...,\n         [ 1.3091115e+00,  2.4230380e+00,  5.5931145e-01],\n         [ 3.1884894e+00,  1.4828017e+00,  1.7640768e+00],\n         [ 1.7756722e+00,  1.5244697e+00,  2.6391819e+00]],\n\n        ...,\n\n        [[ 2.4693244e+00,  1.7886410e+00,  1.6255174e+00],\n         [ 1.4835643e+00,  2.4952731e+00,  2.8969204e+00],\n         [ 2.2459161e+00,  2.1666503e+00,  1.2711849e+00],\n         ...,\n         [ 3.6337011e+00,  2.4594293e+00,  1.9722610e+00],\n         [ 1.3691816e+00,  2.5661809e+00,  1.5674345e+00],\n         [ 2.1501782e+00,  2.7722118e+00,  2.0772965e+00]],\n\n        [[ 2.2194409e+00,  3.3296919e+00,  1.7108835e+00],\n         [ 1.0438716e+00,  9.9364746e-01,  1.5211312e+00],\n         [ 2.6233232e+00,  2.1774096e+00,  7.1977180e-01],\n         ...,\n         [ 1.8610467e+00,  2.6199470e+00,  4.8123169e-01],\n         [ 2.4425058e+00,  2.7224069e+00,  1.9443448e+00],\n         [ 2.4827397e+00, -7.7342272e-02,  2.1459405e+00]],\n\n        [[ 1.4660977e+00,  3.3785298e+00,  2.8685405e+00],\n         [ 2.2930090e+00,  2.3356991e+00,  2.3875580e+00],\n         [ 1.1183146e+00,  2.0987694e+00,  2.6037455e+00],\n         ...,\n         [ 1.3096046e+00,  1.6620299e+00,  1.7742975e+00],\n         [ 2.2406969e+00,  3.0037758e-01,  1.5577911e+00],\n         [ 2.1135688e+00,  3.6918666e+00,  2.7821419e+00]]],\n\n\n       [[[ 2.4036429e+00,  2.6097043e+00,  2.0411189e+00],\n         [ 3.6604931e+00,  2.1726809e+00,  3.2553134e+00],\n         [ 2.6674247e+00,  4.0423536e+00,  1.9095392e+00],\n         ...,\n         [ 3.9718218e+00,  4.8691845e+00,  2.9642932e+00],\n         [ 2.7850296e+00,  3.4522414e+00,  3.0614259e+00],\n         [ 3.6176248e+00,  2.2939200e+00,  2.9603128e+00]],\n\n        [[ 2.9986026e+00,  3.4710095e+00,  2.6324933e+00],\n         [ 2.6946266e+00,  2.7355266e+00,  1.3096682e+00],\n         [ 3.4662080e+00,  3.6506770e+00,  2.1150455e+00],\n         ...,\n         [ 4.1857381e+00,  2.1259673e+00,  1.5563967e+00],\n         [ 3.0005898e+00,  2.7635186e+00,  1.7395256e+00],\n         [ 2.0654025e+00,  3.0944760e+00,  3.4554050e+00]],\n\n        [[ 3.3610332e+00,  3.1706963e+00,  2.5502849e+00],\n         [ 1.7979978e+00,  3.3749619e+00,  3.0453966e+00],\n         [ 2.5480890e+00,  2.4005969e+00,  2.4449296e+00],\n         ...,\n         [ 3.2671368e+00,  2.5878382e+00,  4.4123502e+00],\n         [ 3.1588037e+00,  4.5751443e+00,  2.0383050e+00],\n         [ 2.1676226e+00,  2.3421900e+00,  3.8315847e+00]],\n\n        ...,\n\n        [[ 2.5893092e+00,  3.6874042e+00,  3.7192588e+00],\n         [ 3.6928167e+00,  3.7093863e+00,  3.6901176e+00],\n         [ 2.5692661e+00,  2.4935718e+00,  3.0766795e+00],\n         ...,\n         [ 3.0076599e+00,  3.4255130e+00,  4.1090431e+00],\n         [ 3.5939977e+00,  2.7485454e+00,  2.1251307e+00],\n         [ 2.6963542e+00,  3.6153522e+00,  2.1159921e+00]],\n\n        [[ 2.9859471e+00,  2.5171609e+00,  3.6431892e+00],\n         [ 2.3242106e+00,  2.7437563e+00,  2.2675166e+00],\n         [ 2.0681221e+00,  2.8897088e+00,  3.2129552e+00],\n         ...,\n         [ 9.1687244e-01,  2.1930556e+00,  2.9527385e+00],\n         [ 1.9680322e+00,  3.8104212e+00,  3.2118073e+00],\n         [ 2.2199812e+00,  3.2367864e+00,  3.8244827e+00]],\n\n        [[ 2.6878631e+00,  2.8586965e+00,  3.1212964e+00],\n         [ 3.4513130e+00,  4.8672071e+00,  4.3788695e+00],\n         [ 2.2739422e+00,  2.2552881e+00,  3.5723581e+00],\n         ...,\n         [ 4.6919627e+00,  2.9942870e+00,  2.6596777e+00],\n         [ 3.2608898e+00,  3.1821122e+00,  2.7631996e+00],\n         [ 2.9422579e+00,  2.7703168e+00,  3.2693198e+00]]],\n\n\n       [[[ 6.4266883e-02,  1.6417565e+00,  1.8218589e+00],\n         [ 1.0809414e+00,  4.4513094e-01,  2.2951970e+00],\n         [ 1.2657372e+00,  5.5813062e-01,  6.9108057e-01],\n         ...,\n         [ 1.5064549e+00,  4.2392737e-01, -1.6372459e-01],\n         [ 4.1981927e-01,  9.7729081e-01,  1.2549800e+00],\n         [ 1.6695793e+00,  1.8043005e+00, -2.3520622e-01]],\n\n        [[ 1.6905555e+00,  1.0782284e-01,  2.8853968e-01],\n         [ 7.9293168e-01,  1.2080941e+00,  1.2380389e+00],\n         [ 5.0263822e-01,  7.1621192e-01,  2.2694252e+00],\n         ...,\n         [ 6.5780127e-01,  7.6615971e-01,  4.8970011e-01],\n         [ 1.3958558e-01,  1.9391998e+00,  1.5547599e+00],\n         [ 1.2159492e+00,  1.3790197e+00,  3.1056800e+00]],\n\n        [[ 9.2136919e-01,  1.2778349e+00,  8.9985800e-01],\n         [ 6.0262364e-01,  2.5469599e+00,  2.0309858e+00],\n         [ 1.5526910e-01,  9.5711005e-01,  1.1931071e+00],\n         ...,\n         [ 1.9840431e+00,  3.7286696e-01,  8.8222694e-01],\n         [ 4.5978689e-01,  1.4362721e+00,  6.7101568e-01],\n         [ 3.8659129e-01,  1.9808254e+00,  5.6224662e-01]],\n\n        ...,\n\n        [[ 8.4851646e-01,  2.3867233e-01,  4.2633983e-01],\n         [ 9.4293761e-01,  1.3795356e+00,  4.9437407e-01],\n         [ 8.8961369e-01,  1.1301235e+00,  9.2443192e-01],\n         ...,\n         [ 2.2495234e+00,  1.4224045e+00,  3.9622962e-01],\n         [ 3.3005780e-01,  9.1085309e-01,  7.1894115e-01],\n         [ 1.0454298e+00,  3.2243189e-01,  2.0571744e+00]],\n\n        [[-2.1498176e-01,  3.9051738e-01,  1.2172793e+00],\n         [ 6.4442384e-01,  1.3800077e+00,  7.0094025e-01],\n         [ 1.1799738e+00,  9.1567749e-01,  1.3493016e-01],\n         ...,\n         [ 9.4834417e-01,  6.1437988e-01,  2.4010165e+00],\n         [ 1.5645239e+00,  1.4770350e+00,  1.0307492e+00],\n         [ 1.2915124e+00,  3.1458157e-01,  2.2902348e+00]],\n\n        [[ 7.8106374e-01,  9.1026092e-01,  1.5952584e-01],\n         [ 1.3345450e+00,  7.5658572e-01,  1.4899716e+00],\n         [ 1.0551201e+00,  8.6878431e-01,  2.1600697e+00],\n         ...,\n         [ 4.6978986e-01,  4.9157906e-01, -1.2603866e-01],\n         [ 4.7572055e-01,  1.7610561e+00,  7.2715384e-01],\n         [ 7.8616196e-01,  1.2455937e+00,  1.4049648e+00]]]],\n      dtype=float32), array([[0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[-2.0783713e-01,  1.0750935e+00,  1.6342150e+00],\n         [ 2.6392055e+00,  2.9304042e+00,  1.1656756e+00],\n         [ 2.1207149e+00,  3.0131710e+00,  2.5377371e+00],\n         ...,\n         [ 1.1843039e+00,  1.9201680e+00,  1.8345100e+00],\n         [ 2.5859745e+00,  1.7151275e+00,  2.6378784e+00],\n         [ 1.6198679e+00,  1.5506989e+00,  1.3594722e+00]],\n\n        [[ 7.1758449e-01,  1.3566396e+00,  2.3198130e+00],\n         [ 1.8361199e+00,  2.7080095e+00,  1.9032062e+00],\n         [ 1.9586180e+00,  3.2447667e+00,  1.3327366e+00],\n         ...,\n         [ 1.4493848e+00,  1.5430127e+00,  3.0418837e+00],\n         [ 2.0806425e+00,  1.6993059e+00,  1.9157428e+00],\n         [ 1.6542403e+00,  2.9301264e+00,  2.1998103e+00]],\n\n        [[ 2.7066860e+00,  1.8667526e+00,  2.3633432e+00],\n         [ 2.9572968e+00,  1.9458206e+00,  1.5713048e+00],\n         [ 3.3930674e+00,  1.6797551e+00,  1.6070844e+00],\n         ...,\n         [ 1.5491219e+00,  6.2329668e-01,  2.5800567e+00],\n         [ 8.5716301e-01,  2.0689530e+00,  1.9611883e+00],\n         [ 1.5796970e+00,  4.5936736e-01,  3.1868424e+00]],\n\n        ...,\n\n        [[ 7.8768313e-01,  1.5158268e+00,  1.4813147e+00],\n         [ 1.7264440e+00,  3.3037879e+00,  1.6388944e+00],\n         [ 1.2496084e+00,  1.6124549e+00,  2.5423353e+00],\n         ...,\n         [ 2.0250096e+00,  1.4448082e+00,  2.7140589e+00],\n         [ 3.7840371e+00,  2.2092528e+00,  1.6333160e+00],\n         [ 1.8481419e+00,  2.1965289e+00,  1.8402805e+00]],\n\n        [[ 2.9664333e+00,  2.1316760e+00,  2.4106843e+00],\n         [ 2.0907309e+00,  2.3793738e+00,  9.6667105e-01],\n         [ 1.6861354e+00,  1.6720480e+00,  2.1705530e+00],\n         ...,\n         [ 3.0431094e+00,  1.5637701e+00,  2.9001145e+00],\n         [ 1.8089887e+00,  2.1542141e+00,  2.4494247e+00],\n         [ 1.8606045e+00, -5.5219654e-02,  1.8658253e+00]],\n\n        [[ 1.5662967e+00,  1.5879498e+00,  2.0735910e+00],\n         [ 7.6668882e-01,  2.2918782e+00,  1.8353183e+00],\n         [ 1.6106222e+00,  2.8840454e+00,  1.0835993e+00],\n         ...,\n         [ 2.3031757e+00,  1.0265197e+00,  2.3582270e+00],\n         [ 1.2331629e+00,  2.2609205e+00,  1.3356831e+00],\n         [ 2.2762461e+00,  2.2745833e+00,  1.5268695e+00]]],\n\n\n       [[[ 1.7957646e+00,  1.2317644e+00,  4.3678847e-01],\n         [ 1.6546299e+00,  1.8887240e+00,  4.9091721e-01],\n         [ 7.9935020e-01,  8.5091925e-01,  2.1514623e+00],\n         ...,\n         [ 4.9211320e-01,  9.6777070e-01,  1.1858555e+00],\n         [ 1.8422350e+00,  8.8132644e-01,  7.2989368e-01],\n         [ 1.1623946e+00,  8.7757367e-01,  6.9761664e-01]],\n\n        [[ 9.1036791e-01,  1.2771292e+00,  1.2448179e+00],\n         [ 6.6888016e-01,  1.3193974e+00,  3.8987303e-01],\n         [ 1.3637017e+00,  2.1000721e-01,  9.4072109e-01],\n         ...,\n         [ 1.5066246e+00,  9.3894154e-01,  1.4550344e+00],\n         [ 1.1824805e+00,  1.0173413e+00,  1.2182800e+00],\n         [ 1.5616348e+00,  8.3661580e-01,  1.1248345e+00]],\n\n        [[ 6.0662782e-01,  9.3043852e-01,  9.3818450e-01],\n         [ 1.3470377e+00,  1.4271083e+00,  7.1601495e-02],\n         [ 8.1690729e-01,  1.0243541e+00,  9.8481005e-01],\n         ...,\n         [ 1.6508211e+00,  9.8635000e-01, -6.1137718e-01],\n         [ 1.1015705e+00,  2.8954276e-01,  2.5088590e-01],\n         [ 9.5142293e-01,  6.8954241e-01,  1.3598256e-01]],\n\n        ...,\n\n        [[ 1.7353743e+00,  8.1115723e-01,  1.4101893e+00],\n         [ 3.0375496e-01,  8.0488139e-01,  1.5043489e+00],\n         [ 1.3335373e+00,  1.9164810e+00,  5.4303384e-01],\n         ...,\n         [ 1.3173124e+00, -4.6963340e-01,  6.6322482e-01],\n         [ 8.4153521e-01,  7.4419326e-01,  7.2109461e-01],\n         [ 7.8836900e-01,  9.9557376e-01,  5.3203428e-01]],\n\n        [[ 1.7960677e+00,  9.6371543e-01,  1.4680879e+00],\n         [ 1.4463661e+00,  1.7620796e+00,  2.7651954e+00],\n         [ 7.0906734e-01,  3.7377292e-01,  3.3894509e-01],\n         ...,\n         [ 1.4586000e+00,  1.6347295e+00,  8.4036630e-01],\n         [ 8.5912243e-02,  2.5988832e+00,  1.6452633e+00],\n         [ 1.8663685e+00,  3.0241494e+00, -9.3210414e-02]],\n\n        [[ 4.8021531e-01,  1.0147623e+00,  1.6300198e+00],\n         [ 4.7992152e-01,  1.2919909e+00, -1.4639641e-03],\n         [ 6.1533219e-01,  7.2623026e-01,  1.0496211e+00],\n         ...,\n         [ 3.3586180e-01,  1.1519792e+00,  6.6259468e-01],\n         [ 2.0192211e+00,  2.4142095e-01,  7.2239494e-01],\n         [ 5.9149605e-01,  5.4013968e-02,  1.3124204e+00]]],\n\n\n       [[[ 1.3841360e+00,  1.0938445e+00,  1.6286221e+00],\n         [ 1.4156270e+00,  1.4547125e+00,  1.3089206e+00],\n         [ 1.4785036e+00,  9.6497673e-01,  1.8150340e+00],\n         ...,\n         [ 1.5122024e+00, -5.9992921e-02,  6.3554180e-01],\n         [ 2.7406946e-01,  1.2611431e+00,  1.7038935e+00],\n         [ 2.2236593e+00,  1.0790454e+00,  2.3068688e+00]],\n\n        [[ 6.4111024e-01,  1.2684938e+00,  1.5167878e+00],\n         [-2.0480125e-01, -3.3168849e-01,  1.4608729e+00],\n         [ 2.0971055e+00,  4.3539852e-01,  8.4130085e-01],\n         ...,\n         [ 1.2961092e+00,  1.3144161e+00,  1.1048037e+00],\n         [ 1.8299923e+00, -5.0342226e-01,  5.9243953e-01],\n         [ 1.1060297e+00, -3.4911934e-01,  1.0541332e+00]],\n\n        [[ 1.7474110e-01,  3.3293283e-01,  1.2895299e+00],\n         [ 1.7143039e+00,  1.2176235e+00,  1.1909565e+00],\n         [ 6.8808609e-01,  9.7053301e-01,  1.8937926e+00],\n         ...,\n         [ 2.0714998e+00,  1.6486827e+00,  1.7455195e+00],\n         [ 2.2706454e+00,  4.4188988e-01,  3.8273785e-01],\n         [-1.0775423e-01,  7.2745836e-01,  1.6913574e+00]],\n\n        ...,\n\n        [[ 1.1991267e+00, -1.8429340e-01,  1.3232330e+00],\n         [ 2.4863634e+00,  1.6715473e+00, -1.8373159e-01],\n         [ 8.9553750e-01,  1.4045540e+00,  5.7890272e-01],\n         ...,\n         [ 8.2193929e-01,  9.4643641e-01,  5.8602661e-01],\n         [ 1.9965988e+00,  1.9413691e+00, -3.9535287e-01],\n         [ 9.7296315e-01,  1.6379961e+00,  1.4537182e+00]],\n\n        [[ 1.2166777e+00,  1.5112091e+00,  4.5663202e-01],\n         [ 3.2914180e-01,  1.4389485e+00,  1.1970434e+00],\n         [ 4.5249856e-01,  1.2125831e+00,  1.7039777e+00],\n         ...,\n         [ 1.1594579e+00,  1.3908660e+00,  1.7567829e+00],\n         [ 6.0723102e-01,  1.4407182e+00,  6.4759815e-01],\n         [ 2.3276250e+00,  1.8035364e+00, -4.1836709e-02]],\n\n        [[ 9.9066186e-01,  5.9907007e-01,  1.3207871e+00],\n         [ 4.6695587e-01,  1.2809891e+00,  1.1947852e+00],\n         [ 1.5556819e+00,  8.6807841e-01,  4.3991244e-01],\n         ...,\n         [ 1.2525150e+00,  1.4809012e+00,  1.7645252e+00],\n         [ 3.1635958e-01,  3.3828008e-01,  1.3427496e+00],\n         [ 1.4665048e+00,  9.2846346e-01,  1.5103046e-02]]],\n\n\n       ...,\n\n\n       [[[ 4.8666731e-01,  2.6852527e+00,  1.5580723e+00],\n         [ 1.6237441e+00,  1.5643846e+00,  2.0052474e+00],\n         [ 2.4831018e+00,  1.5172626e+00,  1.9334910e+00],\n         ...,\n         [ 2.7310579e+00,  1.5544020e+00,  2.6830471e+00],\n         [ 1.8894255e+00,  8.1385380e-01,  5.1554954e-01],\n         [ 1.4059529e+00,  2.7544990e+00,  3.1900752e+00]],\n\n        [[ 1.8720112e+00,  2.4197822e+00,  1.5159535e+00],\n         [ 8.0350262e-01,  2.1990170e+00,  1.2052040e+00],\n         [ 2.2841818e+00,  2.1507056e+00,  3.8553135e+00],\n         ...,\n         [ 2.6965508e+00,  3.2032936e+00,  2.5258029e+00],\n         [ 1.0276935e+00,  1.3689277e+00,  1.9202605e+00],\n         [ 4.0133467e+00,  3.2216949e+00,  2.1089451e+00]],\n\n        [[ 2.3178191e+00,  3.7932460e+00,  1.1037848e+00],\n         [ 2.3471043e+00,  1.8118887e+00,  1.9252098e+00],\n         [ 3.2612953e+00,  1.4374930e+00,  1.1296314e+00],\n         ...,\n         [ 1.3091115e+00,  2.4230380e+00,  5.5931145e-01],\n         [ 3.1884894e+00,  1.4828017e+00,  1.7640768e+00],\n         [ 1.7756722e+00,  1.5244697e+00,  2.6391819e+00]],\n\n        ...,\n\n        [[ 2.4693244e+00,  1.7886410e+00,  1.6255174e+00],\n         [ 1.4835643e+00,  2.4952731e+00,  2.8969204e+00],\n         [ 2.2459161e+00,  2.1666503e+00,  1.2711849e+00],\n         ...,\n         [ 3.6337011e+00,  2.4594293e+00,  1.9722610e+00],\n         [ 1.3691816e+00,  2.5661809e+00,  1.5674345e+00],\n         [ 2.1501782e+00,  2.7722118e+00,  2.0772965e+00]],\n\n        [[ 2.2194409e+00,  3.3296919e+00,  1.7108835e+00],\n         [ 1.0438716e+00,  9.9364746e-01,  1.5211312e+00],\n         [ 2.6233232e+00,  2.1774096e+00,  7.1977180e-01],\n         ...,\n         [ 1.8610467e+00,  2.6199470e+00,  4.8123169e-01],\n         [ 2.4425058e+00,  2.7224069e+00,  1.9443448e+00],\n         [ 2.4827397e+00, -7.7342272e-02,  2.1459405e+00]],\n\n        [[ 1.4660977e+00,  3.3785298e+00,  2.8685405e+00],\n         [ 2.2930090e+00,  2.3356991e+00,  2.3875580e+00],\n         [ 1.1183146e+00,  2.0987694e+00,  2.6037455e+00],\n         ...,\n         [ 1.3096046e+00,  1.6620299e+00,  1.7742975e+00],\n         [ 2.2406969e+00,  3.0037758e-01,  1.5577911e+00],\n         [ 2.1135688e+00,  3.6918666e+00,  2.7821419e+00]]],\n\n\n       [[[ 2.4036429e+00,  2.6097043e+00,  2.0411189e+00],\n         [ 3.6604931e+00,  2.1726809e+00,  3.2553134e+00],\n         [ 2.6674247e+00,  4.0423536e+00,  1.9095392e+00],\n         ...,\n         [ 3.9718218e+00,  4.8691845e+00,  2.9642932e+00],\n         [ 2.7850296e+00,  3.4522414e+00,  3.0614259e+00],\n         [ 3.6176248e+00,  2.2939200e+00,  2.9603128e+00]],\n\n        [[ 2.9986026e+00,  3.4710095e+00,  2.6324933e+00],\n         [ 2.6946266e+00,  2.7355266e+00,  1.3096682e+00],\n         [ 3.4662080e+00,  3.6506770e+00,  2.1150455e+00],\n         ...,\n         [ 4.1857381e+00,  2.1259673e+00,  1.5563967e+00],\n         [ 3.0005898e+00,  2.7635186e+00,  1.7395256e+00],\n         [ 2.0654025e+00,  3.0944760e+00,  3.4554050e+00]],\n\n        [[ 3.3610332e+00,  3.1706963e+00,  2.5502849e+00],\n         [ 1.7979978e+00,  3.3749619e+00,  3.0453966e+00],\n         [ 2.5480890e+00,  2.4005969e+00,  2.4449296e+00],\n         ...,\n         [ 3.2671368e+00,  2.5878382e+00,  4.4123502e+00],\n         [ 3.1588037e+00,  4.5751443e+00,  2.0383050e+00],\n         [ 2.1676226e+00,  2.3421900e+00,  3.8315847e+00]],\n\n        ...,\n\n        [[ 2.5893092e+00,  3.6874042e+00,  3.7192588e+00],\n         [ 3.6928167e+00,  3.7093863e+00,  3.6901176e+00],\n         [ 2.5692661e+00,  2.4935718e+00,  3.0766795e+00],\n         ...,\n         [ 3.0076599e+00,  3.4255130e+00,  4.1090431e+00],\n         [ 3.5939977e+00,  2.7485454e+00,  2.1251307e+00],\n         [ 2.6963542e+00,  3.6153522e+00,  2.1159921e+00]],\n\n        [[ 2.9859471e+00,  2.5171609e+00,  3.6431892e+00],\n         [ 2.3242106e+00,  2.7437563e+00,  2.2675166e+00],\n         [ 2.0681221e+00,  2.8897088e+00,  3.2129552e+00],\n         ...,\n         [ 9.1687244e-01,  2.1930556e+00,  2.9527385e+00],\n         [ 1.9680322e+00,  3.8104212e+00,  3.2118073e+00],\n         [ 2.2199812e+00,  3.2367864e+00,  3.8244827e+00]],\n\n        [[ 2.6878631e+00,  2.8586965e+00,  3.1212964e+00],\n         [ 3.4513130e+00,  4.8672071e+00,  4.3788695e+00],\n         [ 2.2739422e+00,  2.2552881e+00,  3.5723581e+00],\n         ...,\n         [ 4.6919627e+00,  2.9942870e+00,  2.6596777e+00],\n         [ 3.2608898e+00,  3.1821122e+00,  2.7631996e+00],\n         [ 2.9422579e+00,  2.7703168e+00,  3.2693198e+00]]],\n\n\n       [[[ 6.4266883e-02,  1.6417565e+00,  1.8218589e+00],\n         [ 1.0809414e+00,  4.4513094e-01,  2.2951970e+00],\n         [ 1.2657372e+00,  5.5813062e-01,  6.9108057e-01],\n         ...,\n         [ 1.5064549e+00,  4.2392737e-01, -1.6372459e-01],\n         [ 4.1981927e-01,  9.7729081e-01,  1.2549800e+00],\n         [ 1.6695793e+00,  1.8043005e+00, -2.3520622e-01]],\n\n        [[ 1.6905555e+00,  1.0782284e-01,  2.8853968e-01],\n         [ 7.9293168e-01,  1.2080941e+00,  1.2380389e+00],\n         [ 5.0263822e-01,  7.1621192e-01,  2.2694252e+00],\n         ...,\n         [ 6.5780127e-01,  7.6615971e-01,  4.8970011e-01],\n         [ 1.3958558e-01,  1.9391998e+00,  1.5547599e+00],\n         [ 1.2159492e+00,  1.3790197e+00,  3.1056800e+00]],\n\n        [[ 9.2136919e-01,  1.2778349e+00,  8.9985800e-01],\n         [ 6.0262364e-01,  2.5469599e+00,  2.0309858e+00],\n         [ 1.5526910e-01,  9.5711005e-01,  1.1931071e+00],\n         ...,\n         [ 1.9840431e+00,  3.7286696e-01,  8.8222694e-01],\n         [ 4.5978689e-01,  1.4362721e+00,  6.7101568e-01],\n         [ 3.8659129e-01,  1.9808254e+00,  5.6224662e-01]],\n\n        ...,\n\n        [[ 8.4851646e-01,  2.3867233e-01,  4.2633983e-01],\n         [ 9.4293761e-01,  1.3795356e+00,  4.9437407e-01],\n         [ 8.8961369e-01,  1.1301235e+00,  9.2443192e-01],\n         ...,\n         [ 2.2495234e+00,  1.4224045e+00,  3.9622962e-01],\n         [ 3.3005780e-01,  9.1085309e-01,  7.1894115e-01],\n         [ 1.0454298e+00,  3.2243189e-01,  2.0571744e+00]],\n\n        [[-2.1498176e-01,  3.9051738e-01,  1.2172793e+00],\n         [ 6.4442384e-01,  1.3800077e+00,  7.0094025e-01],\n         [ 1.1799738e+00,  9.1567749e-01,  1.3493016e-01],\n         ...,\n         [ 9.4834417e-01,  6.1437988e-01,  2.4010165e+00],\n         [ 1.5645239e+00,  1.4770350e+00,  1.0307492e+00],\n         [ 1.2915124e+00,  3.1458157e-01,  2.2902348e+00]],\n\n        [[ 7.8106374e-01,  9.1026092e-01,  1.5952584e-01],\n         [ 1.3345450e+00,  7.5658572e-01,  1.4899716e+00],\n         [ 1.0551201e+00,  8.6878431e-01,  2.1600697e+00],\n         ...,\n         [ 4.6978986e-01,  4.9157906e-01, -1.2603866e-01],\n         [ 4.7572055e-01,  1.7610561e+00,  7.2715384e-01],\n         [ 7.8616196e-01,  1.2455937e+00,  1.4049648e+00]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "y": {
                                    "variable_value": "array([[0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "16"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 31, 'size': 16, 'loss': 0.18024331, 'acc': 1.0}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "batch_size": {
                                    "variable_value": "16",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(16, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x122cf5e90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.18024331, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'acc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "o": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x122cf5e90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[0.2183877158164978, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.sequential.Sequential object at 0x122ba4310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x122cf5e90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method SequenceEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x122d1f9d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "<bound method SequenceEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x122cf5e50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x122cf5e90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "evaluate_generator",
                    "function_code": "def evaluate_generator(model, generator,\n                       steps=None,\n                       max_queue_size=10,\n                       workers=1,\n                       use_multiprocessing=False,\n                       verbose=0):\n    \"\"\"See docstring for `Model.evaluate_generator`.\"\"\"\n    model._make_test_function()\n\n    if hasattr(model, 'metrics'):\n        for m in model.stateful_metric_functions:\n            m.reset_states()\n        stateful_metric_indices = [\n            i for i, name in enumerate(model.metrics_names)\n            if str(name) in model.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n\n    steps_done = 0\n    outs_per_batch = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            outs = model.test_on_batch(x, y, sample_weight=sample_weight)\n            outs = to_list(outs)\n            outs_per_batch.append(outs)\n\n            if x is None or len(x) == 0:\n                # Handle data tensors support when no input given\n                # step-size = 1 for data tensors\n                batch_size = 1\n            elif isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. '\n                                 'Batches should contain '\n                                 'at least one item.')\n            steps_done += 1\n            batch_sizes.append(batch_size)\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    averages = []\n    for i in range(len(outs)):\n        if i not in stateful_metric_indices:\n            averages.append(np.average([out[i] for out in outs_per_batch],\n                                       weights=batch_sizes))\n        else:\n            averages.append(np.float64(outs_per_batch[-1][i]))\n    return unpack_singleton(averages)\n",
                    "decorators": [],
                    "docstring": "See docstring for `Model.evaluate_generator`.",
                    "start_line": 266,
                    "end_line": 376,
                    "variables": {
                        "model._make_test_function": [
                            273
                        ],
                        "model": [
                            273,
                            275,
                            276,
                            342,
                            279,
                            280
                        ],
                        "hasattr": [
                            275,
                            327
                        ],
                        "m": [
                            276,
                            277
                        ],
                        "model.stateful_metric_functions": [
                            276
                        ],
                        "m.reset_states": [
                            277
                        ],
                        "stateful_metric_indices": [
                            282,
                            371,
                            278
                        ],
                        "i": [
                            370,
                            371,
                            372,
                            375,
                            279
                        ],
                        "name": [
                            280,
                            279
                        ],
                        "enumerate": [
                            279
                        ],
                        "model.metrics_names": [
                            279
                        ],
                        "str": [
                            280,
                            331,
                            341
                        ],
                        "model.stateful_metric_names": [
                            280
                        ],
                        "steps_done": [
                            360,
                            363,
                            284,
                            325
                        ],
                        "outs_per_batch": [
                            344,
                            372,
                            285,
                            375
                        ],
                        "batch_sizes": [
                            361,
                            373,
                            286
                        ],
                        "is_sequence": [
                            288,
                            295,
                            306,
                            317,
                            287
                        ],
                        "isinstance": [
                            352,
                            350,
                            287
                        ],
                        "generator": [
                            320,
                            296,
                            308,
                            312,
                            318,
                            287
                        ],
                        "Sequence": [
                            287
                        ],
                        "use_multiprocessing": [
                            288,
                            313,
                            309
                        ],
                        "workers": [
                            288,
                            305,
                            314
                        ],
                        "warnings.warn": [
                            289
                        ],
                        "warnings": [
                            289
                        ],
                        "UserWarning": [
                            290
                        ],
                        "steps": [
                            296,
                            323,
                            325,
                            294
                        ],
                        "len": [
                            296,
                            332,
                            335,
                            370,
                            346
                        ],
                        "ValueError": [
                            328,
                            298,
                            357,
                            338
                        ],
                        "enqueuer": [
                            302,
                            366,
                            367,
                            307,
                            311,
                            314,
                            315
                        ],
                        "OrderedEnqueuer": [
                            307
                        ],
                        "GeneratorEnqueuer": [
                            311
                        ],
                        "enqueuer.start": [
                            314
                        ],
                        "max_queue_size": [
                            314
                        ],
                        "output_generator": [
                            320,
                            326,
                            315,
                            318
                        ],
                        "enqueuer.get": [
                            315
                        ],
                        "iter_sequence_infinite": [
                            318
                        ],
                        "verbose": [
                            322,
                            362
                        ],
                        "progbar": [
                            363,
                            323
                        ],
                        "Progbar": [
                            323
                        ],
                        "generator_output": [
                            326,
                            327,
                            331,
                            332,
                            333,
                            335,
                            336,
                            341
                        ],
                        "next": [
                            326
                        ],
                        "x": [
                            352,
                            353,
                            355,
                            333,
                            336,
                            342,
                            346,
                            350,
                            351
                        ],
                        "y": [
                            336,
                            333,
                            342
                        ],
                        "sample_weight": [
                            336,
                            342,
                            334
                        ],
                        "outs": [
                            344,
                            370,
                            342,
                            343
                        ],
                        "model.test_on_batch": [
                            342
                        ],
                        "to_list": [
                            343
                        ],
                        "outs_per_batch.append": [
                            344
                        ],
                        "batch_size": [
                            353,
                            355,
                            356,
                            361,
                            349,
                            351
                        ],
                        "list": [
                            353,
                            350
                        ],
                        "shape": [
                            353,
                            351
                        ],
                        "dict": [
                            352
                        ],
                        "x.values": [
                            353
                        ],
                        "x.shape": [
                            355
                        ],
                        "batch_sizes.append": [
                            361
                        ],
                        "progbar.update": [
                            363
                        ],
                        "enqueuer.stop": [
                            367
                        ],
                        "averages": [
                            376,
                            369,
                            372,
                            375
                        ],
                        "range": [
                            370
                        ],
                        "averages.append": [
                            372,
                            375
                        ],
                        "np.average": [
                            372
                        ],
                        "np": [
                            372,
                            375
                        ],
                        "out": [
                            372
                        ],
                        "np.float64": [
                            375
                        ],
                        "unpack_singleton": [
                            376
                        ]
                    },
                    "filtered_variables": {
                        "model._make_test_function": [
                            273
                        ],
                        "model": [
                            273,
                            275,
                            276,
                            342,
                            279,
                            280
                        ],
                        "m": [
                            276,
                            277
                        ],
                        "model.stateful_metric_functions": [
                            276
                        ],
                        "m.reset_states": [
                            277
                        ],
                        "stateful_metric_indices": [
                            282,
                            371,
                            278
                        ],
                        "i": [
                            370,
                            371,
                            372,
                            375,
                            279
                        ],
                        "name": [
                            280,
                            279
                        ],
                        "model.metrics_names": [
                            279
                        ],
                        "model.stateful_metric_names": [
                            280
                        ],
                        "steps_done": [
                            360,
                            363,
                            284,
                            325
                        ],
                        "outs_per_batch": [
                            344,
                            372,
                            285,
                            375
                        ],
                        "batch_sizes": [
                            361,
                            373,
                            286
                        ],
                        "is_sequence": [
                            288,
                            295,
                            306,
                            317,
                            287
                        ],
                        "generator": [
                            320,
                            296,
                            308,
                            312,
                            318,
                            287
                        ],
                        "Sequence": [
                            287
                        ],
                        "use_multiprocessing": [
                            288,
                            313,
                            309
                        ],
                        "workers": [
                            288,
                            305,
                            314
                        ],
                        "warnings.warn": [
                            289
                        ],
                        "warnings": [
                            289
                        ],
                        "steps": [
                            296,
                            323,
                            325,
                            294
                        ],
                        "enqueuer": [
                            302,
                            366,
                            367,
                            307,
                            311,
                            314,
                            315
                        ],
                        "OrderedEnqueuer": [
                            307
                        ],
                        "GeneratorEnqueuer": [
                            311
                        ],
                        "enqueuer.start": [
                            314
                        ],
                        "max_queue_size": [
                            314
                        ],
                        "output_generator": [
                            320,
                            326,
                            315,
                            318
                        ],
                        "enqueuer.get": [
                            315
                        ],
                        "iter_sequence_infinite": [
                            318
                        ],
                        "verbose": [
                            322,
                            362
                        ],
                        "progbar": [
                            363,
                            323
                        ],
                        "Progbar": [
                            323
                        ],
                        "generator_output": [
                            326,
                            327,
                            331,
                            332,
                            333,
                            335,
                            336,
                            341
                        ],
                        "x": [
                            352,
                            353,
                            355,
                            333,
                            336,
                            342,
                            346,
                            350,
                            351
                        ],
                        "y": [
                            336,
                            333,
                            342
                        ],
                        "sample_weight": [
                            336,
                            342,
                            334
                        ],
                        "outs": [
                            344,
                            370,
                            342,
                            343
                        ],
                        "model.test_on_batch": [
                            342
                        ],
                        "to_list": [
                            343
                        ],
                        "outs_per_batch.append": [
                            344
                        ],
                        "batch_size": [
                            353,
                            355,
                            356,
                            361,
                            349,
                            351
                        ],
                        "shape": [
                            353,
                            351
                        ],
                        "x.values": [
                            353
                        ],
                        "x.shape": [
                            355
                        ],
                        "batch_sizes.append": [
                            361
                        ],
                        "progbar.update": [
                            363
                        ],
                        "enqueuer.stop": [
                            367
                        ],
                        "averages": [
                            376,
                            369,
                            372,
                            375
                        ],
                        "averages.append": [
                            372,
                            375
                        ],
                        "np.average": [
                            372
                        ],
                        "np": [
                            372,
                            375
                        ],
                        "out": [
                            372
                        ],
                        "np.float64": [
                            375
                        ],
                        "unpack_singleton": [
                            376
                        ]
                    },
                    "diff_line_number": 287,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.9566163, 0.375], [1.1578946, 0.375], [1.2101637, 0.1875], [1.194804, 0.125], [1.0874251, 0.25], [1.0473393, 0.3125], [1.2200203, 0.1875], [0.9486003, 0.4375], [1.1913218, 0.1875], [1.1374615, 0.25], [1.2052865, 0.1875], [1.1749692, 0.1875], [1.1060343, 0.25]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 0.27930123,  0.51701045,  1.121421  ],\n         [ 1.7378482 ,  1.2936478 ,  0.09241625],\n         [ 1.0757035 ,  0.9990705 ,  0.736592  ],\n         ...,\n         [ 2.1947255 ,  0.7822953 ,  1.6028876 ],\n         [ 2.192667  ,  1.0491983 ,  0.39155903],\n         [ 0.6721133 ,  1.4333218 ,  1.2851721 ]],\n\n        [[ 1.3300419 ,  1.6132137 ,  0.14156623],\n         [ 0.21886279,  1.120216  ,  0.130493  ],\n         [ 0.39705142,  1.5517795 ,  0.5674231 ],\n         ...,\n         [ 1.1184225 ,  1.7839347 ,  0.02099802],\n         [ 0.6947166 ,  1.0923285 ,  1.1551178 ],\n         [ 1.7928094 ,  1.1121796 ,  1.6269764 ]],\n\n        [[ 1.8897268 ,  1.8797019 ,  0.91248167],\n         [ 1.1621151 ,  0.9524418 ,  1.6609601 ],\n         [ 0.7712218 ,  0.7674996 ,  1.6327854 ],\n         ...,\n         [ 1.6288769 ,  2.107439  ,  0.7449814 ],\n         [ 0.93444103,  1.6124965 ,  0.7211259 ],\n         [ 1.1492132 , -0.105069  ,  0.88064367]],\n\n        ...,\n\n        [[ 0.42134476,  0.46491686,  0.8143006 ],\n         [ 1.002698  ,  1.1941226 ,  1.3215286 ],\n         [-0.23529923,  0.21553582,  0.10865206],\n         ...,\n         [ 2.4700017 ,  2.085536  ,  0.33375272],\n         [ 1.3412582 ,  0.26481822,  0.6119415 ],\n         [ 1.1392329 ,  0.5443277 ,  2.0621772 ]],\n\n        [[ 1.1585965 ,  1.7210947 ,  1.9797134 ],\n         [ 1.4724011 ,  0.39955267,  1.1378567 ],\n         [ 0.56858164, -0.9554278 ,  0.73512685],\n         ...,\n         [ 0.74531084,  0.36886147,  1.0032165 ],\n         [ 0.8333059 ,  1.1410255 ,  0.70057833],\n         [ 1.4575503 ,  1.1127222 ,  1.3041878 ]],\n\n        [[ 1.423077  ,  1.4069995 ,  1.1741158 ],\n         [-0.87458587,  1.9609733 ,  1.2762982 ],\n         [ 0.60232466,  1.0492238 ,  0.6436236 ],\n         ...,\n         [ 1.5556448 ,  1.3989506 ,  1.5365872 ],\n         [ 1.2152296 ,  1.0475322 ,  1.5672243 ],\n         [ 0.70120275,  1.866123  , -0.61459607]]],\n\n\n       [[[ 2.8533168 ,  3.4711475 ,  3.2542713 ],\n         [ 3.0257301 ,  2.8017192 ,  3.2378516 ],\n         [ 2.3336139 ,  4.0583873 ,  3.0100985 ],\n         ...,\n         [ 2.2304668 ,  2.6700146 ,  3.486913  ],\n         [ 3.701193  ,  3.1957428 ,  2.9629722 ],\n         [ 3.802664  ,  4.326606  ,  2.8197172 ]],\n\n        [[ 2.927087  ,  4.121782  ,  2.842609  ],\n         [ 3.6986685 ,  2.2660184 ,  3.459485  ],\n         [ 2.9949238 ,  2.8412545 ,  2.6079593 ],\n         ...,\n         [ 2.1316717 ,  2.7691746 ,  2.2584171 ],\n         [ 1.5514073 ,  2.757613  ,  2.502748  ],\n         [ 3.7650633 ,  3.1595628 ,  3.0051136 ]],\n\n        [[ 3.0900002 ,  3.5298274 ,  3.4555461 ],\n         [ 3.290201  ,  2.8523517 ,  2.8103461 ],\n         [ 2.4513779 ,  2.8444355 ,  3.0850103 ],\n         ...,\n         [ 2.6952124 ,  3.381446  ,  2.8652372 ],\n         [ 2.760527  ,  1.7405778 ,  2.7261817 ],\n         [ 1.7687908 ,  2.6597285 ,  2.6260958 ]],\n\n        ...,\n\n        [[ 3.9179752 ,  2.250611  ,  3.8667107 ],\n         [ 2.4564443 ,  3.288857  ,  3.1027386 ],\n         [ 4.047402  ,  3.7564845 ,  3.754599  ],\n         ...,\n         [ 2.8125784 ,  3.0951946 ,  2.9152102 ],\n         [ 2.7063923 ,  4.1852164 ,  2.4616847 ],\n         [ 2.6074672 ,  3.9399822 ,  2.7567136 ]],\n\n        [[ 2.219228  ,  1.7937181 ,  2.4895904 ],\n         [ 1.5999914 ,  3.7341778 ,  3.6943595 ],\n         [ 2.492487  ,  2.5272038 ,  2.6212502 ],\n         ...,\n         [ 2.9924562 ,  3.9488132 ,  3.8757725 ],\n         [ 2.9479268 ,  2.172054  ,  2.5879047 ],\n         [ 2.9760096 ,  3.9702067 ,  3.9312983 ]],\n\n        [[ 3.36151   ,  1.1148642 ,  3.2279866 ],\n         [ 3.3951225 ,  2.2549727 ,  3.0533369 ],\n         [ 3.2024336 ,  2.5514538 ,  2.6721153 ],\n         ...,\n         [ 3.379956  ,  2.8931754 ,  3.935416  ],\n         [ 2.8370225 ,  4.4347334 ,  2.6261387 ],\n         [ 1.7581122 ,  3.149638  ,  2.8431673 ]]],\n\n\n       [[[ 1.3731675 ,  0.3943819 ,  0.9527031 ],\n         [ 1.4840335 ,  1.0450361 ,  0.4427628 ],\n         [ 1.7888315 , -0.07093016,  1.2403355 ],\n         ...,\n         [ 1.446183  ,  2.0671895 ,  1.6234221 ],\n         [-0.19450954,  0.8876899 ,  1.8768009 ],\n         [ 1.4869764 ,  1.1566427 ,  0.23400712]],\n\n        [[ 0.19763175,  1.2175456 ,  1.6603621 ],\n         [ 2.0417724 ,  1.5736339 ,  1.6149911 ],\n         [ 0.10025356,  0.12563466,  1.75853   ],\n         ...,\n         [ 0.83732647,  1.0041313 , -0.22598559],\n         [ 0.9881442 ,  0.7291101 ,  1.8531514 ],\n         [ 0.57595366,  0.14993478,  2.4607928 ]],\n\n        [[ 0.81881005,  0.7759782 ,  1.114902  ],\n         [ 1.6072115 ,  0.9903706 ,  1.7277681 ],\n         [ 1.2642323 ,  0.5959739 ,  1.5716674 ],\n         ...,\n         [ 0.7718126 , -0.07648239,  0.13025728],\n         [ 2.8235676 ,  0.47029853, -0.18380381],\n         [ 0.71859884, -0.09333284,  0.1978946 ]],\n\n        ...,\n\n        [[ 1.2388719 ,  0.50037146,  2.8683767 ],\n         [ 0.14976665,  0.7749325 ,  0.1072565 ],\n         [ 1.9451942 ,  0.74670243,  0.27082166],\n         ...,\n         [ 1.5303568 ,  1.0261999 ,  0.5645874 ],\n         [ 1.6473227 ,  1.0030979 ,  0.1611975 ],\n         [ 1.6538699 ,  2.0089717 ,  0.6772742 ]],\n\n        [[ 0.22143024,  0.71986306,  0.81725997],\n         [ 1.1553261 ,  0.5101839 ,  0.57514304],\n         [ 1.17398   ,  0.20216049,  0.55462223],\n         ...,\n         [ 1.2770381 ,  0.63794696,  1.6099899 ],\n         [ 0.7625213 ,  1.4379823 , -0.0054101 ],\n         [ 1.6632615 ,  1.4626781 ,  1.8360386 ]],\n\n        [[ 1.607567  ,  0.89471817,  0.7751786 ],\n         [ 2.4497063 ,  0.6025513 ,  1.8887751 ],\n         [ 2.447013  ,  1.06363   ,  2.4630096 ],\n         ...,\n         [ 0.68929476,  0.34385097,  0.94736975],\n         [ 1.8678833 ,  1.3516245 ,  0.8777188 ],\n         [ 1.7384102 ,  0.4675242 ,  0.85865355]]],\n\n\n       ...,\n\n\n       [[[ 3.1793458 ,  3.6508977 ,  2.5256965 ],\n         [ 3.1875105 ,  3.260527  ,  1.9837979 ],\n         [ 3.0456657 ,  3.0103555 ,  2.801159  ],\n         ...,\n         [ 3.0275524 ,  3.7944765 ,  2.8180075 ],\n         [ 2.488167  ,  3.7086654 ,  2.817357  ],\n         [ 4.2495837 ,  3.208283  ,  1.6691604 ]],\n\n        [[ 2.8170254 ,  3.5276158 ,  3.1139617 ],\n         [ 3.6177268 ,  3.37701   ,  1.7415665 ],\n         [ 3.8830671 ,  2.5625849 ,  2.5974224 ],\n         ...,\n         [ 3.2488804 ,  0.9126759 ,  3.2720625 ],\n         [ 1.6926639 ,  2.245766  ,  3.1942387 ],\n         [ 2.7050366 ,  3.6218426 ,  2.578445  ]],\n\n        [[ 2.03853   ,  3.3658693 ,  2.1060264 ],\n         [ 2.8322015 ,  3.8776193 ,  3.5116081 ],\n         [ 2.9841204 ,  4.881993  ,  3.018465  ],\n         ...,\n         [ 2.6681178 ,  2.3718092 ,  2.966036  ],\n         [ 3.456791  ,  3.2532961 ,  2.4503706 ],\n         [ 2.0645134 ,  3.877773  ,  3.4750326 ]],\n\n        ...,\n\n        [[ 3.4585621 ,  2.7229908 ,  3.0604296 ],\n         [ 3.229581  ,  2.3241732 ,  2.321139  ],\n         [ 2.7680755 ,  3.42502   ,  3.3335042 ],\n         ...,\n         [ 2.8207662 ,  3.007065  ,  2.791059  ],\n         [ 2.3206367 ,  3.030691  ,  2.9023883 ],\n         [ 2.6299913 ,  2.9122722 ,  2.659337  ]],\n\n        [[ 1.1019734 ,  1.9370875 ,  1.6319593 ],\n         [ 2.1394649 ,  3.9727576 ,  3.9922588 ],\n         [ 3.5515313 ,  2.9275906 ,  4.1142697 ],\n         ...,\n         [ 2.6871529 ,  2.2816303 ,  3.308156  ],\n         [ 3.1953418 ,  3.0898266 ,  2.9556549 ],\n         [ 2.9674733 ,  2.91728   ,  3.4010687 ]],\n\n        [[ 1.1576266 ,  2.901183  ,  2.3051233 ],\n         [ 3.513328  ,  2.8377957 ,  4.3251452 ],\n         [ 2.6527436 ,  2.2270947 ,  3.6611521 ],\n         ...,\n         [ 2.6562753 ,  3.401176  ,  2.395931  ],\n         [ 5.306309  ,  3.3973126 ,  2.6920128 ],\n         [ 3.4494793 ,  2.7760274 ,  3.892645  ]]],\n\n\n       [[[ 2.387427  ,  0.8964663 ,  1.6009626 ],\n         [ 3.0356927 ,  1.7700306 ,  2.6287313 ],\n         [ 2.5928063 ,  2.3867574 ,  1.6068852 ],\n         ...,\n         [ 0.68535984,  1.6223015 ,  1.9142274 ],\n         [ 1.1641334 ,  1.9006265 ,  2.8342783 ],\n         [ 2.5179353 ,  1.1396378 ,  1.3992475 ]],\n\n        [[ 1.7561083 ,  1.881799  ,  3.342246  ],\n         [ 1.1137397 ,  1.413336  ,  1.5196304 ],\n         [ 2.0168033 ,  1.713354  ,  0.33794495],\n         ...,\n         [ 2.464568  ,  2.5703797 ,  2.5630572 ],\n         [ 0.8983961 ,  3.5840712 ,  0.90749174],\n         [ 2.5974753 ,  2.6070957 ,  1.9526889 ]],\n\n        [[ 1.7758378 ,  2.4874656 ,  1.2461699 ],\n         [ 2.2930415 ,  2.6124363 ,  2.2694225 ],\n         [ 2.0600405 ,  2.0181599 ,  1.9745361 ],\n         ...,\n         [ 2.8498442 ,  1.7919424 ,  1.6924688 ],\n         [ 2.825897  ,  2.3031974 ,  2.0371697 ],\n         [ 1.90821   ,  2.2522755 ,  2.6920333 ]],\n\n        ...,\n\n        [[ 1.6461598 ,  2.20987   ,  1.4552094 ],\n         [ 2.9461634 ,  2.0555441 ,  2.143964  ],\n         [ 1.4822192 ,  2.822217  ,  1.8421156 ],\n         ...,\n         [ 0.6531504 ,  1.1644914 ,  2.2149973 ],\n         [ 1.9089482 ,  2.1664312 ,  1.4455625 ],\n         [ 2.0402381 ,  2.3210757 ,  2.0344145 ]],\n\n        [[ 2.1787775 ,  1.8259637 ,  2.038248  ],\n         [ 2.3950691 ,  2.7308915 ,  2.0469103 ],\n         [ 1.7277806 ,  1.3824869 ,  1.5798897 ],\n         ...,\n         [ 0.9060573 ,  0.50908196,  1.4885161 ],\n         [ 1.5757284 ,  2.162431  ,  2.1360133 ],\n         [ 2.4998224 ,  1.5396477 ,  0.7559334 ]],\n\n        [[ 1.160966  ,  2.0900097 ,  2.4216478 ],\n         [ 1.1864386 ,  2.2701302 ,  2.7910597 ],\n         [ 2.5137465 ,  2.8520179 ,  1.9992269 ],\n         ...,\n         [ 1.3970239 ,  2.0623033 ,  0.9228329 ],\n         [ 1.358295  ,  2.3811576 ,  2.3053446 ],\n         [ 2.2051005 ,  2.3253784 ,  1.8295821 ]]],\n\n\n       [[[-0.27316925,  0.5630208 ,  1.4643184 ],\n         [ 0.26981002,  1.0325669 ,  0.42211196],\n         [ 0.612904  ,  0.51843536,  1.3519087 ],\n         ...,\n         [ 1.099599  ,  2.091152  ,  0.8328505 ],\n         [ 0.7891131 ,  0.7457203 ,  0.8015435 ],\n         [ 1.2962006 ,  0.6116928 , -0.48321202]],\n\n        [[ 1.3995628 ,  1.2843518 ,  0.09038926],\n         [ 2.1051352 ,  0.65661156,  1.2789428 ],\n         [ 1.625366  ,  1.7026261 , -0.5052019 ],\n         ...,\n         [ 1.1798683 ,  1.9670653 ,  2.2066946 ],\n         [ 0.53734225,  0.24151522,  0.16659647],\n         [ 1.5704715 ,  0.58827513,  1.3569655 ]],\n\n        [[ 0.611378  , -1.0457369 ,  1.070026  ],\n         [ 0.5692045 ,  0.348673  ,  2.1595626 ],\n         [ 0.29544547,  0.2125089 ,  0.32622635],\n         ...,\n         [ 1.5287392 ,  1.2747524 ,  1.371008  ],\n         [ 1.3926319 ,  1.7186921 , -0.8325502 ],\n         [ 0.9617332 , -0.2282806 ,  1.6312047 ]],\n\n        ...,\n\n        [[ 0.8063203 ,  1.3488266 ,  1.3138499 ],\n         [ 2.18075   , -0.04254735,  0.40977457],\n         [ 0.2617554 ,  1.6497456 ,  1.0618163 ],\n         ...,\n         [ 1.319428  ,  0.79834753,  1.4447125 ],\n         [-1.1609081 ,  1.51864   ,  1.9837307 ],\n         [ 1.2245839 ,  0.10149777,  0.611548  ]],\n\n        [[ 1.921728  ,  1.4432634 ,  0.12327584],\n         [ 1.4303542 ,  1.1973931 ,  0.58537585],\n         [ 1.3507069 ,  1.1693128 ,  2.2245133 ],\n         ...,\n         [ 1.077661  ,  1.4523443 ,  0.2592964 ],\n         [ 0.5150499 ,  1.5255393 ,  0.48517597],\n         [ 0.23787203,  1.3186069 ,  2.4724157 ]],\n\n        [[ 1.4921384 ,  1.7973471 ,  0.44482344],\n         [ 1.1606673 ,  1.0953245 ,  1.1701508 ],\n         [ 1.6103607 ,  1.4810278 ,  1.9051005 ],\n         ...,\n         [ 1.2547009 ,  0.7685057 ,  0.8485182 ],\n         [ 0.6483979 , -1.0214355 ,  0.7158773 ],\n         [ 0.32110032,  1.3277178 ,  0.94261205]]]], dtype=float32), array([[0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 0.27930123,  0.51701045,  1.121421  ],\n         [ 1.7378482 ,  1.2936478 ,  0.09241625],\n         [ 1.0757035 ,  0.9990705 ,  0.736592  ],\n         ...,\n         [ 2.1947255 ,  0.7822953 ,  1.6028876 ],\n         [ 2.192667  ,  1.0491983 ,  0.39155903],\n         [ 0.6721133 ,  1.4333218 ,  1.2851721 ]],\n\n        [[ 1.3300419 ,  1.6132137 ,  0.14156623],\n         [ 0.21886279,  1.120216  ,  0.130493  ],\n         [ 0.39705142,  1.5517795 ,  0.5674231 ],\n         ...,\n         [ 1.1184225 ,  1.7839347 ,  0.02099802],\n         [ 0.6947166 ,  1.0923285 ,  1.1551178 ],\n         [ 1.7928094 ,  1.1121796 ,  1.6269764 ]],\n\n        [[ 1.8897268 ,  1.8797019 ,  0.91248167],\n         [ 1.1621151 ,  0.9524418 ,  1.6609601 ],\n         [ 0.7712218 ,  0.7674996 ,  1.6327854 ],\n         ...,\n         [ 1.6288769 ,  2.107439  ,  0.7449814 ],\n         [ 0.93444103,  1.6124965 ,  0.7211259 ],\n         [ 1.1492132 , -0.105069  ,  0.88064367]],\n\n        ...,\n\n        [[ 0.42134476,  0.46491686,  0.8143006 ],\n         [ 1.002698  ,  1.1941226 ,  1.3215286 ],\n         [-0.23529923,  0.21553582,  0.10865206],\n         ...,\n         [ 2.4700017 ,  2.085536  ,  0.33375272],\n         [ 1.3412582 ,  0.26481822,  0.6119415 ],\n         [ 1.1392329 ,  0.5443277 ,  2.0621772 ]],\n\n        [[ 1.1585965 ,  1.7210947 ,  1.9797134 ],\n         [ 1.4724011 ,  0.39955267,  1.1378567 ],\n         [ 0.56858164, -0.9554278 ,  0.73512685],\n         ...,\n         [ 0.74531084,  0.36886147,  1.0032165 ],\n         [ 0.8333059 ,  1.1410255 ,  0.70057833],\n         [ 1.4575503 ,  1.1127222 ,  1.3041878 ]],\n\n        [[ 1.423077  ,  1.4069995 ,  1.1741158 ],\n         [-0.87458587,  1.9609733 ,  1.2762982 ],\n         [ 0.60232466,  1.0492238 ,  0.6436236 ],\n         ...,\n         [ 1.5556448 ,  1.3989506 ,  1.5365872 ],\n         [ 1.2152296 ,  1.0475322 ,  1.5672243 ],\n         [ 0.70120275,  1.866123  , -0.61459607]]],\n\n\n       [[[ 2.8533168 ,  3.4711475 ,  3.2542713 ],\n         [ 3.0257301 ,  2.8017192 ,  3.2378516 ],\n         [ 2.3336139 ,  4.0583873 ,  3.0100985 ],\n         ...,\n         [ 2.2304668 ,  2.6700146 ,  3.486913  ],\n         [ 3.701193  ,  3.1957428 ,  2.9629722 ],\n         [ 3.802664  ,  4.326606  ,  2.8197172 ]],\n\n        [[ 2.927087  ,  4.121782  ,  2.842609  ],\n         [ 3.6986685 ,  2.2660184 ,  3.459485  ],\n         [ 2.9949238 ,  2.8412545 ,  2.6079593 ],\n         ...,\n         [ 2.1316717 ,  2.7691746 ,  2.2584171 ],\n         [ 1.5514073 ,  2.757613  ,  2.502748  ],\n         [ 3.7650633 ,  3.1595628 ,  3.0051136 ]],\n\n        [[ 3.0900002 ,  3.5298274 ,  3.4555461 ],\n         [ 3.290201  ,  2.8523517 ,  2.8103461 ],\n         [ 2.4513779 ,  2.8444355 ,  3.0850103 ],\n         ...,\n         [ 2.6952124 ,  3.381446  ,  2.8652372 ],\n         [ 2.760527  ,  1.7405778 ,  2.7261817 ],\n         [ 1.7687908 ,  2.6597285 ,  2.6260958 ]],\n\n        ...,\n\n        [[ 3.9179752 ,  2.250611  ,  3.8667107 ],\n         [ 2.4564443 ,  3.288857  ,  3.1027386 ],\n         [ 4.047402  ,  3.7564845 ,  3.754599  ],\n         ...,\n         [ 2.8125784 ,  3.0951946 ,  2.9152102 ],\n         [ 2.7063923 ,  4.1852164 ,  2.4616847 ],\n         [ 2.6074672 ,  3.9399822 ,  2.7567136 ]],\n\n        [[ 2.219228  ,  1.7937181 ,  2.4895904 ],\n         [ 1.5999914 ,  3.7341778 ,  3.6943595 ],\n         [ 2.492487  ,  2.5272038 ,  2.6212502 ],\n         ...,\n         [ 2.9924562 ,  3.9488132 ,  3.8757725 ],\n         [ 2.9479268 ,  2.172054  ,  2.5879047 ],\n         [ 2.9760096 ,  3.9702067 ,  3.9312983 ]],\n\n        [[ 3.36151   ,  1.1148642 ,  3.2279866 ],\n         [ 3.3951225 ,  2.2549727 ,  3.0533369 ],\n         [ 3.2024336 ,  2.5514538 ,  2.6721153 ],\n         ...,\n         [ 3.379956  ,  2.8931754 ,  3.935416  ],\n         [ 2.8370225 ,  4.4347334 ,  2.6261387 ],\n         [ 1.7581122 ,  3.149638  ,  2.8431673 ]]],\n\n\n       [[[ 1.3731675 ,  0.3943819 ,  0.9527031 ],\n         [ 1.4840335 ,  1.0450361 ,  0.4427628 ],\n         [ 1.7888315 , -0.07093016,  1.2403355 ],\n         ...,\n         [ 1.446183  ,  2.0671895 ,  1.6234221 ],\n         [-0.19450954,  0.8876899 ,  1.8768009 ],\n         [ 1.4869764 ,  1.1566427 ,  0.23400712]],\n\n        [[ 0.19763175,  1.2175456 ,  1.6603621 ],\n         [ 2.0417724 ,  1.5736339 ,  1.6149911 ],\n         [ 0.10025356,  0.12563466,  1.75853   ],\n         ...,\n         [ 0.83732647,  1.0041313 , -0.22598559],\n         [ 0.9881442 ,  0.7291101 ,  1.8531514 ],\n         [ 0.57595366,  0.14993478,  2.4607928 ]],\n\n        [[ 0.81881005,  0.7759782 ,  1.114902  ],\n         [ 1.6072115 ,  0.9903706 ,  1.7277681 ],\n         [ 1.2642323 ,  0.5959739 ,  1.5716674 ],\n         ...,\n         [ 0.7718126 , -0.07648239,  0.13025728],\n         [ 2.8235676 ,  0.47029853, -0.18380381],\n         [ 0.71859884, -0.09333284,  0.1978946 ]],\n\n        ...,\n\n        [[ 1.2388719 ,  0.50037146,  2.8683767 ],\n         [ 0.14976665,  0.7749325 ,  0.1072565 ],\n         [ 1.9451942 ,  0.74670243,  0.27082166],\n         ...,\n         [ 1.5303568 ,  1.0261999 ,  0.5645874 ],\n         [ 1.6473227 ,  1.0030979 ,  0.1611975 ],\n         [ 1.6538699 ,  2.0089717 ,  0.6772742 ]],\n\n        [[ 0.22143024,  0.71986306,  0.81725997],\n         [ 1.1553261 ,  0.5101839 ,  0.57514304],\n         [ 1.17398   ,  0.20216049,  0.55462223],\n         ...,\n         [ 1.2770381 ,  0.63794696,  1.6099899 ],\n         [ 0.7625213 ,  1.4379823 , -0.0054101 ],\n         [ 1.6632615 ,  1.4626781 ,  1.8360386 ]],\n\n        [[ 1.607567  ,  0.89471817,  0.7751786 ],\n         [ 2.4497063 ,  0.6025513 ,  1.8887751 ],\n         [ 2.447013  ,  1.06363   ,  2.4630096 ],\n         ...,\n         [ 0.68929476,  0.34385097,  0.94736975],\n         [ 1.8678833 ,  1.3516245 ,  0.8777188 ],\n         [ 1.7384102 ,  0.4675242 ,  0.85865355]]],\n\n\n       ...,\n\n\n       [[[ 3.1793458 ,  3.6508977 ,  2.5256965 ],\n         [ 3.1875105 ,  3.260527  ,  1.9837979 ],\n         [ 3.0456657 ,  3.0103555 ,  2.801159  ],\n         ...,\n         [ 3.0275524 ,  3.7944765 ,  2.8180075 ],\n         [ 2.488167  ,  3.7086654 ,  2.817357  ],\n         [ 4.2495837 ,  3.208283  ,  1.6691604 ]],\n\n        [[ 2.8170254 ,  3.5276158 ,  3.1139617 ],\n         [ 3.6177268 ,  3.37701   ,  1.7415665 ],\n         [ 3.8830671 ,  2.5625849 ,  2.5974224 ],\n         ...,\n         [ 3.2488804 ,  0.9126759 ,  3.2720625 ],\n         [ 1.6926639 ,  2.245766  ,  3.1942387 ],\n         [ 2.7050366 ,  3.6218426 ,  2.578445  ]],\n\n        [[ 2.03853   ,  3.3658693 ,  2.1060264 ],\n         [ 2.8322015 ,  3.8776193 ,  3.5116081 ],\n         [ 2.9841204 ,  4.881993  ,  3.018465  ],\n         ...,\n         [ 2.6681178 ,  2.3718092 ,  2.966036  ],\n         [ 3.456791  ,  3.2532961 ,  2.4503706 ],\n         [ 2.0645134 ,  3.877773  ,  3.4750326 ]],\n\n        ...,\n\n        [[ 3.4585621 ,  2.7229908 ,  3.0604296 ],\n         [ 3.229581  ,  2.3241732 ,  2.321139  ],\n         [ 2.7680755 ,  3.42502   ,  3.3335042 ],\n         ...,\n         [ 2.8207662 ,  3.007065  ,  2.791059  ],\n         [ 2.3206367 ,  3.030691  ,  2.9023883 ],\n         [ 2.6299913 ,  2.9122722 ,  2.659337  ]],\n\n        [[ 1.1019734 ,  1.9370875 ,  1.6319593 ],\n         [ 2.1394649 ,  3.9727576 ,  3.9922588 ],\n         [ 3.5515313 ,  2.9275906 ,  4.1142697 ],\n         ...,\n         [ 2.6871529 ,  2.2816303 ,  3.308156  ],\n         [ 3.1953418 ,  3.0898266 ,  2.9556549 ],\n         [ 2.9674733 ,  2.91728   ,  3.4010687 ]],\n\n        [[ 1.1576266 ,  2.901183  ,  2.3051233 ],\n         [ 3.513328  ,  2.8377957 ,  4.3251452 ],\n         [ 2.6527436 ,  2.2270947 ,  3.6611521 ],\n         ...,\n         [ 2.6562753 ,  3.401176  ,  2.395931  ],\n         [ 5.306309  ,  3.3973126 ,  2.6920128 ],\n         [ 3.4494793 ,  2.7760274 ,  3.892645  ]]],\n\n\n       [[[ 2.387427  ,  0.8964663 ,  1.6009626 ],\n         [ 3.0356927 ,  1.7700306 ,  2.6287313 ],\n         [ 2.5928063 ,  2.3867574 ,  1.6068852 ],\n         ...,\n         [ 0.68535984,  1.6223015 ,  1.9142274 ],\n         [ 1.1641334 ,  1.9006265 ,  2.8342783 ],\n         [ 2.5179353 ,  1.1396378 ,  1.3992475 ]],\n\n        [[ 1.7561083 ,  1.881799  ,  3.342246  ],\n         [ 1.1137397 ,  1.413336  ,  1.5196304 ],\n         [ 2.0168033 ,  1.713354  ,  0.33794495],\n         ...,\n         [ 2.464568  ,  2.5703797 ,  2.5630572 ],\n         [ 0.8983961 ,  3.5840712 ,  0.90749174],\n         [ 2.5974753 ,  2.6070957 ,  1.9526889 ]],\n\n        [[ 1.7758378 ,  2.4874656 ,  1.2461699 ],\n         [ 2.2930415 ,  2.6124363 ,  2.2694225 ],\n         [ 2.0600405 ,  2.0181599 ,  1.9745361 ],\n         ...,\n         [ 2.8498442 ,  1.7919424 ,  1.6924688 ],\n         [ 2.825897  ,  2.3031974 ,  2.0371697 ],\n         [ 1.90821   ,  2.2522755 ,  2.6920333 ]],\n\n        ...,\n\n        [[ 1.6461598 ,  2.20987   ,  1.4552094 ],\n         [ 2.9461634 ,  2.0555441 ,  2.143964  ],\n         [ 1.4822192 ,  2.822217  ,  1.8421156 ],\n         ...,\n         [ 0.6531504 ,  1.1644914 ,  2.2149973 ],\n         [ 1.9089482 ,  2.1664312 ,  1.4455625 ],\n         [ 2.0402381 ,  2.3210757 ,  2.0344145 ]],\n\n        [[ 2.1787775 ,  1.8259637 ,  2.038248  ],\n         [ 2.3950691 ,  2.7308915 ,  2.0469103 ],\n         [ 1.7277806 ,  1.3824869 ,  1.5798897 ],\n         ...,\n         [ 0.9060573 ,  0.50908196,  1.4885161 ],\n         [ 1.5757284 ,  2.162431  ,  2.1360133 ],\n         [ 2.4998224 ,  1.5396477 ,  0.7559334 ]],\n\n        [[ 1.160966  ,  2.0900097 ,  2.4216478 ],\n         [ 1.1864386 ,  2.2701302 ,  2.7910597 ],\n         [ 2.5137465 ,  2.8520179 ,  1.9992269 ],\n         ...,\n         [ 1.3970239 ,  2.0623033 ,  0.9228329 ],\n         [ 1.358295  ,  2.3811576 ,  2.3053446 ],\n         [ 2.2051005 ,  2.3253784 ,  1.8295821 ]]],\n\n\n       [[[-0.27316925,  0.5630208 ,  1.4643184 ],\n         [ 0.26981002,  1.0325669 ,  0.42211196],\n         [ 0.612904  ,  0.51843536,  1.3519087 ],\n         ...,\n         [ 1.099599  ,  2.091152  ,  0.8328505 ],\n         [ 0.7891131 ,  0.7457203 ,  0.8015435 ],\n         [ 1.2962006 ,  0.6116928 , -0.48321202]],\n\n        [[ 1.3995628 ,  1.2843518 ,  0.09038926],\n         [ 2.1051352 ,  0.65661156,  1.2789428 ],\n         [ 1.625366  ,  1.7026261 , -0.5052019 ],\n         ...,\n         [ 1.1798683 ,  1.9670653 ,  2.2066946 ],\n         [ 0.53734225,  0.24151522,  0.16659647],\n         [ 1.5704715 ,  0.58827513,  1.3569655 ]],\n\n        [[ 0.611378  , -1.0457369 ,  1.070026  ],\n         [ 0.5692045 ,  0.348673  ,  2.1595626 ],\n         [ 0.29544547,  0.2125089 ,  0.32622635],\n         ...,\n         [ 1.5287392 ,  1.2747524 ,  1.371008  ],\n         [ 1.3926319 ,  1.7186921 , -0.8325502 ],\n         [ 0.9617332 , -0.2282806 ,  1.6312047 ]],\n\n        ...,\n\n        [[ 0.8063203 ,  1.3488266 ,  1.3138499 ],\n         [ 2.18075   , -0.04254735,  0.40977457],\n         [ 0.2617554 ,  1.6497456 ,  1.0618163 ],\n         ...,\n         [ 1.319428  ,  0.79834753,  1.4447125 ],\n         [-1.1609081 ,  1.51864   ,  1.9837307 ],\n         [ 1.2245839 ,  0.10149777,  0.611548  ]],\n\n        [[ 1.921728  ,  1.4432634 ,  0.12327584],\n         [ 1.4303542 ,  1.1973931 ,  0.58537585],\n         [ 1.3507069 ,  1.1693128 ,  2.2245133 ],\n         ...,\n         [ 1.077661  ,  1.4523443 ,  0.2592964 ],\n         [ 0.5150499 ,  1.5255393 ,  0.48517597],\n         [ 0.23787203,  1.3186069 ,  2.4724157 ]],\n\n        [[ 1.4921384 ,  1.7973471 ,  0.44482344],\n         [ 1.1606673 ,  1.0953245 ,  1.1701508 ],\n         [ 1.6103607 ,  1.4810278 ,  1.9051005 ],\n         ...,\n         [ 1.2547009 ,  0.7685057 ,  0.8485182 ],\n         [ 0.6483979 , -1.0214355 ,  0.7158773 ],\n         [ 0.32110032,  1.3277178 ,  0.94261205]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "y": {
                                    "variable_value": "array([[0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[1.1060343, 0.25]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295b06e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295b0370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[1.1267935848236084, 0.255]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295af690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.99752235, 0.5], [1.1571419, 0.4375], [1.0787094, 0.625], [0.95933354, 0.5], [1.0244508, 0.5], [0.95755637, 0.625], [1.0844663, 0.625], [0.9328309, 0.4375], [0.98289204, 0.4375], [0.85178626, 0.5625], [0.776111, 0.6875], [1.0199134, 0.375], [0.8326565, 0.625]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[-0.6169634 , -0.37248182,  0.7878938 ],\n         [ 0.40366042,  0.5577541 ,  0.02086093],\n         [ 0.7035145 ,  0.3869761 ,  0.06264535],\n         ...,\n         [ 1.2345504 , -0.9233932 ,  0.60073644],\n         [ 0.10545161,  0.11465842, -1.1345193 ],\n         [-0.2979125 , -1.4554605 ,  0.44642434]],\n\n        [[-0.2771645 ,  1.3618963 , -0.7577122 ],\n         [ 0.11942147,  0.34836915,  0.0355806 ],\n         [ 1.0526915 , -0.6212446 ,  0.54652774],\n         ...,\n         [ 0.1740477 , -0.6567239 , -0.28886512],\n         [-0.6520048 ,  0.3753879 , -0.5690634 ],\n         [ 1.3816527 , -0.3077712 ,  0.5049778 ]],\n\n        [[-0.29272005,  0.18021485,  0.8393912 ],\n         [ 0.04341648,  0.24096262, -1.5569817 ],\n         [-1.3640162 ,  1.243244  ,  0.1495353 ],\n         ...,\n         [-1.3715885 ,  0.8625315 ,  0.70525604],\n         [ 0.3954112 , -0.05708152,  0.01140277],\n         [ 0.00911271, -0.96333665,  0.13054821]],\n\n        ...,\n\n        [[ 0.8635569 , -0.38255468, -0.35835895],\n         [ 0.752221  , -0.73486626, -0.2963764 ],\n         [-0.22311233,  1.0203657 , -0.5458184 ],\n         ...,\n         [-0.5310997 ,  0.28336406, -0.3690367 ],\n         [ 0.27080816, -0.71317947, -0.33932403],\n         [ 0.58230907,  0.41462022, -0.9351847 ]],\n\n        [[-0.76798296, -0.53060216,  0.7747057 ],\n         [ 0.82066345, -0.7092613 , -0.3852562 ],\n         [ 0.41517398, -0.4842531 , -0.06706469],\n         ...,\n         [-0.24575499, -0.7747958 ,  1.1546247 ],\n         [-0.160108  , -0.3581148 , -1.5682344 ],\n         [ 0.9355976 ,  1.5282104 , -0.1843824 ]],\n\n        [[-0.5694715 ,  0.31995344, -0.0557727 ],\n         [ 0.01863769,  1.0155237 ,  0.2441942 ],\n         [ 1.105511  ,  0.14191593,  0.28282514],\n         ...,\n         [-0.2671563 ,  0.670651  , -0.21244745],\n         [ 1.2026998 ,  0.62295353,  0.8024933 ],\n         [ 0.79175466, -0.1315856 , -0.13180898]]],\n\n\n       [[[ 3.130134  ,  2.4900804 ,  1.6551648 ],\n         [ 2.2970138 ,  2.0360866 ,  0.79640824],\n         [ 2.2889855 ,  1.1471825 ,  2.5754166 ],\n         ...,\n         [ 2.0128982 ,  1.5180528 ,  1.8329486 ],\n         [ 1.4715149 ,  1.9873738 ,  2.7224708 ],\n         [ 2.275847  ,  1.6219102 ,  2.5664804 ]],\n\n        [[ 0.8036116 ,  2.3948069 ,  1.0490047 ],\n         [ 1.8822153 ,  2.3545206 ,  3.127735  ],\n         [ 3.0462852 ,  2.2171335 ,  1.9862069 ],\n         ...,\n         [ 1.9121451 ,  2.4331493 ,  2.4318645 ],\n         [ 1.844102  ,  3.0212533 ,  2.4611013 ],\n         [ 3.195349  ,  2.2285287 ,  1.9942865 ]],\n\n        [[ 1.6498082 ,  0.5170145 ,  2.8470562 ],\n         [ 3.2502773 ,  3.1577282 ,  1.4964621 ],\n         [ 2.003357  ,  2.1236434 ,  1.1749458 ],\n         ...,\n         [ 1.4380211 ,  2.4411542 ,  2.092083  ],\n         [ 2.4458926 ,  2.2395954 ,  1.8966442 ],\n         [ 1.9056145 ,  2.2379098 ,  2.2379866 ]],\n\n        ...,\n\n        [[ 1.5673115 ,  1.6121268 ,  2.9911776 ],\n         [ 2.3646548 ,  3.2190406 ,  2.8675058 ],\n         [ 1.9874448 ,  0.6421928 ,  2.6622856 ],\n         ...,\n         [ 3.4846117 ,  2.5146947 ,  1.595399  ],\n         [ 2.2219884 ,  2.7844195 ,  3.4310193 ],\n         [ 1.1728699 ,  1.7303414 ,  0.68855107]],\n\n        [[ 2.4863942 ,  2.3118765 ,  1.4781995 ],\n         [ 0.95816135,  2.1748357 ,  1.8936361 ],\n         [ 1.3520743 ,  3.1432805 ,  2.9697936 ],\n         ...,\n         [ 0.851801  ,  2.5521152 ,  2.936081  ],\n         [ 1.4589796 ,  1.8304938 ,  1.2051159 ],\n         [ 2.067753  ,  2.1967835 ,  3.3149803 ]],\n\n        [[ 1.8559878 ,  2.0717638 ,  2.5827253 ],\n         [ 2.4297256 ,  2.0050285 ,  1.0201143 ],\n         [ 1.7312022 ,  1.3824514 ,  1.5995172 ],\n         ...,\n         [ 2.0318997 ,  2.4519808 ,  1.5389456 ],\n         [ 1.0397668 ,  2.4974484 ,  2.0095239 ],\n         [ 1.0756042 ,  2.5709438 ,  1.7473999 ]]],\n\n\n       [[[ 2.9207203 ,  3.8026888 ,  2.5416348 ],\n         [ 3.9538422 ,  3.312025  ,  3.128903  ],\n         [ 3.5332925 ,  3.3320153 ,  2.7072814 ],\n         ...,\n         [ 3.9902718 ,  2.5909028 ,  3.0616577 ],\n         [ 2.8474607 ,  3.1960135 ,  3.6302707 ],\n         [ 4.466976  ,  3.1700954 ,  3.171978  ]],\n\n        [[ 2.1354911 ,  3.6901155 ,  3.7271771 ],\n         [ 2.8280199 ,  3.397258  ,  2.4251642 ],\n         [ 3.00132   ,  2.8711793 ,  1.5242589 ],\n         ...,\n         [ 2.6825771 ,  3.9048622 ,  3.6680439 ],\n         [ 2.4736319 ,  2.567637  ,  2.8319442 ],\n         [ 3.3198187 ,  2.7390919 ,  2.5199661 ]],\n\n        [[ 2.387618  ,  3.1881328 ,  2.1806476 ],\n         [ 2.652462  ,  3.271998  ,  3.1414149 ],\n         [ 3.59274   ,  3.492191  ,  3.0523067 ],\n         ...,\n         [ 2.634879  ,  3.3756266 ,  3.2545629 ],\n         [ 2.7821307 ,  1.8805096 ,  2.716208  ],\n         [ 3.1112378 ,  3.5038922 ,  4.1498427 ]],\n\n        ...,\n\n        [[ 2.2845051 ,  4.015944  ,  3.709031  ],\n         [ 3.9267917 ,  3.2519615 ,  2.4645216 ],\n         [ 3.7733889 ,  2.826965  ,  3.306104  ],\n         ...,\n         [ 3.5554278 ,  2.140966  ,  2.8479111 ],\n         [ 2.4519029 ,  1.9650307 ,  3.2403653 ],\n         [ 2.7343636 ,  2.8119025 ,  2.6728027 ]],\n\n        [[ 1.6626935 ,  2.8475578 ,  1.9793038 ],\n         [ 2.7302816 ,  2.6977668 ,  3.5902052 ],\n         [ 2.8539608 ,  2.654275  ,  3.060191  ],\n         ...,\n         [ 4.4034986 ,  3.2498317 ,  1.8630111 ],\n         [ 3.2239945 ,  1.6552397 ,  4.0919003 ],\n         [ 2.7825577 ,  2.6018248 ,  2.7787256 ]],\n\n        [[ 2.6605425 ,  3.5004268 ,  1.6222284 ],\n         [ 3.008486  ,  2.5930777 ,  1.9491125 ],\n         [ 3.2143583 ,  3.145505  ,  2.9745436 ],\n         ...,\n         [ 3.839159  ,  5.1080723 ,  2.5264683 ],\n         [ 1.46786   ,  2.1413794 ,  3.0367787 ],\n         [ 4.1294394 ,  2.0255933 ,  2.0881217 ]]],\n\n\n       ...,\n\n\n       [[[ 1.4028338 ,  2.3907425 ,  2.2522025 ],\n         [ 2.493633  ,  1.9662061 ,  2.0426192 ],\n         [ 1.5493696 ,  2.8055353 ,  1.851765  ],\n         ...,\n         [ 1.7499207 ,  3.467791  ,  3.1512928 ],\n         [ 3.4898849 ,  2.157675  ,  3.3743377 ],\n         [ 1.4025929 ,  2.4237416 ,  0.87953925]],\n\n        [[ 2.3995333 ,  2.49432   ,  1.9458016 ],\n         [ 1.9190168 ,  2.345511  ,  0.98973763],\n         [ 2.6042864 ,  2.11409   ,  2.6535652 ],\n         ...,\n         [ 1.5868535 ,  2.1567347 ,  1.104245  ],\n         [ 1.0187413 ,  2.307653  ,  2.017148  ],\n         [ 2.1179614 ,  1.2289304 ,  2.3303492 ]],\n\n        [[ 0.76728785,  1.1725264 ,  2.9996645 ],\n         [ 0.93710154,  1.7524664 ,  1.9222306 ],\n         [ 1.4759439 ,  1.5846875 ,  2.0695539 ],\n         ...,\n         [ 1.3127695 ,  2.3959095 ,  1.1439141 ],\n         [ 1.7722441 ,  2.2565715 ,  0.03913463],\n         [ 2.1324866 ,  1.5055475 ,  1.6696143 ]],\n\n        ...,\n\n        [[ 2.1293724 ,  1.5380621 ,  1.5160211 ],\n         [ 1.2982185 ,  2.295382  ,  1.531131  ],\n         [ 1.9021412 ,  2.1617453 ,  2.518719  ],\n         ...,\n         [ 2.3539286 ,  1.4106421 ,  1.723346  ],\n         [ 0.36895636,  2.734013  ,  3.0011265 ],\n         [ 2.0153081 ,  3.1495383 ,  1.6051303 ]],\n\n        [[ 2.2140365 ,  1.2201082 ,  1.0634109 ],\n         [ 2.4523034 ,  2.205943  ,  1.4501903 ],\n         [ 1.9216313 ,  3.0498054 ,  3.303527  ],\n         ...,\n         [ 1.6997157 ,  1.3539177 ,  2.434596  ],\n         [ 1.2867709 ,  2.2840672 ,  2.182364  ],\n         [ 2.3924568 ,  2.3403149 ,  2.274849  ]],\n\n        [[ 2.2148042 ,  2.529847  ,  1.0028914 ],\n         [ 2.1693325 ,  2.2492456 ,  2.4953027 ],\n         [ 2.0704901 ,  1.4292953 ,  0.6726518 ],\n         ...,\n         [ 1.5067334 ,  3.6642773 ,  1.7166756 ],\n         [ 1.2284458 ,  3.250842  ,  1.8002057 ],\n         [ 1.7050931 ,  1.2323303 ,  2.3249533 ]]],\n\n\n       [[[ 0.4750032 ,  0.29131293, -0.48074102],\n         [-0.38876972,  1.7729099 ,  0.35235587],\n         [-0.3897352 , -0.09012559, -0.16624539],\n         ...,\n         [-0.06316709,  0.3781898 , -0.67476046],\n         [-0.6629912 , -0.8770391 , -0.37348983],\n         [ 1.2713801 , -1.4077022 , -0.57288206]],\n\n        [[-0.16367155,  0.06898852, -0.31983143],\n         [-0.9424154 , -0.35314527,  0.33287543],\n         [-1.0972975 ,  0.10926501, -0.37710986],\n         ...,\n         [-0.72934145,  0.6660365 ,  0.12771197],\n         [-0.53929585, -0.7645569 , -0.2776166 ],\n         [ 0.99425125,  0.27605954,  0.64614433]],\n\n        [[-0.12326198,  0.6640395 , -0.1249213 ],\n         [ 0.08197961, -0.40779507, -1.142203  ],\n         [-0.32903   ,  0.1480283 , -0.72368443],\n         ...,\n         [ 0.8832713 ,  1.6282747 , -0.5096654 ],\n         [-0.38415906, -0.4625525 , -1.1661781 ],\n         [ 0.829548  ,  0.03985257,  0.6305059 ]],\n\n        ...,\n\n        [[ 0.722336  , -1.1822698 , -0.07033029],\n         [-0.02407864,  1.1324542 ,  1.1258897 ],\n         [ 0.44378525, -0.01110658, -0.3125413 ],\n         ...,\n         [-1.4683325 , -0.02519519, -1.2436484 ],\n         [-0.06921189,  1.7889155 ,  1.1354667 ],\n         [-0.6626424 , -0.62703115, -0.28949636]],\n\n        [[-0.33001158,  0.35688698, -0.8012577 ],\n         [-0.03341176,  0.2949278 ,  1.3484769 ],\n         [-0.18184602,  0.1407568 ,  0.797316  ],\n         ...,\n         [ 0.5393818 , -0.45729282, -0.51659185],\n         [ 0.94918793,  0.40631762,  0.45904368],\n         [-0.3014739 ,  0.04882566, -0.37404788]],\n\n        [[-0.12715666,  1.3754628 ,  0.32691994],\n         [ 0.65305346,  0.36448622,  0.40027294],\n         [ 0.04075839, -0.9185941 ,  0.53259254],\n         ...,\n         [-1.682467  , -0.08031403,  0.05860366],\n         [-1.0375949 , -0.89499   , -0.5332034 ],\n         [-0.33307365, -0.38515747,  0.8754041 ]]],\n\n\n       [[[ 1.3063723 ,  1.5319716 ,  2.014951  ],\n         [ 2.8468618 ,  2.3067513 ,  2.8376858 ],\n         [ 1.5490278 ,  1.2266409 ,  2.245003  ],\n         ...,\n         [ 1.4862314 ,  2.2875633 ,  1.9082581 ],\n         [ 1.8714237 ,  1.8924437 ,  0.82943046],\n         [ 1.6405774 ,  1.9280303 ,  2.7398686 ]],\n\n        [[ 1.4605985 ,  2.8569434 ,  2.1483233 ],\n         [ 1.5038428 ,  1.3958219 ,  2.1967964 ],\n         [ 2.0950234 ,  1.9387767 ,  1.2882962 ],\n         ...,\n         [ 1.9225634 ,  2.6140668 ,  1.0309978 ],\n         [ 1.3366765 ,  0.5939733 ,  3.2851388 ],\n         [ 1.4707733 ,  2.8589215 ,  2.564623  ]],\n\n        [[ 2.0691645 ,  1.0303723 ,  1.4941325 ],\n         [ 2.3699305 ,  3.2274437 ,  2.3512282 ],\n         [ 1.9610125 ,  3.045416  ,  0.766234  ],\n         ...,\n         [ 2.5964744 ,  0.9172318 ,  2.31593   ],\n         [ 2.6266634 ,  2.1199138 ,  2.1341808 ],\n         [ 2.1606534 ,  3.1259775 ,  2.9380038 ]],\n\n        ...,\n\n        [[ 2.096126  ,  0.897555  ,  1.0999836 ],\n         [ 1.5997677 ,  1.4542931 ,  2.0235274 ],\n         [ 1.8308755 ,  2.196904  ,  1.273673  ],\n         ...,\n         [ 2.6180751 ,  3.234416  ,  3.16863   ],\n         [ 1.7303406 ,  2.2723718 ,  1.3198477 ],\n         [ 1.067374  ,  4.4203115 ,  0.7426219 ]],\n\n        [[ 2.0643759 ,  1.6871331 ,  2.5907617 ],\n         [ 2.413697  ,  1.9718913 ,  1.4939768 ],\n         [ 1.1769352 ,  2.4646072 ,  1.3011198 ],\n         ...,\n         [ 2.7750862 ,  1.9659636 ,  2.3868408 ],\n         [ 1.9294084 ,  3.5892377 ,  1.8995956 ],\n         [ 2.5566657 ,  0.14411655,  2.4005992 ]],\n\n        [[ 2.1256766 ,  1.3137555 ,  0.38452345],\n         [ 2.3379958 ,  2.4547694 ,  2.5275826 ],\n         [ 1.9896967 ,  2.674703  ,  1.8594806 ],\n         ...,\n         [ 2.3514748 ,  3.1069949 ,  2.3862247 ],\n         [ 1.5740666 ,  0.7704987 ,  3.4851625 ],\n         [ 1.500814  ,  2.172325  ,  1.263606  ]]]], dtype=float32), array([[1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[-0.6169634 , -0.37248182,  0.7878938 ],\n         [ 0.40366042,  0.5577541 ,  0.02086093],\n         [ 0.7035145 ,  0.3869761 ,  0.06264535],\n         ...,\n         [ 1.2345504 , -0.9233932 ,  0.60073644],\n         [ 0.10545161,  0.11465842, -1.1345193 ],\n         [-0.2979125 , -1.4554605 ,  0.44642434]],\n\n        [[-0.2771645 ,  1.3618963 , -0.7577122 ],\n         [ 0.11942147,  0.34836915,  0.0355806 ],\n         [ 1.0526915 , -0.6212446 ,  0.54652774],\n         ...,\n         [ 0.1740477 , -0.6567239 , -0.28886512],\n         [-0.6520048 ,  0.3753879 , -0.5690634 ],\n         [ 1.3816527 , -0.3077712 ,  0.5049778 ]],\n\n        [[-0.29272005,  0.18021485,  0.8393912 ],\n         [ 0.04341648,  0.24096262, -1.5569817 ],\n         [-1.3640162 ,  1.243244  ,  0.1495353 ],\n         ...,\n         [-1.3715885 ,  0.8625315 ,  0.70525604],\n         [ 0.3954112 , -0.05708152,  0.01140277],\n         [ 0.00911271, -0.96333665,  0.13054821]],\n\n        ...,\n\n        [[ 0.8635569 , -0.38255468, -0.35835895],\n         [ 0.752221  , -0.73486626, -0.2963764 ],\n         [-0.22311233,  1.0203657 , -0.5458184 ],\n         ...,\n         [-0.5310997 ,  0.28336406, -0.3690367 ],\n         [ 0.27080816, -0.71317947, -0.33932403],\n         [ 0.58230907,  0.41462022, -0.9351847 ]],\n\n        [[-0.76798296, -0.53060216,  0.7747057 ],\n         [ 0.82066345, -0.7092613 , -0.3852562 ],\n         [ 0.41517398, -0.4842531 , -0.06706469],\n         ...,\n         [-0.24575499, -0.7747958 ,  1.1546247 ],\n         [-0.160108  , -0.3581148 , -1.5682344 ],\n         [ 0.9355976 ,  1.5282104 , -0.1843824 ]],\n\n        [[-0.5694715 ,  0.31995344, -0.0557727 ],\n         [ 0.01863769,  1.0155237 ,  0.2441942 ],\n         [ 1.105511  ,  0.14191593,  0.28282514],\n         ...,\n         [-0.2671563 ,  0.670651  , -0.21244745],\n         [ 1.2026998 ,  0.62295353,  0.8024933 ],\n         [ 0.79175466, -0.1315856 , -0.13180898]]],\n\n\n       [[[ 3.130134  ,  2.4900804 ,  1.6551648 ],\n         [ 2.2970138 ,  2.0360866 ,  0.79640824],\n         [ 2.2889855 ,  1.1471825 ,  2.5754166 ],\n         ...,\n         [ 2.0128982 ,  1.5180528 ,  1.8329486 ],\n         [ 1.4715149 ,  1.9873738 ,  2.7224708 ],\n         [ 2.275847  ,  1.6219102 ,  2.5664804 ]],\n\n        [[ 0.8036116 ,  2.3948069 ,  1.0490047 ],\n         [ 1.8822153 ,  2.3545206 ,  3.127735  ],\n         [ 3.0462852 ,  2.2171335 ,  1.9862069 ],\n         ...,\n         [ 1.9121451 ,  2.4331493 ,  2.4318645 ],\n         [ 1.844102  ,  3.0212533 ,  2.4611013 ],\n         [ 3.195349  ,  2.2285287 ,  1.9942865 ]],\n\n        [[ 1.6498082 ,  0.5170145 ,  2.8470562 ],\n         [ 3.2502773 ,  3.1577282 ,  1.4964621 ],\n         [ 2.003357  ,  2.1236434 ,  1.1749458 ],\n         ...,\n         [ 1.4380211 ,  2.4411542 ,  2.092083  ],\n         [ 2.4458926 ,  2.2395954 ,  1.8966442 ],\n         [ 1.9056145 ,  2.2379098 ,  2.2379866 ]],\n\n        ...,\n\n        [[ 1.5673115 ,  1.6121268 ,  2.9911776 ],\n         [ 2.3646548 ,  3.2190406 ,  2.8675058 ],\n         [ 1.9874448 ,  0.6421928 ,  2.6622856 ],\n         ...,\n         [ 3.4846117 ,  2.5146947 ,  1.595399  ],\n         [ 2.2219884 ,  2.7844195 ,  3.4310193 ],\n         [ 1.1728699 ,  1.7303414 ,  0.68855107]],\n\n        [[ 2.4863942 ,  2.3118765 ,  1.4781995 ],\n         [ 0.95816135,  2.1748357 ,  1.8936361 ],\n         [ 1.3520743 ,  3.1432805 ,  2.9697936 ],\n         ...,\n         [ 0.851801  ,  2.5521152 ,  2.936081  ],\n         [ 1.4589796 ,  1.8304938 ,  1.2051159 ],\n         [ 2.067753  ,  2.1967835 ,  3.3149803 ]],\n\n        [[ 1.8559878 ,  2.0717638 ,  2.5827253 ],\n         [ 2.4297256 ,  2.0050285 ,  1.0201143 ],\n         [ 1.7312022 ,  1.3824514 ,  1.5995172 ],\n         ...,\n         [ 2.0318997 ,  2.4519808 ,  1.5389456 ],\n         [ 1.0397668 ,  2.4974484 ,  2.0095239 ],\n         [ 1.0756042 ,  2.5709438 ,  1.7473999 ]]],\n\n\n       [[[ 2.9207203 ,  3.8026888 ,  2.5416348 ],\n         [ 3.9538422 ,  3.312025  ,  3.128903  ],\n         [ 3.5332925 ,  3.3320153 ,  2.7072814 ],\n         ...,\n         [ 3.9902718 ,  2.5909028 ,  3.0616577 ],\n         [ 2.8474607 ,  3.1960135 ,  3.6302707 ],\n         [ 4.466976  ,  3.1700954 ,  3.171978  ]],\n\n        [[ 2.1354911 ,  3.6901155 ,  3.7271771 ],\n         [ 2.8280199 ,  3.397258  ,  2.4251642 ],\n         [ 3.00132   ,  2.8711793 ,  1.5242589 ],\n         ...,\n         [ 2.6825771 ,  3.9048622 ,  3.6680439 ],\n         [ 2.4736319 ,  2.567637  ,  2.8319442 ],\n         [ 3.3198187 ,  2.7390919 ,  2.5199661 ]],\n\n        [[ 2.387618  ,  3.1881328 ,  2.1806476 ],\n         [ 2.652462  ,  3.271998  ,  3.1414149 ],\n         [ 3.59274   ,  3.492191  ,  3.0523067 ],\n         ...,\n         [ 2.634879  ,  3.3756266 ,  3.2545629 ],\n         [ 2.7821307 ,  1.8805096 ,  2.716208  ],\n         [ 3.1112378 ,  3.5038922 ,  4.1498427 ]],\n\n        ...,\n\n        [[ 2.2845051 ,  4.015944  ,  3.709031  ],\n         [ 3.9267917 ,  3.2519615 ,  2.4645216 ],\n         [ 3.7733889 ,  2.826965  ,  3.306104  ],\n         ...,\n         [ 3.5554278 ,  2.140966  ,  2.8479111 ],\n         [ 2.4519029 ,  1.9650307 ,  3.2403653 ],\n         [ 2.7343636 ,  2.8119025 ,  2.6728027 ]],\n\n        [[ 1.6626935 ,  2.8475578 ,  1.9793038 ],\n         [ 2.7302816 ,  2.6977668 ,  3.5902052 ],\n         [ 2.8539608 ,  2.654275  ,  3.060191  ],\n         ...,\n         [ 4.4034986 ,  3.2498317 ,  1.8630111 ],\n         [ 3.2239945 ,  1.6552397 ,  4.0919003 ],\n         [ 2.7825577 ,  2.6018248 ,  2.7787256 ]],\n\n        [[ 2.6605425 ,  3.5004268 ,  1.6222284 ],\n         [ 3.008486  ,  2.5930777 ,  1.9491125 ],\n         [ 3.2143583 ,  3.145505  ,  2.9745436 ],\n         ...,\n         [ 3.839159  ,  5.1080723 ,  2.5264683 ],\n         [ 1.46786   ,  2.1413794 ,  3.0367787 ],\n         [ 4.1294394 ,  2.0255933 ,  2.0881217 ]]],\n\n\n       ...,\n\n\n       [[[ 1.4028338 ,  2.3907425 ,  2.2522025 ],\n         [ 2.493633  ,  1.9662061 ,  2.0426192 ],\n         [ 1.5493696 ,  2.8055353 ,  1.851765  ],\n         ...,\n         [ 1.7499207 ,  3.467791  ,  3.1512928 ],\n         [ 3.4898849 ,  2.157675  ,  3.3743377 ],\n         [ 1.4025929 ,  2.4237416 ,  0.87953925]],\n\n        [[ 2.3995333 ,  2.49432   ,  1.9458016 ],\n         [ 1.9190168 ,  2.345511  ,  0.98973763],\n         [ 2.6042864 ,  2.11409   ,  2.6535652 ],\n         ...,\n         [ 1.5868535 ,  2.1567347 ,  1.104245  ],\n         [ 1.0187413 ,  2.307653  ,  2.017148  ],\n         [ 2.1179614 ,  1.2289304 ,  2.3303492 ]],\n\n        [[ 0.76728785,  1.1725264 ,  2.9996645 ],\n         [ 0.93710154,  1.7524664 ,  1.9222306 ],\n         [ 1.4759439 ,  1.5846875 ,  2.0695539 ],\n         ...,\n         [ 1.3127695 ,  2.3959095 ,  1.1439141 ],\n         [ 1.7722441 ,  2.2565715 ,  0.03913463],\n         [ 2.1324866 ,  1.5055475 ,  1.6696143 ]],\n\n        ...,\n\n        [[ 2.1293724 ,  1.5380621 ,  1.5160211 ],\n         [ 1.2982185 ,  2.295382  ,  1.531131  ],\n         [ 1.9021412 ,  2.1617453 ,  2.518719  ],\n         ...,\n         [ 2.3539286 ,  1.4106421 ,  1.723346  ],\n         [ 0.36895636,  2.734013  ,  3.0011265 ],\n         [ 2.0153081 ,  3.1495383 ,  1.6051303 ]],\n\n        [[ 2.2140365 ,  1.2201082 ,  1.0634109 ],\n         [ 2.4523034 ,  2.205943  ,  1.4501903 ],\n         [ 1.9216313 ,  3.0498054 ,  3.303527  ],\n         ...,\n         [ 1.6997157 ,  1.3539177 ,  2.434596  ],\n         [ 1.2867709 ,  2.2840672 ,  2.182364  ],\n         [ 2.3924568 ,  2.3403149 ,  2.274849  ]],\n\n        [[ 2.2148042 ,  2.529847  ,  1.0028914 ],\n         [ 2.1693325 ,  2.2492456 ,  2.4953027 ],\n         [ 2.0704901 ,  1.4292953 ,  0.6726518 ],\n         ...,\n         [ 1.5067334 ,  3.6642773 ,  1.7166756 ],\n         [ 1.2284458 ,  3.250842  ,  1.8002057 ],\n         [ 1.7050931 ,  1.2323303 ,  2.3249533 ]]],\n\n\n       [[[ 0.4750032 ,  0.29131293, -0.48074102],\n         [-0.38876972,  1.7729099 ,  0.35235587],\n         [-0.3897352 , -0.09012559, -0.16624539],\n         ...,\n         [-0.06316709,  0.3781898 , -0.67476046],\n         [-0.6629912 , -0.8770391 , -0.37348983],\n         [ 1.2713801 , -1.4077022 , -0.57288206]],\n\n        [[-0.16367155,  0.06898852, -0.31983143],\n         [-0.9424154 , -0.35314527,  0.33287543],\n         [-1.0972975 ,  0.10926501, -0.37710986],\n         ...,\n         [-0.72934145,  0.6660365 ,  0.12771197],\n         [-0.53929585, -0.7645569 , -0.2776166 ],\n         [ 0.99425125,  0.27605954,  0.64614433]],\n\n        [[-0.12326198,  0.6640395 , -0.1249213 ],\n         [ 0.08197961, -0.40779507, -1.142203  ],\n         [-0.32903   ,  0.1480283 , -0.72368443],\n         ...,\n         [ 0.8832713 ,  1.6282747 , -0.5096654 ],\n         [-0.38415906, -0.4625525 , -1.1661781 ],\n         [ 0.829548  ,  0.03985257,  0.6305059 ]],\n\n        ...,\n\n        [[ 0.722336  , -1.1822698 , -0.07033029],\n         [-0.02407864,  1.1324542 ,  1.1258897 ],\n         [ 0.44378525, -0.01110658, -0.3125413 ],\n         ...,\n         [-1.4683325 , -0.02519519, -1.2436484 ],\n         [-0.06921189,  1.7889155 ,  1.1354667 ],\n         [-0.6626424 , -0.62703115, -0.28949636]],\n\n        [[-0.33001158,  0.35688698, -0.8012577 ],\n         [-0.03341176,  0.2949278 ,  1.3484769 ],\n         [-0.18184602,  0.1407568 ,  0.797316  ],\n         ...,\n         [ 0.5393818 , -0.45729282, -0.51659185],\n         [ 0.94918793,  0.40631762,  0.45904368],\n         [-0.3014739 ,  0.04882566, -0.37404788]],\n\n        [[-0.12715666,  1.3754628 ,  0.32691994],\n         [ 0.65305346,  0.36448622,  0.40027294],\n         [ 0.04075839, -0.9185941 ,  0.53259254],\n         ...,\n         [-1.682467  , -0.08031403,  0.05860366],\n         [-1.0375949 , -0.89499   , -0.5332034 ],\n         [-0.33307365, -0.38515747,  0.8754041 ]]],\n\n\n       [[[ 1.3063723 ,  1.5319716 ,  2.014951  ],\n         [ 2.8468618 ,  2.3067513 ,  2.8376858 ],\n         [ 1.5490278 ,  1.2266409 ,  2.245003  ],\n         ...,\n         [ 1.4862314 ,  2.2875633 ,  1.9082581 ],\n         [ 1.8714237 ,  1.8924437 ,  0.82943046],\n         [ 1.6405774 ,  1.9280303 ,  2.7398686 ]],\n\n        [[ 1.4605985 ,  2.8569434 ,  2.1483233 ],\n         [ 1.5038428 ,  1.3958219 ,  2.1967964 ],\n         [ 2.0950234 ,  1.9387767 ,  1.2882962 ],\n         ...,\n         [ 1.9225634 ,  2.6140668 ,  1.0309978 ],\n         [ 1.3366765 ,  0.5939733 ,  3.2851388 ],\n         [ 1.4707733 ,  2.8589215 ,  2.564623  ]],\n\n        [[ 2.0691645 ,  1.0303723 ,  1.4941325 ],\n         [ 2.3699305 ,  3.2274437 ,  2.3512282 ],\n         [ 1.9610125 ,  3.045416  ,  0.766234  ],\n         ...,\n         [ 2.5964744 ,  0.9172318 ,  2.31593   ],\n         [ 2.6266634 ,  2.1199138 ,  2.1341808 ],\n         [ 2.1606534 ,  3.1259775 ,  2.9380038 ]],\n\n        ...,\n\n        [[ 2.096126  ,  0.897555  ,  1.0999836 ],\n         [ 1.5997677 ,  1.4542931 ,  2.0235274 ],\n         [ 1.8308755 ,  2.196904  ,  1.273673  ],\n         ...,\n         [ 2.6180751 ,  3.234416  ,  3.16863   ],\n         [ 1.7303406 ,  2.2723718 ,  1.3198477 ],\n         [ 1.067374  ,  4.4203115 ,  0.7426219 ]],\n\n        [[ 2.0643759 ,  1.6871331 ,  2.5907617 ],\n         [ 2.413697  ,  1.9718913 ,  1.4939768 ],\n         [ 1.1769352 ,  2.4646072 ,  1.3011198 ],\n         ...,\n         [ 2.7750862 ,  1.9659636 ,  2.3868408 ],\n         [ 1.9294084 ,  3.5892377 ,  1.8995956 ],\n         [ 2.5566657 ,  0.14411655,  2.4005992 ]],\n\n        [[ 2.1256766 ,  1.3137555 ,  0.38452345],\n         [ 2.3379958 ,  2.4547694 ,  2.5275826 ],\n         [ 1.9896967 ,  2.674703  ,  1.8594806 ],\n         ...,\n         [ 2.3514748 ,  3.1069949 ,  2.3862247 ],\n         [ 1.5740666 ,  0.7704987 ,  3.4851625 ],\n         [ 1.500814  ,  2.172325  ,  1.263606  ]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "y": {
                                    "variable_value": "array([[1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.8326565, 0.625]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295b3230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295bf1e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.9791234064102173, 0.53]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295c72d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.84219456, 0.8125], [0.8445889, 0.5], [0.7175163, 0.625], [0.9603627, 0.625], [0.71819186, 0.6875], [0.9456136, 0.75], [0.80674386, 0.75], [0.81980354, 0.875], [0.9257067, 0.5625], [0.9196132, 0.625], [0.9134937, 0.4375], [0.8399728, 0.75], [0.660275, 0.875]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 2.83667660e+00,  2.60783553e+00,  4.37433052e+00],\n         [ 2.54969549e+00,  3.16127992e+00,  2.65346861e+00],\n         [ 3.80445910e+00,  3.18947768e+00,  2.98657513e+00],\n         ...,\n         [ 2.06796527e+00,  2.45183802e+00,  3.75692081e+00],\n         [ 3.40670109e+00,  2.78149462e+00,  2.69031525e+00],\n         [ 2.81665587e+00,  2.57369828e+00,  3.21477866e+00]],\n\n        [[ 2.55148816e+00,  2.83397889e+00,  2.43343496e+00],\n         [ 2.36831331e+00,  3.27559686e+00,  3.18681788e+00],\n         [ 2.69209743e+00,  2.39710617e+00,  2.98126435e+00],\n         ...,\n         [ 3.13079190e+00,  3.16696215e+00,  3.53823352e+00],\n         [ 2.10467887e+00,  1.95778728e+00,  2.30427527e+00],\n         [ 3.15628743e+00,  2.33624053e+00,  2.87761068e+00]],\n\n        [[ 1.59160447e+00,  2.58021450e+00,  3.56314254e+00],\n         [ 2.99761724e+00,  2.56436849e+00,  2.92019916e+00],\n         [ 4.14525700e+00,  3.81041694e+00,  2.90654325e+00],\n         ...,\n         [ 3.08623219e+00,  1.39526796e+00,  2.62820029e+00],\n         [ 1.83231938e+00,  2.04380965e+00,  3.36089373e+00],\n         [ 3.10573792e+00,  3.23049402e+00,  3.11728430e+00]],\n\n        ...,\n\n        [[ 1.77130258e+00,  2.76595473e+00,  3.80431151e+00],\n         [ 3.63706684e+00,  2.74600434e+00,  3.13950539e+00],\n         [ 2.96942496e+00,  2.17361307e+00,  2.95514178e+00],\n         ...,\n         [ 2.82194519e+00,  4.15015078e+00,  2.48415422e+00],\n         [ 3.18165469e+00,  3.43232560e+00,  2.56943989e+00],\n         [ 2.45074224e+00,  3.39117718e+00,  2.41993093e+00]],\n\n        [[ 3.97493148e+00,  3.12042403e+00,  3.20573258e+00],\n         [ 1.85162675e+00,  2.33680630e+00,  3.72892547e+00],\n         [ 2.37176919e+00,  3.74576759e+00,  4.06484699e+00],\n         ...,\n         [ 1.34069550e+00,  2.71984935e+00,  3.31894469e+00],\n         [ 2.39668393e+00,  2.49442053e+00,  3.86464667e+00],\n         [ 2.71098757e+00,  4.42093897e+00,  2.62680912e+00]],\n\n        [[ 2.06360769e+00,  3.17863107e+00,  3.64070868e+00],\n         [ 3.36544490e+00,  1.92869365e+00,  3.08810925e+00],\n         [ 3.32965803e+00,  2.97948980e+00,  3.35643578e+00],\n         ...,\n         [ 3.17360830e+00,  3.44394207e+00,  3.60101962e+00],\n         [ 1.35676706e+00,  3.34768629e+00,  3.83518839e+00],\n         [ 3.89232516e+00,  3.07546544e+00,  2.59913921e+00]]],\n\n\n       [[[ 3.49498367e+00,  2.72179985e+00,  3.66060472e+00],\n         [ 3.14107060e+00,  1.68140364e+00,  1.69079804e+00],\n         [ 2.04904175e+00,  2.46047115e+00,  3.49503517e+00],\n         ...,\n         [ 4.59789085e+00,  2.79437757e+00,  2.69975734e+00],\n         [ 4.01055717e+00,  1.96150684e+00,  2.39211154e+00],\n         [ 3.07895780e+00,  2.94815612e+00,  3.16025925e+00]],\n\n        [[ 1.20484233e+00,  3.76296067e+00,  3.11240220e+00],\n         [ 2.37368464e+00,  2.80228305e+00,  3.04904175e+00],\n         [ 3.70235395e+00,  3.57307363e+00,  2.96373820e+00],\n         ...,\n         [ 2.69285369e+00,  3.25255299e+00,  1.60211313e+00],\n         [ 3.33540082e+00,  3.64052534e+00,  4.63110924e+00],\n         [ 3.12107635e+00,  2.98101807e+00,  3.09552860e+00]],\n\n        [[ 2.35683346e+00,  3.95658946e+00,  3.26360130e+00],\n         [ 4.31600046e+00,  3.19076228e+00,  3.19277096e+00],\n         [ 2.49703836e+00,  2.66413784e+00,  2.65018511e+00],\n         ...,\n         [ 2.75239563e+00,  2.93397760e+00,  3.39320564e+00],\n         [ 2.81398749e+00,  2.39018989e+00,  2.18923140e+00],\n         [ 3.26025820e+00,  3.25865960e+00,  2.36428022e+00]],\n\n        ...,\n\n        [[ 3.79009485e+00,  2.40594006e+00,  3.21241212e+00],\n         [ 1.74474871e+00,  3.63823724e+00,  3.16720152e+00],\n         [ 1.94532669e+00,  1.67339408e+00,  4.11449957e+00],\n         ...,\n         [ 3.76253247e+00,  2.90012622e+00,  3.27567124e+00],\n         [ 3.64537525e+00,  1.98676300e+00,  3.58325338e+00],\n         [ 2.09122467e+00,  2.95058703e+00,  2.34027123e+00]],\n\n        [[ 2.53916121e+00,  3.60693598e+00,  2.98609090e+00],\n         [ 3.43773770e+00,  2.64773583e+00,  3.39392138e+00],\n         [ 3.65844345e+00,  2.26903820e+00,  1.94895744e+00],\n         ...,\n         [ 1.93845582e+00,  2.64585876e+00,  3.98047352e+00],\n         [ 3.28107285e+00,  2.90471935e+00,  3.71565890e+00],\n         [ 3.49147415e+00,  2.20905566e+00,  2.93211460e+00]],\n\n        [[ 2.72207499e+00,  2.66694283e+00,  4.07066011e+00],\n         [ 3.60421085e+00,  3.95024681e+00,  3.65461826e+00],\n         [ 4.05022335e+00,  2.93121600e+00,  1.74844551e+00],\n         ...,\n         [ 2.76003551e+00,  2.61875725e+00,  1.93509543e+00],\n         [ 3.49314260e+00,  2.89229584e+00,  3.40451574e+00],\n         [ 3.30668378e+00,  3.32888484e+00,  2.90414262e+00]]],\n\n\n       [[[ 4.43626493e-01, -3.47246408e-01, -2.85249185e-02],\n         [ 6.95342004e-01,  3.94794345e-01,  9.50072527e-01],\n         [ 7.47566760e-01, -2.00710595e-02, -8.20382714e-01],\n         ...,\n         [-9.08466339e-01, -2.30393887e-01, -2.48024821e-01],\n         [-1.56755581e-01,  1.03091441e-01, -1.71100631e-01],\n         [ 8.08650374e-01, -3.01564932e-01, -1.20689940e+00]],\n\n        [[-1.61477888e+00,  2.50281036e-01,  2.12548092e-01],\n         [-6.19801879e-01, -3.19093674e-01, -5.62098742e-01],\n         [ 1.65302968e+00, -6.95594549e-01, -6.39637411e-01],\n         ...,\n         [ 3.75516683e-01, -9.81280565e-01,  6.46852314e-01],\n         [ 2.09356084e-01, -1.19360089e+00, -8.44912171e-01],\n         [-7.50574400e-04, -5.63684881e-01,  4.69016641e-01]],\n\n        [[-1.45342514e-01,  5.23461521e-01,  1.03427529e-01],\n         [-3.64787996e-01,  6.78111017e-01,  1.96581805e+00],\n         [ 1.13327235e-01,  2.15464085e-01,  7.94413745e-01],\n         ...,\n         [-1.23559326e-01, -4.84588206e-01,  1.52586973e+00],\n         [-1.48070192e+00, -8.78634512e-01, -5.58784425e-01],\n         [ 7.64927149e-01, -8.86427224e-01,  3.12316537e-01]],\n\n        ...,\n\n        [[-1.19938827e+00,  5.78681417e-02,  5.06466269e-01],\n         [ 4.12202835e-01, -1.26155362e-01,  5.02831459e-01],\n         [-4.41440821e-01,  2.10239366e-01,  5.03514528e-01],\n         ...,\n         [ 3.82268906e-01,  7.91855156e-01, -3.08697820e-02],\n         [-5.63217223e-01,  1.20271862e+00,  4.46680516e-01],\n         [-3.14434558e-01, -5.73700547e-01,  7.97749981e-02]],\n\n        [[ 1.13433588e+00,  1.80862039e-01, -6.70380175e-01],\n         [-1.46615052e+00,  9.53335017e-02, -1.26678050e+00],\n         [-3.05024952e-01, -9.17479321e-02, -3.42574358e-01],\n         ...,\n         [ 6.71232402e-01,  7.16096312e-02,  3.14749032e-01],\n         [-2.47310907e-01,  9.97295260e-01, -7.67966449e-01],\n         [-8.65862310e-01, -2.64847368e-01,  1.21408470e-01]],\n\n        [[ 9.40535605e-01, -1.61452562e-01, -7.93978631e-01],\n         [ 1.03642499e+00,  1.13947904e+00, -4.23843414e-01],\n         [-4.37281765e-02, -8.95803869e-01, -7.30022252e-01],\n         ...,\n         [ 4.69268531e-01, -6.28648341e-01,  4.90897417e-01],\n         [ 2.65697867e-01, -3.39208305e-01, -5.51940739e-01],\n         [-9.41512048e-01, -2.76771963e-01, -3.98013026e-01]]],\n\n\n       ...,\n\n\n       [[[ 2.87827396e+00,  4.27889442e+00,  2.90533543e+00],\n         [ 2.73126221e+00,  3.13288856e+00,  2.17637634e+00],\n         [ 2.14448810e+00,  4.24124241e+00,  5.04952002e+00],\n         ...,\n         [ 1.94008899e+00,  4.29881477e+00,  2.40449429e+00],\n         [ 3.03921819e+00,  2.52291012e+00,  1.72206652e+00],\n         [ 2.30892515e+00,  2.93018532e+00,  4.03385592e+00]],\n\n        [[ 3.95906496e+00,  3.18210196e+00,  2.10806274e+00],\n         [ 3.57073569e+00,  2.75387669e+00,  3.44469571e+00],\n         [ 2.78712010e+00,  2.00453568e+00,  2.22025990e+00],\n         ...,\n         [ 3.59112191e+00,  3.38583970e+00,  3.42166471e+00],\n         [ 2.30005169e+00,  4.22112799e+00,  2.76585150e+00],\n         [ 3.39640784e+00,  3.21397901e+00,  2.16401100e+00]],\n\n        [[ 3.29504180e+00,  2.11922073e+00,  2.58547997e+00],\n         [ 2.77356386e+00,  3.93707895e+00,  3.13193345e+00],\n         [ 1.95213878e+00,  4.53787756e+00,  2.71926117e+00],\n         ...,\n         [ 2.56672144e+00,  3.77233648e+00,  2.03824878e+00],\n         [ 2.56527901e+00,  3.76086402e+00,  3.33058238e+00],\n         [ 2.48654938e+00,  3.09152055e+00,  2.45463324e+00]],\n\n        ...,\n\n        [[ 1.98119962e+00,  2.87318182e+00,  3.35575604e+00],\n         [ 1.34974682e+00,  2.87520814e+00,  2.77405357e+00],\n         [ 3.19511628e+00,  2.60894418e+00,  2.70289493e+00],\n         ...,\n         [ 4.21349669e+00,  3.71604443e+00,  2.71418405e+00],\n         [ 2.55316043e+00,  3.69749188e+00,  3.83867025e+00],\n         [ 3.28547478e+00,  3.72284341e+00,  2.33236957e+00]],\n\n        [[ 4.32054424e+00,  2.99198723e+00,  1.93065226e+00],\n         [ 2.25846457e+00,  3.21045470e+00,  2.70362306e+00],\n         [ 3.51359987e+00,  3.46160889e+00,  2.75541115e+00],\n         ...,\n         [ 1.54528284e+00,  2.60378337e+00,  1.35725427e+00],\n         [ 3.18413496e+00,  1.29787457e+00,  3.29031920e+00],\n         [ 3.32666969e+00,  2.26781869e+00,  3.47466946e+00]],\n\n        [[ 3.11540675e+00,  3.24079657e+00,  2.31083179e+00],\n         [ 3.15780735e+00,  2.55456877e+00,  2.71059394e+00],\n         [ 3.36832666e+00,  2.39891815e+00,  3.77370763e+00],\n         ...,\n         [ 3.48643088e+00,  2.15806293e+00,  3.76684165e+00],\n         [ 2.58713603e+00,  1.65208042e+00,  3.14684892e+00],\n         [ 2.66403508e+00,  2.42530799e+00,  3.69319272e+00]]],\n\n\n       [[[-3.06679875e-01,  5.45999050e-01,  1.46440804e+00],\n         [ 1.91961372e+00,  6.57326162e-01,  1.45496178e+00],\n         [ 9.51550975e-02,  3.16040635e-01,  6.11696184e-01],\n         ...,\n         [ 7.86096036e-01,  6.38321936e-01, -2.10330322e-01],\n         [ 2.65818030e-01,  1.34171987e+00,  2.68871397e-01],\n         [ 1.58188009e+00,  1.68246591e+00,  9.66273546e-01]],\n\n        [[ 8.98609579e-01,  1.04353726e+00,  1.38318896e+00],\n         [ 3.72098655e-01,  6.79108053e-02,  3.86289269e-01],\n         [-1.33698131e-03,  2.15515995e+00,  7.45988429e-01],\n         ...,\n         [-1.43948004e-01,  6.84950292e-01,  7.06787825e-01],\n         [ 1.04277894e-01,  1.70847189e+00,  2.07185894e-01],\n         [ 1.51991415e+00,  2.44278622e+00,  1.17184854e+00]],\n\n        [[ 1.36043334e+00,  1.36959398e+00, -2.94337183e-01],\n         [ 1.06501997e+00,  1.33158159e+00,  1.51296413e+00],\n         [ 3.02109778e-01,  1.43200171e+00,  2.01766777e+00],\n         ...,\n         [ 4.48216349e-02,  1.51660383e+00,  1.64122212e+00],\n         [ 1.82692558e-01,  7.62417436e-01,  2.02652287e+00],\n         [ 5.11612236e-01,  7.57058978e-01,  8.66101027e-01]],\n\n        ...,\n\n        [[ 2.12898922e+00,  8.82070288e-02,  9.64434326e-01],\n         [ 1.06032491e+00,  9.02860701e-01,  5.65486908e-01],\n         [ 1.69330311e+00,  8.58552516e-01,  1.52637601e+00],\n         ...,\n         [ 7.04561889e-01,  1.07248187e+00,  1.22166228e+00],\n         [ 6.63817585e-01,  8.40450108e-01,  1.07037544e+00],\n         [ 1.14743972e+00,  9.90426540e-01,  5.62678516e-01]],\n\n        [[ 1.12104368e+00,  1.56567025e+00,  1.37820685e+00],\n         [ 9.77486372e-01,  2.32690907e+00,  5.93659818e-01],\n         [ 2.13454589e-01, -1.64276719e-01,  2.08017206e+00],\n         ...,\n         [ 1.10753953e+00,  8.87477815e-01,  3.15997690e-01],\n         [-1.49735332e-01,  1.06008041e+00,  1.21570587e+00],\n         [ 1.61448061e+00,  1.78080511e+00,  7.43171722e-02]],\n\n        [[ 1.27305591e+00,  3.73218268e-01, -3.21916312e-01],\n         [ 2.17136645e+00,  1.32825935e+00,  1.91702688e+00],\n         [ 1.35493600e+00,  1.47093499e+00,  5.80531657e-01],\n         ...,\n         [ 7.54931629e-01,  2.90988177e-01,  6.66211069e-01],\n         [ 1.55316040e-01,  3.33785504e-01,  4.09685165e-01],\n         [ 1.00002456e+00,  1.97686434e+00,  8.57683897e-01]]],\n\n\n       [[[-5.94664454e-01, -1.65380940e-01, -4.70892251e-01],\n         [-1.34102032e-01,  7.21760035e-01,  8.37643147e-01],\n         [-5.50967634e-01,  3.72140527e-01,  1.22067726e+00],\n         ...,\n         [-2.05718443e-01, -2.08985105e-01, -1.25723287e-01],\n         [ 2.95296580e-01, -1.47630680e+00,  7.61368334e-01],\n         [ 2.02372879e-01, -1.51320532e-01, -4.98740882e-01]],\n\n        [[-3.13107640e-01,  3.53478760e-01,  1.38633025e+00],\n         [-3.25950384e-01, -5.06925046e-01, -3.32720280e-01],\n         [ 4.94489223e-01, -6.58479691e-01, -7.80621290e-01],\n         ...,\n         [ 1.08267391e+00, -2.02847317e-01,  1.93710238e-01],\n         [-8.13969612e-01,  5.71646094e-01, -2.19616294e-01],\n         [ 4.58408654e-01, -3.65447044e-01,  6.21199608e-02]],\n\n        [[-5.85338473e-01,  2.77995497e-01,  4.26354289e-01],\n         [ 9.91402507e-01,  1.42092395e+00, -5.45509934e-01],\n         [ 7.62738707e-03, -3.74983907e-01,  4.18458551e-01],\n         ...,\n         [-6.63445771e-01, -1.51208484e+00,  7.18564391e-01],\n         [-2.18058348e-01,  7.88533092e-01,  1.30498397e+00],\n         [ 6.00553632e-01, -8.92046332e-01,  1.65285730e+00]],\n\n        ...,\n\n        [[-4.03794736e-01,  9.16246414e-01, -3.60129774e-01],\n         [ 1.06709611e+00,  4.83683437e-01,  1.67744148e+00],\n         [-1.48073030e+00, -7.96672583e-01, -5.36321461e-01],\n         ...,\n         [ 1.58508629e-01, -3.74009848e-01,  6.81219876e-01],\n         [-6.48966610e-01, -5.06492816e-02,  9.06801105e-01],\n         [-2.02462211e-01,  1.25305545e+00,  6.76354885e-01]],\n\n        [[-2.57560670e-01,  1.05920827e+00,  7.07540989e-01],\n         [-4.51812178e-01, -1.07390553e-01,  4.61777717e-01],\n         [-4.57022309e-01,  2.83804417e-01, -1.07526898e+00],\n         ...,\n         [-3.91718686e-01,  2.14477241e-01,  3.85413915e-01],\n         [-5.90453565e-01,  1.33272409e+00, -6.90859318e-01],\n         [ 5.02391934e-01,  5.99622987e-02,  3.19724679e-01]],\n\n        [[ 9.12562728e-01,  1.29976857e+00, -9.02445912e-01],\n         [-2.94173956e-01,  4.37397778e-01,  6.00374043e-01],\n         [-2.21833467e-01, -5.83085656e-01,  1.09105296e-02],\n         ...,\n         [-3.69178861e-01,  2.33380541e-01,  2.37960830e-01],\n         [ 1.12455070e+00, -3.41952443e-01, -1.40194905e+00],\n         [ 2.46884391e-01,  2.21086442e-01, -6.43338144e-01]]]],\n      dtype=float32), array([[0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 2.83667660e+00,  2.60783553e+00,  4.37433052e+00],\n         [ 2.54969549e+00,  3.16127992e+00,  2.65346861e+00],\n         [ 3.80445910e+00,  3.18947768e+00,  2.98657513e+00],\n         ...,\n         [ 2.06796527e+00,  2.45183802e+00,  3.75692081e+00],\n         [ 3.40670109e+00,  2.78149462e+00,  2.69031525e+00],\n         [ 2.81665587e+00,  2.57369828e+00,  3.21477866e+00]],\n\n        [[ 2.55148816e+00,  2.83397889e+00,  2.43343496e+00],\n         [ 2.36831331e+00,  3.27559686e+00,  3.18681788e+00],\n         [ 2.69209743e+00,  2.39710617e+00,  2.98126435e+00],\n         ...,\n         [ 3.13079190e+00,  3.16696215e+00,  3.53823352e+00],\n         [ 2.10467887e+00,  1.95778728e+00,  2.30427527e+00],\n         [ 3.15628743e+00,  2.33624053e+00,  2.87761068e+00]],\n\n        [[ 1.59160447e+00,  2.58021450e+00,  3.56314254e+00],\n         [ 2.99761724e+00,  2.56436849e+00,  2.92019916e+00],\n         [ 4.14525700e+00,  3.81041694e+00,  2.90654325e+00],\n         ...,\n         [ 3.08623219e+00,  1.39526796e+00,  2.62820029e+00],\n         [ 1.83231938e+00,  2.04380965e+00,  3.36089373e+00],\n         [ 3.10573792e+00,  3.23049402e+00,  3.11728430e+00]],\n\n        ...,\n\n        [[ 1.77130258e+00,  2.76595473e+00,  3.80431151e+00],\n         [ 3.63706684e+00,  2.74600434e+00,  3.13950539e+00],\n         [ 2.96942496e+00,  2.17361307e+00,  2.95514178e+00],\n         ...,\n         [ 2.82194519e+00,  4.15015078e+00,  2.48415422e+00],\n         [ 3.18165469e+00,  3.43232560e+00,  2.56943989e+00],\n         [ 2.45074224e+00,  3.39117718e+00,  2.41993093e+00]],\n\n        [[ 3.97493148e+00,  3.12042403e+00,  3.20573258e+00],\n         [ 1.85162675e+00,  2.33680630e+00,  3.72892547e+00],\n         [ 2.37176919e+00,  3.74576759e+00,  4.06484699e+00],\n         ...,\n         [ 1.34069550e+00,  2.71984935e+00,  3.31894469e+00],\n         [ 2.39668393e+00,  2.49442053e+00,  3.86464667e+00],\n         [ 2.71098757e+00,  4.42093897e+00,  2.62680912e+00]],\n\n        [[ 2.06360769e+00,  3.17863107e+00,  3.64070868e+00],\n         [ 3.36544490e+00,  1.92869365e+00,  3.08810925e+00],\n         [ 3.32965803e+00,  2.97948980e+00,  3.35643578e+00],\n         ...,\n         [ 3.17360830e+00,  3.44394207e+00,  3.60101962e+00],\n         [ 1.35676706e+00,  3.34768629e+00,  3.83518839e+00],\n         [ 3.89232516e+00,  3.07546544e+00,  2.59913921e+00]]],\n\n\n       [[[ 3.49498367e+00,  2.72179985e+00,  3.66060472e+00],\n         [ 3.14107060e+00,  1.68140364e+00,  1.69079804e+00],\n         [ 2.04904175e+00,  2.46047115e+00,  3.49503517e+00],\n         ...,\n         [ 4.59789085e+00,  2.79437757e+00,  2.69975734e+00],\n         [ 4.01055717e+00,  1.96150684e+00,  2.39211154e+00],\n         [ 3.07895780e+00,  2.94815612e+00,  3.16025925e+00]],\n\n        [[ 1.20484233e+00,  3.76296067e+00,  3.11240220e+00],\n         [ 2.37368464e+00,  2.80228305e+00,  3.04904175e+00],\n         [ 3.70235395e+00,  3.57307363e+00,  2.96373820e+00],\n         ...,\n         [ 2.69285369e+00,  3.25255299e+00,  1.60211313e+00],\n         [ 3.33540082e+00,  3.64052534e+00,  4.63110924e+00],\n         [ 3.12107635e+00,  2.98101807e+00,  3.09552860e+00]],\n\n        [[ 2.35683346e+00,  3.95658946e+00,  3.26360130e+00],\n         [ 4.31600046e+00,  3.19076228e+00,  3.19277096e+00],\n         [ 2.49703836e+00,  2.66413784e+00,  2.65018511e+00],\n         ...,\n         [ 2.75239563e+00,  2.93397760e+00,  3.39320564e+00],\n         [ 2.81398749e+00,  2.39018989e+00,  2.18923140e+00],\n         [ 3.26025820e+00,  3.25865960e+00,  2.36428022e+00]],\n\n        ...,\n\n        [[ 3.79009485e+00,  2.40594006e+00,  3.21241212e+00],\n         [ 1.74474871e+00,  3.63823724e+00,  3.16720152e+00],\n         [ 1.94532669e+00,  1.67339408e+00,  4.11449957e+00],\n         ...,\n         [ 3.76253247e+00,  2.90012622e+00,  3.27567124e+00],\n         [ 3.64537525e+00,  1.98676300e+00,  3.58325338e+00],\n         [ 2.09122467e+00,  2.95058703e+00,  2.34027123e+00]],\n\n        [[ 2.53916121e+00,  3.60693598e+00,  2.98609090e+00],\n         [ 3.43773770e+00,  2.64773583e+00,  3.39392138e+00],\n         [ 3.65844345e+00,  2.26903820e+00,  1.94895744e+00],\n         ...,\n         [ 1.93845582e+00,  2.64585876e+00,  3.98047352e+00],\n         [ 3.28107285e+00,  2.90471935e+00,  3.71565890e+00],\n         [ 3.49147415e+00,  2.20905566e+00,  2.93211460e+00]],\n\n        [[ 2.72207499e+00,  2.66694283e+00,  4.07066011e+00],\n         [ 3.60421085e+00,  3.95024681e+00,  3.65461826e+00],\n         [ 4.05022335e+00,  2.93121600e+00,  1.74844551e+00],\n         ...,\n         [ 2.76003551e+00,  2.61875725e+00,  1.93509543e+00],\n         [ 3.49314260e+00,  2.89229584e+00,  3.40451574e+00],\n         [ 3.30668378e+00,  3.32888484e+00,  2.90414262e+00]]],\n\n\n       [[[ 4.43626493e-01, -3.47246408e-01, -2.85249185e-02],\n         [ 6.95342004e-01,  3.94794345e-01,  9.50072527e-01],\n         [ 7.47566760e-01, -2.00710595e-02, -8.20382714e-01],\n         ...,\n         [-9.08466339e-01, -2.30393887e-01, -2.48024821e-01],\n         [-1.56755581e-01,  1.03091441e-01, -1.71100631e-01],\n         [ 8.08650374e-01, -3.01564932e-01, -1.20689940e+00]],\n\n        [[-1.61477888e+00,  2.50281036e-01,  2.12548092e-01],\n         [-6.19801879e-01, -3.19093674e-01, -5.62098742e-01],\n         [ 1.65302968e+00, -6.95594549e-01, -6.39637411e-01],\n         ...,\n         [ 3.75516683e-01, -9.81280565e-01,  6.46852314e-01],\n         [ 2.09356084e-01, -1.19360089e+00, -8.44912171e-01],\n         [-7.50574400e-04, -5.63684881e-01,  4.69016641e-01]],\n\n        [[-1.45342514e-01,  5.23461521e-01,  1.03427529e-01],\n         [-3.64787996e-01,  6.78111017e-01,  1.96581805e+00],\n         [ 1.13327235e-01,  2.15464085e-01,  7.94413745e-01],\n         ...,\n         [-1.23559326e-01, -4.84588206e-01,  1.52586973e+00],\n         [-1.48070192e+00, -8.78634512e-01, -5.58784425e-01],\n         [ 7.64927149e-01, -8.86427224e-01,  3.12316537e-01]],\n\n        ...,\n\n        [[-1.19938827e+00,  5.78681417e-02,  5.06466269e-01],\n         [ 4.12202835e-01, -1.26155362e-01,  5.02831459e-01],\n         [-4.41440821e-01,  2.10239366e-01,  5.03514528e-01],\n         ...,\n         [ 3.82268906e-01,  7.91855156e-01, -3.08697820e-02],\n         [-5.63217223e-01,  1.20271862e+00,  4.46680516e-01],\n         [-3.14434558e-01, -5.73700547e-01,  7.97749981e-02]],\n\n        [[ 1.13433588e+00,  1.80862039e-01, -6.70380175e-01],\n         [-1.46615052e+00,  9.53335017e-02, -1.26678050e+00],\n         [-3.05024952e-01, -9.17479321e-02, -3.42574358e-01],\n         ...,\n         [ 6.71232402e-01,  7.16096312e-02,  3.14749032e-01],\n         [-2.47310907e-01,  9.97295260e-01, -7.67966449e-01],\n         [-8.65862310e-01, -2.64847368e-01,  1.21408470e-01]],\n\n        [[ 9.40535605e-01, -1.61452562e-01, -7.93978631e-01],\n         [ 1.03642499e+00,  1.13947904e+00, -4.23843414e-01],\n         [-4.37281765e-02, -8.95803869e-01, -7.30022252e-01],\n         ...,\n         [ 4.69268531e-01, -6.28648341e-01,  4.90897417e-01],\n         [ 2.65697867e-01, -3.39208305e-01, -5.51940739e-01],\n         [-9.41512048e-01, -2.76771963e-01, -3.98013026e-01]]],\n\n\n       ...,\n\n\n       [[[ 2.87827396e+00,  4.27889442e+00,  2.90533543e+00],\n         [ 2.73126221e+00,  3.13288856e+00,  2.17637634e+00],\n         [ 2.14448810e+00,  4.24124241e+00,  5.04952002e+00],\n         ...,\n         [ 1.94008899e+00,  4.29881477e+00,  2.40449429e+00],\n         [ 3.03921819e+00,  2.52291012e+00,  1.72206652e+00],\n         [ 2.30892515e+00,  2.93018532e+00,  4.03385592e+00]],\n\n        [[ 3.95906496e+00,  3.18210196e+00,  2.10806274e+00],\n         [ 3.57073569e+00,  2.75387669e+00,  3.44469571e+00],\n         [ 2.78712010e+00,  2.00453568e+00,  2.22025990e+00],\n         ...,\n         [ 3.59112191e+00,  3.38583970e+00,  3.42166471e+00],\n         [ 2.30005169e+00,  4.22112799e+00,  2.76585150e+00],\n         [ 3.39640784e+00,  3.21397901e+00,  2.16401100e+00]],\n\n        [[ 3.29504180e+00,  2.11922073e+00,  2.58547997e+00],\n         [ 2.77356386e+00,  3.93707895e+00,  3.13193345e+00],\n         [ 1.95213878e+00,  4.53787756e+00,  2.71926117e+00],\n         ...,\n         [ 2.56672144e+00,  3.77233648e+00,  2.03824878e+00],\n         [ 2.56527901e+00,  3.76086402e+00,  3.33058238e+00],\n         [ 2.48654938e+00,  3.09152055e+00,  2.45463324e+00]],\n\n        ...,\n\n        [[ 1.98119962e+00,  2.87318182e+00,  3.35575604e+00],\n         [ 1.34974682e+00,  2.87520814e+00,  2.77405357e+00],\n         [ 3.19511628e+00,  2.60894418e+00,  2.70289493e+00],\n         ...,\n         [ 4.21349669e+00,  3.71604443e+00,  2.71418405e+00],\n         [ 2.55316043e+00,  3.69749188e+00,  3.83867025e+00],\n         [ 3.28547478e+00,  3.72284341e+00,  2.33236957e+00]],\n\n        [[ 4.32054424e+00,  2.99198723e+00,  1.93065226e+00],\n         [ 2.25846457e+00,  3.21045470e+00,  2.70362306e+00],\n         [ 3.51359987e+00,  3.46160889e+00,  2.75541115e+00],\n         ...,\n         [ 1.54528284e+00,  2.60378337e+00,  1.35725427e+00],\n         [ 3.18413496e+00,  1.29787457e+00,  3.29031920e+00],\n         [ 3.32666969e+00,  2.26781869e+00,  3.47466946e+00]],\n\n        [[ 3.11540675e+00,  3.24079657e+00,  2.31083179e+00],\n         [ 3.15780735e+00,  2.55456877e+00,  2.71059394e+00],\n         [ 3.36832666e+00,  2.39891815e+00,  3.77370763e+00],\n         ...,\n         [ 3.48643088e+00,  2.15806293e+00,  3.76684165e+00],\n         [ 2.58713603e+00,  1.65208042e+00,  3.14684892e+00],\n         [ 2.66403508e+00,  2.42530799e+00,  3.69319272e+00]]],\n\n\n       [[[-3.06679875e-01,  5.45999050e-01,  1.46440804e+00],\n         [ 1.91961372e+00,  6.57326162e-01,  1.45496178e+00],\n         [ 9.51550975e-02,  3.16040635e-01,  6.11696184e-01],\n         ...,\n         [ 7.86096036e-01,  6.38321936e-01, -2.10330322e-01],\n         [ 2.65818030e-01,  1.34171987e+00,  2.68871397e-01],\n         [ 1.58188009e+00,  1.68246591e+00,  9.66273546e-01]],\n\n        [[ 8.98609579e-01,  1.04353726e+00,  1.38318896e+00],\n         [ 3.72098655e-01,  6.79108053e-02,  3.86289269e-01],\n         [-1.33698131e-03,  2.15515995e+00,  7.45988429e-01],\n         ...,\n         [-1.43948004e-01,  6.84950292e-01,  7.06787825e-01],\n         [ 1.04277894e-01,  1.70847189e+00,  2.07185894e-01],\n         [ 1.51991415e+00,  2.44278622e+00,  1.17184854e+00]],\n\n        [[ 1.36043334e+00,  1.36959398e+00, -2.94337183e-01],\n         [ 1.06501997e+00,  1.33158159e+00,  1.51296413e+00],\n         [ 3.02109778e-01,  1.43200171e+00,  2.01766777e+00],\n         ...,\n         [ 4.48216349e-02,  1.51660383e+00,  1.64122212e+00],\n         [ 1.82692558e-01,  7.62417436e-01,  2.02652287e+00],\n         [ 5.11612236e-01,  7.57058978e-01,  8.66101027e-01]],\n\n        ...,\n\n        [[ 2.12898922e+00,  8.82070288e-02,  9.64434326e-01],\n         [ 1.06032491e+00,  9.02860701e-01,  5.65486908e-01],\n         [ 1.69330311e+00,  8.58552516e-01,  1.52637601e+00],\n         ...,\n         [ 7.04561889e-01,  1.07248187e+00,  1.22166228e+00],\n         [ 6.63817585e-01,  8.40450108e-01,  1.07037544e+00],\n         [ 1.14743972e+00,  9.90426540e-01,  5.62678516e-01]],\n\n        [[ 1.12104368e+00,  1.56567025e+00,  1.37820685e+00],\n         [ 9.77486372e-01,  2.32690907e+00,  5.93659818e-01],\n         [ 2.13454589e-01, -1.64276719e-01,  2.08017206e+00],\n         ...,\n         [ 1.10753953e+00,  8.87477815e-01,  3.15997690e-01],\n         [-1.49735332e-01,  1.06008041e+00,  1.21570587e+00],\n         [ 1.61448061e+00,  1.78080511e+00,  7.43171722e-02]],\n\n        [[ 1.27305591e+00,  3.73218268e-01, -3.21916312e-01],\n         [ 2.17136645e+00,  1.32825935e+00,  1.91702688e+00],\n         [ 1.35493600e+00,  1.47093499e+00,  5.80531657e-01],\n         ...,\n         [ 7.54931629e-01,  2.90988177e-01,  6.66211069e-01],\n         [ 1.55316040e-01,  3.33785504e-01,  4.09685165e-01],\n         [ 1.00002456e+00,  1.97686434e+00,  8.57683897e-01]]],\n\n\n       [[[-5.94664454e-01, -1.65380940e-01, -4.70892251e-01],\n         [-1.34102032e-01,  7.21760035e-01,  8.37643147e-01],\n         [-5.50967634e-01,  3.72140527e-01,  1.22067726e+00],\n         ...,\n         [-2.05718443e-01, -2.08985105e-01, -1.25723287e-01],\n         [ 2.95296580e-01, -1.47630680e+00,  7.61368334e-01],\n         [ 2.02372879e-01, -1.51320532e-01, -4.98740882e-01]],\n\n        [[-3.13107640e-01,  3.53478760e-01,  1.38633025e+00],\n         [-3.25950384e-01, -5.06925046e-01, -3.32720280e-01],\n         [ 4.94489223e-01, -6.58479691e-01, -7.80621290e-01],\n         ...,\n         [ 1.08267391e+00, -2.02847317e-01,  1.93710238e-01],\n         [-8.13969612e-01,  5.71646094e-01, -2.19616294e-01],\n         [ 4.58408654e-01, -3.65447044e-01,  6.21199608e-02]],\n\n        [[-5.85338473e-01,  2.77995497e-01,  4.26354289e-01],\n         [ 9.91402507e-01,  1.42092395e+00, -5.45509934e-01],\n         [ 7.62738707e-03, -3.74983907e-01,  4.18458551e-01],\n         ...,\n         [-6.63445771e-01, -1.51208484e+00,  7.18564391e-01],\n         [-2.18058348e-01,  7.88533092e-01,  1.30498397e+00],\n         [ 6.00553632e-01, -8.92046332e-01,  1.65285730e+00]],\n\n        ...,\n\n        [[-4.03794736e-01,  9.16246414e-01, -3.60129774e-01],\n         [ 1.06709611e+00,  4.83683437e-01,  1.67744148e+00],\n         [-1.48073030e+00, -7.96672583e-01, -5.36321461e-01],\n         ...,\n         [ 1.58508629e-01, -3.74009848e-01,  6.81219876e-01],\n         [-6.48966610e-01, -5.06492816e-02,  9.06801105e-01],\n         [-2.02462211e-01,  1.25305545e+00,  6.76354885e-01]],\n\n        [[-2.57560670e-01,  1.05920827e+00,  7.07540989e-01],\n         [-4.51812178e-01, -1.07390553e-01,  4.61777717e-01],\n         [-4.57022309e-01,  2.83804417e-01, -1.07526898e+00],\n         ...,\n         [-3.91718686e-01,  2.14477241e-01,  3.85413915e-01],\n         [-5.90453565e-01,  1.33272409e+00, -6.90859318e-01],\n         [ 5.02391934e-01,  5.99622987e-02,  3.19724679e-01]],\n\n        [[ 9.12562728e-01,  1.29976857e+00, -9.02445912e-01],\n         [-2.94173956e-01,  4.37397778e-01,  6.00374043e-01],\n         [-2.21833467e-01, -5.83085656e-01,  1.09105296e-02],\n         ...,\n         [-3.69178861e-01,  2.33380541e-01,  2.37960830e-01],\n         [ 1.12455070e+00, -3.41952443e-01, -1.40194905e+00],\n         [ 2.46884391e-01,  2.21086442e-01, -6.43338144e-01]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "y": {
                                    "variable_value": "array([[0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.660275, 0.875]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295bfa50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295c3c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.8467151308059693, 0.675]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295afc30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.81817627, 0.6875], [0.79003507, 0.6875], [0.6746285, 0.625], [0.76725054, 0.625], [0.7786932, 0.625], [0.741174, 0.6875], [0.6385858, 0.75], [0.72837293, 0.5625], [0.86147237, 0.4375], [0.6047305, 0.9375], [0.81152064, 0.625], [0.69169545, 0.6875], [0.61843294, 0.75]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 1.22330117e+00,  2.65771604e+00,  3.10778999e+00],\n         [ 1.21966577e+00,  2.11599588e+00,  3.55215240e+00],\n         [ 1.70140970e+00,  2.06641698e+00,  1.40196109e+00],\n         ...,\n         [ 1.19943655e+00,  1.21371651e+00,  2.27142882e+00],\n         [ 2.74498987e+00,  2.09158015e+00,  1.58293486e+00],\n         [ 2.46213460e+00,  2.66007900e+00,  1.48513043e+00]],\n\n        [[ 2.01226664e+00,  1.98319519e+00,  1.38330245e+00],\n         [ 2.14855695e+00,  1.81486380e+00,  1.92136836e+00],\n         [ 2.52639651e+00,  3.10251474e+00,  1.54490221e+00],\n         ...,\n         [ 2.69710040e+00,  1.44115210e+00,  1.93258154e+00],\n         [ 1.67357147e+00,  1.61616755e+00,  9.86758173e-01],\n         [ 1.53922892e+00,  1.51829338e+00,  2.42134690e+00]],\n\n        [[ 3.29162025e+00,  2.96360254e+00,  2.07997966e+00],\n         [ 1.43629408e+00,  2.26057935e+00,  1.78877497e+00],\n         [ 2.00470877e+00,  9.28940773e-01,  1.06968594e+00],\n         ...,\n         [ 2.93791246e+00,  2.70944858e+00,  1.57654512e+00],\n         [ 1.74469745e+00,  2.80785108e+00,  2.12370563e+00],\n         [ 1.78129983e+00,  3.30816031e+00,  1.71201563e+00]],\n\n        ...,\n\n        [[ 3.10218215e+00,  2.16090536e+00,  2.14918613e+00],\n         [ 2.26929688e+00,  1.44892216e+00,  1.00097501e+00],\n         [ 2.37427139e+00,  3.05689454e+00,  3.06162214e+00],\n         ...,\n         [ 2.39369750e+00,  2.14758396e+00,  2.63344502e+00],\n         [ 2.14927053e+00,  2.12932515e+00,  1.88104355e+00],\n         [ 2.02544475e+00,  1.51992571e+00,  1.60388815e+00]],\n\n        [[ 1.34220266e+00,  2.79743266e+00,  2.30946636e+00],\n         [ 1.92115617e+00,  1.65754986e+00,  1.74866462e+00],\n         [ 2.66694951e+00,  2.48090267e+00,  1.16912842e+00],\n         ...,\n         [ 1.62001860e+00,  2.26141429e+00,  1.95490146e+00],\n         [ 5.19350052e-01,  4.15134478e+00,  1.55082297e+00],\n         [ 1.97569156e+00,  1.26307976e+00,  3.46800423e+00]],\n\n        [[ 7.16987789e-01,  2.46832228e+00,  1.58819175e+00],\n         [ 1.92285821e-01,  7.51526237e-01,  2.40321088e+00],\n         [ 3.60591102e+00,  2.06230354e+00,  1.96736419e+00],\n         ...,\n         [ 2.14396715e+00,  2.22737288e+00,  3.19877887e+00],\n         [ 2.87166762e+00,  3.88569522e+00,  1.43083215e+00],\n         [ 1.72937095e+00,  2.81511998e+00,  2.00190187e+00]]],\n\n\n       [[[ 1.20464814e+00,  2.32327557e+00,  3.16407132e+00],\n         [ 1.61764276e+00,  1.21713579e+00,  2.63066077e+00],\n         [ 3.05610752e+00,  1.90020323e+00,  1.28305769e+00],\n         ...,\n         [ 2.01730585e+00,  2.42647576e+00,  2.61568403e+00],\n         [ 1.09805048e+00,  2.46980143e+00,  1.88897526e+00],\n         [ 1.68078279e+00,  2.00821877e+00,  3.38444257e+00]],\n\n        [[ 2.21863270e+00,  2.87507844e+00,  2.49500990e+00],\n         [ 2.37074518e+00,  1.79903805e+00,  7.64107883e-01],\n         [ 2.08400321e+00,  1.51258028e+00,  2.02670169e+00],\n         ...,\n         [ 1.83859611e+00,  2.62669134e+00,  1.66111302e+00],\n         [ 1.64976323e+00,  1.57961237e+00,  1.42655420e+00],\n         [ 2.91940117e+00,  1.91068435e+00,  1.75309026e+00]],\n\n        [[ 2.20414710e+00,  2.31367135e+00,  1.41584432e+00],\n         [ 9.54521835e-01,  2.58007812e+00,  2.37467074e+00],\n         [ 2.16520619e+00,  1.77811408e+00,  2.87969494e+00],\n         ...,\n         [ 7.63263643e-01,  1.82966626e+00,  2.23274541e+00],\n         [ 1.57226586e+00,  2.46818876e+00,  3.99791837e+00],\n         [ 1.92872679e+00,  2.59073901e+00,  2.21935368e+00]],\n\n        ...,\n\n        [[ 1.64553547e+00,  1.82472456e+00,  2.76059246e+00],\n         [ 2.88928390e+00,  1.30663276e+00,  2.46358180e+00],\n         [ 3.75768638e+00,  2.43730164e+00,  2.55505133e+00],\n         ...,\n         [ 2.16174603e+00,  2.01592302e+00,  2.26288033e+00],\n         [ 1.49016941e+00,  1.53574967e+00,  3.36848235e+00],\n         [ 2.49209976e+00,  1.46029711e+00,  2.28328395e+00]],\n\n        [[ 1.88293231e+00,  3.33918691e+00,  1.42558694e+00],\n         [ 1.30533433e+00,  1.71059442e+00,  1.40220523e+00],\n         [ 2.67455864e+00,  2.07590628e+00,  1.42054951e+00],\n         ...,\n         [ 2.04173112e+00,  2.62418056e+00,  2.46390009e+00],\n         [ 2.44591188e+00,  4.37817097e-01,  1.63222098e+00],\n         [ 2.56457448e+00,  2.13275433e+00,  3.41803718e+00]],\n\n        [[ 2.17305660e+00,  1.33283615e+00,  1.71321976e+00],\n         [ 2.45914960e+00,  1.73086953e+00,  2.06541324e+00],\n         [ 1.97900987e+00,  1.59479618e+00,  1.81515384e+00],\n         ...,\n         [ 1.63178194e+00,  8.01370263e-01,  1.65471780e+00],\n         [ 1.61926913e+00,  2.80806279e+00,  2.70219493e+00],\n         [ 1.61031950e+00,  1.52587712e+00,  1.98493469e+00]]],\n\n\n       [[[ 2.02584624e+00,  1.84566319e+00,  3.15519667e+00],\n         [ 3.04529500e+00,  3.11910439e+00,  3.72523451e+00],\n         [ 8.38872731e-01,  1.86174548e+00,  2.21590137e+00],\n         ...,\n         [ 3.91296339e+00,  2.68901491e+00,  2.56499052e+00],\n         [ 3.23677182e+00,  1.88764417e+00,  2.87069607e+00],\n         [ 2.26716208e+00,  3.31029534e+00,  3.68022442e+00]],\n\n        [[ 3.19452620e+00,  2.26486039e+00,  3.16735721e+00],\n         [ 3.31155205e+00,  2.71410966e+00,  3.49577713e+00],\n         [ 2.65452409e+00,  2.04062676e+00,  3.50920630e+00],\n         ...,\n         [ 2.96825933e+00,  2.56463599e+00,  2.29313278e+00],\n         [ 1.83043170e+00,  3.36497498e+00,  3.03941321e+00],\n         [ 3.24642968e+00,  3.22491527e+00,  2.57167506e+00]],\n\n        [[ 3.87792325e+00,  3.70708013e+00,  2.05845666e+00],\n         [ 3.19432163e+00,  2.07221198e+00,  1.86701870e+00],\n         [ 1.92153323e+00,  3.60659552e+00,  4.34798336e+00],\n         ...,\n         [ 3.14111352e+00,  3.30880404e+00,  3.77668405e+00],\n         [ 2.80067158e+00,  3.86539316e+00,  3.40408850e+00],\n         [ 3.22477198e+00,  2.98168015e+00,  2.72122717e+00]],\n\n        ...,\n\n        [[ 2.85589457e+00,  3.08485699e+00,  3.76965857e+00],\n         [ 3.41445732e+00,  1.94194710e+00,  1.45557117e+00],\n         [ 3.02145267e+00,  2.63976955e+00,  3.72785592e+00],\n         ...,\n         [ 2.73650002e+00,  3.93257999e+00,  2.69861197e+00],\n         [ 2.75855231e+00,  3.61324191e+00,  3.22431493e+00],\n         [ 4.06555176e+00,  1.86553574e+00,  2.47345161e+00]],\n\n        [[ 3.94775534e+00,  2.40854907e+00,  2.54300594e+00],\n         [ 3.14293718e+00,  2.89664030e+00,  3.13595676e+00],\n         [ 2.24718451e+00,  3.35202980e+00,  3.07593489e+00],\n         ...,\n         [ 2.53604269e+00,  3.21205020e+00,  3.38545585e+00],\n         [ 3.28556776e+00,  1.63679385e+00,  3.29288912e+00],\n         [ 3.55534792e+00,  3.51068807e+00,  2.39852500e+00]],\n\n        [[ 1.94224942e+00,  3.86001062e+00,  3.08656049e+00],\n         [ 3.65745568e+00,  3.65164971e+00,  3.60175228e+00],\n         [ 2.70162702e+00,  2.61605263e+00,  3.15804577e+00],\n         ...,\n         [ 1.12303972e+00,  2.00678897e+00,  2.56854224e+00],\n         [ 2.56424737e+00,  3.03351068e+00,  3.74657750e+00],\n         [ 3.16966772e+00,  2.82870793e+00,  3.60575628e+00]]],\n\n\n       ...,\n\n\n       [[[-3.84252757e-01,  1.68054298e-01,  1.09453034e+00],\n         [-7.67488360e-01, -2.87283927e-01,  3.95934045e-01],\n         [-9.25919740e-04, -1.04690230e+00,  2.52233669e-02],\n         ...,\n         [-2.19421342e-01, -5.28609157e-01,  1.26548067e-01],\n         [-6.56502187e-01, -8.55485260e-01, -1.28064048e+00],\n         [-4.63872522e-01,  8.06961656e-01,  1.17898643e+00]],\n\n        [[-6.46178126e-01, -5.99256754e-01,  6.83973908e-01],\n         [ 1.52244240e-01,  8.93478274e-01,  2.87085384e-01],\n         [ 1.24749184e+00,  4.03293259e-02, -2.77046472e-01],\n         ...,\n         [ 7.00621843e-01,  9.43910062e-01,  8.55060220e-01],\n         [-7.90192187e-01,  4.81799275e-01,  1.03479004e+00],\n         [ 2.92577118e-01,  4.43110138e-01,  3.35530013e-01]],\n\n        [[-2.78722525e-01, -2.96977460e-01, -1.21307798e-01],\n         [ 1.03674316e+00, -4.96827424e-01, -8.30483377e-01],\n         [ 1.44584635e-02, -8.18643212e-01, -2.28369087e-01],\n         ...,\n         [ 1.13350928e+00, -2.19746634e-01, -4.09738094e-01],\n         [-8.67239952e-01, -1.47952449e+00, -2.81718701e-01],\n         [-1.62473261e-01,  4.76638377e-01,  9.91328537e-01]],\n\n        ...,\n\n        [[ 2.72269845e-01, -5.93318224e-01,  2.81991154e-01],\n         [-6.79938197e-02,  8.70937765e-01, -2.70982295e-01],\n         [-8.09693456e-01, -1.43374062e+00,  9.88679826e-01],\n         ...,\n         [-6.48074031e-01,  9.97101188e-01, -1.11376810e+00],\n         [-3.40613544e-01, -5.91523061e-03, -1.70722559e-01],\n         [ 9.41526666e-02,  7.66720355e-01, -4.63521510e-01]],\n\n        [[-5.49776554e-01, -7.89843678e-01, -5.43585122e-01],\n         [ 7.66950846e-01, -2.62839258e-01,  6.26016080e-01],\n         [ 4.38312918e-01, -2.54067838e-01, -7.75791526e-01],\n         ...,\n         [ 1.39559543e+00,  5.74909002e-02,  3.42265606e-01],\n         [ 5.91840029e-01, -7.20016956e-01,  1.14382541e+00],\n         [ 7.86220789e-01, -8.74294817e-01, -3.13602746e-01]],\n\n        [[-3.62363875e-01,  5.89970410e-01,  1.11657321e+00],\n         [-1.38814211e-01,  6.69251263e-01,  5.72917581e-01],\n         [-7.88543820e-01, -7.89277732e-01, -5.74364424e-01],\n         ...,\n         [-3.49997021e-02, -2.68107563e-01,  7.87849545e-01],\n         [ 9.15745735e-01,  4.41441745e-01,  3.97625446e-01],\n         [ 8.03285480e-01, -3.07941228e-01,  1.26427794e+00]]],\n\n\n       [[[ 5.29853702e-01,  9.80851233e-01,  7.56617486e-01],\n         [ 2.57907540e-01,  2.83024573e+00,  3.33354235e-01],\n         [ 2.29120111e+00,  7.94805944e-01,  1.39320898e+00],\n         ...,\n         [ 1.75625861e-01,  1.50511277e+00,  2.53417373e-01],\n         [ 2.76479197e+00,  5.56145489e-01,  5.77571951e-02],\n         [ 1.36247540e+00,  1.54290044e+00,  2.61190295e-01]],\n\n        [[ 1.44266605e+00,  2.21806765e+00,  1.48465490e+00],\n         [ 7.14424431e-01,  1.25436723e+00,  1.72931790e+00],\n         [-6.54768646e-01,  1.88828933e+00,  1.49761677e-01],\n         ...,\n         [ 7.83588171e-01,  1.85978591e+00,  6.02865458e-01],\n         [ 6.46277428e-01,  1.79885161e+00,  4.02598739e-01],\n         [ 1.15136003e+00,  2.19352698e+00,  1.49621367e+00]],\n\n        [[ 5.60227148e-02,  1.60096633e+00,  1.32957304e+00],\n         [ 1.34355843e+00,  2.01741323e-01, -2.35656410e-01],\n         [ 4.21504050e-01,  1.22128439e+00,  3.07703555e-01],\n         ...,\n         [ 2.60572642e-01, -3.62150729e-01,  1.91525352e+00],\n         [ 8.65859687e-01,  1.31342685e+00,  3.54247332e-01],\n         [ 8.38479161e-01,  7.94907987e-01,  2.64122581e+00]],\n\n        ...,\n\n        [[ 1.03846300e+00,  1.22242117e+00,  1.37575197e+00],\n         [ 1.04805195e+00,  7.46270359e-01,  1.58829439e+00],\n         [ 2.00320029e+00,  8.57272074e-02,  1.93588600e-01],\n         ...,\n         [ 1.49908078e+00,  1.59757578e+00,  6.98446810e-01],\n         [-2.81573147e-01,  1.58770037e+00,  1.04152620e+00],\n         [ 3.01610410e-01,  3.13155651e-01,  2.95297951e-01]],\n\n        [[ 5.89584112e-01,  2.39799094e+00,  6.90418541e-01],\n         [ 9.64999974e-01,  1.30923069e+00,  6.34615421e-01],\n         [ 9.07647967e-01,  3.29943568e-01,  2.14733672e+00],\n         ...,\n         [ 9.15870249e-01,  2.17630315e+00,  4.56481427e-01],\n         [-1.36666223e-01,  9.04973090e-01,  5.53930879e-01],\n         [ 9.19052660e-01,  3.17172170e-01,  1.16097903e+00]],\n\n        [[ 8.07251155e-01,  2.00524200e-02,  1.36394203e+00],\n         [ 1.14615464e+00,  1.56751871e+00,  1.24701631e+00],\n         [ 7.65352130e-01,  6.26986563e-01,  8.80958319e-01],\n         ...,\n         [ 2.18191481e+00,  7.74022698e-01,  1.82052052e+00],\n         [ 1.17562032e+00,  1.68149519e+00,  7.91095614e-01],\n         [ 8.14287126e-01,  1.42854774e+00,  9.96457875e-01]]],\n\n\n       [[[ 2.87827396e+00,  4.27889442e+00,  2.90533543e+00],\n         [ 2.73126221e+00,  3.13288856e+00,  2.17637634e+00],\n         [ 2.14448810e+00,  4.24124241e+00,  5.04952002e+00],\n         ...,\n         [ 1.94008899e+00,  4.29881477e+00,  2.40449429e+00],\n         [ 3.03921819e+00,  2.52291012e+00,  1.72206652e+00],\n         [ 2.30892515e+00,  2.93018532e+00,  4.03385592e+00]],\n\n        [[ 3.95906496e+00,  3.18210196e+00,  2.10806274e+00],\n         [ 3.57073569e+00,  2.75387669e+00,  3.44469571e+00],\n         [ 2.78712010e+00,  2.00453568e+00,  2.22025990e+00],\n         ...,\n         [ 3.59112191e+00,  3.38583970e+00,  3.42166471e+00],\n         [ 2.30005169e+00,  4.22112799e+00,  2.76585150e+00],\n         [ 3.39640784e+00,  3.21397901e+00,  2.16401100e+00]],\n\n        [[ 3.29504180e+00,  2.11922073e+00,  2.58547997e+00],\n         [ 2.77356386e+00,  3.93707895e+00,  3.13193345e+00],\n         [ 1.95213878e+00,  4.53787756e+00,  2.71926117e+00],\n         ...,\n         [ 2.56672144e+00,  3.77233648e+00,  2.03824878e+00],\n         [ 2.56527901e+00,  3.76086402e+00,  3.33058238e+00],\n         [ 2.48654938e+00,  3.09152055e+00,  2.45463324e+00]],\n\n        ...,\n\n        [[ 1.98119962e+00,  2.87318182e+00,  3.35575604e+00],\n         [ 1.34974682e+00,  2.87520814e+00,  2.77405357e+00],\n         [ 3.19511628e+00,  2.60894418e+00,  2.70289493e+00],\n         ...,\n         [ 4.21349669e+00,  3.71604443e+00,  2.71418405e+00],\n         [ 2.55316043e+00,  3.69749188e+00,  3.83867025e+00],\n         [ 3.28547478e+00,  3.72284341e+00,  2.33236957e+00]],\n\n        [[ 4.32054424e+00,  2.99198723e+00,  1.93065226e+00],\n         [ 2.25846457e+00,  3.21045470e+00,  2.70362306e+00],\n         [ 3.51359987e+00,  3.46160889e+00,  2.75541115e+00],\n         ...,\n         [ 1.54528284e+00,  2.60378337e+00,  1.35725427e+00],\n         [ 3.18413496e+00,  1.29787457e+00,  3.29031920e+00],\n         [ 3.32666969e+00,  2.26781869e+00,  3.47466946e+00]],\n\n        [[ 3.11540675e+00,  3.24079657e+00,  2.31083179e+00],\n         [ 3.15780735e+00,  2.55456877e+00,  2.71059394e+00],\n         [ 3.36832666e+00,  2.39891815e+00,  3.77370763e+00],\n         ...,\n         [ 3.48643088e+00,  2.15806293e+00,  3.76684165e+00],\n         [ 2.58713603e+00,  1.65208042e+00,  3.14684892e+00],\n         [ 2.66403508e+00,  2.42530799e+00,  3.69319272e+00]]]],\n      dtype=float32), array([[0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 1.22330117e+00,  2.65771604e+00,  3.10778999e+00],\n         [ 1.21966577e+00,  2.11599588e+00,  3.55215240e+00],\n         [ 1.70140970e+00,  2.06641698e+00,  1.40196109e+00],\n         ...,\n         [ 1.19943655e+00,  1.21371651e+00,  2.27142882e+00],\n         [ 2.74498987e+00,  2.09158015e+00,  1.58293486e+00],\n         [ 2.46213460e+00,  2.66007900e+00,  1.48513043e+00]],\n\n        [[ 2.01226664e+00,  1.98319519e+00,  1.38330245e+00],\n         [ 2.14855695e+00,  1.81486380e+00,  1.92136836e+00],\n         [ 2.52639651e+00,  3.10251474e+00,  1.54490221e+00],\n         ...,\n         [ 2.69710040e+00,  1.44115210e+00,  1.93258154e+00],\n         [ 1.67357147e+00,  1.61616755e+00,  9.86758173e-01],\n         [ 1.53922892e+00,  1.51829338e+00,  2.42134690e+00]],\n\n        [[ 3.29162025e+00,  2.96360254e+00,  2.07997966e+00],\n         [ 1.43629408e+00,  2.26057935e+00,  1.78877497e+00],\n         [ 2.00470877e+00,  9.28940773e-01,  1.06968594e+00],\n         ...,\n         [ 2.93791246e+00,  2.70944858e+00,  1.57654512e+00],\n         [ 1.74469745e+00,  2.80785108e+00,  2.12370563e+00],\n         [ 1.78129983e+00,  3.30816031e+00,  1.71201563e+00]],\n\n        ...,\n\n        [[ 3.10218215e+00,  2.16090536e+00,  2.14918613e+00],\n         [ 2.26929688e+00,  1.44892216e+00,  1.00097501e+00],\n         [ 2.37427139e+00,  3.05689454e+00,  3.06162214e+00],\n         ...,\n         [ 2.39369750e+00,  2.14758396e+00,  2.63344502e+00],\n         [ 2.14927053e+00,  2.12932515e+00,  1.88104355e+00],\n         [ 2.02544475e+00,  1.51992571e+00,  1.60388815e+00]],\n\n        [[ 1.34220266e+00,  2.79743266e+00,  2.30946636e+00],\n         [ 1.92115617e+00,  1.65754986e+00,  1.74866462e+00],\n         [ 2.66694951e+00,  2.48090267e+00,  1.16912842e+00],\n         ...,\n         [ 1.62001860e+00,  2.26141429e+00,  1.95490146e+00],\n         [ 5.19350052e-01,  4.15134478e+00,  1.55082297e+00],\n         [ 1.97569156e+00,  1.26307976e+00,  3.46800423e+00]],\n\n        [[ 7.16987789e-01,  2.46832228e+00,  1.58819175e+00],\n         [ 1.92285821e-01,  7.51526237e-01,  2.40321088e+00],\n         [ 3.60591102e+00,  2.06230354e+00,  1.96736419e+00],\n         ...,\n         [ 2.14396715e+00,  2.22737288e+00,  3.19877887e+00],\n         [ 2.87166762e+00,  3.88569522e+00,  1.43083215e+00],\n         [ 1.72937095e+00,  2.81511998e+00,  2.00190187e+00]]],\n\n\n       [[[ 1.20464814e+00,  2.32327557e+00,  3.16407132e+00],\n         [ 1.61764276e+00,  1.21713579e+00,  2.63066077e+00],\n         [ 3.05610752e+00,  1.90020323e+00,  1.28305769e+00],\n         ...,\n         [ 2.01730585e+00,  2.42647576e+00,  2.61568403e+00],\n         [ 1.09805048e+00,  2.46980143e+00,  1.88897526e+00],\n         [ 1.68078279e+00,  2.00821877e+00,  3.38444257e+00]],\n\n        [[ 2.21863270e+00,  2.87507844e+00,  2.49500990e+00],\n         [ 2.37074518e+00,  1.79903805e+00,  7.64107883e-01],\n         [ 2.08400321e+00,  1.51258028e+00,  2.02670169e+00],\n         ...,\n         [ 1.83859611e+00,  2.62669134e+00,  1.66111302e+00],\n         [ 1.64976323e+00,  1.57961237e+00,  1.42655420e+00],\n         [ 2.91940117e+00,  1.91068435e+00,  1.75309026e+00]],\n\n        [[ 2.20414710e+00,  2.31367135e+00,  1.41584432e+00],\n         [ 9.54521835e-01,  2.58007812e+00,  2.37467074e+00],\n         [ 2.16520619e+00,  1.77811408e+00,  2.87969494e+00],\n         ...,\n         [ 7.63263643e-01,  1.82966626e+00,  2.23274541e+00],\n         [ 1.57226586e+00,  2.46818876e+00,  3.99791837e+00],\n         [ 1.92872679e+00,  2.59073901e+00,  2.21935368e+00]],\n\n        ...,\n\n        [[ 1.64553547e+00,  1.82472456e+00,  2.76059246e+00],\n         [ 2.88928390e+00,  1.30663276e+00,  2.46358180e+00],\n         [ 3.75768638e+00,  2.43730164e+00,  2.55505133e+00],\n         ...,\n         [ 2.16174603e+00,  2.01592302e+00,  2.26288033e+00],\n         [ 1.49016941e+00,  1.53574967e+00,  3.36848235e+00],\n         [ 2.49209976e+00,  1.46029711e+00,  2.28328395e+00]],\n\n        [[ 1.88293231e+00,  3.33918691e+00,  1.42558694e+00],\n         [ 1.30533433e+00,  1.71059442e+00,  1.40220523e+00],\n         [ 2.67455864e+00,  2.07590628e+00,  1.42054951e+00],\n         ...,\n         [ 2.04173112e+00,  2.62418056e+00,  2.46390009e+00],\n         [ 2.44591188e+00,  4.37817097e-01,  1.63222098e+00],\n         [ 2.56457448e+00,  2.13275433e+00,  3.41803718e+00]],\n\n        [[ 2.17305660e+00,  1.33283615e+00,  1.71321976e+00],\n         [ 2.45914960e+00,  1.73086953e+00,  2.06541324e+00],\n         [ 1.97900987e+00,  1.59479618e+00,  1.81515384e+00],\n         ...,\n         [ 1.63178194e+00,  8.01370263e-01,  1.65471780e+00],\n         [ 1.61926913e+00,  2.80806279e+00,  2.70219493e+00],\n         [ 1.61031950e+00,  1.52587712e+00,  1.98493469e+00]]],\n\n\n       [[[ 2.02584624e+00,  1.84566319e+00,  3.15519667e+00],\n         [ 3.04529500e+00,  3.11910439e+00,  3.72523451e+00],\n         [ 8.38872731e-01,  1.86174548e+00,  2.21590137e+00],\n         ...,\n         [ 3.91296339e+00,  2.68901491e+00,  2.56499052e+00],\n         [ 3.23677182e+00,  1.88764417e+00,  2.87069607e+00],\n         [ 2.26716208e+00,  3.31029534e+00,  3.68022442e+00]],\n\n        [[ 3.19452620e+00,  2.26486039e+00,  3.16735721e+00],\n         [ 3.31155205e+00,  2.71410966e+00,  3.49577713e+00],\n         [ 2.65452409e+00,  2.04062676e+00,  3.50920630e+00],\n         ...,\n         [ 2.96825933e+00,  2.56463599e+00,  2.29313278e+00],\n         [ 1.83043170e+00,  3.36497498e+00,  3.03941321e+00],\n         [ 3.24642968e+00,  3.22491527e+00,  2.57167506e+00]],\n\n        [[ 3.87792325e+00,  3.70708013e+00,  2.05845666e+00],\n         [ 3.19432163e+00,  2.07221198e+00,  1.86701870e+00],\n         [ 1.92153323e+00,  3.60659552e+00,  4.34798336e+00],\n         ...,\n         [ 3.14111352e+00,  3.30880404e+00,  3.77668405e+00],\n         [ 2.80067158e+00,  3.86539316e+00,  3.40408850e+00],\n         [ 3.22477198e+00,  2.98168015e+00,  2.72122717e+00]],\n\n        ...,\n\n        [[ 2.85589457e+00,  3.08485699e+00,  3.76965857e+00],\n         [ 3.41445732e+00,  1.94194710e+00,  1.45557117e+00],\n         [ 3.02145267e+00,  2.63976955e+00,  3.72785592e+00],\n         ...,\n         [ 2.73650002e+00,  3.93257999e+00,  2.69861197e+00],\n         [ 2.75855231e+00,  3.61324191e+00,  3.22431493e+00],\n         [ 4.06555176e+00,  1.86553574e+00,  2.47345161e+00]],\n\n        [[ 3.94775534e+00,  2.40854907e+00,  2.54300594e+00],\n         [ 3.14293718e+00,  2.89664030e+00,  3.13595676e+00],\n         [ 2.24718451e+00,  3.35202980e+00,  3.07593489e+00],\n         ...,\n         [ 2.53604269e+00,  3.21205020e+00,  3.38545585e+00],\n         [ 3.28556776e+00,  1.63679385e+00,  3.29288912e+00],\n         [ 3.55534792e+00,  3.51068807e+00,  2.39852500e+00]],\n\n        [[ 1.94224942e+00,  3.86001062e+00,  3.08656049e+00],\n         [ 3.65745568e+00,  3.65164971e+00,  3.60175228e+00],\n         [ 2.70162702e+00,  2.61605263e+00,  3.15804577e+00],\n         ...,\n         [ 1.12303972e+00,  2.00678897e+00,  2.56854224e+00],\n         [ 2.56424737e+00,  3.03351068e+00,  3.74657750e+00],\n         [ 3.16966772e+00,  2.82870793e+00,  3.60575628e+00]]],\n\n\n       ...,\n\n\n       [[[-3.84252757e-01,  1.68054298e-01,  1.09453034e+00],\n         [-7.67488360e-01, -2.87283927e-01,  3.95934045e-01],\n         [-9.25919740e-04, -1.04690230e+00,  2.52233669e-02],\n         ...,\n         [-2.19421342e-01, -5.28609157e-01,  1.26548067e-01],\n         [-6.56502187e-01, -8.55485260e-01, -1.28064048e+00],\n         [-4.63872522e-01,  8.06961656e-01,  1.17898643e+00]],\n\n        [[-6.46178126e-01, -5.99256754e-01,  6.83973908e-01],\n         [ 1.52244240e-01,  8.93478274e-01,  2.87085384e-01],\n         [ 1.24749184e+00,  4.03293259e-02, -2.77046472e-01],\n         ...,\n         [ 7.00621843e-01,  9.43910062e-01,  8.55060220e-01],\n         [-7.90192187e-01,  4.81799275e-01,  1.03479004e+00],\n         [ 2.92577118e-01,  4.43110138e-01,  3.35530013e-01]],\n\n        [[-2.78722525e-01, -2.96977460e-01, -1.21307798e-01],\n         [ 1.03674316e+00, -4.96827424e-01, -8.30483377e-01],\n         [ 1.44584635e-02, -8.18643212e-01, -2.28369087e-01],\n         ...,\n         [ 1.13350928e+00, -2.19746634e-01, -4.09738094e-01],\n         [-8.67239952e-01, -1.47952449e+00, -2.81718701e-01],\n         [-1.62473261e-01,  4.76638377e-01,  9.91328537e-01]],\n\n        ...,\n\n        [[ 2.72269845e-01, -5.93318224e-01,  2.81991154e-01],\n         [-6.79938197e-02,  8.70937765e-01, -2.70982295e-01],\n         [-8.09693456e-01, -1.43374062e+00,  9.88679826e-01],\n         ...,\n         [-6.48074031e-01,  9.97101188e-01, -1.11376810e+00],\n         [-3.40613544e-01, -5.91523061e-03, -1.70722559e-01],\n         [ 9.41526666e-02,  7.66720355e-01, -4.63521510e-01]],\n\n        [[-5.49776554e-01, -7.89843678e-01, -5.43585122e-01],\n         [ 7.66950846e-01, -2.62839258e-01,  6.26016080e-01],\n         [ 4.38312918e-01, -2.54067838e-01, -7.75791526e-01],\n         ...,\n         [ 1.39559543e+00,  5.74909002e-02,  3.42265606e-01],\n         [ 5.91840029e-01, -7.20016956e-01,  1.14382541e+00],\n         [ 7.86220789e-01, -8.74294817e-01, -3.13602746e-01]],\n\n        [[-3.62363875e-01,  5.89970410e-01,  1.11657321e+00],\n         [-1.38814211e-01,  6.69251263e-01,  5.72917581e-01],\n         [-7.88543820e-01, -7.89277732e-01, -5.74364424e-01],\n         ...,\n         [-3.49997021e-02, -2.68107563e-01,  7.87849545e-01],\n         [ 9.15745735e-01,  4.41441745e-01,  3.97625446e-01],\n         [ 8.03285480e-01, -3.07941228e-01,  1.26427794e+00]]],\n\n\n       [[[ 5.29853702e-01,  9.80851233e-01,  7.56617486e-01],\n         [ 2.57907540e-01,  2.83024573e+00,  3.33354235e-01],\n         [ 2.29120111e+00,  7.94805944e-01,  1.39320898e+00],\n         ...,\n         [ 1.75625861e-01,  1.50511277e+00,  2.53417373e-01],\n         [ 2.76479197e+00,  5.56145489e-01,  5.77571951e-02],\n         [ 1.36247540e+00,  1.54290044e+00,  2.61190295e-01]],\n\n        [[ 1.44266605e+00,  2.21806765e+00,  1.48465490e+00],\n         [ 7.14424431e-01,  1.25436723e+00,  1.72931790e+00],\n         [-6.54768646e-01,  1.88828933e+00,  1.49761677e-01],\n         ...,\n         [ 7.83588171e-01,  1.85978591e+00,  6.02865458e-01],\n         [ 6.46277428e-01,  1.79885161e+00,  4.02598739e-01],\n         [ 1.15136003e+00,  2.19352698e+00,  1.49621367e+00]],\n\n        [[ 5.60227148e-02,  1.60096633e+00,  1.32957304e+00],\n         [ 1.34355843e+00,  2.01741323e-01, -2.35656410e-01],\n         [ 4.21504050e-01,  1.22128439e+00,  3.07703555e-01],\n         ...,\n         [ 2.60572642e-01, -3.62150729e-01,  1.91525352e+00],\n         [ 8.65859687e-01,  1.31342685e+00,  3.54247332e-01],\n         [ 8.38479161e-01,  7.94907987e-01,  2.64122581e+00]],\n\n        ...,\n\n        [[ 1.03846300e+00,  1.22242117e+00,  1.37575197e+00],\n         [ 1.04805195e+00,  7.46270359e-01,  1.58829439e+00],\n         [ 2.00320029e+00,  8.57272074e-02,  1.93588600e-01],\n         ...,\n         [ 1.49908078e+00,  1.59757578e+00,  6.98446810e-01],\n         [-2.81573147e-01,  1.58770037e+00,  1.04152620e+00],\n         [ 3.01610410e-01,  3.13155651e-01,  2.95297951e-01]],\n\n        [[ 5.89584112e-01,  2.39799094e+00,  6.90418541e-01],\n         [ 9.64999974e-01,  1.30923069e+00,  6.34615421e-01],\n         [ 9.07647967e-01,  3.29943568e-01,  2.14733672e+00],\n         ...,\n         [ 9.15870249e-01,  2.17630315e+00,  4.56481427e-01],\n         [-1.36666223e-01,  9.04973090e-01,  5.53930879e-01],\n         [ 9.19052660e-01,  3.17172170e-01,  1.16097903e+00]],\n\n        [[ 8.07251155e-01,  2.00524200e-02,  1.36394203e+00],\n         [ 1.14615464e+00,  1.56751871e+00,  1.24701631e+00],\n         [ 7.65352130e-01,  6.26986563e-01,  8.80958319e-01],\n         ...,\n         [ 2.18191481e+00,  7.74022698e-01,  1.82052052e+00],\n         [ 1.17562032e+00,  1.68149519e+00,  7.91095614e-01],\n         [ 8.14287126e-01,  1.42854774e+00,  9.96457875e-01]]],\n\n\n       [[[ 2.87827396e+00,  4.27889442e+00,  2.90533543e+00],\n         [ 2.73126221e+00,  3.13288856e+00,  2.17637634e+00],\n         [ 2.14448810e+00,  4.24124241e+00,  5.04952002e+00],\n         ...,\n         [ 1.94008899e+00,  4.29881477e+00,  2.40449429e+00],\n         [ 3.03921819e+00,  2.52291012e+00,  1.72206652e+00],\n         [ 2.30892515e+00,  2.93018532e+00,  4.03385592e+00]],\n\n        [[ 3.95906496e+00,  3.18210196e+00,  2.10806274e+00],\n         [ 3.57073569e+00,  2.75387669e+00,  3.44469571e+00],\n         [ 2.78712010e+00,  2.00453568e+00,  2.22025990e+00],\n         ...,\n         [ 3.59112191e+00,  3.38583970e+00,  3.42166471e+00],\n         [ 2.30005169e+00,  4.22112799e+00,  2.76585150e+00],\n         [ 3.39640784e+00,  3.21397901e+00,  2.16401100e+00]],\n\n        [[ 3.29504180e+00,  2.11922073e+00,  2.58547997e+00],\n         [ 2.77356386e+00,  3.93707895e+00,  3.13193345e+00],\n         [ 1.95213878e+00,  4.53787756e+00,  2.71926117e+00],\n         ...,\n         [ 2.56672144e+00,  3.77233648e+00,  2.03824878e+00],\n         [ 2.56527901e+00,  3.76086402e+00,  3.33058238e+00],\n         [ 2.48654938e+00,  3.09152055e+00,  2.45463324e+00]],\n\n        ...,\n\n        [[ 1.98119962e+00,  2.87318182e+00,  3.35575604e+00],\n         [ 1.34974682e+00,  2.87520814e+00,  2.77405357e+00],\n         [ 3.19511628e+00,  2.60894418e+00,  2.70289493e+00],\n         ...,\n         [ 4.21349669e+00,  3.71604443e+00,  2.71418405e+00],\n         [ 2.55316043e+00,  3.69749188e+00,  3.83867025e+00],\n         [ 3.28547478e+00,  3.72284341e+00,  2.33236957e+00]],\n\n        [[ 4.32054424e+00,  2.99198723e+00,  1.93065226e+00],\n         [ 2.25846457e+00,  3.21045470e+00,  2.70362306e+00],\n         [ 3.51359987e+00,  3.46160889e+00,  2.75541115e+00],\n         ...,\n         [ 1.54528284e+00,  2.60378337e+00,  1.35725427e+00],\n         [ 3.18413496e+00,  1.29787457e+00,  3.29031920e+00],\n         [ 3.32666969e+00,  2.26781869e+00,  3.47466946e+00]],\n\n        [[ 3.11540675e+00,  3.24079657e+00,  2.31083179e+00],\n         [ 3.15780735e+00,  2.55456877e+00,  2.71059394e+00],\n         [ 3.36832666e+00,  2.39891815e+00,  3.77370763e+00],\n         ...,\n         [ 3.48643088e+00,  2.15806293e+00,  3.76684165e+00],\n         [ 2.58713603e+00,  1.65208042e+00,  3.14684892e+00],\n         [ 2.66403508e+00,  2.42530799e+00,  3.69319272e+00]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "y": {
                                    "variable_value": "array([[0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.61843294, 0.75]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295b0690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b2f910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.7372441363334655, 0.665]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b2fd20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.6954192, 0.5625], [0.6909256, 0.5], [0.590438, 0.625], [0.6899235, 0.5625], [0.5900686, 0.6875], [0.58894384, 0.75], [0.5834458, 0.6875], [0.79707646, 0.5625], [0.5879364, 0.6875], [0.54369485, 0.75], [0.6006373, 0.6875], [0.5902118, 0.75], [0.71662295, 0.5]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 2.18121290e+00,  2.10434389e+00,  1.57384932e+00],\n         [ 2.36120224e+00,  1.74001431e+00,  3.07847190e+00],\n         [ 2.49125457e+00,  1.67215776e+00,  2.50535345e+00],\n         ...,\n         [ 1.67059267e+00,  2.12056708e+00,  2.85215044e+00],\n         [ 1.63568604e+00,  1.64576495e+00,  1.07527494e+00],\n         [ 2.23930788e+00,  3.13260245e+00,  2.00746679e+00]],\n\n        [[ 1.67445457e+00,  3.27031040e+00,  3.04758286e+00],\n         [ 3.32813478e+00,  2.40281558e+00,  2.27745008e+00],\n         [ 2.73006725e+00,  1.43372905e+00,  2.42076039e+00],\n         ...,\n         [ 3.69375443e+00,  2.24913406e+00,  1.30865908e+00],\n         [ 1.84878457e+00,  2.43742371e+00,  2.43572140e+00],\n         [ 1.02730703e+00,  1.61884499e+00,  1.54252148e+00]],\n\n        [[ 2.49982548e+00,  2.55794477e+00,  1.53034496e+00],\n         [ 2.49783301e+00,  1.02105439e+00,  1.94435441e+00],\n         [ 2.16387963e+00,  1.54704463e+00,  2.56194019e+00],\n         ...,\n         [ 2.34418082e+00,  2.25532436e+00,  3.26038766e+00],\n         [ 1.30543947e+00,  1.57363546e+00,  1.62659788e+00],\n         [ 1.90572655e+00,  1.93543613e+00,  2.59611011e+00]],\n\n        ...,\n\n        [[ 2.50969386e+00,  2.99056339e+00,  1.78285670e+00],\n         [ 2.14616418e+00,  2.49721742e+00,  1.59387887e+00],\n         [ 3.01860142e+00,  3.11264133e+00,  1.45093453e+00],\n         ...,\n         [ 2.49157929e+00,  2.06994915e+00,  2.74033308e+00],\n         [ 2.45422411e+00,  1.60691297e+00,  1.93594956e+00],\n         [ 7.98652470e-01,  8.09360445e-01,  2.12056041e+00]],\n\n        [[ 1.86117852e+00,  1.61587143e+00,  1.22247601e+00],\n         [ 2.18970346e+00,  2.66236353e+00,  1.68516648e+00],\n         [ 2.73760796e+00,  2.09455585e+00,  5.78119040e-01],\n         ...,\n         [ 1.03102815e+00,  2.04059339e+00,  1.54497337e+00],\n         [ 1.59736896e+00,  2.11098719e+00,  1.85620046e+00],\n         [ 2.49656057e+00,  1.11260808e+00,  1.63941371e+00]],\n\n        [[ 3.07301331e+00,  2.12802386e+00,  2.65606213e+00],\n         [ 2.10328054e+00,  1.83574557e+00,  2.14833426e+00],\n         [ 1.67300069e+00,  7.72645712e-01,  1.12348914e+00],\n         ...,\n         [ 2.09918904e+00,  2.77454329e+00,  2.65948343e+00],\n         [ 1.74758673e+00,  2.62511754e+00,  2.23380041e+00],\n         [ 7.32334197e-01,  2.15696621e+00,  1.76682901e+00]]],\n\n\n       [[[ 1.80799150e+00,  3.33336163e+00,  3.73135376e+00],\n         [ 2.52256250e+00,  2.44054890e+00,  2.40291810e+00],\n         [ 2.65591669e+00,  2.67989278e+00,  2.54982376e+00],\n         ...,\n         [ 4.42429781e+00,  5.08892155e+00,  2.94415450e+00],\n         [ 2.39823389e+00,  3.76493359e+00,  4.40857410e+00],\n         [ 2.96323061e+00,  3.76616287e+00,  3.17807484e+00]],\n\n        [[ 3.77823257e+00,  3.31654763e+00,  3.62450647e+00],\n         [ 2.97150183e+00,  2.04567385e+00,  3.10306001e+00],\n         [ 1.48253047e+00,  3.76399827e+00,  2.45784259e+00],\n         ...,\n         [ 2.46175814e+00,  4.25404453e+00,  3.82792211e+00],\n         [ 2.69936061e+00,  2.69444704e+00,  4.49468327e+00],\n         [ 2.89036536e+00,  3.80168605e+00,  2.33893108e+00]],\n\n        [[ 2.75382280e+00,  3.52241397e+00,  3.38337374e+00],\n         [ 3.72648716e+00,  3.85392165e+00,  3.04316807e+00],\n         [ 2.16081691e+00,  3.20649600e+00,  2.41727138e+00],\n         ...,\n         [ 2.65560961e+00,  4.04968500e+00,  2.98820448e+00],\n         [ 1.81681919e+00,  3.96495032e+00,  3.02085614e+00],\n         [ 2.35699034e+00,  1.81849003e+00,  2.00216365e+00]],\n\n        ...,\n\n        [[ 3.48244381e+00,  3.77570748e+00,  2.86229515e+00],\n         [ 2.77392650e+00,  3.13515592e+00,  3.02642417e+00],\n         [ 2.35192585e+00,  2.21031022e+00,  2.28389978e+00],\n         ...,\n         [ 7.73054242e-01,  2.94227505e+00,  4.67369270e+00],\n         [ 3.61736274e+00,  3.68175125e+00,  2.74119210e+00],\n         [ 4.48374605e+00,  3.35106087e+00,  3.24401021e+00]],\n\n        [[ 2.85644054e+00,  3.40683889e+00,  2.69435072e+00],\n         [ 4.01640129e+00,  2.41573524e+00,  1.80167592e+00],\n         [ 3.14271832e+00,  4.33624983e+00,  2.72351384e+00],\n         ...,\n         [ 2.90569448e+00,  3.58630419e+00,  2.45737052e+00],\n         [ 3.95496511e+00,  2.71993399e+00,  2.01661110e+00],\n         [ 3.21225572e+00,  2.10480022e+00,  2.78547072e+00]],\n\n        [[ 2.49976349e+00,  3.41737676e+00,  2.92064118e+00],\n         [ 4.13911295e+00,  3.39276218e+00,  3.18316555e+00],\n         [ 3.77583933e+00,  2.91367316e+00,  1.89810002e+00],\n         ...,\n         [ 3.78309727e+00,  3.64749837e+00,  1.34738839e+00],\n         [ 2.73460269e+00,  3.27711201e+00,  2.93530679e+00],\n         [ 3.15278578e+00,  2.68393970e+00,  2.83710909e+00]]],\n\n\n       [[[ 1.32371628e+00,  1.92591548e+00,  1.23842919e+00],\n         [ 1.60413361e+00,  2.96718526e+00,  2.01674247e+00],\n         [ 2.08016109e+00,  3.26569200e+00,  2.75027585e+00],\n         ...,\n         [ 3.52847505e+00,  9.96738672e-01,  1.21479511e+00],\n         [ 1.81674469e+00,  5.77304900e-01,  7.02054560e-01],\n         [ 1.69638705e+00,  1.93407774e+00,  7.07135916e-01]],\n\n        [[ 2.11400652e+00,  4.43158120e-01,  2.36605668e+00],\n         [ 9.85762835e-01,  1.48210382e+00,  1.31541586e+00],\n         [ 2.49659753e+00,  2.97963595e+00,  2.35246205e+00],\n         ...,\n         [ 2.07088614e+00,  2.48903871e+00,  2.35003805e+00],\n         [ 1.87710428e+00,  7.70429969e-01,  2.14998460e+00],\n         [ 1.52373552e+00,  1.58633482e+00,  2.63238835e+00]],\n\n        [[ 1.26016927e+00,  2.07863736e+00,  1.43058002e+00],\n         [ 1.02940762e+00,  2.03904581e+00,  2.08955765e+00],\n         [ 1.87204099e+00,  2.79508996e+00,  2.28126478e+00],\n         ...,\n         [ 2.71981525e+00,  2.10282731e+00,  1.82691813e+00],\n         [ 2.78304958e+00,  1.75332284e+00,  3.18442512e+00],\n         [ 2.21196556e+00,  2.19357896e+00,  1.83544469e+00]],\n\n        ...,\n\n        [[ 2.62155509e+00,  1.13737798e+00,  2.99377203e+00],\n         [ 1.83069527e+00,  2.57115841e+00,  2.86223340e+00],\n         [ 2.67981339e+00,  8.44874918e-01,  3.35833764e+00],\n         ...,\n         [ 1.70192325e+00,  2.41688395e+00,  1.33999515e+00],\n         [ 1.49592221e+00,  1.22660172e+00,  2.42113042e+00],\n         [ 1.58540773e+00,  8.68197560e-01,  1.01508701e+00]],\n\n        [[ 1.35558438e+00,  2.13648057e+00,  2.56308794e+00],\n         [ 2.53785205e+00,  2.62292504e+00,  3.01681113e+00],\n         [ 3.91287661e+00,  1.02270663e+00,  1.67615438e+00],\n         ...,\n         [ 2.16285992e+00,  1.99340308e+00,  1.33448291e+00],\n         [ 2.34197974e+00,  2.42416334e+00,  1.52940547e+00],\n         [ 2.45295978e+00,  1.58475149e+00,  2.17304063e+00]],\n\n        [[ 1.27332461e+00,  2.56348538e+00,  6.44655943e-01],\n         [ 1.25525725e+00,  1.93514442e+00,  1.02430379e+00],\n         [ 8.21100175e-01,  2.37450552e+00,  1.98285878e+00],\n         ...,\n         [ 1.15471399e+00,  2.53402448e+00,  1.02308226e+00],\n         [ 3.04197717e+00,  2.18335223e+00,  1.66270423e+00],\n         [ 2.21847725e+00,  2.37594938e+00,  1.07033205e+00]]],\n\n\n       ...,\n\n\n       [[[ 2.64796448e+00,  2.28012681e+00,  2.51000547e+00],\n         [ 3.23138452e+00,  2.41332412e+00,  1.77131546e+00],\n         [ 2.99854994e+00,  2.21151471e+00,  1.38267481e+00],\n         ...,\n         [ 2.49546647e+00,  2.01915812e+00,  1.91050327e+00],\n         [ 1.94099808e+00,  1.17039192e+00,  2.95228744e+00],\n         [ 2.97969508e+00,  2.80715132e+00,  2.20207000e+00]],\n\n        [[ 1.12224340e+00,  2.98630476e+00,  1.35356200e+00],\n         [ 2.60894608e+00,  2.24691558e+00,  1.14001548e+00],\n         [ 1.69371402e+00,  2.27865100e+00,  3.57961297e+00],\n         ...,\n         [ 8.00815463e-01,  1.47804070e+00,  1.21544790e+00],\n         [ 3.49256659e+00,  1.67526615e+00,  8.54868293e-01],\n         [ 4.34268206e-01,  2.29811311e+00,  1.49254620e+00]],\n\n        [[ 1.57559466e+00,  8.77128184e-01,  2.40767860e+00],\n         [ 2.23778033e+00,  7.49116063e-01,  2.85252738e+00],\n         [ 1.73333442e+00,  6.52190149e-01,  2.74401450e+00],\n         ...,\n         [ 2.36596918e+00,  2.54376197e+00,  2.32639718e+00],\n         [ 2.70557857e+00,  9.98917997e-01,  3.18021894e+00],\n         [ 1.40815115e+00,  2.69143534e+00,  1.50684261e+00]],\n\n        ...,\n\n        [[ 1.83740175e+00,  6.02814853e-01,  1.32506108e+00],\n         [ 1.26550043e+00,  2.46471357e+00,  7.18353987e-01],\n         [ 2.38165355e+00,  2.20288324e+00,  1.63479745e+00],\n         ...,\n         [ 3.16935253e+00,  1.39669085e+00,  1.40975761e+00],\n         [ 3.49207640e+00,  2.80185461e+00,  2.77135372e+00],\n         [ 1.56302989e+00,  1.88097739e+00,  1.36490571e+00]],\n\n        [[ 8.72321784e-01,  2.19364285e+00,  1.90088105e+00],\n         [ 2.89468217e+00,  1.61606359e+00,  2.52657390e+00],\n         [ 2.22810483e+00,  2.27356052e+00,  1.70319462e+00],\n         ...,\n         [ 2.15055656e+00,  2.59941316e+00,  1.28438139e+00],\n         [ 8.46922159e-01,  1.17792976e+00,  3.36872411e+00],\n         [ 3.15767097e+00,  1.85033286e+00,  2.38257194e+00]],\n\n        [[ 1.72134078e+00,  1.93646061e+00,  1.30951202e+00],\n         [ 1.62513340e+00,  4.47392702e-01,  1.41081977e+00],\n         [ 2.65997887e+00,  2.08256555e+00,  2.02802610e+00],\n         ...,\n         [ 1.91646695e+00,  2.13153696e+00,  1.64962685e+00],\n         [ 2.60047406e-01,  2.76992083e+00,  2.24391818e+00],\n         [ 2.63852978e+00,  9.19822454e-01,  2.95694852e+00]]],\n\n\n       [[[-1.26716673e-01,  5.31943440e-01,  1.08114815e+00],\n         [-4.20577496e-01, -4.78424668e-01,  1.08079946e+00],\n         [-5.11068642e-01,  2.84965932e-01,  2.84304827e-01],\n         ...,\n         [ 3.69502008e-01, -1.01797745e-01,  1.73905209e-01],\n         [ 1.11126542e+00,  3.08168083e-01, -9.77431834e-01],\n         [ 2.17421561e-01,  3.62836570e-01, -8.98771882e-01]],\n\n        [[ 3.93059820e-01, -1.57597139e-01,  5.92233598e-01],\n         [-9.36195552e-01, -4.66344208e-01,  3.10766876e-01],\n         [ 7.89638162e-01,  7.68676817e-01,  4.98211477e-03],\n         ...,\n         [-3.15556198e-01,  4.05379534e-01,  1.78846791e-02],\n         [ 2.38742650e-01,  3.11475366e-01, -2.09337458e-01],\n         [ 1.31878924e+00, -9.42710996e-01, -1.15479834e-01]],\n\n        [[ 2.54590106e+00, -2.52118558e-01, -1.61348023e-02],\n         [-6.72810614e-01, -9.16721106e-01,  6.82285070e-01],\n         [-1.45189598e-01, -8.27016532e-02,  7.26821959e-01],\n         ...,\n         [-1.36315501e+00, -8.68360519e-01,  3.91026199e-01],\n         [-7.34612584e-01, -2.29043752e-01,  3.09647113e-01],\n         [-2.12627903e-01, -2.30241984e-01,  1.85281754e-01]],\n\n        ...,\n\n        [[ 3.84261817e-01,  6.28491402e-01, -6.94015861e-01],\n         [ 1.11370504e-01, -1.93647981e-01, -1.56615293e+00],\n         [ 8.41563165e-01,  4.58357781e-01,  2.01407701e-01],\n         ...,\n         [ 1.37718534e+00, -2.49635383e-01,  6.47402644e-01],\n         [ 2.69623548e-01,  1.95909753e-01, -5.24226010e-01],\n         [-1.74405181e+00, -3.02956939e-01,  1.54848433e+00]],\n\n        [[-3.43484551e-01,  1.27386853e-01, -7.00501680e-01],\n         [ 1.59458864e+00,  2.68001050e-01,  2.66701460e-01],\n         [ 4.27275181e-01,  5.71175098e-01,  5.68020791e-02],\n         ...,\n         [-1.42706305e-01,  6.71700001e-01, -1.11190236e+00],\n         [-9.23030972e-01,  1.24575563e-01,  3.45695615e-01],\n         [ 9.33753729e-01,  2.20819020e+00,  2.43206620e-02]],\n\n        [[ 8.32625031e-01, -1.54156148e+00, -4.44054991e-01],\n         [-1.13637459e+00,  5.41306697e-02, -2.57050335e-01],\n         [-1.03471756e+00, -4.93256360e-01,  1.07624018e+00],\n         ...,\n         [-4.54048008e-01,  1.63555443e-01,  5.44029713e-01],\n         [-7.87320137e-01, -4.73366026e-03,  3.90645325e-01],\n         [-1.08848858e+00,  4.81562436e-01, -1.34794223e+00]]],\n\n\n       [[[ 2.92607927e+00,  2.67005634e+00,  1.22903168e+00],\n         [ 1.43530524e+00,  9.30108964e-01,  2.20784307e+00],\n         [ 2.46300554e+00,  2.48280382e+00,  2.98268747e+00],\n         ...,\n         [ 2.61448336e+00,  1.86224675e+00,  1.79493356e+00],\n         [ 2.05203581e+00,  5.13889730e-01,  2.23790359e+00],\n         [ 2.56978703e+00,  1.46647549e+00,  3.12201381e+00]],\n\n        [[ 2.44259739e+00,  2.40122414e+00,  2.32387567e+00],\n         [ 2.76006460e+00,  8.66858244e-01,  9.66275573e-01],\n         [ 2.31276417e+00,  2.49225402e+00,  1.55074561e+00],\n         ...,\n         [ 3.20364928e+00,  3.07115364e+00,  2.51934242e+00],\n         [ 1.19874275e+00,  1.77484345e+00,  3.10182381e+00],\n         [ 2.07739973e+00,  3.88424784e-01,  2.13080788e+00]],\n\n        [[ 3.18026853e+00,  3.32242584e+00,  3.17620134e+00],\n         [ 2.46705031e+00,  3.52500153e+00,  1.89984739e+00],\n         [ 1.75183165e+00,  2.02785230e+00,  2.10206366e+00],\n         ...,\n         [ 1.83117425e+00,  1.14719033e+00,  2.55975175e+00],\n         [ 2.09935713e+00,  1.20371878e+00,  2.01193476e+00],\n         [ 3.01769495e+00,  2.69377327e+00,  1.67143071e+00]],\n\n        ...,\n\n        [[ 1.88812482e+00,  1.96068728e+00,  2.17018247e+00],\n         [ 1.22800863e+00,  1.91585636e+00,  1.42034805e+00],\n         [ 1.16623271e+00,  2.19980216e+00,  2.06541538e+00],\n         ...,\n         [ 1.60644913e+00,  3.01361275e+00,  1.75796604e+00],\n         [ 2.02613997e+00,  2.08755589e+00,  1.51992929e+00],\n         [ 1.50674617e+00,  1.47291422e+00,  2.33912563e+00]],\n\n        [[ 1.94551980e+00,  1.43831003e+00,  2.71545053e+00],\n         [ 1.59643519e+00,  1.96677721e+00,  2.86918163e+00],\n         [ 1.12336326e+00,  9.87836480e-01,  2.95410347e+00],\n         ...,\n         [ 3.29386306e+00,  1.25843477e+00,  2.39553142e+00],\n         [ 6.37253404e-01,  5.96065283e-01,  4.49606705e+00],\n         [ 1.76274967e+00,  1.98215592e+00,  1.71873343e+00]],\n\n        [[ 2.82543600e-01,  1.92476737e+00,  2.67289019e+00],\n         [ 2.14733219e+00,  2.04808664e+00,  2.56528687e+00],\n         [ 1.83182943e+00,  2.31931949e+00,  1.25385714e+00],\n         ...,\n         [ 2.54599714e+00,  2.28378820e+00,  2.15709543e+00],\n         [ 3.71842980e+00,  2.92181420e+00,  2.36011672e+00],\n         [ 8.23308825e-01,  2.99482799e+00,  1.71054482e+00]]]],\n      dtype=float32), array([[0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 2.18121290e+00,  2.10434389e+00,  1.57384932e+00],\n         [ 2.36120224e+00,  1.74001431e+00,  3.07847190e+00],\n         [ 2.49125457e+00,  1.67215776e+00,  2.50535345e+00],\n         ...,\n         [ 1.67059267e+00,  2.12056708e+00,  2.85215044e+00],\n         [ 1.63568604e+00,  1.64576495e+00,  1.07527494e+00],\n         [ 2.23930788e+00,  3.13260245e+00,  2.00746679e+00]],\n\n        [[ 1.67445457e+00,  3.27031040e+00,  3.04758286e+00],\n         [ 3.32813478e+00,  2.40281558e+00,  2.27745008e+00],\n         [ 2.73006725e+00,  1.43372905e+00,  2.42076039e+00],\n         ...,\n         [ 3.69375443e+00,  2.24913406e+00,  1.30865908e+00],\n         [ 1.84878457e+00,  2.43742371e+00,  2.43572140e+00],\n         [ 1.02730703e+00,  1.61884499e+00,  1.54252148e+00]],\n\n        [[ 2.49982548e+00,  2.55794477e+00,  1.53034496e+00],\n         [ 2.49783301e+00,  1.02105439e+00,  1.94435441e+00],\n         [ 2.16387963e+00,  1.54704463e+00,  2.56194019e+00],\n         ...,\n         [ 2.34418082e+00,  2.25532436e+00,  3.26038766e+00],\n         [ 1.30543947e+00,  1.57363546e+00,  1.62659788e+00],\n         [ 1.90572655e+00,  1.93543613e+00,  2.59611011e+00]],\n\n        ...,\n\n        [[ 2.50969386e+00,  2.99056339e+00,  1.78285670e+00],\n         [ 2.14616418e+00,  2.49721742e+00,  1.59387887e+00],\n         [ 3.01860142e+00,  3.11264133e+00,  1.45093453e+00],\n         ...,\n         [ 2.49157929e+00,  2.06994915e+00,  2.74033308e+00],\n         [ 2.45422411e+00,  1.60691297e+00,  1.93594956e+00],\n         [ 7.98652470e-01,  8.09360445e-01,  2.12056041e+00]],\n\n        [[ 1.86117852e+00,  1.61587143e+00,  1.22247601e+00],\n         [ 2.18970346e+00,  2.66236353e+00,  1.68516648e+00],\n         [ 2.73760796e+00,  2.09455585e+00,  5.78119040e-01],\n         ...,\n         [ 1.03102815e+00,  2.04059339e+00,  1.54497337e+00],\n         [ 1.59736896e+00,  2.11098719e+00,  1.85620046e+00],\n         [ 2.49656057e+00,  1.11260808e+00,  1.63941371e+00]],\n\n        [[ 3.07301331e+00,  2.12802386e+00,  2.65606213e+00],\n         [ 2.10328054e+00,  1.83574557e+00,  2.14833426e+00],\n         [ 1.67300069e+00,  7.72645712e-01,  1.12348914e+00],\n         ...,\n         [ 2.09918904e+00,  2.77454329e+00,  2.65948343e+00],\n         [ 1.74758673e+00,  2.62511754e+00,  2.23380041e+00],\n         [ 7.32334197e-01,  2.15696621e+00,  1.76682901e+00]]],\n\n\n       [[[ 1.80799150e+00,  3.33336163e+00,  3.73135376e+00],\n         [ 2.52256250e+00,  2.44054890e+00,  2.40291810e+00],\n         [ 2.65591669e+00,  2.67989278e+00,  2.54982376e+00],\n         ...,\n         [ 4.42429781e+00,  5.08892155e+00,  2.94415450e+00],\n         [ 2.39823389e+00,  3.76493359e+00,  4.40857410e+00],\n         [ 2.96323061e+00,  3.76616287e+00,  3.17807484e+00]],\n\n        [[ 3.77823257e+00,  3.31654763e+00,  3.62450647e+00],\n         [ 2.97150183e+00,  2.04567385e+00,  3.10306001e+00],\n         [ 1.48253047e+00,  3.76399827e+00,  2.45784259e+00],\n         ...,\n         [ 2.46175814e+00,  4.25404453e+00,  3.82792211e+00],\n         [ 2.69936061e+00,  2.69444704e+00,  4.49468327e+00],\n         [ 2.89036536e+00,  3.80168605e+00,  2.33893108e+00]],\n\n        [[ 2.75382280e+00,  3.52241397e+00,  3.38337374e+00],\n         [ 3.72648716e+00,  3.85392165e+00,  3.04316807e+00],\n         [ 2.16081691e+00,  3.20649600e+00,  2.41727138e+00],\n         ...,\n         [ 2.65560961e+00,  4.04968500e+00,  2.98820448e+00],\n         [ 1.81681919e+00,  3.96495032e+00,  3.02085614e+00],\n         [ 2.35699034e+00,  1.81849003e+00,  2.00216365e+00]],\n\n        ...,\n\n        [[ 3.48244381e+00,  3.77570748e+00,  2.86229515e+00],\n         [ 2.77392650e+00,  3.13515592e+00,  3.02642417e+00],\n         [ 2.35192585e+00,  2.21031022e+00,  2.28389978e+00],\n         ...,\n         [ 7.73054242e-01,  2.94227505e+00,  4.67369270e+00],\n         [ 3.61736274e+00,  3.68175125e+00,  2.74119210e+00],\n         [ 4.48374605e+00,  3.35106087e+00,  3.24401021e+00]],\n\n        [[ 2.85644054e+00,  3.40683889e+00,  2.69435072e+00],\n         [ 4.01640129e+00,  2.41573524e+00,  1.80167592e+00],\n         [ 3.14271832e+00,  4.33624983e+00,  2.72351384e+00],\n         ...,\n         [ 2.90569448e+00,  3.58630419e+00,  2.45737052e+00],\n         [ 3.95496511e+00,  2.71993399e+00,  2.01661110e+00],\n         [ 3.21225572e+00,  2.10480022e+00,  2.78547072e+00]],\n\n        [[ 2.49976349e+00,  3.41737676e+00,  2.92064118e+00],\n         [ 4.13911295e+00,  3.39276218e+00,  3.18316555e+00],\n         [ 3.77583933e+00,  2.91367316e+00,  1.89810002e+00],\n         ...,\n         [ 3.78309727e+00,  3.64749837e+00,  1.34738839e+00],\n         [ 2.73460269e+00,  3.27711201e+00,  2.93530679e+00],\n         [ 3.15278578e+00,  2.68393970e+00,  2.83710909e+00]]],\n\n\n       [[[ 1.32371628e+00,  1.92591548e+00,  1.23842919e+00],\n         [ 1.60413361e+00,  2.96718526e+00,  2.01674247e+00],\n         [ 2.08016109e+00,  3.26569200e+00,  2.75027585e+00],\n         ...,\n         [ 3.52847505e+00,  9.96738672e-01,  1.21479511e+00],\n         [ 1.81674469e+00,  5.77304900e-01,  7.02054560e-01],\n         [ 1.69638705e+00,  1.93407774e+00,  7.07135916e-01]],\n\n        [[ 2.11400652e+00,  4.43158120e-01,  2.36605668e+00],\n         [ 9.85762835e-01,  1.48210382e+00,  1.31541586e+00],\n         [ 2.49659753e+00,  2.97963595e+00,  2.35246205e+00],\n         ...,\n         [ 2.07088614e+00,  2.48903871e+00,  2.35003805e+00],\n         [ 1.87710428e+00,  7.70429969e-01,  2.14998460e+00],\n         [ 1.52373552e+00,  1.58633482e+00,  2.63238835e+00]],\n\n        [[ 1.26016927e+00,  2.07863736e+00,  1.43058002e+00],\n         [ 1.02940762e+00,  2.03904581e+00,  2.08955765e+00],\n         [ 1.87204099e+00,  2.79508996e+00,  2.28126478e+00],\n         ...,\n         [ 2.71981525e+00,  2.10282731e+00,  1.82691813e+00],\n         [ 2.78304958e+00,  1.75332284e+00,  3.18442512e+00],\n         [ 2.21196556e+00,  2.19357896e+00,  1.83544469e+00]],\n\n        ...,\n\n        [[ 2.62155509e+00,  1.13737798e+00,  2.99377203e+00],\n         [ 1.83069527e+00,  2.57115841e+00,  2.86223340e+00],\n         [ 2.67981339e+00,  8.44874918e-01,  3.35833764e+00],\n         ...,\n         [ 1.70192325e+00,  2.41688395e+00,  1.33999515e+00],\n         [ 1.49592221e+00,  1.22660172e+00,  2.42113042e+00],\n         [ 1.58540773e+00,  8.68197560e-01,  1.01508701e+00]],\n\n        [[ 1.35558438e+00,  2.13648057e+00,  2.56308794e+00],\n         [ 2.53785205e+00,  2.62292504e+00,  3.01681113e+00],\n         [ 3.91287661e+00,  1.02270663e+00,  1.67615438e+00],\n         ...,\n         [ 2.16285992e+00,  1.99340308e+00,  1.33448291e+00],\n         [ 2.34197974e+00,  2.42416334e+00,  1.52940547e+00],\n         [ 2.45295978e+00,  1.58475149e+00,  2.17304063e+00]],\n\n        [[ 1.27332461e+00,  2.56348538e+00,  6.44655943e-01],\n         [ 1.25525725e+00,  1.93514442e+00,  1.02430379e+00],\n         [ 8.21100175e-01,  2.37450552e+00,  1.98285878e+00],\n         ...,\n         [ 1.15471399e+00,  2.53402448e+00,  1.02308226e+00],\n         [ 3.04197717e+00,  2.18335223e+00,  1.66270423e+00],\n         [ 2.21847725e+00,  2.37594938e+00,  1.07033205e+00]]],\n\n\n       ...,\n\n\n       [[[ 2.64796448e+00,  2.28012681e+00,  2.51000547e+00],\n         [ 3.23138452e+00,  2.41332412e+00,  1.77131546e+00],\n         [ 2.99854994e+00,  2.21151471e+00,  1.38267481e+00],\n         ...,\n         [ 2.49546647e+00,  2.01915812e+00,  1.91050327e+00],\n         [ 1.94099808e+00,  1.17039192e+00,  2.95228744e+00],\n         [ 2.97969508e+00,  2.80715132e+00,  2.20207000e+00]],\n\n        [[ 1.12224340e+00,  2.98630476e+00,  1.35356200e+00],\n         [ 2.60894608e+00,  2.24691558e+00,  1.14001548e+00],\n         [ 1.69371402e+00,  2.27865100e+00,  3.57961297e+00],\n         ...,\n         [ 8.00815463e-01,  1.47804070e+00,  1.21544790e+00],\n         [ 3.49256659e+00,  1.67526615e+00,  8.54868293e-01],\n         [ 4.34268206e-01,  2.29811311e+00,  1.49254620e+00]],\n\n        [[ 1.57559466e+00,  8.77128184e-01,  2.40767860e+00],\n         [ 2.23778033e+00,  7.49116063e-01,  2.85252738e+00],\n         [ 1.73333442e+00,  6.52190149e-01,  2.74401450e+00],\n         ...,\n         [ 2.36596918e+00,  2.54376197e+00,  2.32639718e+00],\n         [ 2.70557857e+00,  9.98917997e-01,  3.18021894e+00],\n         [ 1.40815115e+00,  2.69143534e+00,  1.50684261e+00]],\n\n        ...,\n\n        [[ 1.83740175e+00,  6.02814853e-01,  1.32506108e+00],\n         [ 1.26550043e+00,  2.46471357e+00,  7.18353987e-01],\n         [ 2.38165355e+00,  2.20288324e+00,  1.63479745e+00],\n         ...,\n         [ 3.16935253e+00,  1.39669085e+00,  1.40975761e+00],\n         [ 3.49207640e+00,  2.80185461e+00,  2.77135372e+00],\n         [ 1.56302989e+00,  1.88097739e+00,  1.36490571e+00]],\n\n        [[ 8.72321784e-01,  2.19364285e+00,  1.90088105e+00],\n         [ 2.89468217e+00,  1.61606359e+00,  2.52657390e+00],\n         [ 2.22810483e+00,  2.27356052e+00,  1.70319462e+00],\n         ...,\n         [ 2.15055656e+00,  2.59941316e+00,  1.28438139e+00],\n         [ 8.46922159e-01,  1.17792976e+00,  3.36872411e+00],\n         [ 3.15767097e+00,  1.85033286e+00,  2.38257194e+00]],\n\n        [[ 1.72134078e+00,  1.93646061e+00,  1.30951202e+00],\n         [ 1.62513340e+00,  4.47392702e-01,  1.41081977e+00],\n         [ 2.65997887e+00,  2.08256555e+00,  2.02802610e+00],\n         ...,\n         [ 1.91646695e+00,  2.13153696e+00,  1.64962685e+00],\n         [ 2.60047406e-01,  2.76992083e+00,  2.24391818e+00],\n         [ 2.63852978e+00,  9.19822454e-01,  2.95694852e+00]]],\n\n\n       [[[-1.26716673e-01,  5.31943440e-01,  1.08114815e+00],\n         [-4.20577496e-01, -4.78424668e-01,  1.08079946e+00],\n         [-5.11068642e-01,  2.84965932e-01,  2.84304827e-01],\n         ...,\n         [ 3.69502008e-01, -1.01797745e-01,  1.73905209e-01],\n         [ 1.11126542e+00,  3.08168083e-01, -9.77431834e-01],\n         [ 2.17421561e-01,  3.62836570e-01, -8.98771882e-01]],\n\n        [[ 3.93059820e-01, -1.57597139e-01,  5.92233598e-01],\n         [-9.36195552e-01, -4.66344208e-01,  3.10766876e-01],\n         [ 7.89638162e-01,  7.68676817e-01,  4.98211477e-03],\n         ...,\n         [-3.15556198e-01,  4.05379534e-01,  1.78846791e-02],\n         [ 2.38742650e-01,  3.11475366e-01, -2.09337458e-01],\n         [ 1.31878924e+00, -9.42710996e-01, -1.15479834e-01]],\n\n        [[ 2.54590106e+00, -2.52118558e-01, -1.61348023e-02],\n         [-6.72810614e-01, -9.16721106e-01,  6.82285070e-01],\n         [-1.45189598e-01, -8.27016532e-02,  7.26821959e-01],\n         ...,\n         [-1.36315501e+00, -8.68360519e-01,  3.91026199e-01],\n         [-7.34612584e-01, -2.29043752e-01,  3.09647113e-01],\n         [-2.12627903e-01, -2.30241984e-01,  1.85281754e-01]],\n\n        ...,\n\n        [[ 3.84261817e-01,  6.28491402e-01, -6.94015861e-01],\n         [ 1.11370504e-01, -1.93647981e-01, -1.56615293e+00],\n         [ 8.41563165e-01,  4.58357781e-01,  2.01407701e-01],\n         ...,\n         [ 1.37718534e+00, -2.49635383e-01,  6.47402644e-01],\n         [ 2.69623548e-01,  1.95909753e-01, -5.24226010e-01],\n         [-1.74405181e+00, -3.02956939e-01,  1.54848433e+00]],\n\n        [[-3.43484551e-01,  1.27386853e-01, -7.00501680e-01],\n         [ 1.59458864e+00,  2.68001050e-01,  2.66701460e-01],\n         [ 4.27275181e-01,  5.71175098e-01,  5.68020791e-02],\n         ...,\n         [-1.42706305e-01,  6.71700001e-01, -1.11190236e+00],\n         [-9.23030972e-01,  1.24575563e-01,  3.45695615e-01],\n         [ 9.33753729e-01,  2.20819020e+00,  2.43206620e-02]],\n\n        [[ 8.32625031e-01, -1.54156148e+00, -4.44054991e-01],\n         [-1.13637459e+00,  5.41306697e-02, -2.57050335e-01],\n         [-1.03471756e+00, -4.93256360e-01,  1.07624018e+00],\n         ...,\n         [-4.54048008e-01,  1.63555443e-01,  5.44029713e-01],\n         [-7.87320137e-01, -4.73366026e-03,  3.90645325e-01],\n         [-1.08848858e+00,  4.81562436e-01, -1.34794223e+00]]],\n\n\n       [[[ 2.92607927e+00,  2.67005634e+00,  1.22903168e+00],\n         [ 1.43530524e+00,  9.30108964e-01,  2.20784307e+00],\n         [ 2.46300554e+00,  2.48280382e+00,  2.98268747e+00],\n         ...,\n         [ 2.61448336e+00,  1.86224675e+00,  1.79493356e+00],\n         [ 2.05203581e+00,  5.13889730e-01,  2.23790359e+00],\n         [ 2.56978703e+00,  1.46647549e+00,  3.12201381e+00]],\n\n        [[ 2.44259739e+00,  2.40122414e+00,  2.32387567e+00],\n         [ 2.76006460e+00,  8.66858244e-01,  9.66275573e-01],\n         [ 2.31276417e+00,  2.49225402e+00,  1.55074561e+00],\n         ...,\n         [ 3.20364928e+00,  3.07115364e+00,  2.51934242e+00],\n         [ 1.19874275e+00,  1.77484345e+00,  3.10182381e+00],\n         [ 2.07739973e+00,  3.88424784e-01,  2.13080788e+00]],\n\n        [[ 3.18026853e+00,  3.32242584e+00,  3.17620134e+00],\n         [ 2.46705031e+00,  3.52500153e+00,  1.89984739e+00],\n         [ 1.75183165e+00,  2.02785230e+00,  2.10206366e+00],\n         ...,\n         [ 1.83117425e+00,  1.14719033e+00,  2.55975175e+00],\n         [ 2.09935713e+00,  1.20371878e+00,  2.01193476e+00],\n         [ 3.01769495e+00,  2.69377327e+00,  1.67143071e+00]],\n\n        ...,\n\n        [[ 1.88812482e+00,  1.96068728e+00,  2.17018247e+00],\n         [ 1.22800863e+00,  1.91585636e+00,  1.42034805e+00],\n         [ 1.16623271e+00,  2.19980216e+00,  2.06541538e+00],\n         ...,\n         [ 1.60644913e+00,  3.01361275e+00,  1.75796604e+00],\n         [ 2.02613997e+00,  2.08755589e+00,  1.51992929e+00],\n         [ 1.50674617e+00,  1.47291422e+00,  2.33912563e+00]],\n\n        [[ 1.94551980e+00,  1.43831003e+00,  2.71545053e+00],\n         [ 1.59643519e+00,  1.96677721e+00,  2.86918163e+00],\n         [ 1.12336326e+00,  9.87836480e-01,  2.95410347e+00],\n         ...,\n         [ 3.29386306e+00,  1.25843477e+00,  2.39553142e+00],\n         [ 6.37253404e-01,  5.96065283e-01,  4.49606705e+00],\n         [ 1.76274967e+00,  1.98215592e+00,  1.71873343e+00]],\n\n        [[ 2.82543600e-01,  1.92476737e+00,  2.67289019e+00],\n         [ 2.14733219e+00,  2.04808664e+00,  2.56528687e+00],\n         [ 1.83182943e+00,  2.31931949e+00,  1.25385714e+00],\n         ...,\n         [ 2.54599714e+00,  2.28378820e+00,  2.15709543e+00],\n         [ 3.71842980e+00,  2.92181420e+00,  2.36011672e+00],\n         [ 8.23308825e-01,  2.99482799e+00,  1.71054482e+00]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "y": {
                                    "variable_value": "array([[0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.71662295, 0.5]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295d7a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295ab140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.6325626277923584, 0.645]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b21aa0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.6602996, 0.6875], [0.4547517, 0.9375], [0.569319, 0.75], [0.44528273, 0.875], [0.41660637, 0.8125], [0.61611855, 0.75], [0.5976238, 0.75], [0.6279541, 0.6875], [0.550995, 0.875], [0.5352755, 0.75], [0.5506073, 0.625], [0.43448722, 0.9375], [0.5874692, 0.875]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 0.6228176 ,  1.279567  ,  0.6319921 ],\n         [ 0.17196263,  1.2127403 , -0.37666154],\n         [ 1.6874665 ,  1.8089546 , -0.3807285 ],\n         ...,\n         [ 0.81902355,  0.5621507 ,  3.160108  ],\n         [ 0.79998714, -0.25158766,  3.374726  ],\n         [ 0.6371384 ,  1.5909252 ,  1.1749858 ]],\n\n        [[ 0.9997266 ,  1.1267586 ,  0.07874253],\n         [ 2.2405446 ,  0.17162801,  1.4842591 ],\n         [ 0.5946794 ,  0.24530725,  0.15279475],\n         ...,\n         [ 1.1212714 ,  0.98186636,  1.3828648 ],\n         [ 1.4089218 ,  0.8290496 ,  1.4718194 ],\n         [ 1.0147908 ,  0.8887322 ,  1.1811378 ]],\n\n        [[ 0.40930372,  1.4985173 ,  1.0747759 ],\n         [ 0.1572243 , -0.3368404 ,  1.4215144 ],\n         [ 2.0494149 ,  0.37776262,  1.0269976 ],\n         ...,\n         [-0.23537338,  0.5985969 ,  1.0254573 ],\n         [ 1.3981271 ,  1.7802079 ,  0.16980363],\n         [ 0.7645851 ,  1.8596306 ,  1.5010729 ]],\n\n        ...,\n\n        [[ 1.8047467 ,  0.80355644,  1.7542354 ],\n         [ 0.63642514,  0.46517396,  1.8228971 ],\n         [ 1.1371591 ,  1.2504997 ,  0.61366075],\n         ...,\n         [ 1.8766272 ,  0.5906041 ,  0.7429099 ],\n         [ 0.63381255, -0.17271967,  1.3060272 ],\n         [ 0.92879313,  0.20884898,  1.7473576 ]],\n\n        [[ 0.43078563,  2.2991085 ,  1.1850955 ],\n         [ 1.8284    ,  1.3312215 ,  1.7489727 ],\n         [ 1.7705413 ,  1.6586758 ,  1.411276  ],\n         ...,\n         [ 1.0286585 ,  1.3158512 ,  0.47012806],\n         [ 1.1154088 ,  1.7148558 ,  0.42374212],\n         [ 1.0202699 ,  0.3100337 ,  2.3659275 ]],\n\n        [[ 0.826696  ,  0.62704706,  0.8637603 ],\n         [ 1.8006591 ,  2.124643  ,  0.32316208],\n         [ 1.7351662 ,  0.96658003,  1.1667929 ],\n         ...,\n         [ 2.7673833 ,  0.19018899,  0.50844175],\n         [ 1.4760308 ,  1.4978707 ,  1.0963827 ],\n         [ 1.4354743 ,  2.5028212 ,  1.1444355 ]]],\n\n\n       [[[ 0.6497182 ,  1.5265101 ,  0.2737365 ],\n         [ 1.0062611 ,  0.7273039 ,  0.97769284],\n         [ 0.7922634 ,  1.6093906 ,  2.1975746 ],\n         ...,\n         [ 1.5281417 ,  1.2433189 ,  1.3075562 ],\n         [-0.13382855,  1.0213845 ,  1.6309155 ],\n         [ 1.7310747 ,  1.3735108 ,  1.6485381 ]],\n\n        [[ 1.3588021 ,  0.06604662,  1.2889615 ],\n         [ 0.35148123,  0.84844023,  1.8272902 ],\n         [-0.469367  ,  0.556856  ,  0.42525554],\n         ...,\n         [ 0.7180831 ,  1.0977366 ,  0.04398031],\n         [ 0.09188802,  0.54057527,  1.8547456 ],\n         [ 2.1787636 ,  0.90813625,  0.5954827 ]],\n\n        [[ 0.84125596,  1.7603734 , -0.25102317],\n         [ 0.28195846,  0.7824175 ,  0.85150546],\n         [ 0.7566392 , -0.10013316,  0.9149767 ],\n         ...,\n         [ 0.8211298 , -0.21805023,  1.926155  ],\n         [-0.29194564,  1.5488118 ,  0.8175122 ],\n         [ 1.2672086 , -0.13520686,  1.5465385 ]],\n\n        ...,\n\n        [[ 1.4048158 ,  1.1439883 ,  1.5798103 ],\n         [ 0.59464467,  0.36170244,  1.396027  ],\n         [ 1.7968495 ,  2.7684166 ,  0.811661  ],\n         ...,\n         [ 0.88709116, -0.3234277 ,  1.0517743 ],\n         [ 0.99274975,  0.44084218,  1.6366682 ],\n         [ 0.56026566,  0.7286586 ,  0.04451069]],\n\n        [[ 0.74237835,  0.5452027 ,  0.5638945 ],\n         [ 0.5189527 ,  2.3704906 ,  1.4049081 ],\n         [ 0.5216599 ,  0.7417014 ,  0.7464885 ],\n         ...,\n         [ 0.81659377,  1.1004059 ,  1.1405336 ],\n         [-0.284098  ,  0.9225951 ,  2.0557795 ],\n         [ 1.1978678 ,  1.5165879 ,  1.7971778 ]],\n\n        [[ 0.7052947 ,  1.2764143 ,  1.0218211 ],\n         [ 0.9645209 ,  0.8784347 ,  0.36523452],\n         [ 0.70506847,  1.2978438 ,  1.5159012 ],\n         ...,\n         [ 1.5369956 ,  1.8290869 ,  0.9861722 ],\n         [ 0.7849697 ,  1.6481042 , -0.6114303 ],\n         [-0.5957014 ,  0.92527336,  1.0839422 ]]],\n\n\n       [[[ 3.837186  ,  3.9999456 ,  3.4103687 ],\n         [ 4.5739775 ,  3.7405243 ,  4.705551  ],\n         [ 2.7794716 ,  3.347919  ,  2.6063547 ],\n         ...,\n         [ 1.5984101 ,  3.4646971 ,  3.4651053 ],\n         [ 4.317165  ,  3.7012398 ,  3.0685666 ],\n         [ 2.4499872 ,  2.5448503 ,  2.4447823 ]],\n\n        [[ 2.442501  ,  2.09496   ,  3.0901425 ],\n         [ 2.2588527 ,  2.380831  ,  3.4899042 ],\n         [ 3.2039537 ,  3.0903432 ,  2.1312037 ],\n         ...,\n         [ 3.039087  ,  2.1658185 ,  3.1765192 ],\n         [ 3.248222  ,  2.990319  ,  1.9110918 ],\n         [ 3.4998877 ,  3.8092496 ,  3.0693412 ]],\n\n        [[ 3.068373  ,  3.9034886 ,  1.8828022 ],\n         [ 2.554078  ,  2.388585  ,  2.353098  ],\n         [ 4.106512  ,  3.88906   ,  3.594178  ],\n         ...,\n         [ 2.7875414 ,  2.4412608 ,  3.7873344 ],\n         [ 2.398004  ,  3.2823749 ,  2.8990855 ],\n         [ 2.3673456 ,  3.4162064 ,  4.245406  ]],\n\n        ...,\n\n        [[ 2.9599001 ,  2.5971596 ,  3.6969879 ],\n         [ 2.402045  ,  3.3943183 ,  2.3869576 ],\n         [ 4.7495604 ,  2.4764805 ,  3.5807157 ],\n         ...,\n         [ 1.9488728 ,  3.2477431 ,  1.9256086 ],\n         [ 2.1675563 ,  3.074601  ,  3.1969523 ],\n         [ 3.1572304 ,  3.859755  ,  3.8765824 ]],\n\n        [[ 2.287487  ,  2.4474924 ,  3.1857183 ],\n         [ 4.022104  ,  2.8183548 ,  2.8868408 ],\n         [ 2.8594112 ,  2.7831557 ,  2.5077207 ],\n         ...,\n         [ 3.0983388 ,  3.0721135 ,  2.2073002 ],\n         [ 4.4496903 ,  3.0481758 ,  3.683284  ],\n         [ 2.2046123 ,  3.6654992 ,  3.1476    ]],\n\n        [[ 3.1757965 ,  2.3279903 ,  2.429158  ],\n         [ 1.4367039 ,  2.4706993 ,  3.2138116 ],\n         [ 2.4201193 ,  3.1756456 ,  3.3232977 ],\n         ...,\n         [ 3.2010982 ,  2.360423  ,  2.2885525 ],\n         [ 3.105548  ,  2.2278852 ,  2.6278043 ],\n         [ 3.3100653 ,  1.7737194 ,  4.237723  ]]],\n\n\n       ...,\n\n\n       [[[ 0.14238504, -0.03533543, -0.99849594],\n         [-0.28704262, -0.39126796, -0.30319226],\n         [-0.6274707 , -0.36788645,  0.9570166 ],\n         ...,\n         [ 2.2404299 , -1.0730077 ,  0.3655274 ],\n         [ 0.2963227 ,  0.29816642,  0.03106794],\n         [-0.87806   , -0.69860923,  0.4890413 ]],\n\n        [[ 0.1430003 , -0.4699821 , -0.0366163 ],\n         [-0.47435015,  0.12700175, -0.40552866],\n         [ 1.0858935 ,  0.01415152,  0.00573437],\n         ...,\n         [-0.6670627 ,  0.05457217, -0.87357247],\n         [-1.0889372 , -0.60335076,  0.11253951],\n         [ 0.3128242 , -0.44827014,  1.3582653 ]],\n\n        [[-0.74145776,  0.6428693 , -0.37769568],\n         [ 0.04305688,  0.76734465, -0.32925266],\n         [-1.8633661 ,  0.3818711 , -0.7469255 ],\n         ...,\n         [-0.03033455,  1.2922316 , -0.88051546],\n         [-0.14430816, -1.12706   , -0.58685577],\n         [ 0.35850927,  0.30236763, -0.92968947]],\n\n        ...,\n\n        [[ 0.9111567 , -0.17741086,  0.82302165],\n         [-1.3139143 , -0.92002183,  0.88034916],\n         [ 0.3421276 , -1.2947332 , -0.8139958 ],\n         ...,\n         [-0.5097049 ,  0.05679702,  0.51872146],\n         [ 0.5144761 , -0.2931212 , -1.2376463 ],\n         [-0.18431902,  1.4580303 ,  1.1651276 ]],\n\n        [[-0.0762635 ,  0.16310467,  0.20998727],\n         [ 0.32743672,  0.95635605, -0.0306135 ],\n         [ 0.65145963, -0.66789114, -0.0285544 ],\n         ...,\n         [ 0.07875583, -0.7768466 , -1.3700073 ],\n         [-0.7320398 ,  0.15951413,  1.232353  ],\n         [ 1.0638071 ,  0.33895892, -0.62114936]],\n\n        [[ 0.06784086,  0.42321303,  0.7722746 ],\n         [ 0.31619257,  0.7283522 , -0.8172224 ],\n         [ 0.7506097 , -0.9517125 ,  0.31056383],\n         ...,\n         [-1.2799616 , -1.2735474 , -0.58442086],\n         [ 0.26483488,  0.6564447 , -0.42766592],\n         [-0.45616794,  0.6938556 ,  0.13415346]]],\n\n\n       [[[ 2.7314897 ,  3.0767407 ,  1.109776  ],\n         [ 2.209953  ,  2.097202  ,  1.006513  ],\n         [ 2.0668018 ,  2.505957  ,  1.0057625 ],\n         ...,\n         [ 3.0814104 ,  0.82983416,  0.97544664],\n         [ 1.9088724 ,  3.082286  ,  2.6261604 ],\n         [ 2.7930536 ,  1.4620274 ,  2.339198  ]],\n\n        [[ 1.6812738 ,  1.8969322 ,  0.7823726 ],\n         [ 2.478317  ,  1.3612857 ,  1.3068355 ],\n         [ 2.8460019 ,  1.4078743 ,  1.1863139 ],\n         ...,\n         [ 3.223082  ,  2.5841615 ,  0.89770824],\n         [ 2.5894737 ,  1.0596658 ,  2.8043742 ],\n         [ 2.2196527 ,  1.4988624 ,  0.9107394 ]],\n\n        [[ 1.9002758 ,  0.47393823,  4.125383  ],\n         [ 1.89138   ,  2.0889575 ,  1.2798547 ],\n         [ 0.9404832 ,  2.6099372 , -0.16007452],\n         ...,\n         [ 2.1477323 ,  2.6671977 ,  2.7695053 ],\n         [ 2.4229598 ,  2.113749  ,  1.4225603 ],\n         [ 1.5952132 ,  1.9479105 ,  0.76483434]],\n\n        ...,\n\n        [[ 1.7331903 ,  1.7174023 ,  2.1403306 ],\n         [ 1.7590077 ,  2.306011  ,  2.1877518 ],\n         [ 1.9294696 ,  1.7414129 ,  2.8047056 ],\n         ...,\n         [ 1.3670094 ,  2.1346211 ,  1.5932788 ],\n         [ 2.6643074 ,  1.8345262 ,  2.0554428 ],\n         [ 1.0098377 ,  0.7027593 ,  2.6784573 ]],\n\n        [[ 1.5362837 ,  1.1979786 ,  2.0491025 ],\n         [ 2.8513596 ,  1.5900836 ,  2.708308  ],\n         [ 2.1025486 ,  1.583828  ,  1.6236138 ],\n         ...,\n         [ 2.2010467 ,  1.8548431 ,  1.0249231 ],\n         [ 3.1174319 ,  3.253985  ,  1.3396175 ],\n         [ 1.69355   ,  0.6375641 ,  1.3934294 ]],\n\n        [[ 0.9767283 ,  1.5718067 ,  2.0388832 ],\n         [ 2.7027667 ,  1.5234451 ,  0.22092608],\n         [ 1.893769  ,  2.885083  ,  1.639946  ],\n         ...,\n         [ 1.9854423 ,  1.8812606 ,  1.9772158 ],\n         [ 2.4196641 ,  1.2165741 ,  1.7740692 ],\n         [ 2.535285  ,  2.0794058 ,  1.3790405 ]]],\n\n\n       [[[ 2.3015416 ,  3.4735506 ,  1.712516  ],\n         [ 1.5311545 ,  1.5967093 ,  2.012839  ],\n         [ 0.7945439 ,  1.724238  ,  1.9680353 ],\n         ...,\n         [ 0.7375039 ,  1.5521749 ,  2.3668573 ],\n         [ 3.8021069 ,  1.6625031 ,  2.5970037 ],\n         [ 1.2033911 ,  0.47284713,  2.4389822 ]],\n\n        [[ 2.6757927 ,  2.85691   ,  3.1942768 ],\n         [ 1.7860165 ,  2.133067  ,  2.5397923 ],\n         [ 1.9840678 ,  2.6818743 ,  2.5184968 ],\n         ...,\n         [ 1.2019049 ,  2.1448724 ,  1.5787    ],\n         [ 2.466311  ,  1.5666889 ,  1.5869466 ],\n         [ 3.2253041 ,  2.0955534 ,  1.6361744 ]],\n\n        [[ 2.4005451 ,  0.63485914,  1.352158  ],\n         [ 2.205904  ,  0.79898834,  1.468501  ],\n         [ 2.5276625 ,  2.3631237 ,  1.7676456 ],\n         ...,\n         [ 3.217859  ,  2.008125  ,  2.132113  ],\n         [ 2.790018  ,  2.5264306 ,  1.6834542 ],\n         [ 2.167873  ,  1.9884812 ,  1.8418895 ]],\n\n        ...,\n\n        [[ 0.9595962 ,  2.1272502 ,  1.8803443 ],\n         [ 0.70762616,  2.2703788 ,  1.5859979 ],\n         [ 0.8502531 ,  1.6425009 ,  1.6954409 ],\n         ...,\n         [ 2.8960578 ,  2.6029985 ,  2.0547998 ],\n         [ 1.433188  ,  2.3054357 ,  1.1810427 ],\n         [ 0.96762174,  1.6491321 ,  0.47410426]],\n\n        [[ 2.8517845 ,  1.5328779 ,  1.3837007 ],\n         [ 1.8338019 ,  1.4211063 ,  3.1747415 ],\n         [ 2.6876466 ,  2.1948624 ,  2.2218244 ],\n         ...,\n         [ 2.7747774 ,  2.7697425 ,  3.6188731 ],\n         [ 0.8329298 ,  2.2160094 ,  2.463349  ],\n         [ 2.4812436 ,  1.4666696 ,  1.3799483 ]],\n\n        [[ 2.7759564 ,  2.392681  ,  2.4196234 ],\n         [ 1.6815453 ,  3.0634818 ,  1.2874599 ],\n         [ 1.3416866 ,  2.341403  ,  1.9744608 ],\n         ...,\n         [ 2.6836662 ,  2.3812766 ,  2.0431356 ],\n         [ 1.474583  ,  2.2373998 ,  2.0803356 ],\n         [ 2.2414138 ,  1.0868199 ,  2.8346226 ]]]], dtype=float32), array([[0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 0.6228176 ,  1.279567  ,  0.6319921 ],\n         [ 0.17196263,  1.2127403 , -0.37666154],\n         [ 1.6874665 ,  1.8089546 , -0.3807285 ],\n         ...,\n         [ 0.81902355,  0.5621507 ,  3.160108  ],\n         [ 0.79998714, -0.25158766,  3.374726  ],\n         [ 0.6371384 ,  1.5909252 ,  1.1749858 ]],\n\n        [[ 0.9997266 ,  1.1267586 ,  0.07874253],\n         [ 2.2405446 ,  0.17162801,  1.4842591 ],\n         [ 0.5946794 ,  0.24530725,  0.15279475],\n         ...,\n         [ 1.1212714 ,  0.98186636,  1.3828648 ],\n         [ 1.4089218 ,  0.8290496 ,  1.4718194 ],\n         [ 1.0147908 ,  0.8887322 ,  1.1811378 ]],\n\n        [[ 0.40930372,  1.4985173 ,  1.0747759 ],\n         [ 0.1572243 , -0.3368404 ,  1.4215144 ],\n         [ 2.0494149 ,  0.37776262,  1.0269976 ],\n         ...,\n         [-0.23537338,  0.5985969 ,  1.0254573 ],\n         [ 1.3981271 ,  1.7802079 ,  0.16980363],\n         [ 0.7645851 ,  1.8596306 ,  1.5010729 ]],\n\n        ...,\n\n        [[ 1.8047467 ,  0.80355644,  1.7542354 ],\n         [ 0.63642514,  0.46517396,  1.8228971 ],\n         [ 1.1371591 ,  1.2504997 ,  0.61366075],\n         ...,\n         [ 1.8766272 ,  0.5906041 ,  0.7429099 ],\n         [ 0.63381255, -0.17271967,  1.3060272 ],\n         [ 0.92879313,  0.20884898,  1.7473576 ]],\n\n        [[ 0.43078563,  2.2991085 ,  1.1850955 ],\n         [ 1.8284    ,  1.3312215 ,  1.7489727 ],\n         [ 1.7705413 ,  1.6586758 ,  1.411276  ],\n         ...,\n         [ 1.0286585 ,  1.3158512 ,  0.47012806],\n         [ 1.1154088 ,  1.7148558 ,  0.42374212],\n         [ 1.0202699 ,  0.3100337 ,  2.3659275 ]],\n\n        [[ 0.826696  ,  0.62704706,  0.8637603 ],\n         [ 1.8006591 ,  2.124643  ,  0.32316208],\n         [ 1.7351662 ,  0.96658003,  1.1667929 ],\n         ...,\n         [ 2.7673833 ,  0.19018899,  0.50844175],\n         [ 1.4760308 ,  1.4978707 ,  1.0963827 ],\n         [ 1.4354743 ,  2.5028212 ,  1.1444355 ]]],\n\n\n       [[[ 0.6497182 ,  1.5265101 ,  0.2737365 ],\n         [ 1.0062611 ,  0.7273039 ,  0.97769284],\n         [ 0.7922634 ,  1.6093906 ,  2.1975746 ],\n         ...,\n         [ 1.5281417 ,  1.2433189 ,  1.3075562 ],\n         [-0.13382855,  1.0213845 ,  1.6309155 ],\n         [ 1.7310747 ,  1.3735108 ,  1.6485381 ]],\n\n        [[ 1.3588021 ,  0.06604662,  1.2889615 ],\n         [ 0.35148123,  0.84844023,  1.8272902 ],\n         [-0.469367  ,  0.556856  ,  0.42525554],\n         ...,\n         [ 0.7180831 ,  1.0977366 ,  0.04398031],\n         [ 0.09188802,  0.54057527,  1.8547456 ],\n         [ 2.1787636 ,  0.90813625,  0.5954827 ]],\n\n        [[ 0.84125596,  1.7603734 , -0.25102317],\n         [ 0.28195846,  0.7824175 ,  0.85150546],\n         [ 0.7566392 , -0.10013316,  0.9149767 ],\n         ...,\n         [ 0.8211298 , -0.21805023,  1.926155  ],\n         [-0.29194564,  1.5488118 ,  0.8175122 ],\n         [ 1.2672086 , -0.13520686,  1.5465385 ]],\n\n        ...,\n\n        [[ 1.4048158 ,  1.1439883 ,  1.5798103 ],\n         [ 0.59464467,  0.36170244,  1.396027  ],\n         [ 1.7968495 ,  2.7684166 ,  0.811661  ],\n         ...,\n         [ 0.88709116, -0.3234277 ,  1.0517743 ],\n         [ 0.99274975,  0.44084218,  1.6366682 ],\n         [ 0.56026566,  0.7286586 ,  0.04451069]],\n\n        [[ 0.74237835,  0.5452027 ,  0.5638945 ],\n         [ 0.5189527 ,  2.3704906 ,  1.4049081 ],\n         [ 0.5216599 ,  0.7417014 ,  0.7464885 ],\n         ...,\n         [ 0.81659377,  1.1004059 ,  1.1405336 ],\n         [-0.284098  ,  0.9225951 ,  2.0557795 ],\n         [ 1.1978678 ,  1.5165879 ,  1.7971778 ]],\n\n        [[ 0.7052947 ,  1.2764143 ,  1.0218211 ],\n         [ 0.9645209 ,  0.8784347 ,  0.36523452],\n         [ 0.70506847,  1.2978438 ,  1.5159012 ],\n         ...,\n         [ 1.5369956 ,  1.8290869 ,  0.9861722 ],\n         [ 0.7849697 ,  1.6481042 , -0.6114303 ],\n         [-0.5957014 ,  0.92527336,  1.0839422 ]]],\n\n\n       [[[ 3.837186  ,  3.9999456 ,  3.4103687 ],\n         [ 4.5739775 ,  3.7405243 ,  4.705551  ],\n         [ 2.7794716 ,  3.347919  ,  2.6063547 ],\n         ...,\n         [ 1.5984101 ,  3.4646971 ,  3.4651053 ],\n         [ 4.317165  ,  3.7012398 ,  3.0685666 ],\n         [ 2.4499872 ,  2.5448503 ,  2.4447823 ]],\n\n        [[ 2.442501  ,  2.09496   ,  3.0901425 ],\n         [ 2.2588527 ,  2.380831  ,  3.4899042 ],\n         [ 3.2039537 ,  3.0903432 ,  2.1312037 ],\n         ...,\n         [ 3.039087  ,  2.1658185 ,  3.1765192 ],\n         [ 3.248222  ,  2.990319  ,  1.9110918 ],\n         [ 3.4998877 ,  3.8092496 ,  3.0693412 ]],\n\n        [[ 3.068373  ,  3.9034886 ,  1.8828022 ],\n         [ 2.554078  ,  2.388585  ,  2.353098  ],\n         [ 4.106512  ,  3.88906   ,  3.594178  ],\n         ...,\n         [ 2.7875414 ,  2.4412608 ,  3.7873344 ],\n         [ 2.398004  ,  3.2823749 ,  2.8990855 ],\n         [ 2.3673456 ,  3.4162064 ,  4.245406  ]],\n\n        ...,\n\n        [[ 2.9599001 ,  2.5971596 ,  3.6969879 ],\n         [ 2.402045  ,  3.3943183 ,  2.3869576 ],\n         [ 4.7495604 ,  2.4764805 ,  3.5807157 ],\n         ...,\n         [ 1.9488728 ,  3.2477431 ,  1.9256086 ],\n         [ 2.1675563 ,  3.074601  ,  3.1969523 ],\n         [ 3.1572304 ,  3.859755  ,  3.8765824 ]],\n\n        [[ 2.287487  ,  2.4474924 ,  3.1857183 ],\n         [ 4.022104  ,  2.8183548 ,  2.8868408 ],\n         [ 2.8594112 ,  2.7831557 ,  2.5077207 ],\n         ...,\n         [ 3.0983388 ,  3.0721135 ,  2.2073002 ],\n         [ 4.4496903 ,  3.0481758 ,  3.683284  ],\n         [ 2.2046123 ,  3.6654992 ,  3.1476    ]],\n\n        [[ 3.1757965 ,  2.3279903 ,  2.429158  ],\n         [ 1.4367039 ,  2.4706993 ,  3.2138116 ],\n         [ 2.4201193 ,  3.1756456 ,  3.3232977 ],\n         ...,\n         [ 3.2010982 ,  2.360423  ,  2.2885525 ],\n         [ 3.105548  ,  2.2278852 ,  2.6278043 ],\n         [ 3.3100653 ,  1.7737194 ,  4.237723  ]]],\n\n\n       ...,\n\n\n       [[[ 0.14238504, -0.03533543, -0.99849594],\n         [-0.28704262, -0.39126796, -0.30319226],\n         [-0.6274707 , -0.36788645,  0.9570166 ],\n         ...,\n         [ 2.2404299 , -1.0730077 ,  0.3655274 ],\n         [ 0.2963227 ,  0.29816642,  0.03106794],\n         [-0.87806   , -0.69860923,  0.4890413 ]],\n\n        [[ 0.1430003 , -0.4699821 , -0.0366163 ],\n         [-0.47435015,  0.12700175, -0.40552866],\n         [ 1.0858935 ,  0.01415152,  0.00573437],\n         ...,\n         [-0.6670627 ,  0.05457217, -0.87357247],\n         [-1.0889372 , -0.60335076,  0.11253951],\n         [ 0.3128242 , -0.44827014,  1.3582653 ]],\n\n        [[-0.74145776,  0.6428693 , -0.37769568],\n         [ 0.04305688,  0.76734465, -0.32925266],\n         [-1.8633661 ,  0.3818711 , -0.7469255 ],\n         ...,\n         [-0.03033455,  1.2922316 , -0.88051546],\n         [-0.14430816, -1.12706   , -0.58685577],\n         [ 0.35850927,  0.30236763, -0.92968947]],\n\n        ...,\n\n        [[ 0.9111567 , -0.17741086,  0.82302165],\n         [-1.3139143 , -0.92002183,  0.88034916],\n         [ 0.3421276 , -1.2947332 , -0.8139958 ],\n         ...,\n         [-0.5097049 ,  0.05679702,  0.51872146],\n         [ 0.5144761 , -0.2931212 , -1.2376463 ],\n         [-0.18431902,  1.4580303 ,  1.1651276 ]],\n\n        [[-0.0762635 ,  0.16310467,  0.20998727],\n         [ 0.32743672,  0.95635605, -0.0306135 ],\n         [ 0.65145963, -0.66789114, -0.0285544 ],\n         ...,\n         [ 0.07875583, -0.7768466 , -1.3700073 ],\n         [-0.7320398 ,  0.15951413,  1.232353  ],\n         [ 1.0638071 ,  0.33895892, -0.62114936]],\n\n        [[ 0.06784086,  0.42321303,  0.7722746 ],\n         [ 0.31619257,  0.7283522 , -0.8172224 ],\n         [ 0.7506097 , -0.9517125 ,  0.31056383],\n         ...,\n         [-1.2799616 , -1.2735474 , -0.58442086],\n         [ 0.26483488,  0.6564447 , -0.42766592],\n         [-0.45616794,  0.6938556 ,  0.13415346]]],\n\n\n       [[[ 2.7314897 ,  3.0767407 ,  1.109776  ],\n         [ 2.209953  ,  2.097202  ,  1.006513  ],\n         [ 2.0668018 ,  2.505957  ,  1.0057625 ],\n         ...,\n         [ 3.0814104 ,  0.82983416,  0.97544664],\n         [ 1.9088724 ,  3.082286  ,  2.6261604 ],\n         [ 2.7930536 ,  1.4620274 ,  2.339198  ]],\n\n        [[ 1.6812738 ,  1.8969322 ,  0.7823726 ],\n         [ 2.478317  ,  1.3612857 ,  1.3068355 ],\n         [ 2.8460019 ,  1.4078743 ,  1.1863139 ],\n         ...,\n         [ 3.223082  ,  2.5841615 ,  0.89770824],\n         [ 2.5894737 ,  1.0596658 ,  2.8043742 ],\n         [ 2.2196527 ,  1.4988624 ,  0.9107394 ]],\n\n        [[ 1.9002758 ,  0.47393823,  4.125383  ],\n         [ 1.89138   ,  2.0889575 ,  1.2798547 ],\n         [ 0.9404832 ,  2.6099372 , -0.16007452],\n         ...,\n         [ 2.1477323 ,  2.6671977 ,  2.7695053 ],\n         [ 2.4229598 ,  2.113749  ,  1.4225603 ],\n         [ 1.5952132 ,  1.9479105 ,  0.76483434]],\n\n        ...,\n\n        [[ 1.7331903 ,  1.7174023 ,  2.1403306 ],\n         [ 1.7590077 ,  2.306011  ,  2.1877518 ],\n         [ 1.9294696 ,  1.7414129 ,  2.8047056 ],\n         ...,\n         [ 1.3670094 ,  2.1346211 ,  1.5932788 ],\n         [ 2.6643074 ,  1.8345262 ,  2.0554428 ],\n         [ 1.0098377 ,  0.7027593 ,  2.6784573 ]],\n\n        [[ 1.5362837 ,  1.1979786 ,  2.0491025 ],\n         [ 2.8513596 ,  1.5900836 ,  2.708308  ],\n         [ 2.1025486 ,  1.583828  ,  1.6236138 ],\n         ...,\n         [ 2.2010467 ,  1.8548431 ,  1.0249231 ],\n         [ 3.1174319 ,  3.253985  ,  1.3396175 ],\n         [ 1.69355   ,  0.6375641 ,  1.3934294 ]],\n\n        [[ 0.9767283 ,  1.5718067 ,  2.0388832 ],\n         [ 2.7027667 ,  1.5234451 ,  0.22092608],\n         [ 1.893769  ,  2.885083  ,  1.639946  ],\n         ...,\n         [ 1.9854423 ,  1.8812606 ,  1.9772158 ],\n         [ 2.4196641 ,  1.2165741 ,  1.7740692 ],\n         [ 2.535285  ,  2.0794058 ,  1.3790405 ]]],\n\n\n       [[[ 2.3015416 ,  3.4735506 ,  1.712516  ],\n         [ 1.5311545 ,  1.5967093 ,  2.012839  ],\n         [ 0.7945439 ,  1.724238  ,  1.9680353 ],\n         ...,\n         [ 0.7375039 ,  1.5521749 ,  2.3668573 ],\n         [ 3.8021069 ,  1.6625031 ,  2.5970037 ],\n         [ 1.2033911 ,  0.47284713,  2.4389822 ]],\n\n        [[ 2.6757927 ,  2.85691   ,  3.1942768 ],\n         [ 1.7860165 ,  2.133067  ,  2.5397923 ],\n         [ 1.9840678 ,  2.6818743 ,  2.5184968 ],\n         ...,\n         [ 1.2019049 ,  2.1448724 ,  1.5787    ],\n         [ 2.466311  ,  1.5666889 ,  1.5869466 ],\n         [ 3.2253041 ,  2.0955534 ,  1.6361744 ]],\n\n        [[ 2.4005451 ,  0.63485914,  1.352158  ],\n         [ 2.205904  ,  0.79898834,  1.468501  ],\n         [ 2.5276625 ,  2.3631237 ,  1.7676456 ],\n         ...,\n         [ 3.217859  ,  2.008125  ,  2.132113  ],\n         [ 2.790018  ,  2.5264306 ,  1.6834542 ],\n         [ 2.167873  ,  1.9884812 ,  1.8418895 ]],\n\n        ...,\n\n        [[ 0.9595962 ,  2.1272502 ,  1.8803443 ],\n         [ 0.70762616,  2.2703788 ,  1.5859979 ],\n         [ 0.8502531 ,  1.6425009 ,  1.6954409 ],\n         ...,\n         [ 2.8960578 ,  2.6029985 ,  2.0547998 ],\n         [ 1.433188  ,  2.3054357 ,  1.1810427 ],\n         [ 0.96762174,  1.6491321 ,  0.47410426]],\n\n        [[ 2.8517845 ,  1.5328779 ,  1.3837007 ],\n         [ 1.8338019 ,  1.4211063 ,  3.1747415 ],\n         [ 2.6876466 ,  2.1948624 ,  2.2218244 ],\n         ...,\n         [ 2.7747774 ,  2.7697425 ,  3.6188731 ],\n         [ 0.8329298 ,  2.2160094 ,  2.463349  ],\n         [ 2.4812436 ,  1.4666696 ,  1.3799483 ]],\n\n        [[ 2.7759564 ,  2.392681  ,  2.4196234 ],\n         [ 1.6815453 ,  3.0634818 ,  1.2874599 ],\n         [ 1.3416866 ,  2.341403  ,  1.9744608 ],\n         ...,\n         [ 2.6836662 ,  2.3812766 ,  2.0431356 ],\n         [ 1.474583  ,  2.2373998 ,  2.0803356 ],\n         [ 2.2414138 ,  1.0868199 ,  2.8346226 ]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "y": {
                                    "variable_value": "array([[0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.5874692, 0.875]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b2a7d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b3a280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.5402444458007812, 0.79]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b21960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.5329864, 0.625], [0.40892726, 0.75], [0.5581425, 0.625], [0.61424476, 0.6875], [0.51336133, 0.6875], [0.575194, 0.625], [0.45345384, 0.75], [0.3604955, 0.875], [0.6437249, 0.5625], [0.51543176, 0.6875], [0.5047908, 0.625], [0.37914735, 0.8125], [0.5753859, 0.625]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[-5.9466445e-01, -1.6538094e-01, -4.7089225e-01],\n         [-1.3410203e-01,  7.2176003e-01,  8.3764315e-01],\n         [-5.5096763e-01,  3.7214053e-01,  1.2206773e+00],\n         ...,\n         [-2.0571844e-01, -2.0898511e-01, -1.2572329e-01],\n         [ 2.9529658e-01, -1.4763068e+00,  7.6136833e-01],\n         [ 2.0237288e-01, -1.5132053e-01, -4.9874088e-01]],\n\n        [[-3.1310764e-01,  3.5347876e-01,  1.3863302e+00],\n         [-3.2595038e-01, -5.0692505e-01, -3.3272028e-01],\n         [ 4.9448922e-01, -6.5847969e-01, -7.8062129e-01],\n         ...,\n         [ 1.0826739e+00, -2.0284732e-01,  1.9371024e-01],\n         [-8.1396961e-01,  5.7164609e-01, -2.1961629e-01],\n         [ 4.5840865e-01, -3.6544704e-01,  6.2119961e-02]],\n\n        [[-5.8533847e-01,  2.7799550e-01,  4.2635429e-01],\n         [ 9.9140251e-01,  1.4209239e+00, -5.4550993e-01],\n         [ 7.6273871e-03, -3.7498391e-01,  4.1845855e-01],\n         ...,\n         [-6.6344577e-01, -1.5120848e+00,  7.1856439e-01],\n         [-2.1805835e-01,  7.8853309e-01,  1.3049840e+00],\n         [ 6.0055363e-01, -8.9204633e-01,  1.6528573e+00]],\n\n        ...,\n\n        [[-4.0379474e-01,  9.1624641e-01, -3.6012977e-01],\n         [ 1.0670961e+00,  4.8368344e-01,  1.6774415e+00],\n         [-1.4807303e+00, -7.9667258e-01, -5.3632146e-01],\n         ...,\n         [ 1.5850863e-01, -3.7400985e-01,  6.8121988e-01],\n         [-6.4896661e-01, -5.0649282e-02,  9.0680110e-01],\n         [-2.0246221e-01,  1.2530555e+00,  6.7635489e-01]],\n\n        [[-2.5756067e-01,  1.0592083e+00,  7.0754099e-01],\n         [-4.5181218e-01, -1.0739055e-01,  4.6177772e-01],\n         [-4.5702231e-01,  2.8380442e-01, -1.0752690e+00],\n         ...,\n         [-3.9171869e-01,  2.1447724e-01,  3.8541391e-01],\n         [-5.9045357e-01,  1.3327241e+00, -6.9085932e-01],\n         [ 5.0239193e-01,  5.9962299e-02,  3.1972468e-01]],\n\n        [[ 9.1256273e-01,  1.2997686e+00, -9.0244591e-01],\n         [-2.9417396e-01,  4.3739778e-01,  6.0037404e-01],\n         [-2.2183347e-01, -5.8308566e-01,  1.0910530e-02],\n         ...,\n         [-3.6917886e-01,  2.3338054e-01,  2.3796083e-01],\n         [ 1.1245507e+00, -3.4195244e-01, -1.4019490e+00],\n         [ 2.4688439e-01,  2.2108644e-01, -6.4333814e-01]]],\n\n\n       [[[ 1.7773269e+00,  1.2170917e+00,  1.5022007e+00],\n         [ 2.0483673e+00, -2.6739994e-01,  3.2159362e-02],\n         [ 7.1557719e-01, -5.8585036e-01,  1.4146655e+00],\n         ...,\n         [ 1.6290988e+00,  1.1165442e+00,  5.2773678e-01],\n         [ 9.8405474e-01,  5.3237611e-01,  1.7958312e+00],\n         [ 1.6081200e+00,  1.6271843e+00,  6.8361044e-01]],\n\n        [[ 9.1558427e-01, -1.0494336e+00,  7.7808565e-01],\n         [ 1.5029082e+00,  6.4708310e-01,  1.7610753e+00],\n         [-9.9044460e-01,  1.4098151e+00,  4.7541401e-01],\n         ...,\n         [ 9.6199411e-01,  1.5776454e+00,  1.2468404e+00],\n         [ 1.6419210e+00,  6.9804859e-01,  8.9782375e-01],\n         [ 6.0436112e-01, -9.7942606e-02,  4.3114275e-01]],\n\n        [[ 1.9277737e+00,  8.5343397e-01,  6.6077006e-01],\n         [ 1.2201989e+00,  6.7279404e-01,  6.0881203e-01],\n         [ 5.8282763e-01,  2.3528388e-01,  1.1971016e+00],\n         ...,\n         [ 7.6198614e-01,  5.6885976e-01,  3.6887217e-01],\n         [-7.2903998e-02,  2.2697895e+00,  8.7051344e-01],\n         [ 7.2220469e-01,  2.7494657e-01,  1.3932813e+00]],\n\n        ...,\n\n        [[ 1.2146904e+00,  1.1649488e+00,  8.5788238e-01],\n         [ 1.5182406e+00,  1.0637491e+00,  1.9000349e+00],\n         [ 1.1359313e+00,  6.9897926e-01,  9.4763672e-01],\n         ...,\n         [ 1.6695526e+00,  1.1372697e+00, -3.1292237e-02],\n         [ 1.7984856e+00,  1.4912060e+00,  9.5610428e-01],\n         [-3.0471221e-01, -5.1969075e-01, -7.1351573e-02]],\n\n        [[-3.1661904e-01,  1.0280261e+00,  1.0518737e+00],\n         [ 1.9791884e+00,  8.4706980e-01,  1.4707468e+00],\n         [ 9.7804600e-01,  1.0323633e+00,  6.2789953e-01],\n         ...,\n         [ 4.3290842e-01,  7.7776712e-01,  6.2620473e-01],\n         [ 4.9120054e-01,  6.6371369e-01,  5.3739345e-01],\n         [ 6.3469827e-01,  1.2896407e+00,  7.6476651e-01]],\n\n        [[ 9.1902322e-01,  1.8351957e-01,  8.1626183e-01],\n         [ 1.0348569e+00,  2.4184401e+00,  8.7173665e-01],\n         [ 8.6703330e-01,  3.4859499e-01,  9.6301013e-01],\n         ...,\n         [ 1.5833969e+00, -2.8966654e-03,  9.8377073e-01],\n         [ 7.5125051e-01,  7.4094772e-01,  8.5345083e-01],\n         [ 7.3837042e-01,  8.9255363e-01,  1.0278648e+00]]],\n\n\n       [[[ 1.9958580e+00,  1.3338239e+00,  1.4309561e+00],\n         [-5.7748264e-01,  2.6084185e-01,  3.1477740e-01],\n         [ 9.3105143e-01,  1.2671791e+00,  1.4925586e+00],\n         ...,\n         [ 9.9355316e-01,  1.1326015e+00,  5.7788545e-01],\n         [ 1.9964167e-01,  2.3625019e+00,  8.6333770e-01],\n         [ 2.4210849e+00, -4.3730575e-01,  1.5801712e+00]],\n\n        [[-1.2863539e-01,  5.9573400e-01,  1.2725097e-01],\n         [ 1.7586684e+00,  7.6459390e-01,  6.0283053e-01],\n         [ 7.1853924e-01,  1.3185402e+00,  1.1416709e+00],\n         ...,\n         [ 1.2583528e+00,  1.7560425e+00,  2.0628268e-01],\n         [ 7.8132898e-01,  1.5653234e+00,  1.6880417e+00],\n         [ 9.5409566e-01, -2.2981933e-01,  2.0058641e+00]],\n\n        [[ 8.4446520e-01,  1.1274135e+00,  1.1146094e+00],\n         [ 1.5430744e+00,  1.8728001e+00,  4.1264272e-01],\n         [ 2.4213576e+00,  4.3552223e-01,  1.3552970e+00],\n         ...,\n         [ 1.4677811e+00,  1.6956488e+00, -2.3188783e-01],\n         [ 1.3544018e+00,  2.3618022e-01,  4.1906795e-01],\n         [-5.8848739e-01,  4.0272540e-01,  9.1363245e-01]],\n\n        ...,\n\n        [[ 5.1509726e-01,  3.0538151e+00,  1.6106536e+00],\n         [ 7.0459563e-01,  7.9907203e-01,  1.2643504e+00],\n         [ 7.6414430e-01,  9.3446076e-01,  7.3644519e-01],\n         ...,\n         [ 1.2909280e+00,  1.2784065e+00,  2.3142650e+00],\n         [ 6.7183036e-01,  1.0640774e+00,  2.1002016e+00],\n         [ 1.5919631e+00,  2.0780249e+00,  2.2186065e+00]],\n\n        [[ 2.7800721e-01,  9.5380932e-01,  2.1348588e+00],\n         [ 2.0066659e-01, -1.8898684e-01,  5.7581615e-01],\n         [ 1.3218702e+00,  1.2996256e+00,  1.0539788e+00],\n         ...,\n         [ 1.1237597e+00,  1.5030750e+00,  1.5817088e+00],\n         [-3.2592669e-01,  2.2081249e+00,  6.9975722e-01],\n         [ 1.8984569e-02,  6.0252089e-02,  2.1362495e+00]],\n\n        [[ 9.5586330e-01,  1.3318011e+00,  2.1283090e+00],\n         [-1.2299398e-01,  8.3746052e-01,  1.5615985e+00],\n         [ 9.9661928e-01,  1.8246278e+00,  5.7222802e-02],\n         ...,\n         [ 2.5720078e-01,  2.4338990e-01,  9.8602355e-01],\n         [ 1.8500549e+00,  1.7175021e+00,  1.4129514e+00],\n         [ 1.0439371e+00,  6.8814433e-01,  1.0112284e+00]]],\n\n\n       ...,\n\n\n       [[[ 3.0062933e+00,  8.2212591e-01,  3.1199033e+00],\n         [ 2.2983701e+00,  7.4996942e-01,  2.1766393e+00],\n         [ 1.9286146e+00,  2.1058974e+00,  3.2946053e+00],\n         ...,\n         [ 2.5107810e+00,  2.4886625e+00,  2.4478858e+00],\n         [ 7.2681469e-01,  2.3943629e+00,  6.8102533e-01],\n         [ 1.3995179e+00,  1.9645919e+00,  1.8221544e+00]],\n\n        [[ 5.6342554e-01,  2.5593185e+00,  2.5148859e+00],\n         [ 2.5224574e+00,  1.1798040e+00,  1.2208484e+00],\n         [ 2.9613962e+00,  3.0356364e+00,  2.5448725e+00],\n         ...,\n         [ 2.1555023e+00,  2.1634190e+00,  1.4673769e+00],\n         [ 2.5871315e+00,  1.2881438e+00,  1.6228987e+00],\n         [ 2.5433486e+00,  1.7734255e+00,  1.7633979e+00]],\n\n        [[ 1.1421793e+00,  2.2443964e+00,  1.2472743e+00],\n         [ 1.6736856e+00,  2.2398136e+00,  2.9154234e+00],\n         [ 1.1775784e+00,  2.2659497e+00,  1.9455712e+00],\n         ...,\n         [ 2.5331936e+00,  1.9957070e+00,  1.5886581e+00],\n         [ 2.7437274e+00,  2.8953059e+00,  1.9965407e+00],\n         [ 2.6900795e+00,  1.3157053e+00,  9.8752701e-01]],\n\n        ...,\n\n        [[ 3.6288645e+00,  1.4287060e+00,  2.1417320e+00],\n         [ 2.2265961e+00,  1.5499936e+00,  1.8612562e+00],\n         [ 2.2643962e+00,  2.3217709e+00,  1.7814491e+00],\n         ...,\n         [ 1.8000181e+00,  2.2536414e+00,  2.1698318e+00],\n         [ 1.6453114e+00,  1.4049989e+00,  2.4749529e+00],\n         [ 2.6914055e+00,  2.0964558e+00,  3.0423930e+00]],\n\n        [[ 1.5557925e+00,  2.0177438e+00,  2.9005818e+00],\n         [ 1.6324799e+00,  1.4242669e+00,  2.1683438e+00],\n         [ 6.8608266e-01,  3.3247499e+00,  2.0344477e+00],\n         ...,\n         [ 1.1957449e+00,  2.1748106e+00,  2.4947641e+00],\n         [ 1.2510796e+00,  3.1652098e+00,  1.8809268e+00],\n         [ 3.1111507e+00,  2.1690760e+00,  2.8908441e+00]],\n\n        [[ 2.9330404e+00,  2.7751999e+00,  2.4144168e+00],\n         [ 2.4071538e+00,  4.8508975e-01,  1.8698195e+00],\n         [ 3.0175240e+00,  2.6718924e+00,  2.1032267e+00],\n         ...,\n         [ 2.3804932e+00,  2.3607304e+00,  9.8957169e-01],\n         [ 4.4641694e-01,  2.7380977e+00,  2.7173882e+00],\n         [ 2.3697963e+00,  2.1377270e+00,  1.7493585e+00]]],\n\n\n       [[[ 1.6593196e+00,  2.8155081e+00,  5.9945041e-01],\n         [ 3.3147902e+00,  2.2321384e+00,  2.5801644e+00],\n         [ 1.8449023e+00,  1.4908499e+00,  2.9255052e+00],\n         ...,\n         [ 2.1290929e+00,  1.0648953e+00,  1.7904347e+00],\n         [ 2.5426656e-01,  2.4841301e+00,  2.1524954e+00],\n         [ 1.8930618e+00,  1.7592880e+00,  1.7321157e+00]],\n\n        [[ 1.3431162e+00,  2.5347703e+00,  1.4114226e+00],\n         [ 2.7376213e+00,  2.0455444e+00,  3.2309971e+00],\n         [ 1.3325551e+00,  4.8444504e-01,  5.3500402e-01],\n         ...,\n         [ 7.2498405e-01,  2.0845358e+00,  2.7081769e+00],\n         [ 8.2658988e-01,  1.3558215e+00,  2.4190574e+00],\n         [ 1.8245475e+00,  1.3262705e+00,  1.5658717e+00]],\n\n        [[ 1.7730089e+00,  1.1169651e+00,  8.9471102e-01],\n         [ 1.6805443e+00,  2.6647141e+00,  2.2541108e+00],\n         [ 3.9232216e+00,  1.3993478e+00,  1.8902596e+00],\n         ...,\n         [ 4.3856883e-01,  3.2676902e+00,  2.3133543e+00],\n         [ 2.0369873e+00,  2.6090305e+00,  2.1672394e+00],\n         [ 1.4991189e+00,  1.7202688e+00,  1.8470118e+00]],\n\n        ...,\n\n        [[ 2.1894491e+00,  1.2826769e+00,  1.9934620e+00],\n         [ 1.8302826e+00,  2.3569818e+00,  2.4932501e+00],\n         [ 1.1182650e+00,  2.0391300e+00,  2.8179088e+00],\n         ...,\n         [ 1.5400803e+00,  2.4331899e+00,  2.3730845e+00],\n         [ 2.0955787e+00,  2.2119420e+00,  2.9520433e+00],\n         [ 2.7548368e+00,  3.3134954e+00,  2.4594157e+00]],\n\n        [[ 1.2180267e-02,  1.8740126e+00,  1.9839679e+00],\n         [ 2.5026290e+00,  3.2742441e+00,  1.7934353e+00],\n         [ 1.6943064e+00,  1.6779420e+00,  2.2723680e+00],\n         ...,\n         [ 8.8717937e-01,  1.5442818e+00,  2.3012090e+00],\n         [ 2.3823121e+00,  2.0736525e+00,  9.6555066e-01],\n         [ 2.1879551e+00,  2.0488324e+00,  1.3585862e+00]],\n\n        [[ 2.2533596e+00,  2.4195051e+00,  1.3304161e+00],\n         [ 6.3168406e-01,  1.0342619e+00,  1.7646941e+00],\n         [ 2.5481424e+00,  1.6597273e+00,  2.2400193e+00],\n         ...,\n         [ 1.3670845e+00,  1.4754093e+00,  1.8107063e+00],\n         [ 1.8017018e+00,  1.7520821e+00,  1.2987478e+00],\n         [ 2.2413042e+00,  1.9889156e+00,  2.9090230e+00]]],\n\n\n       [[[ 1.4035751e+00,  1.6161485e+00,  1.3617316e+00],\n         [ 1.5798285e+00,  2.4312720e+00,  3.2559340e+00],\n         [ 1.9647731e+00,  2.1275702e+00,  1.1855739e+00],\n         ...,\n         [ 7.8567177e-01,  2.0584271e+00,  1.9271830e+00],\n         [ 2.5509305e+00,  1.5022466e+00,  2.2673626e+00],\n         [ 1.2179765e+00,  2.2581191e+00,  8.5012442e-01]],\n\n        [[ 1.6094973e+00,  2.1442904e+00,  1.0899725e+00],\n         [ 3.0677543e+00,  2.8107846e+00,  2.4959996e+00],\n         [ 3.7307250e+00,  2.8962085e+00,  1.3679104e+00],\n         ...,\n         [ 1.6266097e+00,  2.4543540e+00,  1.9322208e+00],\n         [ 1.0794680e+00,  2.3561335e+00,  1.4193656e+00],\n         [ 2.2786400e+00,  2.8000777e+00,  1.7197015e+00]],\n\n        [[ 2.6269612e+00,  1.2258918e+00,  3.1989107e+00],\n         [ 2.1714728e+00,  2.5634389e+00,  1.2633401e+00],\n         [ 3.2519965e+00,  1.6040955e+00,  1.0981863e+00],\n         ...,\n         [ 2.2953806e+00,  2.7867687e+00,  2.7135515e+00],\n         [ 9.2290515e-01,  1.6911638e+00,  2.1939402e+00],\n         [ 1.6691993e-01,  2.2988167e+00,  2.4893246e+00]],\n\n        ...,\n\n        [[ 2.5216877e+00,  2.0961845e+00,  1.4073110e+00],\n         [ 1.7640195e+00,  1.9025273e+00,  1.3660685e+00],\n         [ 3.6607294e+00,  5.7982773e-01,  2.2017760e+00],\n         ...,\n         [ 2.2499387e+00,  1.8768355e+00,  1.2075427e+00],\n         [ 1.4329035e+00,  2.9319077e+00,  1.5369107e+00],\n         [ 2.6315122e+00,  1.4494376e+00,  3.2915959e+00]],\n\n        [[ 1.8924857e+00,  1.5380698e+00,  2.5525839e+00],\n         [ 2.1517980e+00,  1.6269704e+00,  3.3504340e-01],\n         [ 2.5831659e+00,  2.3302505e+00,  1.1849830e+00],\n         ...,\n         [ 7.9380256e-01,  1.1318829e+00,  2.0844457e+00],\n         [ 2.7441049e+00,  1.3410376e+00,  2.0654190e+00],\n         [ 1.1934639e+00,  3.5348344e+00,  2.2492704e+00]],\n\n        [[ 1.9685254e+00,  1.2655460e+00,  2.5298500e+00],\n         [ 2.1052475e+00,  1.8405578e+00,  1.6995660e+00],\n         [ 2.3137422e+00,  3.0151963e+00,  2.1270764e+00],\n         ...,\n         [ 1.7271814e+00,  2.0762792e+00,  1.4694332e+00],\n         [ 2.3913991e+00,  1.2202634e+00,  1.4340060e+00],\n         [ 1.2198067e+00,  2.8919654e+00,  2.2661793e+00]]]],\n      dtype=float32), array([[1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[-5.9466445e-01, -1.6538094e-01, -4.7089225e-01],\n         [-1.3410203e-01,  7.2176003e-01,  8.3764315e-01],\n         [-5.5096763e-01,  3.7214053e-01,  1.2206773e+00],\n         ...,\n         [-2.0571844e-01, -2.0898511e-01, -1.2572329e-01],\n         [ 2.9529658e-01, -1.4763068e+00,  7.6136833e-01],\n         [ 2.0237288e-01, -1.5132053e-01, -4.9874088e-01]],\n\n        [[-3.1310764e-01,  3.5347876e-01,  1.3863302e+00],\n         [-3.2595038e-01, -5.0692505e-01, -3.3272028e-01],\n         [ 4.9448922e-01, -6.5847969e-01, -7.8062129e-01],\n         ...,\n         [ 1.0826739e+00, -2.0284732e-01,  1.9371024e-01],\n         [-8.1396961e-01,  5.7164609e-01, -2.1961629e-01],\n         [ 4.5840865e-01, -3.6544704e-01,  6.2119961e-02]],\n\n        [[-5.8533847e-01,  2.7799550e-01,  4.2635429e-01],\n         [ 9.9140251e-01,  1.4209239e+00, -5.4550993e-01],\n         [ 7.6273871e-03, -3.7498391e-01,  4.1845855e-01],\n         ...,\n         [-6.6344577e-01, -1.5120848e+00,  7.1856439e-01],\n         [-2.1805835e-01,  7.8853309e-01,  1.3049840e+00],\n         [ 6.0055363e-01, -8.9204633e-01,  1.6528573e+00]],\n\n        ...,\n\n        [[-4.0379474e-01,  9.1624641e-01, -3.6012977e-01],\n         [ 1.0670961e+00,  4.8368344e-01,  1.6774415e+00],\n         [-1.4807303e+00, -7.9667258e-01, -5.3632146e-01],\n         ...,\n         [ 1.5850863e-01, -3.7400985e-01,  6.8121988e-01],\n         [-6.4896661e-01, -5.0649282e-02,  9.0680110e-01],\n         [-2.0246221e-01,  1.2530555e+00,  6.7635489e-01]],\n\n        [[-2.5756067e-01,  1.0592083e+00,  7.0754099e-01],\n         [-4.5181218e-01, -1.0739055e-01,  4.6177772e-01],\n         [-4.5702231e-01,  2.8380442e-01, -1.0752690e+00],\n         ...,\n         [-3.9171869e-01,  2.1447724e-01,  3.8541391e-01],\n         [-5.9045357e-01,  1.3327241e+00, -6.9085932e-01],\n         [ 5.0239193e-01,  5.9962299e-02,  3.1972468e-01]],\n\n        [[ 9.1256273e-01,  1.2997686e+00, -9.0244591e-01],\n         [-2.9417396e-01,  4.3739778e-01,  6.0037404e-01],\n         [-2.2183347e-01, -5.8308566e-01,  1.0910530e-02],\n         ...,\n         [-3.6917886e-01,  2.3338054e-01,  2.3796083e-01],\n         [ 1.1245507e+00, -3.4195244e-01, -1.4019490e+00],\n         [ 2.4688439e-01,  2.2108644e-01, -6.4333814e-01]]],\n\n\n       [[[ 1.7773269e+00,  1.2170917e+00,  1.5022007e+00],\n         [ 2.0483673e+00, -2.6739994e-01,  3.2159362e-02],\n         [ 7.1557719e-01, -5.8585036e-01,  1.4146655e+00],\n         ...,\n         [ 1.6290988e+00,  1.1165442e+00,  5.2773678e-01],\n         [ 9.8405474e-01,  5.3237611e-01,  1.7958312e+00],\n         [ 1.6081200e+00,  1.6271843e+00,  6.8361044e-01]],\n\n        [[ 9.1558427e-01, -1.0494336e+00,  7.7808565e-01],\n         [ 1.5029082e+00,  6.4708310e-01,  1.7610753e+00],\n         [-9.9044460e-01,  1.4098151e+00,  4.7541401e-01],\n         ...,\n         [ 9.6199411e-01,  1.5776454e+00,  1.2468404e+00],\n         [ 1.6419210e+00,  6.9804859e-01,  8.9782375e-01],\n         [ 6.0436112e-01, -9.7942606e-02,  4.3114275e-01]],\n\n        [[ 1.9277737e+00,  8.5343397e-01,  6.6077006e-01],\n         [ 1.2201989e+00,  6.7279404e-01,  6.0881203e-01],\n         [ 5.8282763e-01,  2.3528388e-01,  1.1971016e+00],\n         ...,\n         [ 7.6198614e-01,  5.6885976e-01,  3.6887217e-01],\n         [-7.2903998e-02,  2.2697895e+00,  8.7051344e-01],\n         [ 7.2220469e-01,  2.7494657e-01,  1.3932813e+00]],\n\n        ...,\n\n        [[ 1.2146904e+00,  1.1649488e+00,  8.5788238e-01],\n         [ 1.5182406e+00,  1.0637491e+00,  1.9000349e+00],\n         [ 1.1359313e+00,  6.9897926e-01,  9.4763672e-01],\n         ...,\n         [ 1.6695526e+00,  1.1372697e+00, -3.1292237e-02],\n         [ 1.7984856e+00,  1.4912060e+00,  9.5610428e-01],\n         [-3.0471221e-01, -5.1969075e-01, -7.1351573e-02]],\n\n        [[-3.1661904e-01,  1.0280261e+00,  1.0518737e+00],\n         [ 1.9791884e+00,  8.4706980e-01,  1.4707468e+00],\n         [ 9.7804600e-01,  1.0323633e+00,  6.2789953e-01],\n         ...,\n         [ 4.3290842e-01,  7.7776712e-01,  6.2620473e-01],\n         [ 4.9120054e-01,  6.6371369e-01,  5.3739345e-01],\n         [ 6.3469827e-01,  1.2896407e+00,  7.6476651e-01]],\n\n        [[ 9.1902322e-01,  1.8351957e-01,  8.1626183e-01],\n         [ 1.0348569e+00,  2.4184401e+00,  8.7173665e-01],\n         [ 8.6703330e-01,  3.4859499e-01,  9.6301013e-01],\n         ...,\n         [ 1.5833969e+00, -2.8966654e-03,  9.8377073e-01],\n         [ 7.5125051e-01,  7.4094772e-01,  8.5345083e-01],\n         [ 7.3837042e-01,  8.9255363e-01,  1.0278648e+00]]],\n\n\n       [[[ 1.9958580e+00,  1.3338239e+00,  1.4309561e+00],\n         [-5.7748264e-01,  2.6084185e-01,  3.1477740e-01],\n         [ 9.3105143e-01,  1.2671791e+00,  1.4925586e+00],\n         ...,\n         [ 9.9355316e-01,  1.1326015e+00,  5.7788545e-01],\n         [ 1.9964167e-01,  2.3625019e+00,  8.6333770e-01],\n         [ 2.4210849e+00, -4.3730575e-01,  1.5801712e+00]],\n\n        [[-1.2863539e-01,  5.9573400e-01,  1.2725097e-01],\n         [ 1.7586684e+00,  7.6459390e-01,  6.0283053e-01],\n         [ 7.1853924e-01,  1.3185402e+00,  1.1416709e+00],\n         ...,\n         [ 1.2583528e+00,  1.7560425e+00,  2.0628268e-01],\n         [ 7.8132898e-01,  1.5653234e+00,  1.6880417e+00],\n         [ 9.5409566e-01, -2.2981933e-01,  2.0058641e+00]],\n\n        [[ 8.4446520e-01,  1.1274135e+00,  1.1146094e+00],\n         [ 1.5430744e+00,  1.8728001e+00,  4.1264272e-01],\n         [ 2.4213576e+00,  4.3552223e-01,  1.3552970e+00],\n         ...,\n         [ 1.4677811e+00,  1.6956488e+00, -2.3188783e-01],\n         [ 1.3544018e+00,  2.3618022e-01,  4.1906795e-01],\n         [-5.8848739e-01,  4.0272540e-01,  9.1363245e-01]],\n\n        ...,\n\n        [[ 5.1509726e-01,  3.0538151e+00,  1.6106536e+00],\n         [ 7.0459563e-01,  7.9907203e-01,  1.2643504e+00],\n         [ 7.6414430e-01,  9.3446076e-01,  7.3644519e-01],\n         ...,\n         [ 1.2909280e+00,  1.2784065e+00,  2.3142650e+00],\n         [ 6.7183036e-01,  1.0640774e+00,  2.1002016e+00],\n         [ 1.5919631e+00,  2.0780249e+00,  2.2186065e+00]],\n\n        [[ 2.7800721e-01,  9.5380932e-01,  2.1348588e+00],\n         [ 2.0066659e-01, -1.8898684e-01,  5.7581615e-01],\n         [ 1.3218702e+00,  1.2996256e+00,  1.0539788e+00],\n         ...,\n         [ 1.1237597e+00,  1.5030750e+00,  1.5817088e+00],\n         [-3.2592669e-01,  2.2081249e+00,  6.9975722e-01],\n         [ 1.8984569e-02,  6.0252089e-02,  2.1362495e+00]],\n\n        [[ 9.5586330e-01,  1.3318011e+00,  2.1283090e+00],\n         [-1.2299398e-01,  8.3746052e-01,  1.5615985e+00],\n         [ 9.9661928e-01,  1.8246278e+00,  5.7222802e-02],\n         ...,\n         [ 2.5720078e-01,  2.4338990e-01,  9.8602355e-01],\n         [ 1.8500549e+00,  1.7175021e+00,  1.4129514e+00],\n         [ 1.0439371e+00,  6.8814433e-01,  1.0112284e+00]]],\n\n\n       ...,\n\n\n       [[[ 3.0062933e+00,  8.2212591e-01,  3.1199033e+00],\n         [ 2.2983701e+00,  7.4996942e-01,  2.1766393e+00],\n         [ 1.9286146e+00,  2.1058974e+00,  3.2946053e+00],\n         ...,\n         [ 2.5107810e+00,  2.4886625e+00,  2.4478858e+00],\n         [ 7.2681469e-01,  2.3943629e+00,  6.8102533e-01],\n         [ 1.3995179e+00,  1.9645919e+00,  1.8221544e+00]],\n\n        [[ 5.6342554e-01,  2.5593185e+00,  2.5148859e+00],\n         [ 2.5224574e+00,  1.1798040e+00,  1.2208484e+00],\n         [ 2.9613962e+00,  3.0356364e+00,  2.5448725e+00],\n         ...,\n         [ 2.1555023e+00,  2.1634190e+00,  1.4673769e+00],\n         [ 2.5871315e+00,  1.2881438e+00,  1.6228987e+00],\n         [ 2.5433486e+00,  1.7734255e+00,  1.7633979e+00]],\n\n        [[ 1.1421793e+00,  2.2443964e+00,  1.2472743e+00],\n         [ 1.6736856e+00,  2.2398136e+00,  2.9154234e+00],\n         [ 1.1775784e+00,  2.2659497e+00,  1.9455712e+00],\n         ...,\n         [ 2.5331936e+00,  1.9957070e+00,  1.5886581e+00],\n         [ 2.7437274e+00,  2.8953059e+00,  1.9965407e+00],\n         [ 2.6900795e+00,  1.3157053e+00,  9.8752701e-01]],\n\n        ...,\n\n        [[ 3.6288645e+00,  1.4287060e+00,  2.1417320e+00],\n         [ 2.2265961e+00,  1.5499936e+00,  1.8612562e+00],\n         [ 2.2643962e+00,  2.3217709e+00,  1.7814491e+00],\n         ...,\n         [ 1.8000181e+00,  2.2536414e+00,  2.1698318e+00],\n         [ 1.6453114e+00,  1.4049989e+00,  2.4749529e+00],\n         [ 2.6914055e+00,  2.0964558e+00,  3.0423930e+00]],\n\n        [[ 1.5557925e+00,  2.0177438e+00,  2.9005818e+00],\n         [ 1.6324799e+00,  1.4242669e+00,  2.1683438e+00],\n         [ 6.8608266e-01,  3.3247499e+00,  2.0344477e+00],\n         ...,\n         [ 1.1957449e+00,  2.1748106e+00,  2.4947641e+00],\n         [ 1.2510796e+00,  3.1652098e+00,  1.8809268e+00],\n         [ 3.1111507e+00,  2.1690760e+00,  2.8908441e+00]],\n\n        [[ 2.9330404e+00,  2.7751999e+00,  2.4144168e+00],\n         [ 2.4071538e+00,  4.8508975e-01,  1.8698195e+00],\n         [ 3.0175240e+00,  2.6718924e+00,  2.1032267e+00],\n         ...,\n         [ 2.3804932e+00,  2.3607304e+00,  9.8957169e-01],\n         [ 4.4641694e-01,  2.7380977e+00,  2.7173882e+00],\n         [ 2.3697963e+00,  2.1377270e+00,  1.7493585e+00]]],\n\n\n       [[[ 1.6593196e+00,  2.8155081e+00,  5.9945041e-01],\n         [ 3.3147902e+00,  2.2321384e+00,  2.5801644e+00],\n         [ 1.8449023e+00,  1.4908499e+00,  2.9255052e+00],\n         ...,\n         [ 2.1290929e+00,  1.0648953e+00,  1.7904347e+00],\n         [ 2.5426656e-01,  2.4841301e+00,  2.1524954e+00],\n         [ 1.8930618e+00,  1.7592880e+00,  1.7321157e+00]],\n\n        [[ 1.3431162e+00,  2.5347703e+00,  1.4114226e+00],\n         [ 2.7376213e+00,  2.0455444e+00,  3.2309971e+00],\n         [ 1.3325551e+00,  4.8444504e-01,  5.3500402e-01],\n         ...,\n         [ 7.2498405e-01,  2.0845358e+00,  2.7081769e+00],\n         [ 8.2658988e-01,  1.3558215e+00,  2.4190574e+00],\n         [ 1.8245475e+00,  1.3262705e+00,  1.5658717e+00]],\n\n        [[ 1.7730089e+00,  1.1169651e+00,  8.9471102e-01],\n         [ 1.6805443e+00,  2.6647141e+00,  2.2541108e+00],\n         [ 3.9232216e+00,  1.3993478e+00,  1.8902596e+00],\n         ...,\n         [ 4.3856883e-01,  3.2676902e+00,  2.3133543e+00],\n         [ 2.0369873e+00,  2.6090305e+00,  2.1672394e+00],\n         [ 1.4991189e+00,  1.7202688e+00,  1.8470118e+00]],\n\n        ...,\n\n        [[ 2.1894491e+00,  1.2826769e+00,  1.9934620e+00],\n         [ 1.8302826e+00,  2.3569818e+00,  2.4932501e+00],\n         [ 1.1182650e+00,  2.0391300e+00,  2.8179088e+00],\n         ...,\n         [ 1.5400803e+00,  2.4331899e+00,  2.3730845e+00],\n         [ 2.0955787e+00,  2.2119420e+00,  2.9520433e+00],\n         [ 2.7548368e+00,  3.3134954e+00,  2.4594157e+00]],\n\n        [[ 1.2180267e-02,  1.8740126e+00,  1.9839679e+00],\n         [ 2.5026290e+00,  3.2742441e+00,  1.7934353e+00],\n         [ 1.6943064e+00,  1.6779420e+00,  2.2723680e+00],\n         ...,\n         [ 8.8717937e-01,  1.5442818e+00,  2.3012090e+00],\n         [ 2.3823121e+00,  2.0736525e+00,  9.6555066e-01],\n         [ 2.1879551e+00,  2.0488324e+00,  1.3585862e+00]],\n\n        [[ 2.2533596e+00,  2.4195051e+00,  1.3304161e+00],\n         [ 6.3168406e-01,  1.0342619e+00,  1.7646941e+00],\n         [ 2.5481424e+00,  1.6597273e+00,  2.2400193e+00],\n         ...,\n         [ 1.3670845e+00,  1.4754093e+00,  1.8107063e+00],\n         [ 1.8017018e+00,  1.7520821e+00,  1.2987478e+00],\n         [ 2.2413042e+00,  1.9889156e+00,  2.9090230e+00]]],\n\n\n       [[[ 1.4035751e+00,  1.6161485e+00,  1.3617316e+00],\n         [ 1.5798285e+00,  2.4312720e+00,  3.2559340e+00],\n         [ 1.9647731e+00,  2.1275702e+00,  1.1855739e+00],\n         ...,\n         [ 7.8567177e-01,  2.0584271e+00,  1.9271830e+00],\n         [ 2.5509305e+00,  1.5022466e+00,  2.2673626e+00],\n         [ 1.2179765e+00,  2.2581191e+00,  8.5012442e-01]],\n\n        [[ 1.6094973e+00,  2.1442904e+00,  1.0899725e+00],\n         [ 3.0677543e+00,  2.8107846e+00,  2.4959996e+00],\n         [ 3.7307250e+00,  2.8962085e+00,  1.3679104e+00],\n         ...,\n         [ 1.6266097e+00,  2.4543540e+00,  1.9322208e+00],\n         [ 1.0794680e+00,  2.3561335e+00,  1.4193656e+00],\n         [ 2.2786400e+00,  2.8000777e+00,  1.7197015e+00]],\n\n        [[ 2.6269612e+00,  1.2258918e+00,  3.1989107e+00],\n         [ 2.1714728e+00,  2.5634389e+00,  1.2633401e+00],\n         [ 3.2519965e+00,  1.6040955e+00,  1.0981863e+00],\n         ...,\n         [ 2.2953806e+00,  2.7867687e+00,  2.7135515e+00],\n         [ 9.2290515e-01,  1.6911638e+00,  2.1939402e+00],\n         [ 1.6691993e-01,  2.2988167e+00,  2.4893246e+00]],\n\n        ...,\n\n        [[ 2.5216877e+00,  2.0961845e+00,  1.4073110e+00],\n         [ 1.7640195e+00,  1.9025273e+00,  1.3660685e+00],\n         [ 3.6607294e+00,  5.7982773e-01,  2.2017760e+00],\n         ...,\n         [ 2.2499387e+00,  1.8768355e+00,  1.2075427e+00],\n         [ 1.4329035e+00,  2.9319077e+00,  1.5369107e+00],\n         [ 2.6315122e+00,  1.4494376e+00,  3.2915959e+00]],\n\n        [[ 1.8924857e+00,  1.5380698e+00,  2.5525839e+00],\n         [ 2.1517980e+00,  1.6269704e+00,  3.3504340e-01],\n         [ 2.5831659e+00,  2.3302505e+00,  1.1849830e+00],\n         ...,\n         [ 7.9380256e-01,  1.1318829e+00,  2.0844457e+00],\n         [ 2.7441049e+00,  1.3410376e+00,  2.0654190e+00],\n         [ 1.1934639e+00,  3.5348344e+00,  2.2492704e+00]],\n\n        [[ 1.9685254e+00,  1.2655460e+00,  2.5298500e+00],\n         [ 2.1052475e+00,  1.8405578e+00,  1.6995660e+00],\n         [ 2.3137422e+00,  3.0151963e+00,  2.1270764e+00],\n         ...,\n         [ 1.7271814e+00,  2.0762792e+00,  1.4694332e+00],\n         [ 2.3913991e+00,  1.2202634e+00,  1.4340060e+00],\n         [ 1.2198067e+00,  2.8919654e+00,  2.2661793e+00]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "y": {
                                    "variable_value": "array([[1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.5753859, 0.625]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b2a460>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b2a550>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.5078074693679809, 0.69]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b21460>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.28503928, 1.0], [0.37498963, 1.0], [0.41953325, 1.0], [0.41799247, 1.0], [0.4000176, 1.0], [0.34469473, 1.0], [0.4391934, 1.0], [0.46158555, 1.0], [0.31417143, 1.0], [0.3876614, 1.0], [0.338417, 1.0], [0.38001472, 1.0], [0.27266634, 1.0]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 4.22110260e-01, -1.35397419e-01,  6.18485093e-01],\n         [ 1.53742358e-01, -1.83492780e-01,  1.39562324e-01],\n         [ 7.06021309e-01, -5.51573038e-01, -2.38537639e-01],\n         ...,\n         [ 1.19998491e+00, -9.81745869e-02,  1.31660208e-01],\n         [ 4.06242996e-01, -1.34594917e-01, -5.68531871e-01],\n         [-5.90379894e-01, -8.09052050e-01,  6.53234899e-01]],\n\n        [[ 1.36171475e-01, -7.37624466e-01, -1.03958654e+00],\n         [ 1.39892411e+00, -5.57914078e-01,  7.67120242e-01],\n         [ 5.34032226e-01, -5.43407261e-01, -3.31714809e-01],\n         ...,\n         [-6.00209832e-01,  7.87872374e-01,  6.60523593e-01],\n         [ 7.95443654e-01,  1.02051759e+00, -2.55885601e-01],\n         [-8.99916664e-02,  3.77376258e-01, -7.11182117e-01]],\n\n        [[ 8.70628119e-01, -4.19743583e-02, -8.77619863e-01],\n         [-7.59846628e-01,  8.17185402e-01, -9.67524469e-01],\n         [ 9.19504225e-01,  1.09339051e-01, -2.52912819e-01],\n         ...,\n         [-1.08469695e-01, -9.60630417e-01,  1.49436146e-01],\n         [-1.13497622e-01, -4.18866463e-02,  7.25466385e-02],\n         [-3.59948337e-01,  2.47983843e-01, -2.89033026e-01]],\n\n        ...,\n\n        [[-2.17913330e-01, -6.34643793e-01, -1.03793241e-01],\n         [ 9.57078397e-01, -4.67912525e-01, -8.16050351e-01],\n         [-4.55174446e-01,  6.99221134e-01, -3.87060136e-01],\n         ...,\n         [-1.28484499e+00, -5.27086377e-01, -2.08185375e-01],\n         [ 7.42970526e-01, -1.10644972e+00,  6.88072264e-01],\n         [-1.77593485e-01,  7.39558876e-01, -1.69986367e-01]],\n\n        [[ 5.11478126e-01, -1.65995613e-01,  6.49167523e-02],\n         [-8.73918593e-01, -9.92828369e-01,  3.72834444e-01],\n         [ 3.47572833e-01, -2.12327152e-01,  5.50644815e-01],\n         ...,\n         [ 7.88978875e-01, -6.28214657e-01,  1.15234828e+00],\n         [ 1.83136255e-01,  6.57927036e-01,  6.87304378e-01],\n         [ 2.25387549e+00, -5.54337382e-01, -2.83591032e-01]],\n\n        [[ 7.72436559e-01, -1.01076710e+00,  6.17375970e-01],\n         [-3.59225483e-03, -4.36158001e-01,  8.26016843e-01],\n         [ 4.34527516e-01, -1.49447739e-01, -6.26865923e-01],\n         ...,\n         [-1.88164324e-01,  4.97202277e-01,  2.75098860e-01],\n         [ 1.09357190e+00,  5.68924025e-02,  9.97636020e-01],\n         [ 7.64527917e-01, -1.83725044e-01,  9.13575113e-01]]],\n\n\n       [[[ 9.72191334e-01,  1.28582856e-02, -5.15964270e-01],\n         [ 6.02240860e-01, -1.18214667e-01, -5.64596415e-01],\n         [ 3.88195485e-01,  3.73615563e-01,  1.64818954e+00],\n         ...,\n         [ 7.74113774e-01,  1.22174025e-01,  2.50659704e-01],\n         [ 3.38982075e-01, -6.30129352e-02,  1.12396404e-01],\n         [-6.40155673e-01,  1.40217617e-01, -1.20788254e-01]],\n\n        [[-1.91974297e-01, -6.96596563e-01, -1.06292164e+00],\n         [-1.72948644e-01, -9.18497965e-02, -1.25030160e-01],\n         [-4.55962211e-01,  1.59633100e-01, -1.12059593e+00],\n         ...,\n         [ 3.83268625e-01, -1.75433040e-01,  1.17923701e+00],\n         [-1.77938148e-01,  4.10031438e-01, -5.25824904e-01],\n         [-4.59345579e-02, -8.36121678e-01,  1.94946956e-02]],\n\n        [[ 3.46664518e-01,  8.55708495e-02, -5.34726083e-01],\n         [ 6.92397058e-01, -1.47620752e-01, -2.25098297e-01],\n         [ 9.81570899e-01, -8.22698176e-02,  4.80783641e-01],\n         ...,\n         [-1.02565110e+00,  1.07952023e+00,  1.35348678e-01],\n         [ 1.36382508e+00,  8.35714102e-01, -7.96287835e-01],\n         [ 3.77355427e-01,  3.11939674e-03,  4.62784469e-01]],\n\n        ...,\n\n        [[ 2.97842950e-01, -6.50229454e-01, -2.66441345e-01],\n         [-6.73995495e-01,  1.22675753e+00,  7.38568380e-02],\n         [-6.37083530e-01, -8.93154204e-01, -8.77899766e-01],\n         ...,\n         [-1.15431464e+00,  2.75209416e-02, -2.90397465e-01],\n         [-1.22350447e-01,  1.62816465e+00,  2.05697894e-01],\n         [-3.90013963e-01, -1.05895340e+00,  1.08129513e+00]],\n\n        [[ 7.30651557e-01,  1.59177527e-01, -1.51228118e+00],\n         [-4.53103751e-01, -2.92005837e-01,  3.85473907e-01],\n         [-6.46327853e-01, -7.14950413e-02,  2.56482482e-01],\n         ...,\n         [-3.43449339e-02,  6.60676122e-01, -5.45579493e-01],\n         [ 1.02000546e+00,  6.73581004e-01,  9.95357394e-01],\n         [ 8.86186302e-01, -1.10081457e-01, -8.69692802e-01]],\n\n        [[ 3.78040254e-01, -1.19008295e-01,  2.99281865e-01],\n         [-9.96173099e-02,  7.64530301e-01,  4.24723715e-01],\n         [-2.09737539e-01, -2.99828798e-01, -5.34575403e-01],\n         ...,\n         [ 1.28886327e-01, -7.13258469e-03, -3.02068084e-01],\n         [ 7.20685661e-01,  1.42778909e+00, -2.38552108e-01],\n         [ 1.63242912e+00, -3.00987035e-01,  8.80542576e-01]]],\n\n\n       [[[-1.59730613e+00,  5.28656065e-01,  1.32960069e+00],\n         [-1.74084723e+00, -2.83796668e-01,  7.06454217e-01],\n         [-1.39513195e+00, -5.77582777e-01,  6.05920196e-01],\n         ...,\n         [ 4.76173937e-01, -7.15108216e-01,  5.85405290e-01],\n         [ 1.43019283e+00,  6.11354947e-01, -5.61641395e-01],\n         [ 1.87622562e-01, -3.83791536e-01,  5.25149584e-01]],\n\n        [[ 2.74421006e-01,  4.33779836e-01,  4.39358912e-02],\n         [-2.02948943e-01,  5.42177200e-01, -1.29422946e-02],\n         [-3.70244592e-01, -7.95997620e-01, -4.47221130e-01],\n         ...,\n         [ 5.18711805e-01,  1.48190345e-04,  1.14813551e-01],\n         [-1.62094235e-01,  2.29406551e-01, -1.35209844e-01],\n         [-5.19284785e-01,  1.60067081e+00, -1.87232658e-01]],\n\n        [[ 4.26322252e-01,  4.88297604e-02,  1.62193283e-01],\n         [-2.35540509e-01, -8.42998683e-01, -6.65426105e-02],\n         [ 6.02477849e-01, -6.04669452e-01, -2.13799775e-01],\n         ...,\n         [-8.67678404e-01, -4.51788038e-01,  4.58255082e-01],\n         [-1.80347741e-01,  3.37599277e-01,  2.35397622e-01],\n         [-1.40271616e+00, -4.65399250e-02,  7.32360363e-01]],\n\n        ...,\n\n        [[ 9.22185302e-01, -7.16839135e-01, -1.86505127e+00],\n         [-2.18010038e-01, -2.41128370e-01, -1.70161098e-01],\n         [ 6.49997965e-02, -1.09900020e-01,  5.34067929e-01],\n         ...,\n         [ 9.76707816e-01, -4.57547069e-01,  7.89684951e-01],\n         [ 8.38604391e-01,  3.62013191e-01,  5.43800928e-02],\n         [ 6.64853454e-01, -4.04717684e-01,  6.60430789e-02]],\n\n        [[ 3.19798052e-01, -7.16668129e-01, -2.05717981e-01],\n         [ 3.88257131e-02,  1.76049158e-01,  1.24581739e-01],\n         [-1.41120672e-01,  3.87605935e-01,  5.67245007e-01],\n         ...,\n         [ 1.55237937e+00, -7.54201114e-01, -8.44384879e-02],\n         [-5.79768792e-02,  7.24854052e-01, -9.84922230e-01],\n         [ 4.50086981e-01,  2.78758526e-01,  1.91808864e-01]],\n\n        [[-3.39450240e-01,  7.05742359e-01,  3.70227098e-01],\n         [ 1.59158707e-01,  2.95707136e-01, -2.05979571e-01],\n         [-1.54281199e+00,  1.22939396e+00,  4.52832222e-01],\n         ...,\n         [-9.03259143e-02,  5.97818017e-01, -7.71838725e-01],\n         [-8.63066077e-01, -8.82639945e-01,  3.62605035e-01],\n         [ 1.35186389e-01, -1.13235235e+00,  1.13786250e-01]]],\n\n\n       ...,\n\n\n       [[[-1.14480603e+00, -3.57381105e-01, -6.92112923e-01],\n         [ 7.25142419e-01,  9.65754166e-02,  5.26965916e-01],\n         [-1.67722359e-01, -4.61182684e-01, -2.14071497e-01],\n         ...,\n         [ 1.52142429e+00, -7.91448653e-01,  4.22293305e-01],\n         [-2.01358899e-01,  9.46291685e-02, -6.49277747e-01],\n         [-1.12750697e+00, -3.61042619e-01, -9.08515453e-01]],\n\n        [[-1.45116711e+00, -3.07911038e-01, -1.20910656e+00],\n         [ 4.12204057e-01, -3.72575879e-01,  4.26818967e-01],\n         [-6.03006363e-01, -1.33473384e+00,  2.55780607e-01],\n         ...,\n         [-3.27010423e-01,  6.59659266e-01,  5.98020852e-01],\n         [ 6.08175993e-01, -7.02926338e-01, -3.25046659e-01],\n         [-2.54282385e-01,  5.48386693e-01, -5.25374413e-01]],\n\n        [[ 2.87553132e-01, -3.49704504e-01, -8.26958001e-01],\n         [ 5.52390277e-01,  5.77421486e-01,  1.90852340e-02],\n         [ 9.43585157e-01, -1.12011665e-02,  3.77056122e-01],\n         ...,\n         [ 2.94964433e-01,  9.00874361e-02, -8.25283706e-01],\n         [-5.81060886e-01,  1.11745581e-01,  5.28309882e-01],\n         [-5.80353022e-01,  8.95707428e-01,  4.80162263e-01]],\n\n        ...,\n\n        [[-9.18283284e-01, -1.00061655e+00,  2.00199246e-01],\n         [-4.98641670e-01, -2.63254911e-01, -7.41710067e-01],\n         [-6.05106115e-01, -5.64821899e-01,  1.32757306e-01],\n         ...,\n         [-1.36751980e-01,  1.15680933e+00, -2.89076179e-01],\n         [-1.25223130e-01, -1.86964825e-01,  9.67146754e-01],\n         [-2.12205902e-01,  4.35392439e-01, -2.30418772e-01]],\n\n        [[-1.24444537e-01,  6.14195578e-02,  3.39996070e-01],\n         [ 2.41300717e-01,  3.56016845e-01,  1.20242126e-03],\n         [ 3.90359551e-01,  8.92309368e-01,  7.51367211e-01],\n         ...,\n         [-5.46934903e-01, -1.09559067e-01, -6.79587483e-01],\n         [ 4.79468256e-01,  2.67030150e-01,  1.34138629e-01],\n         [-1.30861059e-01,  1.42464563e-01, -8.66344422e-02]],\n\n        [[-4.20571007e-02, -5.20291984e-01, -2.17393026e-01],\n         [ 8.10390189e-02,  3.68728489e-01, -2.44255781e-01],\n         [-8.38377237e-01, -1.27278519e+00,  2.79487133e-01],\n         ...,\n         [ 1.09618044e+00, -4.50076789e-01,  4.74928916e-01],\n         [-4.19968367e-01, -2.46861771e-01,  6.26590550e-01],\n         [ 2.43788138e-01, -4.73245949e-01, -1.17245205e-01]]],\n\n\n       [[[ 2.15578866e+00,  3.08099580e+00,  2.55865455e+00],\n         [ 8.74383748e-01,  2.05823612e+00,  2.57661772e+00],\n         [ 2.97693205e+00,  2.04291272e+00,  2.99536943e+00],\n         ...,\n         [ 2.58826375e+00,  3.35895228e+00,  2.97018051e+00],\n         [ 4.46333456e+00,  2.88383865e+00,  3.25287437e+00],\n         [ 2.90028071e+00,  2.93628669e+00,  3.05204129e+00]],\n\n        [[ 2.85772848e+00,  2.78307557e+00,  2.76283169e+00],\n         [ 2.83643603e+00,  4.93539762e+00,  1.77375126e+00],\n         [ 5.08286047e+00,  3.44464540e+00,  2.37321258e+00],\n         ...,\n         [ 2.85869980e+00,  3.54254055e+00,  2.88392949e+00],\n         [ 3.29043865e+00,  3.72467208e+00,  3.03430128e+00],\n         [ 2.50931478e+00,  4.21212530e+00,  3.02869987e+00]],\n\n        [[ 2.60079718e+00,  2.92944145e+00,  3.16527796e+00],\n         [ 3.76208329e+00,  3.59882927e+00,  2.94548345e+00],\n         [ 2.80649066e+00,  2.53864408e+00,  2.94337273e+00],\n         ...,\n         [ 2.21452904e+00,  2.95831966e+00,  2.51744819e+00],\n         [ 3.05933714e+00,  4.35623169e+00,  4.22927189e+00],\n         [ 2.55187345e+00,  2.00857258e+00,  4.26637125e+00]],\n\n        ...,\n\n        [[ 3.07711864e+00,  4.53593349e+00,  2.91631532e+00],\n         [ 2.67138338e+00,  2.18106318e+00,  3.19537592e+00],\n         [ 3.57892966e+00,  3.56422210e+00,  2.64765668e+00],\n         ...,\n         [ 2.87327623e+00,  4.10697222e+00,  3.15630054e+00],\n         [ 2.23351192e+00,  3.85060549e+00,  3.50941634e+00],\n         [ 2.29376984e+00,  2.45717144e+00,  2.08343172e+00]],\n\n        [[ 2.93562675e+00,  3.30629992e+00,  1.58045220e+00],\n         [ 2.35200572e+00,  4.24082279e+00,  3.62065172e+00],\n         [ 1.29324961e+00,  3.98833990e+00,  4.10879850e+00],\n         ...,\n         [ 3.19434834e+00,  3.06898999e+00,  3.34304237e+00],\n         [ 3.33059454e+00,  2.33817220e+00,  2.28181982e+00],\n         [ 4.34713411e+00,  2.23903966e+00,  3.75601149e+00]],\n\n        [[ 3.26053667e+00,  3.46582556e+00,  3.71084166e+00],\n         [ 3.38076496e+00,  2.57321739e+00,  3.04899287e+00],\n         [ 2.62693357e+00,  2.96209097e+00,  3.23524809e+00],\n         ...,\n         [ 3.85319567e+00,  2.37327766e+00,  2.84366965e+00],\n         [ 2.99800897e+00,  2.84120059e+00,  2.76998782e+00],\n         [ 3.62453818e+00,  2.27150464e+00,  3.79573035e+00]]],\n\n\n       [[[ 2.63853502e+00,  3.25928736e+00,  4.28758192e+00],\n         [ 2.29286647e+00,  3.72748280e+00,  3.68899417e+00],\n         [ 2.72908664e+00,  3.64110994e+00,  2.66155982e+00],\n         ...,\n         [ 2.76792836e+00,  2.54574513e+00,  2.44228745e+00],\n         [ 3.30892277e+00,  3.94890976e+00,  2.92305732e+00],\n         [ 3.77217245e+00,  3.21693468e+00,  2.31031919e+00]],\n\n        [[ 2.91231489e+00,  3.08661175e+00,  3.40530276e+00],\n         [ 2.59972906e+00,  3.33769989e+00,  2.88453674e+00],\n         [ 3.11897874e+00,  3.32647729e+00,  3.12164450e+00],\n         ...,\n         [ 3.78570533e+00,  4.33579826e+00,  3.08120108e+00],\n         [ 3.21625781e+00,  2.95012331e+00,  2.49304676e+00],\n         [ 3.19944358e+00,  1.84003007e+00,  2.18774152e+00]],\n\n        [[ 2.68758321e+00,  2.54258204e+00,  3.67428923e+00],\n         [ 3.46096969e+00,  3.30966330e+00,  3.81793404e+00],\n         [ 3.95620084e+00,  2.76114178e+00,  2.98858500e+00],\n         ...,\n         [ 3.04010010e+00,  4.14689350e+00,  2.66325212e+00],\n         [ 2.75893092e+00,  3.02988505e+00,  2.99630213e+00],\n         [ 4.14416075e+00,  3.35238647e+00,  2.55152440e+00]],\n\n        ...,\n\n        [[ 2.72850895e+00,  2.55072784e+00,  2.42350459e+00],\n         [ 2.48955464e+00,  2.59814477e+00,  2.50608444e+00],\n         [ 2.62223482e+00,  3.09236908e+00,  2.50211954e+00],\n         ...,\n         [ 4.10936165e+00,  2.72093177e+00,  4.30092716e+00],\n         [ 2.78471088e+00,  3.15753603e+00,  3.36016512e+00],\n         [ 2.16036701e+00,  3.28599548e+00,  3.45953131e+00]],\n\n        [[ 3.29730439e+00,  2.72955728e+00,  2.60483503e+00],\n         [ 2.44225979e+00,  3.27572083e+00,  2.50729799e+00],\n         [ 3.00370479e+00,  3.11162734e+00,  2.32961559e+00],\n         ...,\n         [ 4.47026682e+00,  4.30285168e+00,  1.83744121e+00],\n         [ 3.66554093e+00,  3.75061083e+00,  4.00131083e+00],\n         [ 3.34716153e+00,  1.89955509e+00,  2.80798316e+00]],\n\n        [[ 2.38341451e+00,  2.92144442e+00,  3.13215733e+00],\n         [ 1.66528213e+00,  3.37640786e+00,  1.82169402e+00],\n         [ 2.70129848e+00,  3.49725556e+00,  2.43730736e+00],\n         ...,\n         [ 4.22319460e+00,  3.26225591e+00,  3.01633310e+00],\n         [ 2.29725838e+00,  2.87530065e+00,  2.89709926e+00],\n         [ 3.62648153e+00,  4.10150862e+00,  2.90567899e+00]]]],\n      dtype=float32), array([[1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 4.22110260e-01, -1.35397419e-01,  6.18485093e-01],\n         [ 1.53742358e-01, -1.83492780e-01,  1.39562324e-01],\n         [ 7.06021309e-01, -5.51573038e-01, -2.38537639e-01],\n         ...,\n         [ 1.19998491e+00, -9.81745869e-02,  1.31660208e-01],\n         [ 4.06242996e-01, -1.34594917e-01, -5.68531871e-01],\n         [-5.90379894e-01, -8.09052050e-01,  6.53234899e-01]],\n\n        [[ 1.36171475e-01, -7.37624466e-01, -1.03958654e+00],\n         [ 1.39892411e+00, -5.57914078e-01,  7.67120242e-01],\n         [ 5.34032226e-01, -5.43407261e-01, -3.31714809e-01],\n         ...,\n         [-6.00209832e-01,  7.87872374e-01,  6.60523593e-01],\n         [ 7.95443654e-01,  1.02051759e+00, -2.55885601e-01],\n         [-8.99916664e-02,  3.77376258e-01, -7.11182117e-01]],\n\n        [[ 8.70628119e-01, -4.19743583e-02, -8.77619863e-01],\n         [-7.59846628e-01,  8.17185402e-01, -9.67524469e-01],\n         [ 9.19504225e-01,  1.09339051e-01, -2.52912819e-01],\n         ...,\n         [-1.08469695e-01, -9.60630417e-01,  1.49436146e-01],\n         [-1.13497622e-01, -4.18866463e-02,  7.25466385e-02],\n         [-3.59948337e-01,  2.47983843e-01, -2.89033026e-01]],\n\n        ...,\n\n        [[-2.17913330e-01, -6.34643793e-01, -1.03793241e-01],\n         [ 9.57078397e-01, -4.67912525e-01, -8.16050351e-01],\n         [-4.55174446e-01,  6.99221134e-01, -3.87060136e-01],\n         ...,\n         [-1.28484499e+00, -5.27086377e-01, -2.08185375e-01],\n         [ 7.42970526e-01, -1.10644972e+00,  6.88072264e-01],\n         [-1.77593485e-01,  7.39558876e-01, -1.69986367e-01]],\n\n        [[ 5.11478126e-01, -1.65995613e-01,  6.49167523e-02],\n         [-8.73918593e-01, -9.92828369e-01,  3.72834444e-01],\n         [ 3.47572833e-01, -2.12327152e-01,  5.50644815e-01],\n         ...,\n         [ 7.88978875e-01, -6.28214657e-01,  1.15234828e+00],\n         [ 1.83136255e-01,  6.57927036e-01,  6.87304378e-01],\n         [ 2.25387549e+00, -5.54337382e-01, -2.83591032e-01]],\n\n        [[ 7.72436559e-01, -1.01076710e+00,  6.17375970e-01],\n         [-3.59225483e-03, -4.36158001e-01,  8.26016843e-01],\n         [ 4.34527516e-01, -1.49447739e-01, -6.26865923e-01],\n         ...,\n         [-1.88164324e-01,  4.97202277e-01,  2.75098860e-01],\n         [ 1.09357190e+00,  5.68924025e-02,  9.97636020e-01],\n         [ 7.64527917e-01, -1.83725044e-01,  9.13575113e-01]]],\n\n\n       [[[ 9.72191334e-01,  1.28582856e-02, -5.15964270e-01],\n         [ 6.02240860e-01, -1.18214667e-01, -5.64596415e-01],\n         [ 3.88195485e-01,  3.73615563e-01,  1.64818954e+00],\n         ...,\n         [ 7.74113774e-01,  1.22174025e-01,  2.50659704e-01],\n         [ 3.38982075e-01, -6.30129352e-02,  1.12396404e-01],\n         [-6.40155673e-01,  1.40217617e-01, -1.20788254e-01]],\n\n        [[-1.91974297e-01, -6.96596563e-01, -1.06292164e+00],\n         [-1.72948644e-01, -9.18497965e-02, -1.25030160e-01],\n         [-4.55962211e-01,  1.59633100e-01, -1.12059593e+00],\n         ...,\n         [ 3.83268625e-01, -1.75433040e-01,  1.17923701e+00],\n         [-1.77938148e-01,  4.10031438e-01, -5.25824904e-01],\n         [-4.59345579e-02, -8.36121678e-01,  1.94946956e-02]],\n\n        [[ 3.46664518e-01,  8.55708495e-02, -5.34726083e-01],\n         [ 6.92397058e-01, -1.47620752e-01, -2.25098297e-01],\n         [ 9.81570899e-01, -8.22698176e-02,  4.80783641e-01],\n         ...,\n         [-1.02565110e+00,  1.07952023e+00,  1.35348678e-01],\n         [ 1.36382508e+00,  8.35714102e-01, -7.96287835e-01],\n         [ 3.77355427e-01,  3.11939674e-03,  4.62784469e-01]],\n\n        ...,\n\n        [[ 2.97842950e-01, -6.50229454e-01, -2.66441345e-01],\n         [-6.73995495e-01,  1.22675753e+00,  7.38568380e-02],\n         [-6.37083530e-01, -8.93154204e-01, -8.77899766e-01],\n         ...,\n         [-1.15431464e+00,  2.75209416e-02, -2.90397465e-01],\n         [-1.22350447e-01,  1.62816465e+00,  2.05697894e-01],\n         [-3.90013963e-01, -1.05895340e+00,  1.08129513e+00]],\n\n        [[ 7.30651557e-01,  1.59177527e-01, -1.51228118e+00],\n         [-4.53103751e-01, -2.92005837e-01,  3.85473907e-01],\n         [-6.46327853e-01, -7.14950413e-02,  2.56482482e-01],\n         ...,\n         [-3.43449339e-02,  6.60676122e-01, -5.45579493e-01],\n         [ 1.02000546e+00,  6.73581004e-01,  9.95357394e-01],\n         [ 8.86186302e-01, -1.10081457e-01, -8.69692802e-01]],\n\n        [[ 3.78040254e-01, -1.19008295e-01,  2.99281865e-01],\n         [-9.96173099e-02,  7.64530301e-01,  4.24723715e-01],\n         [-2.09737539e-01, -2.99828798e-01, -5.34575403e-01],\n         ...,\n         [ 1.28886327e-01, -7.13258469e-03, -3.02068084e-01],\n         [ 7.20685661e-01,  1.42778909e+00, -2.38552108e-01],\n         [ 1.63242912e+00, -3.00987035e-01,  8.80542576e-01]]],\n\n\n       [[[-1.59730613e+00,  5.28656065e-01,  1.32960069e+00],\n         [-1.74084723e+00, -2.83796668e-01,  7.06454217e-01],\n         [-1.39513195e+00, -5.77582777e-01,  6.05920196e-01],\n         ...,\n         [ 4.76173937e-01, -7.15108216e-01,  5.85405290e-01],\n         [ 1.43019283e+00,  6.11354947e-01, -5.61641395e-01],\n         [ 1.87622562e-01, -3.83791536e-01,  5.25149584e-01]],\n\n        [[ 2.74421006e-01,  4.33779836e-01,  4.39358912e-02],\n         [-2.02948943e-01,  5.42177200e-01, -1.29422946e-02],\n         [-3.70244592e-01, -7.95997620e-01, -4.47221130e-01],\n         ...,\n         [ 5.18711805e-01,  1.48190345e-04,  1.14813551e-01],\n         [-1.62094235e-01,  2.29406551e-01, -1.35209844e-01],\n         [-5.19284785e-01,  1.60067081e+00, -1.87232658e-01]],\n\n        [[ 4.26322252e-01,  4.88297604e-02,  1.62193283e-01],\n         [-2.35540509e-01, -8.42998683e-01, -6.65426105e-02],\n         [ 6.02477849e-01, -6.04669452e-01, -2.13799775e-01],\n         ...,\n         [-8.67678404e-01, -4.51788038e-01,  4.58255082e-01],\n         [-1.80347741e-01,  3.37599277e-01,  2.35397622e-01],\n         [-1.40271616e+00, -4.65399250e-02,  7.32360363e-01]],\n\n        ...,\n\n        [[ 9.22185302e-01, -7.16839135e-01, -1.86505127e+00],\n         [-2.18010038e-01, -2.41128370e-01, -1.70161098e-01],\n         [ 6.49997965e-02, -1.09900020e-01,  5.34067929e-01],\n         ...,\n         [ 9.76707816e-01, -4.57547069e-01,  7.89684951e-01],\n         [ 8.38604391e-01,  3.62013191e-01,  5.43800928e-02],\n         [ 6.64853454e-01, -4.04717684e-01,  6.60430789e-02]],\n\n        [[ 3.19798052e-01, -7.16668129e-01, -2.05717981e-01],\n         [ 3.88257131e-02,  1.76049158e-01,  1.24581739e-01],\n         [-1.41120672e-01,  3.87605935e-01,  5.67245007e-01],\n         ...,\n         [ 1.55237937e+00, -7.54201114e-01, -8.44384879e-02],\n         [-5.79768792e-02,  7.24854052e-01, -9.84922230e-01],\n         [ 4.50086981e-01,  2.78758526e-01,  1.91808864e-01]],\n\n        [[-3.39450240e-01,  7.05742359e-01,  3.70227098e-01],\n         [ 1.59158707e-01,  2.95707136e-01, -2.05979571e-01],\n         [-1.54281199e+00,  1.22939396e+00,  4.52832222e-01],\n         ...,\n         [-9.03259143e-02,  5.97818017e-01, -7.71838725e-01],\n         [-8.63066077e-01, -8.82639945e-01,  3.62605035e-01],\n         [ 1.35186389e-01, -1.13235235e+00,  1.13786250e-01]]],\n\n\n       ...,\n\n\n       [[[-1.14480603e+00, -3.57381105e-01, -6.92112923e-01],\n         [ 7.25142419e-01,  9.65754166e-02,  5.26965916e-01],\n         [-1.67722359e-01, -4.61182684e-01, -2.14071497e-01],\n         ...,\n         [ 1.52142429e+00, -7.91448653e-01,  4.22293305e-01],\n         [-2.01358899e-01,  9.46291685e-02, -6.49277747e-01],\n         [-1.12750697e+00, -3.61042619e-01, -9.08515453e-01]],\n\n        [[-1.45116711e+00, -3.07911038e-01, -1.20910656e+00],\n         [ 4.12204057e-01, -3.72575879e-01,  4.26818967e-01],\n         [-6.03006363e-01, -1.33473384e+00,  2.55780607e-01],\n         ...,\n         [-3.27010423e-01,  6.59659266e-01,  5.98020852e-01],\n         [ 6.08175993e-01, -7.02926338e-01, -3.25046659e-01],\n         [-2.54282385e-01,  5.48386693e-01, -5.25374413e-01]],\n\n        [[ 2.87553132e-01, -3.49704504e-01, -8.26958001e-01],\n         [ 5.52390277e-01,  5.77421486e-01,  1.90852340e-02],\n         [ 9.43585157e-01, -1.12011665e-02,  3.77056122e-01],\n         ...,\n         [ 2.94964433e-01,  9.00874361e-02, -8.25283706e-01],\n         [-5.81060886e-01,  1.11745581e-01,  5.28309882e-01],\n         [-5.80353022e-01,  8.95707428e-01,  4.80162263e-01]],\n\n        ...,\n\n        [[-9.18283284e-01, -1.00061655e+00,  2.00199246e-01],\n         [-4.98641670e-01, -2.63254911e-01, -7.41710067e-01],\n         [-6.05106115e-01, -5.64821899e-01,  1.32757306e-01],\n         ...,\n         [-1.36751980e-01,  1.15680933e+00, -2.89076179e-01],\n         [-1.25223130e-01, -1.86964825e-01,  9.67146754e-01],\n         [-2.12205902e-01,  4.35392439e-01, -2.30418772e-01]],\n\n        [[-1.24444537e-01,  6.14195578e-02,  3.39996070e-01],\n         [ 2.41300717e-01,  3.56016845e-01,  1.20242126e-03],\n         [ 3.90359551e-01,  8.92309368e-01,  7.51367211e-01],\n         ...,\n         [-5.46934903e-01, -1.09559067e-01, -6.79587483e-01],\n         [ 4.79468256e-01,  2.67030150e-01,  1.34138629e-01],\n         [-1.30861059e-01,  1.42464563e-01, -8.66344422e-02]],\n\n        [[-4.20571007e-02, -5.20291984e-01, -2.17393026e-01],\n         [ 8.10390189e-02,  3.68728489e-01, -2.44255781e-01],\n         [-8.38377237e-01, -1.27278519e+00,  2.79487133e-01],\n         ...,\n         [ 1.09618044e+00, -4.50076789e-01,  4.74928916e-01],\n         [-4.19968367e-01, -2.46861771e-01,  6.26590550e-01],\n         [ 2.43788138e-01, -4.73245949e-01, -1.17245205e-01]]],\n\n\n       [[[ 2.15578866e+00,  3.08099580e+00,  2.55865455e+00],\n         [ 8.74383748e-01,  2.05823612e+00,  2.57661772e+00],\n         [ 2.97693205e+00,  2.04291272e+00,  2.99536943e+00],\n         ...,\n         [ 2.58826375e+00,  3.35895228e+00,  2.97018051e+00],\n         [ 4.46333456e+00,  2.88383865e+00,  3.25287437e+00],\n         [ 2.90028071e+00,  2.93628669e+00,  3.05204129e+00]],\n\n        [[ 2.85772848e+00,  2.78307557e+00,  2.76283169e+00],\n         [ 2.83643603e+00,  4.93539762e+00,  1.77375126e+00],\n         [ 5.08286047e+00,  3.44464540e+00,  2.37321258e+00],\n         ...,\n         [ 2.85869980e+00,  3.54254055e+00,  2.88392949e+00],\n         [ 3.29043865e+00,  3.72467208e+00,  3.03430128e+00],\n         [ 2.50931478e+00,  4.21212530e+00,  3.02869987e+00]],\n\n        [[ 2.60079718e+00,  2.92944145e+00,  3.16527796e+00],\n         [ 3.76208329e+00,  3.59882927e+00,  2.94548345e+00],\n         [ 2.80649066e+00,  2.53864408e+00,  2.94337273e+00],\n         ...,\n         [ 2.21452904e+00,  2.95831966e+00,  2.51744819e+00],\n         [ 3.05933714e+00,  4.35623169e+00,  4.22927189e+00],\n         [ 2.55187345e+00,  2.00857258e+00,  4.26637125e+00]],\n\n        ...,\n\n        [[ 3.07711864e+00,  4.53593349e+00,  2.91631532e+00],\n         [ 2.67138338e+00,  2.18106318e+00,  3.19537592e+00],\n         [ 3.57892966e+00,  3.56422210e+00,  2.64765668e+00],\n         ...,\n         [ 2.87327623e+00,  4.10697222e+00,  3.15630054e+00],\n         [ 2.23351192e+00,  3.85060549e+00,  3.50941634e+00],\n         [ 2.29376984e+00,  2.45717144e+00,  2.08343172e+00]],\n\n        [[ 2.93562675e+00,  3.30629992e+00,  1.58045220e+00],\n         [ 2.35200572e+00,  4.24082279e+00,  3.62065172e+00],\n         [ 1.29324961e+00,  3.98833990e+00,  4.10879850e+00],\n         ...,\n         [ 3.19434834e+00,  3.06898999e+00,  3.34304237e+00],\n         [ 3.33059454e+00,  2.33817220e+00,  2.28181982e+00],\n         [ 4.34713411e+00,  2.23903966e+00,  3.75601149e+00]],\n\n        [[ 3.26053667e+00,  3.46582556e+00,  3.71084166e+00],\n         [ 3.38076496e+00,  2.57321739e+00,  3.04899287e+00],\n         [ 2.62693357e+00,  2.96209097e+00,  3.23524809e+00],\n         ...,\n         [ 3.85319567e+00,  2.37327766e+00,  2.84366965e+00],\n         [ 2.99800897e+00,  2.84120059e+00,  2.76998782e+00],\n         [ 3.62453818e+00,  2.27150464e+00,  3.79573035e+00]]],\n\n\n       [[[ 2.63853502e+00,  3.25928736e+00,  4.28758192e+00],\n         [ 2.29286647e+00,  3.72748280e+00,  3.68899417e+00],\n         [ 2.72908664e+00,  3.64110994e+00,  2.66155982e+00],\n         ...,\n         [ 2.76792836e+00,  2.54574513e+00,  2.44228745e+00],\n         [ 3.30892277e+00,  3.94890976e+00,  2.92305732e+00],\n         [ 3.77217245e+00,  3.21693468e+00,  2.31031919e+00]],\n\n        [[ 2.91231489e+00,  3.08661175e+00,  3.40530276e+00],\n         [ 2.59972906e+00,  3.33769989e+00,  2.88453674e+00],\n         [ 3.11897874e+00,  3.32647729e+00,  3.12164450e+00],\n         ...,\n         [ 3.78570533e+00,  4.33579826e+00,  3.08120108e+00],\n         [ 3.21625781e+00,  2.95012331e+00,  2.49304676e+00],\n         [ 3.19944358e+00,  1.84003007e+00,  2.18774152e+00]],\n\n        [[ 2.68758321e+00,  2.54258204e+00,  3.67428923e+00],\n         [ 3.46096969e+00,  3.30966330e+00,  3.81793404e+00],\n         [ 3.95620084e+00,  2.76114178e+00,  2.98858500e+00],\n         ...,\n         [ 3.04010010e+00,  4.14689350e+00,  2.66325212e+00],\n         [ 2.75893092e+00,  3.02988505e+00,  2.99630213e+00],\n         [ 4.14416075e+00,  3.35238647e+00,  2.55152440e+00]],\n\n        ...,\n\n        [[ 2.72850895e+00,  2.55072784e+00,  2.42350459e+00],\n         [ 2.48955464e+00,  2.59814477e+00,  2.50608444e+00],\n         [ 2.62223482e+00,  3.09236908e+00,  2.50211954e+00],\n         ...,\n         [ 4.10936165e+00,  2.72093177e+00,  4.30092716e+00],\n         [ 2.78471088e+00,  3.15753603e+00,  3.36016512e+00],\n         [ 2.16036701e+00,  3.28599548e+00,  3.45953131e+00]],\n\n        [[ 3.29730439e+00,  2.72955728e+00,  2.60483503e+00],\n         [ 2.44225979e+00,  3.27572083e+00,  2.50729799e+00],\n         [ 3.00370479e+00,  3.11162734e+00,  2.32961559e+00],\n         ...,\n         [ 4.47026682e+00,  4.30285168e+00,  1.83744121e+00],\n         [ 3.66554093e+00,  3.75061083e+00,  4.00131083e+00],\n         [ 3.34716153e+00,  1.89955509e+00,  2.80798316e+00]],\n\n        [[ 2.38341451e+00,  2.92144442e+00,  3.13215733e+00],\n         [ 1.66528213e+00,  3.37640786e+00,  1.82169402e+00],\n         [ 2.70129848e+00,  3.49725556e+00,  2.43730736e+00],\n         ...,\n         [ 4.22319460e+00,  3.26225591e+00,  3.01633310e+00],\n         [ 2.29725838e+00,  2.87530065e+00,  2.89709926e+00],\n         [ 3.62648153e+00,  4.10150862e+00,  2.90567899e+00]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "y": {
                                    "variable_value": "array([[1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.27266634, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b26a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x129598960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.3759714889526367, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b21a00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.5309237, 0.5], [0.5706448, 0.5625], [0.28117323, 0.8125], [0.40015984, 0.6875], [0.4205173, 0.625], [0.39545313, 0.6875], [0.55534536, 0.5625], [0.538455, 0.5625], [0.36696455, 0.6875], [0.20403665, 0.875], [0.41346925, 0.625], [0.608768, 0.4375], [0.12345378, 1.0]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 1.57376528e+00,  1.12352765e+00,  7.03308702e-01],\n         [ 1.51428699e+00,  1.53788972e+00,  2.25852561e+00],\n         [ 1.65055299e+00, -2.44680777e-01,  2.20546794e+00],\n         ...,\n         [ 8.90315115e-01,  1.17110980e+00,  8.11209619e-01],\n         [ 1.81078637e+00,  6.56036317e-01,  1.49272358e+00],\n         [ 1.08292508e+00,  1.63769567e+00,  1.77009737e+00]],\n\n        [[ 2.24309787e-02,  5.73003471e-01,  1.03584838e+00],\n         [ 1.19214809e+00,  8.68484676e-02,  6.59597695e-01],\n         [ 1.71294165e+00,  9.44403231e-01, -1.48089945e-01],\n         ...,\n         [-7.33841360e-01,  3.06885743e+00,  1.14998496e+00],\n         [ 1.88620806e+00,  1.73935628e+00,  1.33315647e+00],\n         [ 2.13682628e+00,  7.45087922e-01,  7.27721632e-01]],\n\n        [[ 6.31050944e-01,  2.01477528e+00,  7.20875025e-01],\n         [ 7.94771612e-01,  1.66644788e+00,  1.31833005e+00],\n         [ 9.18636918e-01,  6.57838106e-01,  2.82311821e+00],\n         ...,\n         [ 2.28197551e+00,  8.37209165e-01,  2.94021630e+00],\n         [ 2.98984617e-01, -1.55530661e-01,  8.67351651e-01],\n         [ 1.02821100e+00,  6.15553141e-01, -4.75890413e-02]],\n\n        ...,\n\n        [[ 1.12330210e+00,  6.34181201e-01,  5.31017423e-01],\n         [ 1.90618980e+00,  1.45043588e+00,  1.45949817e+00],\n         [ 2.41040990e-01,  1.34468269e+00, -2.49193057e-01],\n         ...,\n         [ 4.41925794e-01, -4.61285114e-01,  1.50379050e+00],\n         [ 1.49803388e+00,  2.06364918e+00,  1.63167405e+00],\n         [ 1.25271773e+00,  8.38878274e-01,  2.17174724e-01]],\n\n        [[ 8.78313899e-01, -2.15731859e-02,  8.60655665e-01],\n         [ 6.65444851e-01,  4.43688303e-01,  1.68242884e+00],\n         [ 1.26464295e+00,  6.48997724e-01,  8.05148780e-01],\n         ...,\n         [ 6.13642812e-01,  1.19403970e+00,  7.70280182e-01],\n         [ 1.88752949e+00,  3.87430340e-01,  9.98099387e-01],\n         [ 5.97838342e-01,  2.14818168e+00,  1.42182720e+00]],\n\n        [[ 5.75405896e-01,  1.05022991e+00,  6.67018771e-01],\n         [ 2.49376011e+00,  3.34913075e-01,  8.35396707e-01],\n         [ 1.83656478e+00,  8.22342217e-01,  1.21126974e+00],\n         ...,\n         [ 5.25926292e-01,  1.84810340e-01,  1.42301559e+00],\n         [ 3.53104085e-01,  9.20191586e-01,  1.13056910e+00],\n         [ 9.34212625e-01,  2.40513086e+00, -5.38971961e-01]]],\n\n\n       [[[ 2.83357620e+00,  2.63766217e+00,  3.19993854e+00],\n         [ 2.92743158e+00,  3.19140196e+00,  4.40820599e+00],\n         [ 3.31757426e+00,  1.01832032e+00,  3.66676784e+00],\n         ...,\n         [ 1.89963865e+00,  2.14735365e+00,  1.43188226e+00],\n         [ 3.15220881e+00,  3.61418438e+00,  2.63694549e+00],\n         [ 3.38812590e+00,  3.49740434e+00,  2.86049128e+00]],\n\n        [[ 3.95023608e+00,  3.35563540e+00,  2.55747581e+00],\n         [ 2.86220407e+00,  4.21226358e+00,  3.49077868e+00],\n         [ 3.42010283e+00,  3.83512163e+00,  2.64546347e+00],\n         ...,\n         [ 3.25961399e+00,  3.31824112e+00,  2.82380438e+00],\n         [ 2.57332611e+00,  2.96098423e+00,  1.61498463e+00],\n         [ 3.40634084e+00,  2.48253632e+00,  3.28360343e+00]],\n\n        [[ 3.45709825e+00,  3.09026694e+00,  3.47561574e+00],\n         [ 2.82419443e+00,  2.57233644e+00,  3.29053164e+00],\n         [ 4.68500042e+00,  2.66714740e+00,  3.12672234e+00],\n         ...,\n         [ 4.02094364e+00,  4.74792671e+00,  2.41586876e+00],\n         [ 3.50696063e+00,  3.15952802e+00,  3.22990060e+00],\n         [ 3.85646510e+00,  3.59134150e+00,  2.60885739e+00]],\n\n        ...,\n\n        [[ 3.50408626e+00,  2.80460072e+00,  2.22976208e+00],\n         [ 3.13711739e+00,  4.13129187e+00,  2.40444064e+00],\n         [ 4.07292557e+00,  3.22778797e+00,  2.99529052e+00],\n         ...,\n         [ 4.31967640e+00,  3.87939310e+00,  3.07902431e+00],\n         [ 3.73414516e+00,  2.79321480e+00,  3.56207585e+00],\n         [ 2.59665537e+00,  4.17075729e+00,  3.13588071e+00]],\n\n        [[ 3.21538901e+00,  3.23788142e+00,  2.96318173e+00],\n         [ 2.22038460e+00,  3.51666951e+00,  2.57501197e+00],\n         [ 2.36285710e+00,  3.02156591e+00,  2.66788030e+00],\n         ...,\n         [ 3.70758486e+00,  2.19856954e+00,  4.51426649e+00],\n         [ 2.89798117e+00,  3.48846006e+00,  3.06724048e+00],\n         [ 2.96404386e+00,  3.07091665e+00,  3.99657083e+00]],\n\n        [[ 2.26067877e+00,  2.69341636e+00,  2.47977829e+00],\n         [ 3.34689593e+00,  4.30463457e+00,  3.23241973e+00],\n         [ 3.23665237e+00,  3.65683985e+00,  3.53650761e+00],\n         ...,\n         [ 2.88344741e+00,  4.07896328e+00,  1.50141060e+00],\n         [ 3.24943519e+00,  3.84815717e+00,  2.15114379e+00],\n         [ 3.00878477e+00,  4.40477514e+00,  1.40138292e+00]]],\n\n\n       [[[ 2.04125142e+00,  3.17667866e+00,  3.00393271e+00],\n         [ 3.61684775e+00,  2.58659601e+00,  2.04223752e+00],\n         [ 2.84506249e+00,  3.27871895e+00,  3.55732226e+00],\n         ...,\n         [ 3.54799867e+00,  2.83510447e+00,  2.12129903e+00],\n         [ 3.04527235e+00,  3.61823654e+00,  3.21486831e+00],\n         [ 3.34083605e+00,  4.38551569e+00,  1.91839612e+00]],\n\n        [[ 2.41575599e+00,  4.04450464e+00,  3.16462350e+00],\n         [ 2.63710690e+00,  2.23324466e+00,  1.88130510e+00],\n         [ 2.36866450e+00,  2.41443729e+00,  2.34142041e+00],\n         ...,\n         [ 2.98226237e+00,  2.96621513e+00,  3.18923807e+00],\n         [ 1.43019152e+00,  3.37805271e+00,  2.39650655e+00],\n         [ 4.22268867e+00,  2.66191006e+00,  2.02437425e+00]],\n\n        [[ 2.63381243e+00,  3.12909818e+00,  1.87899137e+00],\n         [ 4.06001520e+00,  3.52157140e+00,  3.30992818e+00],\n         [ 3.31546211e+00,  3.17238498e+00,  4.15820503e+00],\n         ...,\n         [ 1.75345469e+00,  2.83214712e+00,  3.64825559e+00],\n         [ 3.22152519e+00,  2.55528069e+00,  3.00881100e+00],\n         [ 3.44442606e+00,  3.93592310e+00,  2.14441490e+00]],\n\n        ...,\n\n        [[ 3.59657168e+00,  3.15034413e+00,  2.67643332e+00],\n         [ 3.97795892e+00,  4.73898697e+00,  4.10317802e+00],\n         [ 2.19461894e+00,  2.81312728e+00,  2.43370128e+00],\n         ...,\n         [ 2.16470146e+00,  2.96247959e+00,  3.79316926e+00],\n         [ 3.02452993e+00,  2.14551091e+00,  3.38436127e+00],\n         [ 2.34506845e+00,  2.18264532e+00,  1.55920982e+00]],\n\n        [[ 2.95431566e+00,  2.13792729e+00,  2.39967895e+00],\n         [ 3.61530089e+00,  3.42249918e+00,  2.28067398e+00],\n         [ 4.45245743e+00,  3.14158869e+00,  2.10737729e+00],\n         ...,\n         [ 2.37000608e+00,  2.43481946e+00,  3.28656077e+00],\n         [ 3.29113626e+00,  3.61911511e+00,  3.80720997e+00],\n         [ 3.52537966e+00,  2.88601279e+00,  4.41563129e+00]],\n\n        [[ 3.65996480e+00,  3.27539253e+00,  3.43765807e+00],\n         [ 3.88175249e+00,  2.71836758e+00,  3.44802356e+00],\n         [ 2.32977080e+00,  3.33382225e+00,  2.91607690e+00],\n         ...,\n         [ 3.31888723e+00,  4.14680529e+00,  2.63418031e+00],\n         [ 3.74341917e+00,  1.44929767e+00,  2.05282092e+00],\n         [ 2.40137315e+00,  2.57019472e+00,  3.87140894e+00]]],\n\n\n       ...,\n\n\n       [[[ 3.27508777e-01,  1.47425449e+00,  9.05448139e-01],\n         [ 2.57197571e+00,  1.31496501e+00,  2.84039712e+00],\n         [ 3.79291207e-01,  1.42146599e+00,  1.00103088e-01],\n         ...,\n         [ 1.63232112e+00, -6.25990033e-01,  5.19635022e-01],\n         [ 5.36165178e-01,  2.18860316e+00, -3.11252326e-01],\n         [ 1.67159665e+00,  1.35731649e+00,  7.79488742e-01]],\n\n        [[ 4.45995554e-02,  1.06277227e-01,  4.46518153e-01],\n         [ 9.26328182e-01,  1.12847543e+00,  1.65887082e+00],\n         [ 1.54077005e+00,  2.63699651e-01,  1.50966370e+00],\n         ...,\n         [ 9.23974037e-01, -2.29983360e-01,  5.73849306e-03],\n         [ 2.21325740e-01,  8.93112123e-02,  1.35846925e+00],\n         [ 2.32417154e+00,  1.72607338e+00,  9.03708100e-01]],\n\n        [[ 1.08340549e+00,  2.02205515e+00,  5.75577736e-01],\n         [ 1.05303681e+00,  1.11187589e+00,  8.50065827e-01],\n         [ 5.46588264e-02,  6.07076466e-01,  1.21197033e+00],\n         ...,\n         [ 4.28808540e-01,  2.14267826e+00,  1.09592187e+00],\n         [ 7.11104691e-01,  1.44447672e+00,  3.82852703e-01],\n         [ 1.19585896e+00,  1.62682176e+00,  6.92024052e-01]],\n\n        ...,\n\n        [[ 6.65654004e-01,  2.26701927e+00,  8.76207292e-01],\n         [ 2.94905752e-01, -1.56829804e-01,  6.79400265e-01],\n         [ 2.01223582e-01,  1.45748186e+00,  8.27973187e-01],\n         ...,\n         [-3.54317307e-01, -4.91386652e-01,  1.01042819e+00],\n         [ 1.71649122e+00,  9.80228901e-01,  1.94877183e+00],\n         [-3.79285477e-02,  8.06801975e-01,  4.41848457e-01]],\n\n        [[ 1.02662027e+00,  6.49041593e-01,  1.37821007e+00],\n         [ 1.64954066e+00,  6.40234709e-01,  2.47664899e-01],\n         [ 1.44041145e+00,  1.23473394e+00,  7.19967127e-01],\n         ...,\n         [-2.07509041e-01,  1.44678855e+00,  5.13333619e-01],\n         [ 1.91189873e+00,  1.83929849e+00,  1.70265543e+00],\n         [ 7.28126526e-01,  1.01434374e+00,  2.17865610e+00]],\n\n        [[ 5.07287025e-01,  3.35089536e-03,  8.43816161e-01],\n         [ 1.17076993e+00,  5.44290125e-01,  1.00763150e-01],\n         [ 2.70802528e-01,  4.79250878e-01,  1.84460199e+00],\n         ...,\n         [ 3.60707879e-01,  2.62728691e+00,  2.17801496e-01],\n         [ 2.40639210e+00, -6.17543459e-01,  6.62982941e-01],\n         [ 1.20040405e+00,  1.27581644e+00,  1.64620590e+00]]],\n\n\n       [[[-1.14480603e+00, -3.57381105e-01, -6.92112923e-01],\n         [ 7.25142419e-01,  9.65754166e-02,  5.26965916e-01],\n         [-1.67722359e-01, -4.61182684e-01, -2.14071497e-01],\n         ...,\n         [ 1.52142429e+00, -7.91448653e-01,  4.22293305e-01],\n         [-2.01358899e-01,  9.46291685e-02, -6.49277747e-01],\n         [-1.12750697e+00, -3.61042619e-01, -9.08515453e-01]],\n\n        [[-1.45116711e+00, -3.07911038e-01, -1.20910656e+00],\n         [ 4.12204057e-01, -3.72575879e-01,  4.26818967e-01],\n         [-6.03006363e-01, -1.33473384e+00,  2.55780607e-01],\n         ...,\n         [-3.27010423e-01,  6.59659266e-01,  5.98020852e-01],\n         [ 6.08175993e-01, -7.02926338e-01, -3.25046659e-01],\n         [-2.54282385e-01,  5.48386693e-01, -5.25374413e-01]],\n\n        [[ 2.87553132e-01, -3.49704504e-01, -8.26958001e-01],\n         [ 5.52390277e-01,  5.77421486e-01,  1.90852340e-02],\n         [ 9.43585157e-01, -1.12011665e-02,  3.77056122e-01],\n         ...,\n         [ 2.94964433e-01,  9.00874361e-02, -8.25283706e-01],\n         [-5.81060886e-01,  1.11745581e-01,  5.28309882e-01],\n         [-5.80353022e-01,  8.95707428e-01,  4.80162263e-01]],\n\n        ...,\n\n        [[-9.18283284e-01, -1.00061655e+00,  2.00199246e-01],\n         [-4.98641670e-01, -2.63254911e-01, -7.41710067e-01],\n         [-6.05106115e-01, -5.64821899e-01,  1.32757306e-01],\n         ...,\n         [-1.36751980e-01,  1.15680933e+00, -2.89076179e-01],\n         [-1.25223130e-01, -1.86964825e-01,  9.67146754e-01],\n         [-2.12205902e-01,  4.35392439e-01, -2.30418772e-01]],\n\n        [[-1.24444537e-01,  6.14195578e-02,  3.39996070e-01],\n         [ 2.41300717e-01,  3.56016845e-01,  1.20242126e-03],\n         [ 3.90359551e-01,  8.92309368e-01,  7.51367211e-01],\n         ...,\n         [-5.46934903e-01, -1.09559067e-01, -6.79587483e-01],\n         [ 4.79468256e-01,  2.67030150e-01,  1.34138629e-01],\n         [-1.30861059e-01,  1.42464563e-01, -8.66344422e-02]],\n\n        [[-4.20571007e-02, -5.20291984e-01, -2.17393026e-01],\n         [ 8.10390189e-02,  3.68728489e-01, -2.44255781e-01],\n         [-8.38377237e-01, -1.27278519e+00,  2.79487133e-01],\n         ...,\n         [ 1.09618044e+00, -4.50076789e-01,  4.74928916e-01],\n         [-4.19968367e-01, -2.46861771e-01,  6.26590550e-01],\n         [ 2.43788138e-01, -4.73245949e-01, -1.17245205e-01]]],\n\n\n       [[[ 2.02175283e+00,  3.24694777e+00,  2.67870092e+00],\n         [ 3.10907578e+00,  2.36959004e+00,  3.45630765e+00],\n         [ 3.48910904e+00,  3.74991918e+00,  2.48422551e+00],\n         ...,\n         [ 3.11046791e+00,  2.46903086e+00,  2.34108281e+00],\n         [ 3.20661426e+00,  2.65945745e+00,  3.09383798e+00],\n         [ 2.48479009e+00,  4.22154474e+00,  2.85700035e+00]],\n\n        [[ 3.09005475e+00,  3.05231881e+00,  2.53083014e+00],\n         [ 1.60533917e+00,  3.30699372e+00,  3.50446033e+00],\n         [ 2.32006979e+00,  2.89085245e+00,  3.41762471e+00],\n         ...,\n         [ 2.91412997e+00,  3.54279447e+00,  3.31259418e+00],\n         [ 3.82746458e+00,  2.44570494e+00,  2.59941006e+00],\n         [ 3.62506676e+00,  2.41877151e+00,  3.06847954e+00]],\n\n        [[ 4.36236906e+00,  2.88542461e+00,  1.83740890e+00],\n         [ 3.99260592e+00,  3.03455949e+00,  2.43770361e+00],\n         [ 2.97396469e+00,  2.99920201e+00,  2.68874288e+00],\n         ...,\n         [ 2.58067894e+00,  3.96154523e+00,  3.24975371e+00],\n         [ 1.74543631e+00,  1.97966647e+00,  1.68362737e+00],\n         [ 3.58691049e+00,  2.99762559e+00,  2.89300466e+00]],\n\n        ...,\n\n        [[ 2.83457470e+00,  2.61349368e+00,  2.53128290e+00],\n         [ 3.06272984e+00,  2.53442144e+00,  4.02623177e+00],\n         [ 2.97839022e+00,  3.74496865e+00,  2.59435248e+00],\n         ...,\n         [ 4.05596590e+00,  2.75065136e+00,  4.60590458e+00],\n         [ 2.64399219e+00,  2.80602264e+00,  3.79298520e+00],\n         [ 3.01425719e+00,  3.10544634e+00,  2.80942130e+00]],\n\n        [[ 2.88580155e+00,  3.08341074e+00,  2.09570456e+00],\n         [ 3.51257753e+00,  2.04906368e+00,  4.34087181e+00],\n         [ 3.38511753e+00,  3.07876992e+00,  2.45687437e+00],\n         ...,\n         [ 2.69835305e+00,  3.75687122e+00,  2.57881951e+00],\n         [ 3.58933401e+00,  2.99634314e+00,  3.99624753e+00],\n         [ 2.36829972e+00,  2.96393085e+00,  3.07764959e+00]],\n\n        [[ 3.11215210e+00,  3.83313060e+00,  3.33013725e+00],\n         [ 2.53206396e+00,  2.25854945e+00,  2.44361639e+00],\n         [ 3.79500484e+00,  4.43714523e+00,  3.82362008e+00],\n         ...,\n         [ 3.35870481e+00,  3.44652247e+00,  4.13793421e+00],\n         [ 2.62666965e+00,  2.82242346e+00,  3.77520585e+00],\n         [ 2.01863289e+00,  3.56471848e+00,  3.70455575e+00]]]],\n      dtype=float32), array([[0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 1.57376528e+00,  1.12352765e+00,  7.03308702e-01],\n         [ 1.51428699e+00,  1.53788972e+00,  2.25852561e+00],\n         [ 1.65055299e+00, -2.44680777e-01,  2.20546794e+00],\n         ...,\n         [ 8.90315115e-01,  1.17110980e+00,  8.11209619e-01],\n         [ 1.81078637e+00,  6.56036317e-01,  1.49272358e+00],\n         [ 1.08292508e+00,  1.63769567e+00,  1.77009737e+00]],\n\n        [[ 2.24309787e-02,  5.73003471e-01,  1.03584838e+00],\n         [ 1.19214809e+00,  8.68484676e-02,  6.59597695e-01],\n         [ 1.71294165e+00,  9.44403231e-01, -1.48089945e-01],\n         ...,\n         [-7.33841360e-01,  3.06885743e+00,  1.14998496e+00],\n         [ 1.88620806e+00,  1.73935628e+00,  1.33315647e+00],\n         [ 2.13682628e+00,  7.45087922e-01,  7.27721632e-01]],\n\n        [[ 6.31050944e-01,  2.01477528e+00,  7.20875025e-01],\n         [ 7.94771612e-01,  1.66644788e+00,  1.31833005e+00],\n         [ 9.18636918e-01,  6.57838106e-01,  2.82311821e+00],\n         ...,\n         [ 2.28197551e+00,  8.37209165e-01,  2.94021630e+00],\n         [ 2.98984617e-01, -1.55530661e-01,  8.67351651e-01],\n         [ 1.02821100e+00,  6.15553141e-01, -4.75890413e-02]],\n\n        ...,\n\n        [[ 1.12330210e+00,  6.34181201e-01,  5.31017423e-01],\n         [ 1.90618980e+00,  1.45043588e+00,  1.45949817e+00],\n         [ 2.41040990e-01,  1.34468269e+00, -2.49193057e-01],\n         ...,\n         [ 4.41925794e-01, -4.61285114e-01,  1.50379050e+00],\n         [ 1.49803388e+00,  2.06364918e+00,  1.63167405e+00],\n         [ 1.25271773e+00,  8.38878274e-01,  2.17174724e-01]],\n\n        [[ 8.78313899e-01, -2.15731859e-02,  8.60655665e-01],\n         [ 6.65444851e-01,  4.43688303e-01,  1.68242884e+00],\n         [ 1.26464295e+00,  6.48997724e-01,  8.05148780e-01],\n         ...,\n         [ 6.13642812e-01,  1.19403970e+00,  7.70280182e-01],\n         [ 1.88752949e+00,  3.87430340e-01,  9.98099387e-01],\n         [ 5.97838342e-01,  2.14818168e+00,  1.42182720e+00]],\n\n        [[ 5.75405896e-01,  1.05022991e+00,  6.67018771e-01],\n         [ 2.49376011e+00,  3.34913075e-01,  8.35396707e-01],\n         [ 1.83656478e+00,  8.22342217e-01,  1.21126974e+00],\n         ...,\n         [ 5.25926292e-01,  1.84810340e-01,  1.42301559e+00],\n         [ 3.53104085e-01,  9.20191586e-01,  1.13056910e+00],\n         [ 9.34212625e-01,  2.40513086e+00, -5.38971961e-01]]],\n\n\n       [[[ 2.83357620e+00,  2.63766217e+00,  3.19993854e+00],\n         [ 2.92743158e+00,  3.19140196e+00,  4.40820599e+00],\n         [ 3.31757426e+00,  1.01832032e+00,  3.66676784e+00],\n         ...,\n         [ 1.89963865e+00,  2.14735365e+00,  1.43188226e+00],\n         [ 3.15220881e+00,  3.61418438e+00,  2.63694549e+00],\n         [ 3.38812590e+00,  3.49740434e+00,  2.86049128e+00]],\n\n        [[ 3.95023608e+00,  3.35563540e+00,  2.55747581e+00],\n         [ 2.86220407e+00,  4.21226358e+00,  3.49077868e+00],\n         [ 3.42010283e+00,  3.83512163e+00,  2.64546347e+00],\n         ...,\n         [ 3.25961399e+00,  3.31824112e+00,  2.82380438e+00],\n         [ 2.57332611e+00,  2.96098423e+00,  1.61498463e+00],\n         [ 3.40634084e+00,  2.48253632e+00,  3.28360343e+00]],\n\n        [[ 3.45709825e+00,  3.09026694e+00,  3.47561574e+00],\n         [ 2.82419443e+00,  2.57233644e+00,  3.29053164e+00],\n         [ 4.68500042e+00,  2.66714740e+00,  3.12672234e+00],\n         ...,\n         [ 4.02094364e+00,  4.74792671e+00,  2.41586876e+00],\n         [ 3.50696063e+00,  3.15952802e+00,  3.22990060e+00],\n         [ 3.85646510e+00,  3.59134150e+00,  2.60885739e+00]],\n\n        ...,\n\n        [[ 3.50408626e+00,  2.80460072e+00,  2.22976208e+00],\n         [ 3.13711739e+00,  4.13129187e+00,  2.40444064e+00],\n         [ 4.07292557e+00,  3.22778797e+00,  2.99529052e+00],\n         ...,\n         [ 4.31967640e+00,  3.87939310e+00,  3.07902431e+00],\n         [ 3.73414516e+00,  2.79321480e+00,  3.56207585e+00],\n         [ 2.59665537e+00,  4.17075729e+00,  3.13588071e+00]],\n\n        [[ 3.21538901e+00,  3.23788142e+00,  2.96318173e+00],\n         [ 2.22038460e+00,  3.51666951e+00,  2.57501197e+00],\n         [ 2.36285710e+00,  3.02156591e+00,  2.66788030e+00],\n         ...,\n         [ 3.70758486e+00,  2.19856954e+00,  4.51426649e+00],\n         [ 2.89798117e+00,  3.48846006e+00,  3.06724048e+00],\n         [ 2.96404386e+00,  3.07091665e+00,  3.99657083e+00]],\n\n        [[ 2.26067877e+00,  2.69341636e+00,  2.47977829e+00],\n         [ 3.34689593e+00,  4.30463457e+00,  3.23241973e+00],\n         [ 3.23665237e+00,  3.65683985e+00,  3.53650761e+00],\n         ...,\n         [ 2.88344741e+00,  4.07896328e+00,  1.50141060e+00],\n         [ 3.24943519e+00,  3.84815717e+00,  2.15114379e+00],\n         [ 3.00878477e+00,  4.40477514e+00,  1.40138292e+00]]],\n\n\n       [[[ 2.04125142e+00,  3.17667866e+00,  3.00393271e+00],\n         [ 3.61684775e+00,  2.58659601e+00,  2.04223752e+00],\n         [ 2.84506249e+00,  3.27871895e+00,  3.55732226e+00],\n         ...,\n         [ 3.54799867e+00,  2.83510447e+00,  2.12129903e+00],\n         [ 3.04527235e+00,  3.61823654e+00,  3.21486831e+00],\n         [ 3.34083605e+00,  4.38551569e+00,  1.91839612e+00]],\n\n        [[ 2.41575599e+00,  4.04450464e+00,  3.16462350e+00],\n         [ 2.63710690e+00,  2.23324466e+00,  1.88130510e+00],\n         [ 2.36866450e+00,  2.41443729e+00,  2.34142041e+00],\n         ...,\n         [ 2.98226237e+00,  2.96621513e+00,  3.18923807e+00],\n         [ 1.43019152e+00,  3.37805271e+00,  2.39650655e+00],\n         [ 4.22268867e+00,  2.66191006e+00,  2.02437425e+00]],\n\n        [[ 2.63381243e+00,  3.12909818e+00,  1.87899137e+00],\n         [ 4.06001520e+00,  3.52157140e+00,  3.30992818e+00],\n         [ 3.31546211e+00,  3.17238498e+00,  4.15820503e+00],\n         ...,\n         [ 1.75345469e+00,  2.83214712e+00,  3.64825559e+00],\n         [ 3.22152519e+00,  2.55528069e+00,  3.00881100e+00],\n         [ 3.44442606e+00,  3.93592310e+00,  2.14441490e+00]],\n\n        ...,\n\n        [[ 3.59657168e+00,  3.15034413e+00,  2.67643332e+00],\n         [ 3.97795892e+00,  4.73898697e+00,  4.10317802e+00],\n         [ 2.19461894e+00,  2.81312728e+00,  2.43370128e+00],\n         ...,\n         [ 2.16470146e+00,  2.96247959e+00,  3.79316926e+00],\n         [ 3.02452993e+00,  2.14551091e+00,  3.38436127e+00],\n         [ 2.34506845e+00,  2.18264532e+00,  1.55920982e+00]],\n\n        [[ 2.95431566e+00,  2.13792729e+00,  2.39967895e+00],\n         [ 3.61530089e+00,  3.42249918e+00,  2.28067398e+00],\n         [ 4.45245743e+00,  3.14158869e+00,  2.10737729e+00],\n         ...,\n         [ 2.37000608e+00,  2.43481946e+00,  3.28656077e+00],\n         [ 3.29113626e+00,  3.61911511e+00,  3.80720997e+00],\n         [ 3.52537966e+00,  2.88601279e+00,  4.41563129e+00]],\n\n        [[ 3.65996480e+00,  3.27539253e+00,  3.43765807e+00],\n         [ 3.88175249e+00,  2.71836758e+00,  3.44802356e+00],\n         [ 2.32977080e+00,  3.33382225e+00,  2.91607690e+00],\n         ...,\n         [ 3.31888723e+00,  4.14680529e+00,  2.63418031e+00],\n         [ 3.74341917e+00,  1.44929767e+00,  2.05282092e+00],\n         [ 2.40137315e+00,  2.57019472e+00,  3.87140894e+00]]],\n\n\n       ...,\n\n\n       [[[ 3.27508777e-01,  1.47425449e+00,  9.05448139e-01],\n         [ 2.57197571e+00,  1.31496501e+00,  2.84039712e+00],\n         [ 3.79291207e-01,  1.42146599e+00,  1.00103088e-01],\n         ...,\n         [ 1.63232112e+00, -6.25990033e-01,  5.19635022e-01],\n         [ 5.36165178e-01,  2.18860316e+00, -3.11252326e-01],\n         [ 1.67159665e+00,  1.35731649e+00,  7.79488742e-01]],\n\n        [[ 4.45995554e-02,  1.06277227e-01,  4.46518153e-01],\n         [ 9.26328182e-01,  1.12847543e+00,  1.65887082e+00],\n         [ 1.54077005e+00,  2.63699651e-01,  1.50966370e+00],\n         ...,\n         [ 9.23974037e-01, -2.29983360e-01,  5.73849306e-03],\n         [ 2.21325740e-01,  8.93112123e-02,  1.35846925e+00],\n         [ 2.32417154e+00,  1.72607338e+00,  9.03708100e-01]],\n\n        [[ 1.08340549e+00,  2.02205515e+00,  5.75577736e-01],\n         [ 1.05303681e+00,  1.11187589e+00,  8.50065827e-01],\n         [ 5.46588264e-02,  6.07076466e-01,  1.21197033e+00],\n         ...,\n         [ 4.28808540e-01,  2.14267826e+00,  1.09592187e+00],\n         [ 7.11104691e-01,  1.44447672e+00,  3.82852703e-01],\n         [ 1.19585896e+00,  1.62682176e+00,  6.92024052e-01]],\n\n        ...,\n\n        [[ 6.65654004e-01,  2.26701927e+00,  8.76207292e-01],\n         [ 2.94905752e-01, -1.56829804e-01,  6.79400265e-01],\n         [ 2.01223582e-01,  1.45748186e+00,  8.27973187e-01],\n         ...,\n         [-3.54317307e-01, -4.91386652e-01,  1.01042819e+00],\n         [ 1.71649122e+00,  9.80228901e-01,  1.94877183e+00],\n         [-3.79285477e-02,  8.06801975e-01,  4.41848457e-01]],\n\n        [[ 1.02662027e+00,  6.49041593e-01,  1.37821007e+00],\n         [ 1.64954066e+00,  6.40234709e-01,  2.47664899e-01],\n         [ 1.44041145e+00,  1.23473394e+00,  7.19967127e-01],\n         ...,\n         [-2.07509041e-01,  1.44678855e+00,  5.13333619e-01],\n         [ 1.91189873e+00,  1.83929849e+00,  1.70265543e+00],\n         [ 7.28126526e-01,  1.01434374e+00,  2.17865610e+00]],\n\n        [[ 5.07287025e-01,  3.35089536e-03,  8.43816161e-01],\n         [ 1.17076993e+00,  5.44290125e-01,  1.00763150e-01],\n         [ 2.70802528e-01,  4.79250878e-01,  1.84460199e+00],\n         ...,\n         [ 3.60707879e-01,  2.62728691e+00,  2.17801496e-01],\n         [ 2.40639210e+00, -6.17543459e-01,  6.62982941e-01],\n         [ 1.20040405e+00,  1.27581644e+00,  1.64620590e+00]]],\n\n\n       [[[-1.14480603e+00, -3.57381105e-01, -6.92112923e-01],\n         [ 7.25142419e-01,  9.65754166e-02,  5.26965916e-01],\n         [-1.67722359e-01, -4.61182684e-01, -2.14071497e-01],\n         ...,\n         [ 1.52142429e+00, -7.91448653e-01,  4.22293305e-01],\n         [-2.01358899e-01,  9.46291685e-02, -6.49277747e-01],\n         [-1.12750697e+00, -3.61042619e-01, -9.08515453e-01]],\n\n        [[-1.45116711e+00, -3.07911038e-01, -1.20910656e+00],\n         [ 4.12204057e-01, -3.72575879e-01,  4.26818967e-01],\n         [-6.03006363e-01, -1.33473384e+00,  2.55780607e-01],\n         ...,\n         [-3.27010423e-01,  6.59659266e-01,  5.98020852e-01],\n         [ 6.08175993e-01, -7.02926338e-01, -3.25046659e-01],\n         [-2.54282385e-01,  5.48386693e-01, -5.25374413e-01]],\n\n        [[ 2.87553132e-01, -3.49704504e-01, -8.26958001e-01],\n         [ 5.52390277e-01,  5.77421486e-01,  1.90852340e-02],\n         [ 9.43585157e-01, -1.12011665e-02,  3.77056122e-01],\n         ...,\n         [ 2.94964433e-01,  9.00874361e-02, -8.25283706e-01],\n         [-5.81060886e-01,  1.11745581e-01,  5.28309882e-01],\n         [-5.80353022e-01,  8.95707428e-01,  4.80162263e-01]],\n\n        ...,\n\n        [[-9.18283284e-01, -1.00061655e+00,  2.00199246e-01],\n         [-4.98641670e-01, -2.63254911e-01, -7.41710067e-01],\n         [-6.05106115e-01, -5.64821899e-01,  1.32757306e-01],\n         ...,\n         [-1.36751980e-01,  1.15680933e+00, -2.89076179e-01],\n         [-1.25223130e-01, -1.86964825e-01,  9.67146754e-01],\n         [-2.12205902e-01,  4.35392439e-01, -2.30418772e-01]],\n\n        [[-1.24444537e-01,  6.14195578e-02,  3.39996070e-01],\n         [ 2.41300717e-01,  3.56016845e-01,  1.20242126e-03],\n         [ 3.90359551e-01,  8.92309368e-01,  7.51367211e-01],\n         ...,\n         [-5.46934903e-01, -1.09559067e-01, -6.79587483e-01],\n         [ 4.79468256e-01,  2.67030150e-01,  1.34138629e-01],\n         [-1.30861059e-01,  1.42464563e-01, -8.66344422e-02]],\n\n        [[-4.20571007e-02, -5.20291984e-01, -2.17393026e-01],\n         [ 8.10390189e-02,  3.68728489e-01, -2.44255781e-01],\n         [-8.38377237e-01, -1.27278519e+00,  2.79487133e-01],\n         ...,\n         [ 1.09618044e+00, -4.50076789e-01,  4.74928916e-01],\n         [-4.19968367e-01, -2.46861771e-01,  6.26590550e-01],\n         [ 2.43788138e-01, -4.73245949e-01, -1.17245205e-01]]],\n\n\n       [[[ 2.02175283e+00,  3.24694777e+00,  2.67870092e+00],\n         [ 3.10907578e+00,  2.36959004e+00,  3.45630765e+00],\n         [ 3.48910904e+00,  3.74991918e+00,  2.48422551e+00],\n         ...,\n         [ 3.11046791e+00,  2.46903086e+00,  2.34108281e+00],\n         [ 3.20661426e+00,  2.65945745e+00,  3.09383798e+00],\n         [ 2.48479009e+00,  4.22154474e+00,  2.85700035e+00]],\n\n        [[ 3.09005475e+00,  3.05231881e+00,  2.53083014e+00],\n         [ 1.60533917e+00,  3.30699372e+00,  3.50446033e+00],\n         [ 2.32006979e+00,  2.89085245e+00,  3.41762471e+00],\n         ...,\n         [ 2.91412997e+00,  3.54279447e+00,  3.31259418e+00],\n         [ 3.82746458e+00,  2.44570494e+00,  2.59941006e+00],\n         [ 3.62506676e+00,  2.41877151e+00,  3.06847954e+00]],\n\n        [[ 4.36236906e+00,  2.88542461e+00,  1.83740890e+00],\n         [ 3.99260592e+00,  3.03455949e+00,  2.43770361e+00],\n         [ 2.97396469e+00,  2.99920201e+00,  2.68874288e+00],\n         ...,\n         [ 2.58067894e+00,  3.96154523e+00,  3.24975371e+00],\n         [ 1.74543631e+00,  1.97966647e+00,  1.68362737e+00],\n         [ 3.58691049e+00,  2.99762559e+00,  2.89300466e+00]],\n\n        ...,\n\n        [[ 2.83457470e+00,  2.61349368e+00,  2.53128290e+00],\n         [ 3.06272984e+00,  2.53442144e+00,  4.02623177e+00],\n         [ 2.97839022e+00,  3.74496865e+00,  2.59435248e+00],\n         ...,\n         [ 4.05596590e+00,  2.75065136e+00,  4.60590458e+00],\n         [ 2.64399219e+00,  2.80602264e+00,  3.79298520e+00],\n         [ 3.01425719e+00,  3.10544634e+00,  2.80942130e+00]],\n\n        [[ 2.88580155e+00,  3.08341074e+00,  2.09570456e+00],\n         [ 3.51257753e+00,  2.04906368e+00,  4.34087181e+00],\n         [ 3.38511753e+00,  3.07876992e+00,  2.45687437e+00],\n         ...,\n         [ 2.69835305e+00,  3.75687122e+00,  2.57881951e+00],\n         [ 3.58933401e+00,  2.99634314e+00,  3.99624753e+00],\n         [ 2.36829972e+00,  2.96393085e+00,  3.07764959e+00]],\n\n        [[ 3.11215210e+00,  3.83313060e+00,  3.33013725e+00],\n         [ 2.53206396e+00,  2.25854945e+00,  2.44361639e+00],\n         [ 3.79500484e+00,  4.43714523e+00,  3.82362008e+00],\n         ...,\n         [ 3.35870481e+00,  3.44652247e+00,  4.13793421e+00],\n         [ 2.62666965e+00,  2.82242346e+00,  3.77520585e+00],\n         [ 2.01863289e+00,  3.56471848e+00,  3.70455575e+00]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "y": {
                                    "variable_value": "array([[0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.12345378, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b18a50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b18aa0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.42781101644039154, 0.65]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295bfdc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.264998, 1.0], [0.27550083, 1.0], [0.22650248, 1.0], [0.25064933, 1.0], [0.2301268, 1.0], [0.25195014, 1.0], [0.31275618, 1.0], [0.26172608, 1.0], [0.2838641, 1.0], [0.30649045, 1.0], [0.25728926, 1.0], [0.2979476, 1.0], [0.1790874, 1.0]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12951f4d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[-2.54425824e-01,  1.18395090e+00, -6.96354866e-01],\n         [-1.62376153e+00,  3.63050550e-01,  5.66255808e-01],\n         [ 1.53837353e-01,  8.54208171e-01, -1.00700688e+00],\n         ...,\n         [ 6.12266541e-01, -6.10987961e-01, -8.89929235e-01],\n         [-6.20896578e-01,  1.20397818e+00,  1.05489588e+00],\n         [ 2.16568038e-01, -1.35432780e+00,  8.95959854e-01]],\n\n        [[-2.42921412e-01,  4.69266325e-01, -9.28530157e-01],\n         [ 7.97545612e-02, -1.19552588e+00,  1.04035425e+00],\n         [ 1.66354418e-01, -1.85085225e+00, -1.23723304e+00],\n         ...,\n         [ 2.41211176e-01, -2.66339421e-01,  6.84741914e-01],\n         [-3.64025146e-01,  9.26730514e-01,  1.04438938e-01],\n         [ 4.13520306e-01, -8.10076073e-02, -3.89557242e-01]],\n\n        [[-4.11571532e-01,  2.24606618e-02,  1.41543734e+00],\n         [-8.01141798e-01,  7.31082797e-01, -1.14449728e+00],\n         [-1.83241940e+00,  3.20862830e-01,  6.21945977e-01],\n         ...,\n         [ 3.24791849e-01, -1.85281083e-01,  3.82822335e-01],\n         [ 1.06429927e-01,  1.92847416e-01,  1.71071872e-01],\n         [-5.31167626e-01, -1.15217373e-01, -1.06767073e-01]],\n\n        ...,\n\n        [[ 2.00317174e-01, -3.88869762e-01,  6.08524978e-01],\n         [-4.90532935e-01,  2.18011707e-01, -7.49371052e-01],\n         [ 3.07436049e-01,  1.25673056e+00, -7.09021449e-01],\n         ...,\n         [-4.99438494e-03,  8.54280770e-01, -4.74723428e-01],\n         [-7.09755123e-01,  4.52805459e-01, -9.70801860e-02],\n         [-1.29072654e+00, -6.11797333e-01,  6.99260414e-01]],\n\n        [[-9.71993983e-01,  7.60732532e-01,  2.38504678e-01],\n         [ 2.58386917e-02,  7.37570107e-01,  6.10319614e-01],\n         [-3.61342251e-01,  3.66232991e-01,  5.80299377e-01],\n         ...,\n         [ 8.96498561e-03, -1.12224305e+00,  1.21061110e+00],\n         [ 6.90399170e-01,  8.40191662e-01,  3.41099679e-01],\n         [ 6.20422959e-01,  1.00552821e+00, -3.73557091e-01]],\n\n        [[-2.81508267e-01,  1.13646269e-01,  8.87028724e-02],\n         [ 5.59742153e-01,  2.92152077e-01,  3.48684907e-01],\n         [-3.94600034e-01,  3.74033898e-02, -1.17130332e-01],\n         ...,\n         [ 1.20784080e+00,  2.79454887e-01, -6.51339710e-01],\n         [-4.41221237e-01, -1.03321505e+00, -9.87919688e-01],\n         [-4.77469593e-01, -1.41966224e-01, -1.16948009e-01]]],\n\n\n       [[[ 2.08570719e+00,  7.43613243e-01,  2.14990211e+00],\n         [ 1.39759231e+00,  3.43570173e-01,  1.37318623e+00],\n         [ 6.62125722e-02,  8.59738886e-01,  1.65294456e+00],\n         ...,\n         [ 1.02659428e+00,  2.10261226e+00,  2.82655686e-01],\n         [ 2.10154152e+00,  2.91745901e-01,  7.17543602e-01],\n         [ 8.41491580e-01,  1.43041551e+00,  6.62386715e-01]],\n\n        [[ 3.66577327e-01,  1.24197006e+00,  6.70530558e-01],\n         [ 1.60120153e+00, -1.15139984e-01,  1.26025474e+00],\n         [ 1.34638321e+00,  1.92843699e+00,  6.19662404e-01],\n         ...,\n         [ 1.81662774e+00,  9.78438258e-01,  1.99368462e-01],\n         [ 1.41219866e+00,  1.38150677e-01,  1.30030084e+00],\n         [ 1.45383525e+00,  3.73930395e-01,  2.45720387e-01]],\n\n        [[ 2.29629993e+00,  9.09303069e-01,  5.30469298e-01],\n         [ 5.28303981e-01,  8.64908934e-01,  1.94281435e+00],\n         [ 1.94758531e-02,  1.93609762e+00,  9.05688047e-01],\n         ...,\n         [ 1.66317952e+00,  9.20170009e-01,  9.31783378e-01],\n         [-4.12702151e-02,  8.21764648e-01,  1.60496664e+00],\n         [ 2.25686193e+00, -1.72581617e-02,  1.21164775e+00]],\n\n        ...,\n\n        [[ 9.62090850e-01,  1.28079391e+00,  1.49171424e+00],\n         [ 1.86300755e+00,  7.65150487e-01,  2.39676327e-01],\n         [ 1.41552162e+00,  6.71982050e-01,  2.21578908e+00],\n         ...,\n         [ 1.71259618e+00,  1.17025673e+00,  3.90405208e-01],\n         [ 9.70597565e-01,  1.16158426e+00,  5.53989708e-01],\n         [ 2.11414599e+00,  1.88748670e+00,  7.95491755e-01]],\n\n        [[ 1.40498996e+00,  1.28782022e+00,  1.32506073e+00],\n         [ 1.74082708e+00,  1.38332903e+00,  1.59431577e+00],\n         [ 5.51964521e-01,  4.14663047e-01,  1.96270621e+00],\n         ...,\n         [ 7.37250865e-01,  9.09365594e-01,  1.32703960e+00],\n         [ 2.84938186e-01,  1.57173586e+00,  6.01673603e-01],\n         [ 3.97186071e-01,  1.86573339e+00,  4.87565070e-01]],\n\n        [[ 1.55895972e+00,  1.56125641e+00,  7.19984591e-01],\n         [ 2.25204992e+00,  8.85639310e-01,  3.68957311e-01],\n         [ 8.42855871e-01,  1.04663670e+00, -2.09339070e+00],\n         ...,\n         [ 1.14805472e+00,  2.33209920e+00,  9.45347607e-01],\n         [ 6.17214978e-01,  1.63057041e+00,  1.37122405e+00],\n         [ 1.76244938e+00,  1.12924135e+00,  3.28176886e-01]]],\n\n\n       [[[ 2.92072034e+00,  3.80268884e+00,  2.54163480e+00],\n         [ 3.95384216e+00,  3.31202507e+00,  3.12890291e+00],\n         [ 3.53329253e+00,  3.33201528e+00,  2.70728135e+00],\n         ...,\n         [ 3.99027181e+00,  2.59090281e+00,  3.06165767e+00],\n         [ 2.84746075e+00,  3.19601345e+00,  3.63027072e+00],\n         [ 4.46697617e+00,  3.17009544e+00,  3.17197800e+00]],\n\n        [[ 2.13549113e+00,  3.69011545e+00,  3.72717714e+00],\n         [ 2.82801986e+00,  3.39725804e+00,  2.42516422e+00],\n         [ 3.00131989e+00,  2.87117934e+00,  1.52425885e+00],\n         ...,\n         [ 2.68257713e+00,  3.90486217e+00,  3.66804385e+00],\n         [ 2.47363186e+00,  2.56763697e+00,  2.83194423e+00],\n         [ 3.31981874e+00,  2.73909187e+00,  2.51996613e+00]],\n\n        [[ 2.38761806e+00,  3.18813276e+00,  2.18064761e+00],\n         [ 2.65246201e+00,  3.27199793e+00,  3.14141488e+00],\n         [ 3.59274006e+00,  3.49219108e+00,  3.05230665e+00],\n         ...,\n         [ 2.63487911e+00,  3.37562656e+00,  3.25456285e+00],\n         [ 2.78213072e+00,  1.88050961e+00,  2.71620798e+00],\n         [ 3.11123776e+00,  3.50389218e+00,  4.14984274e+00]],\n\n        ...,\n\n        [[ 2.28450513e+00,  4.01594400e+00,  3.70903111e+00],\n         [ 3.92679167e+00,  3.25196147e+00,  2.46452165e+00],\n         [ 3.77338886e+00,  2.82696509e+00,  3.30610394e+00],\n         ...,\n         [ 3.55542779e+00,  2.14096594e+00,  2.84791112e+00],\n         [ 2.45190287e+00,  1.96503067e+00,  3.24036527e+00],\n         [ 2.73436356e+00,  2.81190252e+00,  2.67280269e+00]],\n\n        [[ 1.66269350e+00,  2.84755778e+00,  1.97930384e+00],\n         [ 2.73028159e+00,  2.69776678e+00,  3.59020519e+00],\n         [ 2.85396075e+00,  2.65427494e+00,  3.06019092e+00],\n         ...,\n         [ 4.40349865e+00,  3.24983168e+00,  1.86301112e+00],\n         [ 3.22399449e+00,  1.65523970e+00,  4.09190035e+00],\n         [ 2.78255773e+00,  2.60182476e+00,  2.77872562e+00]],\n\n        [[ 2.66054249e+00,  3.50042677e+00,  1.62222838e+00],\n         [ 3.00848603e+00,  2.59307766e+00,  1.94911253e+00],\n         [ 3.21435833e+00,  3.14550495e+00,  2.97454357e+00],\n         ...,\n         [ 3.83915901e+00,  5.10807228e+00,  2.52646828e+00],\n         [ 1.46785998e+00,  2.14137936e+00,  3.03677869e+00],\n         [ 4.12943935e+00,  2.02559328e+00,  2.08812165e+00]]],\n\n\n       ...,\n\n\n       [[[ 1.94802433e-01,  6.34481907e-01, -8.72395813e-01],\n         [ 2.34992862e-01, -1.09903717e+00, -2.93905050e-01],\n         [ 6.87353492e-01, -2.85822660e-01,  3.48945856e-02],\n         ...,\n         [-1.85033798e+00,  2.05716205e+00, -6.94380477e-02],\n         [ 6.55952156e-01, -1.06972480e+00,  4.81024712e-01],\n         [-5.08025512e-02,  1.11947405e+00, -1.59408629e+00]],\n\n        [[-3.00985515e-01, -5.10501325e-01,  4.53367740e-01],\n         [-1.26633537e+00,  1.07152641e+00, -2.62018234e-01],\n         [-6.80625498e-01, -8.55890632e-01, -1.28458548e+00],\n         ...,\n         [-8.59540403e-01,  3.72296236e-02, -5.66734433e-01],\n         [-7.57733881e-01, -1.17195499e+00,  6.90468132e-01],\n         [-3.14076543e-01,  3.84147316e-01,  4.56317693e-01]],\n\n        [[-7.97068298e-01,  6.12852387e-02,  8.50047290e-01],\n         [ 6.76789641e-01,  1.28646910e+00,  1.68558788e+00],\n         [ 4.75949109e-01, -5.65563031e-02, -2.35017613e-01],\n         ...,\n         [-5.33778250e-01, -2.47670069e-01, -1.46129107e+00],\n         [-7.52406299e-01, -1.18505585e+00,  1.46628308e+00],\n         [ 7.14589834e-01, -5.47818184e-01,  3.66465449e-01]],\n\n        ...,\n\n        [[ 1.00554848e+00,  4.54614431e-01, -3.99012774e-01],\n         [ 1.15469441e-01, -8.45838070e-01, -1.25387537e+00],\n         [-7.83202425e-02,  9.08561528e-01, -2.55713075e-01],\n         ...,\n         [-5.08882046e-01, -9.37514380e-02,  4.90775675e-01],\n         [-9.12369013e-01,  8.23106766e-01, -1.28195024e+00],\n         [ 8.33833754e-01,  2.12064838e+00,  8.72602239e-02]],\n\n        [[ 7.84149349e-01, -5.87846398e-01, -1.02001762e+00],\n         [-3.52107525e-01,  9.64991450e-01, -8.12732399e-01],\n         [ 4.61471975e-01,  1.74809432e+00,  4.83588595e-03],\n         ...,\n         [-1.06479175e-01,  6.15484834e-01,  4.99871999e-01],\n         [ 7.04721630e-01, -8.70805681e-02,  1.41450137e-01],\n         [-1.18894768e+00,  1.03880429e+00, -2.05293268e-01]],\n\n        [[ 7.50834048e-01,  6.91297233e-01,  8.95956159e-01],\n         [ 3.43510091e-01, -5.81270829e-02,  1.87447041e-01],\n         [-5.71827628e-02, -5.02903342e-01,  1.99345648e-01],\n         ...,\n         [-8.76114547e-01,  1.28138149e+00, -3.72005165e-01],\n         [-2.86992908e-01, -7.85364628e-01,  6.88509822e-01],\n         [ 4.93599385e-01, -9.19543207e-01,  8.66167068e-01]]],\n\n\n       [[[ 3.60487938e-01,  5.15130103e-01,  8.91453028e-01],\n         [ 2.71253973e-01,  1.94009021e-01,  7.41821587e-01],\n         [ 5.75911403e-01, -5.78286350e-01, -1.85108066e+00],\n         ...,\n         [ 1.24154401e+00, -3.97874027e-01, -7.39550292e-01],\n         [ 5.40690482e-01, -5.59512854e-01, -1.60432622e-01],\n         [-8.84242475e-01, -2.34736964e-01,  8.53843808e-01]],\n\n        [[ 3.54402155e-01,  1.79750264e-01, -8.28646198e-02],\n         [-8.21084142e-01, -1.12013078e+00, -1.88540578e-01],\n         [ 4.08116698e-01, -9.01021600e-01, -3.28325272e-01],\n         ...,\n         [ 2.87746608e-01,  6.14169359e-01,  3.91043842e-01],\n         [-4.79463965e-01,  1.10373326e-01, -1.28867373e-01],\n         [-2.05202842e+00, -1.20382592e-01,  5.05256355e-02]],\n\n        [[-3.29383761e-02,  6.97030783e-01,  5.89728653e-01],\n         [ 7.42670119e-01,  2.27000102e-01,  3.19159687e-01],\n         [-1.88609615e-01,  2.47123554e-01, -7.06229329e-01],\n         ...,\n         [-5.28731585e-01,  7.95861602e-01,  3.21712464e-01],\n         [ 3.48790586e-01,  2.08768383e-01, -8.52376163e-01],\n         [ 5.27896702e-01,  4.44070935e-01, -5.56031406e-01]],\n\n        ...,\n\n        [[ 1.55565202e-01,  3.97087298e-02, -4.82175201e-01],\n         [ 1.14050972e+00,  9.89058673e-01,  1.10926521e+00],\n         [-6.85760319e-01, -2.63655871e-01,  3.23292255e-01],\n         ...,\n         [ 3.56892169e-01,  8.91218066e-01, -4.35640454e-01],\n         [ 4.80821043e-01,  2.24907890e-01, -9.09224808e-01],\n         [-1.24409229e-01,  2.43656084e-01, -2.40352422e-01]],\n\n        [[ 8.89031827e-01,  3.64694089e-01, -9.38672781e-01],\n         [-1.29043579e-01,  1.46599531e-01, -1.15678811e+00],\n         [-7.29686692e-02,  3.09086829e-01, -6.36543036e-01],\n         ...,\n         [ 1.43352985e-01, -9.94243383e-01, -7.85771370e-01],\n         [ 7.39154637e-01, -1.28661215e-01,  6.08916640e-01],\n         [ 8.18838060e-01,  1.00581098e+00,  1.87977776e-02]],\n\n        [[ 9.60628569e-01, -1.26885855e+00, -1.89745024e-01],\n         [ 1.12339862e-01,  2.57783026e-01, -4.22272027e-01],\n         [ 3.02257955e-01, -7.00127006e-01, -1.01124994e-01],\n         ...,\n         [-6.64247155e-01, -2.44195461e-01,  3.10965534e-02],\n         [-5.59360236e-02,  1.16181970e-01, -7.00290382e-01],\n         [ 3.03455681e-01,  1.24375606e-02, -7.30306864e-01]]],\n\n\n       [[[ 1.54206467e+00,  2.71061468e+00,  1.57590020e+00],\n         [ 2.29462433e+00,  2.82114768e+00,  2.54682350e+00],\n         [ 1.91108286e+00,  1.04364371e+00,  2.71173215e+00],\n         ...,\n         [ 1.47975934e+00,  1.48752403e+00,  2.30318737e+00],\n         [ 2.19808769e+00,  1.03805947e+00,  2.28261828e+00],\n         [ 1.84890640e+00,  2.47451544e+00,  1.67237258e+00]],\n\n        [[ 2.20146871e+00,  1.34816372e+00,  2.16722846e+00],\n         [ 2.70058227e+00,  1.53148198e+00,  2.61372995e+00],\n         [ 2.14474130e+00,  2.19368935e+00,  2.79712391e+00],\n         ...,\n         [ 2.92273617e+00,  1.71732068e+00,  2.47029042e+00],\n         [ 2.43954206e+00,  1.41059995e+00,  3.05686855e+00],\n         [ 2.92254400e+00,  1.22092521e+00,  3.32644820e+00]],\n\n        [[ 1.41057825e+00,  2.08266091e+00,  1.84497547e+00],\n         [ 9.67919350e-01,  1.81729496e+00,  1.76783991e+00],\n         [ 2.59798884e+00,  1.87504733e+00,  1.49743736e+00],\n         ...,\n         [ 2.24170446e+00,  1.48530090e+00,  2.04069972e+00],\n         [ 2.09156322e+00,  2.71190596e+00,  2.40870309e+00],\n         [ 3.08543777e+00,  2.20162535e+00,  8.21022451e-01]],\n\n        ...,\n\n        [[ 2.59707403e+00,  1.60233426e+00,  1.98274136e+00],\n         [ 1.40274322e+00,  2.30139542e+00,  1.21389103e+00],\n         [ 1.59782076e+00,  2.07894850e+00,  2.96279335e+00],\n         ...,\n         [ 1.64077389e+00,  1.86384428e+00,  2.52917218e+00],\n         [ 2.53450727e+00,  2.74272442e+00,  2.63613129e+00],\n         [ 1.96919155e+00,  2.85674906e+00,  2.51770163e+00]],\n\n        [[ 1.10832214e+00,  2.04879737e+00,  2.21731257e+00],\n         [ 1.23644578e+00,  1.47316885e+00,  1.21387053e+00],\n         [ 1.18805265e+00,  1.12855518e+00,  1.99095678e+00],\n         ...,\n         [ 2.22323036e+00,  6.72816098e-01,  1.39061582e+00],\n         [ 4.48143768e+00,  1.57278228e+00,  3.39012957e+00],\n         [ 1.54943907e+00,  2.86949229e+00,  2.22234082e+00]],\n\n        [[ 2.96980238e+00,  1.68304956e+00,  1.60817730e+00],\n         [ 2.43953276e+00,  1.34837031e+00,  1.75629973e+00],\n         [ 1.91725588e+00,  2.36534739e+00,  3.42253375e+00],\n         ...,\n         [ 2.41164112e+00,  2.07320404e+00,  2.44025612e+00],\n         [ 1.86192060e+00,  3.31327629e+00,  2.57408953e+00],\n         [ 2.37751007e+00,  2.19191432e+00,  2.33077121e+00]]]],\n      dtype=float32), array([[1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[-2.54425824e-01,  1.18395090e+00, -6.96354866e-01],\n         [-1.62376153e+00,  3.63050550e-01,  5.66255808e-01],\n         [ 1.53837353e-01,  8.54208171e-01, -1.00700688e+00],\n         ...,\n         [ 6.12266541e-01, -6.10987961e-01, -8.89929235e-01],\n         [-6.20896578e-01,  1.20397818e+00,  1.05489588e+00],\n         [ 2.16568038e-01, -1.35432780e+00,  8.95959854e-01]],\n\n        [[-2.42921412e-01,  4.69266325e-01, -9.28530157e-01],\n         [ 7.97545612e-02, -1.19552588e+00,  1.04035425e+00],\n         [ 1.66354418e-01, -1.85085225e+00, -1.23723304e+00],\n         ...,\n         [ 2.41211176e-01, -2.66339421e-01,  6.84741914e-01],\n         [-3.64025146e-01,  9.26730514e-01,  1.04438938e-01],\n         [ 4.13520306e-01, -8.10076073e-02, -3.89557242e-01]],\n\n        [[-4.11571532e-01,  2.24606618e-02,  1.41543734e+00],\n         [-8.01141798e-01,  7.31082797e-01, -1.14449728e+00],\n         [-1.83241940e+00,  3.20862830e-01,  6.21945977e-01],\n         ...,\n         [ 3.24791849e-01, -1.85281083e-01,  3.82822335e-01],\n         [ 1.06429927e-01,  1.92847416e-01,  1.71071872e-01],\n         [-5.31167626e-01, -1.15217373e-01, -1.06767073e-01]],\n\n        ...,\n\n        [[ 2.00317174e-01, -3.88869762e-01,  6.08524978e-01],\n         [-4.90532935e-01,  2.18011707e-01, -7.49371052e-01],\n         [ 3.07436049e-01,  1.25673056e+00, -7.09021449e-01],\n         ...,\n         [-4.99438494e-03,  8.54280770e-01, -4.74723428e-01],\n         [-7.09755123e-01,  4.52805459e-01, -9.70801860e-02],\n         [-1.29072654e+00, -6.11797333e-01,  6.99260414e-01]],\n\n        [[-9.71993983e-01,  7.60732532e-01,  2.38504678e-01],\n         [ 2.58386917e-02,  7.37570107e-01,  6.10319614e-01],\n         [-3.61342251e-01,  3.66232991e-01,  5.80299377e-01],\n         ...,\n         [ 8.96498561e-03, -1.12224305e+00,  1.21061110e+00],\n         [ 6.90399170e-01,  8.40191662e-01,  3.41099679e-01],\n         [ 6.20422959e-01,  1.00552821e+00, -3.73557091e-01]],\n\n        [[-2.81508267e-01,  1.13646269e-01,  8.87028724e-02],\n         [ 5.59742153e-01,  2.92152077e-01,  3.48684907e-01],\n         [-3.94600034e-01,  3.74033898e-02, -1.17130332e-01],\n         ...,\n         [ 1.20784080e+00,  2.79454887e-01, -6.51339710e-01],\n         [-4.41221237e-01, -1.03321505e+00, -9.87919688e-01],\n         [-4.77469593e-01, -1.41966224e-01, -1.16948009e-01]]],\n\n\n       [[[ 2.08570719e+00,  7.43613243e-01,  2.14990211e+00],\n         [ 1.39759231e+00,  3.43570173e-01,  1.37318623e+00],\n         [ 6.62125722e-02,  8.59738886e-01,  1.65294456e+00],\n         ...,\n         [ 1.02659428e+00,  2.10261226e+00,  2.82655686e-01],\n         [ 2.10154152e+00,  2.91745901e-01,  7.17543602e-01],\n         [ 8.41491580e-01,  1.43041551e+00,  6.62386715e-01]],\n\n        [[ 3.66577327e-01,  1.24197006e+00,  6.70530558e-01],\n         [ 1.60120153e+00, -1.15139984e-01,  1.26025474e+00],\n         [ 1.34638321e+00,  1.92843699e+00,  6.19662404e-01],\n         ...,\n         [ 1.81662774e+00,  9.78438258e-01,  1.99368462e-01],\n         [ 1.41219866e+00,  1.38150677e-01,  1.30030084e+00],\n         [ 1.45383525e+00,  3.73930395e-01,  2.45720387e-01]],\n\n        [[ 2.29629993e+00,  9.09303069e-01,  5.30469298e-01],\n         [ 5.28303981e-01,  8.64908934e-01,  1.94281435e+00],\n         [ 1.94758531e-02,  1.93609762e+00,  9.05688047e-01],\n         ...,\n         [ 1.66317952e+00,  9.20170009e-01,  9.31783378e-01],\n         [-4.12702151e-02,  8.21764648e-01,  1.60496664e+00],\n         [ 2.25686193e+00, -1.72581617e-02,  1.21164775e+00]],\n\n        ...,\n\n        [[ 9.62090850e-01,  1.28079391e+00,  1.49171424e+00],\n         [ 1.86300755e+00,  7.65150487e-01,  2.39676327e-01],\n         [ 1.41552162e+00,  6.71982050e-01,  2.21578908e+00],\n         ...,\n         [ 1.71259618e+00,  1.17025673e+00,  3.90405208e-01],\n         [ 9.70597565e-01,  1.16158426e+00,  5.53989708e-01],\n         [ 2.11414599e+00,  1.88748670e+00,  7.95491755e-01]],\n\n        [[ 1.40498996e+00,  1.28782022e+00,  1.32506073e+00],\n         [ 1.74082708e+00,  1.38332903e+00,  1.59431577e+00],\n         [ 5.51964521e-01,  4.14663047e-01,  1.96270621e+00],\n         ...,\n         [ 7.37250865e-01,  9.09365594e-01,  1.32703960e+00],\n         [ 2.84938186e-01,  1.57173586e+00,  6.01673603e-01],\n         [ 3.97186071e-01,  1.86573339e+00,  4.87565070e-01]],\n\n        [[ 1.55895972e+00,  1.56125641e+00,  7.19984591e-01],\n         [ 2.25204992e+00,  8.85639310e-01,  3.68957311e-01],\n         [ 8.42855871e-01,  1.04663670e+00, -2.09339070e+00],\n         ...,\n         [ 1.14805472e+00,  2.33209920e+00,  9.45347607e-01],\n         [ 6.17214978e-01,  1.63057041e+00,  1.37122405e+00],\n         [ 1.76244938e+00,  1.12924135e+00,  3.28176886e-01]]],\n\n\n       [[[ 2.92072034e+00,  3.80268884e+00,  2.54163480e+00],\n         [ 3.95384216e+00,  3.31202507e+00,  3.12890291e+00],\n         [ 3.53329253e+00,  3.33201528e+00,  2.70728135e+00],\n         ...,\n         [ 3.99027181e+00,  2.59090281e+00,  3.06165767e+00],\n         [ 2.84746075e+00,  3.19601345e+00,  3.63027072e+00],\n         [ 4.46697617e+00,  3.17009544e+00,  3.17197800e+00]],\n\n        [[ 2.13549113e+00,  3.69011545e+00,  3.72717714e+00],\n         [ 2.82801986e+00,  3.39725804e+00,  2.42516422e+00],\n         [ 3.00131989e+00,  2.87117934e+00,  1.52425885e+00],\n         ...,\n         [ 2.68257713e+00,  3.90486217e+00,  3.66804385e+00],\n         [ 2.47363186e+00,  2.56763697e+00,  2.83194423e+00],\n         [ 3.31981874e+00,  2.73909187e+00,  2.51996613e+00]],\n\n        [[ 2.38761806e+00,  3.18813276e+00,  2.18064761e+00],\n         [ 2.65246201e+00,  3.27199793e+00,  3.14141488e+00],\n         [ 3.59274006e+00,  3.49219108e+00,  3.05230665e+00],\n         ...,\n         [ 2.63487911e+00,  3.37562656e+00,  3.25456285e+00],\n         [ 2.78213072e+00,  1.88050961e+00,  2.71620798e+00],\n         [ 3.11123776e+00,  3.50389218e+00,  4.14984274e+00]],\n\n        ...,\n\n        [[ 2.28450513e+00,  4.01594400e+00,  3.70903111e+00],\n         [ 3.92679167e+00,  3.25196147e+00,  2.46452165e+00],\n         [ 3.77338886e+00,  2.82696509e+00,  3.30610394e+00],\n         ...,\n         [ 3.55542779e+00,  2.14096594e+00,  2.84791112e+00],\n         [ 2.45190287e+00,  1.96503067e+00,  3.24036527e+00],\n         [ 2.73436356e+00,  2.81190252e+00,  2.67280269e+00]],\n\n        [[ 1.66269350e+00,  2.84755778e+00,  1.97930384e+00],\n         [ 2.73028159e+00,  2.69776678e+00,  3.59020519e+00],\n         [ 2.85396075e+00,  2.65427494e+00,  3.06019092e+00],\n         ...,\n         [ 4.40349865e+00,  3.24983168e+00,  1.86301112e+00],\n         [ 3.22399449e+00,  1.65523970e+00,  4.09190035e+00],\n         [ 2.78255773e+00,  2.60182476e+00,  2.77872562e+00]],\n\n        [[ 2.66054249e+00,  3.50042677e+00,  1.62222838e+00],\n         [ 3.00848603e+00,  2.59307766e+00,  1.94911253e+00],\n         [ 3.21435833e+00,  3.14550495e+00,  2.97454357e+00],\n         ...,\n         [ 3.83915901e+00,  5.10807228e+00,  2.52646828e+00],\n         [ 1.46785998e+00,  2.14137936e+00,  3.03677869e+00],\n         [ 4.12943935e+00,  2.02559328e+00,  2.08812165e+00]]],\n\n\n       ...,\n\n\n       [[[ 1.94802433e-01,  6.34481907e-01, -8.72395813e-01],\n         [ 2.34992862e-01, -1.09903717e+00, -2.93905050e-01],\n         [ 6.87353492e-01, -2.85822660e-01,  3.48945856e-02],\n         ...,\n         [-1.85033798e+00,  2.05716205e+00, -6.94380477e-02],\n         [ 6.55952156e-01, -1.06972480e+00,  4.81024712e-01],\n         [-5.08025512e-02,  1.11947405e+00, -1.59408629e+00]],\n\n        [[-3.00985515e-01, -5.10501325e-01,  4.53367740e-01],\n         [-1.26633537e+00,  1.07152641e+00, -2.62018234e-01],\n         [-6.80625498e-01, -8.55890632e-01, -1.28458548e+00],\n         ...,\n         [-8.59540403e-01,  3.72296236e-02, -5.66734433e-01],\n         [-7.57733881e-01, -1.17195499e+00,  6.90468132e-01],\n         [-3.14076543e-01,  3.84147316e-01,  4.56317693e-01]],\n\n        [[-7.97068298e-01,  6.12852387e-02,  8.50047290e-01],\n         [ 6.76789641e-01,  1.28646910e+00,  1.68558788e+00],\n         [ 4.75949109e-01, -5.65563031e-02, -2.35017613e-01],\n         ...,\n         [-5.33778250e-01, -2.47670069e-01, -1.46129107e+00],\n         [-7.52406299e-01, -1.18505585e+00,  1.46628308e+00],\n         [ 7.14589834e-01, -5.47818184e-01,  3.66465449e-01]],\n\n        ...,\n\n        [[ 1.00554848e+00,  4.54614431e-01, -3.99012774e-01],\n         [ 1.15469441e-01, -8.45838070e-01, -1.25387537e+00],\n         [-7.83202425e-02,  9.08561528e-01, -2.55713075e-01],\n         ...,\n         [-5.08882046e-01, -9.37514380e-02,  4.90775675e-01],\n         [-9.12369013e-01,  8.23106766e-01, -1.28195024e+00],\n         [ 8.33833754e-01,  2.12064838e+00,  8.72602239e-02]],\n\n        [[ 7.84149349e-01, -5.87846398e-01, -1.02001762e+00],\n         [-3.52107525e-01,  9.64991450e-01, -8.12732399e-01],\n         [ 4.61471975e-01,  1.74809432e+00,  4.83588595e-03],\n         ...,\n         [-1.06479175e-01,  6.15484834e-01,  4.99871999e-01],\n         [ 7.04721630e-01, -8.70805681e-02,  1.41450137e-01],\n         [-1.18894768e+00,  1.03880429e+00, -2.05293268e-01]],\n\n        [[ 7.50834048e-01,  6.91297233e-01,  8.95956159e-01],\n         [ 3.43510091e-01, -5.81270829e-02,  1.87447041e-01],\n         [-5.71827628e-02, -5.02903342e-01,  1.99345648e-01],\n         ...,\n         [-8.76114547e-01,  1.28138149e+00, -3.72005165e-01],\n         [-2.86992908e-01, -7.85364628e-01,  6.88509822e-01],\n         [ 4.93599385e-01, -9.19543207e-01,  8.66167068e-01]]],\n\n\n       [[[ 3.60487938e-01,  5.15130103e-01,  8.91453028e-01],\n         [ 2.71253973e-01,  1.94009021e-01,  7.41821587e-01],\n         [ 5.75911403e-01, -5.78286350e-01, -1.85108066e+00],\n         ...,\n         [ 1.24154401e+00, -3.97874027e-01, -7.39550292e-01],\n         [ 5.40690482e-01, -5.59512854e-01, -1.60432622e-01],\n         [-8.84242475e-01, -2.34736964e-01,  8.53843808e-01]],\n\n        [[ 3.54402155e-01,  1.79750264e-01, -8.28646198e-02],\n         [-8.21084142e-01, -1.12013078e+00, -1.88540578e-01],\n         [ 4.08116698e-01, -9.01021600e-01, -3.28325272e-01],\n         ...,\n         [ 2.87746608e-01,  6.14169359e-01,  3.91043842e-01],\n         [-4.79463965e-01,  1.10373326e-01, -1.28867373e-01],\n         [-2.05202842e+00, -1.20382592e-01,  5.05256355e-02]],\n\n        [[-3.29383761e-02,  6.97030783e-01,  5.89728653e-01],\n         [ 7.42670119e-01,  2.27000102e-01,  3.19159687e-01],\n         [-1.88609615e-01,  2.47123554e-01, -7.06229329e-01],\n         ...,\n         [-5.28731585e-01,  7.95861602e-01,  3.21712464e-01],\n         [ 3.48790586e-01,  2.08768383e-01, -8.52376163e-01],\n         [ 5.27896702e-01,  4.44070935e-01, -5.56031406e-01]],\n\n        ...,\n\n        [[ 1.55565202e-01,  3.97087298e-02, -4.82175201e-01],\n         [ 1.14050972e+00,  9.89058673e-01,  1.10926521e+00],\n         [-6.85760319e-01, -2.63655871e-01,  3.23292255e-01],\n         ...,\n         [ 3.56892169e-01,  8.91218066e-01, -4.35640454e-01],\n         [ 4.80821043e-01,  2.24907890e-01, -9.09224808e-01],\n         [-1.24409229e-01,  2.43656084e-01, -2.40352422e-01]],\n\n        [[ 8.89031827e-01,  3.64694089e-01, -9.38672781e-01],\n         [-1.29043579e-01,  1.46599531e-01, -1.15678811e+00],\n         [-7.29686692e-02,  3.09086829e-01, -6.36543036e-01],\n         ...,\n         [ 1.43352985e-01, -9.94243383e-01, -7.85771370e-01],\n         [ 7.39154637e-01, -1.28661215e-01,  6.08916640e-01],\n         [ 8.18838060e-01,  1.00581098e+00,  1.87977776e-02]],\n\n        [[ 9.60628569e-01, -1.26885855e+00, -1.89745024e-01],\n         [ 1.12339862e-01,  2.57783026e-01, -4.22272027e-01],\n         [ 3.02257955e-01, -7.00127006e-01, -1.01124994e-01],\n         ...,\n         [-6.64247155e-01, -2.44195461e-01,  3.10965534e-02],\n         [-5.59360236e-02,  1.16181970e-01, -7.00290382e-01],\n         [ 3.03455681e-01,  1.24375606e-02, -7.30306864e-01]]],\n\n\n       [[[ 1.54206467e+00,  2.71061468e+00,  1.57590020e+00],\n         [ 2.29462433e+00,  2.82114768e+00,  2.54682350e+00],\n         [ 1.91108286e+00,  1.04364371e+00,  2.71173215e+00],\n         ...,\n         [ 1.47975934e+00,  1.48752403e+00,  2.30318737e+00],\n         [ 2.19808769e+00,  1.03805947e+00,  2.28261828e+00],\n         [ 1.84890640e+00,  2.47451544e+00,  1.67237258e+00]],\n\n        [[ 2.20146871e+00,  1.34816372e+00,  2.16722846e+00],\n         [ 2.70058227e+00,  1.53148198e+00,  2.61372995e+00],\n         [ 2.14474130e+00,  2.19368935e+00,  2.79712391e+00],\n         ...,\n         [ 2.92273617e+00,  1.71732068e+00,  2.47029042e+00],\n         [ 2.43954206e+00,  1.41059995e+00,  3.05686855e+00],\n         [ 2.92254400e+00,  1.22092521e+00,  3.32644820e+00]],\n\n        [[ 1.41057825e+00,  2.08266091e+00,  1.84497547e+00],\n         [ 9.67919350e-01,  1.81729496e+00,  1.76783991e+00],\n         [ 2.59798884e+00,  1.87504733e+00,  1.49743736e+00],\n         ...,\n         [ 2.24170446e+00,  1.48530090e+00,  2.04069972e+00],\n         [ 2.09156322e+00,  2.71190596e+00,  2.40870309e+00],\n         [ 3.08543777e+00,  2.20162535e+00,  8.21022451e-01]],\n\n        ...,\n\n        [[ 2.59707403e+00,  1.60233426e+00,  1.98274136e+00],\n         [ 1.40274322e+00,  2.30139542e+00,  1.21389103e+00],\n         [ 1.59782076e+00,  2.07894850e+00,  2.96279335e+00],\n         ...,\n         [ 1.64077389e+00,  1.86384428e+00,  2.52917218e+00],\n         [ 2.53450727e+00,  2.74272442e+00,  2.63613129e+00],\n         [ 1.96919155e+00,  2.85674906e+00,  2.51770163e+00]],\n\n        [[ 1.10832214e+00,  2.04879737e+00,  2.21731257e+00],\n         [ 1.23644578e+00,  1.47316885e+00,  1.21387053e+00],\n         [ 1.18805265e+00,  1.12855518e+00,  1.99095678e+00],\n         ...,\n         [ 2.22323036e+00,  6.72816098e-01,  1.39061582e+00],\n         [ 4.48143768e+00,  1.57278228e+00,  3.39012957e+00],\n         [ 1.54943907e+00,  2.86949229e+00,  2.22234082e+00]],\n\n        [[ 2.96980238e+00,  1.68304956e+00,  1.60817730e+00],\n         [ 2.43953276e+00,  1.34837031e+00,  1.75629973e+00],\n         [ 1.91725588e+00,  2.36534739e+00,  3.42253375e+00],\n         ...,\n         [ 2.41164112e+00,  2.07320404e+00,  2.44025612e+00],\n         [ 1.86192060e+00,  3.31327629e+00,  2.57408953e+00],\n         [ 2.37751007e+00,  2.19191432e+00,  2.33077121e+00]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "y": {
                                    "variable_value": "array([[1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.1790874, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295c8640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295b5870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.2647475957870483, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b21c80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x12958f5d0>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": "32"
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x12941d290>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "32",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.19866034, 1.0], [0.18469715, 1.0], [0.23331931, 1.0], [0.1985139, 1.0], [0.21999784, 1.0], [0.23869164, 1.0], [0.19550508, 1.0], [0.21082501, 1.0], [0.23997892, 1.0], [0.2091203, 1.0], [0.1636222, 1.0], [0.22984669, 1.0], [0.3026797, 1.0], [0.20440656, 1.0], [0.22189993, 1.0], [0.28314245, 1.0], [0.22622332, 1.0], [0.27299112, 1.0], [0.27649188, 1.0], [0.22566864, 1.0], [0.20488578, 1.0], [0.31700283, 1.0], [0.28026226, 1.0], [0.21636838, 1.0], [0.2069594, 1.0], [0.24314739, 1.0], [0.21044004, 1.0], [0.21813262, 1.0], [0.29820213, 1.0], [0.19113846, 1.0], [0.20463228, 1.0], [0.21807285, 1.0]]",
                                    "variable_type": "list",
                                    "variable_shape": "32"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "32"
                                },
                                "use_sequence_api": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x12958f5d0>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": "32"
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "32",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x1295d1d50>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method SequenceEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x1295d1d50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1295c2550>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x1295d1d50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 0.94789   ,  0.82289237,  0.885563  ],\n         [ 0.9195516 ,  0.7338681 ,  1.6114489 ],\n         [ 0.3942351 ,  1.9196457 ,  1.4432706 ],\n         ...,\n         [ 1.2028656 ,  0.5771831 ,  0.01018653],\n         [ 1.5855646 ,  0.98217833,  1.0027537 ],\n         [ 1.2995843 ,  1.6569958 ,  0.9063977 ]],\n\n        [[ 0.16597767,  0.4364482 ,  1.4582577 ],\n         [ 0.6743759 ,  0.86893547,  1.4943616 ],\n         [ 1.2254602 ,  1.0961372 ,  1.6708496 ],\n         ...,\n         [ 0.39997274,  2.704432  ,  0.8848668 ],\n         [-0.13473454,  1.0276502 ,  0.6964248 ],\n         [ 0.21631442, -0.55944365,  1.7881857 ]],\n\n        [[ 0.54580826,  0.05857343,  0.34032238],\n         [ 0.4623742 ,  0.81133914, -0.2754955 ],\n         [ 1.5910339 ,  2.1045218 ,  0.8869368 ],\n         ...,\n         [ 0.8712705 ,  1.374399  ,  0.8429703 ],\n         [ 1.2552464 ,  0.9368    ,  0.48451924],\n         [ 0.07198735, -0.21747121,  1.8143566 ]],\n\n        ...,\n\n        [[-0.4425487 ,  0.26923865,  0.8269383 ],\n         [ 0.47283223,  1.5157849 ,  0.94149244],\n         [ 0.45670643,  0.1357169 ,  0.86285496],\n         ...,\n         [ 1.0543472 ,  0.50338894,  1.5878671 ],\n         [ 2.0341485 ,  0.19249941,  1.2053059 ],\n         [ 0.7191503 ,  1.0538104 ,  1.6747568 ]],\n\n        [[ 1.9113206 ,  1.2416241 ,  1.6310452 ],\n         [ 0.8846474 ,  1.3446697 ,  0.88433623],\n         [ 1.3266134 ,  1.0528603 ,  1.1332018 ],\n         ...,\n         [ 0.9162694 ,  2.133606  , -0.54888856],\n         [ 0.8903552 ,  2.144648  ,  0.18727644],\n         [ 0.40473038,  1.7301608 ,  0.8269366 ]],\n\n        [[ 1.3312612 ,  1.7998588 ,  0.0249598 ],\n         [ 1.1670669 ,  0.66627747,  0.40051225],\n         [ 1.6344906 , -0.11521904,  0.9189742 ],\n         ...,\n         [ 0.0700994 ,  0.5457746 ,  0.6413423 ],\n         [ 0.03093932,  1.0449785 , -0.02935223],\n         [ 2.9124537 ,  1.5957546 ,  1.2684906 ]]],\n\n\n       [[[ 3.9243731 ,  3.5813932 ,  1.7079202 ],\n         [ 3.761217  ,  1.4826282 ,  3.4968472 ],\n         [ 2.6515412 ,  2.2911487 ,  3.4732866 ],\n         ...,\n         [ 3.041868  ,  3.8488748 ,  3.0154364 ],\n         [ 3.6324313 ,  3.4314542 ,  2.9777348 ],\n         [ 2.9636867 ,  2.2412446 ,  3.881329  ]],\n\n        [[ 3.035834  ,  3.4059658 ,  2.9433978 ],\n         [ 3.7521477 ,  3.4316022 ,  3.5005102 ],\n         [ 2.489099  ,  3.2539644 ,  2.406113  ],\n         ...,\n         [ 2.800693  ,  2.1517854 ,  1.5988809 ],\n         [ 3.5834296 ,  0.61347383,  2.8851135 ],\n         [ 2.926643  ,  3.5362904 ,  1.5746787 ]],\n\n        [[ 2.5370884 ,  3.5781581 ,  2.7329068 ],\n         [ 3.1244822 ,  2.559274  ,  2.7032235 ],\n         [ 3.5049777 ,  2.30025   ,  2.5347028 ],\n         ...,\n         [ 2.2096467 ,  3.231293  ,  3.8947845 ],\n         [ 3.800049  ,  2.356671  ,  2.5586052 ],\n         [ 2.345335  ,  2.6216664 ,  3.0847304 ]],\n\n        ...,\n\n        [[ 2.3503873 ,  3.429093  ,  1.863572  ],\n         [ 2.537064  ,  3.5827746 ,  3.644248  ],\n         [ 2.4518614 ,  3.1454313 ,  2.65784   ],\n         ...,\n         [ 2.3634882 ,  2.216715  ,  3.7816792 ],\n         [ 2.3949728 ,  3.2965524 ,  3.6905456 ],\n         [ 3.1295953 ,  2.6769314 ,  1.5320282 ]],\n\n        [[ 1.8014531 ,  2.6265497 ,  3.3863733 ],\n         [ 3.013268  ,  2.8814547 ,  3.0938485 ],\n         [ 1.8472195 ,  2.806018  ,  2.311319  ],\n         ...,\n         [ 3.0212798 ,  2.0393746 ,  2.5019944 ],\n         [ 3.9066308 ,  2.1016362 ,  2.9426765 ],\n         [ 4.49932   ,  3.501778  ,  4.062245  ]],\n\n        [[ 3.3643305 ,  3.399729  ,  2.8254054 ],\n         [ 1.6523684 ,  1.6744523 ,  3.0887363 ],\n         [ 2.0681157 ,  2.429603  ,  2.7259734 ],\n         ...,\n         [ 3.7005796 ,  3.4335806 ,  2.8366606 ],\n         [ 1.8030411 ,  2.3984978 ,  2.8913186 ],\n         [ 2.8440063 ,  4.2442102 ,  3.1332161 ]]],\n\n\n       [[[-0.63841033, -0.49269477,  0.4017425 ],\n         [-0.8503497 , -0.8227486 , -1.445117  ],\n         [-0.22641233,  0.15068449, -1.6985804 ],\n         ...,\n         [-0.62463063, -0.03421278, -0.05140875],\n         [-0.08357634,  0.6737284 ,  0.7861853 ],\n         [ 0.17092434, -0.13091083,  0.45841384]],\n\n        [[-0.10353267,  0.08743611, -0.26650935],\n         [ 1.2781434 , -0.2637944 , -0.14021988],\n         [-0.24562365,  1.1449804 ,  0.48598763],\n         ...,\n         [-1.0469426 ,  0.89601034,  0.6293248 ],\n         [-0.14279406, -0.73154306,  0.9823638 ],\n         [ 0.6124607 , -0.9102021 , -0.4166789 ]],\n\n        [[ 0.205074  , -0.16846189, -0.93727595],\n         [-0.84472626,  0.27243304, -1.3249023 ],\n         [-0.51277   ,  0.31189933, -0.57711345],\n         ...,\n         [ 0.27116925,  0.19812712,  1.5660003 ],\n         [ 0.6072348 ,  0.06617521, -1.5061042 ],\n         [-0.5849874 , -1.1315402 ,  0.41573444]],\n\n        ...,\n\n        [[-0.36802036,  0.6854426 , -0.44366947],\n         [-0.84361345, -0.96086866,  0.22867621],\n         [ 0.53084123,  0.11132199, -0.15667607],\n         ...,\n         [-0.6601598 ,  0.3456076 , -0.41533053],\n         [-0.5763092 , -1.0250348 ,  0.7249813 ],\n         [ 0.0162177 , -0.13534327, -0.48033598]],\n\n        [[-0.75527465, -0.34889293,  0.8246196 ],\n         [ 0.39882824, -0.33706763, -0.893787  ],\n         [-0.14576136,  0.79252964, -1.337149  ],\n         ...,\n         [ 0.22265303,  0.21742831, -1.1058314 ],\n         [ 0.9682066 ,  0.2673442 , -0.91576284],\n         [-0.0683639 , -1.653445  ,  0.69951636]],\n\n        [[-0.42843398,  0.37392047,  0.28354254],\n         [ 0.13370511,  0.46361336, -0.2541138 ],\n         [-0.10994595,  0.73440117, -0.9601748 ],\n         ...,\n         [-1.4885145 ,  0.45208153,  0.83239114],\n         [-0.31571266, -0.7805589 ,  0.24948049],\n         [ 0.5975909 ,  0.29485697,  0.33630618]]],\n\n\n       [[[ 1.7762449 ,  2.0813494 ,  1.3589402 ],\n         [ 1.8483459 ,  2.5412495 ,  3.0692139 ],\n         [ 1.9455837 ,  1.4457601 ,  2.1474    ],\n         ...,\n         [ 1.8630419 ,  2.703214  ,  1.6852155 ],\n         [ 1.2082986 ,  1.9588323 ,  2.4967725 ],\n         [ 2.025645  , -0.13529193,  1.5969383 ]],\n\n        [[ 2.2950544 ,  1.4834553 ,  1.9927777 ],\n         [ 2.4769359 ,  1.9246656 ,  1.9780716 ],\n         [ 0.47479683,  1.595936  ,  2.0532832 ],\n         ...,\n         [ 2.5031338 ,  1.4261194 ,  1.3723737 ],\n         [ 2.4570992 ,  2.5877635 ,  2.6784217 ],\n         [ 2.2123716 ,  2.2561195 ,  2.2192838 ]],\n\n        [[ 0.80510277,  3.276549  ,  2.131324  ],\n         [ 3.1041703 ,  2.2233498 ,  2.0265694 ],\n         [ 3.2295265 ,  2.0778499 ,  1.7938888 ],\n         ...,\n         [ 1.4205917 ,  2.498456  ,  2.4081423 ],\n         [ 3.1286502 ,  1.7105215 ,  1.3335383 ],\n         [ 1.6696098 ,  1.7014861 ,  2.1393824 ]],\n\n        ...,\n\n        [[ 2.4609241 ,  1.7458037 ,  0.7842836 ],\n         [ 2.527065  ,  2.095149  ,  2.7844949 ],\n         [ 1.6283927 ,  1.4705771 ,  0.9585334 ],\n         ...,\n         [ 2.2941506 ,  1.8391078 ,  2.0743785 ],\n         [ 2.5833683 ,  2.5141487 ,  1.2814896 ],\n         [ 0.86799777,  1.5611174 ,  2.2054317 ]],\n\n        [[ 1.7333418 ,  2.7040467 ,  3.2694578 ],\n         [ 1.8185393 ,  2.258975  ,  1.6901145 ],\n         [ 2.1748207 ,  1.79213   ,  2.5690207 ],\n         ...,\n         [ 2.4570966 ,  2.5104678 ,  2.3521175 ],\n         [ 2.14963   ,  1.5278268 ,  1.8064064 ],\n         [ 1.4419843 ,  2.9766743 ,  1.5211673 ]],\n\n        [[ 1.4130408 ,  2.6386192 ,  1.3016223 ],\n         [ 3.0639575 ,  2.4565754 ,  2.2373683 ],\n         [ 2.48461   ,  2.5588489 ,  2.5874822 ],\n         ...,\n         [ 1.7158668 ,  2.826815  ,  1.8070464 ],\n         [ 3.0047326 ,  0.9352262 ,  1.4208696 ],\n         [ 1.674078  ,  1.6307362 ,  1.8446385 ]]]], dtype=float32), array([[0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 0.94789   ,  0.82289237,  0.885563  ],\n         [ 0.9195516 ,  0.7338681 ,  1.6114489 ],\n         [ 0.3942351 ,  1.9196457 ,  1.4432706 ],\n         ...,\n         [ 1.2028656 ,  0.5771831 ,  0.01018653],\n         [ 1.5855646 ,  0.98217833,  1.0027537 ],\n         [ 1.2995843 ,  1.6569958 ,  0.9063977 ]],\n\n        [[ 0.16597767,  0.4364482 ,  1.4582577 ],\n         [ 0.6743759 ,  0.86893547,  1.4943616 ],\n         [ 1.2254602 ,  1.0961372 ,  1.6708496 ],\n         ...,\n         [ 0.39997274,  2.704432  ,  0.8848668 ],\n         [-0.13473454,  1.0276502 ,  0.6964248 ],\n         [ 0.21631442, -0.55944365,  1.7881857 ]],\n\n        [[ 0.54580826,  0.05857343,  0.34032238],\n         [ 0.4623742 ,  0.81133914, -0.2754955 ],\n         [ 1.5910339 ,  2.1045218 ,  0.8869368 ],\n         ...,\n         [ 0.8712705 ,  1.374399  ,  0.8429703 ],\n         [ 1.2552464 ,  0.9368    ,  0.48451924],\n         [ 0.07198735, -0.21747121,  1.8143566 ]],\n\n        ...,\n\n        [[-0.4425487 ,  0.26923865,  0.8269383 ],\n         [ 0.47283223,  1.5157849 ,  0.94149244],\n         [ 0.45670643,  0.1357169 ,  0.86285496],\n         ...,\n         [ 1.0543472 ,  0.50338894,  1.5878671 ],\n         [ 2.0341485 ,  0.19249941,  1.2053059 ],\n         [ 0.7191503 ,  1.0538104 ,  1.6747568 ]],\n\n        [[ 1.9113206 ,  1.2416241 ,  1.6310452 ],\n         [ 0.8846474 ,  1.3446697 ,  0.88433623],\n         [ 1.3266134 ,  1.0528603 ,  1.1332018 ],\n         ...,\n         [ 0.9162694 ,  2.133606  , -0.54888856],\n         [ 0.8903552 ,  2.144648  ,  0.18727644],\n         [ 0.40473038,  1.7301608 ,  0.8269366 ]],\n\n        [[ 1.3312612 ,  1.7998588 ,  0.0249598 ],\n         [ 1.1670669 ,  0.66627747,  0.40051225],\n         [ 1.6344906 , -0.11521904,  0.9189742 ],\n         ...,\n         [ 0.0700994 ,  0.5457746 ,  0.6413423 ],\n         [ 0.03093932,  1.0449785 , -0.02935223],\n         [ 2.9124537 ,  1.5957546 ,  1.2684906 ]]],\n\n\n       [[[ 3.9243731 ,  3.5813932 ,  1.7079202 ],\n         [ 3.761217  ,  1.4826282 ,  3.4968472 ],\n         [ 2.6515412 ,  2.2911487 ,  3.4732866 ],\n         ...,\n         [ 3.041868  ,  3.8488748 ,  3.0154364 ],\n         [ 3.6324313 ,  3.4314542 ,  2.9777348 ],\n         [ 2.9636867 ,  2.2412446 ,  3.881329  ]],\n\n        [[ 3.035834  ,  3.4059658 ,  2.9433978 ],\n         [ 3.7521477 ,  3.4316022 ,  3.5005102 ],\n         [ 2.489099  ,  3.2539644 ,  2.406113  ],\n         ...,\n         [ 2.800693  ,  2.1517854 ,  1.5988809 ],\n         [ 3.5834296 ,  0.61347383,  2.8851135 ],\n         [ 2.926643  ,  3.5362904 ,  1.5746787 ]],\n\n        [[ 2.5370884 ,  3.5781581 ,  2.7329068 ],\n         [ 3.1244822 ,  2.559274  ,  2.7032235 ],\n         [ 3.5049777 ,  2.30025   ,  2.5347028 ],\n         ...,\n         [ 2.2096467 ,  3.231293  ,  3.8947845 ],\n         [ 3.800049  ,  2.356671  ,  2.5586052 ],\n         [ 2.345335  ,  2.6216664 ,  3.0847304 ]],\n\n        ...,\n\n        [[ 2.3503873 ,  3.429093  ,  1.863572  ],\n         [ 2.537064  ,  3.5827746 ,  3.644248  ],\n         [ 2.4518614 ,  3.1454313 ,  2.65784   ],\n         ...,\n         [ 2.3634882 ,  2.216715  ,  3.7816792 ],\n         [ 2.3949728 ,  3.2965524 ,  3.6905456 ],\n         [ 3.1295953 ,  2.6769314 ,  1.5320282 ]],\n\n        [[ 1.8014531 ,  2.6265497 ,  3.3863733 ],\n         [ 3.013268  ,  2.8814547 ,  3.0938485 ],\n         [ 1.8472195 ,  2.806018  ,  2.311319  ],\n         ...,\n         [ 3.0212798 ,  2.0393746 ,  2.5019944 ],\n         [ 3.9066308 ,  2.1016362 ,  2.9426765 ],\n         [ 4.49932   ,  3.501778  ,  4.062245  ]],\n\n        [[ 3.3643305 ,  3.399729  ,  2.8254054 ],\n         [ 1.6523684 ,  1.6744523 ,  3.0887363 ],\n         [ 2.0681157 ,  2.429603  ,  2.7259734 ],\n         ...,\n         [ 3.7005796 ,  3.4335806 ,  2.8366606 ],\n         [ 1.8030411 ,  2.3984978 ,  2.8913186 ],\n         [ 2.8440063 ,  4.2442102 ,  3.1332161 ]]],\n\n\n       [[[-0.63841033, -0.49269477,  0.4017425 ],\n         [-0.8503497 , -0.8227486 , -1.445117  ],\n         [-0.22641233,  0.15068449, -1.6985804 ],\n         ...,\n         [-0.62463063, -0.03421278, -0.05140875],\n         [-0.08357634,  0.6737284 ,  0.7861853 ],\n         [ 0.17092434, -0.13091083,  0.45841384]],\n\n        [[-0.10353267,  0.08743611, -0.26650935],\n         [ 1.2781434 , -0.2637944 , -0.14021988],\n         [-0.24562365,  1.1449804 ,  0.48598763],\n         ...,\n         [-1.0469426 ,  0.89601034,  0.6293248 ],\n         [-0.14279406, -0.73154306,  0.9823638 ],\n         [ 0.6124607 , -0.9102021 , -0.4166789 ]],\n\n        [[ 0.205074  , -0.16846189, -0.93727595],\n         [-0.84472626,  0.27243304, -1.3249023 ],\n         [-0.51277   ,  0.31189933, -0.57711345],\n         ...,\n         [ 0.27116925,  0.19812712,  1.5660003 ],\n         [ 0.6072348 ,  0.06617521, -1.5061042 ],\n         [-0.5849874 , -1.1315402 ,  0.41573444]],\n\n        ...,\n\n        [[-0.36802036,  0.6854426 , -0.44366947],\n         [-0.84361345, -0.96086866,  0.22867621],\n         [ 0.53084123,  0.11132199, -0.15667607],\n         ...,\n         [-0.6601598 ,  0.3456076 , -0.41533053],\n         [-0.5763092 , -1.0250348 ,  0.7249813 ],\n         [ 0.0162177 , -0.13534327, -0.48033598]],\n\n        [[-0.75527465, -0.34889293,  0.8246196 ],\n         [ 0.39882824, -0.33706763, -0.893787  ],\n         [-0.14576136,  0.79252964, -1.337149  ],\n         ...,\n         [ 0.22265303,  0.21742831, -1.1058314 ],\n         [ 0.9682066 ,  0.2673442 , -0.91576284],\n         [-0.0683639 , -1.653445  ,  0.69951636]],\n\n        [[-0.42843398,  0.37392047,  0.28354254],\n         [ 0.13370511,  0.46361336, -0.2541138 ],\n         [-0.10994595,  0.73440117, -0.9601748 ],\n         ...,\n         [-1.4885145 ,  0.45208153,  0.83239114],\n         [-0.31571266, -0.7805589 ,  0.24948049],\n         [ 0.5975909 ,  0.29485697,  0.33630618]]],\n\n\n       [[[ 1.7762449 ,  2.0813494 ,  1.3589402 ],\n         [ 1.8483459 ,  2.5412495 ,  3.0692139 ],\n         [ 1.9455837 ,  1.4457601 ,  2.1474    ],\n         ...,\n         [ 1.8630419 ,  2.703214  ,  1.6852155 ],\n         [ 1.2082986 ,  1.9588323 ,  2.4967725 ],\n         [ 2.025645  , -0.13529193,  1.5969383 ]],\n\n        [[ 2.2950544 ,  1.4834553 ,  1.9927777 ],\n         [ 2.4769359 ,  1.9246656 ,  1.9780716 ],\n         [ 0.47479683,  1.595936  ,  2.0532832 ],\n         ...,\n         [ 2.5031338 ,  1.4261194 ,  1.3723737 ],\n         [ 2.4570992 ,  2.5877635 ,  2.6784217 ],\n         [ 2.2123716 ,  2.2561195 ,  2.2192838 ]],\n\n        [[ 0.80510277,  3.276549  ,  2.131324  ],\n         [ 3.1041703 ,  2.2233498 ,  2.0265694 ],\n         [ 3.2295265 ,  2.0778499 ,  1.7938888 ],\n         ...,\n         [ 1.4205917 ,  2.498456  ,  2.4081423 ],\n         [ 3.1286502 ,  1.7105215 ,  1.3335383 ],\n         [ 1.6696098 ,  1.7014861 ,  2.1393824 ]],\n\n        ...,\n\n        [[ 2.4609241 ,  1.7458037 ,  0.7842836 ],\n         [ 2.527065  ,  2.095149  ,  2.7844949 ],\n         [ 1.6283927 ,  1.4705771 ,  0.9585334 ],\n         ...,\n         [ 2.2941506 ,  1.8391078 ,  2.0743785 ],\n         [ 2.5833683 ,  2.5141487 ,  1.2814896 ],\n         [ 0.86799777,  1.5611174 ,  2.2054317 ]],\n\n        [[ 1.7333418 ,  2.7040467 ,  3.2694578 ],\n         [ 1.8185393 ,  2.258975  ,  1.6901145 ],\n         [ 2.1748207 ,  1.79213   ,  2.5690207 ],\n         ...,\n         [ 2.4570966 ,  2.5104678 ,  2.3521175 ],\n         [ 2.14963   ,  1.5278268 ,  1.8064064 ],\n         [ 1.4419843 ,  2.9766743 ,  1.5211673 ]],\n\n        [[ 1.4130408 ,  2.6386192 ,  1.3016223 ],\n         [ 3.0639575 ,  2.4565754 ,  2.2373683 ],\n         [ 2.48461   ,  2.5588489 ,  2.5874822 ],\n         ...,\n         [ 1.7158668 ,  2.826815  ,  1.8070464 ],\n         [ 3.0047326 ,  0.9352262 ,  1.4208696 ],\n         [ 1.674078  ,  1.6307362 ,  1.8446385 ]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "4"
                                },
                                "y": {
                                    "variable_value": "array([[0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "4"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.21807285, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x12941d290>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295a60a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(4, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1295c8780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method SequenceEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x1295d1d50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.22982309591770173, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x129b1b960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "predict_generator",
                    "function_code": "def predict_generator(model, generator,\n                      steps=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      verbose=0):\n    \"\"\"See docstring for `Model.predict_generator`.\"\"\"\n    model._make_predict_function()\n\n    steps_done = 0\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                # Compatibility with the generators\n                # used for training.\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n            else:\n                # Assumes a generator that only\n                # yields inputs (not targets and sample weights).\n                x = generator_output\n\n            outs = model.predict_on_batch(x)\n            outs = to_list(outs)\n\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]\n",
                    "decorators": [],
                    "docstring": "See docstring for `Model.predict_generator`.",
                    "start_line": 379,
                    "end_line": 472,
                    "variables": {
                        "model._make_predict_function": [
                            386
                        ],
                        "model": [
                            386,
                            447
                        ],
                        "steps_done": [
                            388,
                            456,
                            458,
                            428,
                            465,
                            469
                        ],
                        "all_outs": [
                            450,
                            452,
                            389,
                            455,
                            464,
                            466,
                            468,
                            470,
                            472
                        ],
                        "is_sequence": [
                            420,
                            390,
                            391,
                            398,
                            409
                        ],
                        "isinstance": [
                            430,
                            390
                        ],
                        "generator": [
                            421,
                            390,
                            423,
                            399,
                            411,
                            415
                        ],
                        "Sequence": [
                            390
                        ],
                        "use_multiprocessing": [
                            416,
                            412,
                            391
                        ],
                        "workers": [
                            408,
                            417,
                            391
                        ],
                        "warnings.warn": [
                            392
                        ],
                        "warnings": [
                            392
                        ],
                        "UserWarning": [
                            393
                        ],
                        "steps": [
                            426,
                            428,
                            397,
                            399
                        ],
                        "len": [
                            464,
                            433,
                            435,
                            399
                        ],
                        "ValueError": [
                            401,
                            438
                        ],
                        "enqueuer": [
                            417,
                            418,
                            461,
                            462,
                            405,
                            410,
                            414
                        ],
                        "OrderedEnqueuer": [
                            410
                        ],
                        "GeneratorEnqueuer": [
                            414
                        ],
                        "enqueuer.start": [
                            417
                        ],
                        "max_queue_size": [
                            417
                        ],
                        "output_generator": [
                            418,
                            429,
                            421,
                            423
                        ],
                        "enqueuer.get": [
                            418
                        ],
                        "iter_sequence_infinite": [
                            421
                        ],
                        "verbose": [
                            425,
                            457
                        ],
                        "progbar": [
                            458,
                            426
                        ],
                        "Progbar": [
                            426
                        ],
                        "generator_output": [
                            429,
                            430,
                            433,
                            434,
                            435,
                            436,
                            441,
                            445
                        ],
                        "next": [
                            429
                        ],
                        "tuple": [
                            430
                        ],
                        "x": [
                            434,
                            436,
                            445,
                            447
                        ],
                        "_": [
                            434,
                            436
                        ],
                        "str": [
                            441
                        ],
                        "outs": [
                            448,
                            451,
                            454,
                            447
                        ],
                        "model.predict_on_batch": [
                            447
                        ],
                        "to_list": [
                            448
                        ],
                        "out": [
                            451,
                            454,
                            455,
                            470,
                            472
                        ],
                        "all_outs.append": [
                            452
                        ],
                        "i": [
                            454,
                            455
                        ],
                        "enumerate": [
                            454
                        ],
                        "append": [
                            455
                        ],
                        "progbar.update": [
                            458
                        ],
                        "enqueuer.stop": [
                            462
                        ],
                        "np.concatenate": [
                            472,
                            468
                        ],
                        "np": [
                            472,
                            468
                        ]
                    },
                    "filtered_variables": {
                        "model._make_predict_function": [
                            386
                        ],
                        "model": [
                            386,
                            447
                        ],
                        "steps_done": [
                            388,
                            456,
                            458,
                            428,
                            465,
                            469
                        ],
                        "all_outs": [
                            450,
                            452,
                            389,
                            455,
                            464,
                            466,
                            468,
                            470,
                            472
                        ],
                        "is_sequence": [
                            420,
                            390,
                            391,
                            398,
                            409
                        ],
                        "generator": [
                            421,
                            390,
                            423,
                            399,
                            411,
                            415
                        ],
                        "Sequence": [
                            390
                        ],
                        "use_multiprocessing": [
                            416,
                            412,
                            391
                        ],
                        "workers": [
                            408,
                            417,
                            391
                        ],
                        "warnings.warn": [
                            392
                        ],
                        "warnings": [
                            392
                        ],
                        "steps": [
                            426,
                            428,
                            397,
                            399
                        ],
                        "enqueuer": [
                            417,
                            418,
                            461,
                            462,
                            405,
                            410,
                            414
                        ],
                        "OrderedEnqueuer": [
                            410
                        ],
                        "GeneratorEnqueuer": [
                            414
                        ],
                        "enqueuer.start": [
                            417
                        ],
                        "max_queue_size": [
                            417
                        ],
                        "output_generator": [
                            418,
                            429,
                            421,
                            423
                        ],
                        "enqueuer.get": [
                            418
                        ],
                        "iter_sequence_infinite": [
                            421
                        ],
                        "verbose": [
                            425,
                            457
                        ],
                        "progbar": [
                            458,
                            426
                        ],
                        "Progbar": [
                            426
                        ],
                        "generator_output": [
                            429,
                            430,
                            433,
                            434,
                            435,
                            436,
                            441,
                            445
                        ],
                        "x": [
                            434,
                            436,
                            445,
                            447
                        ],
                        "_": [
                            434,
                            436
                        ],
                        "outs": [
                            448,
                            451,
                            454,
                            447
                        ],
                        "model.predict_on_batch": [
                            447
                        ],
                        "to_list": [
                            448
                        ],
                        "out": [
                            451,
                            454,
                            455,
                            470,
                            472
                        ],
                        "all_outs.append": [
                            452
                        ],
                        "i": [
                            454,
                            455
                        ],
                        "append": [
                            455
                        ],
                        "progbar.update": [
                            458
                        ],
                        "enqueuer.stop": [
                            462
                        ],
                        "np.concatenate": [
                            472,
                            468
                        ],
                        "np": [
                            472,
                            468
                        ]
                    },
                    "diff_line_number": 390,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from .training_utils import iter_sequence_infinite",
                    "start_line": 9,
                    "end_line": 10
                }
            ],
            "inscope_functions": [
                "def fit_generator(model,\n                  generator,\n                  steps_per_epoch=None,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"See docstring for `Model.fit_generator`.\"\"\"\n    epoch = initial_epoch\n\n    do_validation = bool(validation_data)\n    model._make_train_function()\n    if do_validation:\n        model._make_test_function()\n\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a'\n                             ' generator based on the '\n                             '`keras.utils.Sequence`'\n                             ' class. Please specify `steps_per_epoch` '\n                             'or use the `keras.utils.Sequence` class.')\n\n    # python 2 has 'next', 3 has '__next__'\n    # avoid any explicit version checks\n    val_gen = (hasattr(validation_data, 'next') or\n               hasattr(validation_data, '__next__') or\n               isinstance(validation_data, Sequence))\n    if (val_gen and not isinstance(validation_data, Sequence) and\n            not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a'\n                         ' generator based on the `keras.utils.Sequence`'\n                         ' class. Please specify `validation_steps` or use'\n                         ' the `keras.utils.Sequence` class.')\n\n    # Prepare display labels.\n    out_labels = model.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n\n    # prepare callbacks\n    model.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(\n        stateful_metrics=model.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(\n            cbks.ProgbarLogger(\n                count_mode='steps',\n                stateful_metrics=model.stateful_metric_names))\n    _callbacks += (callbacks or []) + [model.history]\n    callbacks = cbks.CallbackList(_callbacks)\n\n    # it's possible to callback a different model than self:\n    if hasattr(model, 'callback_model') and model.callback_model:\n        callback_model = model.callback_model\n    else:\n        callback_model = model\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics,\n    })\n    callbacks.on_train_begin()\n\n    enqueuer = None\n    val_enqueuer = None\n\n    try:\n        if do_validation:\n            if val_gen and workers > 0:\n                # Create an Enqueuer that can be reused\n                val_data = validation_data\n                if isinstance(val_data, Sequence):\n                    val_enqueuer = OrderedEnqueuer(\n                        val_data,\n                        use_multiprocessing=use_multiprocessing)\n                    validation_steps = validation_steps or len(val_data)\n                else:\n                    val_enqueuer = GeneratorEnqueuer(\n                        val_data,\n                        use_multiprocessing=use_multiprocessing)\n                val_enqueuer.start(workers=workers,\n                                   max_queue_size=max_queue_size)\n                val_enqueuer_gen = val_enqueuer.get()\n            elif val_gen:\n                val_data = validation_data\n                if isinstance(val_data, Sequence):\n                    val_enqueuer_gen = iter_sequence_infinite(val_data)\n                    validation_steps = validation_steps or len(val_data)\n                else:\n                    val_enqueuer_gen = val_data\n            else:\n                # Prepare data for validation\n                if len(validation_data) == 2:\n                    val_x, val_y = validation_data\n                    val_sample_weight = None\n                elif len(validation_data) == 3:\n                    val_x, val_y, val_sample_weight = validation_data\n                else:\n                    raise ValueError('`validation_data` should be a tuple '\n                                     '`(val_x, val_y, val_sample_weight)` '\n                                     'or `(val_x, val_y)`. Found: ' +\n                                     str(validation_data))\n                val_x, val_y, val_sample_weights = model._standardize_user_data(\n                    val_x, val_y, val_sample_weight)\n                val_data = val_x + val_y + val_sample_weights\n                if model.uses_learning_phase and not isinstance(K.learning_phase(),\n                                                                int):\n                    val_data += [0.]\n                for cbk in callbacks:\n                    cbk.validation_data = val_data\n\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing,\n                    shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        callback_model.stop_training = False\n        # Construct epoch logs.\n        epoch_logs = {}\n        while epoch < epochs:\n            for m in model.stateful_metric_functions:\n                m.reset_states()\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n                # build batch logs\n                batch_logs = {}\n                if x is None or len(x) == 0:\n                    # Handle data tensors support when no input given\n                    # step-size = 1 for data tensors\n                    batch_size = 1\n                elif isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n\n                outs = model.train_on_batch(x, y,\n                                            sample_weight=sample_weight,\n                                            class_weight=class_weight)\n\n                outs = to_list(outs)\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n\n                batch_index += 1\n                steps_done += 1\n\n                # Epoch finished.\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = model.evaluate_generator(\n                            val_enqueuer_gen,\n                            validation_steps,\n                            workers=0)\n                    else:\n                        # No need for try/except because\n                        # data has already been validated.\n                        val_outs = model.evaluate(\n                            val_x, val_y,\n                            batch_size=batch_size,\n                            sample_weight=val_sample_weights,\n                            verbose=0)\n                    val_outs = to_list(val_outs)\n                    # Same labels assumed.\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n\n                if callback_model.stop_training:\n                    break\n\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n\n    callbacks.on_train_end()\n    return model.history",
                "def evaluate_generator(model, generator,\n                       steps=None,\n                       max_queue_size=10,\n                       workers=1,\n                       use_multiprocessing=False,\n                       verbose=0):\n    \"\"\"See docstring for `Model.evaluate_generator`.\"\"\"\n    model._make_test_function()\n\n    if hasattr(model, 'metrics'):\n        for m in model.stateful_metric_functions:\n            m.reset_states()\n        stateful_metric_indices = [\n            i for i, name in enumerate(model.metrics_names)\n            if str(name) in model.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n\n    steps_done = 0\n    outs_per_batch = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            outs = model.test_on_batch(x, y, sample_weight=sample_weight)\n            outs = to_list(outs)\n            outs_per_batch.append(outs)\n\n            if x is None or len(x) == 0:\n                # Handle data tensors support when no input given\n                # step-size = 1 for data tensors\n                batch_size = 1\n            elif isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. '\n                                 'Batches should contain '\n                                 'at least one item.')\n            steps_done += 1\n            batch_sizes.append(batch_size)\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    averages = []\n    for i in range(len(outs)):\n        if i not in stateful_metric_indices:\n            averages.append(np.average([out[i] for out in outs_per_batch],\n                                       weights=batch_sizes))\n        else:\n            averages.append(np.float64(outs_per_batch[-1][i]))\n    return unpack_singleton(averages)",
                "def predict_generator(model, generator,\n                      steps=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      verbose=0):\n    \"\"\"See docstring for `Model.predict_generator`.\"\"\"\n    model._make_predict_function()\n\n    steps_done = 0\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                # Compatibility with the generators\n                # used for training.\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n            else:\n                # Assumes a generator that only\n                # yields inputs (not targets and sample weights).\n                x = generator_output\n\n            outs = model.predict_on_batch(x)\n            outs = to_list(outs)\n\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]"
            ],
            "inscope_function_signatures": [
                "fit_generator(model, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                "evaluate_generator(model, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                "predict_generator(model, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)"
            ],
            "variables_in_file": {
                "epoch": [
                    36,
                    172,
                    175,
                    249,
                    250
                ],
                "initial_epoch": [
                    36
                ],
                "do_validation": [
                    98,
                    227,
                    38,
                    40,
                    107
                ],
                "bool": [
                    38
                ],
                "validation_data": [
                    64,
                    65,
                    132,
                    133,
                    38,
                    135,
                    136,
                    141,
                    110,
                    124,
                    62,
                    63
                ],
                "model._make_train_function": [
                    39
                ],
                "model": [
                    386,
                    263,
                    142,
                    145,
                    273,
                    275,
                    276,
                    279,
                    280,
                    39,
                    41,
                    173,
                    447,
                    73,
                    77,
                    79,
                    84,
                    85,
                    213,
                    342,
                    89,
                    90,
                    92,
                    229,
                    236
                ],
                "model._make_test_function": [
                    41,
                    273
                ],
                "is_sequence": [
                    288,
                    164,
                    420,
                    390,
                    295,
                    391,
                    43,
                    44,
                    398,
                    306,
                    51,
                    152,
                    409,
                    317,
                    287
                ],
                "isinstance": [
                    64,
                    65,
                    352,
                    390,
                    43,
                    203,
                    205,
                    430,
                    111,
                    145,
                    125,
                    350,
                    287
                ],
                "generator": [
                    320,
                    287,
                    165,
                    390,
                    167,
                    296,
                    415,
                    421,
                    43,
                    423,
                    399,
                    52,
                    308,
                    312,
                    154,
                    411,
                    318,
                    159
                ],
                "Sequence": [
                    64,
                    65,
                    390,
                    43,
                    111,
                    125,
                    287
                ],
                "use_multiprocessing": [
                    160,
                    288,
                    416,
                    391,
                    44,
                    114,
                    309,
                    119,
                    313,
                    155,
                    412
                ],
                "workers": [
                    288,
                    161,
                    417,
                    408,
                    391,
                    108,
                    44,
                    305,
                    151,
                    120,
                    314
                ],
                "warnings.warn": [
                    392,
                    289,
                    45
                ],
                "warnings": [
                    392,
                    289,
                    45
                ],
                "UserWarning": [
                    393,
                    290,
                    46
                ],
                "steps_per_epoch": [
                    96,
                    227,
                    178,
                    50,
                    52
                ],
                "len": [
                    132,
                    135,
                    199,
                    296,
                    332,
                    335,
                    399,
                    433,
                    370,
                    115,
                    52,
                    435,
                    464,
                    346,
                    187,
                    190,
                    127
                ],
                "ValueError": [
                    193,
                    67,
                    357,
                    328,
                    138,
                    298,
                    401,
                    338,
                    182,
                    54,
                    438
                ],
                "val_gen": [
                    65,
                    228,
                    108,
                    123,
                    62
                ],
                "hasattr": [
                    327,
                    275,
                    181,
                    89,
                    62,
                    63
                ],
                "validation_steps": [
                    231,
                    66,
                    115,
                    127
                ],
                "out_labels": [
                    73,
                    74,
                    243,
                    218
                ],
                "model.metrics_names": [
                    73,
                    279
                ],
                "callback_metrics": [
                    74,
                    99
                ],
                "n": [
                    74
                ],
                "model.history": [
                    85,
                    77,
                    263
                ],
                "cbks.History": [
                    77
                ],
                "cbks": [
                    86,
                    82,
                    77,
                    78
                ],
                "_callbacks": [
                    81,
                    85,
                    78,
                    86
                ],
                "cbks.BaseLogger": [
                    78
                ],
                "model.stateful_metric_names": [
                    280,
                    84,
                    79
                ],
                "verbose": [
                    97,
                    322,
                    425,
                    362,
                    457,
                    80
                ],
                "_callbacks.append": [
                    81
                ],
                "cbks.ProgbarLogger": [
                    82
                ],
                "callbacks": [
                    101,
                    262,
                    175,
                    211,
                    148,
                    85,
                    86,
                    221,
                    249,
                    93,
                    94
                ],
                "cbks.CallbackList": [
                    86
                ],
                "model.callback_model": [
                    89,
                    90
                ],
                "callback_model": [
                    169,
                    246,
                    90,
                    251,
                    92,
                    93
                ],
                "callbacks.set_model": [
                    93
                ],
                "callbacks.set_params": [
                    94
                ],
                "epochs": [
                    172,
                    95
                ],
                "callbacks.on_train_begin": [
                    101
                ],
                "enqueuer": [
                    256,
                    257,
                    405,
                    153,
                    410,
                    414,
                    158,
                    161,
                    162,
                    417,
                    418,
                    302,
                    307,
                    311,
                    314,
                    315,
                    461,
                    462,
                    103,
                    366,
                    367
                ],
                "val_enqueuer": [
                    259,
                    260,
                    104,
                    112,
                    117,
                    120,
                    122
                ],
                "val_data": [
                    129,
                    110,
                    111,
                    144,
                    113,
                    115,
                    147,
                    149,
                    118,
                    124,
                    125,
                    126,
                    127
                ],
                "OrderedEnqueuer": [
                    112,
                    153,
                    410,
                    307
                ],
                "GeneratorEnqueuer": [
                    414,
                    117,
                    158,
                    311
                ],
                "val_enqueuer.start": [
                    120
                ],
                "max_queue_size": [
                    417,
                    121,
                    314,
                    161
                ],
                "val_enqueuer_gen": [
                    129,
                    122,
                    126,
                    230
                ],
                "val_enqueuer.get": [
                    122
                ],
                "iter_sequence_infinite": [
                    318,
                    165,
                    126,
                    421
                ],
                "val_x": [
                    133,
                    136,
                    237,
                    142,
                    143,
                    144
                ],
                "val_y": [
                    133,
                    136,
                    237,
                    142,
                    143,
                    144
                ],
                "val_sample_weight": [
                    136,
                    134,
                    143
                ],
                "str": [
                    196,
                    331,
                    441,
                    141,
                    341,
                    280,
                    185
                ],
                "val_sample_weights": [
                    144,
                    142,
                    239
                ],
                "model._standardize_user_data": [
                    142
                ],
                "model.uses_learning_phase": [
                    145
                ],
                "K.learning_phase": [
                    145
                ],
                "K": [
                    145
                ],
                "int": [
                    146
                ],
                "cbk": [
                    148,
                    149
                ],
                "cbk.validation_data": [
                    149
                ],
                "shuffle": [
                    156
                ],
                "enqueuer.start": [
                    161,
                    314,
                    417
                ],
                "output_generator": [
                    320,
                    162,
                    418,
                    165,
                    326,
                    167,
                    421,
                    423,
                    429,
                    179,
                    315,
                    318
                ],
                "enqueuer.get": [
                    418,
                    162,
                    315
                ],
                "callback_model.stop_training": [
                    169,
                    251,
                    246
                ],
                "epoch_logs": [
                    249,
                    171,
                    244
                ],
                "m": [
                    277,
                    276,
                    173,
                    174
                ],
                "model.stateful_metric_functions": [
                    276,
                    173
                ],
                "m.reset_states": [
                    277,
                    174
                ],
                "callbacks.on_epoch_begin": [
                    175
                ],
                "steps_done": [
                    224,
                    227,
                    388,
                    325,
                    360,
                    456,
                    458,
                    363,
                    428,
                    176,
                    465,
                    178,
                    469,
                    284
                ],
                "batch_index": [
                    177,
                    209,
                    211,
                    221,
                    223
                ],
                "generator_output": [
                    429,
                    430,
                    433,
                    434,
                    179,
                    435,
                    181,
                    436,
                    185,
                    441,
                    187,
                    188,
                    445,
                    190,
                    191,
                    196,
                    326,
                    327,
                    331,
                    332,
                    333,
                    335,
                    336,
                    341
                ],
                "next": [
                    179,
                    429,
                    326
                ],
                "x": [
                    434,
                    436,
                    188,
                    445,
                    191,
                    447,
                    199,
                    203,
                    204,
                    205,
                    206,
                    333,
                    208,
                    336,
                    213,
                    342,
                    346,
                    350,
                    351,
                    352,
                    353,
                    355
                ],
                "y": [
                    333,
                    336,
                    213,
                    342,
                    188,
                    191
                ],
                "sample_weight": [
                    334,
                    336,
                    214,
                    342,
                    189,
                    191
                ],
                "batch_logs": [
                    198,
                    209,
                    210,
                    211,
                    219,
                    221
                ],
                "batch_size": [
                    353,
                    355,
                    356,
                    361,
                    202,
                    204,
                    206,
                    238,
                    208,
                    210,
                    349,
                    351
                ],
                "list": [
                    350,
                    203,
                    206,
                    353
                ],
                "shape": [
                    353,
                    204,
                    206,
                    351
                ],
                "dict": [
                    352,
                    205
                ],
                "x.values": [
                    353,
                    206
                ],
                "x.shape": [
                    208,
                    355
                ],
                "callbacks.on_batch_begin": [
                    211
                ],
                "outs": [
                    448,
                    451,
                    454,
                    370,
                    213,
                    342,
                    343,
                    344,
                    217,
                    218,
                    447
                ],
                "model.train_on_batch": [
                    213
                ],
                "class_weight": [
                    215
                ],
                "to_list": [
                    448,
                    217,
                    241,
                    343
                ],
                "l": [
                    218,
                    219,
                    244,
                    243
                ],
                "o": [
                    218,
                    219,
                    244,
                    243
                ],
                "zip": [
                    218,
                    243
                ],
                "callbacks.on_batch_end": [
                    221
                ],
                "val_outs": [
                    241,
                    243,
                    236,
                    229
                ],
                "model.evaluate_generator": [
                    229
                ],
                "model.evaluate": [
                    236
                ],
                "callbacks.on_epoch_end": [
                    249
                ],
                "enqueuer.stop": [
                    257,
                    462,
                    367
                ],
                "val_enqueuer.stop": [
                    260
                ],
                "callbacks.on_train_end": [
                    262
                ],
                "stateful_metric_indices": [
                    282,
                    371,
                    278
                ],
                "i": [
                    454,
                    455,
                    370,
                    371,
                    372,
                    375,
                    279
                ],
                "name": [
                    280,
                    279
                ],
                "enumerate": [
                    454,
                    279
                ],
                "outs_per_batch": [
                    344,
                    372,
                    285,
                    375
                ],
                "batch_sizes": [
                    361,
                    373,
                    286
                ],
                "steps": [
                    323,
                    325,
                    294,
                    296,
                    426,
                    428,
                    397,
                    399
                ],
                "progbar": [
                    363,
                    458,
                    426,
                    323
                ],
                "Progbar": [
                    426,
                    323
                ],
                "model.test_on_batch": [
                    342
                ],
                "outs_per_batch.append": [
                    344
                ],
                "batch_sizes.append": [
                    361
                ],
                "progbar.update": [
                    458,
                    363
                ],
                "averages": [
                    376,
                    369,
                    372,
                    375
                ],
                "range": [
                    370
                ],
                "averages.append": [
                    372,
                    375
                ],
                "np.average": [
                    372
                ],
                "np": [
                    472,
                    468,
                    372,
                    375
                ],
                "out": [
                    451,
                    454,
                    455,
                    372,
                    470,
                    472
                ],
                "np.float64": [
                    375
                ],
                "unpack_singleton": [
                    376
                ],
                "model._make_predict_function": [
                    386
                ],
                "all_outs": [
                    450,
                    452,
                    389,
                    455,
                    464,
                    466,
                    468,
                    470,
                    472
                ],
                "tuple": [
                    430
                ],
                "_": [
                    434,
                    436
                ],
                "model.predict_on_batch": [
                    447
                ],
                "all_outs.append": [
                    452
                ],
                "append": [
                    455
                ],
                "np.concatenate": [
                    472,
                    468
                ]
            },
            "filtered_variables_in_file": {
                "epoch": [
                    36,
                    172,
                    175,
                    249,
                    250
                ],
                "initial_epoch": [
                    36
                ],
                "do_validation": [
                    98,
                    227,
                    38,
                    40,
                    107
                ],
                "validation_data": [
                    64,
                    65,
                    132,
                    133,
                    38,
                    135,
                    136,
                    141,
                    110,
                    124,
                    62,
                    63
                ],
                "model._make_train_function": [
                    39
                ],
                "model": [
                    386,
                    263,
                    142,
                    145,
                    273,
                    275,
                    276,
                    279,
                    280,
                    39,
                    41,
                    173,
                    447,
                    73,
                    77,
                    79,
                    84,
                    85,
                    213,
                    342,
                    89,
                    90,
                    92,
                    229,
                    236
                ],
                "model._make_test_function": [
                    41,
                    273
                ],
                "is_sequence": [
                    288,
                    164,
                    420,
                    390,
                    295,
                    391,
                    43,
                    44,
                    398,
                    306,
                    51,
                    152,
                    409,
                    317,
                    287
                ],
                "generator": [
                    320,
                    287,
                    165,
                    390,
                    167,
                    296,
                    415,
                    421,
                    43,
                    423,
                    399,
                    52,
                    308,
                    312,
                    154,
                    411,
                    318,
                    159
                ],
                "Sequence": [
                    64,
                    65,
                    390,
                    43,
                    111,
                    125,
                    287
                ],
                "use_multiprocessing": [
                    160,
                    288,
                    416,
                    391,
                    44,
                    114,
                    309,
                    119,
                    313,
                    155,
                    412
                ],
                "workers": [
                    288,
                    161,
                    417,
                    408,
                    391,
                    108,
                    44,
                    305,
                    151,
                    120,
                    314
                ],
                "warnings.warn": [
                    392,
                    289,
                    45
                ],
                "warnings": [
                    392,
                    289,
                    45
                ],
                "steps_per_epoch": [
                    96,
                    227,
                    178,
                    50,
                    52
                ],
                "val_gen": [
                    65,
                    228,
                    108,
                    123,
                    62
                ],
                "validation_steps": [
                    231,
                    66,
                    115,
                    127
                ],
                "out_labels": [
                    73,
                    74,
                    243,
                    218
                ],
                "model.metrics_names": [
                    73,
                    279
                ],
                "callback_metrics": [
                    74,
                    99
                ],
                "n": [
                    74
                ],
                "model.history": [
                    85,
                    77,
                    263
                ],
                "cbks.History": [
                    77
                ],
                "cbks": [
                    86,
                    82,
                    77,
                    78
                ],
                "_callbacks": [
                    81,
                    85,
                    78,
                    86
                ],
                "cbks.BaseLogger": [
                    78
                ],
                "model.stateful_metric_names": [
                    280,
                    84,
                    79
                ],
                "verbose": [
                    97,
                    322,
                    425,
                    362,
                    457,
                    80
                ],
                "_callbacks.append": [
                    81
                ],
                "cbks.ProgbarLogger": [
                    82
                ],
                "callbacks": [
                    101,
                    262,
                    175,
                    211,
                    148,
                    85,
                    86,
                    221,
                    249,
                    93,
                    94
                ],
                "cbks.CallbackList": [
                    86
                ],
                "model.callback_model": [
                    89,
                    90
                ],
                "callback_model": [
                    169,
                    246,
                    90,
                    251,
                    92,
                    93
                ],
                "callbacks.set_model": [
                    93
                ],
                "callbacks.set_params": [
                    94
                ],
                "epochs": [
                    172,
                    95
                ],
                "callbacks.on_train_begin": [
                    101
                ],
                "enqueuer": [
                    256,
                    257,
                    405,
                    153,
                    410,
                    414,
                    158,
                    161,
                    162,
                    417,
                    418,
                    302,
                    307,
                    311,
                    314,
                    315,
                    461,
                    462,
                    103,
                    366,
                    367
                ],
                "val_enqueuer": [
                    259,
                    260,
                    104,
                    112,
                    117,
                    120,
                    122
                ],
                "val_data": [
                    129,
                    110,
                    111,
                    144,
                    113,
                    115,
                    147,
                    149,
                    118,
                    124,
                    125,
                    126,
                    127
                ],
                "OrderedEnqueuer": [
                    112,
                    153,
                    410,
                    307
                ],
                "GeneratorEnqueuer": [
                    414,
                    117,
                    158,
                    311
                ],
                "val_enqueuer.start": [
                    120
                ],
                "max_queue_size": [
                    417,
                    121,
                    314,
                    161
                ],
                "val_enqueuer_gen": [
                    129,
                    122,
                    126,
                    230
                ],
                "val_enqueuer.get": [
                    122
                ],
                "iter_sequence_infinite": [
                    318,
                    165,
                    126,
                    421
                ],
                "val_x": [
                    133,
                    136,
                    237,
                    142,
                    143,
                    144
                ],
                "val_y": [
                    133,
                    136,
                    237,
                    142,
                    143,
                    144
                ],
                "val_sample_weight": [
                    136,
                    134,
                    143
                ],
                "val_sample_weights": [
                    144,
                    142,
                    239
                ],
                "model._standardize_user_data": [
                    142
                ],
                "model.uses_learning_phase": [
                    145
                ],
                "K.learning_phase": [
                    145
                ],
                "K": [
                    145
                ],
                "cbk": [
                    148,
                    149
                ],
                "cbk.validation_data": [
                    149
                ],
                "shuffle": [
                    156
                ],
                "enqueuer.start": [
                    161,
                    314,
                    417
                ],
                "output_generator": [
                    320,
                    162,
                    418,
                    165,
                    326,
                    167,
                    421,
                    423,
                    429,
                    179,
                    315,
                    318
                ],
                "enqueuer.get": [
                    418,
                    162,
                    315
                ],
                "callback_model.stop_training": [
                    169,
                    251,
                    246
                ],
                "epoch_logs": [
                    249,
                    171,
                    244
                ],
                "m": [
                    277,
                    276,
                    173,
                    174
                ],
                "model.stateful_metric_functions": [
                    276,
                    173
                ],
                "m.reset_states": [
                    277,
                    174
                ],
                "callbacks.on_epoch_begin": [
                    175
                ],
                "steps_done": [
                    224,
                    227,
                    388,
                    325,
                    360,
                    456,
                    458,
                    363,
                    428,
                    176,
                    465,
                    178,
                    469,
                    284
                ],
                "batch_index": [
                    177,
                    209,
                    211,
                    221,
                    223
                ],
                "generator_output": [
                    429,
                    430,
                    433,
                    434,
                    179,
                    435,
                    181,
                    436,
                    185,
                    441,
                    187,
                    188,
                    445,
                    190,
                    191,
                    196,
                    326,
                    327,
                    331,
                    332,
                    333,
                    335,
                    336,
                    341
                ],
                "x": [
                    434,
                    436,
                    188,
                    445,
                    191,
                    447,
                    199,
                    203,
                    204,
                    205,
                    206,
                    333,
                    208,
                    336,
                    213,
                    342,
                    346,
                    350,
                    351,
                    352,
                    353,
                    355
                ],
                "y": [
                    333,
                    336,
                    213,
                    342,
                    188,
                    191
                ],
                "sample_weight": [
                    334,
                    336,
                    214,
                    342,
                    189,
                    191
                ],
                "batch_logs": [
                    198,
                    209,
                    210,
                    211,
                    219,
                    221
                ],
                "batch_size": [
                    353,
                    355,
                    356,
                    361,
                    202,
                    204,
                    206,
                    238,
                    208,
                    210,
                    349,
                    351
                ],
                "shape": [
                    353,
                    204,
                    206,
                    351
                ],
                "x.values": [
                    353,
                    206
                ],
                "x.shape": [
                    208,
                    355
                ],
                "callbacks.on_batch_begin": [
                    211
                ],
                "outs": [
                    448,
                    451,
                    454,
                    370,
                    213,
                    342,
                    343,
                    344,
                    217,
                    218,
                    447
                ],
                "model.train_on_batch": [
                    213
                ],
                "class_weight": [
                    215
                ],
                "to_list": [
                    448,
                    217,
                    241,
                    343
                ],
                "l": [
                    218,
                    219,
                    244,
                    243
                ],
                "o": [
                    218,
                    219,
                    244,
                    243
                ],
                "callbacks.on_batch_end": [
                    221
                ],
                "val_outs": [
                    241,
                    243,
                    236,
                    229
                ],
                "model.evaluate_generator": [
                    229
                ],
                "model.evaluate": [
                    236
                ],
                "callbacks.on_epoch_end": [
                    249
                ],
                "enqueuer.stop": [
                    257,
                    462,
                    367
                ],
                "val_enqueuer.stop": [
                    260
                ],
                "callbacks.on_train_end": [
                    262
                ],
                "stateful_metric_indices": [
                    282,
                    371,
                    278
                ],
                "i": [
                    454,
                    455,
                    370,
                    371,
                    372,
                    375,
                    279
                ],
                "name": [
                    280,
                    279
                ],
                "outs_per_batch": [
                    344,
                    372,
                    285,
                    375
                ],
                "batch_sizes": [
                    361,
                    373,
                    286
                ],
                "steps": [
                    323,
                    325,
                    294,
                    296,
                    426,
                    428,
                    397,
                    399
                ],
                "progbar": [
                    363,
                    458,
                    426,
                    323
                ],
                "Progbar": [
                    426,
                    323
                ],
                "model.test_on_batch": [
                    342
                ],
                "outs_per_batch.append": [
                    344
                ],
                "batch_sizes.append": [
                    361
                ],
                "progbar.update": [
                    458,
                    363
                ],
                "averages": [
                    376,
                    369,
                    372,
                    375
                ],
                "averages.append": [
                    372,
                    375
                ],
                "np.average": [
                    372
                ],
                "np": [
                    472,
                    468,
                    372,
                    375
                ],
                "out": [
                    451,
                    454,
                    455,
                    372,
                    470,
                    472
                ],
                "np.float64": [
                    375
                ],
                "unpack_singleton": [
                    376
                ],
                "model._make_predict_function": [
                    386
                ],
                "all_outs": [
                    450,
                    452,
                    389,
                    455,
                    464,
                    466,
                    468,
                    470,
                    472
                ],
                "_": [
                    434,
                    436
                ],
                "model.predict_on_batch": [
                    447
                ],
                "all_outs.append": [
                    452
                ],
                "append": [
                    455
                ],
                "np.concatenate": [
                    472,
                    468
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_11/keras/engine/training_utils.py": {
            "buggy_functions": [
                {
                    "function_name": "iter_sequence_infinite",
                    "function_code": "def iter_sequence_infinite(seq):\n    \"\"\"Iterate indefinitely over a Sequence.\n\n    # Arguments\n        seq: Sequence object\n\n    # Returns\n        Generator yielding batches.\n    \"\"\"\n    while True:\n        for item in seq:\n            yield item\n",
                    "decorators": [],
                    "docstring": "Iterate indefinitely over a Sequence.\n\n# Arguments\n    seq: Sequence object\n\n# Returns\n    Generator yielding batches.",
                    "start_line": 580,
                    "end_line": 591,
                    "variables": {
                        "item": [
                            590,
                            591
                        ],
                        "seq": [
                            590
                        ]
                    },
                    "filtered_variables": {
                        "item": [
                            590,
                            591
                        ],
                        "seq": [
                            590
                        ]
                    },
                    "diff_line_number": 591,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from .. import losses\nfrom ..utils.generic_utils import to_list",
                    "start_line": 12,
                    "end_line": 13
                }
            ],
            "inscope_functions": [
                "def standardize_single_array(x):\n    if x is None:\n        return None\n    elif K.is_tensor(x):\n        shape = K.int_shape(x)\n        if shape is None or shape[0] is None:\n            raise ValueError(\n                'When feeding symbolic tensors to a model, we expect the'\n                'tensors to have a static batch size. '\n                'Got tensor with shape: %s' % str(shape))\n        return x\n    elif x.ndim == 1:\n        x = np.expand_dims(x, 1)\n    return x",
                "def standardize_input_data(data,\n                           names,\n                           shapes=None,\n                           check_batch_axis=True,\n                           exception_prefix=''):\n    \"\"\"Normalizes inputs and targets provided by users.\n\n    Users may pass data as a list of arrays, dictionary of arrays,\n    or as a single array. We normalize this to an ordered list of\n    arrays (same order as `names`), while checking that the provided\n    arrays have shapes that match the network's expectations.\n\n    # Arguments\n        data: User-provided input data (polymorphic).\n        names: List of expected array names.\n        shapes: Optional list of expected array shapes.\n        check_batch_axis: Boolean; whether to check that\n            the batch axis of the arrays matches the expected\n            value found in `shapes`.\n        exception_prefix: String prefix used for exception formatting.\n\n    # Returns\n        List of standardized input arrays (one array per model input).\n\n    # Raises\n        ValueError: in case of improperly formatted user-provided data.\n    \"\"\"\n    if not names:\n        if data is not None and hasattr(data, '__len__') and len(data):\n            raise ValueError('Error when checking model ' +\n                             exception_prefix + ': '\n                             'expected no data, but got:', data)\n        return []\n    if data is None:\n        return [None for _ in range(len(names))]\n\n    if isinstance(data, dict):\n        try:\n            data = [\n                data[x].values\n                if data[x].__class__.__name__ == 'DataFrame' else data[x]\n                for x in names\n            ]\n        except KeyError as e:\n            raise ValueError('No data provided for \"' + e.args[0] +\n                             '\". Need data '\n                             'for each key in: ' + str(names))\n    elif isinstance(data, list):\n        if isinstance(data[0], list):\n            data = [np.asarray(d) for d in data]\n        elif len(names) == 1 and isinstance(data[0], (float, int)):\n            data = [np.asarray(data)]\n        else:\n            data = [\n                x.values if x.__class__.__name__ == 'DataFrame'\n                else x for x in data\n            ]\n    else:\n        data = data.values if data.__class__.__name__ == 'DataFrame' else data\n        data = [data]\n    data = [standardize_single_array(x) for x in data]\n\n    if len(data) != len(names):\n        if data and hasattr(data[0], 'shape'):\n            raise ValueError(\n                'Error when checking model ' + exception_prefix +\n                ': the list of Numpy arrays that you are passing to '\n                'your model is not the size the model expected. '\n                'Expected to see ' + str(len(names)) + ' array(s), '\n                'but instead got the following list of ' +\n                str(len(data)) + ' arrays: ' + str(data)[:200] + '...')\n        elif len(names) > 1:\n            raise ValueError(\n                'Error when checking model ' + exception_prefix +\n                ': you are passing a list as input to your model, '\n                'but the model expects a list of ' + str(len(names)) +\n                ' Numpy arrays instead. '\n                'The list you passed was: ' + str(data)[:200])\n        elif len(data) == 1 and not hasattr(data[0], 'shape'):\n            raise TypeError('Error when checking model ' + exception_prefix +\n                            ': data should be a Numpy array, or list/dict of '\n                            'Numpy arrays. Found: ' + str(data)[:200] + '...')\n        elif len(names) == 1:\n            data = [np.asarray(data)]\n\n    # Check shapes compatibility.\n    if shapes:\n        for i in range(len(names)):\n            if shapes[i] is not None and not K.is_tensor(data[i]):\n                data_shape = data[i].shape\n                shape = shapes[i]\n                if data[i].ndim != len(shape):\n                    raise ValueError(\n                        'Error when checking ' + exception_prefix +\n                        ': expected ' + names[i] + ' to have ' +\n                        str(len(shape)) + ' dimensions, but got array '\n                        'with shape ' + str(data_shape))\n                if not check_batch_axis:\n                    data_shape = data_shape[1:]\n                    shape = shape[1:]\n                for dim, ref_dim in zip(data_shape, shape):\n                    if ref_dim != dim and ref_dim:\n                        raise ValueError(\n                            'Error when checking ' + exception_prefix +\n                            ': expected ' + names[i] + ' to have shape ' +\n                            str(shape) + ' but got array with shape ' +\n                            str(data_shape))\n    return data",
                "def standardize_sample_or_class_weights(x_weight,\n                                        output_names,\n                                        weight_type):\n    \"\"\"Maps `sample_weight` or `class_weight` to model outputs.\n\n    # Arguments\n        x_weight: User-provided `sample_weight` or `class_weight` argument.\n        output_names: List of output names (strings) in the model.\n        weight_type: A string used purely for exception printing.\n\n    # Returns\n        A list of `sample_weight` or `class_weight` where there are exactly\n            one element per model output.\n\n    # Raises\n        ValueError: In case of invalid user-provided argument.\n    \"\"\"\n    if x_weight is None or len(x_weight) == 0:\n        return [None for _ in output_names]\n    if len(output_names) == 1:\n        if isinstance(x_weight, list) and len(x_weight) == 1:\n            return x_weight\n        if isinstance(x_weight, dict) and output_names[0] in x_weight:\n            return [x_weight[output_names[0]]]\n        else:\n            return [x_weight]\n    if isinstance(x_weight, list):\n        if len(x_weight) != len(output_names):\n            raise ValueError('Provided `' + weight_type + '` was a list of ' +\n                             str(len(x_weight)) +\n                             ' elements, but the model has ' +\n                             str(len(output_names)) + ' outputs. '\n                             'You should provide one `' + weight_type + '`'\n                             'array per model output.')\n        return x_weight\n    if isinstance(x_weight, dict):\n        x_weights = []\n        for name in output_names:\n            x_weights.append(x_weight.get(name))\n        return x_weights\n    else:\n        raise TypeError('The model has multiple outputs, so `' +\n                        weight_type + '` '\n                        'should be either a list or a dict. '\n                        'Provided `' + weight_type +\n                        '` type not understood: ' +\n                        str(x_weight))",
                "def standardize_class_weights(class_weight, output_names):\n    return standardize_sample_or_class_weights(class_weight,\n                                               output_names,\n                                               'class_weight')",
                "def standardize_sample_weights(sample_weight, output_names):\n    return standardize_sample_or_class_weights(sample_weight,\n                                               output_names,\n                                               'sample_weight')",
                "def check_array_length_consistency(inputs, targets, weights=None):\n    \"\"\"Checks if batch axes are the same for Numpy arrays.\n\n    # Arguments\n        inputs: list of Numpy arrays of inputs.\n        targets: list of Numpy arrays of targets.\n        weights: list of Numpy arrays of sample weights.\n\n    # Raises\n        ValueError: in case of incorrectly formatted data.\n    \"\"\"\n    def set_of_lengths(x):\n        # return a set with the variation between\n        # different shapes, with None => 0\n        if x is None:\n            return {0}\n        else:\n            return set([0 if y is None else int(y.shape[0]) for y in x])\n\n    set_x = set_of_lengths(inputs)\n    set_y = set_of_lengths(targets)\n    set_w = set_of_lengths(weights)\n    if len(set_x) > 1:\n        raise ValueError('All input arrays (x) should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([x.shape for x in inputs]))\n    if len(set_y) > 1:\n        raise ValueError('All target arrays (y) should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([y.shape for y in targets]))\n    if set_x and set_y and list(set_x)[0] != list(set_y)[0]:\n        raise ValueError('Input arrays should have '\n                         'the same number of samples as target arrays. '\n                         'Found ' + str(list(set_x)[0]) + ' input samples '\n                         'and ' + str(list(set_y)[0]) + ' target samples.')\n    if len(set_w) > 1:\n        raise ValueError('All sample_weight arrays should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([w.shape for w in weights]))\n    if set_y and set_w and list(set_y)[0] != list(set_w)[0]:\n        raise ValueError('Sample_weight arrays should have '\n                         'the same number of samples as target arrays. Got ' +\n                         str(list(set_y)[0]) + ' input samples and ' +\n                         str(list(set_w)[0]) + ' target samples.')",
                "def check_loss_and_target_compatibility(targets, loss_fns, output_shapes):\n    \"\"\"Does validation on the compatibility of targets and loss functions.\n\n    This helps prevent users from using loss functions incorrectly.\n\n    # Arguments\n        targets: list of Numpy arrays of targets.\n        loss_fns: list of loss functions.\n        output_shapes: list of shapes of model outputs.\n\n    # Raises\n        ValueError: if a loss function or target array\n            is incompatible with an output.\n    \"\"\"\n    key_losses = {losses.mean_squared_error,\n                  losses.binary_crossentropy,\n                  losses.categorical_crossentropy}\n    for y, loss, shape in zip(targets, loss_fns, output_shapes):\n        if y is None or loss is None:\n            continue\n        if loss is losses.categorical_crossentropy:\n            if y.shape[-1] == 1:\n                raise ValueError(\n                    'You are passing a target array of shape ' + str(y.shape) +\n                    ' while using as loss `categorical_crossentropy`. '\n                    '`categorical_crossentropy` expects '\n                    'targets to be binary matrices (1s and 0s) '\n                    'of shape (samples, classes). '\n                    'If your targets are integer classes, '\n                    'you can convert them to the expected format via:\\n'\n                    '```\\n'\n                    'from keras.utils import to_categorical\\n'\n                    'y_binary = to_categorical(y_int)\\n'\n                    '```\\n'\n                    '\\n'\n                    'Alternatively, you can use the loss function '\n                    '`sparse_categorical_crossentropy` instead, '\n                    'which does expect integer targets.')\n        if loss in key_losses:\n            for target_dim, out_dim in zip(y.shape[1:], shape[1:]):\n                if out_dim is not None and target_dim != out_dim:\n                    raise ValueError(\n                        'A target array with shape ' + str(y.shape) +\n                        ' was passed for an output of shape ' + str(shape) +\n                        ' while using as loss `' + loss.__name__ + '`. '\n                        'This loss expects '\n                        'targets to have the same shape '\n                        'as the output.')",
                "def collect_metrics(metrics, output_names):\n    \"\"\"Maps metric functions to model outputs.\n\n    # Arguments\n        metrics: a list or dict of metric functions.\n        output_names: a list of the names (strings) of model outputs.\n\n    # Returns\n        A list (one entry per model output) of lists of metric functions.\n        For instance, if the model has 2 outputs, and for the first output\n        we want to compute \"binary_accuracy\" and \"binary_crossentropy\",\n        and just \"binary_accuracy\" for the second output,\n        the list would look like:\n            `[[binary_accuracy, binary_crossentropy], [binary_accuracy]]`\n\n    # Raises\n        TypeError: if an incorrect type is passed for the `metrics` argument.\n    \"\"\"\n    if not metrics:\n        return [[] for _ in output_names]\n    if isinstance(metrics, list):\n        # we then apply all metrics to all outputs.\n        return [copy.copy(metrics) for _ in output_names]\n    elif isinstance(metrics, dict):\n        nested_metrics = []\n        for name in output_names:\n            output_metrics = metrics.get(name, [])\n            output_metrics = to_list(output_metrics)\n            nested_metrics.append(output_metrics)\n        return nested_metrics\n    else:\n        raise TypeError('Type of `metrics` argument not understood. '\n                        'Expected a list or dictionary, found: ' +\n                        str(metrics))",
                "def batch_shuffle(index_array, batch_size):\n    \"\"\"Shuffles an array in a batch-wise fashion.\n\n    Useful for shuffling HDF5 arrays\n    (where one cannot access arbitrary indices).\n\n    # Arguments\n        index_array: array of indices to be shuffled.\n        batch_size: integer.\n\n    # Returns\n        The `index_array` array, shuffled in a batch-wise fashion.\n    \"\"\"\n    batch_count = int(len(index_array) / batch_size)\n    # to reshape we need to be cleanly divisible by batch size\n    # we stash extra items and reappend them after shuffling\n    last_batch = index_array[batch_count * batch_size:]\n    index_array = index_array[:batch_count * batch_size]\n    index_array = index_array.reshape((batch_count, batch_size))\n    np.random.shuffle(index_array)\n    index_array = index_array.flatten()\n    return np.append(index_array, last_batch)",
                "def make_batches(size, batch_size):\n    \"\"\"Returns a list of batch indices (tuples of indices).\n\n    # Arguments\n        size: Integer, total size of the data to slice into batches.\n        batch_size: Integer, batch size.\n\n    # Returns\n        A list of tuples of array indices.\n    \"\"\"\n    num_batches = (size + batch_size - 1) // batch_size  # round up\n    return [(i * batch_size, min(size, (i + 1) * batch_size))\n            for i in range(num_batches)]",
                "def weighted_masked_objective(fn):\n    \"\"\"Adds support for masking and sample-weighting to an objective function.\n\n    It transforms an objective function `fn(y_true, y_pred)`\n    into a sample-weighted, cost-masked objective function\n    `fn(y_true, y_pred, weights, mask)`.\n\n    # Arguments\n        fn: The objective function to wrap,\n            with signature `fn(y_true, y_pred)`.\n\n    # Returns\n        A function with signature `fn(y_true, y_pred, weights, mask)`.\n    \"\"\"\n    if fn is None:\n        return None\n\n    def weighted(y_true, y_pred, weights, mask=None):\n        \"\"\"Wrapper function.\n\n        # Arguments\n            y_true: `y_true` argument of `fn`.\n            y_pred: `y_pred` argument of `fn`.\n            weights: Weights tensor.\n            mask: Mask tensor.\n\n        # Returns\n            Scalar tensor.\n        \"\"\"\n        # score_array has ndim >= 2\n        score_array = fn(y_true, y_pred)\n        if mask is not None:\n            # Cast the mask to floatX to avoid float64 upcasting in Theano\n            mask = K.cast(mask, K.floatx())\n            # mask should have the same shape as score_array\n            score_array *= mask\n            #  the loss per batch should be proportional\n            #  to the number of unmasked samples.\n            score_array /= K.mean(mask)\n\n        # apply sample weighting\n        if weights is not None:\n            # reduce score_array to same ndim as weight array\n            ndim = K.ndim(score_array)\n            weight_ndim = K.ndim(weights)\n            score_array = K.mean(score_array,\n                                 axis=list(range(weight_ndim, ndim)))\n            score_array *= weights\n            score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))\n        return K.mean(score_array)\n    return weighted",
                "def standardize_weights(y,\n                        sample_weight=None,\n                        class_weight=None,\n                        sample_weight_mode=None):\n    \"\"\"Performs sample weight validation and standardization.\n\n    Everything gets normalized to a single sample-wise (or timestep-wise)\n    weight array.\n\n    # Arguments\n        y: Numpy array of model targets to be weighted.\n        sample_weight: User-provided `sample_weight` argument.\n        class_weight: User-provided `class_weight` argument.\n        sample_weight_mode: One of `None` or `\"temporal\"`.\n            `\"temporal\"` indicated that we expect 2D weight data\n            that will be applied to the last 2 dimensions of\n            the targets (i.e. we are weighting timesteps, not samples).\n\n    # Returns\n        A Numpy array of target weights, one entry per sample to weight.\n\n    # Raises\n        ValueError: In case of invalid user-provided arguments.\n    \"\"\"\n    if sample_weight_mode is not None:\n        if sample_weight_mode != 'temporal':\n            raise ValueError('\"sample_weight_mode '\n                             'should be None or \"temporal\". '\n                             'Found: ' + str(sample_weight_mode))\n        if len(y.shape) < 3:\n            raise ValueError('Found a sample_weight array for '\n                             'an input with shape ' +\n                             str(y.shape) + '. '\n                             'Timestep-wise sample weighting (use of '\n                             'sample_weight_mode=\"temporal\") is restricted to '\n                             'outputs that are at least 3D, i.e. that have '\n                             'a time dimension.')\n        if sample_weight is not None and len(sample_weight.shape) != 2:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + '. '\n                             'In order to use timestep-wise sample weighting, '\n                             'you should pass a 2D sample_weight array.')\n    else:\n        if sample_weight is not None and len(sample_weight.shape) != 1:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + '. '\n                             'In order to use timestep-wise sample weights, '\n                             'you should specify '\n                             'sample_weight_mode=\"temporal\" '\n                             'in compile(). If you just mean to use '\n                             'sample-wise weights, make sure your '\n                             'sample_weight array is 1D.')\n\n    if sample_weight is not None and class_weight is not None:\n        warnings.warn('Found both `sample_weight` and `class_weight`: '\n                      '`class_weight` argument will be ignored.')\n\n    if sample_weight is not None:\n        if len(sample_weight.shape) > len(y.shape):\n            raise ValueError('Found a sample_weight with shape' +\n                             str(sample_weight.shape) + '.'\n                             'Expected sample_weight with rank '\n                             'less than or equal to ' + str(len(y.shape)))\n\n        if y.shape[:sample_weight.ndim] != sample_weight.shape:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) +\n                             ' for an input with shape ' +\n                             str(y.shape) + '. '\n                             'sample_weight cannot be broadcast.')\n        return sample_weight\n    elif isinstance(class_weight, dict):\n        if len(y.shape) > 2:\n            raise ValueError('`class_weight` not supported for '\n                             '3+ dimensional targets.')\n        if y.shape[1] > 1:\n            y_classes = np.argmax(y, axis=1)\n        elif y.shape[1] == 1:\n            y_classes = np.reshape(y, y.shape[0])\n        else:\n            y_classes = y\n\n        weights = np.asarray([class_weight[cls] for cls in y_classes\n                              if cls in class_weight])\n\n        if len(weights) != len(y_classes):\n            # subtract the sets to pick all missing classes\n            existing_classes = set(y_classes)\n            existing_class_weight = set(class_weight.keys())\n            raise ValueError('`class_weight` must contain '\n                             'all classes in the data.'\n                             ' The classes %s exist in the data but not in '\n                             '`class_weight`.'\n                             % (existing_classes - existing_class_weight))\n        return weights\n    else:\n        if sample_weight_mode is None:\n            return np.ones((y.shape[0],), dtype=K.floatx())\n        else:\n            return np.ones((y.shape[0], y.shape[1]), dtype=K.floatx())",
                "def check_num_samples(ins,\n                      batch_size=None,\n                      steps=None,\n                      steps_name='steps'):\n    \"\"\"Checks the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When `steps` is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input Numpy array. When `steps` is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None and batch_size is not None:\n        raise ValueError(\n            'If ' + steps_name + ' is set, the `batch_size` must be None.')\n\n    if not ins or any(K.is_tensor(x) for x in ins):\n        if steps is None:\n            raise ValueError(\n                'If your data is in the form of symbolic tensors, '\n                'you should specify the `' + steps_name + '` argument '\n                '(instead of the `batch_size` argument, '\n                'because symbolic tensors are expected to produce '\n                'batches of input data).')\n        return None\n\n    if hasattr(ins[0], 'shape'):\n        return int(ins[0].shape[0])\n    return None  # Edge case where ins == [static_learning_phase]",
                "def iter_sequence_infinite(seq):\n    \"\"\"Iterate indefinitely over a Sequence.\n\n    # Arguments\n        seq: Sequence object\n\n    # Returns\n        Generator yielding batches.\n    \"\"\"\n    while True:\n        for item in seq:\n            yield item",
                "def set_of_lengths(x):\n    # return a set with the variation between\n    # different shapes, with None => 0\n    if x is None:\n        return {0}\n    else:\n        return set([0 if y is None else int(y.shape[0]) for y in x])",
                "def weighted(y_true, y_pred, weights, mask=None):\n    \"\"\"Wrapper function.\n\n    # Arguments\n        y_true: `y_true` argument of `fn`.\n        y_pred: `y_pred` argument of `fn`.\n        weights: Weights tensor.\n        mask: Mask tensor.\n\n    # Returns\n        Scalar tensor.\n    \"\"\"\n    # score_array has ndim >= 2\n    score_array = fn(y_true, y_pred)\n    if mask is not None:\n        # Cast the mask to floatX to avoid float64 upcasting in Theano\n        mask = K.cast(mask, K.floatx())\n        # mask should have the same shape as score_array\n        score_array *= mask\n        #  the loss per batch should be proportional\n        #  to the number of unmasked samples.\n        score_array /= K.mean(mask)\n\n    # apply sample weighting\n    if weights is not None:\n        # reduce score_array to same ndim as weight array\n        ndim = K.ndim(score_array)\n        weight_ndim = K.ndim(weights)\n        score_array = K.mean(score_array,\n                             axis=list(range(weight_ndim, ndim)))\n        score_array *= weights\n        score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))\n    return K.mean(score_array)"
            ],
            "inscope_function_signatures": [
                "standardize_single_array(x)",
                "standardize_input_data(data, names, shapes=None, check_batch_axis=True, exception_prefix='')",
                "standardize_sample_or_class_weights(x_weight, output_names, weight_type)",
                "standardize_class_weights(class_weight, output_names)",
                "standardize_sample_weights(sample_weight, output_names)",
                "check_array_length_consistency(inputs, targets, weights=None)",
                "check_loss_and_target_compatibility(targets, loss_fns, output_shapes)",
                "collect_metrics(metrics, output_names)",
                "batch_shuffle(index_array, batch_size)",
                "make_batches(size, batch_size)",
                "weighted_masked_objective(fn)",
                "standardize_weights(y, sample_weight=None, class_weight=None, sample_weight_mode=None)",
                "check_num_samples(ins, batch_size=None, steps=None, steps_name='steps')",
                "iter_sequence_infinite(seq)",
                "set_of_lengths(x)",
                "weighted(y_true, y_pred, weights, mask=None)"
            ],
            "variables_in_file": {
                "x": [
                    228,
                    71,
                    72,
                    73,
                    92,
                    17,
                    19,
                    20,
                    220,
                    86,
                    87,
                    565,
                    217,
                    26,
                    27,
                    28,
                    29
                ],
                "K.is_tensor": [
                    120,
                    19,
                    565
                ],
                "K": [
                    417,
                    418,
                    419,
                    422,
                    423,
                    524,
                    526,
                    19,
                    20,
                    565,
                    407,
                    120,
                    412
                ],
                "shape": [
                    288,
                    121,
                    576,
                    131,
                    132,
                    292,
                    137,
                    266,
                    20,
                    21,
                    25,
                    122,
                    123,
                    127
                ],
                "K.int_shape": [
                    20
                ],
                "ValueError": [
                    516,
                    134,
                    271,
                    22,
                    290,
                    170,
                    562,
                    567,
                    61,
                    453,
                    457,
                    76,
                    465,
                    471,
                    96,
                    226,
                    230,
                    486,
                    104,
                    234,
                    492,
                    239,
                    243,
                    500,
                    124
                ],
                "str": [
                    128,
                    137,
                    138,
                    272,
                    25,
                    291,
                    292,
                    171,
                    173,
                    188,
                    455,
                    459,
                    332,
                    78,
                    466,
                    472,
                    100,
                    228,
                    102,
                    487,
                    232,
                    489,
                    107,
                    236,
                    109,
                    237,
                    493,
                    495,
                    113,
                    241,
                    245,
                    246,
                    127
                ],
                "x.ndim": [
                    27
                ],
                "np.expand_dims": [
                    28
                ],
                "np": [
                    354,
                    356,
                    524,
                    526,
                    81,
                    115,
                    83,
                    503,
                    505,
                    28,
                    509
                ],
                "names": [
                    66,
                    100,
                    103,
                    136,
                    73,
                    107,
                    78,
                    82,
                    114,
                    119,
                    126,
                    59,
                    94
                ],
                "data": [
                    139,
                    60,
                    63,
                    65,
                    68,
                    70,
                    71,
                    72,
                    79,
                    80,
                    81,
                    82,
                    83,
                    85,
                    87,
                    90,
                    91,
                    92,
                    94,
                    95,
                    102,
                    109,
                    110,
                    113,
                    115,
                    120,
                    121,
                    123
                ],
                "hasattr": [
                    60,
                    575,
                    110,
                    95
                ],
                "len": [
                    512,
                    159,
                    161,
                    162,
                    169,
                    171,
                    173,
                    60,
                    66,
                    456,
                    464,
                    82,
                    470,
                    348,
                    94,
                    225,
                    100,
                    229,
                    102,
                    103,
                    485,
                    489,
                    107,
                    110,
                    238,
                    114,
                    499,
                    119,
                    123,
                    127
                ],
                "exception_prefix": [
                    97,
                    135,
                    105,
                    111,
                    125,
                    62
                ],
                "_": [
                    160,
                    321,
                    66,
                    318
                ],
                "range": [
                    66,
                    371,
                    420,
                    119
                ],
                "isinstance": [
                    162,
                    322,
                    68,
                    164,
                    168,
                    79,
                    80,
                    177,
                    82,
                    498,
                    319
                ],
                "dict": [
                    322,
                    164,
                    68,
                    177,
                    498
                ],
                "__class__.__name__": [
                    72
                ],
                "__class__": [
                    72
                ],
                "values": [
                    71
                ],
                "KeyError": [
                    75
                ],
                "e.args": [
                    76
                ],
                "e": [
                    76
                ],
                "list": [
                    162,
                    420,
                    168,
                    233,
                    236,
                    237,
                    79,
                    80,
                    242,
                    245,
                    246,
                    319
                ],
                "np.asarray": [
                    115,
                    81,
                    83,
                    509
                ],
                "d": [
                    81
                ],
                "float": [
                    82
                ],
                "int": [
                    576,
                    82,
                    220,
                    348
                ],
                "x.__class__.__name__": [
                    86
                ],
                "x.__class__": [
                    86
                ],
                "x.values": [
                    86
                ],
                "data.__class__.__name__": [
                    90
                ],
                "data.__class__": [
                    90
                ],
                "data.values": [
                    90
                ],
                "standardize_single_array": [
                    92
                ],
                "TypeError": [
                    183,
                    330,
                    111
                ],
                "shapes": [
                    120,
                    122,
                    118
                ],
                "i": [
                    136,
                    370,
                    371,
                    119,
                    120,
                    121,
                    122,
                    123,
                    126
                ],
                "data_shape": [
                    128,
                    130,
                    132,
                    138,
                    121
                ],
                "ndim": [
                    417,
                    123,
                    420
                ],
                "check_batch_axis": [
                    129
                ],
                "dim": [
                    132,
                    133
                ],
                "ref_dim": [
                    132,
                    133
                ],
                "zip": [
                    288,
                    266,
                    132
                ],
                "x_weight": [
                    162,
                    163,
                    164,
                    165,
                    167,
                    168,
                    169,
                    171,
                    176,
                    177,
                    180,
                    188,
                    159
                ],
                "output_names": [
                    160,
                    161,
                    193,
                    321,
                    164,
                    165,
                    324,
                    199,
                    169,
                    173,
                    179,
                    318
                ],
                "weight_type": [
                    184,
                    186,
                    170,
                    174
                ],
                "x_weights": [
                    178,
                    180,
                    181
                ],
                "name": [
                    179,
                    180,
                    325,
                    324
                ],
                "x_weights.append": [
                    180
                ],
                "x_weight.get": [
                    180
                ],
                "standardize_sample_or_class_weights": [
                    192,
                    198
                ],
                "class_weight": [
                    192,
                    480,
                    515,
                    498,
                    509,
                    510
                ],
                "sample_weight": [
                    480,
                    484,
                    485,
                    198,
                    487,
                    491,
                    493,
                    464,
                    497,
                    466,
                    470,
                    472
                ],
                "set": [
                    514,
                    515,
                    220
                ],
                "y": [
                    266,
                    267,
                    524,
                    270,
                    526,
                    272,
                    288,
                    291,
                    456,
                    459,
                    220,
                    485,
                    232,
                    489,
                    491,
                    495,
                    499,
                    502,
                    503,
                    504,
                    505,
                    507
                ],
                "y.shape": [
                    288,
                    291,
                    485,
                    232,
                    456,
                    489,
                    459,
                    491,
                    524,
                    270,
                    495,
                    272,
                    526,
                    499,
                    502,
                    504,
                    505,
                    220
                ],
                "set_x": [
                    225,
                    236,
                    233,
                    222
                ],
                "set_of_lengths": [
                    224,
                    222,
                    223
                ],
                "inputs": [
                    228,
                    222
                ],
                "set_y": [
                    229,
                    233,
                    237,
                    242,
                    245,
                    223
                ],
                "targets": [
                    232,
                    266,
                    223
                ],
                "set_w": [
                    224,
                    242,
                    238,
                    246
                ],
                "weights": [
                    224,
                    512,
                    418,
                    421,
                    422,
                    521,
                    241,
                    509,
                    415
                ],
                "x.shape": [
                    228
                ],
                "w.shape": [
                    241
                ],
                "w": [
                    241
                ],
                "key_losses": [
                    287,
                    263
                ],
                "losses.mean_squared_error": [
                    263
                ],
                "losses": [
                    264,
                    265,
                    269,
                    263
                ],
                "losses.binary_crossentropy": [
                    264
                ],
                "losses.categorical_crossentropy": [
                    265,
                    269
                ],
                "loss": [
                    293,
                    266,
                    267,
                    269,
                    287
                ],
                "loss_fns": [
                    266
                ],
                "output_shapes": [
                    266
                ],
                "target_dim": [
                    288,
                    289
                ],
                "out_dim": [
                    288,
                    289
                ],
                "loss.__name__": [
                    293
                ],
                "metrics": [
                    321,
                    322,
                    325,
                    332,
                    317,
                    319
                ],
                "copy.copy": [
                    321
                ],
                "copy": [
                    321
                ],
                "nested_metrics": [
                    328,
                    323,
                    327
                ],
                "output_metrics": [
                    325,
                    326,
                    327
                ],
                "metrics.get": [
                    325
                ],
                "to_list": [
                    326
                ],
                "nested_metrics.append": [
                    327
                ],
                "batch_count": [
                    352,
                    353,
                    348,
                    351
                ],
                "index_array": [
                    352,
                    353,
                    354,
                    355,
                    356,
                    348,
                    351
                ],
                "batch_size": [
                    352,
                    353,
                    369,
                    370,
                    561,
                    348,
                    351
                ],
                "last_batch": [
                    356,
                    351
                ],
                "index_array.reshape": [
                    353
                ],
                "np.random.shuffle": [
                    354
                ],
                "np.random": [
                    354
                ],
                "index_array.flatten": [
                    355
                ],
                "np.append": [
                    356
                ],
                "num_batches": [
                    369,
                    371
                ],
                "size": [
                    369,
                    370
                ],
                "min": [
                    370
                ],
                "fn": [
                    404,
                    388
                ],
                "score_array": [
                    417,
                    419,
                    421,
                    422,
                    423,
                    404,
                    409,
                    412
                ],
                "y_true": [
                    404
                ],
                "y_pred": [
                    404
                ],
                "mask": [
                    409,
                    412,
                    405,
                    407
                ],
                "K.cast": [
                    422,
                    407
                ],
                "K.floatx": [
                    524,
                    526,
                    422,
                    407
                ],
                "K.mean": [
                    419,
                    412,
                    422,
                    423
                ],
                "K.ndim": [
                    417,
                    418
                ],
                "weight_ndim": [
                    418,
                    420
                ],
                "K.not_equal": [
                    422
                ],
                "weighted": [
                    424
                ],
                "sample_weight_mode": [
                    523,
                    451,
                    452,
                    455
                ],
                "sample_weight.shape": [
                    485,
                    487,
                    491,
                    493,
                    464,
                    466,
                    470,
                    472
                ],
                "warnings.warn": [
                    481
                ],
                "warnings": [
                    481
                ],
                "sample_weight.ndim": [
                    491
                ],
                "y_classes": [
                    512,
                    514,
                    503,
                    505,
                    507,
                    509
                ],
                "np.argmax": [
                    503
                ],
                "np.reshape": [
                    505
                ],
                "cls": [
                    509,
                    510
                ],
                "existing_classes": [
                    520,
                    514
                ],
                "existing_class_weight": [
                    520,
                    515
                ],
                "class_weight.keys": [
                    515
                ],
                "np.ones": [
                    524,
                    526
                ],
                "steps": [
                    561,
                    566
                ],
                "steps_name": [
                    569,
                    563
                ],
                "ins": [
                    576,
                    565,
                    575
                ],
                "any": [
                    565
                ],
                "item": [
                    590,
                    591
                ],
                "seq": [
                    590
                ]
            },
            "filtered_variables_in_file": {
                "x": [
                    228,
                    71,
                    72,
                    73,
                    92,
                    17,
                    19,
                    20,
                    220,
                    86,
                    87,
                    565,
                    217,
                    26,
                    27,
                    28,
                    29
                ],
                "K.is_tensor": [
                    120,
                    19,
                    565
                ],
                "K": [
                    417,
                    418,
                    419,
                    422,
                    423,
                    524,
                    526,
                    19,
                    20,
                    565,
                    407,
                    120,
                    412
                ],
                "shape": [
                    288,
                    121,
                    576,
                    131,
                    132,
                    292,
                    137,
                    266,
                    20,
                    21,
                    25,
                    122,
                    123,
                    127
                ],
                "K.int_shape": [
                    20
                ],
                "x.ndim": [
                    27
                ],
                "np.expand_dims": [
                    28
                ],
                "np": [
                    354,
                    356,
                    524,
                    526,
                    81,
                    115,
                    83,
                    503,
                    505,
                    28,
                    509
                ],
                "names": [
                    66,
                    100,
                    103,
                    136,
                    73,
                    107,
                    78,
                    82,
                    114,
                    119,
                    126,
                    59,
                    94
                ],
                "data": [
                    139,
                    60,
                    63,
                    65,
                    68,
                    70,
                    71,
                    72,
                    79,
                    80,
                    81,
                    82,
                    83,
                    85,
                    87,
                    90,
                    91,
                    92,
                    94,
                    95,
                    102,
                    109,
                    110,
                    113,
                    115,
                    120,
                    121,
                    123
                ],
                "exception_prefix": [
                    97,
                    135,
                    105,
                    111,
                    125,
                    62
                ],
                "_": [
                    160,
                    321,
                    66,
                    318
                ],
                "__class__.__name__": [
                    72
                ],
                "__class__": [
                    72
                ],
                "values": [
                    71
                ],
                "e.args": [
                    76
                ],
                "e": [
                    76
                ],
                "np.asarray": [
                    115,
                    81,
                    83,
                    509
                ],
                "d": [
                    81
                ],
                "x.__class__.__name__": [
                    86
                ],
                "x.__class__": [
                    86
                ],
                "x.values": [
                    86
                ],
                "data.__class__.__name__": [
                    90
                ],
                "data.__class__": [
                    90
                ],
                "data.values": [
                    90
                ],
                "standardize_single_array": [
                    92
                ],
                "shapes": [
                    120,
                    122,
                    118
                ],
                "i": [
                    136,
                    370,
                    371,
                    119,
                    120,
                    121,
                    122,
                    123,
                    126
                ],
                "data_shape": [
                    128,
                    130,
                    132,
                    138,
                    121
                ],
                "ndim": [
                    417,
                    123,
                    420
                ],
                "check_batch_axis": [
                    129
                ],
                "dim": [
                    132,
                    133
                ],
                "ref_dim": [
                    132,
                    133
                ],
                "x_weight": [
                    162,
                    163,
                    164,
                    165,
                    167,
                    168,
                    169,
                    171,
                    176,
                    177,
                    180,
                    188,
                    159
                ],
                "output_names": [
                    160,
                    161,
                    193,
                    321,
                    164,
                    165,
                    324,
                    199,
                    169,
                    173,
                    179,
                    318
                ],
                "weight_type": [
                    184,
                    186,
                    170,
                    174
                ],
                "x_weights": [
                    178,
                    180,
                    181
                ],
                "name": [
                    179,
                    180,
                    325,
                    324
                ],
                "x_weights.append": [
                    180
                ],
                "x_weight.get": [
                    180
                ],
                "standardize_sample_or_class_weights": [
                    192,
                    198
                ],
                "class_weight": [
                    192,
                    480,
                    515,
                    498,
                    509,
                    510
                ],
                "sample_weight": [
                    480,
                    484,
                    485,
                    198,
                    487,
                    491,
                    493,
                    464,
                    497,
                    466,
                    470,
                    472
                ],
                "y": [
                    266,
                    267,
                    524,
                    270,
                    526,
                    272,
                    288,
                    291,
                    456,
                    459,
                    220,
                    485,
                    232,
                    489,
                    491,
                    495,
                    499,
                    502,
                    503,
                    504,
                    505,
                    507
                ],
                "y.shape": [
                    288,
                    291,
                    485,
                    232,
                    456,
                    489,
                    459,
                    491,
                    524,
                    270,
                    495,
                    272,
                    526,
                    499,
                    502,
                    504,
                    505,
                    220
                ],
                "set_x": [
                    225,
                    236,
                    233,
                    222
                ],
                "set_of_lengths": [
                    224,
                    222,
                    223
                ],
                "inputs": [
                    228,
                    222
                ],
                "set_y": [
                    229,
                    233,
                    237,
                    242,
                    245,
                    223
                ],
                "targets": [
                    232,
                    266,
                    223
                ],
                "set_w": [
                    224,
                    242,
                    238,
                    246
                ],
                "weights": [
                    224,
                    512,
                    418,
                    421,
                    422,
                    521,
                    241,
                    509,
                    415
                ],
                "x.shape": [
                    228
                ],
                "w.shape": [
                    241
                ],
                "w": [
                    241
                ],
                "key_losses": [
                    287,
                    263
                ],
                "losses.mean_squared_error": [
                    263
                ],
                "losses": [
                    264,
                    265,
                    269,
                    263
                ],
                "losses.binary_crossentropy": [
                    264
                ],
                "losses.categorical_crossentropy": [
                    265,
                    269
                ],
                "loss": [
                    293,
                    266,
                    267,
                    269,
                    287
                ],
                "loss_fns": [
                    266
                ],
                "output_shapes": [
                    266
                ],
                "target_dim": [
                    288,
                    289
                ],
                "out_dim": [
                    288,
                    289
                ],
                "loss.__name__": [
                    293
                ],
                "metrics": [
                    321,
                    322,
                    325,
                    332,
                    317,
                    319
                ],
                "copy.copy": [
                    321
                ],
                "copy": [
                    321
                ],
                "nested_metrics": [
                    328,
                    323,
                    327
                ],
                "output_metrics": [
                    325,
                    326,
                    327
                ],
                "metrics.get": [
                    325
                ],
                "to_list": [
                    326
                ],
                "nested_metrics.append": [
                    327
                ],
                "batch_count": [
                    352,
                    353,
                    348,
                    351
                ],
                "index_array": [
                    352,
                    353,
                    354,
                    355,
                    356,
                    348,
                    351
                ],
                "batch_size": [
                    352,
                    353,
                    369,
                    370,
                    561,
                    348,
                    351
                ],
                "last_batch": [
                    356,
                    351
                ],
                "index_array.reshape": [
                    353
                ],
                "np.random.shuffle": [
                    354
                ],
                "np.random": [
                    354
                ],
                "index_array.flatten": [
                    355
                ],
                "np.append": [
                    356
                ],
                "num_batches": [
                    369,
                    371
                ],
                "size": [
                    369,
                    370
                ],
                "fn": [
                    404,
                    388
                ],
                "score_array": [
                    417,
                    419,
                    421,
                    422,
                    423,
                    404,
                    409,
                    412
                ],
                "y_true": [
                    404
                ],
                "y_pred": [
                    404
                ],
                "mask": [
                    409,
                    412,
                    405,
                    407
                ],
                "K.cast": [
                    422,
                    407
                ],
                "K.floatx": [
                    524,
                    526,
                    422,
                    407
                ],
                "K.mean": [
                    419,
                    412,
                    422,
                    423
                ],
                "K.ndim": [
                    417,
                    418
                ],
                "weight_ndim": [
                    418,
                    420
                ],
                "K.not_equal": [
                    422
                ],
                "weighted": [
                    424
                ],
                "sample_weight_mode": [
                    523,
                    451,
                    452,
                    455
                ],
                "sample_weight.shape": [
                    485,
                    487,
                    491,
                    493,
                    464,
                    466,
                    470,
                    472
                ],
                "warnings.warn": [
                    481
                ],
                "warnings": [
                    481
                ],
                "sample_weight.ndim": [
                    491
                ],
                "y_classes": [
                    512,
                    514,
                    503,
                    505,
                    507,
                    509
                ],
                "np.argmax": [
                    503
                ],
                "np.reshape": [
                    505
                ],
                "cls": [
                    509,
                    510
                ],
                "existing_classes": [
                    520,
                    514
                ],
                "existing_class_weight": [
                    520,
                    515
                ],
                "class_weight.keys": [
                    515
                ],
                "np.ones": [
                    524,
                    526
                ],
                "steps": [
                    561,
                    566
                ],
                "steps_name": [
                    569,
                    563
                ],
                "ins": [
                    576,
                    565,
                    575
                ],
                "item": [
                    590,
                    591
                ],
                "seq": [
                    590
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_11/keras/utils/data_utils.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "@abstractmethod",
                    "start_line": 343,
                    "end_line": 344
                }
            ],
            "inscope_functions": [
                "def _extract_archive(file_path, path='.', archive_format='auto'):\n    \"\"\"Extracts an archive if it matches tar, tar.gz, tar.bz, or zip formats.\n\n    # Arguments\n        file_path: path to the archive file\n        path: path to extract the archive file\n        archive_format: Archive format to try for extracting the file.\n            Options are 'auto', 'tar', 'zip', and None.\n            'tar' includes tar, tar.gz, and tar.bz files.\n            The default 'auto' is ['tar', 'zip'].\n            None or an empty list will return no matches found.\n\n    # Returns\n        True if a match was found and an archive extraction was completed,\n        False otherwise.\n    \"\"\"\n    if archive_format is None:\n        return False\n    if archive_format == 'auto':\n        archive_format = ['tar', 'zip']\n    if isinstance(archive_format, six.string_types):\n        archive_format = [archive_format]\n\n    for archive_type in archive_format:\n        if archive_type == 'tar':\n            open_fn = tarfile.open\n            is_match_fn = tarfile.is_tarfile\n        if archive_type == 'zip':\n            open_fn = zipfile.ZipFile\n            is_match_fn = zipfile.is_zipfile\n\n        if is_match_fn(file_path):\n            with open_fn(file_path) as archive:\n                try:\n                    archive.extractall(path)\n                except (tarfile.TarError, RuntimeError,\n                        KeyboardInterrupt):\n                    if os.path.exists(path):\n                        if os.path.isfile(path):\n                            os.remove(path)\n                        else:\n                            shutil.rmtree(path)\n                    raise\n            return True\n    return False",
                "def get_file(fname,\n             origin,\n             untar=False,\n             md5_hash=None,\n             file_hash=None,\n             cache_subdir='datasets',\n             hash_algorithm='auto',\n             extract=False,\n             archive_format='auto',\n             cache_dir=None):\n    \"\"\"Downloads a file from a URL if it not already in the cache.\n\n    By default the file at the url `origin` is downloaded to the\n    cache_dir `~/.keras`, placed in the cache_subdir `datasets`,\n    and given the filename `fname`. The final location of a file\n    `example.txt` would therefore be `~/.keras/datasets/example.txt`.\n\n    Files in tar, tar.gz, tar.bz, and zip formats can also be extracted.\n    Passing a hash will verify the file after download. The command line\n    programs `shasum` and `sha256sum` can compute the hash.\n\n    # Arguments\n        fname: Name of the file. If an absolute path `/path/to/file.txt` is\n            specified the file will be saved at that location.\n        origin: Original URL of the file.\n        untar: Deprecated in favor of 'extract'.\n            boolean, whether the file should be decompressed\n        md5_hash: Deprecated in favor of 'file_hash'.\n            md5 hash of the file for verification\n        file_hash: The expected hash string of the file after download.\n            The sha256 and md5 hash algorithms are both supported.\n        cache_subdir: Subdirectory under the Keras cache dir where the file is\n            saved. If an absolute path `/path/to/folder` is\n            specified the file will be saved at that location.\n        hash_algorithm: Select the hash algorithm to verify the file.\n            options are 'md5', 'sha256', and 'auto'.\n            The default 'auto' detects the hash algorithm in use.\n        extract: True tries extracting the file as an Archive, like tar or zip.\n        archive_format: Archive format to try for extracting the file.\n            Options are 'auto', 'tar', 'zip', and None.\n            'tar' includes tar, tar.gz, and tar.bz files.\n            The default 'auto' is ['tar', 'zip'].\n            None or an empty list will return no matches found.\n        cache_dir: Location to store cached files, when None it\n            defaults to the [Keras Directory](/faq/#where-is-the-keras-configuration-filed-stored).\n\n    # Returns\n        Path to the downloaded file\n    \"\"\"  # noqa\n    if cache_dir is None:\n        cache_dir = os.path.join(os.path.expanduser('~'), '.keras')\n    if md5_hash is not None and file_hash is None:\n        file_hash = md5_hash\n        hash_algorithm = 'md5'\n    datadir_base = os.path.expanduser(cache_dir)\n    if not os.access(datadir_base, os.W_OK):\n        datadir_base = os.path.join('/tmp', '.keras')\n    datadir = os.path.join(datadir_base, cache_subdir)\n    if not os.path.exists(datadir):\n        os.makedirs(datadir)\n\n    if untar:\n        untar_fpath = os.path.join(datadir, fname)\n        fpath = untar_fpath + '.tar.gz'\n    else:\n        fpath = os.path.join(datadir, fname)\n\n    download = False\n    if os.path.exists(fpath):\n        # File found; verify integrity if a hash was provided.\n        if file_hash is not None:\n            if not validate_file(fpath, file_hash, algorithm=hash_algorithm):\n                print('A local file was found, but it seems to be '\n                      'incomplete or outdated because the ' + hash_algorithm +\n                      ' file hash does not match the original value of ' +\n                      file_hash + ' so we will re-download the data.')\n                download = True\n    else:\n        download = True\n\n    if download:\n        print('Downloading data from', origin)\n\n        class ProgressTracker(object):\n            # Maintain progbar for the lifetime of download.\n            # This design was chosen for Python 2.7 compatibility.\n            progbar = None\n\n        def dl_progress(count, block_size, total_size):\n            if ProgressTracker.progbar is None:\n                if total_size == -1:\n                    total_size = None\n                ProgressTracker.progbar = Progbar(total_size)\n            else:\n                ProgressTracker.progbar.update(count * block_size)\n\n        error_msg = 'URL fetch failure on {}: {} -- {}'\n        try:\n            try:\n                urlretrieve(origin, fpath, dl_progress)\n            except HTTPError as e:\n                raise Exception(error_msg.format(origin, e.code, e.msg))\n            except URLError as e:\n                raise Exception(error_msg.format(origin, e.errno, e.reason))\n        except (Exception, KeyboardInterrupt):\n            if os.path.exists(fpath):\n                os.remove(fpath)\n            raise\n        ProgressTracker.progbar = None\n\n    if untar:\n        if not os.path.exists(untar_fpath):\n            _extract_archive(fpath, datadir, archive_format='tar')\n        return untar_fpath\n\n    if extract:\n        _extract_archive(fpath, datadir, archive_format)\n\n    return fpath",
                "def _hash_file(fpath, algorithm='sha256', chunk_size=65535):\n    \"\"\"Calculates a file sha256 or md5 hash.\n\n    # Example\n\n    ```python\n        >>> from keras.data_utils import _hash_file\n        >>> _hash_file('/path/to/file.zip')\n        'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n    ```\n\n    # Arguments\n        fpath: path to the file being validated\n        algorithm: hash algorithm, one of 'auto', 'sha256', or 'md5'.\n            The default 'auto' detects the hash algorithm in use.\n        chunk_size: Bytes to read at a time, important for large files.\n\n    # Returns\n        The file hash\n    \"\"\"\n    if (algorithm == 'sha256') or (algorithm == 'auto' and len(hash) == 64):\n        hasher = hashlib.sha256()\n    else:\n        hasher = hashlib.md5()\n\n    with open(fpath, 'rb') as fpath_file:\n        for chunk in iter(lambda: fpath_file.read(chunk_size), b''):\n            hasher.update(chunk)\n\n    return hasher.hexdigest()",
                "def validate_file(fpath, file_hash, algorithm='auto', chunk_size=65535):\n    \"\"\"Validates a file against a sha256 or md5 hash.\n\n    # Arguments\n        fpath: path to the file being validated\n        file_hash:  The expected hash string of the file.\n            The sha256 and md5 hash algorithms are both supported.\n        algorithm: Hash algorithm, one of 'auto', 'sha256', or 'md5'.\n            The default 'auto' detects the hash algorithm in use.\n        chunk_size: Bytes to read at a time, important for large files.\n\n    # Returns\n        Whether the file is valid\n    \"\"\"\n    if ((algorithm == 'sha256') or\n            (algorithm == 'auto' and len(file_hash) == 64)):\n        hasher = 'sha256'\n    else:\n        hasher = 'md5'\n\n    if str(_hash_file(fpath, hasher, chunk_size)) == str(file_hash):\n        return True\n    else:\n        return False",
                "def init_pool(seqs):\n    global _SHARED_SEQUENCES\n    _SHARED_SEQUENCES = seqs",
                "def get_index(uid, i):\n    \"\"\"Get the value from the Sequence `uid` at index `i`.\n\n    To allow multiple Sequences to be used at the same time, we use `uid` to\n    get a specific one. A single Sequence would cause the validation to\n    overwrite the training Sequence.\n\n    # Arguments\n        uid: int, Sequence identifier\n        i: index\n\n    # Returns\n        The value at index `i`.\n    \"\"\"\n    return _SHARED_SEQUENCES[uid][i]",
                "def init_pool_generator(gens, random_seed=None):\n    global _SHARED_SEQUENCES\n    _SHARED_SEQUENCES = gens\n\n    if random_seed is not None:\n        ident = mp.current_process().ident\n        np.random.seed(random_seed + ident)",
                "def next_sample(uid):\n    \"\"\"Get the next value from the generator `uid`.\n\n    To allow multiple generators to be used at the same time, we use `uid` to\n    get a specific one. A single generator would cause the validation to\n    overwrite the training generator.\n\n    # Arguments\n        uid: int, generator identifier\n\n    # Returns\n        The next value of generator `uid`.\n    \"\"\"\n    return six.next(_SHARED_SEQUENCES[uid])",
                "def urlretrieve(url, filename, reporthook=None, data=None):\n    \"\"\"Replacement for `urlretrive` for Python 2.\n\n    Under Python 2, `urlretrieve` relies on `FancyURLopener` from legacy\n    `urllib` module, known to have issues with proxy management.\n\n    # Arguments\n        url: url to retrieve.\n        filename: where to store the retrieved data locally.\n        reporthook: a hook function that will be called once\n            on establishment of the network connection and once\n            after each block read thereafter.\n            The hook will be passed three arguments;\n            a count of blocks transferred so far,\n            a block size in bytes, and the total size of the file.\n        data: `data` argument passed to `urlopen`.\n    \"\"\"\n\n    def chunk_read(response, chunk_size=8192, reporthook=None):\n        content_type = response.info().get('Content-Length')\n        total_size = -1\n        if content_type is not None:\n            total_size = int(content_type.strip())\n        count = 0\n        while True:\n            chunk = response.read(chunk_size)\n            count += 1\n            if reporthook is not None:\n                reporthook(count, chunk_size, total_size)\n            if chunk:\n                yield chunk\n            else:\n                break\n\n    with closing(urlopen(url, data)) as response, open(filename, 'wb') as fd:\n            for chunk in chunk_read(response, reporthook=reporthook):\n                fd.write(chunk)",
                "@abstractmethod\ndef __getitem__(self, index):\n    \"\"\"Gets batch at position `index`.\n\n    # Arguments\n        index: position of the batch in the Sequence.\n\n    # Returns\n        A batch\n    \"\"\"\n    raise NotImplementedError",
                "@abstractmethod\ndef __len__(self):\n    \"\"\"Number of batch in the Sequence.\n\n    # Returns\n        The number of batches in the Sequence.\n    \"\"\"\n    raise NotImplementedError",
                "def on_epoch_end(self):\n    \"\"\"Method called at the end of every epoch.\n    \"\"\"\n    pass",
                "def __iter__(self):\n    \"\"\"Create a generator that iterate over the Sequence.\"\"\"\n    for item in (self[i] for i in range(len(self))):\n        yield item",
                "def __init__(self, sequence,\n             use_multiprocessing=False):\n    self.sequence = sequence\n    self.use_multiprocessing = use_multiprocessing\n\n    global _SEQUENCE_COUNTER\n    if _SEQUENCE_COUNTER is None:\n        try:\n            _SEQUENCE_COUNTER = mp.Value('i', 0)\n        except OSError:\n            # In this case the OS does not allow us to use\n            # multiprocessing. We resort to an int\n            # for enqueuer indexing.\n            _SEQUENCE_COUNTER = 0\n\n    if isinstance(_SEQUENCE_COUNTER, int):\n        self.uid = _SEQUENCE_COUNTER\n        _SEQUENCE_COUNTER += 1\n    else:\n        # Doing Multiprocessing.Value += x is not process-safe.\n        with _SEQUENCE_COUNTER.get_lock():\n            self.uid = _SEQUENCE_COUNTER.value\n            _SEQUENCE_COUNTER.value += 1\n\n    self.workers = 0\n    self.executor_fn = None\n    self.queue = None\n    self.run_thread = None\n    self.stop_signal = None",
                "def is_running(self):\n    return self.stop_signal is not None and not self.stop_signal.is_set()",
                "def start(self, workers=1, max_queue_size=10):\n    \"\"\"Start the handler's workers.\n\n    # Arguments\n        workers: number of worker threads\n        max_queue_size: queue size\n            (when full, workers could block on `put()`)\n    \"\"\"\n    if self.use_multiprocessing:\n        self.executor_fn = self._get_executor_init(workers)\n    else:\n        # We do not need the init since it's threads.\n        self.executor_fn = lambda _: ThreadPool(workers)\n    self.workers = workers\n    self.queue = queue.Queue(max_queue_size)\n    self.stop_signal = threading.Event()\n    self.run_thread = threading.Thread(target=self._run)\n    self.run_thread.daemon = True\n    self.run_thread.start()",
                "def _send_sequence(self):\n    \"\"\"Send current Iterable to all workers.\"\"\"\n    # For new processes that may spawn\n    _SHARED_SEQUENCES[self.uid] = self.sequence",
                "def stop(self, timeout=None):\n    \"\"\"Stops running threads and wait for them to exit, if necessary.\n\n    Should be called by the same thread which called `start()`.\n\n    # Arguments\n        timeout: maximum time to wait on `thread.join()`\n    \"\"\"\n    self.stop_signal.set()\n    with self.queue.mutex:\n        self.queue.queue.clear()\n        self.queue.unfinished_tasks = 0\n        self.queue.not_full.notify()\n    self.run_thread.join(timeout)\n    _SHARED_SEQUENCES[self.uid] = None",
                "@abstractmethod\ndef _run(self):\n    \"\"\"Submits request to the executor and queue the `Future` objects.\"\"\"\n    raise NotImplementedError",
                "@abstractmethod\ndef _get_executor_init(self, workers):\n    \"\"\"Get the Pool initializer for multiprocessing.\n\n    # Returns\n        Function, a Function to initialize the pool\n    \"\"\"\n    raise NotImplementedError",
                "@abstractmethod\ndef get(self):\n    \"\"\"Creates a generator to extract data from the queue.\n\n    Skip the data if it is `None`.\n\n    # Returns\n        Generator yielding tuples `(inputs, targets)`\n            or `(inputs, targets, sample_weights)`.\n    \"\"\"\n    raise NotImplementedError",
                "def __init__(self, sequence, use_multiprocessing=False, shuffle=False):\n    super(OrderedEnqueuer, self).__init__(sequence, use_multiprocessing)\n    self.shuffle = shuffle",
                "def _get_executor_init(self, workers):\n    \"\"\"Get the Pool initializer for multiprocessing.\n\n    # Returns\n        Function, a Function to initialize the pool\n    \"\"\"\n    return lambda seqs: mp.Pool(workers,\n                                initializer=init_pool,\n                                initargs=(seqs,))",
                "def _wait_queue(self):\n    \"\"\"Wait for the queue to be empty.\"\"\"\n    while True:\n        time.sleep(0.1)\n        if self.queue.unfinished_tasks == 0 or self.stop_signal.is_set():\n            return",
                "def _run(self):\n    \"\"\"Submits request to the executor and queue the `Future` objects.\"\"\"\n    sequence = list(range(len(self.sequence)))\n    self._send_sequence()  # Share the initial sequence\n    while True:\n        if self.shuffle:\n            random.shuffle(sequence)\n\n        with closing(self.executor_fn(_SHARED_SEQUENCES)) as executor:\n            for i in sequence:\n                if self.stop_signal.is_set():\n                    return\n                self.queue.put(\n                    executor.apply_async(get_index, (self.uid, i)), block=True)\n\n            # Done with the current epoch, waiting for the final batches\n            self._wait_queue()\n\n            if self.stop_signal.is_set():\n                # We're done\n                return\n\n        # Call the internal on epoch end.\n        self.sequence.on_epoch_end()\n        self._send_sequence()  # Update the pool",
                "def get(self):\n    \"\"\"Creates a generator to extract data from the queue.\n\n    Skip the data if it is `None`.\n\n    # Yields\n        The next element in the queue, i.e. a tuple\n        `(inputs, targets)` or\n        `(inputs, targets, sample_weights)`.\n    \"\"\"\n    try:\n        while self.is_running():\n            inputs = self.queue.get(block=True).get()\n            self.queue.task_done()\n            if inputs is not None:\n                yield inputs\n    except Exception:\n        self.stop()\n        six.reraise(*sys.exc_info())",
                "def __init__(self, sequence, use_multiprocessing=False, wait_time=None,\n             random_seed=None):\n    super(GeneratorEnqueuer, self).__init__(sequence, use_multiprocessing)\n    self.random_seed = random_seed\n    if wait_time is not None:\n        warnings.warn('`wait_time` is not used anymore.',\n                      DeprecationWarning)",
                "def _get_executor_init(self, workers):\n    \"\"\"Get the Pool initializer for multiprocessing.\n\n    # Returns\n        Function, a Function to initialize the pool\n    \"\"\"\n    return lambda seqs: mp.Pool(workers,\n                                initializer=init_pool_generator,\n                                initargs=(seqs, self.random_seed))",
                "def _run(self):\n    \"\"\"Submits request to the executor and queue the `Future` objects.\"\"\"\n    self._send_sequence()  # Share the initial generator\n    with closing(self.executor_fn(_SHARED_SEQUENCES)) as executor:\n        while True:\n            if self.stop_signal.is_set():\n                return\n            self.queue.put(\n                executor.apply_async(next_sample, (self.uid,)), block=True)",
                "def get(self):\n    \"\"\"Creates a generator to extract data from the queue.\n\n    Skip the data if it is `None`.\n\n    # Yields\n        The next element in the queue, i.e. a tuple\n        `(inputs, targets)` or\n        `(inputs, targets, sample_weights)`.\n    \"\"\"\n    try:\n        while self.is_running():\n            inputs = self.queue.get(block=True).get()\n            self.queue.task_done()\n            if inputs is not None:\n                yield inputs\n    except StopIteration:\n        # Special case for finite generators\n        last_ones = []\n        while self.queue.qsize() > 0:\n            last_ones.append(self.queue.get(block=True))\n        # Wait for them to complete\n        list(map(lambda f: f.wait(), last_ones))\n        # Keep the good ones\n        last_ones = [future.get() for future in last_ones if future.successful()]\n        for inputs in last_ones:\n            if inputs is not None:\n                yield inputs\n    except Exception as e:\n        self.stop()\n        if 'generator already executing' in str(e):\n            raise RuntimeError(\n                \"Your generator is NOT thread-safe.\"\n                \"Keras requires a thread-safe generator when\"\n                \"`use_multiprocessing=False, workers > 1`.\"\n                \"For more information see issue #1638.\")\n        six.reraise(*sys.exc_info())",
                "def chunk_read(response, chunk_size=8192, reporthook=None):\n    content_type = response.info().get('Content-Length')\n    total_size = -1\n    if content_type is not None:\n        total_size = int(content_type.strip())\n    count = 0\n    while True:\n        chunk = response.read(chunk_size)\n        count += 1\n        if reporthook is not None:\n            reporthook(count, chunk_size, total_size)\n        if chunk:\n            yield chunk\n        else:\n            break",
                "def dl_progress(count, block_size, total_size):\n    if ProgressTracker.progbar is None:\n        if total_size == -1:\n            total_size = None\n        ProgressTracker.progbar = Progbar(total_size)\n    else:\n        ProgressTracker.progbar.update(count * block_size)"
            ],
            "inscope_function_signatures": [
                "_extract_archive(file_path, path='.', archive_format='auto')",
                "get_file(fname, origin, untar=False, md5_hash=None, file_hash=None, cache_subdir='datasets', hash_algorithm='auto', extract=False, archive_format='auto', cache_dir=None)",
                "_hash_file(fpath, algorithm='sha256', chunk_size=65535)",
                "validate_file(fpath, file_hash, algorithm='auto', chunk_size=65535)",
                "init_pool(seqs)",
                "get_index(uid, i)",
                "init_pool_generator(gens, random_seed=None)",
                "next_sample(uid)",
                "urlretrieve(url, filename, reporthook=None, data=None)",
                "__getitem__(self, index)",
                "__len__(self)",
                "on_epoch_end(self)",
                "__iter__(self)",
                "__init__(self, sequence, use_multiprocessing=False)",
                "is_running(self)",
                "start(self, workers=1, max_queue_size=10)",
                "_send_sequence(self)",
                "stop(self, timeout=None)",
                "_run(self)",
                "_get_executor_init(self, workers)",
                "get(self)",
                "__init__(self, sequence, use_multiprocessing=False, shuffle=False)",
                "_get_executor_init(self, workers)",
                "_wait_queue(self)",
                "_run(self)",
                "get(self)",
                "__init__(self, sequence, use_multiprocessing=False, wait_time=None, random_seed=None)",
                "_get_executor_init(self, workers)",
                "_run(self)",
                "get(self)",
                "chunk_read(response, chunk_size=8192, reporthook=None)",
                "dl_progress(count, block_size, total_size)"
            ],
            "variables_in_file": {
                "ImportError": [
                    29
                ],
                "sys.version_info": [
                    34
                ],
                "sys": [
                    601,
                    34,
                    709
                ],
                "content_type": [
                    56,
                    57,
                    54
                ],
                "get": [
                    595,
                    685,
                    54
                ],
                "response.info": [
                    54
                ],
                "response": [
                    70,
                    60,
                    69,
                    54
                ],
                "total_size": [
                    213,
                    214,
                    55,
                    57,
                    215,
                    63
                ],
                "int": [
                    440,
                    57
                ],
                "content_type.strip": [
                    57
                ],
                "count": [
                    217,
                    58,
                    61,
                    63
                ],
                "chunk": [
                    64,
                    65,
                    70,
                    71,
                    270,
                    271,
                    60
                ],
                "response.read": [
                    60
                ],
                "chunk_size": [
                    296,
                    60,
                    270,
                    63
                ],
                "reporthook": [
                    70,
                    62,
                    63
                ],
                "closing": [
                    666,
                    565,
                    69
                ],
                "urlopen": [
                    69
                ],
                "url": [
                    69
                ],
                "data": [
                    69
                ],
                "open": [
                    269,
                    69
                ],
                "filename": [
                    69
                ],
                "fd": [
                    69,
                    71
                ],
                "chunk_read": [
                    70
                ],
                "fd.write": [
                    71
                ],
                "archive_format": [
                    96,
                    97,
                    99,
                    239,
                    92,
                    94,
                    95
                ],
                "isinstance": [
                    96,
                    440
                ],
                "six.string_types": [
                    96
                ],
                "six": [
                    96,
                    601,
                    626,
                    709
                ],
                "archive_type": [
                    99,
                    100,
                    103
                ],
                "open_fn": [
                    104,
                    108,
                    101
                ],
                "tarfile.open": [
                    101
                ],
                "tarfile": [
                    101,
                    102,
                    111
                ],
                "is_match_fn": [
                    105,
                    107,
                    102
                ],
                "tarfile.is_tarfile": [
                    102
                ],
                "zipfile.ZipFile": [
                    104
                ],
                "zipfile": [
                    104,
                    105
                ],
                "zipfile.is_zipfile": [
                    105
                ],
                "file_path": [
                    107,
                    108
                ],
                "archive": [
                    108,
                    110
                ],
                "archive.extractall": [
                    110
                ],
                "path": [
                    110,
                    113,
                    114,
                    115,
                    117
                ],
                "tarfile.TarError": [
                    111
                ],
                "RuntimeError": [
                    704,
                    111
                ],
                "KeyboardInterrupt": [
                    112,
                    227
                ],
                "os.path.exists": [
                    228,
                    234,
                    113,
                    181,
                    191
                ],
                "os.path": [
                    228,
                    234,
                    173,
                    113,
                    114,
                    179,
                    177,
                    180,
                    181,
                    185,
                    188,
                    191
                ],
                "os": [
                    185,
                    228,
                    229,
                    234,
                    173,
                    177,
                    113,
                    114,
                    115,
                    178,
                    179,
                    180,
                    181,
                    182,
                    188,
                    191
                ],
                "os.path.isfile": [
                    114
                ],
                "os.remove": [
                    115,
                    229
                ],
                "shutil.rmtree": [
                    117
                ],
                "shutil": [
                    117
                ],
                "cache_dir": [
                    177,
                    172,
                    173
                ],
                "os.path.join": [
                    173,
                    179,
                    180,
                    185,
                    188
                ],
                "os.path.expanduser": [
                    177,
                    173
                ],
                "md5_hash": [
                    174,
                    175
                ],
                "file_hash": [
                    193,
                    194,
                    291,
                    198,
                    296,
                    174,
                    175
                ],
                "hash_algorithm": [
                    176,
                    194,
                    196
                ],
                "datadir_base": [
                    177,
                    178,
                    179,
                    180
                ],
                "os.access": [
                    178
                ],
                "os.W_OK": [
                    178
                ],
                "datadir": [
                    235,
                    239,
                    180,
                    181,
                    182,
                    185,
                    188
                ],
                "cache_subdir": [
                    180
                ],
                "os.makedirs": [
                    182
                ],
                "untar": [
                    184,
                    233
                ],
                "untar_fpath": [
                    185,
                    186,
                    234,
                    236
                ],
                "fname": [
                    185,
                    188
                ],
                "fpath": [
                    194,
                    228,
                    229,
                    296,
                    235,
                    269,
                    239,
                    241,
                    186,
                    188,
                    222,
                    191
                ],
                "download": [
                    201,
                    203,
                    190,
                    199
                ],
                "validate_file": [
                    194
                ],
                "print": [
                    195,
                    204
                ],
                "origin": [
                    224,
                    226,
                    204,
                    222
                ],
                "object": [
                    302,
                    404,
                    206
                ],
                "progbar": [
                    209
                ],
                "ProgressTracker.progbar": [
                    217,
                    231,
                    212,
                    215
                ],
                "ProgressTracker": [
                    217,
                    231,
                    212,
                    215
                ],
                "Progbar": [
                    215
                ],
                "ProgressTracker.progbar.update": [
                    217
                ],
                "block_size": [
                    217
                ],
                "error_msg": [
                    224,
                    226,
                    219
                ],
                "urlretrieve": [
                    222
                ],
                "dl_progress": [
                    222
                ],
                "HTTPError": [
                    223
                ],
                "Exception": [
                    224,
                    226,
                    227,
                    599,
                    701
                ],
                "error_msg.format": [
                    224,
                    226
                ],
                "e.code": [
                    224
                ],
                "e": [
                    224,
                    226,
                    703
                ],
                "e.msg": [
                    224
                ],
                "URLError": [
                    225
                ],
                "e.errno": [
                    226
                ],
                "e.reason": [
                    226
                ],
                "_extract_archive": [
                    235,
                    239
                ],
                "extract": [
                    238
                ],
                "algorithm": [
                    264,
                    290,
                    291
                ],
                "len": [
                    264,
                    291,
                    372,
                    559
                ],
                "hash": [
                    264
                ],
                "hasher": [
                    292,
                    294,
                    296,
                    265,
                    267,
                    271,
                    273
                ],
                "hashlib.sha256": [
                    265
                ],
                "hashlib": [
                    265,
                    267
                ],
                "hashlib.md5": [
                    267
                ],
                "fpath_file": [
                    269,
                    270
                ],
                "iter": [
                    270
                ],
                "fpath_file.read": [
                    270
                ],
                "hasher.update": [
                    271
                ],
                "hasher.hexdigest": [
                    273
                ],
                "str": [
                    296,
                    703
                ],
                "_hash_file": [
                    296
                ],
                "NotImplementedError": [
                    354,
                    523,
                    363,
                    502,
                    511
                ],
                "abstractmethod": [
                    513,
                    356,
                    504,
                    499,
                    344
                ],
                "item": [
                    372,
                    373
                ],
                "self": [
                    647,
                    648,
                    661,
                    537,
                    538,
                    665,
                    666,
                    668,
                    670,
                    671,
                    554,
                    427,
                    428,
                    684,
                    685,
                    559,
                    560,
                    686,
                    562,
                    692,
                    565,
                    693,
                    567,
                    441,
                    569,
                    570,
                    573,
                    446,
                    575,
                    702,
                    449,
                    450,
                    451,
                    452,
                    453,
                    580,
                    581,
                    456,
                    466,
                    467,
                    594,
                    595,
                    470,
                    471,
                    472,
                    473,
                    474,
                    475,
                    476,
                    596,
                    600,
                    481,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    372
                ],
                "i": [
                    401,
                    570,
                    372,
                    566
                ],
                "range": [
                    372,
                    559
                ],
                "_SHARED_SEQUENCES": [
                    384,
                    481,
                    401,
                    497,
                    626,
                    565,
                    377,
                    666,
                    606
                ],
                "_SEQUENCE_COUNTER": [
                    431,
                    433,
                    438,
                    440,
                    441,
                    442,
                    379,
                    445,
                    446,
                    447
                ],
                "seqs": [
                    384,
                    548,
                    661
                ],
                "uid": [
                    401,
                    626
                ],
                "self.sequence": [
                    481,
                    427,
                    580,
                    559
                ],
                "sequence": [
                    647,
                    427,
                    559,
                    563,
                    566,
                    537
                ],
                "self.use_multiprocessing": [
                    466,
                    428
                ],
                "use_multiprocessing": [
                    537,
                    428,
                    647
                ],
                "mp.Value": [
                    433
                ],
                "mp": [
                    433,
                    546,
                    659,
                    609
                ],
                "OSError": [
                    434
                ],
                "self.uid": [
                    481,
                    497,
                    441,
                    570,
                    446,
                    671
                ],
                "_SEQUENCE_COUNTER.get_lock": [
                    445
                ],
                "_SEQUENCE_COUNTER.value": [
                    446,
                    447
                ],
                "self.workers": [
                    449,
                    471
                ],
                "self.executor_fn": [
                    450,
                    467,
                    565,
                    470,
                    666
                ],
                "self.queue": [
                    451,
                    554,
                    492,
                    493,
                    494,
                    495,
                    685,
                    686,
                    595,
                    596,
                    692,
                    693,
                    472,
                    569,
                    670
                ],
                "self.run_thread": [
                    452,
                    496,
                    474,
                    475,
                    476
                ],
                "self.stop_signal": [
                    453,
                    456,
                    554,
                    491,
                    567,
                    473,
                    668,
                    575
                ],
                "self.stop_signal.is_set": [
                    456,
                    554,
                    567,
                    668,
                    575
                ],
                "self._get_executor_init": [
                    467
                ],
                "workers": [
                    546,
                    467,
                    659,
                    470,
                    471
                ],
                "ThreadPool": [
                    470
                ],
                "queue.Queue": [
                    472
                ],
                "queue": [
                    472
                ],
                "max_queue_size": [
                    472
                ],
                "threading.Event": [
                    473
                ],
                "threading": [
                    473,
                    474
                ],
                "threading.Thread": [
                    474
                ],
                "self._run": [
                    474
                ],
                "self.run_thread.daemon": [
                    475
                ],
                "self.run_thread.start": [
                    476
                ],
                "self.stop_signal.set": [
                    491
                ],
                "self.queue.mutex": [
                    492
                ],
                "self.queue.queue.clear": [
                    493
                ],
                "self.queue.queue": [
                    493
                ],
                "self.queue.unfinished_tasks": [
                    554,
                    494
                ],
                "self.queue.not_full.notify": [
                    495
                ],
                "self.queue.not_full": [
                    495
                ],
                "self.run_thread.join": [
                    496
                ],
                "timeout": [
                    496
                ],
                "SequenceEnqueuer": [
                    629,
                    526
                ],
                "__init__": [
                    537,
                    647
                ],
                "super": [
                    537,
                    647
                ],
                "OrderedEnqueuer": [
                    537
                ],
                "self.shuffle": [
                    538,
                    562
                ],
                "shuffle": [
                    538
                ],
                "mp.Pool": [
                    546,
                    659
                ],
                "init_pool": [
                    547
                ],
                "time.sleep": [
                    553
                ],
                "time": [
                    553
                ],
                "list": [
                    695,
                    559
                ],
                "self._send_sequence": [
                    560,
                    665,
                    581
                ],
                "random.shuffle": [
                    563
                ],
                "random": [
                    563
                ],
                "executor": [
                    671,
                    570,
                    565,
                    666
                ],
                "self.queue.put": [
                    569,
                    670
                ],
                "executor.apply_async": [
                    570,
                    671
                ],
                "get_index": [
                    570
                ],
                "self._wait_queue": [
                    573
                ],
                "self.sequence.on_epoch_end": [
                    580
                ],
                "self.is_running": [
                    594,
                    684
                ],
                "inputs": [
                    685,
                    687,
                    688,
                    595,
                    597,
                    598,
                    698,
                    699,
                    700
                ],
                "self.queue.get": [
                    595,
                    685,
                    693
                ],
                "self.queue.task_done": [
                    596,
                    686
                ],
                "self.stop": [
                    600,
                    702
                ],
                "six.reraise": [
                    601,
                    709
                ],
                "sys.exc_info": [
                    601,
                    709
                ],
                "gens": [
                    606
                ],
                "random_seed": [
                    608,
                    610,
                    648
                ],
                "ident": [
                    609,
                    610
                ],
                "mp.current_process": [
                    609
                ],
                "np.random.seed": [
                    610
                ],
                "np.random": [
                    610
                ],
                "np": [
                    610
                ],
                "six.next": [
                    626
                ],
                "GeneratorEnqueuer": [
                    647
                ],
                "self.random_seed": [
                    648,
                    661
                ],
                "wait_time": [
                    649
                ],
                "warnings.warn": [
                    650
                ],
                "warnings": [
                    650
                ],
                "DeprecationWarning": [
                    651
                ],
                "init_pool_generator": [
                    660
                ],
                "next_sample": [
                    671
                ],
                "StopIteration": [
                    689
                ],
                "last_ones": [
                    691,
                    693,
                    695,
                    697,
                    698
                ],
                "self.queue.qsize": [
                    692
                ],
                "last_ones.append": [
                    693
                ],
                "map": [
                    695
                ],
                "f.wait": [
                    695
                ],
                "f": [
                    695
                ],
                "future.get": [
                    697
                ],
                "future": [
                    697
                ],
                "future.successful": [
                    697
                ]
            },
            "filtered_variables_in_file": {
                "sys.version_info": [
                    34
                ],
                "sys": [
                    601,
                    34,
                    709
                ],
                "content_type": [
                    56,
                    57,
                    54
                ],
                "get": [
                    595,
                    685,
                    54
                ],
                "response.info": [
                    54
                ],
                "response": [
                    70,
                    60,
                    69,
                    54
                ],
                "total_size": [
                    213,
                    214,
                    55,
                    57,
                    215,
                    63
                ],
                "content_type.strip": [
                    57
                ],
                "count": [
                    217,
                    58,
                    61,
                    63
                ],
                "chunk": [
                    64,
                    65,
                    70,
                    71,
                    270,
                    271,
                    60
                ],
                "response.read": [
                    60
                ],
                "chunk_size": [
                    296,
                    60,
                    270,
                    63
                ],
                "reporthook": [
                    70,
                    62,
                    63
                ],
                "closing": [
                    666,
                    565,
                    69
                ],
                "urlopen": [
                    69
                ],
                "url": [
                    69
                ],
                "data": [
                    69
                ],
                "filename": [
                    69
                ],
                "fd": [
                    69,
                    71
                ],
                "chunk_read": [
                    70
                ],
                "fd.write": [
                    71
                ],
                "archive_format": [
                    96,
                    97,
                    99,
                    239,
                    92,
                    94,
                    95
                ],
                "six.string_types": [
                    96
                ],
                "six": [
                    96,
                    601,
                    626,
                    709
                ],
                "archive_type": [
                    99,
                    100,
                    103
                ],
                "open_fn": [
                    104,
                    108,
                    101
                ],
                "tarfile.open": [
                    101
                ],
                "tarfile": [
                    101,
                    102,
                    111
                ],
                "is_match_fn": [
                    105,
                    107,
                    102
                ],
                "tarfile.is_tarfile": [
                    102
                ],
                "zipfile.ZipFile": [
                    104
                ],
                "zipfile": [
                    104,
                    105
                ],
                "zipfile.is_zipfile": [
                    105
                ],
                "file_path": [
                    107,
                    108
                ],
                "archive": [
                    108,
                    110
                ],
                "archive.extractall": [
                    110
                ],
                "path": [
                    110,
                    113,
                    114,
                    115,
                    117
                ],
                "tarfile.TarError": [
                    111
                ],
                "os.path.exists": [
                    228,
                    234,
                    113,
                    181,
                    191
                ],
                "os.path": [
                    228,
                    234,
                    173,
                    113,
                    114,
                    179,
                    177,
                    180,
                    181,
                    185,
                    188,
                    191
                ],
                "os": [
                    185,
                    228,
                    229,
                    234,
                    173,
                    177,
                    113,
                    114,
                    115,
                    178,
                    179,
                    180,
                    181,
                    182,
                    188,
                    191
                ],
                "os.path.isfile": [
                    114
                ],
                "os.remove": [
                    115,
                    229
                ],
                "shutil.rmtree": [
                    117
                ],
                "shutil": [
                    117
                ],
                "cache_dir": [
                    177,
                    172,
                    173
                ],
                "os.path.join": [
                    173,
                    179,
                    180,
                    185,
                    188
                ],
                "os.path.expanduser": [
                    177,
                    173
                ],
                "md5_hash": [
                    174,
                    175
                ],
                "file_hash": [
                    193,
                    194,
                    291,
                    198,
                    296,
                    174,
                    175
                ],
                "hash_algorithm": [
                    176,
                    194,
                    196
                ],
                "datadir_base": [
                    177,
                    178,
                    179,
                    180
                ],
                "os.access": [
                    178
                ],
                "os.W_OK": [
                    178
                ],
                "datadir": [
                    235,
                    239,
                    180,
                    181,
                    182,
                    185,
                    188
                ],
                "cache_subdir": [
                    180
                ],
                "os.makedirs": [
                    182
                ],
                "untar": [
                    184,
                    233
                ],
                "untar_fpath": [
                    185,
                    186,
                    234,
                    236
                ],
                "fname": [
                    185,
                    188
                ],
                "fpath": [
                    194,
                    228,
                    229,
                    296,
                    235,
                    269,
                    239,
                    241,
                    186,
                    188,
                    222,
                    191
                ],
                "download": [
                    201,
                    203,
                    190,
                    199
                ],
                "validate_file": [
                    194
                ],
                "origin": [
                    224,
                    226,
                    204,
                    222
                ],
                "progbar": [
                    209
                ],
                "ProgressTracker.progbar": [
                    217,
                    231,
                    212,
                    215
                ],
                "ProgressTracker": [
                    217,
                    231,
                    212,
                    215
                ],
                "Progbar": [
                    215
                ],
                "ProgressTracker.progbar.update": [
                    217
                ],
                "block_size": [
                    217
                ],
                "error_msg": [
                    224,
                    226,
                    219
                ],
                "urlretrieve": [
                    222
                ],
                "dl_progress": [
                    222
                ],
                "HTTPError": [
                    223
                ],
                "error_msg.format": [
                    224,
                    226
                ],
                "e.code": [
                    224
                ],
                "e": [
                    224,
                    226,
                    703
                ],
                "e.msg": [
                    224
                ],
                "URLError": [
                    225
                ],
                "e.errno": [
                    226
                ],
                "e.reason": [
                    226
                ],
                "_extract_archive": [
                    235,
                    239
                ],
                "extract": [
                    238
                ],
                "algorithm": [
                    264,
                    290,
                    291
                ],
                "hasher": [
                    292,
                    294,
                    296,
                    265,
                    267,
                    271,
                    273
                ],
                "hashlib.sha256": [
                    265
                ],
                "hashlib": [
                    265,
                    267
                ],
                "hashlib.md5": [
                    267
                ],
                "fpath_file": [
                    269,
                    270
                ],
                "fpath_file.read": [
                    270
                ],
                "hasher.update": [
                    271
                ],
                "hasher.hexdigest": [
                    273
                ],
                "_hash_file": [
                    296
                ],
                "abstractmethod": [
                    513,
                    356,
                    504,
                    499,
                    344
                ],
                "item": [
                    372,
                    373
                ],
                "self": [
                    647,
                    648,
                    661,
                    537,
                    538,
                    665,
                    666,
                    668,
                    670,
                    671,
                    554,
                    427,
                    428,
                    684,
                    685,
                    559,
                    560,
                    686,
                    562,
                    692,
                    565,
                    693,
                    567,
                    441,
                    569,
                    570,
                    573,
                    446,
                    575,
                    702,
                    449,
                    450,
                    451,
                    452,
                    453,
                    580,
                    581,
                    456,
                    466,
                    467,
                    594,
                    595,
                    470,
                    471,
                    472,
                    473,
                    474,
                    475,
                    476,
                    596,
                    600,
                    481,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    372
                ],
                "i": [
                    401,
                    570,
                    372,
                    566
                ],
                "_SHARED_SEQUENCES": [
                    384,
                    481,
                    401,
                    497,
                    626,
                    565,
                    377,
                    666,
                    606
                ],
                "_SEQUENCE_COUNTER": [
                    431,
                    433,
                    438,
                    440,
                    441,
                    442,
                    379,
                    445,
                    446,
                    447
                ],
                "seqs": [
                    384,
                    548,
                    661
                ],
                "uid": [
                    401,
                    626
                ],
                "self.sequence": [
                    481,
                    427,
                    580,
                    559
                ],
                "sequence": [
                    647,
                    427,
                    559,
                    563,
                    566,
                    537
                ],
                "self.use_multiprocessing": [
                    466,
                    428
                ],
                "use_multiprocessing": [
                    537,
                    428,
                    647
                ],
                "mp.Value": [
                    433
                ],
                "mp": [
                    433,
                    546,
                    659,
                    609
                ],
                "self.uid": [
                    481,
                    497,
                    441,
                    570,
                    446,
                    671
                ],
                "_SEQUENCE_COUNTER.get_lock": [
                    445
                ],
                "_SEQUENCE_COUNTER.value": [
                    446,
                    447
                ],
                "self.workers": [
                    449,
                    471
                ],
                "self.executor_fn": [
                    450,
                    467,
                    565,
                    470,
                    666
                ],
                "self.queue": [
                    451,
                    554,
                    492,
                    493,
                    494,
                    495,
                    685,
                    686,
                    595,
                    596,
                    692,
                    693,
                    472,
                    569,
                    670
                ],
                "self.run_thread": [
                    452,
                    496,
                    474,
                    475,
                    476
                ],
                "self.stop_signal": [
                    453,
                    456,
                    554,
                    491,
                    567,
                    473,
                    668,
                    575
                ],
                "self.stop_signal.is_set": [
                    456,
                    554,
                    567,
                    668,
                    575
                ],
                "self._get_executor_init": [
                    467
                ],
                "workers": [
                    546,
                    467,
                    659,
                    470,
                    471
                ],
                "ThreadPool": [
                    470
                ],
                "queue.Queue": [
                    472
                ],
                "queue": [
                    472
                ],
                "max_queue_size": [
                    472
                ],
                "threading.Event": [
                    473
                ],
                "threading": [
                    473,
                    474
                ],
                "threading.Thread": [
                    474
                ],
                "self._run": [
                    474
                ],
                "self.run_thread.daemon": [
                    475
                ],
                "self.run_thread.start": [
                    476
                ],
                "self.stop_signal.set": [
                    491
                ],
                "self.queue.mutex": [
                    492
                ],
                "self.queue.queue.clear": [
                    493
                ],
                "self.queue.queue": [
                    493
                ],
                "self.queue.unfinished_tasks": [
                    554,
                    494
                ],
                "self.queue.not_full.notify": [
                    495
                ],
                "self.queue.not_full": [
                    495
                ],
                "self.run_thread.join": [
                    496
                ],
                "timeout": [
                    496
                ],
                "SequenceEnqueuer": [
                    629,
                    526
                ],
                "__init__": [
                    537,
                    647
                ],
                "OrderedEnqueuer": [
                    537
                ],
                "self.shuffle": [
                    538,
                    562
                ],
                "shuffle": [
                    538
                ],
                "mp.Pool": [
                    546,
                    659
                ],
                "init_pool": [
                    547
                ],
                "time.sleep": [
                    553
                ],
                "time": [
                    553
                ],
                "self._send_sequence": [
                    560,
                    665,
                    581
                ],
                "random.shuffle": [
                    563
                ],
                "random": [
                    563
                ],
                "executor": [
                    671,
                    570,
                    565,
                    666
                ],
                "self.queue.put": [
                    569,
                    670
                ],
                "executor.apply_async": [
                    570,
                    671
                ],
                "get_index": [
                    570
                ],
                "self._wait_queue": [
                    573
                ],
                "self.sequence.on_epoch_end": [
                    580
                ],
                "self.is_running": [
                    594,
                    684
                ],
                "inputs": [
                    685,
                    687,
                    688,
                    595,
                    597,
                    598,
                    698,
                    699,
                    700
                ],
                "self.queue.get": [
                    595,
                    685,
                    693
                ],
                "self.queue.task_done": [
                    596,
                    686
                ],
                "self.stop": [
                    600,
                    702
                ],
                "six.reraise": [
                    601,
                    709
                ],
                "sys.exc_info": [
                    601,
                    709
                ],
                "gens": [
                    606
                ],
                "random_seed": [
                    608,
                    610,
                    648
                ],
                "ident": [
                    609,
                    610
                ],
                "mp.current_process": [
                    609
                ],
                "np.random.seed": [
                    610
                ],
                "np.random": [
                    610
                ],
                "np": [
                    610
                ],
                "six.next": [
                    626
                ],
                "GeneratorEnqueuer": [
                    647
                ],
                "self.random_seed": [
                    648,
                    661
                ],
                "wait_time": [
                    649
                ],
                "warnings.warn": [
                    650
                ],
                "warnings": [
                    650
                ],
                "init_pool_generator": [
                    660
                ],
                "next_sample": [
                    671
                ],
                "last_ones": [
                    691,
                    693,
                    695,
                    697,
                    698
                ],
                "self.queue.qsize": [
                    692
                ],
                "last_ones.append": [
                    693
                ],
                "f.wait": [
                    695
                ],
                "f": [
                    695
                ],
                "future.get": [
                    697
                ],
                "future": [
                    697
                ],
                "future.successful": [
                    697
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_11/tests/keras/utils/data_utils_test.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "pytestmark = pytest.mark.skipif(\n    K.backend() == 'tensorflow',\n    reason='Temporarily disabled until the use_multiprocessing problem is solved')",
                    "start_line": 24,
                    "end_line": 26
                }
            ],
            "inscope_functions": [
                "def use_spawn(func):\n    \"\"\"Decorator to test both Unix (fork) and Windows (spawn)\"\"\"\n    @six.wraps(func)\n    def wrapper(*args, **kwargs):\n        out = func(*args, **kwargs)\n        if sys.version_info > (3, 4):\n            mp.set_start_method('spawn', force=True)\n            func(*args, **kwargs)\n            mp.set_start_method('fork', force=True)\n        return out\n    return wrapper",
                "@pytest.fixture\ndef in_tmpdir(tmpdir):\n    \"\"\"Runs a function in a temporary directory.\n\n    Checks that the directory is empty afterwards.\n    \"\"\"\n    with tmpdir.as_cwd():\n        yield None\n    assert not tmpdir.listdir()",
                "def test_data_utils(in_tmpdir):\n    \"\"\"Tests get_file from a url, plus extraction and validation.\n    \"\"\"\n    dirname = 'data_utils'\n\n    with open('test.txt', 'w') as text_file:\n        text_file.write('Float like a butterfly, sting like a bee.')\n\n    with tarfile.open('test.tar.gz', 'w:gz') as tar_file:\n        tar_file.add('test.txt')\n\n    with zipfile.ZipFile('test.zip', 'w') as zip_file:\n        zip_file.write('test.txt')\n\n    origin = urljoin('file://', pathname2url(os.path.abspath('test.tar.gz')))\n\n    path = get_file(dirname, origin, untar=True)\n    filepath = path + '.tar.gz'\n    hashval_sha256 = _hash_file(filepath)\n    hashval_md5 = _hash_file(filepath, algorithm='md5')\n    path = get_file(dirname, origin, md5_hash=hashval_md5, untar=True)\n    path = get_file(filepath, origin, file_hash=hashval_sha256, extract=True)\n    assert os.path.exists(filepath)\n    assert validate_file(filepath, hashval_sha256)\n    assert validate_file(filepath, hashval_md5)\n    os.remove(filepath)\n    os.remove('test.tar.gz')\n\n    origin = urljoin('file://', pathname2url(os.path.abspath('test.zip')))\n\n    hashval_sha256 = _hash_file('test.zip')\n    hashval_md5 = _hash_file('test.zip', algorithm='md5')\n    path = get_file(dirname, origin, md5_hash=hashval_md5, extract=True)\n    path = get_file(dirname, origin, file_hash=hashval_sha256, extract=True)\n    assert os.path.exists(path)\n    assert validate_file(path, hashval_sha256)\n    assert validate_file(path, hashval_md5)\n\n    os.remove(path)\n    os.remove('test.txt')\n    os.remove('test.zip')",
                "def threadsafe_generator(f):\n    \"\"\"A decorator that takes a generator function and makes it thread-safe.\n    \"\"\"\n\n    def g(*a, **kw):\n        return threadsafe_iter(f(*a, **kw))\n\n    return g",
                "@threadsafe_generator\ndef create_generator_from_sequence_threads(ds):\n    for i in cycle(range(len(ds))):\n        yield ds[i]",
                "def create_generator_from_sequence_pcs(ds):\n    for i in cycle(range(len(ds))):\n        yield ds[i]",
                "def test_generator_enqueuer_threads():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_threads(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(int(next(gen_output)[0, 0, 0, 0]))\n\n    \"\"\"\n     Not comparing the order since it is not guaranteed.\n     It may get ordered, but not a lot, one thread can take\n     the GIL before he was supposed to.\n    \"\"\"\n    assert len(set(acc) - set(range(100))) == 0, \"Output is not the same\"\n    enqueuer.stop()",
                "def test_generator_enqueuer_processes():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_pcs(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(int(next(gen_output)[0, 0, 0, 0]))\n    assert acc != list(range(100)), ('Order was keep in GeneratorEnqueuer '\n                                     'with processes')\n    enqueuer.stop()",
                "def test_generator_enqueuer_threadsafe():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_pcs(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(RuntimeError) as e:\n        [next(gen_output) for _ in range(10)]\n    assert 'thread-safe' in str(e.value)\n    enqueuer.stop()",
                "def test_generator_enqueuer_fail_threads():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_threads(\n        FaultSequence()), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
                "def test_generator_enqueuer_fail_processes():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_pcs(\n        FaultSequence()), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
                "def test_ordered_enqueuer_threads():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list(range(100)), ('Order was not keep in GeneratorEnqueuer '\n                                     'with threads')\n    enqueuer.stop()",
                "def test_ordered_enqueuer_threads_not_ordered():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=False,\n                               shuffle=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc != list(range(100)), ('Order was not keep in GeneratorEnqueuer '\n                                     'with threads')\n    enqueuer.stop()",
                "@use_spawn\ndef test_ordered_enqueuer_processes():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list(range(100)), ('Order was not keep in GeneratorEnqueuer '\n                                     'with processes')\n    enqueuer.stop()",
                "def test_ordered_enqueuer_fail_threads():\n    enqueuer = OrderedEnqueuer(FaultSequence(), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
                "@use_spawn\ndef test_on_epoch_end_processes():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(200):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc[100:] == list([k * 5 for k in range(100)]), (\n        'Order was not keep in GeneratorEnqueuer with processes')\n    enqueuer.stop()",
                "@use_spawn\ndef test_context_switch():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=True)\n    enqueuer2 = OrderedEnqueuer(DummySequence([3, 200, 200, 3], value=15),\n                                use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    enqueuer2.start(3, 10)\n    gen_output = enqueuer.get()\n    gen_output2 = enqueuer2.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc[-1] == 99\n    # One epoch is completed so enqueuer will switch the Sequence\n\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output2)[0, 0, 0, 0])\n    assert acc[-1] == 99 * 15\n    # One epoch has been completed so enqueuer2 will switch\n\n    # Be sure that both Sequence were updated\n    assert next(gen_output)[0, 0, 0, 0] == 0\n    assert next(gen_output)[0, 0, 0, 0] == 5\n    assert next(gen_output2)[0, 0, 0, 0] == 0\n    assert next(gen_output2)[0, 0, 0, 0] == 15 * 5\n\n    # Tear down everything\n    enqueuer.stop()\n    enqueuer2.stop()",
                "def test_on_epoch_end_threads():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list([k * 5 for k in range(100)]), (\n        'Order was not keep in GeneratorEnqueuer with processes')\n    enqueuer.stop()",
                "@use_spawn\ndef test_ordered_enqueuer_fail_processes():\n    enqueuer = OrderedEnqueuer(FaultSequence(), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
                "@threadsafe_generator\ndef create_finite_generator_from_sequence_threads(ds):\n    for i in range(len(ds)):\n        yield ds[i]",
                "def create_finite_generator_from_sequence_pcs(ds):\n    for i in range(len(ds)):\n        yield ds[i]",
                "def test_finite_generator_enqueuer_threads():\n    enqueuer = GeneratorEnqueuer(create_finite_generator_from_sequence_threads(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for output in gen_output:\n        acc.append(int(output[0, 0, 0, 0]))\n    assert set(acc) == set(range(100)), \"Output is not the same\"\n    enqueuer.stop()",
                "def test_finite_generator_enqueuer_processes():\n    enqueuer = GeneratorEnqueuer(create_finite_generator_from_sequence_pcs(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for output in gen_output:\n        acc.append(int(output[0, 0, 0, 0]))\n    assert acc != list(range(100)), ('Order was keep in GeneratorEnqueuer '\n                                     'with processes')\n    enqueuer.stop()",
                "def next(x):\n    return x.next()",
                "@six.wraps(func)\ndef wrapper(*args, **kwargs):\n    out = func(*args, **kwargs)\n    if sys.version_info > (3, 4):\n        mp.set_start_method('spawn', force=True)\n        func(*args, **kwargs)\n        mp.set_start_method('fork', force=True)\n    return out",
                "def __init__(self, it):\n    self.it = it\n    self.lock = threading.Lock()",
                "def __iter__(self):\n    return self",
                "def __next__(self):\n    return self.next()",
                "def next(self):\n    with self.lock:\n        return next(self.it)",
                "def g(*a, **kw):\n    return threadsafe_iter(f(*a, **kw))",
                "def __init__(self, shape, value=1.0):\n    self.shape = shape\n    self.inner = value",
                "def __getitem__(self, item):\n    return np.ones(self.shape, dtype=np.uint32) * item * self.inner",
                "def __len__(self):\n    return 100",
                "def on_epoch_end(self):\n    self.inner *= 5.0",
                "def __getitem__(self, item):\n    raise IndexError(item, 'is not present')",
                "def __len__(self):\n    return 100",
                "def on_epoch_end(self):\n    pass"
            ],
            "inscope_function_signatures": [
                "use_spawn(func)",
                "in_tmpdir(tmpdir)",
                "test_data_utils(in_tmpdir)",
                "threadsafe_generator(f)",
                "create_generator_from_sequence_threads(ds)",
                "create_generator_from_sequence_pcs(ds)",
                "test_generator_enqueuer_threads()",
                "test_generator_enqueuer_processes()",
                "test_generator_enqueuer_threadsafe()",
                "test_generator_enqueuer_fail_threads()",
                "test_generator_enqueuer_fail_processes()",
                "test_ordered_enqueuer_threads()",
                "test_ordered_enqueuer_threads_not_ordered()",
                "test_ordered_enqueuer_processes()",
                "test_ordered_enqueuer_fail_threads()",
                "test_on_epoch_end_processes()",
                "test_context_switch()",
                "test_on_epoch_end_threads()",
                "test_ordered_enqueuer_fail_processes()",
                "create_finite_generator_from_sequence_threads(ds)",
                "create_finite_generator_from_sequence_pcs(ds)",
                "test_finite_generator_enqueuer_threads()",
                "test_finite_generator_enqueuer_processes()",
                "next(x)",
                "wrapper(*args, **kwargs)",
                "__init__(self, it)",
                "__iter__(self)",
                "__next__(self)",
                "next(self)",
                "g(*a, **kw)",
                "__init__(self, shape, value=1.0)",
                "__getitem__(self, item)",
                "__len__(self)",
                "on_epoch_end(self)",
                "__getitem__(self, item)",
                "__len__(self)",
                "on_epoch_end(self)"
            ],
            "variables_in_file": {
                "pytestmark": [
                    24
                ],
                "pytest.mark.skipif": [
                    24
                ],
                "pytest.mark": [
                    24
                ],
                "pytest": [
                    226,
                    388,
                    206,
                    46,
                    275,
                    24,
                    217,
                    347
                ],
                "K.backend": [
                    25
                ],
                "K": [
                    25
                ],
                "sys.version_info": [
                    28,
                    38
                ],
                "sys": [
                    28,
                    38
                ],
                "x.next": [
                    30
                ],
                "x": [
                    30
                ],
                "out": [
                    42,
                    37
                ],
                "func": [
                    40,
                    35,
                    37
                ],
                "args": [
                    40,
                    37
                ],
                "kwargs": [
                    40,
                    37
                ],
                "mp.set_start_method": [
                    41,
                    39
                ],
                "mp": [
                    41,
                    39
                ],
                "six.wraps": [
                    35
                ],
                "six": [
                    35
                ],
                "wrapper": [
                    43
                ],
                "tmpdir.as_cwd": [
                    52
                ],
                "tmpdir": [
                    52,
                    54
                ],
                "tmpdir.listdir": [
                    54
                ],
                "pytest.fixture": [
                    46
                ],
                "dirname": [
                    73,
                    77,
                    89,
                    90,
                    60
                ],
                "open": [
                    62
                ],
                "text_file": [
                    62,
                    63
                ],
                "text_file.write": [
                    63
                ],
                "tarfile.open": [
                    65
                ],
                "tarfile": [
                    65
                ],
                "tar_file": [
                    65,
                    66
                ],
                "tar_file.add": [
                    66
                ],
                "zipfile.ZipFile": [
                    68
                ],
                "zipfile": [
                    68
                ],
                "zip_file": [
                    68,
                    69
                ],
                "zip_file.write": [
                    69
                ],
                "origin": [
                    71,
                    73,
                    77,
                    78,
                    85,
                    89,
                    90
                ],
                "urljoin": [
                    85,
                    71
                ],
                "pathname2url": [
                    85,
                    71
                ],
                "os.path.abspath": [
                    85,
                    71
                ],
                "os.path": [
                    91,
                    85,
                    79,
                    71
                ],
                "os": [
                    96,
                    97,
                    71,
                    79,
                    82,
                    83,
                    85,
                    91,
                    95
                ],
                "path": [
                    73,
                    74,
                    77,
                    78,
                    89,
                    90,
                    91,
                    92,
                    93,
                    95
                ],
                "get_file": [
                    73,
                    77,
                    78,
                    89,
                    90
                ],
                "filepath": [
                    74,
                    75,
                    76,
                    78,
                    79,
                    80,
                    81,
                    82
                ],
                "hashval_sha256": [
                    75,
                    78,
                    80,
                    87,
                    90,
                    92
                ],
                "_hash_file": [
                    88,
                    75,
                    76,
                    87
                ],
                "hashval_md5": [
                    76,
                    77,
                    81,
                    88,
                    89,
                    93
                ],
                "os.path.exists": [
                    91,
                    79
                ],
                "validate_file": [
                    80,
                    81,
                    92,
                    93
                ],
                "os.remove": [
                    96,
                    97,
                    82,
                    83,
                    95
                ],
                "self.it": [
                    120,
                    109
                ],
                "self": [
                    135,
                    136,
                    139,
                    109,
                    110,
                    113,
                    145,
                    116,
                    119,
                    120
                ],
                "it": [
                    109
                ],
                "self.lock": [
                    110,
                    119
                ],
                "threading.Lock": [
                    110
                ],
                "threading": [
                    110
                ],
                "self.next": [
                    116
                ],
                "next": [
                    265,
                    276,
                    287,
                    177,
                    305,
                    311,
                    316,
                    317,
                    318,
                    319,
                    195,
                    333,
                    207,
                    336,
                    218,
                    348,
                    227,
                    237,
                    120,
                    251
                ],
                "threadsafe_iter": [
                    128
                ],
                "f": [
                    128
                ],
                "a": [
                    128
                ],
                "kw": [
                    128
                ],
                "g": [
                    130
                ],
                "Sequence": [
                    148,
                    133
                ],
                "self.shape": [
                    139,
                    135
                ],
                "shape": [
                    135
                ],
                "self.inner": [
                    136,
                    145,
                    139
                ],
                "value": [
                    136
                ],
                "np.ones": [
                    139
                ],
                "np": [
                    139
                ],
                "np.uint32": [
                    139
                ],
                "item": [
                    139,
                    150
                ],
                "IndexError": [
                    226,
                    275,
                    150,
                    217,
                    347
                ],
                "i": [
                    161,
                    162,
                    194,
                    353,
                    354,
                    166,
                    167,
                    264,
                    358,
                    359,
                    236,
                    332,
                    335,
                    176,
                    304,
                    310,
                    250,
                    286
                ],
                "cycle": [
                    161,
                    166
                ],
                "range": [
                    264,
                    266,
                    286,
                    288,
                    161,
                    166,
                    176,
                    304,
                    310,
                    184,
                    194,
                    196,
                    332,
                    207,
                    335,
                    337,
                    353,
                    358,
                    236,
                    238,
                    370,
                    250,
                    252,
                    382
                ],
                "len": [
                    161,
                    353,
                    358,
                    166,
                    184
                ],
                "ds": [
                    161,
                    162,
                    353,
                    354,
                    166,
                    167,
                    358,
                    359
                ],
                "threadsafe_generator": [
                    351,
                    159
                ],
                "enqueuer": [
                    384,
                    259,
                    261,
                    262,
                    268,
                    272,
                    273,
                    274,
                    281,
                    283,
                    284,
                    290,
                    295,
                    171,
                    299,
                    173,
                    174,
                    301,
                    185,
                    189,
                    191,
                    192,
                    322,
                    198,
                    327,
                    329,
                    202,
                    330,
                    204,
                    205,
                    209,
                    339,
                    213,
                    215,
                    216,
                    344,
                    345,
                    346,
                    222,
                    375,
                    224,
                    225,
                    231,
                    233,
                    234,
                    363,
                    365,
                    366,
                    240,
                    371,
                    244,
                    247,
                    248,
                    377,
                    378,
                    254
                ],
                "GeneratorEnqueuer": [
                    202,
                    171,
                    363,
                    213,
                    375,
                    189,
                    222
                ],
                "create_generator_from_sequence_threads": [
                    171,
                    213
                ],
                "DummySequence": [
                    259,
                    231,
                    295,
                    297,
                    327,
                    203,
                    172,
                    364,
                    244,
                    376,
                    281,
                    190
                ],
                "enqueuer.start": [
                    224,
                    261,
                    233,
                    329,
                    299,
                    204,
                    173,
                    365,
                    377,
                    283,
                    273,
                    215,
                    345,
                    247,
                    191
                ],
                "gen_output": [
                    262,
                    265,
                    274,
                    276,
                    284,
                    287,
                    301,
                    174,
                    177,
                    305,
                    316,
                    317,
                    192,
                    195,
                    330,
                    205,
                    333,
                    207,
                    336,
                    216,
                    218,
                    346,
                    348,
                    225,
                    227,
                    234,
                    237,
                    366,
                    368,
                    248,
                    378,
                    251,
                    380
                ],
                "enqueuer.get": [
                    192,
                    225,
                    248,
                    262,
                    234,
                    330,
                    205,
                    174,
                    301,
                    366,
                    378,
                    274,
                    216,
                    346,
                    284
                ],
                "acc": [
                    263,
                    265,
                    266,
                    285,
                    287,
                    288,
                    175,
                    303,
                    177,
                    305,
                    306,
                    309,
                    311,
                    184,
                    312,
                    193,
                    195,
                    196,
                    331,
                    333,
                    334,
                    336,
                    337,
                    235,
                    237,
                    238,
                    367,
                    369,
                    370,
                    379,
                    249,
                    251,
                    252,
                    381,
                    382
                ],
                "acc.append": [
                    195,
                    265,
                    237,
                    333,
                    336,
                    177,
                    305,
                    369,
                    311,
                    251,
                    381,
                    287
                ],
                "int": [
                    177,
                    195,
                    381,
                    369
                ],
                "set": [
                    184,
                    370
                ],
                "enqueuer.stop": [
                    384,
                    290,
                    322,
                    198,
                    268,
                    240,
                    209,
                    339,
                    371,
                    185,
                    254
                ],
                "create_generator_from_sequence_pcs": [
                    202,
                    189,
                    222
                ],
                "list": [
                    288,
                    196,
                    266,
                    238,
                    337,
                    252,
                    382
                ],
                "pytest.raises": [
                    226,
                    206,
                    275,
                    217,
                    347
                ],
                "RuntimeError": [
                    206
                ],
                "e": [
                    208,
                    206
                ],
                "_": [
                    207
                ],
                "str": [
                    208
                ],
                "e.value": [
                    208
                ],
                "FaultSequence": [
                    272,
                    344,
                    214,
                    223
                ],
                "OrderedEnqueuer": [
                    259,
                    231,
                    295,
                    297,
                    327,
                    272,
                    244,
                    344,
                    281
                ],
                "use_spawn": [
                    257,
                    293,
                    342,
                    279
                ],
                "k": [
                    288,
                    337
                ],
                "enqueuer2": [
                    297,
                    323,
                    300,
                    302
                ],
                "enqueuer2.start": [
                    300
                ],
                "gen_output2": [
                    318,
                    319,
                    302,
                    311
                ],
                "enqueuer2.get": [
                    302
                ],
                "enqueuer2.stop": [
                    323
                ],
                "create_finite_generator_from_sequence_threads": [
                    363
                ],
                "output": [
                    368,
                    369,
                    380,
                    381
                ],
                "create_finite_generator_from_sequence_pcs": [
                    375
                ],
                "__name__": [
                    387
                ],
                "pytest.main": [
                    388
                ],
                "__file__": [
                    388
                ]
            },
            "filtered_variables_in_file": {
                "pytestmark": [
                    24
                ],
                "pytest.mark.skipif": [
                    24
                ],
                "pytest.mark": [
                    24
                ],
                "pytest": [
                    226,
                    388,
                    206,
                    46,
                    275,
                    24,
                    217,
                    347
                ],
                "K.backend": [
                    25
                ],
                "K": [
                    25
                ],
                "sys.version_info": [
                    28,
                    38
                ],
                "sys": [
                    28,
                    38
                ],
                "x.next": [
                    30
                ],
                "x": [
                    30
                ],
                "out": [
                    42,
                    37
                ],
                "func": [
                    40,
                    35,
                    37
                ],
                "args": [
                    40,
                    37
                ],
                "kwargs": [
                    40,
                    37
                ],
                "mp.set_start_method": [
                    41,
                    39
                ],
                "mp": [
                    41,
                    39
                ],
                "six.wraps": [
                    35
                ],
                "six": [
                    35
                ],
                "wrapper": [
                    43
                ],
                "tmpdir.as_cwd": [
                    52
                ],
                "tmpdir": [
                    52,
                    54
                ],
                "tmpdir.listdir": [
                    54
                ],
                "pytest.fixture": [
                    46
                ],
                "dirname": [
                    73,
                    77,
                    89,
                    90,
                    60
                ],
                "text_file": [
                    62,
                    63
                ],
                "text_file.write": [
                    63
                ],
                "tarfile.open": [
                    65
                ],
                "tarfile": [
                    65
                ],
                "tar_file": [
                    65,
                    66
                ],
                "tar_file.add": [
                    66
                ],
                "zipfile.ZipFile": [
                    68
                ],
                "zipfile": [
                    68
                ],
                "zip_file": [
                    68,
                    69
                ],
                "zip_file.write": [
                    69
                ],
                "origin": [
                    71,
                    73,
                    77,
                    78,
                    85,
                    89,
                    90
                ],
                "urljoin": [
                    85,
                    71
                ],
                "pathname2url": [
                    85,
                    71
                ],
                "os.path.abspath": [
                    85,
                    71
                ],
                "os.path": [
                    91,
                    85,
                    79,
                    71
                ],
                "os": [
                    96,
                    97,
                    71,
                    79,
                    82,
                    83,
                    85,
                    91,
                    95
                ],
                "path": [
                    73,
                    74,
                    77,
                    78,
                    89,
                    90,
                    91,
                    92,
                    93,
                    95
                ],
                "get_file": [
                    73,
                    77,
                    78,
                    89,
                    90
                ],
                "filepath": [
                    74,
                    75,
                    76,
                    78,
                    79,
                    80,
                    81,
                    82
                ],
                "hashval_sha256": [
                    75,
                    78,
                    80,
                    87,
                    90,
                    92
                ],
                "_hash_file": [
                    88,
                    75,
                    76,
                    87
                ],
                "hashval_md5": [
                    76,
                    77,
                    81,
                    88,
                    89,
                    93
                ],
                "os.path.exists": [
                    91,
                    79
                ],
                "validate_file": [
                    80,
                    81,
                    92,
                    93
                ],
                "os.remove": [
                    96,
                    97,
                    82,
                    83,
                    95
                ],
                "self.it": [
                    120,
                    109
                ],
                "self": [
                    135,
                    136,
                    139,
                    109,
                    110,
                    113,
                    145,
                    116,
                    119,
                    120
                ],
                "it": [
                    109
                ],
                "self.lock": [
                    110,
                    119
                ],
                "threading.Lock": [
                    110
                ],
                "threading": [
                    110
                ],
                "self.next": [
                    116
                ],
                "threadsafe_iter": [
                    128
                ],
                "f": [
                    128
                ],
                "a": [
                    128
                ],
                "kw": [
                    128
                ],
                "g": [
                    130
                ],
                "Sequence": [
                    148,
                    133
                ],
                "self.shape": [
                    139,
                    135
                ],
                "shape": [
                    135
                ],
                "self.inner": [
                    136,
                    145,
                    139
                ],
                "value": [
                    136
                ],
                "np.ones": [
                    139
                ],
                "np": [
                    139
                ],
                "np.uint32": [
                    139
                ],
                "item": [
                    139,
                    150
                ],
                "i": [
                    161,
                    162,
                    194,
                    353,
                    354,
                    166,
                    167,
                    264,
                    358,
                    359,
                    236,
                    332,
                    335,
                    176,
                    304,
                    310,
                    250,
                    286
                ],
                "cycle": [
                    161,
                    166
                ],
                "ds": [
                    161,
                    162,
                    353,
                    354,
                    166,
                    167,
                    358,
                    359
                ],
                "threadsafe_generator": [
                    351,
                    159
                ],
                "enqueuer": [
                    384,
                    259,
                    261,
                    262,
                    268,
                    272,
                    273,
                    274,
                    281,
                    283,
                    284,
                    290,
                    295,
                    171,
                    299,
                    173,
                    174,
                    301,
                    185,
                    189,
                    191,
                    192,
                    322,
                    198,
                    327,
                    329,
                    202,
                    330,
                    204,
                    205,
                    209,
                    339,
                    213,
                    215,
                    216,
                    344,
                    345,
                    346,
                    222,
                    375,
                    224,
                    225,
                    231,
                    233,
                    234,
                    363,
                    365,
                    366,
                    240,
                    371,
                    244,
                    247,
                    248,
                    377,
                    378,
                    254
                ],
                "GeneratorEnqueuer": [
                    202,
                    171,
                    363,
                    213,
                    375,
                    189,
                    222
                ],
                "create_generator_from_sequence_threads": [
                    171,
                    213
                ],
                "DummySequence": [
                    259,
                    231,
                    295,
                    297,
                    327,
                    203,
                    172,
                    364,
                    244,
                    376,
                    281,
                    190
                ],
                "enqueuer.start": [
                    224,
                    261,
                    233,
                    329,
                    299,
                    204,
                    173,
                    365,
                    377,
                    283,
                    273,
                    215,
                    345,
                    247,
                    191
                ],
                "gen_output": [
                    262,
                    265,
                    274,
                    276,
                    284,
                    287,
                    301,
                    174,
                    177,
                    305,
                    316,
                    317,
                    192,
                    195,
                    330,
                    205,
                    333,
                    207,
                    336,
                    216,
                    218,
                    346,
                    348,
                    225,
                    227,
                    234,
                    237,
                    366,
                    368,
                    248,
                    378,
                    251,
                    380
                ],
                "enqueuer.get": [
                    192,
                    225,
                    248,
                    262,
                    234,
                    330,
                    205,
                    174,
                    301,
                    366,
                    378,
                    274,
                    216,
                    346,
                    284
                ],
                "acc": [
                    263,
                    265,
                    266,
                    285,
                    287,
                    288,
                    175,
                    303,
                    177,
                    305,
                    306,
                    309,
                    311,
                    184,
                    312,
                    193,
                    195,
                    196,
                    331,
                    333,
                    334,
                    336,
                    337,
                    235,
                    237,
                    238,
                    367,
                    369,
                    370,
                    379,
                    249,
                    251,
                    252,
                    381,
                    382
                ],
                "acc.append": [
                    195,
                    265,
                    237,
                    333,
                    336,
                    177,
                    305,
                    369,
                    311,
                    251,
                    381,
                    287
                ],
                "enqueuer.stop": [
                    384,
                    290,
                    322,
                    198,
                    268,
                    240,
                    209,
                    339,
                    371,
                    185,
                    254
                ],
                "create_generator_from_sequence_pcs": [
                    202,
                    189,
                    222
                ],
                "pytest.raises": [
                    226,
                    206,
                    275,
                    217,
                    347
                ],
                "e": [
                    208,
                    206
                ],
                "_": [
                    207
                ],
                "e.value": [
                    208
                ],
                "FaultSequence": [
                    272,
                    344,
                    214,
                    223
                ],
                "OrderedEnqueuer": [
                    259,
                    231,
                    295,
                    297,
                    327,
                    272,
                    244,
                    344,
                    281
                ],
                "use_spawn": [
                    257,
                    293,
                    342,
                    279
                ],
                "k": [
                    288,
                    337
                ],
                "enqueuer2": [
                    297,
                    323,
                    300,
                    302
                ],
                "enqueuer2.start": [
                    300
                ],
                "gen_output2": [
                    318,
                    319,
                    302,
                    311
                ],
                "enqueuer2.get": [
                    302
                ],
                "enqueuer2.stop": [
                    323
                ],
                "create_finite_generator_from_sequence_threads": [
                    363
                ],
                "output": [
                    368,
                    369,
                    380,
                    381
                ],
                "create_finite_generator_from_sequence_pcs": [
                    375
                ],
                "pytest.main": [
                    388
                ],
                "__file__": [
                    388
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_11/tests/integration_tests/test_image_data_tasks.py",
                "test_function": "test_image_data_generator_training",
                "test_function_code": "def test_image_data_generator_training():\n    np.random.seed(1337)\n    img_gen = ImageDataGenerator(rescale=1.)  # Dummy ImageDataGenerator\n    input_shape = (16, 16, 3)\n    (x_train, y_train), (x_test, y_test) = get_test_data(num_train=500,\n                                                         num_test=200,\n                                                         input_shape=input_shape,\n                                                         classification=True,\n                                                         num_classes=4)\n    y_train = to_categorical(y_train)\n    y_test = to_categorical(y_test)\n\n    model = Sequential([\n        layers.Conv2D(filters=8, kernel_size=3,\n                      activation='relu',\n                      input_shape=input_shape),\n        layers.MaxPooling2D(pool_size=2),\n        layers.Conv2D(filters=4, kernel_size=(3, 3),\n                      activation='relu', padding='same'),\n        layers.GlobalAveragePooling2D(),\n        layers.Dense(y_test.shape[-1], activation='softmax')\n    ])\n    model.compile(loss='categorical_crossentropy',\n                  optimizer='rmsprop',\n                  metrics=['accuracy'])\n    history = model.fit_generator(img_gen.flow(x_train, y_train, batch_size=16),\n                                  epochs=10,\n                                  validation_data=img_gen.flow(x_test, y_test,\n                                                               batch_size=16),\n                                  verbose=0)\n    assert history.history['val_acc'][-1] > 0.75\n    model.evaluate_generator(img_gen.flow(x_train, y_train, batch_size=16))",
                "test_error": "ValueError: `steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.",
                "full_test_error": "def test_image_data_generator_training():\n        np.random.seed(1337)\n        img_gen = ImageDataGenerator(rescale=1.)  # Dummy ImageDataGenerator\n        input_shape = (16, 16, 3)\n        (x_train, y_train), (x_test, y_test) = get_test_data(num_train=500,\n                                                             num_test=200,\n                                                             input_shape=input_shape,\n                                                             classification=True,\n                                                             num_classes=4)\n        y_train = to_categorical(y_train)\n        y_test = to_categorical(y_test)\n    \n        model = Sequential([\n            layers.Conv2D(filters=8, kernel_size=3,\n                          activation='relu',\n                          input_shape=input_shape),\n            layers.MaxPooling2D(pool_size=2),\n            layers.Conv2D(filters=4, kernel_size=(3, 3),\n                          activation='relu', padding='same'),\n            layers.GlobalAveragePooling2D(),\n            layers.Dense(y_test.shape[-1], activation='softmax')\n        ])\n        model.compile(loss='categorical_crossentropy',\n                      optimizer='rmsprop',\n                      metrics=['accuracy'])\n        history = model.fit_generator(img_gen.flow(x_train, y_train, batch_size=16),\n                                      epochs=10,\n                                      validation_data=img_gen.flow(x_test, y_test,\n                                                                   batch_size=16),\n>                                     verbose=0)\n\ntests/integration_tests/test_image_data_tasks.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/legacy/interfaces.py:91: in wrapper\n    return func(*args, **kwargs)\nkeras/engine/training.py:1418: in fit_generator\n    initial_epoch=initial_epoch)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmodel = <keras.engine.sequential.Sequential object at 0x123c38f50>\ngenerator = <keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x123ca3bd0>\nsteps_per_epoch = None, epochs = 10, verbose = 0, callbacks = None\nvalidation_data = <keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x123ca3d10>\nvalidation_steps = None, class_weight = None, max_queue_size = 10, workers = 1\nuse_multiprocessing = False, shuffle = True, initial_epoch = 0\n\n    def fit_generator(model,\n                      generator,\n                      steps_per_epoch=None,\n                      epochs=1,\n                      verbose=1,\n                      callbacks=None,\n                      validation_data=None,\n                      validation_steps=None,\n                      class_weight=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      shuffle=True,\n                      initial_epoch=0):\n        \"\"\"See docstring for `Model.fit_generator`.\"\"\"\n        epoch = initial_epoch\n    \n        do_validation = bool(validation_data)\n        model._make_train_function()\n        if do_validation:\n            model._make_test_function()\n    \n        is_sequence = isinstance(generator, Sequence)\n        if not is_sequence and use_multiprocessing and workers > 1:\n            warnings.warn(\n                UserWarning('Using a generator with `use_multiprocessing=True`'\n                            ' and multiple workers may duplicate your data.'\n                            ' Please consider using the`keras.utils.Sequence'\n                            ' class.'))\n        if steps_per_epoch is None:\n            if is_sequence:\n                steps_per_epoch = len(generator)\n            else:\n>               raise ValueError('`steps_per_epoch=None` is only valid for a'\n                                 ' generator based on the '\n                                 '`keras.utils.Sequence`'\n                                 ' class. Please specify `steps_per_epoch` '\n                                 'or use the `keras.utils.Sequence` class.')\nE               ValueError: `steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.\n\nkeras/engine/training_generator.py:54: ValueError",
                "traceback": "keras/legacy/interfaces.py:91: in wrapper\n    return func(*args, **kwargs)\nkeras/engine/training.py:1418: in fit_generator\n    initial_epoch=initial_epoch)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmodel = <keras.engine.sequential.Sequential object at 0x123c38f50>\ngenerator = <keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x123ca3bd0>\nsteps_per_epoch = None, epochs = 10, verbose = 0, callbacks = None\nvalidation_data = <keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x123ca3d10>\nvalidation_steps = None, class_weight = None, max_queue_size = 10, workers = 1\nuse_multiprocessing = False, shuffle = True, initial_epoch = 0\n\n    def fit_generator(model,\n                      generator,\n                      steps_per_epoch=None,\n                      epochs=1,\n                      verbose=1,\n                      callbacks=None,\n                      validation_data=None,\n                      validation_steps=None,\n                      class_weight=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      shuffle=True,\n                      initial_epoch=0):\n        \"\"\"See docstring for `Model.fit_generator`.\"\"\"\n        epoch = initial_epoch\n    \n        do_validation = bool(validation_data)\n        model._make_train_function()\n        if do_validation:\n            model._make_test_function()\n    \n        is_sequence = isinstance(generator, Sequence)\n        if not is_sequence and use_multiprocessing and workers > 1:\n            warnings.warn(\n                UserWarning('Using a generator with `use_multiprocessing=True`'\n                            ' and multiple workers may duplicate your data.'\n                            ' Please consider using the`keras.utils.Sequence'\n                            ' class.'))\n        if steps_per_epoch is None:\n            if is_sequence:\n                steps_per_epoch = len(generator)\n            else:\n>               raise ValueError('`steps_per_epoch=None` is only valid for a'\n                                 ' generator based on the '\n                                 '`keras.utils.Sequence`'\n                                 ' class. Please specify `steps_per_epoch` '\n                                 'or use the `keras.utils.Sequence` class.')\nE               ValueError: `steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.\n\nkeras/engine/training_generator.py:54: ValueError",
                "test_function_decorators": []
            }
        ]
    }
}