{
    "keras:11": {
        "/Volumes/SSD2T/bgp_envs/repos/keras_11/keras/engine/training_generator.py": {
            "buggy_functions": [
                {
                    "function_name": "fit_generator",
                    "function_code": "def fit_generator(model,\n                  generator,\n                  steps_per_epoch=None,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"See docstring for `Model.fit_generator`.\"\"\"\n    epoch = initial_epoch\n\n    do_validation = bool(validation_data)\n    model._make_train_function()\n    if do_validation:\n        model._make_test_function()\n\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a'\n                             ' generator based on the '\n                             '`keras.utils.Sequence`'\n                             ' class. Please specify `steps_per_epoch` '\n                             'or use the `keras.utils.Sequence` class.')\n\n    # python 2 has 'next', 3 has '__next__'\n    # avoid any explicit version checks\n    val_gen = (hasattr(validation_data, 'next') or\n               hasattr(validation_data, '__next__') or\n               isinstance(validation_data, Sequence))\n    if (val_gen and not isinstance(validation_data, Sequence) and\n            not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a'\n                         ' generator based on the `keras.utils.Sequence`'\n                         ' class. Please specify `validation_steps` or use'\n                         ' the `keras.utils.Sequence` class.')\n\n    # Prepare display labels.\n    out_labels = model.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n\n    # prepare callbacks\n    model.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(\n        stateful_metrics=model.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(\n            cbks.ProgbarLogger(\n                count_mode='steps',\n                stateful_metrics=model.stateful_metric_names))\n    _callbacks += (callbacks or []) + [model.history]\n    callbacks = cbks.CallbackList(_callbacks)\n\n    # it's possible to callback a different model than self:\n    if hasattr(model, 'callback_model') and model.callback_model:\n        callback_model = model.callback_model\n    else:\n        callback_model = model\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics,\n    })\n    callbacks.on_train_begin()\n\n    enqueuer = None\n    val_enqueuer = None\n\n    try:\n        if do_validation:\n            if val_gen and workers > 0:\n                # Create an Enqueuer that can be reused\n                val_data = validation_data\n                if isinstance(val_data, Sequence):\n                    val_enqueuer = OrderedEnqueuer(\n                        val_data,\n                        use_multiprocessing=use_multiprocessing)\n                    validation_steps = validation_steps or len(val_data)\n                else:\n                    val_enqueuer = GeneratorEnqueuer(\n                        val_data,\n                        use_multiprocessing=use_multiprocessing)\n                val_enqueuer.start(workers=workers,\n                                   max_queue_size=max_queue_size)\n                val_enqueuer_gen = val_enqueuer.get()\n            elif val_gen:\n                val_data = validation_data\n                if isinstance(val_data, Sequence):\n                    val_enqueuer_gen = iter_sequence_infinite(val_data)\n                    validation_steps = validation_steps or len(val_data)\n                else:\n                    val_enqueuer_gen = val_data\n            else:\n                # Prepare data for validation\n                if len(validation_data) == 2:\n                    val_x, val_y = validation_data\n                    val_sample_weight = None\n                elif len(validation_data) == 3:\n                    val_x, val_y, val_sample_weight = validation_data\n                else:\n                    raise ValueError('`validation_data` should be a tuple '\n                                     '`(val_x, val_y, val_sample_weight)` '\n                                     'or `(val_x, val_y)`. Found: ' +\n                                     str(validation_data))\n                val_x, val_y, val_sample_weights = model._standardize_user_data(\n                    val_x, val_y, val_sample_weight)\n                val_data = val_x + val_y + val_sample_weights\n                if model.uses_learning_phase and not isinstance(K.learning_phase(),\n                                                                int):\n                    val_data += [0.]\n                for cbk in callbacks:\n                    cbk.validation_data = val_data\n\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing,\n                    shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        callback_model.stop_training = False\n        # Construct epoch logs.\n        epoch_logs = {}\n        while epoch < epochs:\n            for m in model.stateful_metric_functions:\n                m.reset_states()\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n                # build batch logs\n                batch_logs = {}\n                if x is None or len(x) == 0:\n                    # Handle data tensors support when no input given\n                    # step-size = 1 for data tensors\n                    batch_size = 1\n                elif isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n\n                outs = model.train_on_batch(x, y,\n                                            sample_weight=sample_weight,\n                                            class_weight=class_weight)\n\n                outs = to_list(outs)\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n\n                batch_index += 1\n                steps_done += 1\n\n                # Epoch finished.\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = model.evaluate_generator(\n                            val_enqueuer_gen,\n                            validation_steps,\n                            workers=0)\n                    else:\n                        # No need for try/except because\n                        # data has already been validated.\n                        val_outs = model.evaluate(\n                            val_x, val_y,\n                            batch_size=batch_size,\n                            sample_weight=val_sample_weights,\n                            verbose=0)\n                    val_outs = to_list(val_outs)\n                    # Same labels assumed.\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n\n                if callback_model.stop_training:\n                    break\n\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n\n    callbacks.on_train_end()\n    return model.history\n",
                    "decorators": [],
                    "docstring": "See docstring for `Model.fit_generator`.",
                    "start_line": 21,
                    "end_line": 263,
                    "variables": {
                        "epoch": [
                            36,
                            172,
                            175,
                            249,
                            250
                        ],
                        "initial_epoch": [
                            36
                        ],
                        "do_validation": [
                            98,
                            227,
                            38,
                            40,
                            107
                        ],
                        "bool": [
                            38
                        ],
                        "validation_data": [
                            64,
                            65,
                            132,
                            133,
                            38,
                            135,
                            136,
                            141,
                            110,
                            124,
                            62,
                            63
                        ],
                        "model._make_train_function": [
                            39
                        ],
                        "model": [
                            229,
                            39,
                            263,
                            73,
                            41,
                            236,
                            77,
                            142,
                            79,
                            173,
                            145,
                            84,
                            85,
                            213,
                            89,
                            90,
                            92
                        ],
                        "model._make_test_function": [
                            41
                        ],
                        "is_sequence": [
                            164,
                            43,
                            44,
                            51,
                            152
                        ],
                        "isinstance": [
                            64,
                            65,
                            43,
                            203,
                            205,
                            111,
                            145,
                            125
                        ],
                        "generator": [
                            165,
                            167,
                            43,
                            52,
                            154,
                            159
                        ],
                        "Sequence": [
                            64,
                            65,
                            43,
                            111,
                            125
                        ],
                        "use_multiprocessing": [
                            160,
                            44,
                            114,
                            119,
                            155
                        ],
                        "workers": [
                            161,
                            108,
                            44,
                            151,
                            120
                        ],
                        "warnings.warn": [
                            45
                        ],
                        "warnings": [
                            45
                        ],
                        "UserWarning": [
                            46
                        ],
                        "steps_per_epoch": [
                            96,
                            227,
                            178,
                            50,
                            52
                        ],
                        "len": [
                            132,
                            135,
                            199,
                            115,
                            52,
                            187,
                            190,
                            127
                        ],
                        "ValueError": [
                            193,
                            67,
                            138,
                            182,
                            54
                        ],
                        "val_gen": [
                            65,
                            228,
                            108,
                            123,
                            62
                        ],
                        "hasattr": [
                            89,
                            181,
                            62,
                            63
                        ],
                        "validation_steps": [
                            231,
                            66,
                            115,
                            127
                        ],
                        "out_labels": [
                            73,
                            74,
                            243,
                            218
                        ],
                        "model.metrics_names": [
                            73
                        ],
                        "callback_metrics": [
                            74,
                            99
                        ],
                        "n": [
                            74
                        ],
                        "model.history": [
                            85,
                            77,
                            263
                        ],
                        "cbks.History": [
                            77
                        ],
                        "cbks": [
                            86,
                            82,
                            77,
                            78
                        ],
                        "_callbacks": [
                            81,
                            85,
                            78,
                            86
                        ],
                        "cbks.BaseLogger": [
                            78
                        ],
                        "model.stateful_metric_names": [
                            84,
                            79
                        ],
                        "verbose": [
                            80,
                            97
                        ],
                        "_callbacks.append": [
                            81
                        ],
                        "cbks.ProgbarLogger": [
                            82
                        ],
                        "callbacks": [
                            101,
                            262,
                            175,
                            211,
                            148,
                            85,
                            86,
                            221,
                            249,
                            93,
                            94
                        ],
                        "cbks.CallbackList": [
                            86
                        ],
                        "model.callback_model": [
                            89,
                            90
                        ],
                        "callback_model": [
                            169,
                            246,
                            90,
                            251,
                            92,
                            93
                        ],
                        "callbacks.set_model": [
                            93
                        ],
                        "callbacks.set_params": [
                            94
                        ],
                        "epochs": [
                            172,
                            95
                        ],
                        "callbacks.on_train_begin": [
                            101
                        ],
                        "enqueuer": [
                            256,
                            161,
                            162,
                            257,
                            103,
                            153,
                            158
                        ],
                        "val_enqueuer": [
                            259,
                            260,
                            104,
                            112,
                            117,
                            120,
                            122
                        ],
                        "val_data": [
                            129,
                            110,
                            111,
                            144,
                            113,
                            115,
                            147,
                            149,
                            118,
                            124,
                            125,
                            126,
                            127
                        ],
                        "OrderedEnqueuer": [
                            112,
                            153
                        ],
                        "GeneratorEnqueuer": [
                            117,
                            158
                        ],
                        "val_enqueuer.start": [
                            120
                        ],
                        "max_queue_size": [
                            121,
                            161
                        ],
                        "val_enqueuer_gen": [
                            129,
                            122,
                            126,
                            230
                        ],
                        "val_enqueuer.get": [
                            122
                        ],
                        "iter_sequence_infinite": [
                            165,
                            126
                        ],
                        "val_x": [
                            133,
                            136,
                            237,
                            142,
                            143,
                            144
                        ],
                        "val_y": [
                            133,
                            136,
                            237,
                            142,
                            143,
                            144
                        ],
                        "val_sample_weight": [
                            136,
                            134,
                            143
                        ],
                        "str": [
                            185,
                            196,
                            141
                        ],
                        "val_sample_weights": [
                            144,
                            142,
                            239
                        ],
                        "model._standardize_user_data": [
                            142
                        ],
                        "model.uses_learning_phase": [
                            145
                        ],
                        "K.learning_phase": [
                            145
                        ],
                        "K": [
                            145
                        ],
                        "int": [
                            146
                        ],
                        "cbk": [
                            148,
                            149
                        ],
                        "cbk.validation_data": [
                            149
                        ],
                        "shuffle": [
                            156
                        ],
                        "enqueuer.start": [
                            161
                        ],
                        "output_generator": [
                            162,
                            179,
                            165,
                            167
                        ],
                        "enqueuer.get": [
                            162
                        ],
                        "callback_model.stop_training": [
                            169,
                            251,
                            246
                        ],
                        "epoch_logs": [
                            249,
                            171,
                            244
                        ],
                        "m": [
                            173,
                            174
                        ],
                        "model.stateful_metric_functions": [
                            173
                        ],
                        "m.reset_states": [
                            174
                        ],
                        "callbacks.on_epoch_begin": [
                            175
                        ],
                        "steps_done": [
                            176,
                            224,
                            178,
                            227
                        ],
                        "batch_index": [
                            177,
                            209,
                            211,
                            221,
                            223
                        ],
                        "generator_output": [
                            196,
                            179,
                            181,
                            185,
                            187,
                            188,
                            190,
                            191
                        ],
                        "next": [
                            179
                        ],
                        "x": [
                            199,
                            203,
                            204,
                            205,
                            206,
                            208,
                            213,
                            188,
                            191
                        ],
                        "y": [
                            188,
                            213,
                            191
                        ],
                        "sample_weight": [
                            189,
                            214,
                            191
                        ],
                        "batch_logs": [
                            198,
                            209,
                            210,
                            211,
                            219,
                            221
                        ],
                        "batch_size": [
                            202,
                            204,
                            206,
                            238,
                            208,
                            210
                        ],
                        "list": [
                            203,
                            206
                        ],
                        "shape": [
                            204,
                            206
                        ],
                        "dict": [
                            205
                        ],
                        "x.values": [
                            206
                        ],
                        "x.shape": [
                            208
                        ],
                        "callbacks.on_batch_begin": [
                            211
                        ],
                        "outs": [
                            217,
                            218,
                            213
                        ],
                        "model.train_on_batch": [
                            213
                        ],
                        "class_weight": [
                            215
                        ],
                        "to_list": [
                            217,
                            241
                        ],
                        "l": [
                            218,
                            219,
                            244,
                            243
                        ],
                        "o": [
                            218,
                            219,
                            244,
                            243
                        ],
                        "zip": [
                            218,
                            243
                        ],
                        "callbacks.on_batch_end": [
                            221
                        ],
                        "val_outs": [
                            241,
                            243,
                            236,
                            229
                        ],
                        "model.evaluate_generator": [
                            229
                        ],
                        "model.evaluate": [
                            236
                        ],
                        "callbacks.on_epoch_end": [
                            249
                        ],
                        "enqueuer.stop": [
                            257
                        ],
                        "val_enqueuer.stop": [
                            260
                        ],
                        "callbacks.on_train_end": [
                            262
                        ]
                    },
                    "filtered_variables": {
                        "epoch": [
                            36,
                            172,
                            175,
                            249,
                            250
                        ],
                        "initial_epoch": [
                            36
                        ],
                        "do_validation": [
                            98,
                            227,
                            38,
                            40,
                            107
                        ],
                        "validation_data": [
                            64,
                            65,
                            132,
                            133,
                            38,
                            135,
                            136,
                            141,
                            110,
                            124,
                            62,
                            63
                        ],
                        "model._make_train_function": [
                            39
                        ],
                        "model": [
                            229,
                            39,
                            263,
                            73,
                            41,
                            236,
                            77,
                            142,
                            79,
                            173,
                            145,
                            84,
                            85,
                            213,
                            89,
                            90,
                            92
                        ],
                        "model._make_test_function": [
                            41
                        ],
                        "is_sequence": [
                            164,
                            43,
                            44,
                            51,
                            152
                        ],
                        "generator": [
                            165,
                            167,
                            43,
                            52,
                            154,
                            159
                        ],
                        "Sequence": [
                            64,
                            65,
                            43,
                            111,
                            125
                        ],
                        "use_multiprocessing": [
                            160,
                            44,
                            114,
                            119,
                            155
                        ],
                        "workers": [
                            161,
                            108,
                            44,
                            151,
                            120
                        ],
                        "warnings.warn": [
                            45
                        ],
                        "warnings": [
                            45
                        ],
                        "steps_per_epoch": [
                            96,
                            227,
                            178,
                            50,
                            52
                        ],
                        "val_gen": [
                            65,
                            228,
                            108,
                            123,
                            62
                        ],
                        "validation_steps": [
                            231,
                            66,
                            115,
                            127
                        ],
                        "out_labels": [
                            73,
                            74,
                            243,
                            218
                        ],
                        "model.metrics_names": [
                            73
                        ],
                        "callback_metrics": [
                            74,
                            99
                        ],
                        "n": [
                            74
                        ],
                        "model.history": [
                            85,
                            77,
                            263
                        ],
                        "cbks.History": [
                            77
                        ],
                        "cbks": [
                            86,
                            82,
                            77,
                            78
                        ],
                        "_callbacks": [
                            81,
                            85,
                            78,
                            86
                        ],
                        "cbks.BaseLogger": [
                            78
                        ],
                        "model.stateful_metric_names": [
                            84,
                            79
                        ],
                        "verbose": [
                            80,
                            97
                        ],
                        "_callbacks.append": [
                            81
                        ],
                        "cbks.ProgbarLogger": [
                            82
                        ],
                        "callbacks": [
                            101,
                            262,
                            175,
                            211,
                            148,
                            85,
                            86,
                            221,
                            249,
                            93,
                            94
                        ],
                        "cbks.CallbackList": [
                            86
                        ],
                        "model.callback_model": [
                            89,
                            90
                        ],
                        "callback_model": [
                            169,
                            246,
                            90,
                            251,
                            92,
                            93
                        ],
                        "callbacks.set_model": [
                            93
                        ],
                        "callbacks.set_params": [
                            94
                        ],
                        "epochs": [
                            172,
                            95
                        ],
                        "callbacks.on_train_begin": [
                            101
                        ],
                        "enqueuer": [
                            256,
                            161,
                            162,
                            257,
                            103,
                            153,
                            158
                        ],
                        "val_enqueuer": [
                            259,
                            260,
                            104,
                            112,
                            117,
                            120,
                            122
                        ],
                        "val_data": [
                            129,
                            110,
                            111,
                            144,
                            113,
                            115,
                            147,
                            149,
                            118,
                            124,
                            125,
                            126,
                            127
                        ],
                        "OrderedEnqueuer": [
                            112,
                            153
                        ],
                        "GeneratorEnqueuer": [
                            117,
                            158
                        ],
                        "val_enqueuer.start": [
                            120
                        ],
                        "max_queue_size": [
                            121,
                            161
                        ],
                        "val_enqueuer_gen": [
                            129,
                            122,
                            126,
                            230
                        ],
                        "val_enqueuer.get": [
                            122
                        ],
                        "iter_sequence_infinite": [
                            165,
                            126
                        ],
                        "val_x": [
                            133,
                            136,
                            237,
                            142,
                            143,
                            144
                        ],
                        "val_y": [
                            133,
                            136,
                            237,
                            142,
                            143,
                            144
                        ],
                        "val_sample_weight": [
                            136,
                            134,
                            143
                        ],
                        "val_sample_weights": [
                            144,
                            142,
                            239
                        ],
                        "model._standardize_user_data": [
                            142
                        ],
                        "model.uses_learning_phase": [
                            145
                        ],
                        "K.learning_phase": [
                            145
                        ],
                        "K": [
                            145
                        ],
                        "cbk": [
                            148,
                            149
                        ],
                        "cbk.validation_data": [
                            149
                        ],
                        "shuffle": [
                            156
                        ],
                        "enqueuer.start": [
                            161
                        ],
                        "output_generator": [
                            162,
                            179,
                            165,
                            167
                        ],
                        "enqueuer.get": [
                            162
                        ],
                        "callback_model.stop_training": [
                            169,
                            251,
                            246
                        ],
                        "epoch_logs": [
                            249,
                            171,
                            244
                        ],
                        "m": [
                            173,
                            174
                        ],
                        "model.stateful_metric_functions": [
                            173
                        ],
                        "m.reset_states": [
                            174
                        ],
                        "callbacks.on_epoch_begin": [
                            175
                        ],
                        "steps_done": [
                            176,
                            224,
                            178,
                            227
                        ],
                        "batch_index": [
                            177,
                            209,
                            211,
                            221,
                            223
                        ],
                        "generator_output": [
                            196,
                            179,
                            181,
                            185,
                            187,
                            188,
                            190,
                            191
                        ],
                        "x": [
                            199,
                            203,
                            204,
                            205,
                            206,
                            208,
                            213,
                            188,
                            191
                        ],
                        "y": [
                            188,
                            213,
                            191
                        ],
                        "sample_weight": [
                            189,
                            214,
                            191
                        ],
                        "batch_logs": [
                            198,
                            209,
                            210,
                            211,
                            219,
                            221
                        ],
                        "batch_size": [
                            202,
                            204,
                            206,
                            238,
                            208,
                            210
                        ],
                        "shape": [
                            204,
                            206
                        ],
                        "x.values": [
                            206
                        ],
                        "x.shape": [
                            208
                        ],
                        "callbacks.on_batch_begin": [
                            211
                        ],
                        "outs": [
                            217,
                            218,
                            213
                        ],
                        "model.train_on_batch": [
                            213
                        ],
                        "class_weight": [
                            215
                        ],
                        "to_list": [
                            217,
                            241
                        ],
                        "l": [
                            218,
                            219,
                            244,
                            243
                        ],
                        "o": [
                            218,
                            219,
                            244,
                            243
                        ],
                        "callbacks.on_batch_end": [
                            221
                        ],
                        "val_outs": [
                            241,
                            243,
                            236,
                            229
                        ],
                        "model.evaluate_generator": [
                            229
                        ],
                        "model.evaluate": [
                            236
                        ],
                        "callbacks.on_epoch_end": [
                            249
                        ],
                        "enqueuer.stop": [
                            257
                        ],
                        "val_enqueuer.stop": [
                            260
                        ],
                        "callbacks.on_train_end": [
                            262
                        ]
                    },
                    "diff_line_number": 43,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x12fbbe810>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": null
                                },
                                "model._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.sequential.Sequential object at 0x130285490>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x130285490>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x130285490>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x130219f10>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "callback_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.history": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_enqueuer_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.sequential.Sequential object at 0x130285490>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.sequential.Sequential object at 0x130285490>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.sequential.Sequential object at 0x130285490>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.sequential.Sequential object at 0x130285490>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x120b7ee90>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": null
                                },
                                "model._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x120b40310>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x120b7ee50>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "callback_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.history": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_enqueuer_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "epoch": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x120b7ee90>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": null
                                },
                                "model._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x120b40310>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x120b7ee50>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "32",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_use_sequence_api": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'acc', 'val_loss', 'val_acc']",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x120bbe4d0>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x120c52e50>, <keras.callbacks.History object at 0x120bbe4d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x120b9ed20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x120c8eed0>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x120b40310>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x120c8eed0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x120c8eed0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x120c8eed0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x120cb9a10>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x120c8ee90>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x120b7ee90>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.start": {
                                    "variable_value": "<bound method SequenceEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x120c8ee90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_enqueuer_gen": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x120c416d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "val_enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x120c8ee90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method SequenceEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x120cb9a10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x120c41ad0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x120cb9a10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 0.2692825973033905, 'val_acc': 1.0, 'loss': 0.27985356187820437, 'acc': 0.974}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x120c8eed0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "32",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "32",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[-5.77073038e-01,  2.65514374e-01, -6.92722201e-02],\n         [ 4.63180065e-01,  3.83769602e-01,  2.65806704e-03],\n         [-2.57792789e-02,  2.57715434e-01,  2.44771361e-01],\n         ...,\n         [-1.62279710e-01,  5.73989630e-01, -7.18650103e-01],\n         [-3.73973697e-01, -3.07738870e-01,  3.48411113e-01],\n         [ 6.11826539e-01, -5.99355519e-01,  4.01162356e-03]],\n\n        [[ 6.52143300e-01,  2.07031026e-01,  1.80392981e-01],\n         [ 1.38842547e-02,  6.09188795e-01,  3.76168132e-01],\n         [ 1.15974295e+00,  2.98109859e-01,  9.48502421e-01],\n         ...,\n         [ 2.30887040e-01, -1.86567500e-01, -1.55940950e-01],\n         [ 4.13926244e-01, -6.06453836e-01,  6.63407028e-01],\n         [ 1.29284585e+00,  3.40767086e-01, -1.77277178e-01]],\n\n        [[ 1.98382473e+00, -8.21603894e-01, -9.77937698e-01],\n         [ 4.68532026e-01,  7.46887207e-01, -9.05793369e-01],\n         [ 7.64596105e-01,  5.53558290e-01, -5.03512979e-01],\n         ...,\n         [ 1.23409402e+00, -6.01209879e-01,  8.44758034e-01],\n         [ 1.22348046e+00, -7.60532439e-01, -9.35974360e-01],\n         [ 1.72053128e-01, -8.01569760e-01,  1.62897736e-01]],\n\n        ...,\n\n        [[-6.03762329e-01, -7.04870582e-01, -8.31274986e-01],\n         [-1.07094303e-01, -5.93967259e-01,  1.07199454e+00],\n         [-3.40391874e-01,  6.52277350e-01, -2.07912624e-02],\n         ...,\n         [-4.26181614e-01,  1.73194736e-01, -7.58509040e-01],\n         [-5.70009649e-02,  1.01566243e+00,  2.18047738e+00],\n         [ 9.72952187e-01, -5.04258990e-01,  1.37675181e-01]],\n\n        [[-3.65120083e-01,  6.12232089e-01, -1.13050275e-01],\n         [ 3.31550449e-01, -7.55165994e-01, -2.83007115e-01],\n         [ 5.86715996e-01, -1.60615098e+00, -1.03343211e-01],\n         ...,\n         [ 7.09141046e-02, -9.25464332e-02,  3.22574288e-01],\n         [ 5.54701447e-01,  1.02489442e-02,  1.17789023e-01],\n         [ 5.04170954e-01,  3.86942863e-01, -2.36958563e-01]],\n\n        [[ 7.70582333e-02, -8.42555463e-01, -2.52290100e-01],\n         [-1.40540135e+00,  1.30046487e+00,  5.79052448e-01],\n         [-8.79401684e-01, -3.66010100e-01,  5.09572864e-01],\n         ...,\n         [ 1.03663898e+00, -8.79351377e-01,  1.19119108e+00],\n         [-5.80980778e-01,  1.05317008e+00,  3.52679312e-01],\n         [-1.03917086e+00,  3.89056653e-02, -1.23759353e+00]]],\n\n\n       [[[ 4.13203144e+00,  2.57138419e+00,  1.59125447e+00],\n         [ 2.48305178e+00,  1.86988080e+00,  2.33270550e+00],\n         [ 1.34805930e+00,  1.78115737e+00,  1.18923724e+00],\n         ...,\n         [ 1.65633976e+00,  1.79618096e+00,  1.61487794e+00],\n         [ 2.85621262e+00,  1.29409289e+00,  1.91767550e+00],\n         [ 1.74490416e+00,  1.43296385e+00,  1.85967088e+00]],\n\n        [[ 2.74036574e+00,  2.55606222e+00,  2.19658351e+00],\n         [ 1.93978906e+00,  2.27901745e+00,  2.31030035e+00],\n         [ 2.03268456e+00,  2.03005266e+00,  1.04561400e+00],\n         ...,\n         [ 2.09425521e+00,  8.75553846e-01,  1.82190192e+00],\n         [ 1.00290465e+00,  1.47704184e+00,  4.64703053e-01],\n         [ 1.07858014e+00,  2.40978742e+00,  1.75093913e+00]],\n\n        [[ 2.03517056e+00,  2.17005825e+00,  3.08300996e+00],\n         [ 1.61066031e+00,  2.56317878e+00,  1.42773533e+00],\n         [ 2.35753822e+00,  1.06977630e+00,  2.52583265e+00],\n         ...,\n         [ 1.93265307e+00,  1.92020154e+00,  2.40679073e+00],\n         [ 1.41372764e+00,  1.41755486e+00,  2.95969772e+00],\n         [ 1.13323879e+00,  1.39980912e+00,  1.53741348e+00]],\n\n        ...,\n\n        [[ 2.07866573e+00,  2.14878821e+00,  1.96242571e+00],\n         [ 1.53947675e+00,  1.83726442e+00,  3.24747443e+00],\n         [ 1.96631360e+00,  8.92052472e-01,  1.82240260e+00],\n         ...,\n         [ 1.98522091e+00,  2.23456430e+00,  2.27767277e+00],\n         [ 1.18478155e+00,  2.86305523e+00,  1.47068143e-01],\n         [ 3.07871723e+00,  2.01171184e+00,  1.70208466e+00]],\n\n        [[ 3.22705340e+00,  2.05120683e+00,  4.22530317e+00],\n         [ 2.55055404e+00,  2.63724589e+00,  1.96307909e+00],\n         [ 1.69878626e+00,  2.26157403e+00,  1.61860609e+00],\n         ...,\n         [ 1.66912222e+00,  2.45448065e+00,  2.11237526e+00],\n         [ 1.78837132e+00,  2.54927230e+00,  1.94225597e+00],\n         [ 1.36855614e+00,  2.44852829e+00,  1.80284667e+00]],\n\n        [[ 2.55831766e+00,  1.06094623e+00,  2.66649103e+00],\n         [ 1.92714858e+00,  1.99696684e+00,  3.05544138e+00],\n         [ 1.70281255e+00,  2.61319923e+00,  1.82813025e+00],\n         ...,\n         [ 1.00302970e+00,  1.91369605e+00,  3.02942109e+00],\n         [ 2.23022246e+00,  2.56061792e+00,  3.21827865e+00],\n         [ 2.09571648e+00,  1.66089404e+00,  2.13014030e+00]]],\n\n\n       [[[ 2.36945224e+00,  7.14906096e-01,  3.00379539e+00],\n         [ 2.03540874e+00,  1.23526597e+00,  1.84684849e+00],\n         [ 2.81230807e+00,  1.56254470e+00,  2.97642064e+00],\n         ...,\n         [ 1.39325309e+00,  2.01347995e+00,  9.50658262e-01],\n         [ 1.42074490e+00,  2.03488135e+00,  2.47859859e+00],\n         [ 1.15070534e+00,  2.39013886e+00,  2.99207044e+00]],\n\n        [[ 3.20085192e+00,  2.19400811e+00,  1.13632154e+00],\n         [ 1.42818666e+00,  1.36895168e+00,  2.23476815e+00],\n         [ 2.31829977e+00,  2.40703154e+00,  7.15534985e-01],\n         ...,\n         [ 2.52613330e+00,  2.64336348e+00,  1.76269007e+00],\n         [ 1.93217111e+00,  2.66105819e+00,  2.36140227e+00],\n         [ 8.36672902e-01,  2.56661034e+00,  1.49585545e+00]],\n\n        [[ 2.29846406e+00,  2.61408138e+00,  2.41467595e+00],\n         [ 3.41371059e+00,  1.60404384e+00,  2.25453234e+00],\n         [ 1.44351232e+00,  2.80095696e+00,  3.22374225e+00],\n         ...,\n         [ 1.93935239e+00,  1.64734495e+00,  2.82779694e+00],\n         [ 1.67546916e+00,  2.33175850e+00,  3.42088723e+00],\n         [ 2.19708276e+00,  2.34040523e+00,  2.76789451e+00]],\n\n        ...,\n\n        [[ 1.83275688e+00,  1.58545303e+00,  2.56972551e+00],\n         [ 1.93531716e+00,  1.51305425e+00,  1.26229358e+00],\n         [ 2.33838534e+00,  2.55771780e+00,  1.51823139e+00],\n         ...,\n         [ 1.43443418e+00,  1.89617407e+00,  2.54675961e+00],\n         [ 1.64472139e+00,  1.54864120e+00,  2.61529565e+00],\n         [ 3.76552796e+00,  3.24052048e+00,  2.65530682e+00]],\n\n        [[ 2.07774544e+00,  3.27527642e+00,  1.98285341e+00],\n         [ 2.36813450e+00,  2.92860603e+00,  2.16850924e+00],\n         [ 1.32875991e+00,  2.05511808e+00,  1.78849363e+00],\n         ...,\n         [ 1.66544724e+00,  2.73816633e+00,  1.74069786e+00],\n         [ 2.49140859e+00,  2.17170072e+00,  1.40816426e+00],\n         [ 7.98846900e-01,  1.51611185e+00,  2.77846456e+00]],\n\n        [[ 1.00420022e+00,  2.83805299e+00,  3.20400643e+00],\n         [ 9.84231293e-01,  1.14667642e+00,  2.17644095e+00],\n         [ 2.68942738e+00,  2.58090281e+00,  1.23451304e+00],\n         ...,\n         [ 1.98807192e+00,  1.44371116e+00,  2.29384351e+00],\n         [ 2.28236175e+00,  2.35026908e+00,  2.62960172e+00],\n         [ 3.17494011e+00,  1.22085595e+00,  2.82023072e+00]]],\n\n\n       ...,\n\n\n       [[[ 7.93522060e-01,  1.53701439e-01, -1.58350611e+00],\n         [-3.71692747e-01, -1.43349576e+00, -6.12828910e-01],\n         [ 1.09553330e-01,  3.74809206e-01,  8.89499605e-01],\n         ...,\n         [-9.66590703e-01, -6.62264153e-02, -8.12719524e-01],\n         [-8.01850736e-01, -4.87399995e-02,  5.42678535e-02],\n         [ 8.22626770e-01, -2.24474624e-01, -6.04090132e-02]],\n\n        [[-1.44013655e+00, -7.81954005e-02, -5.27542949e-01],\n         [-7.51732439e-02, -6.63248181e-01, -6.52944207e-01],\n         [-1.53431177e-01,  6.63410068e-01,  1.99151129e-01],\n         ...,\n         [-1.33305502e+00,  1.15349734e+00, -1.15057695e+00],\n         [ 7.56564498e-01,  9.64302003e-01, -1.11853227e-01],\n         [ 1.12833476e+00, -5.00284545e-02, -2.43682135e-02]],\n\n        [[-2.71046132e-01,  8.88539851e-01, -6.31108642e-01],\n         [ 8.18696260e-01, -1.82021465e-02, -4.54097576e-02],\n         [ 9.24170688e-02,  2.78207511e-01,  6.31753147e-01],\n         ...,\n         [ 1.30291998e+00,  5.41971564e-01,  2.08548680e-01],\n         [ 1.81019291e-01,  1.02043539e-01,  9.63564515e-01],\n         [-9.45508301e-01, -1.19792163e+00, -4.63714659e-01]],\n\n        ...,\n\n        [[ 5.00076674e-02, -7.79413104e-01,  5.20327389e-01],\n         [ 1.36984348e-01,  1.82358652e-01, -3.09904754e-01],\n         [-5.26017964e-01,  3.30648661e-01,  3.65847051e-01],\n         ...,\n         [-6.63449109e-01, -6.28997028e-01,  8.84848163e-02],\n         [-1.79451048e+00,  2.95608759e-01, -6.01024330e-01],\n         [ 5.57775974e-01, -1.27668455e-01, -4.81369913e-01]],\n\n        [[ 6.08046591e-01, -1.10068899e-02,  9.36093688e-01],\n         [-1.27208972e+00,  2.31193751e-01, -5.66759169e-01],\n         [-1.06922388e+00,  6.90243542e-01, -1.14183605e+00],\n         ...,\n         [ 3.70076507e-01, -5.84252179e-01,  3.54394794e-01],\n         [-1.26931027e-01, -4.35944259e-01,  5.72219610e-01],\n         [ 3.07385087e-01, -2.36788373e-02, -4.93368119e-01]],\n\n        [[-5.07946372e-01,  4.51967865e-01, -4.97482657e-01],\n         [ 3.13654095e-02,  3.15270782e-01, -4.60920721e-01],\n         [ 8.55579317e-01,  3.69081974e-01, -1.45523757e-01],\n         ...,\n         [ 1.83400407e-01, -7.90665150e-01, -2.29615401e-02],\n         [-6.90317214e-01, -4.56646413e-01, -6.24141395e-01],\n         [ 2.01628745e-01, -8.36180270e-01,  6.21205926e-01]]],\n\n\n       [[[ 1.84675777e+00,  2.31591845e+00,  2.11491561e+00],\n         [ 1.48641324e+00,  1.11879933e+00,  3.31646824e+00],\n         [ 7.37202227e-01,  2.49555326e+00,  1.52738976e+00],\n         ...,\n         [ 1.85824406e+00,  1.92802715e+00,  1.77860773e+00],\n         [ 3.12556839e+00,  2.81455100e-01,  3.44858766e-01],\n         [ 2.58370638e+00,  1.55965424e+00,  1.77675211e+00]],\n\n        [[ 2.80154586e+00,  2.44223547e+00,  1.40329003e+00],\n         [ 2.12305641e+00,  3.44577193e-01,  2.72889161e+00],\n         [ 2.18250751e+00,  1.13184679e+00,  3.16770363e+00],\n         ...,\n         [ 1.56742334e+00,  2.22856283e+00,  1.74496460e+00],\n         [ 2.25052214e+00,  3.02105212e+00,  2.77113366e+00],\n         [ 3.16159654e+00,  1.87520051e+00,  2.86477232e+00]],\n\n        [[ 2.01063585e+00,  2.69382596e+00,  2.18850851e+00],\n         [ 1.53760123e+00,  1.87605345e+00,  1.30326009e+00],\n         [ 1.82079923e+00,  2.60125709e+00,  2.02100468e+00],\n         ...,\n         [ 1.21720791e+00,  2.74502683e+00,  1.30241036e+00],\n         [ 2.36592913e+00,  3.05150104e+00,  1.45114851e+00],\n         [ 1.23138785e+00,  2.05622458e+00,  1.82149804e+00]],\n\n        ...,\n\n        [[ 2.40942144e+00,  1.88735521e+00,  1.59633183e+00],\n         [ 1.44632709e+00,  1.44676483e+00,  1.99114633e+00],\n         [ 2.68018937e+00,  2.40573096e+00,  1.59201086e+00],\n         ...,\n         [ 6.52662933e-01,  1.60760462e+00,  2.84350252e+00],\n         [ 2.23377824e+00,  1.54281640e+00,  1.83437908e+00],\n         [ 2.41418266e+00,  2.92721796e+00,  3.42429876e+00]],\n\n        [[ 1.60074592e+00,  1.98082817e+00,  2.99251437e+00],\n         [ 1.51196945e+00,  1.28057646e-02,  2.55843472e+00],\n         [ 3.05538297e+00,  1.51148927e+00,  2.09608364e+00],\n         ...,\n         [ 2.02757025e+00,  1.86643982e+00,  1.78556383e+00],\n         [ 1.83081877e+00,  6.26421422e-02,  2.62066126e+00],\n         [ 1.12535226e+00,  9.85652268e-01,  2.29556394e+00]],\n\n        [[ 1.18825960e+00,  2.64866519e+00,  1.37389660e+00],\n         [ 2.05703473e+00,  7.27054477e-01,  2.72744656e+00],\n         [ 2.32166767e+00,  1.71819365e+00,  2.08185363e+00],\n         ...,\n         [ 6.89537525e-01,  7.77160048e-01,  1.74469030e+00],\n         [ 1.45112526e+00,  2.50817919e+00,  4.18756962e-01],\n         [ 1.73838592e+00,  2.43417811e+00,  1.42113268e+00]]],\n\n\n       [[[ 1.05384219e+00, -1.60155907e-01,  1.08368027e+00],\n         [ 8.19012344e-01, -7.69000351e-02, -1.24258764e-01],\n         [-4.73061413e-01, -5.55450857e-01,  6.18691802e-01],\n         ...,\n         [ 3.39164793e-01, -4.42609578e-01,  8.27018142e-01],\n         [-5.52943885e-01, -1.62943050e-01,  6.39638156e-02],\n         [-3.93407434e-01, -1.76362109e+00, -3.42213273e-01]],\n\n        [[-7.93811083e-01,  1.00232393e-01, -8.78319800e-01],\n         [ 1.31123519e+00,  8.16873550e-01, -3.83141518e-01],\n         [-4.02045697e-01, -8.69798601e-01, -1.38286233e-01],\n         ...,\n         [-2.35286370e-01, -8.41029465e-01, -3.96703899e-01],\n         [ 7.78184924e-03, -6.90800130e-01, -1.06067918e-01],\n         [ 6.05117857e-01,  6.90261066e-01, -4.60868299e-01]],\n\n        [[ 1.65184927e+00,  7.45583415e-01, -4.03097123e-01],\n         [-6.35984778e-01, -5.39281070e-02, -5.33834994e-01],\n         [-1.89131722e-02,  3.09998870e-01, -1.05834794e+00],\n         ...,\n         [ 8.07317615e-01, -9.06297922e-01,  3.72513682e-01],\n         [ 2.77569205e-01,  6.46792769e-01, -7.64785111e-01],\n         [ 1.93017706e-01, -7.26050675e-01, -7.06522882e-01]],\n\n        ...,\n\n        [[ 4.56918292e-02, -4.85125005e-01, -4.15910780e-01],\n         [ 5.91297030e-01,  6.96133614e-01,  3.57561469e-01],\n         [ 5.07974565e-01, -1.67423621e-01,  2.09528700e-01],\n         ...,\n         [-1.18825483e+00, -3.65607977e-01, -5.68141282e-01],\n         [ 1.74787447e-01,  6.85641356e-03,  3.57567102e-01],\n         [ 1.01473975e+00,  1.75692892e+00, -5.73123872e-01]],\n\n        [[-1.26523745e+00,  2.18436971e-01,  4.30945367e-01],\n         [ 2.51692086e-01,  4.86227095e-01, -1.24016605e-01],\n         [-3.96518022e-01, -6.41876042e-01,  8.65564167e-01],\n         ...,\n         [-1.54275134e-01, -6.32727146e-01, -3.51163775e-01],\n         [ 1.24255049e+00,  7.15333521e-01,  6.97429776e-02],\n         [ 5.89184284e-01,  8.46381009e-01, -5.94406247e-01]],\n\n        [[-4.09344494e-01, -5.41902781e-01,  5.61937928e-01],\n         [-2.98311532e-01,  8.94119978e-01, -8.07527676e-02],\n         [ 5.19126654e-01,  2.49722198e-01, -3.25717151e-01],\n         ...,\n         [-9.10430681e-03,  1.07278965e-01, -1.96902871e-01],\n         [-6.61073089e-01,  1.28149128e+00,  4.18785870e-01],\n         [-4.46890295e-01, -4.47850943e-01, -1.16305411e+00]]]],\n      dtype=float32), array([[1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[-5.77073038e-01,  2.65514374e-01, -6.92722201e-02],\n         [ 4.63180065e-01,  3.83769602e-01,  2.65806704e-03],\n         [-2.57792789e-02,  2.57715434e-01,  2.44771361e-01],\n         ...,\n         [-1.62279710e-01,  5.73989630e-01, -7.18650103e-01],\n         [-3.73973697e-01, -3.07738870e-01,  3.48411113e-01],\n         [ 6.11826539e-01, -5.99355519e-01,  4.01162356e-03]],\n\n        [[ 6.52143300e-01,  2.07031026e-01,  1.80392981e-01],\n         [ 1.38842547e-02,  6.09188795e-01,  3.76168132e-01],\n         [ 1.15974295e+00,  2.98109859e-01,  9.48502421e-01],\n         ...,\n         [ 2.30887040e-01, -1.86567500e-01, -1.55940950e-01],\n         [ 4.13926244e-01, -6.06453836e-01,  6.63407028e-01],\n         [ 1.29284585e+00,  3.40767086e-01, -1.77277178e-01]],\n\n        [[ 1.98382473e+00, -8.21603894e-01, -9.77937698e-01],\n         [ 4.68532026e-01,  7.46887207e-01, -9.05793369e-01],\n         [ 7.64596105e-01,  5.53558290e-01, -5.03512979e-01],\n         ...,\n         [ 1.23409402e+00, -6.01209879e-01,  8.44758034e-01],\n         [ 1.22348046e+00, -7.60532439e-01, -9.35974360e-01],\n         [ 1.72053128e-01, -8.01569760e-01,  1.62897736e-01]],\n\n        ...,\n\n        [[-6.03762329e-01, -7.04870582e-01, -8.31274986e-01],\n         [-1.07094303e-01, -5.93967259e-01,  1.07199454e+00],\n         [-3.40391874e-01,  6.52277350e-01, -2.07912624e-02],\n         ...,\n         [-4.26181614e-01,  1.73194736e-01, -7.58509040e-01],\n         [-5.70009649e-02,  1.01566243e+00,  2.18047738e+00],\n         [ 9.72952187e-01, -5.04258990e-01,  1.37675181e-01]],\n\n        [[-3.65120083e-01,  6.12232089e-01, -1.13050275e-01],\n         [ 3.31550449e-01, -7.55165994e-01, -2.83007115e-01],\n         [ 5.86715996e-01, -1.60615098e+00, -1.03343211e-01],\n         ...,\n         [ 7.09141046e-02, -9.25464332e-02,  3.22574288e-01],\n         [ 5.54701447e-01,  1.02489442e-02,  1.17789023e-01],\n         [ 5.04170954e-01,  3.86942863e-01, -2.36958563e-01]],\n\n        [[ 7.70582333e-02, -8.42555463e-01, -2.52290100e-01],\n         [-1.40540135e+00,  1.30046487e+00,  5.79052448e-01],\n         [-8.79401684e-01, -3.66010100e-01,  5.09572864e-01],\n         ...,\n         [ 1.03663898e+00, -8.79351377e-01,  1.19119108e+00],\n         [-5.80980778e-01,  1.05317008e+00,  3.52679312e-01],\n         [-1.03917086e+00,  3.89056653e-02, -1.23759353e+00]]],\n\n\n       [[[ 4.13203144e+00,  2.57138419e+00,  1.59125447e+00],\n         [ 2.48305178e+00,  1.86988080e+00,  2.33270550e+00],\n         [ 1.34805930e+00,  1.78115737e+00,  1.18923724e+00],\n         ...,\n         [ 1.65633976e+00,  1.79618096e+00,  1.61487794e+00],\n         [ 2.85621262e+00,  1.29409289e+00,  1.91767550e+00],\n         [ 1.74490416e+00,  1.43296385e+00,  1.85967088e+00]],\n\n        [[ 2.74036574e+00,  2.55606222e+00,  2.19658351e+00],\n         [ 1.93978906e+00,  2.27901745e+00,  2.31030035e+00],\n         [ 2.03268456e+00,  2.03005266e+00,  1.04561400e+00],\n         ...,\n         [ 2.09425521e+00,  8.75553846e-01,  1.82190192e+00],\n         [ 1.00290465e+00,  1.47704184e+00,  4.64703053e-01],\n         [ 1.07858014e+00,  2.40978742e+00,  1.75093913e+00]],\n\n        [[ 2.03517056e+00,  2.17005825e+00,  3.08300996e+00],\n         [ 1.61066031e+00,  2.56317878e+00,  1.42773533e+00],\n         [ 2.35753822e+00,  1.06977630e+00,  2.52583265e+00],\n         ...,\n         [ 1.93265307e+00,  1.92020154e+00,  2.40679073e+00],\n         [ 1.41372764e+00,  1.41755486e+00,  2.95969772e+00],\n         [ 1.13323879e+00,  1.39980912e+00,  1.53741348e+00]],\n\n        ...,\n\n        [[ 2.07866573e+00,  2.14878821e+00,  1.96242571e+00],\n         [ 1.53947675e+00,  1.83726442e+00,  3.24747443e+00],\n         [ 1.96631360e+00,  8.92052472e-01,  1.82240260e+00],\n         ...,\n         [ 1.98522091e+00,  2.23456430e+00,  2.27767277e+00],\n         [ 1.18478155e+00,  2.86305523e+00,  1.47068143e-01],\n         [ 3.07871723e+00,  2.01171184e+00,  1.70208466e+00]],\n\n        [[ 3.22705340e+00,  2.05120683e+00,  4.22530317e+00],\n         [ 2.55055404e+00,  2.63724589e+00,  1.96307909e+00],\n         [ 1.69878626e+00,  2.26157403e+00,  1.61860609e+00],\n         ...,\n         [ 1.66912222e+00,  2.45448065e+00,  2.11237526e+00],\n         [ 1.78837132e+00,  2.54927230e+00,  1.94225597e+00],\n         [ 1.36855614e+00,  2.44852829e+00,  1.80284667e+00]],\n\n        [[ 2.55831766e+00,  1.06094623e+00,  2.66649103e+00],\n         [ 1.92714858e+00,  1.99696684e+00,  3.05544138e+00],\n         [ 1.70281255e+00,  2.61319923e+00,  1.82813025e+00],\n         ...,\n         [ 1.00302970e+00,  1.91369605e+00,  3.02942109e+00],\n         [ 2.23022246e+00,  2.56061792e+00,  3.21827865e+00],\n         [ 2.09571648e+00,  1.66089404e+00,  2.13014030e+00]]],\n\n\n       [[[ 2.36945224e+00,  7.14906096e-01,  3.00379539e+00],\n         [ 2.03540874e+00,  1.23526597e+00,  1.84684849e+00],\n         [ 2.81230807e+00,  1.56254470e+00,  2.97642064e+00],\n         ...,\n         [ 1.39325309e+00,  2.01347995e+00,  9.50658262e-01],\n         [ 1.42074490e+00,  2.03488135e+00,  2.47859859e+00],\n         [ 1.15070534e+00,  2.39013886e+00,  2.99207044e+00]],\n\n        [[ 3.20085192e+00,  2.19400811e+00,  1.13632154e+00],\n         [ 1.42818666e+00,  1.36895168e+00,  2.23476815e+00],\n         [ 2.31829977e+00,  2.40703154e+00,  7.15534985e-01],\n         ...,\n         [ 2.52613330e+00,  2.64336348e+00,  1.76269007e+00],\n         [ 1.93217111e+00,  2.66105819e+00,  2.36140227e+00],\n         [ 8.36672902e-01,  2.56661034e+00,  1.49585545e+00]],\n\n        [[ 2.29846406e+00,  2.61408138e+00,  2.41467595e+00],\n         [ 3.41371059e+00,  1.60404384e+00,  2.25453234e+00],\n         [ 1.44351232e+00,  2.80095696e+00,  3.22374225e+00],\n         ...,\n         [ 1.93935239e+00,  1.64734495e+00,  2.82779694e+00],\n         [ 1.67546916e+00,  2.33175850e+00,  3.42088723e+00],\n         [ 2.19708276e+00,  2.34040523e+00,  2.76789451e+00]],\n\n        ...,\n\n        [[ 1.83275688e+00,  1.58545303e+00,  2.56972551e+00],\n         [ 1.93531716e+00,  1.51305425e+00,  1.26229358e+00],\n         [ 2.33838534e+00,  2.55771780e+00,  1.51823139e+00],\n         ...,\n         [ 1.43443418e+00,  1.89617407e+00,  2.54675961e+00],\n         [ 1.64472139e+00,  1.54864120e+00,  2.61529565e+00],\n         [ 3.76552796e+00,  3.24052048e+00,  2.65530682e+00]],\n\n        [[ 2.07774544e+00,  3.27527642e+00,  1.98285341e+00],\n         [ 2.36813450e+00,  2.92860603e+00,  2.16850924e+00],\n         [ 1.32875991e+00,  2.05511808e+00,  1.78849363e+00],\n         ...,\n         [ 1.66544724e+00,  2.73816633e+00,  1.74069786e+00],\n         [ 2.49140859e+00,  2.17170072e+00,  1.40816426e+00],\n         [ 7.98846900e-01,  1.51611185e+00,  2.77846456e+00]],\n\n        [[ 1.00420022e+00,  2.83805299e+00,  3.20400643e+00],\n         [ 9.84231293e-01,  1.14667642e+00,  2.17644095e+00],\n         [ 2.68942738e+00,  2.58090281e+00,  1.23451304e+00],\n         ...,\n         [ 1.98807192e+00,  1.44371116e+00,  2.29384351e+00],\n         [ 2.28236175e+00,  2.35026908e+00,  2.62960172e+00],\n         [ 3.17494011e+00,  1.22085595e+00,  2.82023072e+00]]],\n\n\n       ...,\n\n\n       [[[ 7.93522060e-01,  1.53701439e-01, -1.58350611e+00],\n         [-3.71692747e-01, -1.43349576e+00, -6.12828910e-01],\n         [ 1.09553330e-01,  3.74809206e-01,  8.89499605e-01],\n         ...,\n         [-9.66590703e-01, -6.62264153e-02, -8.12719524e-01],\n         [-8.01850736e-01, -4.87399995e-02,  5.42678535e-02],\n         [ 8.22626770e-01, -2.24474624e-01, -6.04090132e-02]],\n\n        [[-1.44013655e+00, -7.81954005e-02, -5.27542949e-01],\n         [-7.51732439e-02, -6.63248181e-01, -6.52944207e-01],\n         [-1.53431177e-01,  6.63410068e-01,  1.99151129e-01],\n         ...,\n         [-1.33305502e+00,  1.15349734e+00, -1.15057695e+00],\n         [ 7.56564498e-01,  9.64302003e-01, -1.11853227e-01],\n         [ 1.12833476e+00, -5.00284545e-02, -2.43682135e-02]],\n\n        [[-2.71046132e-01,  8.88539851e-01, -6.31108642e-01],\n         [ 8.18696260e-01, -1.82021465e-02, -4.54097576e-02],\n         [ 9.24170688e-02,  2.78207511e-01,  6.31753147e-01],\n         ...,\n         [ 1.30291998e+00,  5.41971564e-01,  2.08548680e-01],\n         [ 1.81019291e-01,  1.02043539e-01,  9.63564515e-01],\n         [-9.45508301e-01, -1.19792163e+00, -4.63714659e-01]],\n\n        ...,\n\n        [[ 5.00076674e-02, -7.79413104e-01,  5.20327389e-01],\n         [ 1.36984348e-01,  1.82358652e-01, -3.09904754e-01],\n         [-5.26017964e-01,  3.30648661e-01,  3.65847051e-01],\n         ...,\n         [-6.63449109e-01, -6.28997028e-01,  8.84848163e-02],\n         [-1.79451048e+00,  2.95608759e-01, -6.01024330e-01],\n         [ 5.57775974e-01, -1.27668455e-01, -4.81369913e-01]],\n\n        [[ 6.08046591e-01, -1.10068899e-02,  9.36093688e-01],\n         [-1.27208972e+00,  2.31193751e-01, -5.66759169e-01],\n         [-1.06922388e+00,  6.90243542e-01, -1.14183605e+00],\n         ...,\n         [ 3.70076507e-01, -5.84252179e-01,  3.54394794e-01],\n         [-1.26931027e-01, -4.35944259e-01,  5.72219610e-01],\n         [ 3.07385087e-01, -2.36788373e-02, -4.93368119e-01]],\n\n        [[-5.07946372e-01,  4.51967865e-01, -4.97482657e-01],\n         [ 3.13654095e-02,  3.15270782e-01, -4.60920721e-01],\n         [ 8.55579317e-01,  3.69081974e-01, -1.45523757e-01],\n         ...,\n         [ 1.83400407e-01, -7.90665150e-01, -2.29615401e-02],\n         [-6.90317214e-01, -4.56646413e-01, -6.24141395e-01],\n         [ 2.01628745e-01, -8.36180270e-01,  6.21205926e-01]]],\n\n\n       [[[ 1.84675777e+00,  2.31591845e+00,  2.11491561e+00],\n         [ 1.48641324e+00,  1.11879933e+00,  3.31646824e+00],\n         [ 7.37202227e-01,  2.49555326e+00,  1.52738976e+00],\n         ...,\n         [ 1.85824406e+00,  1.92802715e+00,  1.77860773e+00],\n         [ 3.12556839e+00,  2.81455100e-01,  3.44858766e-01],\n         [ 2.58370638e+00,  1.55965424e+00,  1.77675211e+00]],\n\n        [[ 2.80154586e+00,  2.44223547e+00,  1.40329003e+00],\n         [ 2.12305641e+00,  3.44577193e-01,  2.72889161e+00],\n         [ 2.18250751e+00,  1.13184679e+00,  3.16770363e+00],\n         ...,\n         [ 1.56742334e+00,  2.22856283e+00,  1.74496460e+00],\n         [ 2.25052214e+00,  3.02105212e+00,  2.77113366e+00],\n         [ 3.16159654e+00,  1.87520051e+00,  2.86477232e+00]],\n\n        [[ 2.01063585e+00,  2.69382596e+00,  2.18850851e+00],\n         [ 1.53760123e+00,  1.87605345e+00,  1.30326009e+00],\n         [ 1.82079923e+00,  2.60125709e+00,  2.02100468e+00],\n         ...,\n         [ 1.21720791e+00,  2.74502683e+00,  1.30241036e+00],\n         [ 2.36592913e+00,  3.05150104e+00,  1.45114851e+00],\n         [ 1.23138785e+00,  2.05622458e+00,  1.82149804e+00]],\n\n        ...,\n\n        [[ 2.40942144e+00,  1.88735521e+00,  1.59633183e+00],\n         [ 1.44632709e+00,  1.44676483e+00,  1.99114633e+00],\n         [ 2.68018937e+00,  2.40573096e+00,  1.59201086e+00],\n         ...,\n         [ 6.52662933e-01,  1.60760462e+00,  2.84350252e+00],\n         [ 2.23377824e+00,  1.54281640e+00,  1.83437908e+00],\n         [ 2.41418266e+00,  2.92721796e+00,  3.42429876e+00]],\n\n        [[ 1.60074592e+00,  1.98082817e+00,  2.99251437e+00],\n         [ 1.51196945e+00,  1.28057646e-02,  2.55843472e+00],\n         [ 3.05538297e+00,  1.51148927e+00,  2.09608364e+00],\n         ...,\n         [ 2.02757025e+00,  1.86643982e+00,  1.78556383e+00],\n         [ 1.83081877e+00,  6.26421422e-02,  2.62066126e+00],\n         [ 1.12535226e+00,  9.85652268e-01,  2.29556394e+00]],\n\n        [[ 1.18825960e+00,  2.64866519e+00,  1.37389660e+00],\n         [ 2.05703473e+00,  7.27054477e-01,  2.72744656e+00],\n         [ 2.32166767e+00,  1.71819365e+00,  2.08185363e+00],\n         ...,\n         [ 6.89537525e-01,  7.77160048e-01,  1.74469030e+00],\n         [ 1.45112526e+00,  2.50817919e+00,  4.18756962e-01],\n         [ 1.73838592e+00,  2.43417811e+00,  1.42113268e+00]]],\n\n\n       [[[ 1.05384219e+00, -1.60155907e-01,  1.08368027e+00],\n         [ 8.19012344e-01, -7.69000351e-02, -1.24258764e-01],\n         [-4.73061413e-01, -5.55450857e-01,  6.18691802e-01],\n         ...,\n         [ 3.39164793e-01, -4.42609578e-01,  8.27018142e-01],\n         [-5.52943885e-01, -1.62943050e-01,  6.39638156e-02],\n         [-3.93407434e-01, -1.76362109e+00, -3.42213273e-01]],\n\n        [[-7.93811083e-01,  1.00232393e-01, -8.78319800e-01],\n         [ 1.31123519e+00,  8.16873550e-01, -3.83141518e-01],\n         [-4.02045697e-01, -8.69798601e-01, -1.38286233e-01],\n         ...,\n         [-2.35286370e-01, -8.41029465e-01, -3.96703899e-01],\n         [ 7.78184924e-03, -6.90800130e-01, -1.06067918e-01],\n         [ 6.05117857e-01,  6.90261066e-01, -4.60868299e-01]],\n\n        [[ 1.65184927e+00,  7.45583415e-01, -4.03097123e-01],\n         [-6.35984778e-01, -5.39281070e-02, -5.33834994e-01],\n         [-1.89131722e-02,  3.09998870e-01, -1.05834794e+00],\n         ...,\n         [ 8.07317615e-01, -9.06297922e-01,  3.72513682e-01],\n         [ 2.77569205e-01,  6.46792769e-01, -7.64785111e-01],\n         [ 1.93017706e-01, -7.26050675e-01, -7.06522882e-01]],\n\n        ...,\n\n        [[ 4.56918292e-02, -4.85125005e-01, -4.15910780e-01],\n         [ 5.91297030e-01,  6.96133614e-01,  3.57561469e-01],\n         [ 5.07974565e-01, -1.67423621e-01,  2.09528700e-01],\n         ...,\n         [-1.18825483e+00, -3.65607977e-01, -5.68141282e-01],\n         [ 1.74787447e-01,  6.85641356e-03,  3.57567102e-01],\n         [ 1.01473975e+00,  1.75692892e+00, -5.73123872e-01]],\n\n        [[-1.26523745e+00,  2.18436971e-01,  4.30945367e-01],\n         [ 2.51692086e-01,  4.86227095e-01, -1.24016605e-01],\n         [-3.96518022e-01, -6.41876042e-01,  8.65564167e-01],\n         ...,\n         [-1.54275134e-01, -6.32727146e-01, -3.51163775e-01],\n         [ 1.24255049e+00,  7.15333521e-01,  6.97429776e-02],\n         [ 5.89184284e-01,  8.46381009e-01, -5.94406247e-01]],\n\n        [[-4.09344494e-01, -5.41902781e-01,  5.61937928e-01],\n         [-2.98311532e-01,  8.94119978e-01, -8.07527676e-02],\n         [ 5.19126654e-01,  2.49722198e-01, -3.25717151e-01],\n         ...,\n         [-9.10430681e-03,  1.07278965e-01, -1.96902871e-01],\n         [-6.61073089e-01,  1.28149128e+00,  4.18785870e-01],\n         [-4.46890295e-01, -4.47850943e-01, -1.16305411e+00]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(16, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(16, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 31, 'size': 16, 'loss': 0.26012862, 'acc': 1.0}",
                                    "variable_type": "dict",
                                    "variable_shape": "4"
                                },
                                "batch_size": {
                                    "variable_value": "16",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(16, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x120c8eed0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.26012862, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'acc'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "o": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x120c8eed0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[0.2692825973033905, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.sequential.Sequential object at 0x120b40310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x120c8eed0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method SequenceEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x120cb9a10>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "<bound method SequenceEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x120c8ee90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x120c8eed0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "evaluate_generator",
                    "function_code": "def evaluate_generator(model, generator,\n                       steps=None,\n                       max_queue_size=10,\n                       workers=1,\n                       use_multiprocessing=False,\n                       verbose=0):\n    \"\"\"See docstring for `Model.evaluate_generator`.\"\"\"\n    model._make_test_function()\n\n    if hasattr(model, 'metrics'):\n        for m in model.stateful_metric_functions:\n            m.reset_states()\n        stateful_metric_indices = [\n            i for i, name in enumerate(model.metrics_names)\n            if str(name) in model.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n\n    steps_done = 0\n    outs_per_batch = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            outs = model.test_on_batch(x, y, sample_weight=sample_weight)\n            outs = to_list(outs)\n            outs_per_batch.append(outs)\n\n            if x is None or len(x) == 0:\n                # Handle data tensors support when no input given\n                # step-size = 1 for data tensors\n                batch_size = 1\n            elif isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. '\n                                 'Batches should contain '\n                                 'at least one item.')\n            steps_done += 1\n            batch_sizes.append(batch_size)\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    averages = []\n    for i in range(len(outs)):\n        if i not in stateful_metric_indices:\n            averages.append(np.average([out[i] for out in outs_per_batch],\n                                       weights=batch_sizes))\n        else:\n            averages.append(np.float64(outs_per_batch[-1][i]))\n    return unpack_singleton(averages)\n",
                    "decorators": [],
                    "docstring": "See docstring for `Model.evaluate_generator`.",
                    "start_line": 266,
                    "end_line": 376,
                    "variables": {
                        "model._make_test_function": [
                            273
                        ],
                        "model": [
                            273,
                            275,
                            276,
                            342,
                            279,
                            280
                        ],
                        "hasattr": [
                            275,
                            327
                        ],
                        "m": [
                            276,
                            277
                        ],
                        "model.stateful_metric_functions": [
                            276
                        ],
                        "m.reset_states": [
                            277
                        ],
                        "stateful_metric_indices": [
                            282,
                            371,
                            278
                        ],
                        "i": [
                            370,
                            371,
                            372,
                            375,
                            279
                        ],
                        "name": [
                            280,
                            279
                        ],
                        "enumerate": [
                            279
                        ],
                        "model.metrics_names": [
                            279
                        ],
                        "str": [
                            280,
                            331,
                            341
                        ],
                        "model.stateful_metric_names": [
                            280
                        ],
                        "steps_done": [
                            360,
                            363,
                            284,
                            325
                        ],
                        "outs_per_batch": [
                            344,
                            372,
                            285,
                            375
                        ],
                        "batch_sizes": [
                            361,
                            373,
                            286
                        ],
                        "is_sequence": [
                            288,
                            295,
                            306,
                            317,
                            287
                        ],
                        "isinstance": [
                            352,
                            350,
                            287
                        ],
                        "generator": [
                            320,
                            296,
                            308,
                            312,
                            318,
                            287
                        ],
                        "Sequence": [
                            287
                        ],
                        "use_multiprocessing": [
                            288,
                            313,
                            309
                        ],
                        "workers": [
                            288,
                            305,
                            314
                        ],
                        "warnings.warn": [
                            289
                        ],
                        "warnings": [
                            289
                        ],
                        "UserWarning": [
                            290
                        ],
                        "steps": [
                            296,
                            323,
                            325,
                            294
                        ],
                        "len": [
                            296,
                            332,
                            335,
                            370,
                            346
                        ],
                        "ValueError": [
                            328,
                            298,
                            357,
                            338
                        ],
                        "enqueuer": [
                            302,
                            366,
                            367,
                            307,
                            311,
                            314,
                            315
                        ],
                        "OrderedEnqueuer": [
                            307
                        ],
                        "GeneratorEnqueuer": [
                            311
                        ],
                        "enqueuer.start": [
                            314
                        ],
                        "max_queue_size": [
                            314
                        ],
                        "output_generator": [
                            320,
                            326,
                            315,
                            318
                        ],
                        "enqueuer.get": [
                            315
                        ],
                        "iter_sequence_infinite": [
                            318
                        ],
                        "verbose": [
                            322,
                            362
                        ],
                        "progbar": [
                            363,
                            323
                        ],
                        "Progbar": [
                            323
                        ],
                        "generator_output": [
                            326,
                            327,
                            331,
                            332,
                            333,
                            335,
                            336,
                            341
                        ],
                        "next": [
                            326
                        ],
                        "x": [
                            352,
                            353,
                            355,
                            333,
                            336,
                            342,
                            346,
                            350,
                            351
                        ],
                        "y": [
                            336,
                            333,
                            342
                        ],
                        "sample_weight": [
                            336,
                            342,
                            334
                        ],
                        "outs": [
                            344,
                            370,
                            342,
                            343
                        ],
                        "model.test_on_batch": [
                            342
                        ],
                        "to_list": [
                            343
                        ],
                        "outs_per_batch.append": [
                            344
                        ],
                        "batch_size": [
                            353,
                            355,
                            356,
                            361,
                            349,
                            351
                        ],
                        "list": [
                            353,
                            350
                        ],
                        "shape": [
                            353,
                            351
                        ],
                        "dict": [
                            352
                        ],
                        "x.values": [
                            353
                        ],
                        "x.shape": [
                            355
                        ],
                        "batch_sizes.append": [
                            361
                        ],
                        "progbar.update": [
                            363
                        ],
                        "enqueuer.stop": [
                            367
                        ],
                        "averages": [
                            376,
                            369,
                            372,
                            375
                        ],
                        "range": [
                            370
                        ],
                        "averages.append": [
                            372,
                            375
                        ],
                        "np.average": [
                            372
                        ],
                        "np": [
                            372,
                            375
                        ],
                        "out": [
                            372
                        ],
                        "np.float64": [
                            375
                        ],
                        "unpack_singleton": [
                            376
                        ]
                    },
                    "filtered_variables": {
                        "model._make_test_function": [
                            273
                        ],
                        "model": [
                            273,
                            275,
                            276,
                            342,
                            279,
                            280
                        ],
                        "m": [
                            276,
                            277
                        ],
                        "model.stateful_metric_functions": [
                            276
                        ],
                        "m.reset_states": [
                            277
                        ],
                        "stateful_metric_indices": [
                            282,
                            371,
                            278
                        ],
                        "i": [
                            370,
                            371,
                            372,
                            375,
                            279
                        ],
                        "name": [
                            280,
                            279
                        ],
                        "model.metrics_names": [
                            279
                        ],
                        "model.stateful_metric_names": [
                            280
                        ],
                        "steps_done": [
                            360,
                            363,
                            284,
                            325
                        ],
                        "outs_per_batch": [
                            344,
                            372,
                            285,
                            375
                        ],
                        "batch_sizes": [
                            361,
                            373,
                            286
                        ],
                        "is_sequence": [
                            288,
                            295,
                            306,
                            317,
                            287
                        ],
                        "generator": [
                            320,
                            296,
                            308,
                            312,
                            318,
                            287
                        ],
                        "Sequence": [
                            287
                        ],
                        "use_multiprocessing": [
                            288,
                            313,
                            309
                        ],
                        "workers": [
                            288,
                            305,
                            314
                        ],
                        "warnings.warn": [
                            289
                        ],
                        "warnings": [
                            289
                        ],
                        "steps": [
                            296,
                            323,
                            325,
                            294
                        ],
                        "enqueuer": [
                            302,
                            366,
                            367,
                            307,
                            311,
                            314,
                            315
                        ],
                        "OrderedEnqueuer": [
                            307
                        ],
                        "GeneratorEnqueuer": [
                            311
                        ],
                        "enqueuer.start": [
                            314
                        ],
                        "max_queue_size": [
                            314
                        ],
                        "output_generator": [
                            320,
                            326,
                            315,
                            318
                        ],
                        "enqueuer.get": [
                            315
                        ],
                        "iter_sequence_infinite": [
                            318
                        ],
                        "verbose": [
                            322,
                            362
                        ],
                        "progbar": [
                            363,
                            323
                        ],
                        "Progbar": [
                            323
                        ],
                        "generator_output": [
                            326,
                            327,
                            331,
                            332,
                            333,
                            335,
                            336,
                            341
                        ],
                        "x": [
                            352,
                            353,
                            355,
                            333,
                            336,
                            342,
                            346,
                            350,
                            351
                        ],
                        "y": [
                            336,
                            333,
                            342
                        ],
                        "sample_weight": [
                            336,
                            342,
                            334
                        ],
                        "outs": [
                            344,
                            370,
                            342,
                            343
                        ],
                        "model.test_on_batch": [
                            342
                        ],
                        "to_list": [
                            343
                        ],
                        "outs_per_batch.append": [
                            344
                        ],
                        "batch_size": [
                            353,
                            355,
                            356,
                            361,
                            349,
                            351
                        ],
                        "shape": [
                            353,
                            351
                        ],
                        "x.values": [
                            353
                        ],
                        "x.shape": [
                            355
                        ],
                        "batch_sizes.append": [
                            361
                        ],
                        "progbar.update": [
                            363
                        ],
                        "enqueuer.stop": [
                            367
                        ],
                        "averages": [
                            376,
                            369,
                            372,
                            375
                        ],
                        "averages.append": [
                            372,
                            375
                        ],
                        "np.average": [
                            372
                        ],
                        "np": [
                            372,
                            375
                        ],
                        "out": [
                            372
                        ],
                        "np.float64": [
                            375
                        ],
                        "unpack_singleton": [
                            376
                        ]
                    },
                    "diff_line_number": 287,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[1.0078797, 0.5625], [1.0197058, 0.5], [1.1971354, 0.25], [1.1362712, 0.5], [1.0984671, 0.4375], [1.1857746, 0.3125], [1.3010535, 0.25], [1.0405438, 0.5625], [1.2544801, 0.3125], [1.1182997, 0.3125], [1.0922574, 0.375], [1.1764702, 0.375], [1.0319197, 0.5]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 2.181213  ,  2.104344  ,  1.5738493 ],\n         [ 2.3612022 ,  1.7400143 ,  3.078472  ],\n         [ 2.4912546 ,  1.6721578 ,  2.5053535 ],\n         ...,\n         [ 1.6705927 ,  2.120567  ,  2.8521504 ],\n         [ 1.635686  ,  1.645765  ,  1.075275  ],\n         [ 2.2393079 ,  3.1326025 ,  2.0074668 ]],\n\n        [[ 1.6744546 ,  3.2703104 ,  3.0475829 ],\n         [ 3.3281348 ,  2.4028156 ,  2.27745   ],\n         [ 2.7300673 ,  1.433729  ,  2.4207604 ],\n         ...,\n         [ 3.6937544 ,  2.249134  ,  1.3086591 ],\n         [ 1.8487846 ,  2.4374237 ,  2.4357214 ],\n         [ 1.027307  ,  1.618845  ,  1.5425215 ]],\n\n        [[ 2.4998255 ,  2.5579448 ,  1.530345  ],\n         [ 2.497833  ,  1.0210544 ,  1.9443544 ],\n         [ 2.1638796 ,  1.5470446 ,  2.5619402 ],\n         ...,\n         [ 2.3441808 ,  2.2553244 ,  3.2603877 ],\n         [ 1.3054395 ,  1.5736355 ,  1.6265979 ],\n         [ 1.9057266 ,  1.9354361 ,  2.59611   ]],\n\n        ...,\n\n        [[ 2.5096939 ,  2.9905634 ,  1.7828567 ],\n         [ 2.1461642 ,  2.4972174 ,  1.5938789 ],\n         [ 3.0186014 ,  3.1126413 ,  1.4509345 ],\n         ...,\n         [ 2.4915793 ,  2.0699492 ,  2.740333  ],\n         [ 2.454224  ,  1.606913  ,  1.9359496 ],\n         [ 0.79865247,  0.80936044,  2.1205604 ]],\n\n        [[ 1.8611785 ,  1.6158714 ,  1.222476  ],\n         [ 2.1897035 ,  2.6623635 ,  1.6851665 ],\n         [ 2.737608  ,  2.0945559 ,  0.57811904],\n         ...,\n         [ 1.0310282 ,  2.0405934 ,  1.5449734 ],\n         [ 1.597369  ,  2.1109872 ,  1.8562005 ],\n         [ 2.4965606 ,  1.1126081 ,  1.6394137 ]],\n\n        [[ 3.0730133 ,  2.1280239 ,  2.6560621 ],\n         [ 2.1032805 ,  1.8357456 ,  2.1483343 ],\n         [ 1.6730007 ,  0.7726457 ,  1.1234891 ],\n         ...,\n         [ 2.099189  ,  2.7745433 ,  2.6594834 ],\n         [ 1.7475867 ,  2.6251175 ,  2.2338004 ],\n         [ 0.7323342 ,  2.1569662 ,  1.766829  ]]],\n\n\n       [[[ 2.8366766 ,  2.6078355 ,  4.3743305 ],\n         [ 2.5496955 ,  3.16128   ,  2.6534686 ],\n         [ 3.804459  ,  3.1894777 ,  2.9865751 ],\n         ...,\n         [ 2.0679653 ,  2.451838  ,  3.7569208 ],\n         [ 3.406701  ,  2.7814946 ,  2.6903152 ],\n         [ 2.8166559 ,  2.5736983 ,  3.2147787 ]],\n\n        [[ 2.5514882 ,  2.833979  ,  2.433435  ],\n         [ 2.3683133 ,  3.2755969 ,  3.186818  ],\n         [ 2.6920974 ,  2.3971062 ,  2.9812644 ],\n         ...,\n         [ 3.130792  ,  3.1669621 ,  3.5382335 ],\n         [ 2.1046789 ,  1.9577873 ,  2.3042753 ],\n         [ 3.1562874 ,  2.3362405 ,  2.8776107 ]],\n\n        [[ 1.5916045 ,  2.5802145 ,  3.5631425 ],\n         [ 2.9976172 ,  2.5643685 ,  2.9201992 ],\n         [ 4.145257  ,  3.810417  ,  2.9065433 ],\n         ...,\n         [ 3.0862322 ,  1.395268  ,  2.6282003 ],\n         [ 1.8323194 ,  2.0438097 ,  3.3608937 ],\n         [ 3.105738  ,  3.230494  ,  3.1172843 ]],\n\n        ...,\n\n        [[ 1.7713026 ,  2.7659547 ,  3.8043115 ],\n         [ 3.6370668 ,  2.7460043 ,  3.1395054 ],\n         [ 2.969425  ,  2.173613  ,  2.9551418 ],\n         ...,\n         [ 2.8219452 ,  4.150151  ,  2.4841542 ],\n         [ 3.1816547 ,  3.4323256 ,  2.56944   ],\n         [ 2.4507422 ,  3.3911772 ,  2.419931  ]],\n\n        [[ 3.9749315 ,  3.120424  ,  3.2057326 ],\n         [ 1.8516268 ,  2.3368063 ,  3.7289255 ],\n         [ 2.3717692 ,  3.7457676 ,  4.064847  ],\n         ...,\n         [ 1.3406955 ,  2.7198493 ,  3.3189447 ],\n         [ 2.396684  ,  2.4944205 ,  3.8646467 ],\n         [ 2.7109876 ,  4.420939  ,  2.6268091 ]],\n\n        [[ 2.0636077 ,  3.178631  ,  3.6407087 ],\n         [ 3.365445  ,  1.9286937 ,  3.0881093 ],\n         [ 3.329658  ,  2.9794898 ,  3.3564358 ],\n         ...,\n         [ 3.1736083 ,  3.443942  ,  3.6010196 ],\n         [ 1.356767  ,  3.3476863 ,  3.8351884 ],\n         [ 3.8923252 ,  3.0754654 ,  2.5991392 ]]],\n\n\n       [[[ 1.6377773 ,  2.2757242 ,  3.1464553 ],\n         [ 1.9405991 ,  1.330682  ,  1.3702021 ],\n         [ 1.2408893 ,  2.2827065 ,  2.4627252 ],\n         ...,\n         [ 2.3229673 ,  2.818544  ,  2.0408869 ],\n         [ 1.7079382 ,  1.2722014 ,  1.7378336 ],\n         [ 2.8790855 ,  0.42950156,  2.9909554 ]],\n\n        [[ 1.8896285 ,  2.0470695 ,  2.5314577 ],\n         [ 1.5774472 ,  1.474803  ,  1.4682958 ],\n         [ 3.2358384 ,  2.406242  ,  1.4743161 ],\n         ...,\n         [ 2.0730693 ,  2.5145118 ,  1.864101  ],\n         [ 2.615491  ,  1.6907961 ,  1.1217333 ],\n         [ 1.7996844 ,  0.582678  ,  3.2785444 ]],\n\n        [[ 1.6515344 ,  1.9802153 ,  2.2905455 ],\n         [ 2.9241667 ,  1.4914167 ,  1.103579  ],\n         [ 0.67350465,  3.3197374 ,  1.2813278 ],\n         ...,\n         [ 2.3388162 ,  1.9512004 ,  2.5981047 ],\n         [ 1.3271562 ,  1.3150285 ,  1.10311   ],\n         [ 2.5497942 ,  0.856418  ,  0.09240203]],\n\n        ...,\n\n        [[ 3.004398  ,  3.1141508 ,  1.8083271 ],\n         [ 1.7437896 ,  1.4237044 ,  2.3674483 ],\n         [ 2.1914527 ,  2.1751106 ,  1.3416518 ],\n         ...,\n         [ 1.2720028 ,  3.7899518 ,  2.7777727 ],\n         [ 2.4581554 ,  1.2203072 ,  2.264487  ],\n         [ 4.3713884 ,  2.1217864 ,  2.3932357 ]],\n\n        [[ 1.4642944 ,  1.2609967 ,  2.0746887 ],\n         [ 1.9211134 ,  2.118693  ,  2.5194168 ],\n         [ 1.7249928 ,  1.9287163 ,  2.0359645 ],\n         ...,\n         [ 2.2574308 ,  3.274822  ,  2.6072311 ],\n         [ 1.4645232 ,  1.6409035 ,  1.6533021 ],\n         [ 0.7329964 ,  1.3676043 ,  1.7196085 ]],\n\n        [[ 1.9762745 ,  3.6701612 , -0.73454124],\n         [ 2.4346488 ,  2.9933305 ,  3.056833  ],\n         [ 2.3334239 ,  1.6800568 ,  1.2899783 ],\n         ...,\n         [ 1.8201225 ,  2.7214282 ,  2.474077  ],\n         [ 1.2401061 ,  0.92738825,  2.8095906 ],\n         [ 2.8006866 ,  3.1803467 ,  3.1718025 ]]],\n\n\n       ...,\n\n\n       [[[ 1.2233012 ,  2.657716  ,  3.10779   ],\n         [ 1.2196658 ,  2.115996  ,  3.5521524 ],\n         [ 1.7014097 ,  2.066417  ,  1.4019611 ],\n         ...,\n         [ 1.1994365 ,  1.2137165 ,  2.2714288 ],\n         [ 2.7449899 ,  2.0915802 ,  1.5829349 ],\n         [ 2.4621346 ,  2.660079  ,  1.4851304 ]],\n\n        [[ 2.0122666 ,  1.9831952 ,  1.3833025 ],\n         [ 2.148557  ,  1.8148638 ,  1.9213684 ],\n         [ 2.5263965 ,  3.1025147 ,  1.5449022 ],\n         ...,\n         [ 2.6971004 ,  1.4411521 ,  1.9325815 ],\n         [ 1.6735715 ,  1.6161675 ,  0.9867582 ],\n         [ 1.5392289 ,  1.5182934 ,  2.421347  ]],\n\n        [[ 3.2916203 ,  2.9636025 ,  2.0799797 ],\n         [ 1.4362941 ,  2.2605793 ,  1.788775  ],\n         [ 2.0047088 ,  0.9289408 ,  1.0696859 ],\n         ...,\n         [ 2.9379125 ,  2.7094486 ,  1.5765451 ],\n         [ 1.7446975 ,  2.807851  ,  2.1237056 ],\n         [ 1.7812998 ,  3.3081603 ,  1.7120156 ]],\n\n        ...,\n\n        [[ 3.1021821 ,  2.1609054 ,  2.1491861 ],\n         [ 2.269297  ,  1.4489222 ,  1.000975  ],\n         [ 2.3742714 ,  3.0568945 ,  3.0616221 ],\n         ...,\n         [ 2.3936975 ,  2.147584  ,  2.633445  ],\n         [ 2.1492705 ,  2.1293252 ,  1.8810436 ],\n         [ 2.0254447 ,  1.5199257 ,  1.6038882 ]],\n\n        [[ 1.3422027 ,  2.7974327 ,  2.3094664 ],\n         [ 1.9211562 ,  1.6575499 ,  1.7486646 ],\n         [ 2.6669495 ,  2.4809027 ,  1.1691284 ],\n         ...,\n         [ 1.6200186 ,  2.2614143 ,  1.9549015 ],\n         [ 0.51935005,  4.151345  ,  1.550823  ],\n         [ 1.9756916 ,  1.2630798 ,  3.4680042 ]],\n\n        [[ 0.7169878 ,  2.4683223 ,  1.5881917 ],\n         [ 0.19228582,  0.75152624,  2.4032109 ],\n         [ 3.605911  ,  2.0623035 ,  1.9673642 ],\n         ...,\n         [ 2.1439672 ,  2.227373  ,  3.1987789 ],\n         [ 2.8716676 ,  3.8856952 ,  1.4308321 ],\n         [ 1.729371  ,  2.81512   ,  2.0019019 ]]],\n\n\n       [[[ 2.3363128 ,  1.6858996 ,  1.8565865 ],\n         [ 1.5741765 ,  2.0317614 ,  1.4353098 ],\n         [ 2.8804462 ,  2.3688478 ,  2.161356  ],\n         ...,\n         [ 2.4580307 ,  1.5561448 ,  0.817448  ],\n         [ 2.4622097 ,  2.0834818 ,  0.93127733],\n         [ 0.91354287,  1.08782   ,  1.9455324 ]],\n\n        [[ 0.5626894 ,  2.0084572 ,  2.3666532 ],\n         [ 1.8832521 ,  0.99688095,  2.1643898 ],\n         [ 1.9804837 ,  1.2056843 ,  1.7149427 ],\n         ...,\n         [ 2.6047676 ,  1.953934  ,  1.4005802 ],\n         [ 1.5387315 ,  1.6134211 ,  2.2222204 ],\n         [ 1.3251109 ,  1.4834441 ,  2.4214187 ]],\n\n        [[ 1.7924957 ,  0.39105257,  1.302049  ],\n         [ 2.047377  ,  2.6185508 ,  1.9294866 ],\n         [ 2.9462202 ,  1.0905515 ,  1.6210037 ],\n         ...,\n         [ 2.5243127 ,  1.2931645 ,  2.2608562 ],\n         [ 1.1566398 ,  2.7242744 ,  1.865702  ],\n         [ 2.0163956 ,  3.1555052 ,  2.2694533 ]],\n\n        ...,\n\n        [[ 3.0655842 ,  2.791219  ,  2.9593701 ],\n         [ 2.7368965 ,  2.2358375 ,  1.8618059 ],\n         [ 1.8088986 ,  2.4799824 ,  1.9331347 ],\n         ...,\n         [ 1.4301012 ,  2.684195  ,  1.4683896 ],\n         [ 2.38833   ,  2.01363   ,  1.0257694 ],\n         [ 3.072905  ,  2.2518883 ,  1.571406  ]],\n\n        [[ 2.4274406 ,  1.8315473 ,  1.9964069 ],\n         [ 2.322519  ,  2.5975635 ,  3.3103147 ],\n         [ 2.0942707 ,  3.7829313 ,  0.7939487 ],\n         ...,\n         [ 1.7822639 ,  2.4473827 ,  3.2301912 ],\n         [ 3.5146914 ,  2.986468  ,  1.875139  ],\n         [ 2.6020834 ,  2.3009565 ,  2.0582695 ]],\n\n        [[ 1.255374  ,  1.9766121 ,  2.5516691 ],\n         [ 1.9918282 ,  2.512724  ,  1.5770851 ],\n         [ 3.4027703 ,  1.7939863 ,  0.81165475],\n         ...,\n         [ 1.6028945 ,  3.334717  ,  2.1372437 ],\n         [ 2.6407466 ,  2.8748257 ,  1.6928686 ],\n         [ 1.3531946 ,  1.2459716 ,  1.4442317 ]]],\n\n\n       [[[ 1.8079915 ,  3.3333616 ,  3.7313538 ],\n         [ 2.5225625 ,  2.440549  ,  2.402918  ],\n         [ 2.6559167 ,  2.6798928 ,  2.5498238 ],\n         ...,\n         [ 4.424298  ,  5.0889215 ,  2.9441545 ],\n         [ 2.398234  ,  3.7649336 ,  4.408574  ],\n         [ 2.9632306 ,  3.7661629 ,  3.1780748 ]],\n\n        [[ 3.7782326 ,  3.3165476 ,  3.6245065 ],\n         [ 2.9715018 ,  2.0456738 ,  3.10306   ],\n         [ 1.4825305 ,  3.7639983 ,  2.4578426 ],\n         ...,\n         [ 2.4617581 ,  4.2540445 ,  3.827922  ],\n         [ 2.6993606 ,  2.694447  ,  4.4946833 ],\n         [ 2.8903654 ,  3.801686  ,  2.338931  ]],\n\n        [[ 2.7538228 ,  3.522414  ,  3.3833737 ],\n         [ 3.7264872 ,  3.8539217 ,  3.043168  ],\n         [ 2.160817  ,  3.206496  ,  2.4172714 ],\n         ...,\n         [ 2.6556096 ,  4.049685  ,  2.9882045 ],\n         [ 1.8168192 ,  3.9649503 ,  3.0208561 ],\n         [ 2.3569903 ,  1.81849   ,  2.0021636 ]],\n\n        ...,\n\n        [[ 3.4824438 ,  3.7757075 ,  2.8622952 ],\n         [ 2.7739265 ,  3.135156  ,  3.0264242 ],\n         [ 2.3519258 ,  2.2103102 ,  2.2838998 ],\n         ...,\n         [ 0.77305424,  2.942275  ,  4.6736927 ],\n         [ 3.6173627 ,  3.6817513 ,  2.741192  ],\n         [ 4.483746  ,  3.3510609 ,  3.2440102 ]],\n\n        [[ 2.8564405 ,  3.406839  ,  2.6943507 ],\n         [ 4.0164013 ,  2.4157352 ,  1.8016759 ],\n         [ 3.1427183 ,  4.33625   ,  2.7235138 ],\n         ...,\n         [ 2.9056945 ,  3.5863042 ,  2.4573705 ],\n         [ 3.954965  ,  2.719934  ,  2.016611  ],\n         [ 3.2122557 ,  2.1048002 ,  2.7854707 ]],\n\n        [[ 2.4997635 ,  3.4173768 ,  2.9206412 ],\n         [ 4.139113  ,  3.3927622 ,  3.1831656 ],\n         [ 3.7758393 ,  2.9136732 ,  1.8981    ],\n         ...,\n         [ 3.7830973 ,  3.6474984 ,  1.3473884 ],\n         [ 2.7346027 ,  3.277112  ,  2.9353068 ],\n         [ 3.1527858 ,  2.6839397 ,  2.837109  ]]]], dtype=float32), array([[0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 2.181213  ,  2.104344  ,  1.5738493 ],\n         [ 2.3612022 ,  1.7400143 ,  3.078472  ],\n         [ 2.4912546 ,  1.6721578 ,  2.5053535 ],\n         ...,\n         [ 1.6705927 ,  2.120567  ,  2.8521504 ],\n         [ 1.635686  ,  1.645765  ,  1.075275  ],\n         [ 2.2393079 ,  3.1326025 ,  2.0074668 ]],\n\n        [[ 1.6744546 ,  3.2703104 ,  3.0475829 ],\n         [ 3.3281348 ,  2.4028156 ,  2.27745   ],\n         [ 2.7300673 ,  1.433729  ,  2.4207604 ],\n         ...,\n         [ 3.6937544 ,  2.249134  ,  1.3086591 ],\n         [ 1.8487846 ,  2.4374237 ,  2.4357214 ],\n         [ 1.027307  ,  1.618845  ,  1.5425215 ]],\n\n        [[ 2.4998255 ,  2.5579448 ,  1.530345  ],\n         [ 2.497833  ,  1.0210544 ,  1.9443544 ],\n         [ 2.1638796 ,  1.5470446 ,  2.5619402 ],\n         ...,\n         [ 2.3441808 ,  2.2553244 ,  3.2603877 ],\n         [ 1.3054395 ,  1.5736355 ,  1.6265979 ],\n         [ 1.9057266 ,  1.9354361 ,  2.59611   ]],\n\n        ...,\n\n        [[ 2.5096939 ,  2.9905634 ,  1.7828567 ],\n         [ 2.1461642 ,  2.4972174 ,  1.5938789 ],\n         [ 3.0186014 ,  3.1126413 ,  1.4509345 ],\n         ...,\n         [ 2.4915793 ,  2.0699492 ,  2.740333  ],\n         [ 2.454224  ,  1.606913  ,  1.9359496 ],\n         [ 0.79865247,  0.80936044,  2.1205604 ]],\n\n        [[ 1.8611785 ,  1.6158714 ,  1.222476  ],\n         [ 2.1897035 ,  2.6623635 ,  1.6851665 ],\n         [ 2.737608  ,  2.0945559 ,  0.57811904],\n         ...,\n         [ 1.0310282 ,  2.0405934 ,  1.5449734 ],\n         [ 1.597369  ,  2.1109872 ,  1.8562005 ],\n         [ 2.4965606 ,  1.1126081 ,  1.6394137 ]],\n\n        [[ 3.0730133 ,  2.1280239 ,  2.6560621 ],\n         [ 2.1032805 ,  1.8357456 ,  2.1483343 ],\n         [ 1.6730007 ,  0.7726457 ,  1.1234891 ],\n         ...,\n         [ 2.099189  ,  2.7745433 ,  2.6594834 ],\n         [ 1.7475867 ,  2.6251175 ,  2.2338004 ],\n         [ 0.7323342 ,  2.1569662 ,  1.766829  ]]],\n\n\n       [[[ 2.8366766 ,  2.6078355 ,  4.3743305 ],\n         [ 2.5496955 ,  3.16128   ,  2.6534686 ],\n         [ 3.804459  ,  3.1894777 ,  2.9865751 ],\n         ...,\n         [ 2.0679653 ,  2.451838  ,  3.7569208 ],\n         [ 3.406701  ,  2.7814946 ,  2.6903152 ],\n         [ 2.8166559 ,  2.5736983 ,  3.2147787 ]],\n\n        [[ 2.5514882 ,  2.833979  ,  2.433435  ],\n         [ 2.3683133 ,  3.2755969 ,  3.186818  ],\n         [ 2.6920974 ,  2.3971062 ,  2.9812644 ],\n         ...,\n         [ 3.130792  ,  3.1669621 ,  3.5382335 ],\n         [ 2.1046789 ,  1.9577873 ,  2.3042753 ],\n         [ 3.1562874 ,  2.3362405 ,  2.8776107 ]],\n\n        [[ 1.5916045 ,  2.5802145 ,  3.5631425 ],\n         [ 2.9976172 ,  2.5643685 ,  2.9201992 ],\n         [ 4.145257  ,  3.810417  ,  2.9065433 ],\n         ...,\n         [ 3.0862322 ,  1.395268  ,  2.6282003 ],\n         [ 1.8323194 ,  2.0438097 ,  3.3608937 ],\n         [ 3.105738  ,  3.230494  ,  3.1172843 ]],\n\n        ...,\n\n        [[ 1.7713026 ,  2.7659547 ,  3.8043115 ],\n         [ 3.6370668 ,  2.7460043 ,  3.1395054 ],\n         [ 2.969425  ,  2.173613  ,  2.9551418 ],\n         ...,\n         [ 2.8219452 ,  4.150151  ,  2.4841542 ],\n         [ 3.1816547 ,  3.4323256 ,  2.56944   ],\n         [ 2.4507422 ,  3.3911772 ,  2.419931  ]],\n\n        [[ 3.9749315 ,  3.120424  ,  3.2057326 ],\n         [ 1.8516268 ,  2.3368063 ,  3.7289255 ],\n         [ 2.3717692 ,  3.7457676 ,  4.064847  ],\n         ...,\n         [ 1.3406955 ,  2.7198493 ,  3.3189447 ],\n         [ 2.396684  ,  2.4944205 ,  3.8646467 ],\n         [ 2.7109876 ,  4.420939  ,  2.6268091 ]],\n\n        [[ 2.0636077 ,  3.178631  ,  3.6407087 ],\n         [ 3.365445  ,  1.9286937 ,  3.0881093 ],\n         [ 3.329658  ,  2.9794898 ,  3.3564358 ],\n         ...,\n         [ 3.1736083 ,  3.443942  ,  3.6010196 ],\n         [ 1.356767  ,  3.3476863 ,  3.8351884 ],\n         [ 3.8923252 ,  3.0754654 ,  2.5991392 ]]],\n\n\n       [[[ 1.6377773 ,  2.2757242 ,  3.1464553 ],\n         [ 1.9405991 ,  1.330682  ,  1.3702021 ],\n         [ 1.2408893 ,  2.2827065 ,  2.4627252 ],\n         ...,\n         [ 2.3229673 ,  2.818544  ,  2.0408869 ],\n         [ 1.7079382 ,  1.2722014 ,  1.7378336 ],\n         [ 2.8790855 ,  0.42950156,  2.9909554 ]],\n\n        [[ 1.8896285 ,  2.0470695 ,  2.5314577 ],\n         [ 1.5774472 ,  1.474803  ,  1.4682958 ],\n         [ 3.2358384 ,  2.406242  ,  1.4743161 ],\n         ...,\n         [ 2.0730693 ,  2.5145118 ,  1.864101  ],\n         [ 2.615491  ,  1.6907961 ,  1.1217333 ],\n         [ 1.7996844 ,  0.582678  ,  3.2785444 ]],\n\n        [[ 1.6515344 ,  1.9802153 ,  2.2905455 ],\n         [ 2.9241667 ,  1.4914167 ,  1.103579  ],\n         [ 0.67350465,  3.3197374 ,  1.2813278 ],\n         ...,\n         [ 2.3388162 ,  1.9512004 ,  2.5981047 ],\n         [ 1.3271562 ,  1.3150285 ,  1.10311   ],\n         [ 2.5497942 ,  0.856418  ,  0.09240203]],\n\n        ...,\n\n        [[ 3.004398  ,  3.1141508 ,  1.8083271 ],\n         [ 1.7437896 ,  1.4237044 ,  2.3674483 ],\n         [ 2.1914527 ,  2.1751106 ,  1.3416518 ],\n         ...,\n         [ 1.2720028 ,  3.7899518 ,  2.7777727 ],\n         [ 2.4581554 ,  1.2203072 ,  2.264487  ],\n         [ 4.3713884 ,  2.1217864 ,  2.3932357 ]],\n\n        [[ 1.4642944 ,  1.2609967 ,  2.0746887 ],\n         [ 1.9211134 ,  2.118693  ,  2.5194168 ],\n         [ 1.7249928 ,  1.9287163 ,  2.0359645 ],\n         ...,\n         [ 2.2574308 ,  3.274822  ,  2.6072311 ],\n         [ 1.4645232 ,  1.6409035 ,  1.6533021 ],\n         [ 0.7329964 ,  1.3676043 ,  1.7196085 ]],\n\n        [[ 1.9762745 ,  3.6701612 , -0.73454124],\n         [ 2.4346488 ,  2.9933305 ,  3.056833  ],\n         [ 2.3334239 ,  1.6800568 ,  1.2899783 ],\n         ...,\n         [ 1.8201225 ,  2.7214282 ,  2.474077  ],\n         [ 1.2401061 ,  0.92738825,  2.8095906 ],\n         [ 2.8006866 ,  3.1803467 ,  3.1718025 ]]],\n\n\n       ...,\n\n\n       [[[ 1.2233012 ,  2.657716  ,  3.10779   ],\n         [ 1.2196658 ,  2.115996  ,  3.5521524 ],\n         [ 1.7014097 ,  2.066417  ,  1.4019611 ],\n         ...,\n         [ 1.1994365 ,  1.2137165 ,  2.2714288 ],\n         [ 2.7449899 ,  2.0915802 ,  1.5829349 ],\n         [ 2.4621346 ,  2.660079  ,  1.4851304 ]],\n\n        [[ 2.0122666 ,  1.9831952 ,  1.3833025 ],\n         [ 2.148557  ,  1.8148638 ,  1.9213684 ],\n         [ 2.5263965 ,  3.1025147 ,  1.5449022 ],\n         ...,\n         [ 2.6971004 ,  1.4411521 ,  1.9325815 ],\n         [ 1.6735715 ,  1.6161675 ,  0.9867582 ],\n         [ 1.5392289 ,  1.5182934 ,  2.421347  ]],\n\n        [[ 3.2916203 ,  2.9636025 ,  2.0799797 ],\n         [ 1.4362941 ,  2.2605793 ,  1.788775  ],\n         [ 2.0047088 ,  0.9289408 ,  1.0696859 ],\n         ...,\n         [ 2.9379125 ,  2.7094486 ,  1.5765451 ],\n         [ 1.7446975 ,  2.807851  ,  2.1237056 ],\n         [ 1.7812998 ,  3.3081603 ,  1.7120156 ]],\n\n        ...,\n\n        [[ 3.1021821 ,  2.1609054 ,  2.1491861 ],\n         [ 2.269297  ,  1.4489222 ,  1.000975  ],\n         [ 2.3742714 ,  3.0568945 ,  3.0616221 ],\n         ...,\n         [ 2.3936975 ,  2.147584  ,  2.633445  ],\n         [ 2.1492705 ,  2.1293252 ,  1.8810436 ],\n         [ 2.0254447 ,  1.5199257 ,  1.6038882 ]],\n\n        [[ 1.3422027 ,  2.7974327 ,  2.3094664 ],\n         [ 1.9211562 ,  1.6575499 ,  1.7486646 ],\n         [ 2.6669495 ,  2.4809027 ,  1.1691284 ],\n         ...,\n         [ 1.6200186 ,  2.2614143 ,  1.9549015 ],\n         [ 0.51935005,  4.151345  ,  1.550823  ],\n         [ 1.9756916 ,  1.2630798 ,  3.4680042 ]],\n\n        [[ 0.7169878 ,  2.4683223 ,  1.5881917 ],\n         [ 0.19228582,  0.75152624,  2.4032109 ],\n         [ 3.605911  ,  2.0623035 ,  1.9673642 ],\n         ...,\n         [ 2.1439672 ,  2.227373  ,  3.1987789 ],\n         [ 2.8716676 ,  3.8856952 ,  1.4308321 ],\n         [ 1.729371  ,  2.81512   ,  2.0019019 ]]],\n\n\n       [[[ 2.3363128 ,  1.6858996 ,  1.8565865 ],\n         [ 1.5741765 ,  2.0317614 ,  1.4353098 ],\n         [ 2.8804462 ,  2.3688478 ,  2.161356  ],\n         ...,\n         [ 2.4580307 ,  1.5561448 ,  0.817448  ],\n         [ 2.4622097 ,  2.0834818 ,  0.93127733],\n         [ 0.91354287,  1.08782   ,  1.9455324 ]],\n\n        [[ 0.5626894 ,  2.0084572 ,  2.3666532 ],\n         [ 1.8832521 ,  0.99688095,  2.1643898 ],\n         [ 1.9804837 ,  1.2056843 ,  1.7149427 ],\n         ...,\n         [ 2.6047676 ,  1.953934  ,  1.4005802 ],\n         [ 1.5387315 ,  1.6134211 ,  2.2222204 ],\n         [ 1.3251109 ,  1.4834441 ,  2.4214187 ]],\n\n        [[ 1.7924957 ,  0.39105257,  1.302049  ],\n         [ 2.047377  ,  2.6185508 ,  1.9294866 ],\n         [ 2.9462202 ,  1.0905515 ,  1.6210037 ],\n         ...,\n         [ 2.5243127 ,  1.2931645 ,  2.2608562 ],\n         [ 1.1566398 ,  2.7242744 ,  1.865702  ],\n         [ 2.0163956 ,  3.1555052 ,  2.2694533 ]],\n\n        ...,\n\n        [[ 3.0655842 ,  2.791219  ,  2.9593701 ],\n         [ 2.7368965 ,  2.2358375 ,  1.8618059 ],\n         [ 1.8088986 ,  2.4799824 ,  1.9331347 ],\n         ...,\n         [ 1.4301012 ,  2.684195  ,  1.4683896 ],\n         [ 2.38833   ,  2.01363   ,  1.0257694 ],\n         [ 3.072905  ,  2.2518883 ,  1.571406  ]],\n\n        [[ 2.4274406 ,  1.8315473 ,  1.9964069 ],\n         [ 2.322519  ,  2.5975635 ,  3.3103147 ],\n         [ 2.0942707 ,  3.7829313 ,  0.7939487 ],\n         ...,\n         [ 1.7822639 ,  2.4473827 ,  3.2301912 ],\n         [ 3.5146914 ,  2.986468  ,  1.875139  ],\n         [ 2.6020834 ,  2.3009565 ,  2.0582695 ]],\n\n        [[ 1.255374  ,  1.9766121 ,  2.5516691 ],\n         [ 1.9918282 ,  2.512724  ,  1.5770851 ],\n         [ 3.4027703 ,  1.7939863 ,  0.81165475],\n         ...,\n         [ 1.6028945 ,  3.334717  ,  2.1372437 ],\n         [ 2.6407466 ,  2.8748257 ,  1.6928686 ],\n         [ 1.3531946 ,  1.2459716 ,  1.4442317 ]]],\n\n\n       [[[ 1.8079915 ,  3.3333616 ,  3.7313538 ],\n         [ 2.5225625 ,  2.440549  ,  2.402918  ],\n         [ 2.6559167 ,  2.6798928 ,  2.5498238 ],\n         ...,\n         [ 4.424298  ,  5.0889215 ,  2.9441545 ],\n         [ 2.398234  ,  3.7649336 ,  4.408574  ],\n         [ 2.9632306 ,  3.7661629 ,  3.1780748 ]],\n\n        [[ 3.7782326 ,  3.3165476 ,  3.6245065 ],\n         [ 2.9715018 ,  2.0456738 ,  3.10306   ],\n         [ 1.4825305 ,  3.7639983 ,  2.4578426 ],\n         ...,\n         [ 2.4617581 ,  4.2540445 ,  3.827922  ],\n         [ 2.6993606 ,  2.694447  ,  4.4946833 ],\n         [ 2.8903654 ,  3.801686  ,  2.338931  ]],\n\n        [[ 2.7538228 ,  3.522414  ,  3.3833737 ],\n         [ 3.7264872 ,  3.8539217 ,  3.043168  ],\n         [ 2.160817  ,  3.206496  ,  2.4172714 ],\n         ...,\n         [ 2.6556096 ,  4.049685  ,  2.9882045 ],\n         [ 1.8168192 ,  3.9649503 ,  3.0208561 ],\n         [ 2.3569903 ,  1.81849   ,  2.0021636 ]],\n\n        ...,\n\n        [[ 3.4824438 ,  3.7757075 ,  2.8622952 ],\n         [ 2.7739265 ,  3.135156  ,  3.0264242 ],\n         [ 2.3519258 ,  2.2103102 ,  2.2838998 ],\n         ...,\n         [ 0.77305424,  2.942275  ,  4.6736927 ],\n         [ 3.6173627 ,  3.6817513 ,  2.741192  ],\n         [ 4.483746  ,  3.3510609 ,  3.2440102 ]],\n\n        [[ 2.8564405 ,  3.406839  ,  2.6943507 ],\n         [ 4.0164013 ,  2.4157352 ,  1.8016759 ],\n         [ 3.1427183 ,  4.33625   ,  2.7235138 ],\n         ...,\n         [ 2.9056945 ,  3.5863042 ,  2.4573705 ],\n         [ 3.954965  ,  2.719934  ,  2.016611  ],\n         [ 3.2122557 ,  2.1048002 ,  2.7854707 ]],\n\n        [[ 2.4997635 ,  3.4173768 ,  2.9206412 ],\n         [ 4.139113  ,  3.3927622 ,  3.1831656 ],\n         [ 3.7758393 ,  2.9136732 ,  1.8981    ],\n         ...,\n         [ 3.7830973 ,  3.6474984 ,  1.3473884 ],\n         [ 2.7346027 ,  3.277112  ,  2.9353068 ],\n         [ 3.1527858 ,  2.6839397 ,  2.837109  ]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[1.0319197, 0.5]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1273281e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x127328140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[1.1315438747406006, 0.4]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x12732b0f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[1.0776691, 0.25], [0.9404327, 0.6875], [1.1171854, 0.3125], [1.0274888, 0.5], [1.0452714, 0.5], [0.92072195, 0.375], [0.8381176, 0.4375], [0.89806926, 0.5625], [0.8896912, 0.5], [0.93740284, 0.625], [0.980021, 0.5], [0.94975936, 0.5], [1.2159787, 0.375]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 0.27930123,  0.51701045,  1.121421  ],\n         [ 1.7378482 ,  1.2936478 ,  0.09241625],\n         [ 1.0757035 ,  0.9990705 ,  0.736592  ],\n         ...,\n         [ 2.1947255 ,  0.7822953 ,  1.6028876 ],\n         [ 2.192667  ,  1.0491983 ,  0.39155903],\n         [ 0.6721133 ,  1.4333218 ,  1.2851721 ]],\n\n        [[ 1.3300419 ,  1.6132137 ,  0.14156623],\n         [ 0.21886279,  1.120216  ,  0.130493  ],\n         [ 0.39705142,  1.5517795 ,  0.5674231 ],\n         ...,\n         [ 1.1184225 ,  1.7839347 ,  0.02099802],\n         [ 0.6947166 ,  1.0923285 ,  1.1551178 ],\n         [ 1.7928094 ,  1.1121796 ,  1.6269764 ]],\n\n        [[ 1.8897268 ,  1.8797019 ,  0.91248167],\n         [ 1.1621151 ,  0.9524418 ,  1.6609601 ],\n         [ 0.7712218 ,  0.7674996 ,  1.6327854 ],\n         ...,\n         [ 1.6288769 ,  2.107439  ,  0.7449814 ],\n         [ 0.93444103,  1.6124965 ,  0.7211259 ],\n         [ 1.1492132 , -0.105069  ,  0.88064367]],\n\n        ...,\n\n        [[ 0.42134476,  0.46491686,  0.8143006 ],\n         [ 1.002698  ,  1.1941226 ,  1.3215286 ],\n         [-0.23529923,  0.21553582,  0.10865206],\n         ...,\n         [ 2.4700017 ,  2.085536  ,  0.33375272],\n         [ 1.3412582 ,  0.26481822,  0.6119415 ],\n         [ 1.1392329 ,  0.5443277 ,  2.0621772 ]],\n\n        [[ 1.1585965 ,  1.7210947 ,  1.9797134 ],\n         [ 1.4724011 ,  0.39955267,  1.1378567 ],\n         [ 0.56858164, -0.9554278 ,  0.73512685],\n         ...,\n         [ 0.74531084,  0.36886147,  1.0032165 ],\n         [ 0.8333059 ,  1.1410255 ,  0.70057833],\n         [ 1.4575503 ,  1.1127222 ,  1.3041878 ]],\n\n        [[ 1.423077  ,  1.4069995 ,  1.1741158 ],\n         [-0.87458587,  1.9609733 ,  1.2762982 ],\n         [ 0.60232466,  1.0492238 ,  0.6436236 ],\n         ...,\n         [ 1.5556448 ,  1.3989506 ,  1.5365872 ],\n         [ 1.2152296 ,  1.0475322 ,  1.5672243 ],\n         [ 0.70120275,  1.866123  , -0.61459607]]],\n\n\n       [[[ 0.6983404 ,  1.5002028 ,  1.8064995 ],\n         [ 2.8696952 ,  1.4406639 ,  1.4820123 ],\n         [ 1.2971717 ,  2.0828722 ,  1.7610879 ],\n         ...,\n         [ 1.5874699 ,  2.9900825 ,  1.8761506 ],\n         [ 1.8418471 ,  1.2660207 ,  1.9092261 ],\n         [ 1.3689822 ,  1.6356301 ,  1.952919  ]],\n\n        [[ 1.9298913 ,  0.5918986 ,  1.9657342 ],\n         [ 1.2340074 ,  0.9614824 ,  1.1292384 ],\n         [ 2.4580617 ,  2.4291933 ,  2.6985881 ],\n         ...,\n         [ 2.3145776 ,  1.1432208 ,  1.391178  ],\n         [ 1.2259588 ,  1.7260153 ,  1.6031604 ],\n         [ 1.372651  ,  1.9251597 ,  0.8804808 ]],\n\n        [[ 1.7394955 ,  2.1061053 ,  0.91767883],\n         [ 1.507133  ,  2.823245  ,  2.9930475 ],\n         [ 1.2406433 ,  0.8955691 ,  1.1587831 ],\n         ...,\n         [ 1.8587569 ,  2.813758  ,  1.9936386 ],\n         [ 2.5329664 ,  1.7267983 ,  2.4889274 ],\n         [ 1.7144668 ,  1.2628853 ,  1.7245005 ]],\n\n        ...,\n\n        [[ 0.19871092,  1.0827712 ,  0.93237   ],\n         [ 2.3666608 ,  2.2566926 ,  0.53005147],\n         [ 0.9280288 ,  0.7410106 ,  2.212689  ],\n         ...,\n         [ 1.5658    ,  1.5837146 ,  0.35909036],\n         [ 1.6383454 ,  0.51156425,  1.9617838 ],\n         [ 2.2058918 ,  2.5439866 ,  2.637112  ]],\n\n        [[ 2.0836945 ,  0.57672024,  1.1757234 ],\n         [ 1.5478803 ,  1.3466421 ,  2.5597959 ],\n         [ 2.6071448 ,  2.3555236 ,  1.9862691 ],\n         ...,\n         [ 1.6142509 ,  2.7579274 ,  0.88995916],\n         [ 2.211236  ,  2.0179424 ,  3.1294105 ],\n         [ 2.4199579 ,  2.260118  ,  1.2833664 ]],\n\n        [[ 1.9338809 ,  2.3161464 ,  1.8570962 ],\n         [ 2.5247898 ,  1.0881891 ,  3.3442883 ],\n         [ 2.683146  ,  1.9716632 ,  3.060404  ],\n         ...,\n         [ 1.1552474 ,  1.8411856 ,  2.2571287 ],\n         [ 1.637065  ,  0.7578341 ,  2.7018013 ],\n         [ 1.9209654 ,  1.3275037 ,  2.1121092 ]]],\n\n\n       [[[ 1.995858  ,  1.3338239 ,  1.4309561 ],\n         [-0.57748264,  0.26084185,  0.3147774 ],\n         [ 0.93105143,  1.2671791 ,  1.4925586 ],\n         ...,\n         [ 0.99355316,  1.1326015 ,  0.57788545],\n         [ 0.19964167,  2.3625019 ,  0.8633377 ],\n         [ 2.421085  , -0.43730575,  1.5801712 ]],\n\n        [[-0.12863539,  0.595734  ,  0.12725097],\n         [ 1.7586684 ,  0.7645939 ,  0.6028305 ],\n         [ 0.71853924,  1.3185402 ,  1.141671  ],\n         ...,\n         [ 1.2583528 ,  1.7560425 ,  0.20628268],\n         [ 0.781329  ,  1.5653234 ,  1.6880417 ],\n         [ 0.95409566, -0.22981933,  2.0058641 ]],\n\n        [[ 0.8444652 ,  1.1274135 ,  1.1146094 ],\n         [ 1.5430744 ,  1.8728001 ,  0.41264272],\n         [ 2.4213576 ,  0.43552223,  1.355297  ],\n         ...,\n         [ 1.4677811 ,  1.6956488 , -0.23188783],\n         [ 1.3544018 ,  0.23618022,  0.41906795],\n         [-0.5884874 ,  0.4027254 ,  0.91363245]],\n\n        ...,\n\n        [[ 0.51509726,  3.0538151 ,  1.6106536 ],\n         [ 0.7045956 ,  0.799072  ,  1.2643504 ],\n         [ 0.7641443 ,  0.93446076,  0.7364452 ],\n         ...,\n         [ 1.290928  ,  1.2784065 ,  2.314265  ],\n         [ 0.67183036,  1.0640774 ,  2.1002016 ],\n         [ 1.591963  ,  2.0780249 ,  2.2186065 ]],\n\n        [[ 0.2780072 ,  0.9538093 ,  2.1348588 ],\n         [ 0.20066659, -0.18898684,  0.57581615],\n         [ 1.3218702 ,  1.2996256 ,  1.0539788 ],\n         ...,\n         [ 1.1237597 ,  1.503075  ,  1.5817088 ],\n         [-0.3259267 ,  2.2081249 ,  0.6997572 ],\n         [ 0.01898457,  0.06025209,  2.1362495 ]],\n\n        [[ 0.9558633 ,  1.331801  ,  2.128309  ],\n         [-0.12299398,  0.8374605 ,  1.5615985 ],\n         [ 0.9966193 ,  1.8246278 ,  0.0572228 ],\n         ...,\n         [ 0.25720078,  0.2433899 ,  0.98602355],\n         [ 1.8500549 ,  1.7175021 ,  1.4129514 ],\n         [ 1.0439371 ,  0.6881443 ,  1.0112284 ]]],\n\n\n       ...,\n\n\n       [[[ 2.181213  ,  2.104344  ,  1.5738493 ],\n         [ 2.3612022 ,  1.7400143 ,  3.078472  ],\n         [ 2.4912546 ,  1.6721578 ,  2.5053535 ],\n         ...,\n         [ 1.6705927 ,  2.120567  ,  2.8521504 ],\n         [ 1.635686  ,  1.645765  ,  1.075275  ],\n         [ 2.2393079 ,  3.1326025 ,  2.0074668 ]],\n\n        [[ 1.6744546 ,  3.2703104 ,  3.0475829 ],\n         [ 3.3281348 ,  2.4028156 ,  2.27745   ],\n         [ 2.7300673 ,  1.433729  ,  2.4207604 ],\n         ...,\n         [ 3.6937544 ,  2.249134  ,  1.3086591 ],\n         [ 1.8487846 ,  2.4374237 ,  2.4357214 ],\n         [ 1.027307  ,  1.618845  ,  1.5425215 ]],\n\n        [[ 2.4998255 ,  2.5579448 ,  1.530345  ],\n         [ 2.497833  ,  1.0210544 ,  1.9443544 ],\n         [ 2.1638796 ,  1.5470446 ,  2.5619402 ],\n         ...,\n         [ 2.3441808 ,  2.2553244 ,  3.2603877 ],\n         [ 1.3054395 ,  1.5736355 ,  1.6265979 ],\n         [ 1.9057266 ,  1.9354361 ,  2.59611   ]],\n\n        ...,\n\n        [[ 2.5096939 ,  2.9905634 ,  1.7828567 ],\n         [ 2.1461642 ,  2.4972174 ,  1.5938789 ],\n         [ 3.0186014 ,  3.1126413 ,  1.4509345 ],\n         ...,\n         [ 2.4915793 ,  2.0699492 ,  2.740333  ],\n         [ 2.454224  ,  1.606913  ,  1.9359496 ],\n         [ 0.79865247,  0.80936044,  2.1205604 ]],\n\n        [[ 1.8611785 ,  1.6158714 ,  1.222476  ],\n         [ 2.1897035 ,  2.6623635 ,  1.6851665 ],\n         [ 2.737608  ,  2.0945559 ,  0.57811904],\n         ...,\n         [ 1.0310282 ,  2.0405934 ,  1.5449734 ],\n         [ 1.597369  ,  2.1109872 ,  1.8562005 ],\n         [ 2.4965606 ,  1.1126081 ,  1.6394137 ]],\n\n        [[ 3.0730133 ,  2.1280239 ,  2.6560621 ],\n         [ 2.1032805 ,  1.8357456 ,  2.1483343 ],\n         [ 1.6730007 ,  0.7726457 ,  1.1234891 ],\n         ...,\n         [ 2.099189  ,  2.7745433 ,  2.6594834 ],\n         [ 1.7475867 ,  2.6251175 ,  2.2338004 ],\n         [ 0.7323342 ,  2.1569662 ,  1.766829  ]]],\n\n\n       [[[ 2.373181  ,  2.0018058 ,  2.4356465 ],\n         [ 1.7452183 ,  1.1152527 ,  1.3539776 ],\n         [ 1.5438814 ,  1.3307842 ,  1.108069  ],\n         ...,\n         [ 2.5601938 ,  2.4220467 ,  2.0706635 ],\n         [ 2.1032407 ,  2.4406295 ,  2.2423944 ],\n         [ 0.9152081 ,  2.8592074 ,  3.027894  ]],\n\n        [[ 1.6591854 ,  1.9092089 ,  1.141111  ],\n         [ 3.1505873 ,  1.9553657 ,  2.0689957 ],\n         [ 1.8779705 ,  1.5655168 ,  2.9594312 ],\n         ...,\n         [ 1.3241597 ,  2.2746599 ,  2.7835193 ],\n         [ 1.6652765 ,  2.4865134 ,  2.2486386 ],\n         [ 0.12337171,  3.091647  ,  1.9367429 ]],\n\n        [[ 1.3572677 ,  2.283876  ,  1.7528793 ],\n         [ 2.3772688 ,  2.4607892 ,  0.77398735],\n         [ 2.270208  ,  2.2260242 ,  0.621064  ],\n         ...,\n         [ 1.8210196 ,  2.3027973 ,  3.790377  ],\n         [ 2.2067251 ,  1.8659765 ,  2.0505943 ],\n         [ 1.5546544 ,  2.9245546 ,  2.390477  ]],\n\n        ...,\n\n        [[ 3.5573595 ,  2.4524167 ,  1.3195451 ],\n         [ 2.4225106 ,  2.8911104 ,  2.5299027 ],\n         [ 1.8050592 ,  1.5429047 ,  1.9158292 ],\n         ...,\n         [ 2.1158936 ,  2.3493338 ,  1.1132331 ],\n         [ 2.5098581 ,  2.3352785 ,  2.5247228 ],\n         [ 2.1379225 ,  0.8760624 ,  1.2710434 ]],\n\n        [[ 1.4300857 ,  3.3019872 ,  1.4179897 ],\n         [ 1.2339791 ,  2.894767  ,  2.3179386 ],\n         [ 3.4025538 ,  2.716638  ,  1.2314736 ],\n         ...,\n         [ 2.4978566 ,  2.7364836 ,  2.1231856 ],\n         [ 1.653776  ,  1.0653316 ,  2.905597  ],\n         [ 2.2380886 ,  1.6773361 ,  1.4899579 ]],\n\n        [[ 0.7647099 ,  2.0827234 ,  1.2415658 ],\n         [ 1.7958841 ,  1.5931207 ,  1.3267725 ],\n         [ 1.4999704 ,  2.2186453 ,  2.1539526 ],\n         ...,\n         [ 2.0012746 ,  2.396412  ,  1.9662186 ],\n         [ 2.098697  ,  1.5734352 ,  2.2644591 ],\n         [ 1.2074413 ,  2.395066  ,  1.363565  ]]],\n\n\n       [[[ 1.9235346 ,  2.7706623 ,  2.7115304 ],\n         [ 1.9399271 ,  3.0731    ,  2.1879797 ],\n         [ 2.7187843 ,  2.1769507 ,  1.3225279 ],\n         ...,\n         [ 2.4282131 ,  3.0103931 ,  1.6988894 ],\n         [ 2.1938813 ,  0.86945647,  2.4871967 ],\n         [ 2.0149028 ,  2.5647187 ,  1.3736401 ]],\n\n        [[ 1.435878  ,  2.9349995 ,  2.104701  ],\n         [ 3.6257827 ,  2.6357636 ,  1.8744997 ],\n         [ 1.8068959 ,  1.9828377 ,  2.4876525 ],\n         ...,\n         [ 2.9165425 ,  1.9164506 ,  2.3594632 ],\n         [ 2.0181844 ,  1.5053947 ,  2.3029392 ],\n         [ 2.726376  ,  2.4065564 ,  1.665035  ]],\n\n        [[ 2.3346593 ,  2.3136296 ,  2.1673834 ],\n         [ 1.8948864 ,  2.7484722 ,  3.0937698 ],\n         [ 2.0900564 ,  1.8299716 ,  2.274396  ],\n         ...,\n         [ 3.0702195 ,  2.6377392 ,  2.627931  ],\n         [ 1.6274693 ,  2.9243968 ,  1.5379621 ],\n         [ 1.4686671 ,  2.0648477 ,  2.7557635 ]],\n\n        ...,\n\n        [[ 3.2220986 ,  2.615619  ,  0.7829782 ],\n         [ 2.7667964 ,  3.0450878 ,  1.5216173 ],\n         [ 1.2926522 ,  2.4023032 ,  1.862082  ],\n         ...,\n         [ 2.2742696 ,  2.501347  ,  1.7124593 ],\n         [ 1.657726  ,  2.989055  ,  1.6308769 ],\n         [ 2.8604913 ,  2.9951103 ,  2.1516953 ]],\n\n        [[ 2.1572247 ,  1.8377749 ,  2.4922273 ],\n         [ 1.4288206 ,  2.1828523 ,  1.5090235 ],\n         [ 3.6328566 ,  2.615732  ,  0.64447343],\n         ...,\n         [ 2.3123689 ,  2.7241125 ,  1.2593263 ],\n         [ 1.3721833 ,  2.9425714 ,  2.1494522 ],\n         [ 1.7013749 ,  2.2845745 ,  1.6462029 ]],\n\n        [[ 2.4520125 ,  2.0390785 ,  1.2980356 ],\n         [ 2.1485538 ,  2.1781504 ,  2.242113  ],\n         [ 2.0933278 ,  3.1618857 ,  2.1844985 ],\n         ...,\n         [ 2.3043118 ,  2.3050513 ,  2.8594348 ],\n         [ 0.5711004 ,  3.0280302 ,  2.7376697 ],\n         [ 0.2704184 ,  3.2984285 ,  2.386316  ]]]], dtype=float32), array([[0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 0.27930123,  0.51701045,  1.121421  ],\n         [ 1.7378482 ,  1.2936478 ,  0.09241625],\n         [ 1.0757035 ,  0.9990705 ,  0.736592  ],\n         ...,\n         [ 2.1947255 ,  0.7822953 ,  1.6028876 ],\n         [ 2.192667  ,  1.0491983 ,  0.39155903],\n         [ 0.6721133 ,  1.4333218 ,  1.2851721 ]],\n\n        [[ 1.3300419 ,  1.6132137 ,  0.14156623],\n         [ 0.21886279,  1.120216  ,  0.130493  ],\n         [ 0.39705142,  1.5517795 ,  0.5674231 ],\n         ...,\n         [ 1.1184225 ,  1.7839347 ,  0.02099802],\n         [ 0.6947166 ,  1.0923285 ,  1.1551178 ],\n         [ 1.7928094 ,  1.1121796 ,  1.6269764 ]],\n\n        [[ 1.8897268 ,  1.8797019 ,  0.91248167],\n         [ 1.1621151 ,  0.9524418 ,  1.6609601 ],\n         [ 0.7712218 ,  0.7674996 ,  1.6327854 ],\n         ...,\n         [ 1.6288769 ,  2.107439  ,  0.7449814 ],\n         [ 0.93444103,  1.6124965 ,  0.7211259 ],\n         [ 1.1492132 , -0.105069  ,  0.88064367]],\n\n        ...,\n\n        [[ 0.42134476,  0.46491686,  0.8143006 ],\n         [ 1.002698  ,  1.1941226 ,  1.3215286 ],\n         [-0.23529923,  0.21553582,  0.10865206],\n         ...,\n         [ 2.4700017 ,  2.085536  ,  0.33375272],\n         [ 1.3412582 ,  0.26481822,  0.6119415 ],\n         [ 1.1392329 ,  0.5443277 ,  2.0621772 ]],\n\n        [[ 1.1585965 ,  1.7210947 ,  1.9797134 ],\n         [ 1.4724011 ,  0.39955267,  1.1378567 ],\n         [ 0.56858164, -0.9554278 ,  0.73512685],\n         ...,\n         [ 0.74531084,  0.36886147,  1.0032165 ],\n         [ 0.8333059 ,  1.1410255 ,  0.70057833],\n         [ 1.4575503 ,  1.1127222 ,  1.3041878 ]],\n\n        [[ 1.423077  ,  1.4069995 ,  1.1741158 ],\n         [-0.87458587,  1.9609733 ,  1.2762982 ],\n         [ 0.60232466,  1.0492238 ,  0.6436236 ],\n         ...,\n         [ 1.5556448 ,  1.3989506 ,  1.5365872 ],\n         [ 1.2152296 ,  1.0475322 ,  1.5672243 ],\n         [ 0.70120275,  1.866123  , -0.61459607]]],\n\n\n       [[[ 0.6983404 ,  1.5002028 ,  1.8064995 ],\n         [ 2.8696952 ,  1.4406639 ,  1.4820123 ],\n         [ 1.2971717 ,  2.0828722 ,  1.7610879 ],\n         ...,\n         [ 1.5874699 ,  2.9900825 ,  1.8761506 ],\n         [ 1.8418471 ,  1.2660207 ,  1.9092261 ],\n         [ 1.3689822 ,  1.6356301 ,  1.952919  ]],\n\n        [[ 1.9298913 ,  0.5918986 ,  1.9657342 ],\n         [ 1.2340074 ,  0.9614824 ,  1.1292384 ],\n         [ 2.4580617 ,  2.4291933 ,  2.6985881 ],\n         ...,\n         [ 2.3145776 ,  1.1432208 ,  1.391178  ],\n         [ 1.2259588 ,  1.7260153 ,  1.6031604 ],\n         [ 1.372651  ,  1.9251597 ,  0.8804808 ]],\n\n        [[ 1.7394955 ,  2.1061053 ,  0.91767883],\n         [ 1.507133  ,  2.823245  ,  2.9930475 ],\n         [ 1.2406433 ,  0.8955691 ,  1.1587831 ],\n         ...,\n         [ 1.8587569 ,  2.813758  ,  1.9936386 ],\n         [ 2.5329664 ,  1.7267983 ,  2.4889274 ],\n         [ 1.7144668 ,  1.2628853 ,  1.7245005 ]],\n\n        ...,\n\n        [[ 0.19871092,  1.0827712 ,  0.93237   ],\n         [ 2.3666608 ,  2.2566926 ,  0.53005147],\n         [ 0.9280288 ,  0.7410106 ,  2.212689  ],\n         ...,\n         [ 1.5658    ,  1.5837146 ,  0.35909036],\n         [ 1.6383454 ,  0.51156425,  1.9617838 ],\n         [ 2.2058918 ,  2.5439866 ,  2.637112  ]],\n\n        [[ 2.0836945 ,  0.57672024,  1.1757234 ],\n         [ 1.5478803 ,  1.3466421 ,  2.5597959 ],\n         [ 2.6071448 ,  2.3555236 ,  1.9862691 ],\n         ...,\n         [ 1.6142509 ,  2.7579274 ,  0.88995916],\n         [ 2.211236  ,  2.0179424 ,  3.1294105 ],\n         [ 2.4199579 ,  2.260118  ,  1.2833664 ]],\n\n        [[ 1.9338809 ,  2.3161464 ,  1.8570962 ],\n         [ 2.5247898 ,  1.0881891 ,  3.3442883 ],\n         [ 2.683146  ,  1.9716632 ,  3.060404  ],\n         ...,\n         [ 1.1552474 ,  1.8411856 ,  2.2571287 ],\n         [ 1.637065  ,  0.7578341 ,  2.7018013 ],\n         [ 1.9209654 ,  1.3275037 ,  2.1121092 ]]],\n\n\n       [[[ 1.995858  ,  1.3338239 ,  1.4309561 ],\n         [-0.57748264,  0.26084185,  0.3147774 ],\n         [ 0.93105143,  1.2671791 ,  1.4925586 ],\n         ...,\n         [ 0.99355316,  1.1326015 ,  0.57788545],\n         [ 0.19964167,  2.3625019 ,  0.8633377 ],\n         [ 2.421085  , -0.43730575,  1.5801712 ]],\n\n        [[-0.12863539,  0.595734  ,  0.12725097],\n         [ 1.7586684 ,  0.7645939 ,  0.6028305 ],\n         [ 0.71853924,  1.3185402 ,  1.141671  ],\n         ...,\n         [ 1.2583528 ,  1.7560425 ,  0.20628268],\n         [ 0.781329  ,  1.5653234 ,  1.6880417 ],\n         [ 0.95409566, -0.22981933,  2.0058641 ]],\n\n        [[ 0.8444652 ,  1.1274135 ,  1.1146094 ],\n         [ 1.5430744 ,  1.8728001 ,  0.41264272],\n         [ 2.4213576 ,  0.43552223,  1.355297  ],\n         ...,\n         [ 1.4677811 ,  1.6956488 , -0.23188783],\n         [ 1.3544018 ,  0.23618022,  0.41906795],\n         [-0.5884874 ,  0.4027254 ,  0.91363245]],\n\n        ...,\n\n        [[ 0.51509726,  3.0538151 ,  1.6106536 ],\n         [ 0.7045956 ,  0.799072  ,  1.2643504 ],\n         [ 0.7641443 ,  0.93446076,  0.7364452 ],\n         ...,\n         [ 1.290928  ,  1.2784065 ,  2.314265  ],\n         [ 0.67183036,  1.0640774 ,  2.1002016 ],\n         [ 1.591963  ,  2.0780249 ,  2.2186065 ]],\n\n        [[ 0.2780072 ,  0.9538093 ,  2.1348588 ],\n         [ 0.20066659, -0.18898684,  0.57581615],\n         [ 1.3218702 ,  1.2996256 ,  1.0539788 ],\n         ...,\n         [ 1.1237597 ,  1.503075  ,  1.5817088 ],\n         [-0.3259267 ,  2.2081249 ,  0.6997572 ],\n         [ 0.01898457,  0.06025209,  2.1362495 ]],\n\n        [[ 0.9558633 ,  1.331801  ,  2.128309  ],\n         [-0.12299398,  0.8374605 ,  1.5615985 ],\n         [ 0.9966193 ,  1.8246278 ,  0.0572228 ],\n         ...,\n         [ 0.25720078,  0.2433899 ,  0.98602355],\n         [ 1.8500549 ,  1.7175021 ,  1.4129514 ],\n         [ 1.0439371 ,  0.6881443 ,  1.0112284 ]]],\n\n\n       ...,\n\n\n       [[[ 2.181213  ,  2.104344  ,  1.5738493 ],\n         [ 2.3612022 ,  1.7400143 ,  3.078472  ],\n         [ 2.4912546 ,  1.6721578 ,  2.5053535 ],\n         ...,\n         [ 1.6705927 ,  2.120567  ,  2.8521504 ],\n         [ 1.635686  ,  1.645765  ,  1.075275  ],\n         [ 2.2393079 ,  3.1326025 ,  2.0074668 ]],\n\n        [[ 1.6744546 ,  3.2703104 ,  3.0475829 ],\n         [ 3.3281348 ,  2.4028156 ,  2.27745   ],\n         [ 2.7300673 ,  1.433729  ,  2.4207604 ],\n         ...,\n         [ 3.6937544 ,  2.249134  ,  1.3086591 ],\n         [ 1.8487846 ,  2.4374237 ,  2.4357214 ],\n         [ 1.027307  ,  1.618845  ,  1.5425215 ]],\n\n        [[ 2.4998255 ,  2.5579448 ,  1.530345  ],\n         [ 2.497833  ,  1.0210544 ,  1.9443544 ],\n         [ 2.1638796 ,  1.5470446 ,  2.5619402 ],\n         ...,\n         [ 2.3441808 ,  2.2553244 ,  3.2603877 ],\n         [ 1.3054395 ,  1.5736355 ,  1.6265979 ],\n         [ 1.9057266 ,  1.9354361 ,  2.59611   ]],\n\n        ...,\n\n        [[ 2.5096939 ,  2.9905634 ,  1.7828567 ],\n         [ 2.1461642 ,  2.4972174 ,  1.5938789 ],\n         [ 3.0186014 ,  3.1126413 ,  1.4509345 ],\n         ...,\n         [ 2.4915793 ,  2.0699492 ,  2.740333  ],\n         [ 2.454224  ,  1.606913  ,  1.9359496 ],\n         [ 0.79865247,  0.80936044,  2.1205604 ]],\n\n        [[ 1.8611785 ,  1.6158714 ,  1.222476  ],\n         [ 2.1897035 ,  2.6623635 ,  1.6851665 ],\n         [ 2.737608  ,  2.0945559 ,  0.57811904],\n         ...,\n         [ 1.0310282 ,  2.0405934 ,  1.5449734 ],\n         [ 1.597369  ,  2.1109872 ,  1.8562005 ],\n         [ 2.4965606 ,  1.1126081 ,  1.6394137 ]],\n\n        [[ 3.0730133 ,  2.1280239 ,  2.6560621 ],\n         [ 2.1032805 ,  1.8357456 ,  2.1483343 ],\n         [ 1.6730007 ,  0.7726457 ,  1.1234891 ],\n         ...,\n         [ 2.099189  ,  2.7745433 ,  2.6594834 ],\n         [ 1.7475867 ,  2.6251175 ,  2.2338004 ],\n         [ 0.7323342 ,  2.1569662 ,  1.766829  ]]],\n\n\n       [[[ 2.373181  ,  2.0018058 ,  2.4356465 ],\n         [ 1.7452183 ,  1.1152527 ,  1.3539776 ],\n         [ 1.5438814 ,  1.3307842 ,  1.108069  ],\n         ...,\n         [ 2.5601938 ,  2.4220467 ,  2.0706635 ],\n         [ 2.1032407 ,  2.4406295 ,  2.2423944 ],\n         [ 0.9152081 ,  2.8592074 ,  3.027894  ]],\n\n        [[ 1.6591854 ,  1.9092089 ,  1.141111  ],\n         [ 3.1505873 ,  1.9553657 ,  2.0689957 ],\n         [ 1.8779705 ,  1.5655168 ,  2.9594312 ],\n         ...,\n         [ 1.3241597 ,  2.2746599 ,  2.7835193 ],\n         [ 1.6652765 ,  2.4865134 ,  2.2486386 ],\n         [ 0.12337171,  3.091647  ,  1.9367429 ]],\n\n        [[ 1.3572677 ,  2.283876  ,  1.7528793 ],\n         [ 2.3772688 ,  2.4607892 ,  0.77398735],\n         [ 2.270208  ,  2.2260242 ,  0.621064  ],\n         ...,\n         [ 1.8210196 ,  2.3027973 ,  3.790377  ],\n         [ 2.2067251 ,  1.8659765 ,  2.0505943 ],\n         [ 1.5546544 ,  2.9245546 ,  2.390477  ]],\n\n        ...,\n\n        [[ 3.5573595 ,  2.4524167 ,  1.3195451 ],\n         [ 2.4225106 ,  2.8911104 ,  2.5299027 ],\n         [ 1.8050592 ,  1.5429047 ,  1.9158292 ],\n         ...,\n         [ 2.1158936 ,  2.3493338 ,  1.1132331 ],\n         [ 2.5098581 ,  2.3352785 ,  2.5247228 ],\n         [ 2.1379225 ,  0.8760624 ,  1.2710434 ]],\n\n        [[ 1.4300857 ,  3.3019872 ,  1.4179897 ],\n         [ 1.2339791 ,  2.894767  ,  2.3179386 ],\n         [ 3.4025538 ,  2.716638  ,  1.2314736 ],\n         ...,\n         [ 2.4978566 ,  2.7364836 ,  2.1231856 ],\n         [ 1.653776  ,  1.0653316 ,  2.905597  ],\n         [ 2.2380886 ,  1.6773361 ,  1.4899579 ]],\n\n        [[ 0.7647099 ,  2.0827234 ,  1.2415658 ],\n         [ 1.7958841 ,  1.5931207 ,  1.3267725 ],\n         [ 1.4999704 ,  2.2186453 ,  2.1539526 ],\n         ...,\n         [ 2.0012746 ,  2.396412  ,  1.9662186 ],\n         [ 2.098697  ,  1.5734352 ,  2.2644591 ],\n         [ 1.2074413 ,  2.395066  ,  1.363565  ]]],\n\n\n       [[[ 1.9235346 ,  2.7706623 ,  2.7115304 ],\n         [ 1.9399271 ,  3.0731    ,  2.1879797 ],\n         [ 2.7187843 ,  2.1769507 ,  1.3225279 ],\n         ...,\n         [ 2.4282131 ,  3.0103931 ,  1.6988894 ],\n         [ 2.1938813 ,  0.86945647,  2.4871967 ],\n         [ 2.0149028 ,  2.5647187 ,  1.3736401 ]],\n\n        [[ 1.435878  ,  2.9349995 ,  2.104701  ],\n         [ 3.6257827 ,  2.6357636 ,  1.8744997 ],\n         [ 1.8068959 ,  1.9828377 ,  2.4876525 ],\n         ...,\n         [ 2.9165425 ,  1.9164506 ,  2.3594632 ],\n         [ 2.0181844 ,  1.5053947 ,  2.3029392 ],\n         [ 2.726376  ,  2.4065564 ,  1.665035  ]],\n\n        [[ 2.3346593 ,  2.3136296 ,  2.1673834 ],\n         [ 1.8948864 ,  2.7484722 ,  3.0937698 ],\n         [ 2.0900564 ,  1.8299716 ,  2.274396  ],\n         ...,\n         [ 3.0702195 ,  2.6377392 ,  2.627931  ],\n         [ 1.6274693 ,  2.9243968 ,  1.5379621 ],\n         [ 1.4686671 ,  2.0648477 ,  2.7557635 ]],\n\n        ...,\n\n        [[ 3.2220986 ,  2.615619  ,  0.7829782 ],\n         [ 2.7667964 ,  3.0450878 ,  1.5216173 ],\n         [ 1.2926522 ,  2.4023032 ,  1.862082  ],\n         ...,\n         [ 2.2742696 ,  2.501347  ,  1.7124593 ],\n         [ 1.657726  ,  2.989055  ,  1.6308769 ],\n         [ 2.8604913 ,  2.9951103 ,  2.1516953 ]],\n\n        [[ 2.1572247 ,  1.8377749 ,  2.4922273 ],\n         [ 1.4288206 ,  2.1828523 ,  1.5090235 ],\n         [ 3.6328566 ,  2.615732  ,  0.64447343],\n         ...,\n         [ 2.3123689 ,  2.7241125 ,  1.2593263 ],\n         [ 1.3721833 ,  2.9425714 ,  2.1494522 ],\n         [ 1.7013749 ,  2.2845745 ,  1.6462029 ]],\n\n        [[ 2.4520125 ,  2.0390785 ,  1.2980356 ],\n         [ 2.1485538 ,  2.1781504 ,  2.242113  ],\n         [ 2.0933278 ,  3.1618857 ,  2.1844985 ],\n         ...,\n         [ 2.3043118 ,  2.3050513 ,  2.8594348 ],\n         [ 0.5711004 ,  3.0280302 ,  2.7376697 ],\n         [ 0.2704184 ,  3.2984285 ,  2.386316  ]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[1.2159787, 0.375]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1273359b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x12732d190>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.9783856010437012, 0.475]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x1272fd640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.73939544, 0.6875], [0.8890412, 0.5], [0.7321173, 0.75], [0.85872865, 0.625], [0.90892625, 0.75], [0.7880481, 0.625], [0.8755743, 0.5625], [0.9115918, 0.625], [0.91949457, 0.5625], [0.7440202, 0.6875], [0.8308456, 0.625], [0.81068206, 0.75], [0.7309361, 0.625]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 1.5420647 ,  2.7106147 ,  1.5759002 ],\n         [ 2.2946243 ,  2.8211477 ,  2.5468235 ],\n         [ 1.9110829 ,  1.0436437 ,  2.7117321 ],\n         ...,\n         [ 1.4797593 ,  1.487524  ,  2.3031874 ],\n         [ 2.1980877 ,  1.0380595 ,  2.2826183 ],\n         [ 1.8489064 ,  2.4745154 ,  1.6723726 ]],\n\n        [[ 2.2014687 ,  1.3481637 ,  2.1672285 ],\n         [ 2.7005823 ,  1.531482  ,  2.61373   ],\n         [ 2.1447413 ,  2.1936893 ,  2.797124  ],\n         ...,\n         [ 2.9227362 ,  1.7173207 ,  2.4702904 ],\n         [ 2.439542  ,  1.4106    ,  3.0568686 ],\n         [ 2.922544  ,  1.2209252 ,  3.3264482 ]],\n\n        [[ 1.4105783 ,  2.082661  ,  1.8449755 ],\n         [ 0.96791935,  1.817295  ,  1.7678399 ],\n         [ 2.5979888 ,  1.8750473 ,  1.4974374 ],\n         ...,\n         [ 2.2417045 ,  1.4853009 ,  2.0406997 ],\n         [ 2.0915632 ,  2.711906  ,  2.408703  ],\n         [ 3.0854378 ,  2.2016253 ,  0.82102245]],\n\n        ...,\n\n        [[ 2.597074  ,  1.6023343 ,  1.9827414 ],\n         [ 1.4027432 ,  2.3013954 ,  1.213891  ],\n         [ 1.5978208 ,  2.0789485 ,  2.9627934 ],\n         ...,\n         [ 1.6407739 ,  1.8638443 ,  2.5291722 ],\n         [ 2.5345073 ,  2.7427244 ,  2.6361313 ],\n         [ 1.9691916 ,  2.856749  ,  2.5177016 ]],\n\n        [[ 1.1083221 ,  2.0487974 ,  2.2173126 ],\n         [ 1.2364458 ,  1.4731688 ,  1.2138705 ],\n         [ 1.1880527 ,  1.1285552 ,  1.9909568 ],\n         ...,\n         [ 2.2232304 ,  0.6728161 ,  1.3906158 ],\n         [ 4.4814377 ,  1.5727823 ,  3.3901296 ],\n         [ 1.5494391 ,  2.8694923 ,  2.2223408 ]],\n\n        [[ 2.9698024 ,  1.6830496 ,  1.6081773 ],\n         [ 2.4395328 ,  1.3483703 ,  1.7562997 ],\n         [ 1.9172559 ,  2.3653474 ,  3.4225338 ],\n         ...,\n         [ 2.4116411 ,  2.073204  ,  2.440256  ],\n         [ 1.8619206 ,  3.3132763 ,  2.5740895 ],\n         [ 2.37751   ,  2.1919143 ,  2.3307712 ]]],\n\n\n       [[[ 1.6593196 ,  2.8155081 ,  0.5994504 ],\n         [ 3.3147902 ,  2.2321384 ,  2.5801644 ],\n         [ 1.8449023 ,  1.4908499 ,  2.9255052 ],\n         ...,\n         [ 2.129093  ,  1.0648953 ,  1.7904347 ],\n         [ 0.25426656,  2.4841301 ,  2.1524954 ],\n         [ 1.8930618 ,  1.759288  ,  1.7321157 ]],\n\n        [[ 1.3431162 ,  2.5347703 ,  1.4114226 ],\n         [ 2.7376213 ,  2.0455444 ,  3.230997  ],\n         [ 1.332555  ,  0.48444504,  0.535004  ],\n         ...,\n         [ 0.72498405,  2.0845358 ,  2.7081769 ],\n         [ 0.8265899 ,  1.3558215 ,  2.4190574 ],\n         [ 1.8245475 ,  1.3262705 ,  1.5658717 ]],\n\n        [[ 1.773009  ,  1.116965  ,  0.894711  ],\n         [ 1.6805443 ,  2.664714  ,  2.2541108 ],\n         [ 3.9232216 ,  1.3993478 ,  1.8902596 ],\n         ...,\n         [ 0.43856883,  3.2676902 ,  2.3133543 ],\n         [ 2.0369873 ,  2.6090305 ,  2.1672394 ],\n         [ 1.4991189 ,  1.7202688 ,  1.8470118 ]],\n\n        ...,\n\n        [[ 2.189449  ,  1.2826769 ,  1.993462  ],\n         [ 1.8302826 ,  2.3569818 ,  2.4932501 ],\n         [ 1.118265  ,  2.03913   ,  2.8179088 ],\n         ...,\n         [ 1.5400803 ,  2.4331899 ,  2.3730845 ],\n         [ 2.0955787 ,  2.211942  ,  2.9520433 ],\n         [ 2.7548368 ,  3.3134954 ,  2.4594157 ]],\n\n        [[ 0.01218027,  1.8740126 ,  1.9839679 ],\n         [ 2.502629  ,  3.274244  ,  1.7934353 ],\n         [ 1.6943064 ,  1.677942  ,  2.272368  ],\n         ...,\n         [ 0.8871794 ,  1.5442818 ,  2.301209  ],\n         [ 2.382312  ,  2.0736525 ,  0.96555066],\n         [ 2.1879551 ,  2.0488324 ,  1.3585862 ]],\n\n        [[ 2.2533596 ,  2.4195051 ,  1.3304161 ],\n         [ 0.63168406,  1.034262  ,  1.7646941 ],\n         [ 2.5481424 ,  1.6597273 ,  2.2400193 ],\n         ...,\n         [ 1.3670845 ,  1.4754093 ,  1.8107063 ],\n         [ 1.8017018 ,  1.7520821 ,  1.2987478 ],\n         [ 2.2413042 ,  1.9889156 ,  2.909023  ]]],\n\n\n       [[[ 2.7580678 ,  3.3484807 ,  3.4706657 ],\n         [ 1.8233436 ,  2.3510706 ,  2.4396288 ],\n         [ 3.0038838 ,  2.3313854 ,  4.002935  ],\n         ...,\n         [ 3.62629   ,  3.0353699 ,  3.3583105 ],\n         [ 3.8706617 ,  3.5146332 ,  2.7478771 ],\n         [ 2.4820247 ,  3.2115905 ,  2.940046  ]],\n\n        [[ 4.1318865 ,  3.3277762 ,  2.5986686 ],\n         [ 3.005039  ,  3.6837761 ,  3.5135663 ],\n         [ 2.9304917 ,  3.2463367 ,  2.4534345 ],\n         ...,\n         [ 2.2859592 ,  3.2519956 ,  2.880373  ],\n         [ 3.5979345 ,  3.0795305 ,  4.506949  ],\n         [ 2.215103  ,  3.9932535 ,  2.4132774 ]],\n\n        [[ 2.4265425 ,  3.597258  ,  1.0853055 ],\n         [ 4.1158957 ,  4.7658525 ,  1.9449531 ],\n         [ 2.5163288 ,  3.3475082 ,  3.410633  ],\n         ...,\n         [ 2.8318212 ,  2.3921223 ,  2.7328656 ],\n         [ 4.104126  ,  2.9514513 ,  3.3479378 ],\n         [ 2.7582204 ,  3.2078574 ,  2.3287935 ]],\n\n        ...,\n\n        [[ 2.4173803 ,  3.7006867 ,  4.661089  ],\n         [ 4.1518497 ,  3.4293513 ,  2.5391245 ],\n         [ 1.8190345 ,  2.489424  ,  1.723765  ],\n         ...,\n         [ 3.2687557 ,  3.8846536 ,  2.9218247 ],\n         [ 3.4100883 ,  3.2253993 ,  2.5676816 ],\n         [ 2.150932  ,  3.4691873 ,  3.4370384 ]],\n\n        [[ 1.5821512 ,  2.3279889 ,  2.8263745 ],\n         [ 4.3906403 ,  2.6491604 ,  2.4991367 ],\n         [ 2.255008  ,  1.6500524 ,  3.7529254 ],\n         ...,\n         [ 2.5802696 ,  2.9564357 ,  2.4378614 ],\n         [ 3.5966375 ,  4.206581  ,  4.683163  ],\n         [ 3.3517385 ,  1.9252352 ,  2.8364565 ]],\n\n        [[ 2.886065  ,  2.3579936 ,  3.7015002 ],\n         [ 2.5565674 ,  2.7164319 ,  2.0175264 ],\n         [ 3.6083312 ,  4.1563206 ,  4.32491   ],\n         ...,\n         [ 3.3139827 ,  3.7120428 ,  2.4393282 ],\n         [ 2.323275  ,  3.3711274 ,  3.2918046 ],\n         [ 2.5123918 ,  4.1981792 ,  2.7569094 ]]],\n\n\n       ...,\n\n\n       [[[ 0.4750032 ,  0.29131293, -0.48074102],\n         [-0.38876972,  1.7729099 ,  0.35235587],\n         [-0.3897352 , -0.09012559, -0.16624539],\n         ...,\n         [-0.06316709,  0.3781898 , -0.67476046],\n         [-0.6629912 , -0.8770391 , -0.37348983],\n         [ 1.2713801 , -1.4077022 , -0.57288206]],\n\n        [[-0.16367155,  0.06898852, -0.31983143],\n         [-0.9424154 , -0.35314527,  0.33287543],\n         [-1.0972975 ,  0.10926501, -0.37710986],\n         ...,\n         [-0.72934145,  0.6660365 ,  0.12771197],\n         [-0.53929585, -0.7645569 , -0.2776166 ],\n         [ 0.99425125,  0.27605954,  0.64614433]],\n\n        [[-0.12326198,  0.6640395 , -0.1249213 ],\n         [ 0.08197961, -0.40779507, -1.142203  ],\n         [-0.32903   ,  0.1480283 , -0.72368443],\n         ...,\n         [ 0.8832713 ,  1.6282747 , -0.5096654 ],\n         [-0.38415906, -0.4625525 , -1.1661781 ],\n         [ 0.829548  ,  0.03985257,  0.6305059 ]],\n\n        ...,\n\n        [[ 0.722336  , -1.1822698 , -0.07033029],\n         [-0.02407864,  1.1324542 ,  1.1258897 ],\n         [ 0.44378525, -0.01110658, -0.3125413 ],\n         ...,\n         [-1.4683325 , -0.02519519, -1.2436484 ],\n         [-0.06921189,  1.7889155 ,  1.1354667 ],\n         [-0.6626424 , -0.62703115, -0.28949636]],\n\n        [[-0.33001158,  0.35688698, -0.8012577 ],\n         [-0.03341176,  0.2949278 ,  1.3484769 ],\n         [-0.18184602,  0.1407568 ,  0.797316  ],\n         ...,\n         [ 0.5393818 , -0.45729282, -0.51659185],\n         [ 0.94918793,  0.40631762,  0.45904368],\n         [-0.3014739 ,  0.04882566, -0.37404788]],\n\n        [[-0.12715666,  1.3754628 ,  0.32691994],\n         [ 0.65305346,  0.36448622,  0.40027294],\n         [ 0.04075839, -0.9185941 ,  0.53259254],\n         ...,\n         [-1.682467  , -0.08031403,  0.05860366],\n         [-1.0375949 , -0.89499   , -0.5332034 ],\n         [-0.33307365, -0.38515747,  0.8754041 ]]],\n\n\n       [[[ 3.5350928 ,  2.446668  ,  4.2303104 ],\n         [ 2.3544917 ,  1.6883188 ,  2.3722558 ],\n         [ 2.9376738 ,  2.9189336 ,  2.7335732 ],\n         ...,\n         [ 3.0443506 ,  3.8616507 ,  4.3674574 ],\n         [ 2.350649  ,  3.6639843 ,  2.6443448 ],\n         [ 3.4144814 ,  3.4639053 ,  2.883024  ]],\n\n        [[ 2.8390367 ,  2.3527548 ,  2.5014904 ],\n         [ 3.3347814 ,  3.6371598 ,  3.5612428 ],\n         [ 3.9824123 ,  3.4342103 ,  3.4172986 ],\n         ...,\n         [ 3.682611  ,  2.2742789 ,  1.7243314 ],\n         [ 2.902206  ,  3.5362    ,  4.548667  ],\n         [ 4.9648166 ,  3.2659395 ,  2.677151  ]],\n\n        [[ 3.0495372 ,  3.3164887 ,  2.9326375 ],\n         [ 1.8439578 ,  3.076648  ,  2.8764734 ],\n         [ 3.0854483 ,  4.682728  ,  3.5991573 ],\n         ...,\n         [ 3.515957  ,  2.1333792 ,  2.2518623 ],\n         [ 3.0018158 ,  2.3866985 ,  3.176267  ],\n         [ 1.4477687 ,  1.532566  ,  3.4541926 ]],\n\n        ...,\n\n        [[ 3.2224712 ,  3.632982  ,  3.6791062 ],\n         [ 3.407063  ,  3.0156507 ,  1.4476166 ],\n         [ 1.9604472 ,  2.489152  ,  2.7285779 ],\n         ...,\n         [ 3.1656435 ,  2.535885  ,  2.0856285 ],\n         [ 2.6269586 ,  4.355512  ,  2.3108523 ],\n         [ 2.1544704 ,  2.8626516 ,  2.9825153 ]],\n\n        [[ 2.5671048 ,  3.319689  ,  4.19707   ],\n         [ 4.555517  ,  4.6737933 ,  3.7100606 ],\n         [ 2.0147183 ,  3.3847067 ,  2.6842341 ],\n         ...,\n         [ 2.0147765 ,  3.6846778 ,  1.9992762 ],\n         [ 2.3574536 ,  4.2208376 ,  0.7837637 ],\n         [ 2.253625  ,  3.3293447 ,  2.7345042 ]],\n\n        [[ 4.206442  ,  3.1372814 ,  2.5962796 ],\n         [ 4.432807  ,  2.6357472 ,  3.753238  ],\n         [ 3.2243345 ,  3.469963  ,  2.3802674 ],\n         ...,\n         [ 2.8090582 ,  4.4820614 ,  3.2269943 ],\n         [ 3.2875457 ,  2.8385653 ,  2.9041593 ],\n         [ 2.6786652 ,  2.2917151 ,  3.7513158 ]]],\n\n\n       [[[ 0.8703191 ,  1.9430678 ,  2.6860867 ],\n         [ 3.0323577 ,  1.7745062 ,  3.0817907 ],\n         [ 2.871257  ,  1.5677434 ,  3.1087518 ],\n         ...,\n         [ 1.5393951 ,  1.9285895 ,  1.8661104 ],\n         [ 2.6068172 ,  2.6311238 ,  1.2359324 ],\n         [ 2.5174618 ,  2.586798  ,  1.6664374 ]],\n\n        [[ 2.5493577 ,  1.4848176 ,  3.3201656 ],\n         [ 1.2820356 ,  3.308116  ,  1.1367301 ],\n         [ 2.148685  ,  2.7611034 ,  1.0547742 ],\n         ...,\n         [ 2.0995858 ,  2.221099  ,  1.7142998 ],\n         [ 2.7254422 ,  1.8761424 ,  1.7943851 ],\n         [ 2.1947548 ,  1.2332871 ,  0.65416217]],\n\n        [[ 0.09274001,  1.206543  ,  1.5000516 ],\n         [ 1.7716323 ,  3.72545   ,  2.1844993 ],\n         [ 1.0557612 ,  3.8186123 ,  2.1605735 ],\n         ...,\n         [ 1.4534242 ,  2.0033817 ,  1.9582441 ],\n         [ 2.1809702 ,  2.141081  ,  2.3841538 ],\n         [ 2.773784  ,  1.1186101 ,  1.9058313 ]],\n\n        ...,\n\n        [[ 3.4286404 ,  2.395351  ,  2.6901338 ],\n         [ 1.3837314 ,  1.6499137 ,  1.6471599 ],\n         [ 3.185537  ,  0.7012654 ,  1.5799838 ],\n         ...,\n         [ 1.54572   ,  1.8629062 ,  2.157821  ],\n         [ 2.5707643 ,  1.6790934 ,  2.4813502 ],\n         [ 1.151167  ,  2.387938  ,  0.83039284]],\n\n        [[ 1.9133581 ,  2.6483753 ,  1.3309317 ],\n         [ 1.9146994 ,  2.1177738 ,  1.334933  ],\n         [ 2.0016556 ,  0.5892712 ,  1.8891847 ],\n         ...,\n         [ 2.4684262 ,  0.47726816,  2.0386403 ],\n         [ 1.7821583 ,  1.611717  ,  1.9795551 ],\n         [ 1.5566689 ,  1.7538433 ,  1.699883  ]],\n\n        [[ 0.9334521 ,  2.062483  ,  1.822266  ],\n         [ 2.6076367 ,  1.0255489 ,  2.936875  ],\n         [ 2.4915078 ,  1.7855    ,  1.6853952 ],\n         ...,\n         [ 2.5053844 ,  3.489826  ,  3.2669609 ],\n         [ 1.4903389 ,  2.115468  ,  2.5480857 ],\n         [ 1.4382958 ,  2.6627195 ,  1.9182104 ]]]], dtype=float32), array([[0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 1.5420647 ,  2.7106147 ,  1.5759002 ],\n         [ 2.2946243 ,  2.8211477 ,  2.5468235 ],\n         [ 1.9110829 ,  1.0436437 ,  2.7117321 ],\n         ...,\n         [ 1.4797593 ,  1.487524  ,  2.3031874 ],\n         [ 2.1980877 ,  1.0380595 ,  2.2826183 ],\n         [ 1.8489064 ,  2.4745154 ,  1.6723726 ]],\n\n        [[ 2.2014687 ,  1.3481637 ,  2.1672285 ],\n         [ 2.7005823 ,  1.531482  ,  2.61373   ],\n         [ 2.1447413 ,  2.1936893 ,  2.797124  ],\n         ...,\n         [ 2.9227362 ,  1.7173207 ,  2.4702904 ],\n         [ 2.439542  ,  1.4106    ,  3.0568686 ],\n         [ 2.922544  ,  1.2209252 ,  3.3264482 ]],\n\n        [[ 1.4105783 ,  2.082661  ,  1.8449755 ],\n         [ 0.96791935,  1.817295  ,  1.7678399 ],\n         [ 2.5979888 ,  1.8750473 ,  1.4974374 ],\n         ...,\n         [ 2.2417045 ,  1.4853009 ,  2.0406997 ],\n         [ 2.0915632 ,  2.711906  ,  2.408703  ],\n         [ 3.0854378 ,  2.2016253 ,  0.82102245]],\n\n        ...,\n\n        [[ 2.597074  ,  1.6023343 ,  1.9827414 ],\n         [ 1.4027432 ,  2.3013954 ,  1.213891  ],\n         [ 1.5978208 ,  2.0789485 ,  2.9627934 ],\n         ...,\n         [ 1.6407739 ,  1.8638443 ,  2.5291722 ],\n         [ 2.5345073 ,  2.7427244 ,  2.6361313 ],\n         [ 1.9691916 ,  2.856749  ,  2.5177016 ]],\n\n        [[ 1.1083221 ,  2.0487974 ,  2.2173126 ],\n         [ 1.2364458 ,  1.4731688 ,  1.2138705 ],\n         [ 1.1880527 ,  1.1285552 ,  1.9909568 ],\n         ...,\n         [ 2.2232304 ,  0.6728161 ,  1.3906158 ],\n         [ 4.4814377 ,  1.5727823 ,  3.3901296 ],\n         [ 1.5494391 ,  2.8694923 ,  2.2223408 ]],\n\n        [[ 2.9698024 ,  1.6830496 ,  1.6081773 ],\n         [ 2.4395328 ,  1.3483703 ,  1.7562997 ],\n         [ 1.9172559 ,  2.3653474 ,  3.4225338 ],\n         ...,\n         [ 2.4116411 ,  2.073204  ,  2.440256  ],\n         [ 1.8619206 ,  3.3132763 ,  2.5740895 ],\n         [ 2.37751   ,  2.1919143 ,  2.3307712 ]]],\n\n\n       [[[ 1.6593196 ,  2.8155081 ,  0.5994504 ],\n         [ 3.3147902 ,  2.2321384 ,  2.5801644 ],\n         [ 1.8449023 ,  1.4908499 ,  2.9255052 ],\n         ...,\n         [ 2.129093  ,  1.0648953 ,  1.7904347 ],\n         [ 0.25426656,  2.4841301 ,  2.1524954 ],\n         [ 1.8930618 ,  1.759288  ,  1.7321157 ]],\n\n        [[ 1.3431162 ,  2.5347703 ,  1.4114226 ],\n         [ 2.7376213 ,  2.0455444 ,  3.230997  ],\n         [ 1.332555  ,  0.48444504,  0.535004  ],\n         ...,\n         [ 0.72498405,  2.0845358 ,  2.7081769 ],\n         [ 0.8265899 ,  1.3558215 ,  2.4190574 ],\n         [ 1.8245475 ,  1.3262705 ,  1.5658717 ]],\n\n        [[ 1.773009  ,  1.116965  ,  0.894711  ],\n         [ 1.6805443 ,  2.664714  ,  2.2541108 ],\n         [ 3.9232216 ,  1.3993478 ,  1.8902596 ],\n         ...,\n         [ 0.43856883,  3.2676902 ,  2.3133543 ],\n         [ 2.0369873 ,  2.6090305 ,  2.1672394 ],\n         [ 1.4991189 ,  1.7202688 ,  1.8470118 ]],\n\n        ...,\n\n        [[ 2.189449  ,  1.2826769 ,  1.993462  ],\n         [ 1.8302826 ,  2.3569818 ,  2.4932501 ],\n         [ 1.118265  ,  2.03913   ,  2.8179088 ],\n         ...,\n         [ 1.5400803 ,  2.4331899 ,  2.3730845 ],\n         [ 2.0955787 ,  2.211942  ,  2.9520433 ],\n         [ 2.7548368 ,  3.3134954 ,  2.4594157 ]],\n\n        [[ 0.01218027,  1.8740126 ,  1.9839679 ],\n         [ 2.502629  ,  3.274244  ,  1.7934353 ],\n         [ 1.6943064 ,  1.677942  ,  2.272368  ],\n         ...,\n         [ 0.8871794 ,  1.5442818 ,  2.301209  ],\n         [ 2.382312  ,  2.0736525 ,  0.96555066],\n         [ 2.1879551 ,  2.0488324 ,  1.3585862 ]],\n\n        [[ 2.2533596 ,  2.4195051 ,  1.3304161 ],\n         [ 0.63168406,  1.034262  ,  1.7646941 ],\n         [ 2.5481424 ,  1.6597273 ,  2.2400193 ],\n         ...,\n         [ 1.3670845 ,  1.4754093 ,  1.8107063 ],\n         [ 1.8017018 ,  1.7520821 ,  1.2987478 ],\n         [ 2.2413042 ,  1.9889156 ,  2.909023  ]]],\n\n\n       [[[ 2.7580678 ,  3.3484807 ,  3.4706657 ],\n         [ 1.8233436 ,  2.3510706 ,  2.4396288 ],\n         [ 3.0038838 ,  2.3313854 ,  4.002935  ],\n         ...,\n         [ 3.62629   ,  3.0353699 ,  3.3583105 ],\n         [ 3.8706617 ,  3.5146332 ,  2.7478771 ],\n         [ 2.4820247 ,  3.2115905 ,  2.940046  ]],\n\n        [[ 4.1318865 ,  3.3277762 ,  2.5986686 ],\n         [ 3.005039  ,  3.6837761 ,  3.5135663 ],\n         [ 2.9304917 ,  3.2463367 ,  2.4534345 ],\n         ...,\n         [ 2.2859592 ,  3.2519956 ,  2.880373  ],\n         [ 3.5979345 ,  3.0795305 ,  4.506949  ],\n         [ 2.215103  ,  3.9932535 ,  2.4132774 ]],\n\n        [[ 2.4265425 ,  3.597258  ,  1.0853055 ],\n         [ 4.1158957 ,  4.7658525 ,  1.9449531 ],\n         [ 2.5163288 ,  3.3475082 ,  3.410633  ],\n         ...,\n         [ 2.8318212 ,  2.3921223 ,  2.7328656 ],\n         [ 4.104126  ,  2.9514513 ,  3.3479378 ],\n         [ 2.7582204 ,  3.2078574 ,  2.3287935 ]],\n\n        ...,\n\n        [[ 2.4173803 ,  3.7006867 ,  4.661089  ],\n         [ 4.1518497 ,  3.4293513 ,  2.5391245 ],\n         [ 1.8190345 ,  2.489424  ,  1.723765  ],\n         ...,\n         [ 3.2687557 ,  3.8846536 ,  2.9218247 ],\n         [ 3.4100883 ,  3.2253993 ,  2.5676816 ],\n         [ 2.150932  ,  3.4691873 ,  3.4370384 ]],\n\n        [[ 1.5821512 ,  2.3279889 ,  2.8263745 ],\n         [ 4.3906403 ,  2.6491604 ,  2.4991367 ],\n         [ 2.255008  ,  1.6500524 ,  3.7529254 ],\n         ...,\n         [ 2.5802696 ,  2.9564357 ,  2.4378614 ],\n         [ 3.5966375 ,  4.206581  ,  4.683163  ],\n         [ 3.3517385 ,  1.9252352 ,  2.8364565 ]],\n\n        [[ 2.886065  ,  2.3579936 ,  3.7015002 ],\n         [ 2.5565674 ,  2.7164319 ,  2.0175264 ],\n         [ 3.6083312 ,  4.1563206 ,  4.32491   ],\n         ...,\n         [ 3.3139827 ,  3.7120428 ,  2.4393282 ],\n         [ 2.323275  ,  3.3711274 ,  3.2918046 ],\n         [ 2.5123918 ,  4.1981792 ,  2.7569094 ]]],\n\n\n       ...,\n\n\n       [[[ 0.4750032 ,  0.29131293, -0.48074102],\n         [-0.38876972,  1.7729099 ,  0.35235587],\n         [-0.3897352 , -0.09012559, -0.16624539],\n         ...,\n         [-0.06316709,  0.3781898 , -0.67476046],\n         [-0.6629912 , -0.8770391 , -0.37348983],\n         [ 1.2713801 , -1.4077022 , -0.57288206]],\n\n        [[-0.16367155,  0.06898852, -0.31983143],\n         [-0.9424154 , -0.35314527,  0.33287543],\n         [-1.0972975 ,  0.10926501, -0.37710986],\n         ...,\n         [-0.72934145,  0.6660365 ,  0.12771197],\n         [-0.53929585, -0.7645569 , -0.2776166 ],\n         [ 0.99425125,  0.27605954,  0.64614433]],\n\n        [[-0.12326198,  0.6640395 , -0.1249213 ],\n         [ 0.08197961, -0.40779507, -1.142203  ],\n         [-0.32903   ,  0.1480283 , -0.72368443],\n         ...,\n         [ 0.8832713 ,  1.6282747 , -0.5096654 ],\n         [-0.38415906, -0.4625525 , -1.1661781 ],\n         [ 0.829548  ,  0.03985257,  0.6305059 ]],\n\n        ...,\n\n        [[ 0.722336  , -1.1822698 , -0.07033029],\n         [-0.02407864,  1.1324542 ,  1.1258897 ],\n         [ 0.44378525, -0.01110658, -0.3125413 ],\n         ...,\n         [-1.4683325 , -0.02519519, -1.2436484 ],\n         [-0.06921189,  1.7889155 ,  1.1354667 ],\n         [-0.6626424 , -0.62703115, -0.28949636]],\n\n        [[-0.33001158,  0.35688698, -0.8012577 ],\n         [-0.03341176,  0.2949278 ,  1.3484769 ],\n         [-0.18184602,  0.1407568 ,  0.797316  ],\n         ...,\n         [ 0.5393818 , -0.45729282, -0.51659185],\n         [ 0.94918793,  0.40631762,  0.45904368],\n         [-0.3014739 ,  0.04882566, -0.37404788]],\n\n        [[-0.12715666,  1.3754628 ,  0.32691994],\n         [ 0.65305346,  0.36448622,  0.40027294],\n         [ 0.04075839, -0.9185941 ,  0.53259254],\n         ...,\n         [-1.682467  , -0.08031403,  0.05860366],\n         [-1.0375949 , -0.89499   , -0.5332034 ],\n         [-0.33307365, -0.38515747,  0.8754041 ]]],\n\n\n       [[[ 3.5350928 ,  2.446668  ,  4.2303104 ],\n         [ 2.3544917 ,  1.6883188 ,  2.3722558 ],\n         [ 2.9376738 ,  2.9189336 ,  2.7335732 ],\n         ...,\n         [ 3.0443506 ,  3.8616507 ,  4.3674574 ],\n         [ 2.350649  ,  3.6639843 ,  2.6443448 ],\n         [ 3.4144814 ,  3.4639053 ,  2.883024  ]],\n\n        [[ 2.8390367 ,  2.3527548 ,  2.5014904 ],\n         [ 3.3347814 ,  3.6371598 ,  3.5612428 ],\n         [ 3.9824123 ,  3.4342103 ,  3.4172986 ],\n         ...,\n         [ 3.682611  ,  2.2742789 ,  1.7243314 ],\n         [ 2.902206  ,  3.5362    ,  4.548667  ],\n         [ 4.9648166 ,  3.2659395 ,  2.677151  ]],\n\n        [[ 3.0495372 ,  3.3164887 ,  2.9326375 ],\n         [ 1.8439578 ,  3.076648  ,  2.8764734 ],\n         [ 3.0854483 ,  4.682728  ,  3.5991573 ],\n         ...,\n         [ 3.515957  ,  2.1333792 ,  2.2518623 ],\n         [ 3.0018158 ,  2.3866985 ,  3.176267  ],\n         [ 1.4477687 ,  1.532566  ,  3.4541926 ]],\n\n        ...,\n\n        [[ 3.2224712 ,  3.632982  ,  3.6791062 ],\n         [ 3.407063  ,  3.0156507 ,  1.4476166 ],\n         [ 1.9604472 ,  2.489152  ,  2.7285779 ],\n         ...,\n         [ 3.1656435 ,  2.535885  ,  2.0856285 ],\n         [ 2.6269586 ,  4.355512  ,  2.3108523 ],\n         [ 2.1544704 ,  2.8626516 ,  2.9825153 ]],\n\n        [[ 2.5671048 ,  3.319689  ,  4.19707   ],\n         [ 4.555517  ,  4.6737933 ,  3.7100606 ],\n         [ 2.0147183 ,  3.3847067 ,  2.6842341 ],\n         ...,\n         [ 2.0147765 ,  3.6846778 ,  1.9992762 ],\n         [ 2.3574536 ,  4.2208376 ,  0.7837637 ],\n         [ 2.253625  ,  3.3293447 ,  2.7345042 ]],\n\n        [[ 4.206442  ,  3.1372814 ,  2.5962796 ],\n         [ 4.432807  ,  2.6357472 ,  3.753238  ],\n         [ 3.2243345 ,  3.469963  ,  2.3802674 ],\n         ...,\n         [ 2.8090582 ,  4.4820614 ,  3.2269943 ],\n         [ 3.2875457 ,  2.8385653 ,  2.9041593 ],\n         [ 2.6786652 ,  2.2917151 ,  3.7513158 ]]],\n\n\n       [[[ 0.8703191 ,  1.9430678 ,  2.6860867 ],\n         [ 3.0323577 ,  1.7745062 ,  3.0817907 ],\n         [ 2.871257  ,  1.5677434 ,  3.1087518 ],\n         ...,\n         [ 1.5393951 ,  1.9285895 ,  1.8661104 ],\n         [ 2.6068172 ,  2.6311238 ,  1.2359324 ],\n         [ 2.5174618 ,  2.586798  ,  1.6664374 ]],\n\n        [[ 2.5493577 ,  1.4848176 ,  3.3201656 ],\n         [ 1.2820356 ,  3.308116  ,  1.1367301 ],\n         [ 2.148685  ,  2.7611034 ,  1.0547742 ],\n         ...,\n         [ 2.0995858 ,  2.221099  ,  1.7142998 ],\n         [ 2.7254422 ,  1.8761424 ,  1.7943851 ],\n         [ 2.1947548 ,  1.2332871 ,  0.65416217]],\n\n        [[ 0.09274001,  1.206543  ,  1.5000516 ],\n         [ 1.7716323 ,  3.72545   ,  2.1844993 ],\n         [ 1.0557612 ,  3.8186123 ,  2.1605735 ],\n         ...,\n         [ 1.4534242 ,  2.0033817 ,  1.9582441 ],\n         [ 2.1809702 ,  2.141081  ,  2.3841538 ],\n         [ 2.773784  ,  1.1186101 ,  1.9058313 ]],\n\n        ...,\n\n        [[ 3.4286404 ,  2.395351  ,  2.6901338 ],\n         [ 1.3837314 ,  1.6499137 ,  1.6471599 ],\n         [ 3.185537  ,  0.7012654 ,  1.5799838 ],\n         ...,\n         [ 1.54572   ,  1.8629062 ,  2.157821  ],\n         [ 2.5707643 ,  1.6790934 ,  2.4813502 ],\n         [ 1.151167  ,  2.387938  ,  0.83039284]],\n\n        [[ 1.9133581 ,  2.6483753 ,  1.3309317 ],\n         [ 1.9146994 ,  2.1177738 ,  1.334933  ],\n         [ 2.0016556 ,  0.5892712 ,  1.8891847 ],\n         ...,\n         [ 2.4684262 ,  0.47726816,  2.0386403 ],\n         [ 1.7821583 ,  1.611717  ,  1.9795551 ],\n         [ 1.5566689 ,  1.7538433 ,  1.699883  ]],\n\n        [[ 0.9334521 ,  2.062483  ,  1.822266  ],\n         [ 2.6076367 ,  1.0255489 ,  2.936875  ],\n         [ 2.4915078 ,  1.7855    ,  1.6853952 ],\n         ...,\n         [ 2.5053844 ,  3.489826  ,  3.2669609 ],\n         [ 1.4903389 ,  2.115468  ,  2.5480857 ],\n         [ 1.4382958 ,  2.6627195 ,  1.9182104 ]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.7309361, 0.625]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1273281e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1272fd690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.8299146819114686, 0.645]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x12732b2d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.7496792, 0.625], [0.91508615, 0.5625], [0.7331999, 0.75], [0.80609727, 0.5625], [0.7507024, 0.625], [0.83545357, 0.5625], [0.76071244, 0.6875], [0.7244071, 0.75], [0.6954501, 0.6875], [0.6718441, 0.6875], [0.70476204, 0.6875], [0.77623916, 0.625], [0.9498876, 0.5]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 2.36005831e+00,  1.92240894e+00,  3.26063275e+00],\n         [ 1.45485735e+00,  1.91047561e+00,  1.38757432e+00],\n         [ 2.23002052e+00,  1.38047826e+00,  2.24522805e+00],\n         ...,\n         [ 1.41782415e+00,  3.33941126e+00,  1.89113414e+00],\n         [ 2.55822706e+00,  1.29250908e+00,  1.53194880e+00],\n         [-1.94519877e-01,  2.76780796e+00,  1.13007879e+00]],\n\n        [[ 1.80473614e+00,  2.20304632e+00,  1.26779151e+00],\n         [ 2.64865279e+00,  2.18655634e+00,  1.80709267e+00],\n         [ 6.65546179e-01,  1.97544181e+00,  2.27909303e+00],\n         ...,\n         [ 3.54303122e+00,  2.51201296e+00,  3.41051650e+00],\n         [ 1.61870253e+00,  2.23305130e+00,  2.52058101e+00],\n         [ 2.23422956e+00,  2.35350895e+00,  1.94104493e+00]],\n\n        [[ 2.17710686e+00,  1.44260180e+00,  1.81897259e+00],\n         [ 3.13878202e+00,  1.78847086e+00,  2.17566705e+00],\n         [ 8.87602627e-01,  2.69172382e+00,  2.65686750e+00],\n         ...,\n         [ 2.74777102e+00,  1.04914832e+00,  2.63148665e+00],\n         [ 1.78057683e+00,  1.15725708e+00,  3.51542997e+00],\n         [ 2.35995102e+00,  1.80461502e+00,  1.42399275e+00]],\n\n        ...,\n\n        [[ 2.33591580e+00,  8.63458931e-01,  2.15245485e+00],\n         [ 8.43145072e-01,  1.07057607e+00,  2.02628732e+00],\n         [ 1.36226273e+00,  2.73631215e+00,  8.43065679e-01],\n         ...,\n         [ 1.15491569e+00,  1.41662979e+00,  1.97132838e+00],\n         [ 3.86818528e+00,  1.86341405e+00,  9.77643847e-01],\n         [ 1.42938268e+00,  3.15202236e+00,  7.87728667e-01]],\n\n        [[ 1.80274558e+00,  1.69386125e+00,  1.67465961e+00],\n         [ 1.24020576e+00,  3.87135446e-01,  2.59162331e+00],\n         [ 2.50362611e+00,  1.07837045e+00,  1.35046732e+00],\n         ...,\n         [ 1.86944818e+00,  2.37593484e+00,  2.49007559e+00],\n         [ 1.31814241e+00, -4.77253258e-01,  1.13256049e+00],\n         [ 3.02306533e+00,  1.64739597e+00,  1.44339979e+00]],\n\n        [[ 2.29463363e+00,  2.21235275e+00,  1.51293206e+00],\n         [ 7.90761769e-01,  2.12300229e+00,  1.88622487e+00],\n         [ 2.56118512e+00,  2.17897868e+00,  2.16761994e+00],\n         ...,\n         [ 1.33051777e+00,  1.73412168e+00,  2.22482800e+00],\n         [ 2.73554301e+00,  1.83871961e+00,  1.53995752e+00],\n         [ 1.95743382e+00,  1.02809083e+00,  2.32493258e+00]]],\n\n\n       [[[ 1.74142146e+00,  3.58570188e-01,  1.36988783e+00],\n         [ 1.24388337e+00,  1.33240569e+00,  1.49779236e+00],\n         [ 6.50322199e-01,  1.63605964e+00,  5.59061229e-01],\n         ...,\n         [ 1.12377930e+00, -2.05151215e-01,  5.12094080e-01],\n         [ 1.29153693e+00,  1.47607613e+00,  2.89461166e-01],\n         [ 7.05032289e-01,  1.61414540e+00,  3.52278560e-01]],\n\n        [[ 1.20799196e+00,  2.87035823e-01,  7.56070197e-01],\n         [ 3.56277883e-01,  7.03546107e-01,  2.35264730e+00],\n         [ 1.10067236e+00,  8.79924834e-01,  4.92874235e-01],\n         ...,\n         [ 1.54532087e+00,  1.25175548e+00,  1.68726742e-01],\n         [ 7.51745462e-01,  6.65119231e-01,  1.98311940e-01],\n         [ 1.82567251e+00,  1.05953503e+00, -3.69033009e-01]],\n\n        [[ 1.39636886e+00,  1.93389010e+00,  1.05182445e+00],\n         [ 2.31515908e+00,  8.20100427e-01,  1.49774265e+00],\n         [ 3.91981900e-01,  1.10416007e+00,  1.28621757e+00],\n         ...,\n         [ 6.41052127e-01,  1.58756340e+00,  2.89492887e-02],\n         [ 1.35721445e+00,  1.53857660e+00,  1.22459459e+00],\n         [ 1.04517198e+00,  1.53551424e+00,  3.11149865e-01]],\n\n        ...,\n\n        [[ 1.35146117e+00,  2.05332613e+00,  2.06897950e+00],\n         [ 4.29950118e-01,  1.12822604e+00,  7.90035009e-01],\n         [ 1.87981188e+00,  1.53561223e+00,  1.48251140e+00],\n         ...,\n         [ 5.76460242e-01,  1.45888877e+00,  1.34988475e+00],\n         [ 1.93454349e+00,  9.69675303e-01,  1.59527183e+00],\n         [ 1.80890620e+00,  2.29880857e+00,  1.12828946e+00]],\n\n        [[ 1.76938200e+00,  1.53454649e+00,  2.16929507e+00],\n         [-5.12684643e-01, -1.86366156e-01,  4.74520922e-01],\n         [ 1.41333318e+00,  5.61382234e-01,  1.10488999e+00],\n         ...,\n         [ 9.63023424e-01,  1.38522792e+00,  8.94963443e-01],\n         [ 1.93245828e+00,  5.71007192e-01,  5.87568402e-01],\n         [ 1.30058837e+00,  5.36135972e-01,  1.77551854e+00]],\n\n        [[ 1.44924212e+00,  1.89724040e+00,  1.10365200e+00],\n         [ 8.80810440e-01,  1.62323499e+00,  9.25324336e-02],\n         [ 6.60199404e-01,  9.05969501e-01,  1.59969747e+00],\n         ...,\n         [ 1.19845498e+00,  1.71049762e+00,  1.22602081e+00],\n         [ 1.14431787e+00,  5.05635083e-01,  6.55376494e-01],\n         [ 2.21543217e+00,  2.25035715e+00, -2.16585383e-01]]],\n\n\n       [[[ 1.20172143e+00,  2.09258819e+00,  1.26879466e+00],\n         [ 1.00694573e+00,  2.54816008e+00,  2.97613168e+00],\n         [ 1.16010880e+00,  1.52851439e+00,  2.85938501e+00],\n         ...,\n         [ 1.84203792e+00,  2.37537694e+00,  2.28956294e+00],\n         [ 2.04043317e+00,  1.17396724e+00,  2.48164678e+00],\n         [ 2.78198791e+00,  5.23811758e-01,  1.68775308e+00]],\n\n        [[ 2.46758103e+00,  2.17093515e+00,  1.09679103e+00],\n         [ 2.06909919e+00,  1.57072783e+00,  1.61297083e+00],\n         [ 2.72017169e+00,  2.75104761e+00,  2.72419047e+00],\n         ...,\n         [ 2.10278702e+00,  1.68608880e+00,  2.21426415e+00],\n         [ 3.39654756e+00,  1.70640433e+00,  7.53341973e-01],\n         [ 2.78152919e+00,  9.00664151e-01,  2.29165173e+00]],\n\n        [[ 2.27728844e+00,  1.90059292e+00,  3.59696126e+00],\n         [ 1.23198545e+00,  1.78628659e+00,  2.09409380e+00],\n         [ 6.88441098e-01,  1.30138826e+00,  1.27918291e+00],\n         ...,\n         [ 2.91743159e+00,  2.34740281e+00,  3.21159959e+00],\n         [ 1.68279409e+00,  1.05202949e+00,  2.32448387e+00],\n         [ 6.04784012e-01,  2.10614657e+00,  2.17302060e+00]],\n\n        ...,\n\n        [[ 1.81528628e+00,  2.49361730e+00,  1.58087206e+00],\n         [ 2.73526835e+00,  2.10793996e+00,  1.52367735e+00],\n         [ 2.23498845e+00,  2.27256894e+00,  2.03709173e+00],\n         ...,\n         [ 2.56987071e+00,  2.38963652e+00,  4.15530348e+00],\n         [ 1.92062962e+00,  1.78915370e+00,  3.19407916e+00],\n         [ 2.23288608e+00,  1.45872629e+00,  3.11277699e+00]],\n\n        [[ 1.02348435e+00,  2.63940573e+00,  3.21825552e+00],\n         [ 1.95086575e+00,  2.74299192e+00,  2.36686254e+00],\n         [ 1.18412197e+00,  1.83968925e+00,  5.74113488e-01],\n         ...,\n         [ 1.55090237e+00,  2.35496116e+00,  2.73975492e+00],\n         [ 2.12531042e+00,  2.11173511e+00,  2.26656437e+00],\n         [ 1.89786243e+00,  2.10135245e+00,  1.96368730e+00]],\n\n        [[ 2.65150356e+00,  2.50496292e+00,  2.70612288e+00],\n         [ 1.08481288e+00,  1.28812563e+00,  1.99378729e+00],\n         [ 1.86682808e+00,  2.25494361e+00,  2.11052465e+00],\n         ...,\n         [ 1.68934309e+00,  2.16230273e+00,  1.17940938e+00],\n         [ 1.72107935e+00,  1.20758605e+00,  1.42966294e+00],\n         [ 3.42157292e+00,  2.00432730e+00,  1.45531654e+00]]],\n\n\n       ...,\n\n\n       [[[-4.26187307e-01,  5.37593186e-01, -5.79799533e-01],\n         [-5.36301851e-01,  3.83234888e-01,  9.74921525e-01],\n         [-5.76966405e-01, -1.48802683e-01, -4.53221560e-01],\n         ...,\n         [ 3.35281312e-01,  8.68862987e-01,  1.13025554e-01],\n         [-6.66730106e-01, -5.82014561e-01, -1.98057517e-01],\n         [ 3.70359212e-01, -7.81317651e-01, -2.16295078e-01]],\n\n        [[-2.51852155e-01, -2.00899512e-01, -4.42700893e-01],\n         [-3.72850329e-01,  9.43000972e-01,  6.96240187e-01],\n         [-4.23258804e-02, -3.81474227e-01, -2.54892349e+00],\n         ...,\n         [ 3.58774960e-01,  7.63552904e-01,  5.34561157e-01],\n         [ 4.09817547e-01,  2.28388295e-01, -1.26345649e-01],\n         [-6.69305682e-01, -6.26636595e-02, -1.27046907e+00]],\n\n        [[-1.12998021e+00,  4.59549934e-01,  1.82381794e-02],\n         [ 5.88620365e-01, -1.63361585e+00, -9.25463021e-01],\n         [-5.30830443e-01,  3.33637208e-01, -1.78607494e-01],\n         ...,\n         [-7.00002193e-01,  2.91396737e-01, -2.92441130e-01],\n         [-3.82776737e-01,  6.30366743e-01, -1.16069913e+00],\n         [ 8.35000157e-01, -3.26835550e-02, -1.03432107e+00]],\n\n        ...,\n\n        [[-5.81679404e-01,  6.13352731e-02,  1.24895468e-01],\n         [ 5.17512202e-01,  2.16953665e-01, -4.89978760e-01],\n         [-8.57951224e-01, -1.64141619e+00, -1.72769547e-01],\n         ...,\n         [ 4.15380269e-01,  1.78217128e-01, -4.14006114e-01],\n         [-3.39746386e-01,  1.10511445e-01, -9.50262964e-01],\n         [ 1.17328367e-03,  9.49728787e-02,  1.38166547e+00]],\n\n        [[-9.63875353e-01,  1.03421199e+00,  1.19579792e+00],\n         [ 7.89292395e-01,  9.67980266e-01, -9.13817883e-02],\n         [ 2.85655111e-01,  9.21768486e-01,  1.19999409e+00],\n         ...,\n         [-2.25071386e-01, -6.19047165e-01,  1.57725647e-01],\n         [-6.57633781e-01, -9.99487817e-01,  9.22095418e-01],\n         [ 8.72538030e-01, -8.64261091e-01, -1.40244710e+00]],\n\n        [[-5.82253814e-01,  2.84092963e-01, -2.21372053e-01],\n         [ 6.22392356e-01, -4.79197592e-01, -5.73261738e-01],\n         [ 1.36261868e+00, -1.23658311e-02,  5.53515553e-01],\n         ...,\n         [ 4.20259893e-01,  7.68904507e-01,  6.89373851e-01],\n         [ 1.22162306e+00, -9.69460070e-01, -2.05237821e-01],\n         [ 2.59926200e-01, -2.87406474e-01, -7.46677458e-01]]],\n\n\n       [[[ 4.93904978e-01,  9.20651853e-01,  1.01339006e+00],\n         [ 9.49082315e-01,  4.88138914e-01,  1.30770302e+00],\n         [ 6.73431039e-01,  8.23278576e-02,  1.12625468e+00],\n         ...,\n         [ 8.16906869e-01,  1.30859900e+00,  9.00115728e-01],\n         [ 1.75149679e+00,  1.88499272e+00,  1.08196437e+00],\n         [ 1.28367138e+00,  9.42165613e-01,  8.42814863e-01]],\n\n        [[ 5.11101127e-01,  1.58226037e+00,  1.65682268e+00],\n         [ 1.95587695e-01,  2.77185082e+00,  1.33310592e+00],\n         [ 9.94169474e-01,  3.78746122e-01,  8.81369293e-01],\n         ...,\n         [ 1.05151546e+00,  1.89290512e+00,  7.10704148e-01],\n         [ 9.27099943e-01,  1.67955112e+00,  5.44231951e-01],\n         [ 2.24996492e-01,  1.00167716e+00,  5.84059119e-01]],\n\n        [[ 7.26450443e-01,  1.60478938e+00,  5.78149498e-01],\n         [ 1.29726815e+00,  1.94584060e+00,  9.25455987e-01],\n         [ 9.34138834e-01,  1.30362523e+00,  9.65896904e-01],\n         ...,\n         [ 8.65921438e-01, -2.96341211e-01,  6.52916789e-01],\n         [ 1.03625488e+00,  2.38227963e+00,  1.55965900e+00],\n         [ 1.20390618e+00, -6.03407204e-01,  2.54294086e+00]],\n\n        ...,\n\n        [[ 1.69182503e+00,  9.36426163e-01,  2.50636935e+00],\n         [ 1.15792334e+00,  2.31576657e+00,  1.40126586e+00],\n         [ 6.20457172e-01,  8.18842530e-01,  1.75108194e+00],\n         ...,\n         [ 1.20310771e+00,  1.26625884e+00,  1.91719997e+00],\n         [ 1.85548580e+00, -3.78433198e-01,  3.90031524e-02],\n         [ 1.39627385e+00,  1.64478254e+00,  2.00501275e+00]],\n\n        [[ 1.11251843e+00,  9.05175388e-01,  2.35591769e+00],\n         [ 5.14454007e-01,  1.34679067e+00,  6.06856346e-01],\n         [ 7.17216015e-01,  1.23743081e+00,  9.48126495e-01],\n         ...,\n         [ 1.16670179e+00,  7.41559088e-01,  2.16487026e+00],\n         [ 1.84311521e+00,  1.78045177e+00,  5.42795956e-01],\n         [ 1.24192834e+00,  1.57592356e+00,  4.32587862e-01]],\n\n        [[ 2.00146794e+00,  1.47286490e-01, -1.70965648e+00],\n         [ 1.03978777e+00,  1.31282330e+00,  1.23498392e+00],\n         [ 7.98913300e-01,  6.20832682e-01,  1.31593749e-01],\n         ...,\n         [ 1.47046649e+00,  1.26964259e+00,  2.74877214e+00],\n         [ 1.96377861e+00,  1.55422878e+00,  7.98532128e-01],\n         [-4.84313399e-01,  5.09930968e-01,  1.04466093e+00]]],\n\n\n       [[[ 4.43626493e-01, -3.47246408e-01, -2.85249185e-02],\n         [ 6.95342004e-01,  3.94794345e-01,  9.50072527e-01],\n         [ 7.47566760e-01, -2.00710595e-02, -8.20382714e-01],\n         ...,\n         [-9.08466339e-01, -2.30393887e-01, -2.48024821e-01],\n         [-1.56755581e-01,  1.03091441e-01, -1.71100631e-01],\n         [ 8.08650374e-01, -3.01564932e-01, -1.20689940e+00]],\n\n        [[-1.61477888e+00,  2.50281036e-01,  2.12548092e-01],\n         [-6.19801879e-01, -3.19093674e-01, -5.62098742e-01],\n         [ 1.65302968e+00, -6.95594549e-01, -6.39637411e-01],\n         ...,\n         [ 3.75516683e-01, -9.81280565e-01,  6.46852314e-01],\n         [ 2.09356084e-01, -1.19360089e+00, -8.44912171e-01],\n         [-7.50574400e-04, -5.63684881e-01,  4.69016641e-01]],\n\n        [[-1.45342514e-01,  5.23461521e-01,  1.03427529e-01],\n         [-3.64787996e-01,  6.78111017e-01,  1.96581805e+00],\n         [ 1.13327235e-01,  2.15464085e-01,  7.94413745e-01],\n         ...,\n         [-1.23559326e-01, -4.84588206e-01,  1.52586973e+00],\n         [-1.48070192e+00, -8.78634512e-01, -5.58784425e-01],\n         [ 7.64927149e-01, -8.86427224e-01,  3.12316537e-01]],\n\n        ...,\n\n        [[-1.19938827e+00,  5.78681417e-02,  5.06466269e-01],\n         [ 4.12202835e-01, -1.26155362e-01,  5.02831459e-01],\n         [-4.41440821e-01,  2.10239366e-01,  5.03514528e-01],\n         ...,\n         [ 3.82268906e-01,  7.91855156e-01, -3.08697820e-02],\n         [-5.63217223e-01,  1.20271862e+00,  4.46680516e-01],\n         [-3.14434558e-01, -5.73700547e-01,  7.97749981e-02]],\n\n        [[ 1.13433588e+00,  1.80862039e-01, -6.70380175e-01],\n         [-1.46615052e+00,  9.53335017e-02, -1.26678050e+00],\n         [-3.05024952e-01, -9.17479321e-02, -3.42574358e-01],\n         ...,\n         [ 6.71232402e-01,  7.16096312e-02,  3.14749032e-01],\n         [-2.47310907e-01,  9.97295260e-01, -7.67966449e-01],\n         [-8.65862310e-01, -2.64847368e-01,  1.21408470e-01]],\n\n        [[ 9.40535605e-01, -1.61452562e-01, -7.93978631e-01],\n         [ 1.03642499e+00,  1.13947904e+00, -4.23843414e-01],\n         [-4.37281765e-02, -8.95803869e-01, -7.30022252e-01],\n         ...,\n         [ 4.69268531e-01, -6.28648341e-01,  4.90897417e-01],\n         [ 2.65697867e-01, -3.39208305e-01, -5.51940739e-01],\n         [-9.41512048e-01, -2.76771963e-01, -3.98013026e-01]]]],\n      dtype=float32), array([[0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 2.36005831e+00,  1.92240894e+00,  3.26063275e+00],\n         [ 1.45485735e+00,  1.91047561e+00,  1.38757432e+00],\n         [ 2.23002052e+00,  1.38047826e+00,  2.24522805e+00],\n         ...,\n         [ 1.41782415e+00,  3.33941126e+00,  1.89113414e+00],\n         [ 2.55822706e+00,  1.29250908e+00,  1.53194880e+00],\n         [-1.94519877e-01,  2.76780796e+00,  1.13007879e+00]],\n\n        [[ 1.80473614e+00,  2.20304632e+00,  1.26779151e+00],\n         [ 2.64865279e+00,  2.18655634e+00,  1.80709267e+00],\n         [ 6.65546179e-01,  1.97544181e+00,  2.27909303e+00],\n         ...,\n         [ 3.54303122e+00,  2.51201296e+00,  3.41051650e+00],\n         [ 1.61870253e+00,  2.23305130e+00,  2.52058101e+00],\n         [ 2.23422956e+00,  2.35350895e+00,  1.94104493e+00]],\n\n        [[ 2.17710686e+00,  1.44260180e+00,  1.81897259e+00],\n         [ 3.13878202e+00,  1.78847086e+00,  2.17566705e+00],\n         [ 8.87602627e-01,  2.69172382e+00,  2.65686750e+00],\n         ...,\n         [ 2.74777102e+00,  1.04914832e+00,  2.63148665e+00],\n         [ 1.78057683e+00,  1.15725708e+00,  3.51542997e+00],\n         [ 2.35995102e+00,  1.80461502e+00,  1.42399275e+00]],\n\n        ...,\n\n        [[ 2.33591580e+00,  8.63458931e-01,  2.15245485e+00],\n         [ 8.43145072e-01,  1.07057607e+00,  2.02628732e+00],\n         [ 1.36226273e+00,  2.73631215e+00,  8.43065679e-01],\n         ...,\n         [ 1.15491569e+00,  1.41662979e+00,  1.97132838e+00],\n         [ 3.86818528e+00,  1.86341405e+00,  9.77643847e-01],\n         [ 1.42938268e+00,  3.15202236e+00,  7.87728667e-01]],\n\n        [[ 1.80274558e+00,  1.69386125e+00,  1.67465961e+00],\n         [ 1.24020576e+00,  3.87135446e-01,  2.59162331e+00],\n         [ 2.50362611e+00,  1.07837045e+00,  1.35046732e+00],\n         ...,\n         [ 1.86944818e+00,  2.37593484e+00,  2.49007559e+00],\n         [ 1.31814241e+00, -4.77253258e-01,  1.13256049e+00],\n         [ 3.02306533e+00,  1.64739597e+00,  1.44339979e+00]],\n\n        [[ 2.29463363e+00,  2.21235275e+00,  1.51293206e+00],\n         [ 7.90761769e-01,  2.12300229e+00,  1.88622487e+00],\n         [ 2.56118512e+00,  2.17897868e+00,  2.16761994e+00],\n         ...,\n         [ 1.33051777e+00,  1.73412168e+00,  2.22482800e+00],\n         [ 2.73554301e+00,  1.83871961e+00,  1.53995752e+00],\n         [ 1.95743382e+00,  1.02809083e+00,  2.32493258e+00]]],\n\n\n       [[[ 1.74142146e+00,  3.58570188e-01,  1.36988783e+00],\n         [ 1.24388337e+00,  1.33240569e+00,  1.49779236e+00],\n         [ 6.50322199e-01,  1.63605964e+00,  5.59061229e-01],\n         ...,\n         [ 1.12377930e+00, -2.05151215e-01,  5.12094080e-01],\n         [ 1.29153693e+00,  1.47607613e+00,  2.89461166e-01],\n         [ 7.05032289e-01,  1.61414540e+00,  3.52278560e-01]],\n\n        [[ 1.20799196e+00,  2.87035823e-01,  7.56070197e-01],\n         [ 3.56277883e-01,  7.03546107e-01,  2.35264730e+00],\n         [ 1.10067236e+00,  8.79924834e-01,  4.92874235e-01],\n         ...,\n         [ 1.54532087e+00,  1.25175548e+00,  1.68726742e-01],\n         [ 7.51745462e-01,  6.65119231e-01,  1.98311940e-01],\n         [ 1.82567251e+00,  1.05953503e+00, -3.69033009e-01]],\n\n        [[ 1.39636886e+00,  1.93389010e+00,  1.05182445e+00],\n         [ 2.31515908e+00,  8.20100427e-01,  1.49774265e+00],\n         [ 3.91981900e-01,  1.10416007e+00,  1.28621757e+00],\n         ...,\n         [ 6.41052127e-01,  1.58756340e+00,  2.89492887e-02],\n         [ 1.35721445e+00,  1.53857660e+00,  1.22459459e+00],\n         [ 1.04517198e+00,  1.53551424e+00,  3.11149865e-01]],\n\n        ...,\n\n        [[ 1.35146117e+00,  2.05332613e+00,  2.06897950e+00],\n         [ 4.29950118e-01,  1.12822604e+00,  7.90035009e-01],\n         [ 1.87981188e+00,  1.53561223e+00,  1.48251140e+00],\n         ...,\n         [ 5.76460242e-01,  1.45888877e+00,  1.34988475e+00],\n         [ 1.93454349e+00,  9.69675303e-01,  1.59527183e+00],\n         [ 1.80890620e+00,  2.29880857e+00,  1.12828946e+00]],\n\n        [[ 1.76938200e+00,  1.53454649e+00,  2.16929507e+00],\n         [-5.12684643e-01, -1.86366156e-01,  4.74520922e-01],\n         [ 1.41333318e+00,  5.61382234e-01,  1.10488999e+00],\n         ...,\n         [ 9.63023424e-01,  1.38522792e+00,  8.94963443e-01],\n         [ 1.93245828e+00,  5.71007192e-01,  5.87568402e-01],\n         [ 1.30058837e+00,  5.36135972e-01,  1.77551854e+00]],\n\n        [[ 1.44924212e+00,  1.89724040e+00,  1.10365200e+00],\n         [ 8.80810440e-01,  1.62323499e+00,  9.25324336e-02],\n         [ 6.60199404e-01,  9.05969501e-01,  1.59969747e+00],\n         ...,\n         [ 1.19845498e+00,  1.71049762e+00,  1.22602081e+00],\n         [ 1.14431787e+00,  5.05635083e-01,  6.55376494e-01],\n         [ 2.21543217e+00,  2.25035715e+00, -2.16585383e-01]]],\n\n\n       [[[ 1.20172143e+00,  2.09258819e+00,  1.26879466e+00],\n         [ 1.00694573e+00,  2.54816008e+00,  2.97613168e+00],\n         [ 1.16010880e+00,  1.52851439e+00,  2.85938501e+00],\n         ...,\n         [ 1.84203792e+00,  2.37537694e+00,  2.28956294e+00],\n         [ 2.04043317e+00,  1.17396724e+00,  2.48164678e+00],\n         [ 2.78198791e+00,  5.23811758e-01,  1.68775308e+00]],\n\n        [[ 2.46758103e+00,  2.17093515e+00,  1.09679103e+00],\n         [ 2.06909919e+00,  1.57072783e+00,  1.61297083e+00],\n         [ 2.72017169e+00,  2.75104761e+00,  2.72419047e+00],\n         ...,\n         [ 2.10278702e+00,  1.68608880e+00,  2.21426415e+00],\n         [ 3.39654756e+00,  1.70640433e+00,  7.53341973e-01],\n         [ 2.78152919e+00,  9.00664151e-01,  2.29165173e+00]],\n\n        [[ 2.27728844e+00,  1.90059292e+00,  3.59696126e+00],\n         [ 1.23198545e+00,  1.78628659e+00,  2.09409380e+00],\n         [ 6.88441098e-01,  1.30138826e+00,  1.27918291e+00],\n         ...,\n         [ 2.91743159e+00,  2.34740281e+00,  3.21159959e+00],\n         [ 1.68279409e+00,  1.05202949e+00,  2.32448387e+00],\n         [ 6.04784012e-01,  2.10614657e+00,  2.17302060e+00]],\n\n        ...,\n\n        [[ 1.81528628e+00,  2.49361730e+00,  1.58087206e+00],\n         [ 2.73526835e+00,  2.10793996e+00,  1.52367735e+00],\n         [ 2.23498845e+00,  2.27256894e+00,  2.03709173e+00],\n         ...,\n         [ 2.56987071e+00,  2.38963652e+00,  4.15530348e+00],\n         [ 1.92062962e+00,  1.78915370e+00,  3.19407916e+00],\n         [ 2.23288608e+00,  1.45872629e+00,  3.11277699e+00]],\n\n        [[ 1.02348435e+00,  2.63940573e+00,  3.21825552e+00],\n         [ 1.95086575e+00,  2.74299192e+00,  2.36686254e+00],\n         [ 1.18412197e+00,  1.83968925e+00,  5.74113488e-01],\n         ...,\n         [ 1.55090237e+00,  2.35496116e+00,  2.73975492e+00],\n         [ 2.12531042e+00,  2.11173511e+00,  2.26656437e+00],\n         [ 1.89786243e+00,  2.10135245e+00,  1.96368730e+00]],\n\n        [[ 2.65150356e+00,  2.50496292e+00,  2.70612288e+00],\n         [ 1.08481288e+00,  1.28812563e+00,  1.99378729e+00],\n         [ 1.86682808e+00,  2.25494361e+00,  2.11052465e+00],\n         ...,\n         [ 1.68934309e+00,  2.16230273e+00,  1.17940938e+00],\n         [ 1.72107935e+00,  1.20758605e+00,  1.42966294e+00],\n         [ 3.42157292e+00,  2.00432730e+00,  1.45531654e+00]]],\n\n\n       ...,\n\n\n       [[[-4.26187307e-01,  5.37593186e-01, -5.79799533e-01],\n         [-5.36301851e-01,  3.83234888e-01,  9.74921525e-01],\n         [-5.76966405e-01, -1.48802683e-01, -4.53221560e-01],\n         ...,\n         [ 3.35281312e-01,  8.68862987e-01,  1.13025554e-01],\n         [-6.66730106e-01, -5.82014561e-01, -1.98057517e-01],\n         [ 3.70359212e-01, -7.81317651e-01, -2.16295078e-01]],\n\n        [[-2.51852155e-01, -2.00899512e-01, -4.42700893e-01],\n         [-3.72850329e-01,  9.43000972e-01,  6.96240187e-01],\n         [-4.23258804e-02, -3.81474227e-01, -2.54892349e+00],\n         ...,\n         [ 3.58774960e-01,  7.63552904e-01,  5.34561157e-01],\n         [ 4.09817547e-01,  2.28388295e-01, -1.26345649e-01],\n         [-6.69305682e-01, -6.26636595e-02, -1.27046907e+00]],\n\n        [[-1.12998021e+00,  4.59549934e-01,  1.82381794e-02],\n         [ 5.88620365e-01, -1.63361585e+00, -9.25463021e-01],\n         [-5.30830443e-01,  3.33637208e-01, -1.78607494e-01],\n         ...,\n         [-7.00002193e-01,  2.91396737e-01, -2.92441130e-01],\n         [-3.82776737e-01,  6.30366743e-01, -1.16069913e+00],\n         [ 8.35000157e-01, -3.26835550e-02, -1.03432107e+00]],\n\n        ...,\n\n        [[-5.81679404e-01,  6.13352731e-02,  1.24895468e-01],\n         [ 5.17512202e-01,  2.16953665e-01, -4.89978760e-01],\n         [-8.57951224e-01, -1.64141619e+00, -1.72769547e-01],\n         ...,\n         [ 4.15380269e-01,  1.78217128e-01, -4.14006114e-01],\n         [-3.39746386e-01,  1.10511445e-01, -9.50262964e-01],\n         [ 1.17328367e-03,  9.49728787e-02,  1.38166547e+00]],\n\n        [[-9.63875353e-01,  1.03421199e+00,  1.19579792e+00],\n         [ 7.89292395e-01,  9.67980266e-01, -9.13817883e-02],\n         [ 2.85655111e-01,  9.21768486e-01,  1.19999409e+00],\n         ...,\n         [-2.25071386e-01, -6.19047165e-01,  1.57725647e-01],\n         [-6.57633781e-01, -9.99487817e-01,  9.22095418e-01],\n         [ 8.72538030e-01, -8.64261091e-01, -1.40244710e+00]],\n\n        [[-5.82253814e-01,  2.84092963e-01, -2.21372053e-01],\n         [ 6.22392356e-01, -4.79197592e-01, -5.73261738e-01],\n         [ 1.36261868e+00, -1.23658311e-02,  5.53515553e-01],\n         ...,\n         [ 4.20259893e-01,  7.68904507e-01,  6.89373851e-01],\n         [ 1.22162306e+00, -9.69460070e-01, -2.05237821e-01],\n         [ 2.59926200e-01, -2.87406474e-01, -7.46677458e-01]]],\n\n\n       [[[ 4.93904978e-01,  9.20651853e-01,  1.01339006e+00],\n         [ 9.49082315e-01,  4.88138914e-01,  1.30770302e+00],\n         [ 6.73431039e-01,  8.23278576e-02,  1.12625468e+00],\n         ...,\n         [ 8.16906869e-01,  1.30859900e+00,  9.00115728e-01],\n         [ 1.75149679e+00,  1.88499272e+00,  1.08196437e+00],\n         [ 1.28367138e+00,  9.42165613e-01,  8.42814863e-01]],\n\n        [[ 5.11101127e-01,  1.58226037e+00,  1.65682268e+00],\n         [ 1.95587695e-01,  2.77185082e+00,  1.33310592e+00],\n         [ 9.94169474e-01,  3.78746122e-01,  8.81369293e-01],\n         ...,\n         [ 1.05151546e+00,  1.89290512e+00,  7.10704148e-01],\n         [ 9.27099943e-01,  1.67955112e+00,  5.44231951e-01],\n         [ 2.24996492e-01,  1.00167716e+00,  5.84059119e-01]],\n\n        [[ 7.26450443e-01,  1.60478938e+00,  5.78149498e-01],\n         [ 1.29726815e+00,  1.94584060e+00,  9.25455987e-01],\n         [ 9.34138834e-01,  1.30362523e+00,  9.65896904e-01],\n         ...,\n         [ 8.65921438e-01, -2.96341211e-01,  6.52916789e-01],\n         [ 1.03625488e+00,  2.38227963e+00,  1.55965900e+00],\n         [ 1.20390618e+00, -6.03407204e-01,  2.54294086e+00]],\n\n        ...,\n\n        [[ 1.69182503e+00,  9.36426163e-01,  2.50636935e+00],\n         [ 1.15792334e+00,  2.31576657e+00,  1.40126586e+00],\n         [ 6.20457172e-01,  8.18842530e-01,  1.75108194e+00],\n         ...,\n         [ 1.20310771e+00,  1.26625884e+00,  1.91719997e+00],\n         [ 1.85548580e+00, -3.78433198e-01,  3.90031524e-02],\n         [ 1.39627385e+00,  1.64478254e+00,  2.00501275e+00]],\n\n        [[ 1.11251843e+00,  9.05175388e-01,  2.35591769e+00],\n         [ 5.14454007e-01,  1.34679067e+00,  6.06856346e-01],\n         [ 7.17216015e-01,  1.23743081e+00,  9.48126495e-01],\n         ...,\n         [ 1.16670179e+00,  7.41559088e-01,  2.16487026e+00],\n         [ 1.84311521e+00,  1.78045177e+00,  5.42795956e-01],\n         [ 1.24192834e+00,  1.57592356e+00,  4.32587862e-01]],\n\n        [[ 2.00146794e+00,  1.47286490e-01, -1.70965648e+00],\n         [ 1.03978777e+00,  1.31282330e+00,  1.23498392e+00],\n         [ 7.98913300e-01,  6.20832682e-01,  1.31593749e-01],\n         ...,\n         [ 1.47046649e+00,  1.26964259e+00,  2.74877214e+00],\n         [ 1.96377861e+00,  1.55422878e+00,  7.98532128e-01],\n         [-4.84313399e-01,  5.09930968e-01,  1.04466093e+00]]],\n\n\n       [[[ 4.43626493e-01, -3.47246408e-01, -2.85249185e-02],\n         [ 6.95342004e-01,  3.94794345e-01,  9.50072527e-01],\n         [ 7.47566760e-01, -2.00710595e-02, -8.20382714e-01],\n         ...,\n         [-9.08466339e-01, -2.30393887e-01, -2.48024821e-01],\n         [-1.56755581e-01,  1.03091441e-01, -1.71100631e-01],\n         [ 8.08650374e-01, -3.01564932e-01, -1.20689940e+00]],\n\n        [[-1.61477888e+00,  2.50281036e-01,  2.12548092e-01],\n         [-6.19801879e-01, -3.19093674e-01, -5.62098742e-01],\n         [ 1.65302968e+00, -6.95594549e-01, -6.39637411e-01],\n         ...,\n         [ 3.75516683e-01, -9.81280565e-01,  6.46852314e-01],\n         [ 2.09356084e-01, -1.19360089e+00, -8.44912171e-01],\n         [-7.50574400e-04, -5.63684881e-01,  4.69016641e-01]],\n\n        [[-1.45342514e-01,  5.23461521e-01,  1.03427529e-01],\n         [-3.64787996e-01,  6.78111017e-01,  1.96581805e+00],\n         [ 1.13327235e-01,  2.15464085e-01,  7.94413745e-01],\n         ...,\n         [-1.23559326e-01, -4.84588206e-01,  1.52586973e+00],\n         [-1.48070192e+00, -8.78634512e-01, -5.58784425e-01],\n         [ 7.64927149e-01, -8.86427224e-01,  3.12316537e-01]],\n\n        ...,\n\n        [[-1.19938827e+00,  5.78681417e-02,  5.06466269e-01],\n         [ 4.12202835e-01, -1.26155362e-01,  5.02831459e-01],\n         [-4.41440821e-01,  2.10239366e-01,  5.03514528e-01],\n         ...,\n         [ 3.82268906e-01,  7.91855156e-01, -3.08697820e-02],\n         [-5.63217223e-01,  1.20271862e+00,  4.46680516e-01],\n         [-3.14434558e-01, -5.73700547e-01,  7.97749981e-02]],\n\n        [[ 1.13433588e+00,  1.80862039e-01, -6.70380175e-01],\n         [-1.46615052e+00,  9.53335017e-02, -1.26678050e+00],\n         [-3.05024952e-01, -9.17479321e-02, -3.42574358e-01],\n         ...,\n         [ 6.71232402e-01,  7.16096312e-02,  3.14749032e-01],\n         [-2.47310907e-01,  9.97295260e-01, -7.67966449e-01],\n         [-8.65862310e-01, -2.64847368e-01,  1.21408470e-01]],\n\n        [[ 9.40535605e-01, -1.61452562e-01, -7.93978631e-01],\n         [ 1.03642499e+00,  1.13947904e+00, -4.23843414e-01],\n         [-4.37281765e-02, -8.95803869e-01, -7.30022252e-01],\n         ...,\n         [ 4.69268531e-01, -6.28648341e-01,  4.90897417e-01],\n         [ 2.65697867e-01, -3.39208305e-01, -5.51940739e-01],\n         [-9.41512048e-01, -2.76771963e-01, -3.98013026e-01]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.9498876, 0.5]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x12737b230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x12737b320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.7678861784934997, 0.645]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x127337190>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.6510319, 0.6875], [0.64643127, 0.6875], [0.7804047, 0.5625], [0.78999734, 0.5625], [0.7243712, 0.625], [0.65352094, 0.75], [0.64427704, 0.6875], [0.58202267, 0.75], [0.4948737, 0.8125], [0.6784136, 0.6875], [0.85108876, 0.5], [0.81190157, 0.5], [0.8187959, 0.5]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[-0.25442582,  1.1839509 , -0.69635487],\n         [-1.6237615 ,  0.36305055,  0.5662558 ],\n         [ 0.15383735,  0.8542082 , -1.0070069 ],\n         ...,\n         [ 0.61226654, -0.61098796, -0.88992923],\n         [-0.6208966 ,  1.2039782 ,  1.0548959 ],\n         [ 0.21656804, -1.3543278 ,  0.89595985]],\n\n        [[-0.24292141,  0.46926633, -0.92853016],\n         [ 0.07975456, -1.1955259 ,  1.0403543 ],\n         [ 0.16635442, -1.8508523 , -1.237233  ],\n         ...,\n         [ 0.24121118, -0.26633942,  0.6847419 ],\n         [-0.36402515,  0.9267305 ,  0.10443894],\n         [ 0.4135203 , -0.08100761, -0.38955724]],\n\n        [[-0.41157153,  0.02246066,  1.4154373 ],\n         [-0.8011418 ,  0.7310828 , -1.1444973 ],\n         [-1.8324194 ,  0.32086283,  0.621946  ],\n         ...,\n         [ 0.32479185, -0.18528108,  0.38282233],\n         [ 0.10642993,  0.19284742,  0.17107187],\n         [-0.5311676 , -0.11521737, -0.10676707]],\n\n        ...,\n\n        [[ 0.20031717, -0.38886976,  0.608525  ],\n         [-0.49053293,  0.2180117 , -0.74937105],\n         [ 0.30743605,  1.2567306 , -0.70902145],\n         ...,\n         [-0.00499438,  0.85428077, -0.47472343],\n         [-0.7097551 ,  0.45280546, -0.09708019],\n         [-1.2907265 , -0.61179733,  0.6992604 ]],\n\n        [[-0.971994  ,  0.76073253,  0.23850468],\n         [ 0.02583869,  0.7375701 ,  0.6103196 ],\n         [-0.36134225,  0.366233  ,  0.5802994 ],\n         ...,\n         [ 0.00896499, -1.122243  ,  1.2106111 ],\n         [ 0.69039917,  0.84019166,  0.34109968],\n         [ 0.62042296,  1.0055282 , -0.3735571 ]],\n\n        [[-0.28150827,  0.11364627,  0.08870287],\n         [ 0.55974215,  0.29215208,  0.3486849 ],\n         [-0.39460003,  0.03740339, -0.11713033],\n         ...,\n         [ 1.2078408 ,  0.2794549 , -0.6513397 ],\n         [-0.44122124, -1.033215  , -0.9879197 ],\n         [-0.4774696 , -0.14196622, -0.11694801]]],\n\n\n       [[[ 1.4871528 ,  3.821785  ,  2.5548031 ],\n         [ 2.7385318 ,  2.1644936 ,  1.7643971 ],\n         [ 1.7108128 ,  2.155938  ,  0.8765461 ],\n         ...,\n         [ 0.8003135 ,  2.4306715 ,  1.5926111 ],\n         [ 2.4735296 ,  1.3680466 ,  2.2402813 ],\n         [ 1.0353662 ,  1.9353492 ,  3.2501628 ]],\n\n        [[ 1.1645873 ,  2.496712  ,  1.9307863 ],\n         [ 2.085129  ,  2.371079  ,  2.0055134 ],\n         [ 2.2939196 ,  1.1897883 ,  2.2410555 ],\n         ...,\n         [ 2.8532152 ,  2.7412436 ,  2.947572  ],\n         [ 1.2288342 ,  2.4009962 ,  1.9296837 ],\n         [ 4.545954  ,  1.7716073 ,  2.2478766 ]],\n\n        [[ 1.2359748 ,  1.7973827 ,  0.58983195],\n         [ 1.7320477 ,  1.6520789 ,  2.5853162 ],\n         [ 1.8409646 ,  1.3961997 ,  1.7522151 ],\n         ...,\n         [ 2.2579973 ,  3.185183  ,  1.6485908 ],\n         [ 2.3959568 ,  2.058503  ,  1.5813102 ],\n         [ 2.1374998 ,  1.158726  ,  1.8061236 ]],\n\n        ...,\n\n        [[ 0.8622201 ,  1.5750483 ,  2.2295432 ],\n         [ 2.0711207 ,  2.0911264 ,  2.134834  ],\n         [ 1.4456955 ,  2.6716444 ,  0.7378147 ],\n         ...,\n         [ 2.394348  ,  1.3557221 ,  1.8122171 ],\n         [ 2.3706453 ,  3.160461  ,  2.5256355 ],\n         [ 2.2090764 ,  1.0541643 ,  2.0485537 ]],\n\n        [[ 1.1207592 ,  2.2416894 ,  2.410939  ],\n         [ 1.6241208 ,  0.9228209 ,  2.2761679 ],\n         [ 2.7378776 ,  1.6650412 ,  2.1051698 ],\n         ...,\n         [ 1.333128  ,  2.9891284 ,  0.44663033],\n         [ 3.293884  ,  2.7190003 ,  2.3409805 ],\n         [ 2.5776694 ,  1.730798  ,  1.9313319 ]],\n\n        [[ 3.1967978 ,  0.9820653 ,  2.6273096 ],\n         [ 2.191641  ,  3.1414745 ,  0.8165145 ],\n         [ 2.014126  ,  1.4391102 ,  1.889119  ],\n         ...,\n         [ 2.3911605 ,  3.5376475 ,  3.2641883 ],\n         [ 1.5117368 ,  2.2953746 ,  1.886311  ],\n         [ 1.5169781 ,  2.8376637 ,  2.5125763 ]]],\n\n\n       [[[ 2.6603243 ,  1.9153767 ,  1.1094497 ],\n         [ 2.9172554 ,  1.9540077 ,  1.8054048 ],\n         [ 1.1326169 ,  1.8102086 ,  2.349435  ],\n         ...,\n         [ 1.434724  ,  2.321543  ,  2.3661888 ],\n         [ 2.74529   ,  0.97151405,  1.1234102 ],\n         [ 3.5898678 ,  2.25883   ,  2.7961574 ]],\n\n        [[ 1.1814325 ,  0.7977136 ,  2.271758  ],\n         [ 3.1326714 ,  1.5982879 ,  1.6360418 ],\n         [ 3.0407078 ,  1.7233523 ,  1.8617384 ],\n         ...,\n         [ 3.3712907 ,  1.0306467 ,  1.0278748 ],\n         [ 1.4280977 ,  1.2495683 ,  2.5385897 ],\n         [ 1.5478978 ,  2.7098212 ,  2.4825454 ]],\n\n        [[ 2.571548  ,  1.9464117 ,  1.2669855 ],\n         [ 2.741198  ,  2.2355576 ,  2.6294792 ],\n         [ 1.6563444 ,  0.75674754,  2.107994  ],\n         ...,\n         [ 2.389126  ,  1.8488624 ,  2.6345086 ],\n         [ 1.6550643 ,  1.8060875 ,  1.5643213 ],\n         [ 1.4418699 ,  0.84286714,  1.4776131 ]],\n\n        ...,\n\n        [[ 1.7652274 ,  2.1369414 ,  2.2833169 ],\n         [ 2.6777844 ,  2.2183788 ,  2.4123156 ],\n         [ 1.1881045 ,  2.81821   ,  2.3551903 ],\n         ...,\n         [ 2.9220135 ,  2.1967022 ,  2.2499654 ],\n         [ 2.6598055 ,  2.465767  ,  0.35320538],\n         [ 1.1289585 ,  1.6226437 ,  1.2696927 ]],\n\n        [[ 0.18144035,  1.4843785 ,  0.8357903 ],\n         [ 1.8268248 ,  2.3253696 ,  2.3542197 ],\n         [ 3.2860286 ,  2.5363452 ,  2.3061898 ],\n         ...,\n         [ 2.3446965 ,  2.1581824 ,  0.08896516],\n         [ 1.578938  ,  3.5933313 ,  3.007685  ],\n         [ 2.8991148 ,  2.316964  ,  1.2104144 ]],\n\n        [[ 1.7522119 ,  1.785187  ,  1.7963727 ],\n         [ 1.8605433 ,  2.2784574 ,  2.689143  ],\n         [ 0.8970736 ,  2.1154044 ,  2.0674946 ],\n         ...,\n         [ 2.0269408 ,  1.9593045 ,  1.653424  ],\n         [ 2.6883337 ,  1.6933002 ,  1.1304144 ],\n         [ 2.3111296 ,  1.9449775 ,  2.111581  ]]],\n\n\n       ...,\n\n\n       [[[-0.36595985,  0.8008784 ,  1.4327688 ],\n         [-0.51293546,  0.51133084,  0.5208827 ],\n         [ 0.89140755, -0.11872511,  0.6311057 ],\n         ...,\n         [-1.1741478 , -0.48793164, -0.6367755 ],\n         [ 0.5027565 , -0.38495755, -0.15315886],\n         [ 0.934202  , -0.5571744 ,  0.86776733]],\n\n        [[ 2.1665978 , -0.05166014, -0.3949744 ],\n         [-1.0064887 ,  0.27098793, -0.16764005],\n         [ 0.21277572,  0.63057745,  0.12032899],\n         ...,\n         [-1.1427002 , -0.5941138 , -0.76378036],\n         [-0.4000171 ,  0.42841464, -0.45525917],\n         [ 0.02205161, -0.22467561, -0.28052777]],\n\n        [[-0.08083785, -0.47055402,  1.6117021 ],\n         [ 0.34807596,  1.1941273 , -0.15173867],\n         [ 0.0774241 , -0.6122881 , -0.96576875],\n         ...,\n         [ 1.6888334 , -0.43180797,  0.14039296],\n         [-0.08469528,  0.1923262 ,  0.90750426],\n         [ 0.42981613, -0.240638  ,  0.03909858]],\n\n        ...,\n\n        [[ 0.01888429, -0.5320114 ,  0.17327943],\n         [ 1.9178028 , -0.41602367,  0.9396261 ],\n         [ 0.24146478,  1.2121397 ,  0.24944769],\n         ...,\n         [-0.04386785, -0.20644672,  0.54731965],\n         [-0.12819992,  0.11085343,  0.89909357],\n         [ 0.57703114,  0.99793816,  1.3221465 ]],\n\n        [[ 0.473588  , -0.15324153,  1.069252  ],\n         [-0.10253286, -0.46613488, -0.6483744 ],\n         [ 1.026357  , -0.15038118,  0.91302097],\n         ...,\n         [-2.0567822 , -0.05301435, -0.7107517 ],\n         [ 0.02267558, -0.01909866,  0.9375459 ],\n         [ 1.246964  , -0.2918844 , -0.99820393]],\n\n        [[-1.1807374 , -0.13245298, -0.16053605],\n         [ 0.43456265,  0.5382813 , -0.52911824],\n         [-1.2111284 ,  0.6990324 , -0.85313755],\n         ...,\n         [-1.5027382 , -0.28873608, -0.36919248],\n         [ 0.16272236, -0.40304098, -0.9212384 ],\n         [ 0.47922334,  0.501179  , -0.1835282 ]]],\n\n\n       [[[ 1.1995214 ,  0.10634528,  1.8371909 ],\n         [ 0.53605455, -0.16639887,  0.57670325],\n         [ 0.63480604,  1.4273455 ,  0.94169396],\n         ...,\n         [ 0.3979157 ,  1.0357891 ,  0.76562464],\n         [-1.4955925 , -0.17431776,  1.8327597 ],\n         [ 0.8420901 ,  1.5564213 ,  0.8376156 ]],\n\n        [[ 0.18341754,  2.3163137 ,  0.8043531 ],\n         [ 0.01762846,  1.2536372 ,  0.18593317],\n         [ 1.283358  ,  0.8370869 ,  1.133466  ],\n         ...,\n         [ 0.82519156,  1.8582653 ,  0.20607682],\n         [ 0.1338262 ,  1.1648145 ,  0.86562544],\n         [ 0.30467075,  2.2771282 ,  0.82464063]],\n\n        [[ 1.1026616 ,  0.8154744 ,  0.9933279 ],\n         [ 0.18769144,  1.3516423 ,  0.8003151 ],\n         [ 0.77532834,  0.6750144 ,  1.0561851 ],\n         ...,\n         [-0.6571462 ,  2.4494648 ,  0.7465885 ],\n         [ 1.8944854 ,  0.9715619 ,  2.3605604 ],\n         [ 0.8920199 ,  1.2546533 ,  0.94922835]],\n\n        ...,\n\n        [[ 0.3262096 ,  1.435783  ,  1.3111705 ],\n         [ 0.4033443 ,  2.1247804 ,  0.4839475 ],\n         [ 0.76088154, -0.05650693,  0.829674  ],\n         ...,\n         [ 0.6239421 ,  0.75945354,  0.32511088],\n         [ 0.6896528 ,  1.0339891 ,  0.8974703 ],\n         [ 1.024456  ,  0.03401832,  2.1947646 ]],\n\n        [[ 1.5666907 ,  1.9640069 ,  1.587127  ],\n         [-0.12062429,  1.5231678 ,  1.2603836 ],\n         [ 1.2236112 ,  1.4079126 ,  1.6967747 ],\n         ...,\n         [ 1.0827262 ,  1.3893754 ,  0.93332005],\n         [ 2.2097223 ,  0.56657517,  1.710491  ],\n         [ 0.46897298,  0.62207377,  1.4537619 ]],\n\n        [[ 1.1514956 ,  1.5188514 ,  0.4514875 ],\n         [ 1.6132231 ,  1.8442011 ,  0.44941083],\n         [ 0.18983072,  0.8185111 ,  1.3579232 ],\n         ...,\n         [ 0.16691886,  0.63242126,  1.4698471 ],\n         [ 1.1449351 ,  1.0631233 ,  0.25469553],\n         [ 1.0048553 ,  1.2117033 ,  1.1450735 ]]],\n\n\n       [[[ 1.8769673 ,  2.405747  ,  2.1838305 ],\n         [ 1.9857203 ,  1.392386  ,  1.8252753 ],\n         [ 2.746388  ,  1.2901651 ,  1.789547  ],\n         ...,\n         [ 3.1866474 ,  1.233781  ,  2.1136324 ],\n         [ 3.3849576 ,  2.5053918 ,  2.9928513 ],\n         [ 1.8753061 ,  0.5881817 ,  1.6416005 ]],\n\n        [[ 2.255261  ,  1.7456703 ,  2.9781528 ],\n         [ 2.5848913 ,  2.6891265 ,  2.8298347 ],\n         [ 1.4999745 ,  3.1868389 ,  2.025781  ],\n         ...,\n         [ 0.97368044,  3.1826286 ,  2.0867941 ],\n         [ 1.684876  ,  2.9374015 ,  1.0654843 ],\n         [ 0.65964437,  1.7394396 ,  3.1364098 ]],\n\n        [[ 2.283046  ,  1.8108152 ,  2.8473604 ],\n         [ 2.742728  ,  2.8506882 ,  0.9798077 ],\n         [ 2.000465  ,  1.4282553 ,  1.7994157 ],\n         ...,\n         [ 1.3237557 ,  1.7706378 ,  2.3475058 ],\n         [ 2.1721632 ,  1.3482094 ,  2.8008897 ],\n         [ 1.5678962 ,  2.1775215 ,  2.4540234 ]],\n\n        ...,\n\n        [[ 0.9810324 ,  2.7920833 ,  2.4633825 ],\n         [ 2.5953395 ,  1.3651923 ,  2.100448  ],\n         [ 1.2006985 ,  1.209127  ,  1.4484167 ],\n         ...,\n         [ 2.2134566 ,  0.84156007,  2.8800383 ],\n         [ 2.1680727 ,  2.3636944 ,  3.3395884 ],\n         [ 2.3240943 ,  2.3105073 ,  1.220452  ]],\n\n        [[ 2.3087695 ,  2.5612404 ,  1.5188484 ],\n         [ 0.8395832 ,  1.1850418 ,  1.729143  ],\n         [ 2.9254162 ,  2.6921158 ,  2.173244  ],\n         ...,\n         [ 1.1186228 ,  1.958898  ,  1.829946  ],\n         [ 1.4101313 ,  2.5563133 ,  2.9632795 ],\n         [ 1.5991907 ,  1.1966459 ,  2.3620133 ]],\n\n        [[ 0.717517  ,  2.3311546 ,  3.8955545 ],\n         [ 2.5662541 ,  1.8053764 ,  1.211602  ],\n         [ 1.1739285 ,  2.7425556 ,  1.9106249 ],\n         ...,\n         [ 1.1797863 ,  0.99696285,  3.5061448 ],\n         [ 2.5717974 ,  1.6872154 ,  1.2980272 ],\n         [ 3.1937313 ,  2.723729  ,  2.642637  ]]]], dtype=float32), array([[1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[-0.25442582,  1.1839509 , -0.69635487],\n         [-1.6237615 ,  0.36305055,  0.5662558 ],\n         [ 0.15383735,  0.8542082 , -1.0070069 ],\n         ...,\n         [ 0.61226654, -0.61098796, -0.88992923],\n         [-0.6208966 ,  1.2039782 ,  1.0548959 ],\n         [ 0.21656804, -1.3543278 ,  0.89595985]],\n\n        [[-0.24292141,  0.46926633, -0.92853016],\n         [ 0.07975456, -1.1955259 ,  1.0403543 ],\n         [ 0.16635442, -1.8508523 , -1.237233  ],\n         ...,\n         [ 0.24121118, -0.26633942,  0.6847419 ],\n         [-0.36402515,  0.9267305 ,  0.10443894],\n         [ 0.4135203 , -0.08100761, -0.38955724]],\n\n        [[-0.41157153,  0.02246066,  1.4154373 ],\n         [-0.8011418 ,  0.7310828 , -1.1444973 ],\n         [-1.8324194 ,  0.32086283,  0.621946  ],\n         ...,\n         [ 0.32479185, -0.18528108,  0.38282233],\n         [ 0.10642993,  0.19284742,  0.17107187],\n         [-0.5311676 , -0.11521737, -0.10676707]],\n\n        ...,\n\n        [[ 0.20031717, -0.38886976,  0.608525  ],\n         [-0.49053293,  0.2180117 , -0.74937105],\n         [ 0.30743605,  1.2567306 , -0.70902145],\n         ...,\n         [-0.00499438,  0.85428077, -0.47472343],\n         [-0.7097551 ,  0.45280546, -0.09708019],\n         [-1.2907265 , -0.61179733,  0.6992604 ]],\n\n        [[-0.971994  ,  0.76073253,  0.23850468],\n         [ 0.02583869,  0.7375701 ,  0.6103196 ],\n         [-0.36134225,  0.366233  ,  0.5802994 ],\n         ...,\n         [ 0.00896499, -1.122243  ,  1.2106111 ],\n         [ 0.69039917,  0.84019166,  0.34109968],\n         [ 0.62042296,  1.0055282 , -0.3735571 ]],\n\n        [[-0.28150827,  0.11364627,  0.08870287],\n         [ 0.55974215,  0.29215208,  0.3486849 ],\n         [-0.39460003,  0.03740339, -0.11713033],\n         ...,\n         [ 1.2078408 ,  0.2794549 , -0.6513397 ],\n         [-0.44122124, -1.033215  , -0.9879197 ],\n         [-0.4774696 , -0.14196622, -0.11694801]]],\n\n\n       [[[ 1.4871528 ,  3.821785  ,  2.5548031 ],\n         [ 2.7385318 ,  2.1644936 ,  1.7643971 ],\n         [ 1.7108128 ,  2.155938  ,  0.8765461 ],\n         ...,\n         [ 0.8003135 ,  2.4306715 ,  1.5926111 ],\n         [ 2.4735296 ,  1.3680466 ,  2.2402813 ],\n         [ 1.0353662 ,  1.9353492 ,  3.2501628 ]],\n\n        [[ 1.1645873 ,  2.496712  ,  1.9307863 ],\n         [ 2.085129  ,  2.371079  ,  2.0055134 ],\n         [ 2.2939196 ,  1.1897883 ,  2.2410555 ],\n         ...,\n         [ 2.8532152 ,  2.7412436 ,  2.947572  ],\n         [ 1.2288342 ,  2.4009962 ,  1.9296837 ],\n         [ 4.545954  ,  1.7716073 ,  2.2478766 ]],\n\n        [[ 1.2359748 ,  1.7973827 ,  0.58983195],\n         [ 1.7320477 ,  1.6520789 ,  2.5853162 ],\n         [ 1.8409646 ,  1.3961997 ,  1.7522151 ],\n         ...,\n         [ 2.2579973 ,  3.185183  ,  1.6485908 ],\n         [ 2.3959568 ,  2.058503  ,  1.5813102 ],\n         [ 2.1374998 ,  1.158726  ,  1.8061236 ]],\n\n        ...,\n\n        [[ 0.8622201 ,  1.5750483 ,  2.2295432 ],\n         [ 2.0711207 ,  2.0911264 ,  2.134834  ],\n         [ 1.4456955 ,  2.6716444 ,  0.7378147 ],\n         ...,\n         [ 2.394348  ,  1.3557221 ,  1.8122171 ],\n         [ 2.3706453 ,  3.160461  ,  2.5256355 ],\n         [ 2.2090764 ,  1.0541643 ,  2.0485537 ]],\n\n        [[ 1.1207592 ,  2.2416894 ,  2.410939  ],\n         [ 1.6241208 ,  0.9228209 ,  2.2761679 ],\n         [ 2.7378776 ,  1.6650412 ,  2.1051698 ],\n         ...,\n         [ 1.333128  ,  2.9891284 ,  0.44663033],\n         [ 3.293884  ,  2.7190003 ,  2.3409805 ],\n         [ 2.5776694 ,  1.730798  ,  1.9313319 ]],\n\n        [[ 3.1967978 ,  0.9820653 ,  2.6273096 ],\n         [ 2.191641  ,  3.1414745 ,  0.8165145 ],\n         [ 2.014126  ,  1.4391102 ,  1.889119  ],\n         ...,\n         [ 2.3911605 ,  3.5376475 ,  3.2641883 ],\n         [ 1.5117368 ,  2.2953746 ,  1.886311  ],\n         [ 1.5169781 ,  2.8376637 ,  2.5125763 ]]],\n\n\n       [[[ 2.6603243 ,  1.9153767 ,  1.1094497 ],\n         [ 2.9172554 ,  1.9540077 ,  1.8054048 ],\n         [ 1.1326169 ,  1.8102086 ,  2.349435  ],\n         ...,\n         [ 1.434724  ,  2.321543  ,  2.3661888 ],\n         [ 2.74529   ,  0.97151405,  1.1234102 ],\n         [ 3.5898678 ,  2.25883   ,  2.7961574 ]],\n\n        [[ 1.1814325 ,  0.7977136 ,  2.271758  ],\n         [ 3.1326714 ,  1.5982879 ,  1.6360418 ],\n         [ 3.0407078 ,  1.7233523 ,  1.8617384 ],\n         ...,\n         [ 3.3712907 ,  1.0306467 ,  1.0278748 ],\n         [ 1.4280977 ,  1.2495683 ,  2.5385897 ],\n         [ 1.5478978 ,  2.7098212 ,  2.4825454 ]],\n\n        [[ 2.571548  ,  1.9464117 ,  1.2669855 ],\n         [ 2.741198  ,  2.2355576 ,  2.6294792 ],\n         [ 1.6563444 ,  0.75674754,  2.107994  ],\n         ...,\n         [ 2.389126  ,  1.8488624 ,  2.6345086 ],\n         [ 1.6550643 ,  1.8060875 ,  1.5643213 ],\n         [ 1.4418699 ,  0.84286714,  1.4776131 ]],\n\n        ...,\n\n        [[ 1.7652274 ,  2.1369414 ,  2.2833169 ],\n         [ 2.6777844 ,  2.2183788 ,  2.4123156 ],\n         [ 1.1881045 ,  2.81821   ,  2.3551903 ],\n         ...,\n         [ 2.9220135 ,  2.1967022 ,  2.2499654 ],\n         [ 2.6598055 ,  2.465767  ,  0.35320538],\n         [ 1.1289585 ,  1.6226437 ,  1.2696927 ]],\n\n        [[ 0.18144035,  1.4843785 ,  0.8357903 ],\n         [ 1.8268248 ,  2.3253696 ,  2.3542197 ],\n         [ 3.2860286 ,  2.5363452 ,  2.3061898 ],\n         ...,\n         [ 2.3446965 ,  2.1581824 ,  0.08896516],\n         [ 1.578938  ,  3.5933313 ,  3.007685  ],\n         [ 2.8991148 ,  2.316964  ,  1.2104144 ]],\n\n        [[ 1.7522119 ,  1.785187  ,  1.7963727 ],\n         [ 1.8605433 ,  2.2784574 ,  2.689143  ],\n         [ 0.8970736 ,  2.1154044 ,  2.0674946 ],\n         ...,\n         [ 2.0269408 ,  1.9593045 ,  1.653424  ],\n         [ 2.6883337 ,  1.6933002 ,  1.1304144 ],\n         [ 2.3111296 ,  1.9449775 ,  2.111581  ]]],\n\n\n       ...,\n\n\n       [[[-0.36595985,  0.8008784 ,  1.4327688 ],\n         [-0.51293546,  0.51133084,  0.5208827 ],\n         [ 0.89140755, -0.11872511,  0.6311057 ],\n         ...,\n         [-1.1741478 , -0.48793164, -0.6367755 ],\n         [ 0.5027565 , -0.38495755, -0.15315886],\n         [ 0.934202  , -0.5571744 ,  0.86776733]],\n\n        [[ 2.1665978 , -0.05166014, -0.3949744 ],\n         [-1.0064887 ,  0.27098793, -0.16764005],\n         [ 0.21277572,  0.63057745,  0.12032899],\n         ...,\n         [-1.1427002 , -0.5941138 , -0.76378036],\n         [-0.4000171 ,  0.42841464, -0.45525917],\n         [ 0.02205161, -0.22467561, -0.28052777]],\n\n        [[-0.08083785, -0.47055402,  1.6117021 ],\n         [ 0.34807596,  1.1941273 , -0.15173867],\n         [ 0.0774241 , -0.6122881 , -0.96576875],\n         ...,\n         [ 1.6888334 , -0.43180797,  0.14039296],\n         [-0.08469528,  0.1923262 ,  0.90750426],\n         [ 0.42981613, -0.240638  ,  0.03909858]],\n\n        ...,\n\n        [[ 0.01888429, -0.5320114 ,  0.17327943],\n         [ 1.9178028 , -0.41602367,  0.9396261 ],\n         [ 0.24146478,  1.2121397 ,  0.24944769],\n         ...,\n         [-0.04386785, -0.20644672,  0.54731965],\n         [-0.12819992,  0.11085343,  0.89909357],\n         [ 0.57703114,  0.99793816,  1.3221465 ]],\n\n        [[ 0.473588  , -0.15324153,  1.069252  ],\n         [-0.10253286, -0.46613488, -0.6483744 ],\n         [ 1.026357  , -0.15038118,  0.91302097],\n         ...,\n         [-2.0567822 , -0.05301435, -0.7107517 ],\n         [ 0.02267558, -0.01909866,  0.9375459 ],\n         [ 1.246964  , -0.2918844 , -0.99820393]],\n\n        [[-1.1807374 , -0.13245298, -0.16053605],\n         [ 0.43456265,  0.5382813 , -0.52911824],\n         [-1.2111284 ,  0.6990324 , -0.85313755],\n         ...,\n         [-1.5027382 , -0.28873608, -0.36919248],\n         [ 0.16272236, -0.40304098, -0.9212384 ],\n         [ 0.47922334,  0.501179  , -0.1835282 ]]],\n\n\n       [[[ 1.1995214 ,  0.10634528,  1.8371909 ],\n         [ 0.53605455, -0.16639887,  0.57670325],\n         [ 0.63480604,  1.4273455 ,  0.94169396],\n         ...,\n         [ 0.3979157 ,  1.0357891 ,  0.76562464],\n         [-1.4955925 , -0.17431776,  1.8327597 ],\n         [ 0.8420901 ,  1.5564213 ,  0.8376156 ]],\n\n        [[ 0.18341754,  2.3163137 ,  0.8043531 ],\n         [ 0.01762846,  1.2536372 ,  0.18593317],\n         [ 1.283358  ,  0.8370869 ,  1.133466  ],\n         ...,\n         [ 0.82519156,  1.8582653 ,  0.20607682],\n         [ 0.1338262 ,  1.1648145 ,  0.86562544],\n         [ 0.30467075,  2.2771282 ,  0.82464063]],\n\n        [[ 1.1026616 ,  0.8154744 ,  0.9933279 ],\n         [ 0.18769144,  1.3516423 ,  0.8003151 ],\n         [ 0.77532834,  0.6750144 ,  1.0561851 ],\n         ...,\n         [-0.6571462 ,  2.4494648 ,  0.7465885 ],\n         [ 1.8944854 ,  0.9715619 ,  2.3605604 ],\n         [ 0.8920199 ,  1.2546533 ,  0.94922835]],\n\n        ...,\n\n        [[ 0.3262096 ,  1.435783  ,  1.3111705 ],\n         [ 0.4033443 ,  2.1247804 ,  0.4839475 ],\n         [ 0.76088154, -0.05650693,  0.829674  ],\n         ...,\n         [ 0.6239421 ,  0.75945354,  0.32511088],\n         [ 0.6896528 ,  1.0339891 ,  0.8974703 ],\n         [ 1.024456  ,  0.03401832,  2.1947646 ]],\n\n        [[ 1.5666907 ,  1.9640069 ,  1.587127  ],\n         [-0.12062429,  1.5231678 ,  1.2603836 ],\n         [ 1.2236112 ,  1.4079126 ,  1.6967747 ],\n         ...,\n         [ 1.0827262 ,  1.3893754 ,  0.93332005],\n         [ 2.2097223 ,  0.56657517,  1.710491  ],\n         [ 0.46897298,  0.62207377,  1.4537619 ]],\n\n        [[ 1.1514956 ,  1.5188514 ,  0.4514875 ],\n         [ 1.6132231 ,  1.8442011 ,  0.44941083],\n         [ 0.18983072,  0.8185111 ,  1.3579232 ],\n         ...,\n         [ 0.16691886,  0.63242126,  1.4698471 ],\n         [ 1.1449351 ,  1.0631233 ,  0.25469553],\n         [ 1.0048553 ,  1.2117033 ,  1.1450735 ]]],\n\n\n       [[[ 1.8769673 ,  2.405747  ,  2.1838305 ],\n         [ 1.9857203 ,  1.392386  ,  1.8252753 ],\n         [ 2.746388  ,  1.2901651 ,  1.789547  ],\n         ...,\n         [ 3.1866474 ,  1.233781  ,  2.1136324 ],\n         [ 3.3849576 ,  2.5053918 ,  2.9928513 ],\n         [ 1.8753061 ,  0.5881817 ,  1.6416005 ]],\n\n        [[ 2.255261  ,  1.7456703 ,  2.9781528 ],\n         [ 2.5848913 ,  2.6891265 ,  2.8298347 ],\n         [ 1.4999745 ,  3.1868389 ,  2.025781  ],\n         ...,\n         [ 0.97368044,  3.1826286 ,  2.0867941 ],\n         [ 1.684876  ,  2.9374015 ,  1.0654843 ],\n         [ 0.65964437,  1.7394396 ,  3.1364098 ]],\n\n        [[ 2.283046  ,  1.8108152 ,  2.8473604 ],\n         [ 2.742728  ,  2.8506882 ,  0.9798077 ],\n         [ 2.000465  ,  1.4282553 ,  1.7994157 ],\n         ...,\n         [ 1.3237557 ,  1.7706378 ,  2.3475058 ],\n         [ 2.1721632 ,  1.3482094 ,  2.8008897 ],\n         [ 1.5678962 ,  2.1775215 ,  2.4540234 ]],\n\n        ...,\n\n        [[ 0.9810324 ,  2.7920833 ,  2.4633825 ],\n         [ 2.5953395 ,  1.3651923 ,  2.100448  ],\n         [ 1.2006985 ,  1.209127  ,  1.4484167 ],\n         ...,\n         [ 2.2134566 ,  0.84156007,  2.8800383 ],\n         [ 2.1680727 ,  2.3636944 ,  3.3395884 ],\n         [ 2.3240943 ,  2.3105073 ,  1.220452  ]],\n\n        [[ 2.3087695 ,  2.5612404 ,  1.5188484 ],\n         [ 0.8395832 ,  1.1850418 ,  1.729143  ],\n         [ 2.9254162 ,  2.6921158 ,  2.173244  ],\n         ...,\n         [ 1.1186228 ,  1.958898  ,  1.829946  ],\n         [ 1.4101313 ,  2.5563133 ,  2.9632795 ],\n         [ 1.5991907 ,  1.1966459 ,  2.3620133 ]],\n\n        [[ 0.717517  ,  2.3311546 ,  3.8955545 ],\n         [ 2.5662541 ,  1.8053764 ,  1.211602  ],\n         [ 1.1739285 ,  2.7425556 ,  1.9106249 ],\n         ...,\n         [ 1.1797863 ,  0.99696285,  3.5061448 ],\n         [ 2.5717974 ,  1.6872154 ,  1.2980272 ],\n         [ 3.1937313 ,  2.723729  ,  2.642637  ]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.8187959, 0.5]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x127387fa0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x127346460>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.6974186134338379, 0.645]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x12789b1e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.60823053, 0.875], [0.47084835, 0.8125], [0.44555923, 0.9375], [0.5806766, 0.875], [0.550002, 0.625], [0.40861627, 0.875], [0.5641887, 0.8125], [0.5426276, 0.9375], [0.6377867, 0.75], [0.57023144, 0.8125], [0.48989725, 0.9375], [0.5078013, 0.75], [0.3049407, 1.0]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[-4.82544094e-01,  1.37926012e-01, -3.24819945e-02],\n         [ 7.68754900e-01,  1.97525179e+00, -2.21337110e-01],\n         [ 2.71075517e-01, -3.14272910e-01,  1.14166439e+00],\n         ...,\n         [ 1.33702099e+00,  1.24304748e+00,  1.86158621e+00],\n         [ 2.29157135e-01,  1.46763563e+00,  5.63884266e-02],\n         [-1.24289870e-01,  8.06700945e-01,  8.32484543e-01]],\n\n        [[ 8.62220407e-01,  7.40745187e-01,  1.69831610e+00],\n         [ 2.31390762e+00,  2.02790809e+00,  1.15754926e+00],\n         [ 1.90597725e+00,  1.00856733e+00,  5.61657250e-01],\n         ...,\n         [-2.10171252e-01,  7.71601140e-01,  4.72614706e-01],\n         [ 7.64424145e-01,  1.03067756e+00,  1.56817448e+00],\n         [ 2.39540219e+00,  4.58024651e-01,  1.56525445e+00]],\n\n        [[ 2.07784510e+00,  1.87840414e+00,  3.09572268e+00],\n         [ 8.24109077e-01,  1.07983029e+00,  1.76573074e+00],\n         [ 1.61542928e+00, -1.97736975e-02,  4.06991184e-01],\n         ...,\n         [ 3.27355057e-01,  1.96225464e+00, -1.92754447e-01],\n         [ 8.78149629e-01,  9.88438725e-01,  9.54802454e-01],\n         [ 1.01406717e+00,  6.84350729e-01,  6.04652464e-01]],\n\n        ...,\n\n        [[ 7.93002009e-01,  6.36520088e-01,  1.81723130e+00],\n         [ 1.70944679e+00,  3.20199460e-01, -6.31492496e-01],\n         [ 8.13003242e-01,  1.12949336e+00,  1.25753236e+00],\n         ...,\n         [ 1.71933556e+00,  8.56361687e-01,  5.01634836e-01],\n         [ 1.27116001e+00, -1.10191393e+00,  1.00915265e+00],\n         [ 1.95263505e+00,  1.85418427e+00,  7.91254163e-01]],\n\n        [[ 1.92623878e+00,  1.41067421e+00,  5.84322512e-01],\n         [-1.17341805e+00,  1.65862703e+00,  1.75718105e+00],\n         [ 9.11733925e-01,  2.76240158e+00,  3.76931399e-01],\n         ...,\n         [-3.79428148e-01,  1.71694922e+00,  1.35448003e+00],\n         [ 1.60083151e+00,  4.37318802e-01,  2.17475557e+00],\n         [ 2.90784836e+00,  1.55789122e-01,  1.57150614e+00]],\n\n        [[ 1.23973191e+00, -4.20942485e-01,  8.73208523e-01],\n         [ 1.74336910e+00,  1.45928466e+00,  1.20258641e+00],\n         [ 2.83678889e-01, -5.90076327e-01,  1.11653376e+00],\n         ...,\n         [ 1.54897285e+00, -3.88675272e-01,  1.77014148e+00],\n         [-2.33839288e-01,  8.26082408e-01,  1.66845274e+00],\n         [-3.60953599e-01,  9.24968243e-01,  8.08469832e-01]]],\n\n\n       [[[ 2.87257195e+00,  2.87567091e+00,  4.11269188e+00],\n         [ 3.03742409e+00,  3.52804852e+00,  3.53769994e+00],\n         [ 2.80851364e+00,  2.88684440e+00,  3.02782774e+00],\n         ...,\n         [ 3.53705025e+00,  3.17680001e+00,  4.31247807e+00],\n         [ 2.73122549e+00,  3.06604838e+00,  1.87061310e+00],\n         [ 3.57859087e+00,  3.24813938e+00,  1.90129709e+00]],\n\n        [[ 3.55945396e+00,  1.99002302e+00,  2.55250716e+00],\n         [ 9.29999352e-01,  3.56597757e+00,  3.77415848e+00],\n         [ 2.51727605e+00,  2.60388994e+00,  2.30365062e+00],\n         ...,\n         [ 2.95731616e+00,  3.06378078e+00,  1.89772797e+00],\n         [ 2.81716228e+00,  3.30988455e+00,  3.45047617e+00],\n         [ 2.74002624e+00,  4.18758774e+00,  2.79194522e+00]],\n\n        [[ 2.80030322e+00,  2.57418060e+00,  1.95196879e+00],\n         [ 2.28539562e+00,  3.10438633e+00,  3.59538507e+00],\n         [ 3.63075948e+00,  1.56668901e+00,  2.28813815e+00],\n         ...,\n         [ 2.03711176e+00,  2.88548040e+00,  2.85669422e+00],\n         [ 3.42241073e+00,  3.74693155e+00,  2.81660652e+00],\n         [ 3.44857311e+00,  1.41237903e+00,  2.41698146e+00]],\n\n        ...,\n\n        [[ 2.96412134e+00,  2.70228410e+00,  2.59225059e+00],\n         [ 3.19510126e+00,  3.69266176e+00,  2.32709074e+00],\n         [ 3.29231787e+00,  2.80447984e+00,  3.25493026e+00],\n         ...,\n         [ 1.76436818e+00,  3.42542887e+00,  2.91589832e+00],\n         [ 2.17163920e+00,  2.79511714e+00,  2.26596904e+00],\n         [ 3.20605683e+00,  4.05653667e+00,  3.06174541e+00]],\n\n        [[ 2.49585366e+00,  3.39169669e+00,  2.78038263e+00],\n         [ 2.56399512e+00,  3.27370954e+00,  3.80094647e+00],\n         [ 2.64815426e+00,  2.14009166e+00,  2.99643493e+00],\n         ...,\n         [ 3.58059263e+00,  3.20531583e+00,  1.91265547e+00],\n         [ 2.00111198e+00,  3.45564651e+00,  2.31983137e+00],\n         [ 3.22532511e+00,  3.46766376e+00,  2.69564724e+00]],\n\n        [[ 2.39122295e+00,  2.53408408e+00,  2.23779321e+00],\n         [ 2.66196847e+00,  2.61825299e+00,  2.13900614e+00],\n         [ 3.27526474e+00,  3.41453743e+00,  2.35320902e+00],\n         ...,\n         [ 3.19155598e+00,  3.25292945e+00,  3.49199820e+00],\n         [ 3.17697859e+00,  4.06299353e+00,  3.34536195e+00],\n         [ 3.35083795e+00,  3.96905112e+00,  3.68974805e+00]]],\n\n\n       [[[ 2.43919182e+00,  2.82985115e+00,  2.60277319e+00],\n         [ 3.35411859e+00,  2.27229309e+00,  3.31889057e+00],\n         [ 3.92842436e+00,  2.27363086e+00,  2.76153827e+00],\n         ...,\n         [ 4.16990662e+00,  3.21831608e+00,  2.41450572e+00],\n         [ 3.29486251e+00,  2.37874985e+00,  2.69664288e+00],\n         [ 3.01214385e+00,  2.60299325e+00,  2.73556972e+00]],\n\n        [[ 2.41569614e+00,  3.17922997e+00,  2.93240309e+00],\n         [ 3.40374184e+00,  2.57427573e+00,  2.80995297e+00],\n         [ 2.09530973e+00,  2.38895750e+00,  2.23408651e+00],\n         ...,\n         [ 2.68366337e+00,  4.24105167e+00,  2.40429091e+00],\n         [ 3.21707606e+00,  1.99300551e+00,  3.40308952e+00],\n         [ 2.89322352e+00,  2.94866705e+00,  3.31474566e+00]],\n\n        [[ 2.23663735e+00,  2.95451450e+00,  4.69777966e+00],\n         [ 3.65691209e+00,  3.43582201e+00,  2.70463681e+00],\n         [ 3.71699548e+00,  2.32838845e+00,  3.03398561e+00],\n         ...,\n         [ 2.84723258e+00,  3.35528255e+00,  2.85841322e+00],\n         [ 3.22442746e+00,  3.33909273e+00,  1.34673822e+00],\n         [ 3.25611830e+00,  4.86021948e+00,  2.50584173e+00]],\n\n        ...,\n\n        [[ 3.92813945e+00,  3.29983521e+00,  4.77909088e+00],\n         [ 3.10911512e+00,  3.29879761e+00,  2.56706405e+00],\n         [ 3.54512644e+00,  2.82136202e+00,  3.77679300e+00],\n         ...,\n         [ 2.98243737e+00,  3.66007996e+00,  3.42522907e+00],\n         [ 2.68093920e+00,  2.01220465e+00,  2.38416219e+00],\n         [ 2.54820418e+00,  4.16389656e+00,  3.25402284e+00]],\n\n        [[ 4.00883579e+00,  3.20864820e+00,  2.03853822e+00],\n         [ 4.52886438e+00,  2.96415806e+00,  3.58067632e+00],\n         [ 2.81772089e+00,  3.59882569e+00,  2.15285373e+00],\n         ...,\n         [ 3.30461860e+00,  2.52170420e+00,  3.48224926e+00],\n         [ 3.00779653e+00,  3.86515021e+00,  3.32652593e+00],\n         [ 2.82929468e+00,  3.03264546e+00,  3.65002155e+00]],\n\n        [[ 3.24353552e+00,  2.98629308e+00,  1.99076843e+00],\n         [ 3.32426524e+00,  4.90362453e+00,  4.12722588e+00],\n         [ 3.26150060e+00,  2.68194771e+00,  2.95382309e+00],\n         ...,\n         [ 3.36125422e+00,  2.05638719e+00,  2.09509134e+00],\n         [ 3.96293592e+00,  3.15555286e+00,  3.03770423e+00],\n         [ 2.56129146e+00,  3.42748332e+00,  1.74509680e+00]]],\n\n\n       ...,\n\n\n       [[[-1.14480603e+00, -3.57381105e-01, -6.92112923e-01],\n         [ 7.25142419e-01,  9.65754166e-02,  5.26965916e-01],\n         [-1.67722359e-01, -4.61182684e-01, -2.14071497e-01],\n         ...,\n         [ 1.52142429e+00, -7.91448653e-01,  4.22293305e-01],\n         [-2.01358899e-01,  9.46291685e-02, -6.49277747e-01],\n         [-1.12750697e+00, -3.61042619e-01, -9.08515453e-01]],\n\n        [[-1.45116711e+00, -3.07911038e-01, -1.20910656e+00],\n         [ 4.12204057e-01, -3.72575879e-01,  4.26818967e-01],\n         [-6.03006363e-01, -1.33473384e+00,  2.55780607e-01],\n         ...,\n         [-3.27010423e-01,  6.59659266e-01,  5.98020852e-01],\n         [ 6.08175993e-01, -7.02926338e-01, -3.25046659e-01],\n         [-2.54282385e-01,  5.48386693e-01, -5.25374413e-01]],\n\n        [[ 2.87553132e-01, -3.49704504e-01, -8.26958001e-01],\n         [ 5.52390277e-01,  5.77421486e-01,  1.90852340e-02],\n         [ 9.43585157e-01, -1.12011665e-02,  3.77056122e-01],\n         ...,\n         [ 2.94964433e-01,  9.00874361e-02, -8.25283706e-01],\n         [-5.81060886e-01,  1.11745581e-01,  5.28309882e-01],\n         [-5.80353022e-01,  8.95707428e-01,  4.80162263e-01]],\n\n        ...,\n\n        [[-9.18283284e-01, -1.00061655e+00,  2.00199246e-01],\n         [-4.98641670e-01, -2.63254911e-01, -7.41710067e-01],\n         [-6.05106115e-01, -5.64821899e-01,  1.32757306e-01],\n         ...,\n         [-1.36751980e-01,  1.15680933e+00, -2.89076179e-01],\n         [-1.25223130e-01, -1.86964825e-01,  9.67146754e-01],\n         [-2.12205902e-01,  4.35392439e-01, -2.30418772e-01]],\n\n        [[-1.24444537e-01,  6.14195578e-02,  3.39996070e-01],\n         [ 2.41300717e-01,  3.56016845e-01,  1.20242126e-03],\n         [ 3.90359551e-01,  8.92309368e-01,  7.51367211e-01],\n         ...,\n         [-5.46934903e-01, -1.09559067e-01, -6.79587483e-01],\n         [ 4.79468256e-01,  2.67030150e-01,  1.34138629e-01],\n         [-1.30861059e-01,  1.42464563e-01, -8.66344422e-02]],\n\n        [[-4.20571007e-02, -5.20291984e-01, -2.17393026e-01],\n         [ 8.10390189e-02,  3.68728489e-01, -2.44255781e-01],\n         [-8.38377237e-01, -1.27278519e+00,  2.79487133e-01],\n         ...,\n         [ 1.09618044e+00, -4.50076789e-01,  4.74928916e-01],\n         [-4.19968367e-01, -2.46861771e-01,  6.26590550e-01],\n         [ 2.43788138e-01, -4.73245949e-01, -1.17245205e-01]]],\n\n\n       [[[ 1.99667847e+00,  2.87204576e+00,  3.36241460e+00],\n         [ 3.32953477e+00,  4.13917542e+00,  2.64098501e+00],\n         [ 2.88030696e+00,  3.51706743e+00,  3.69207430e+00],\n         ...,\n         [ 3.38104439e+00,  3.39317822e+00,  2.88444424e+00],\n         [ 2.27560949e+00,  1.59124041e+00,  3.30953002e+00],\n         [ 2.75490403e+00,  3.27667069e+00,  2.92397380e+00]],\n\n        [[ 2.39296770e+00,  3.89271331e+00,  3.02014446e+00],\n         [ 2.65066957e+00,  3.23120904e+00,  3.21325684e+00],\n         [ 3.48434019e+00,  3.80353165e+00,  3.31669021e+00],\n         ...,\n         [ 2.23362756e+00,  1.80756235e+00,  3.64325595e+00],\n         [ 2.55932856e+00,  2.95278811e+00,  3.55338836e+00],\n         [ 2.67268348e+00,  3.16025066e+00,  3.39710402e+00]],\n\n        [[ 2.90204120e+00,  3.45792937e+00,  3.12168241e+00],\n         [ 4.58860254e+00,  3.43781948e+00,  2.97299767e+00],\n         [ 3.09716058e+00,  2.06143618e+00,  2.69316578e+00],\n         ...,\n         [ 3.70079851e+00,  3.01062775e+00,  2.86866164e+00],\n         [ 3.27961564e+00,  3.16724634e+00,  1.69578314e+00],\n         [ 3.52542949e+00,  3.59266543e+00,  2.20399427e+00]],\n\n        ...,\n\n        [[ 2.82063770e+00,  1.49908328e+00,  2.86923504e+00],\n         [ 2.18177009e+00,  3.17706847e+00,  4.24604940e+00],\n         [ 3.45280361e+00,  3.62163281e+00,  3.35659838e+00],\n         ...,\n         [ 2.99712300e+00,  2.49013400e+00,  3.47534752e+00],\n         [ 3.30902052e+00,  2.34312248e+00,  3.12127233e+00],\n         [ 2.71943212e+00,  3.36448503e+00,  3.16016698e+00]],\n\n        [[ 3.55809069e+00,  3.27316356e+00,  3.16113496e+00],\n         [ 3.10825872e+00,  3.18897772e+00,  4.68784761e+00],\n         [ 2.58664179e+00,  3.07832384e+00,  2.29475665e+00],\n         ...,\n         [ 1.98745215e+00,  4.25534582e+00,  2.95909786e+00],\n         [ 2.53615284e+00,  2.91598773e+00,  1.83516550e+00],\n         [ 3.10529828e+00,  1.80232787e+00,  2.53606367e+00]],\n\n        [[ 3.01881433e+00,  3.46297693e+00,  2.35125971e+00],\n         [ 2.93534350e+00,  3.53321385e+00,  3.75406861e+00],\n         [ 2.40899730e+00,  3.83726692e+00,  2.68693876e+00],\n         ...,\n         [ 3.44916463e+00,  2.28923845e+00,  3.34580564e+00],\n         [ 2.77083492e+00,  4.64215469e+00,  3.05437231e+00],\n         [ 4.05379152e+00,  3.88879967e+00,  2.19255400e+00]]],\n\n\n       [[[ 1.49245369e+00,  1.43328822e+00,  1.60866618e+00],\n         [ 2.29313493e+00,  1.03816164e+00,  1.16786098e+00],\n         [ 8.76644731e-01,  3.43106776e-01,  1.66355300e+00],\n         ...,\n         [ 2.08618903e+00,  1.89890730e+00,  6.15112662e-01],\n         [-3.96004975e-01,  9.07061696e-01,  6.31986499e-01],\n         [ 1.61549997e+00,  4.75791693e-01,  4.43986326e-01]],\n\n        [[ 5.32189250e-01,  2.02386570e+00,  5.94482124e-01],\n         [ 1.20655966e+00,  1.13401711e+00,  1.85051596e+00],\n         [ 1.02847409e+00,  3.50042105e-01,  1.24046588e+00],\n         ...,\n         [ 1.02789128e+00,  6.97244048e-01,  3.39602292e-01],\n         [ 6.53581083e-01,  4.54487652e-01,  1.00582480e+00],\n         [ 1.14325297e+00, -1.36662126e-01,  1.22303212e+00]],\n\n        [[ 2.79032636e+00,  7.88135052e-01,  1.72594702e+00],\n         [ 6.86251044e-01,  2.45743871e+00,  1.09441280e+00],\n         [ 1.48826671e+00,  8.00742626e-01,  1.74256873e+00],\n         ...,\n         [-9.16544616e-01,  6.16708577e-01,  8.66333485e-01],\n         [ 1.93325981e-01,  5.17187193e-02,  1.89204001e+00],\n         [ 8.32464695e-01,  6.65091932e-01,  7.96328425e-01]],\n\n        ...,\n\n        [[ 6.46245420e-01,  2.05014014e+00,  3.77873212e-01],\n         [ 4.68232304e-01,  9.81334984e-01,  1.39165735e+00],\n         [ 1.01517606e+00,  8.21242690e-01,  1.50545883e+00],\n         ...,\n         [ 1.49190772e+00,  6.13293350e-01,  1.00729597e+00],\n         [ 9.25363779e-01,  1.68075728e+00,  9.86807048e-01],\n         [ 6.60892487e-01,  1.27848804e+00,  4.17094320e-01]],\n\n        [[ 1.57930779e+00,  3.63963395e-01,  8.32136333e-01],\n         [ 1.04424477e+00,  1.01065624e+00,  1.32992041e+00],\n         [ 1.67976511e+00,  1.28824806e+00,  1.79172128e-01],\n         ...,\n         [ 2.37521744e+00,  6.87529862e-01,  2.81782653e-02],\n         [ 1.45906687e+00,  2.26435328e+00,  1.31531250e+00],\n         [ 3.86727482e-01,  4.14067715e-01,  7.06217051e-01]],\n\n        [[ 1.11761010e+00,  8.16944540e-01,  7.45079279e-01],\n         [ 1.10599339e+00,  5.95804989e-01,  7.63906002e-01],\n         [ 2.30793738e+00,  1.12810898e+00,  1.34565890e+00],\n         ...,\n         [ 1.88170433e+00,  9.30098593e-01,  1.10156631e+00],\n         [ 1.30128300e+00,  7.07576692e-01,  7.91130483e-01],\n         [ 6.02605760e-01,  9.89558160e-01,  1.64393818e+00]]]],\n      dtype=float32), array([[0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[-4.82544094e-01,  1.37926012e-01, -3.24819945e-02],\n         [ 7.68754900e-01,  1.97525179e+00, -2.21337110e-01],\n         [ 2.71075517e-01, -3.14272910e-01,  1.14166439e+00],\n         ...,\n         [ 1.33702099e+00,  1.24304748e+00,  1.86158621e+00],\n         [ 2.29157135e-01,  1.46763563e+00,  5.63884266e-02],\n         [-1.24289870e-01,  8.06700945e-01,  8.32484543e-01]],\n\n        [[ 8.62220407e-01,  7.40745187e-01,  1.69831610e+00],\n         [ 2.31390762e+00,  2.02790809e+00,  1.15754926e+00],\n         [ 1.90597725e+00,  1.00856733e+00,  5.61657250e-01],\n         ...,\n         [-2.10171252e-01,  7.71601140e-01,  4.72614706e-01],\n         [ 7.64424145e-01,  1.03067756e+00,  1.56817448e+00],\n         [ 2.39540219e+00,  4.58024651e-01,  1.56525445e+00]],\n\n        [[ 2.07784510e+00,  1.87840414e+00,  3.09572268e+00],\n         [ 8.24109077e-01,  1.07983029e+00,  1.76573074e+00],\n         [ 1.61542928e+00, -1.97736975e-02,  4.06991184e-01],\n         ...,\n         [ 3.27355057e-01,  1.96225464e+00, -1.92754447e-01],\n         [ 8.78149629e-01,  9.88438725e-01,  9.54802454e-01],\n         [ 1.01406717e+00,  6.84350729e-01,  6.04652464e-01]],\n\n        ...,\n\n        [[ 7.93002009e-01,  6.36520088e-01,  1.81723130e+00],\n         [ 1.70944679e+00,  3.20199460e-01, -6.31492496e-01],\n         [ 8.13003242e-01,  1.12949336e+00,  1.25753236e+00],\n         ...,\n         [ 1.71933556e+00,  8.56361687e-01,  5.01634836e-01],\n         [ 1.27116001e+00, -1.10191393e+00,  1.00915265e+00],\n         [ 1.95263505e+00,  1.85418427e+00,  7.91254163e-01]],\n\n        [[ 1.92623878e+00,  1.41067421e+00,  5.84322512e-01],\n         [-1.17341805e+00,  1.65862703e+00,  1.75718105e+00],\n         [ 9.11733925e-01,  2.76240158e+00,  3.76931399e-01],\n         ...,\n         [-3.79428148e-01,  1.71694922e+00,  1.35448003e+00],\n         [ 1.60083151e+00,  4.37318802e-01,  2.17475557e+00],\n         [ 2.90784836e+00,  1.55789122e-01,  1.57150614e+00]],\n\n        [[ 1.23973191e+00, -4.20942485e-01,  8.73208523e-01],\n         [ 1.74336910e+00,  1.45928466e+00,  1.20258641e+00],\n         [ 2.83678889e-01, -5.90076327e-01,  1.11653376e+00],\n         ...,\n         [ 1.54897285e+00, -3.88675272e-01,  1.77014148e+00],\n         [-2.33839288e-01,  8.26082408e-01,  1.66845274e+00],\n         [-3.60953599e-01,  9.24968243e-01,  8.08469832e-01]]],\n\n\n       [[[ 2.87257195e+00,  2.87567091e+00,  4.11269188e+00],\n         [ 3.03742409e+00,  3.52804852e+00,  3.53769994e+00],\n         [ 2.80851364e+00,  2.88684440e+00,  3.02782774e+00],\n         ...,\n         [ 3.53705025e+00,  3.17680001e+00,  4.31247807e+00],\n         [ 2.73122549e+00,  3.06604838e+00,  1.87061310e+00],\n         [ 3.57859087e+00,  3.24813938e+00,  1.90129709e+00]],\n\n        [[ 3.55945396e+00,  1.99002302e+00,  2.55250716e+00],\n         [ 9.29999352e-01,  3.56597757e+00,  3.77415848e+00],\n         [ 2.51727605e+00,  2.60388994e+00,  2.30365062e+00],\n         ...,\n         [ 2.95731616e+00,  3.06378078e+00,  1.89772797e+00],\n         [ 2.81716228e+00,  3.30988455e+00,  3.45047617e+00],\n         [ 2.74002624e+00,  4.18758774e+00,  2.79194522e+00]],\n\n        [[ 2.80030322e+00,  2.57418060e+00,  1.95196879e+00],\n         [ 2.28539562e+00,  3.10438633e+00,  3.59538507e+00],\n         [ 3.63075948e+00,  1.56668901e+00,  2.28813815e+00],\n         ...,\n         [ 2.03711176e+00,  2.88548040e+00,  2.85669422e+00],\n         [ 3.42241073e+00,  3.74693155e+00,  2.81660652e+00],\n         [ 3.44857311e+00,  1.41237903e+00,  2.41698146e+00]],\n\n        ...,\n\n        [[ 2.96412134e+00,  2.70228410e+00,  2.59225059e+00],\n         [ 3.19510126e+00,  3.69266176e+00,  2.32709074e+00],\n         [ 3.29231787e+00,  2.80447984e+00,  3.25493026e+00],\n         ...,\n         [ 1.76436818e+00,  3.42542887e+00,  2.91589832e+00],\n         [ 2.17163920e+00,  2.79511714e+00,  2.26596904e+00],\n         [ 3.20605683e+00,  4.05653667e+00,  3.06174541e+00]],\n\n        [[ 2.49585366e+00,  3.39169669e+00,  2.78038263e+00],\n         [ 2.56399512e+00,  3.27370954e+00,  3.80094647e+00],\n         [ 2.64815426e+00,  2.14009166e+00,  2.99643493e+00],\n         ...,\n         [ 3.58059263e+00,  3.20531583e+00,  1.91265547e+00],\n         [ 2.00111198e+00,  3.45564651e+00,  2.31983137e+00],\n         [ 3.22532511e+00,  3.46766376e+00,  2.69564724e+00]],\n\n        [[ 2.39122295e+00,  2.53408408e+00,  2.23779321e+00],\n         [ 2.66196847e+00,  2.61825299e+00,  2.13900614e+00],\n         [ 3.27526474e+00,  3.41453743e+00,  2.35320902e+00],\n         ...,\n         [ 3.19155598e+00,  3.25292945e+00,  3.49199820e+00],\n         [ 3.17697859e+00,  4.06299353e+00,  3.34536195e+00],\n         [ 3.35083795e+00,  3.96905112e+00,  3.68974805e+00]]],\n\n\n       [[[ 2.43919182e+00,  2.82985115e+00,  2.60277319e+00],\n         [ 3.35411859e+00,  2.27229309e+00,  3.31889057e+00],\n         [ 3.92842436e+00,  2.27363086e+00,  2.76153827e+00],\n         ...,\n         [ 4.16990662e+00,  3.21831608e+00,  2.41450572e+00],\n         [ 3.29486251e+00,  2.37874985e+00,  2.69664288e+00],\n         [ 3.01214385e+00,  2.60299325e+00,  2.73556972e+00]],\n\n        [[ 2.41569614e+00,  3.17922997e+00,  2.93240309e+00],\n         [ 3.40374184e+00,  2.57427573e+00,  2.80995297e+00],\n         [ 2.09530973e+00,  2.38895750e+00,  2.23408651e+00],\n         ...,\n         [ 2.68366337e+00,  4.24105167e+00,  2.40429091e+00],\n         [ 3.21707606e+00,  1.99300551e+00,  3.40308952e+00],\n         [ 2.89322352e+00,  2.94866705e+00,  3.31474566e+00]],\n\n        [[ 2.23663735e+00,  2.95451450e+00,  4.69777966e+00],\n         [ 3.65691209e+00,  3.43582201e+00,  2.70463681e+00],\n         [ 3.71699548e+00,  2.32838845e+00,  3.03398561e+00],\n         ...,\n         [ 2.84723258e+00,  3.35528255e+00,  2.85841322e+00],\n         [ 3.22442746e+00,  3.33909273e+00,  1.34673822e+00],\n         [ 3.25611830e+00,  4.86021948e+00,  2.50584173e+00]],\n\n        ...,\n\n        [[ 3.92813945e+00,  3.29983521e+00,  4.77909088e+00],\n         [ 3.10911512e+00,  3.29879761e+00,  2.56706405e+00],\n         [ 3.54512644e+00,  2.82136202e+00,  3.77679300e+00],\n         ...,\n         [ 2.98243737e+00,  3.66007996e+00,  3.42522907e+00],\n         [ 2.68093920e+00,  2.01220465e+00,  2.38416219e+00],\n         [ 2.54820418e+00,  4.16389656e+00,  3.25402284e+00]],\n\n        [[ 4.00883579e+00,  3.20864820e+00,  2.03853822e+00],\n         [ 4.52886438e+00,  2.96415806e+00,  3.58067632e+00],\n         [ 2.81772089e+00,  3.59882569e+00,  2.15285373e+00],\n         ...,\n         [ 3.30461860e+00,  2.52170420e+00,  3.48224926e+00],\n         [ 3.00779653e+00,  3.86515021e+00,  3.32652593e+00],\n         [ 2.82929468e+00,  3.03264546e+00,  3.65002155e+00]],\n\n        [[ 3.24353552e+00,  2.98629308e+00,  1.99076843e+00],\n         [ 3.32426524e+00,  4.90362453e+00,  4.12722588e+00],\n         [ 3.26150060e+00,  2.68194771e+00,  2.95382309e+00],\n         ...,\n         [ 3.36125422e+00,  2.05638719e+00,  2.09509134e+00],\n         [ 3.96293592e+00,  3.15555286e+00,  3.03770423e+00],\n         [ 2.56129146e+00,  3.42748332e+00,  1.74509680e+00]]],\n\n\n       ...,\n\n\n       [[[-1.14480603e+00, -3.57381105e-01, -6.92112923e-01],\n         [ 7.25142419e-01,  9.65754166e-02,  5.26965916e-01],\n         [-1.67722359e-01, -4.61182684e-01, -2.14071497e-01],\n         ...,\n         [ 1.52142429e+00, -7.91448653e-01,  4.22293305e-01],\n         [-2.01358899e-01,  9.46291685e-02, -6.49277747e-01],\n         [-1.12750697e+00, -3.61042619e-01, -9.08515453e-01]],\n\n        [[-1.45116711e+00, -3.07911038e-01, -1.20910656e+00],\n         [ 4.12204057e-01, -3.72575879e-01,  4.26818967e-01],\n         [-6.03006363e-01, -1.33473384e+00,  2.55780607e-01],\n         ...,\n         [-3.27010423e-01,  6.59659266e-01,  5.98020852e-01],\n         [ 6.08175993e-01, -7.02926338e-01, -3.25046659e-01],\n         [-2.54282385e-01,  5.48386693e-01, -5.25374413e-01]],\n\n        [[ 2.87553132e-01, -3.49704504e-01, -8.26958001e-01],\n         [ 5.52390277e-01,  5.77421486e-01,  1.90852340e-02],\n         [ 9.43585157e-01, -1.12011665e-02,  3.77056122e-01],\n         ...,\n         [ 2.94964433e-01,  9.00874361e-02, -8.25283706e-01],\n         [-5.81060886e-01,  1.11745581e-01,  5.28309882e-01],\n         [-5.80353022e-01,  8.95707428e-01,  4.80162263e-01]],\n\n        ...,\n\n        [[-9.18283284e-01, -1.00061655e+00,  2.00199246e-01],\n         [-4.98641670e-01, -2.63254911e-01, -7.41710067e-01],\n         [-6.05106115e-01, -5.64821899e-01,  1.32757306e-01],\n         ...,\n         [-1.36751980e-01,  1.15680933e+00, -2.89076179e-01],\n         [-1.25223130e-01, -1.86964825e-01,  9.67146754e-01],\n         [-2.12205902e-01,  4.35392439e-01, -2.30418772e-01]],\n\n        [[-1.24444537e-01,  6.14195578e-02,  3.39996070e-01],\n         [ 2.41300717e-01,  3.56016845e-01,  1.20242126e-03],\n         [ 3.90359551e-01,  8.92309368e-01,  7.51367211e-01],\n         ...,\n         [-5.46934903e-01, -1.09559067e-01, -6.79587483e-01],\n         [ 4.79468256e-01,  2.67030150e-01,  1.34138629e-01],\n         [-1.30861059e-01,  1.42464563e-01, -8.66344422e-02]],\n\n        [[-4.20571007e-02, -5.20291984e-01, -2.17393026e-01],\n         [ 8.10390189e-02,  3.68728489e-01, -2.44255781e-01],\n         [-8.38377237e-01, -1.27278519e+00,  2.79487133e-01],\n         ...,\n         [ 1.09618044e+00, -4.50076789e-01,  4.74928916e-01],\n         [-4.19968367e-01, -2.46861771e-01,  6.26590550e-01],\n         [ 2.43788138e-01, -4.73245949e-01, -1.17245205e-01]]],\n\n\n       [[[ 1.99667847e+00,  2.87204576e+00,  3.36241460e+00],\n         [ 3.32953477e+00,  4.13917542e+00,  2.64098501e+00],\n         [ 2.88030696e+00,  3.51706743e+00,  3.69207430e+00],\n         ...,\n         [ 3.38104439e+00,  3.39317822e+00,  2.88444424e+00],\n         [ 2.27560949e+00,  1.59124041e+00,  3.30953002e+00],\n         [ 2.75490403e+00,  3.27667069e+00,  2.92397380e+00]],\n\n        [[ 2.39296770e+00,  3.89271331e+00,  3.02014446e+00],\n         [ 2.65066957e+00,  3.23120904e+00,  3.21325684e+00],\n         [ 3.48434019e+00,  3.80353165e+00,  3.31669021e+00],\n         ...,\n         [ 2.23362756e+00,  1.80756235e+00,  3.64325595e+00],\n         [ 2.55932856e+00,  2.95278811e+00,  3.55338836e+00],\n         [ 2.67268348e+00,  3.16025066e+00,  3.39710402e+00]],\n\n        [[ 2.90204120e+00,  3.45792937e+00,  3.12168241e+00],\n         [ 4.58860254e+00,  3.43781948e+00,  2.97299767e+00],\n         [ 3.09716058e+00,  2.06143618e+00,  2.69316578e+00],\n         ...,\n         [ 3.70079851e+00,  3.01062775e+00,  2.86866164e+00],\n         [ 3.27961564e+00,  3.16724634e+00,  1.69578314e+00],\n         [ 3.52542949e+00,  3.59266543e+00,  2.20399427e+00]],\n\n        ...,\n\n        [[ 2.82063770e+00,  1.49908328e+00,  2.86923504e+00],\n         [ 2.18177009e+00,  3.17706847e+00,  4.24604940e+00],\n         [ 3.45280361e+00,  3.62163281e+00,  3.35659838e+00],\n         ...,\n         [ 2.99712300e+00,  2.49013400e+00,  3.47534752e+00],\n         [ 3.30902052e+00,  2.34312248e+00,  3.12127233e+00],\n         [ 2.71943212e+00,  3.36448503e+00,  3.16016698e+00]],\n\n        [[ 3.55809069e+00,  3.27316356e+00,  3.16113496e+00],\n         [ 3.10825872e+00,  3.18897772e+00,  4.68784761e+00],\n         [ 2.58664179e+00,  3.07832384e+00,  2.29475665e+00],\n         ...,\n         [ 1.98745215e+00,  4.25534582e+00,  2.95909786e+00],\n         [ 2.53615284e+00,  2.91598773e+00,  1.83516550e+00],\n         [ 3.10529828e+00,  1.80232787e+00,  2.53606367e+00]],\n\n        [[ 3.01881433e+00,  3.46297693e+00,  2.35125971e+00],\n         [ 2.93534350e+00,  3.53321385e+00,  3.75406861e+00],\n         [ 2.40899730e+00,  3.83726692e+00,  2.68693876e+00],\n         ...,\n         [ 3.44916463e+00,  2.28923845e+00,  3.34580564e+00],\n         [ 2.77083492e+00,  4.64215469e+00,  3.05437231e+00],\n         [ 4.05379152e+00,  3.88879967e+00,  2.19255400e+00]]],\n\n\n       [[[ 1.49245369e+00,  1.43328822e+00,  1.60866618e+00],\n         [ 2.29313493e+00,  1.03816164e+00,  1.16786098e+00],\n         [ 8.76644731e-01,  3.43106776e-01,  1.66355300e+00],\n         ...,\n         [ 2.08618903e+00,  1.89890730e+00,  6.15112662e-01],\n         [-3.96004975e-01,  9.07061696e-01,  6.31986499e-01],\n         [ 1.61549997e+00,  4.75791693e-01,  4.43986326e-01]],\n\n        [[ 5.32189250e-01,  2.02386570e+00,  5.94482124e-01],\n         [ 1.20655966e+00,  1.13401711e+00,  1.85051596e+00],\n         [ 1.02847409e+00,  3.50042105e-01,  1.24046588e+00],\n         ...,\n         [ 1.02789128e+00,  6.97244048e-01,  3.39602292e-01],\n         [ 6.53581083e-01,  4.54487652e-01,  1.00582480e+00],\n         [ 1.14325297e+00, -1.36662126e-01,  1.22303212e+00]],\n\n        [[ 2.79032636e+00,  7.88135052e-01,  1.72594702e+00],\n         [ 6.86251044e-01,  2.45743871e+00,  1.09441280e+00],\n         [ 1.48826671e+00,  8.00742626e-01,  1.74256873e+00],\n         ...,\n         [-9.16544616e-01,  6.16708577e-01,  8.66333485e-01],\n         [ 1.93325981e-01,  5.17187193e-02,  1.89204001e+00],\n         [ 8.32464695e-01,  6.65091932e-01,  7.96328425e-01]],\n\n        ...,\n\n        [[ 6.46245420e-01,  2.05014014e+00,  3.77873212e-01],\n         [ 4.68232304e-01,  9.81334984e-01,  1.39165735e+00],\n         [ 1.01517606e+00,  8.21242690e-01,  1.50545883e+00],\n         ...,\n         [ 1.49190772e+00,  6.13293350e-01,  1.00729597e+00],\n         [ 9.25363779e-01,  1.68075728e+00,  9.86807048e-01],\n         [ 6.60892487e-01,  1.27848804e+00,  4.17094320e-01]],\n\n        [[ 1.57930779e+00,  3.63963395e-01,  8.32136333e-01],\n         [ 1.04424477e+00,  1.01065624e+00,  1.32992041e+00],\n         [ 1.67976511e+00,  1.28824806e+00,  1.79172128e-01],\n         ...,\n         [ 2.37521744e+00,  6.87529862e-01,  2.81782653e-02],\n         [ 1.45906687e+00,  2.26435328e+00,  1.31531250e+00],\n         [ 3.86727482e-01,  4.14067715e-01,  7.06217051e-01]],\n\n        [[ 1.11761010e+00,  8.16944540e-01,  7.45079279e-01],\n         [ 1.10599339e+00,  5.95804989e-01,  7.63906002e-01],\n         [ 2.30793738e+00,  1.12810898e+00,  1.34565890e+00],\n         ...,\n         [ 1.88170433e+00,  9.30098593e-01,  1.10156631e+00],\n         [ 1.30128300e+00,  7.07576692e-01,  7.91130483e-01],\n         [ 6.02605760e-01,  9.89558160e-01,  1.64393818e+00]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[0., 1., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [1., 0., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.3049407, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x127342e10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x12732b690>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.5223149037361146, 0.84]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x12789b6e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.53291166, 0.8125], [0.45312536, 0.75], [0.41298142, 0.9375], [0.4924893, 0.875], [0.38179398, 0.875], [0.43114838, 0.8125], [0.47164488, 0.8125], [0.41339943, 0.875], [0.5114856, 0.75], [0.44931102, 0.9375], [0.36238927, 0.8125], [0.46942532, 0.875], [0.4752845, 0.75]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 3.0406265 ,  3.6973438 ,  1.3942779 ],\n         [ 1.3098267 ,  2.4521337 ,  2.6088326 ],\n         [ 1.7770636 ,  0.74557203,  2.181637  ],\n         ...,\n         [ 2.9598663 ,  1.5669929 ,  1.3075422 ],\n         [ 1.7186605 ,  1.4414779 ,  1.8365443 ],\n         [ 2.2543988 ,  1.5371116 ,  2.9083977 ]],\n\n        [[ 2.160984  ,  1.8636936 ,  2.0573945 ],\n         [ 1.4862118 ,  1.6985813 ,  2.2480702 ],\n         [ 3.8580155 ,  1.0977949 , -0.10879815],\n         ...,\n         [ 3.057203  ,  2.2955103 ,  2.4344447 ],\n         [ 2.3591897 ,  2.0185661 ,  2.219224  ],\n         [ 2.3404567 ,  1.4593939 ,  1.853442  ]],\n\n        [[ 2.1314955 ,  1.3601824 ,  2.9312444 ],\n         [ 2.5140514 ,  2.4241536 ,  2.7612224 ],\n         [ 2.6080441 ,  2.3054194 ,  2.4098735 ],\n         ...,\n         [ 1.9786763 ,  2.0369823 ,  2.3017435 ],\n         [ 1.0485036 ,  2.111204  ,  1.5216081 ],\n         [ 2.2081916 ,  1.5917888 ,  1.1786754 ]],\n\n        ...,\n\n        [[ 2.0547953 ,  2.3876588 ,  2.523169  ],\n         [ 1.938032  ,  1.36546   ,  1.890995  ],\n         [ 2.2249703 ,  1.9522436 ,  2.6263077 ],\n         ...,\n         [ 1.6827044 ,  1.5703079 ,  2.8820589 ],\n         [ 1.772651  ,  2.015991  ,  1.5471598 ],\n         [ 2.7044554 ,  1.5184634 ,  2.0428064 ]],\n\n        [[ 1.5210556 ,  0.42924353,  3.0235293 ],\n         [ 1.1078975 ,  1.139994  ,  1.2363602 ],\n         [ 1.8622999 ,  1.7033432 ,  2.203355  ],\n         ...,\n         [ 3.058149  ,  1.8094599 ,  3.2404916 ],\n         [ 1.6484432 ,  2.8081949 ,  1.120027  ],\n         [ 3.2356935 ,  1.8265636 ,  2.4401178 ]],\n\n        [[ 1.7338067 ,  0.75122714,  0.62543446],\n         [ 2.483309  ,  4.194837  ,  1.3123794 ],\n         [ 1.0916572 ,  0.962297  ,  2.162189  ],\n         ...,\n         [ 1.1173189 ,  2.4716504 ,  2.9155843 ],\n         [ 2.237738  ,  1.9726123 ,  1.9982766 ],\n         [ 1.0243334 ,  2.4073236 ,  1.911845  ]]],\n\n\n       [[[ 0.6497182 ,  1.5265101 ,  0.2737365 ],\n         [ 1.0062611 ,  0.7273039 ,  0.97769284],\n         [ 0.7922634 ,  1.6093906 ,  2.1975746 ],\n         ...,\n         [ 1.5281417 ,  1.2433189 ,  1.3075562 ],\n         [-0.13382855,  1.0213845 ,  1.6309155 ],\n         [ 1.7310747 ,  1.3735108 ,  1.6485381 ]],\n\n        [[ 1.3588021 ,  0.06604662,  1.2889615 ],\n         [ 0.35148123,  0.84844023,  1.8272902 ],\n         [-0.469367  ,  0.556856  ,  0.42525554],\n         ...,\n         [ 0.7180831 ,  1.0977366 ,  0.04398031],\n         [ 0.09188802,  0.54057527,  1.8547456 ],\n         [ 2.1787636 ,  0.90813625,  0.5954827 ]],\n\n        [[ 0.84125596,  1.7603734 , -0.25102317],\n         [ 0.28195846,  0.7824175 ,  0.85150546],\n         [ 0.7566392 , -0.10013316,  0.9149767 ],\n         ...,\n         [ 0.8211298 , -0.21805023,  1.926155  ],\n         [-0.29194564,  1.5488118 ,  0.8175122 ],\n         [ 1.2672086 , -0.13520686,  1.5465385 ]],\n\n        ...,\n\n        [[ 1.4048158 ,  1.1439883 ,  1.5798103 ],\n         [ 0.59464467,  0.36170244,  1.396027  ],\n         [ 1.7968495 ,  2.7684166 ,  0.811661  ],\n         ...,\n         [ 0.88709116, -0.3234277 ,  1.0517743 ],\n         [ 0.99274975,  0.44084218,  1.6366682 ],\n         [ 0.56026566,  0.7286586 ,  0.04451069]],\n\n        [[ 0.74237835,  0.5452027 ,  0.5638945 ],\n         [ 0.5189527 ,  2.3704906 ,  1.4049081 ],\n         [ 0.5216599 ,  0.7417014 ,  0.7464885 ],\n         ...,\n         [ 0.81659377,  1.1004059 ,  1.1405336 ],\n         [-0.284098  ,  0.9225951 ,  2.0557795 ],\n         [ 1.1978678 ,  1.5165879 ,  1.7971778 ]],\n\n        [[ 0.7052947 ,  1.2764143 ,  1.0218211 ],\n         [ 0.9645209 ,  0.8784347 ,  0.36523452],\n         [ 0.70506847,  1.2978438 ,  1.5159012 ],\n         ...,\n         [ 1.5369956 ,  1.8290869 ,  0.9861722 ],\n         [ 0.7849697 ,  1.6481042 , -0.6114303 ],\n         [-0.5957014 ,  0.92527336,  1.0839422 ]]],\n\n\n       [[[-0.59466445, -0.16538094, -0.47089225],\n         [-0.13410203,  0.72176003,  0.83764315],\n         [-0.55096763,  0.37214053,  1.2206773 ],\n         ...,\n         [-0.20571844, -0.2089851 , -0.12572329],\n         [ 0.29529658, -1.4763068 ,  0.76136833],\n         [ 0.20237288, -0.15132053, -0.49874088]],\n\n        [[-0.31310764,  0.35347876,  1.3863302 ],\n         [-0.32595038, -0.50692505, -0.33272028],\n         [ 0.49448922, -0.6584797 , -0.7806213 ],\n         ...,\n         [ 1.0826739 , -0.20284732,  0.19371024],\n         [-0.8139696 ,  0.5716461 , -0.2196163 ],\n         [ 0.45840865, -0.36544704,  0.06211996]],\n\n        [[-0.5853385 ,  0.2779955 ,  0.4263543 ],\n         [ 0.9914025 ,  1.420924  , -0.54550993],\n         [ 0.00762739, -0.3749839 ,  0.41845855],\n         ...,\n         [-0.6634458 , -1.5120848 ,  0.7185644 ],\n         [-0.21805835,  0.7885331 ,  1.304984  ],\n         [ 0.60055363, -0.89204633,  1.6528573 ]],\n\n        ...,\n\n        [[-0.40379474,  0.9162464 , -0.36012977],\n         [ 1.0670961 ,  0.48368344,  1.6774415 ],\n         [-1.4807303 , -0.7966726 , -0.53632146],\n         ...,\n         [ 0.15850863, -0.37400985,  0.6812199 ],\n         [-0.6489666 , -0.05064928,  0.9068011 ],\n         [-0.20246221,  1.2530555 ,  0.6763549 ]],\n\n        [[-0.25756067,  1.0592083 ,  0.707541  ],\n         [-0.45181218, -0.10739055,  0.46177772],\n         [-0.4570223 ,  0.28380442, -1.075269  ],\n         ...,\n         [-0.3917187 ,  0.21447724,  0.38541391],\n         [-0.59045357,  1.3327241 , -0.6908593 ],\n         [ 0.50239193,  0.0599623 ,  0.31972468]],\n\n        [[ 0.9125627 ,  1.2997686 , -0.9024459 ],\n         [-0.29417396,  0.43739778,  0.60037404],\n         [-0.22183347, -0.58308566,  0.01091053],\n         ...,\n         [-0.36917886,  0.23338054,  0.23796083],\n         [ 1.1245507 , -0.34195244, -1.401949  ],\n         [ 0.24688439,  0.22108644, -0.64333814]]],\n\n\n       ...,\n\n\n       [[[ 1.3099507 ,  3.0102136 ,  1.952447  ],\n         [ 2.5880277 ,  1.7685492 ,  2.5299404 ],\n         [ 1.1066588 ,  2.3859327 ,  1.5437702 ],\n         ...,\n         [ 2.0951214 ,  2.2113452 ,  2.300813  ],\n         [ 2.411214  ,  2.981152  ,  2.4022782 ],\n         [ 2.14326   ,  2.2656963 ,  3.3753014 ]],\n\n        [[ 1.9972514 ,  1.6693102 ,  2.421993  ],\n         [ 2.0175853 ,  1.3012713 ,  1.7236663 ],\n         [ 1.9469953 ,  2.4580917 ,  2.3215096 ],\n         ...,\n         [ 2.532045  ,  1.0379535 ,  2.0807924 ],\n         [ 1.199849  ,  2.4352999 ,  1.6720675 ],\n         [ 2.455083  ,  1.3037251 ,  2.3379488 ]],\n\n        [[ 2.1383832 ,  1.0198641 ,  1.8358516 ],\n         [ 0.91705835,  1.4939997 ,  2.4323983 ],\n         [ 1.8786854 ,  2.0862093 ,  1.4486463 ],\n         ...,\n         [ 1.4077032 ,  2.25841   ,  1.4204733 ],\n         [ 2.6389945 ,  1.0996883 ,  2.0707314 ],\n         [ 2.7484467 ,  1.9640365 ,  2.571441  ]],\n\n        ...,\n\n        [[ 1.639782  ,  1.8045892 ,  1.905209  ],\n         [ 1.9042168 ,  0.84424907,  2.5299163 ],\n         [ 1.9248763 ,  2.065254  ,  2.2932117 ],\n         ...,\n         [ 2.8779838 ,  1.6554171 ,  1.973181  ],\n         [ 1.7452347 ,  2.2037826 ,  0.9841608 ],\n         [ 2.5768256 ,  2.5755382 ,  1.589097  ]],\n\n        [[ 0.84064627,  2.0366187 ,  1.8258088 ],\n         [ 1.8945489 ,  2.364206  ,  2.0778902 ],\n         [ 1.4947422 ,  1.0394337 ,  3.2269232 ],\n         ...,\n         [ 2.6237442 ,  1.628478  ,  1.4932383 ],\n         [ 2.301512  ,  2.3566358 ,  2.6375968 ],\n         [ 2.0138235 ,  2.3782668 ,  2.0727115 ]],\n\n        [[ 1.2138972 ,  0.75897455,  2.395844  ],\n         [ 2.4278903 ,  2.1340597 ,  1.9615532 ],\n         [ 2.0332873 ,  1.4823809 ,  1.8087729 ],\n         ...,\n         [ 2.8198192 ,  2.2066557 ,  1.431545  ],\n         [ 1.6779033 ,  0.8364631 ,  1.5716189 ],\n         [ 1.6656086 ,  1.599615  ,  2.1591089 ]]],\n\n\n       [[[ 1.7414215 ,  0.3585702 ,  1.3698878 ],\n         [ 1.2438834 ,  1.3324057 ,  1.4977924 ],\n         [ 0.6503222 ,  1.6360596 ,  0.5590612 ],\n         ...,\n         [ 1.1237793 , -0.20515122,  0.5120941 ],\n         [ 1.2915369 ,  1.4760761 ,  0.28946117],\n         [ 0.7050323 ,  1.6141454 ,  0.35227856]],\n\n        [[ 1.207992  ,  0.28703582,  0.7560702 ],\n         [ 0.35627788,  0.7035461 ,  2.3526473 ],\n         [ 1.1006724 ,  0.87992483,  0.49287423],\n         ...,\n         [ 1.5453209 ,  1.2517555 ,  0.16872674],\n         [ 0.75174546,  0.66511923,  0.19831194],\n         [ 1.8256725 ,  1.059535  , -0.369033  ]],\n\n        [[ 1.3963689 ,  1.9338901 ,  1.0518245 ],\n         [ 2.315159  ,  0.8201004 ,  1.4977427 ],\n         [ 0.3919819 ,  1.1041601 ,  1.2862176 ],\n         ...,\n         [ 0.6410521 ,  1.5875634 ,  0.02894929],\n         [ 1.3572145 ,  1.5385766 ,  1.2245946 ],\n         [ 1.045172  ,  1.5355142 ,  0.31114987]],\n\n        ...,\n\n        [[ 1.3514612 ,  2.0533261 ,  2.0689795 ],\n         [ 0.42995012,  1.128226  ,  0.790035  ],\n         [ 1.8798119 ,  1.5356122 ,  1.4825114 ],\n         ...,\n         [ 0.57646024,  1.4588888 ,  1.3498847 ],\n         [ 1.9345435 ,  0.9696753 ,  1.5952718 ],\n         [ 1.8089062 ,  2.2988086 ,  1.1282895 ]],\n\n        [[ 1.769382  ,  1.5345465 ,  2.169295  ],\n         [-0.51268464, -0.18636616,  0.47452092],\n         [ 1.4133332 ,  0.56138223,  1.10489   ],\n         ...,\n         [ 0.9630234 ,  1.3852279 ,  0.89496344],\n         [ 1.9324583 ,  0.5710072 ,  0.5875684 ],\n         [ 1.3005884 ,  0.536136  ,  1.7755185 ]],\n\n        [[ 1.4492421 ,  1.8972404 ,  1.103652  ],\n         [ 0.88081044,  1.623235  ,  0.09253243],\n         [ 0.6601994 ,  0.9059695 ,  1.5996975 ],\n         ...,\n         [ 1.198455  ,  1.7104976 ,  1.2260208 ],\n         [ 1.1443179 ,  0.5056351 ,  0.6553765 ],\n         [ 2.2154322 ,  2.2503572 , -0.21658538]]],\n\n\n       [[[ 2.8335762 ,  2.6376622 ,  3.1999385 ],\n         [ 2.9274316 ,  3.191402  ,  4.408206  ],\n         [ 3.3175743 ,  1.0183203 ,  3.6667678 ],\n         ...,\n         [ 1.8996387 ,  2.1473536 ,  1.4318823 ],\n         [ 3.1522088 ,  3.6141844 ,  2.6369455 ],\n         [ 3.388126  ,  3.4974043 ,  2.8604913 ]],\n\n        [[ 3.950236  ,  3.3556354 ,  2.5574758 ],\n         [ 2.862204  ,  4.2122636 ,  3.4907787 ],\n         [ 3.4201028 ,  3.8351216 ,  2.6454635 ],\n         ...,\n         [ 3.259614  ,  3.3182411 ,  2.8238044 ],\n         [ 2.573326  ,  2.9609842 ,  1.6149846 ],\n         [ 3.4063408 ,  2.4825363 ,  3.2836034 ]],\n\n        [[ 3.4570982 ,  3.090267  ,  3.4756157 ],\n         [ 2.8241944 ,  2.5723364 ,  3.2905316 ],\n         [ 4.6850004 ,  2.6671474 ,  3.1267223 ],\n         ...,\n         [ 4.0209436 ,  4.7479267 ,  2.4158688 ],\n         [ 3.5069606 ,  3.159528  ,  3.2299006 ],\n         [ 3.856465  ,  3.5913415 ,  2.6088574 ]],\n\n        ...,\n\n        [[ 3.5040863 ,  2.8046007 ,  2.229762  ],\n         [ 3.1371174 ,  4.131292  ,  2.4044406 ],\n         [ 4.0729256 ,  3.227788  ,  2.9952905 ],\n         ...,\n         [ 4.3196764 ,  3.879393  ,  3.0790243 ],\n         [ 3.7341452 ,  2.7932148 ,  3.5620759 ],\n         [ 2.5966554 ,  4.1707573 ,  3.1358807 ]],\n\n        [[ 3.215389  ,  3.2378814 ,  2.9631817 ],\n         [ 2.2203846 ,  3.5166695 ,  2.575012  ],\n         [ 2.362857  ,  3.021566  ,  2.6678803 ],\n         ...,\n         [ 3.7075849 ,  2.1985695 ,  4.5142665 ],\n         [ 2.8979812 ,  3.48846   ,  3.0672405 ],\n         [ 2.9640439 ,  3.0709167 ,  3.9965708 ]],\n\n        [[ 2.2606788 ,  2.6934164 ,  2.4797783 ],\n         [ 3.346896  ,  4.3046346 ,  3.2324197 ],\n         [ 3.2366524 ,  3.6568398 ,  3.5365076 ],\n         ...,\n         [ 2.8834474 ,  4.0789633 ,  1.5014106 ],\n         [ 3.2494352 ,  3.8481572 ,  2.1511438 ],\n         [ 3.0087848 ,  4.404775  ,  1.4013829 ]]]], dtype=float32), array([[0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 3.0406265 ,  3.6973438 ,  1.3942779 ],\n         [ 1.3098267 ,  2.4521337 ,  2.6088326 ],\n         [ 1.7770636 ,  0.74557203,  2.181637  ],\n         ...,\n         [ 2.9598663 ,  1.5669929 ,  1.3075422 ],\n         [ 1.7186605 ,  1.4414779 ,  1.8365443 ],\n         [ 2.2543988 ,  1.5371116 ,  2.9083977 ]],\n\n        [[ 2.160984  ,  1.8636936 ,  2.0573945 ],\n         [ 1.4862118 ,  1.6985813 ,  2.2480702 ],\n         [ 3.8580155 ,  1.0977949 , -0.10879815],\n         ...,\n         [ 3.057203  ,  2.2955103 ,  2.4344447 ],\n         [ 2.3591897 ,  2.0185661 ,  2.219224  ],\n         [ 2.3404567 ,  1.4593939 ,  1.853442  ]],\n\n        [[ 2.1314955 ,  1.3601824 ,  2.9312444 ],\n         [ 2.5140514 ,  2.4241536 ,  2.7612224 ],\n         [ 2.6080441 ,  2.3054194 ,  2.4098735 ],\n         ...,\n         [ 1.9786763 ,  2.0369823 ,  2.3017435 ],\n         [ 1.0485036 ,  2.111204  ,  1.5216081 ],\n         [ 2.2081916 ,  1.5917888 ,  1.1786754 ]],\n\n        ...,\n\n        [[ 2.0547953 ,  2.3876588 ,  2.523169  ],\n         [ 1.938032  ,  1.36546   ,  1.890995  ],\n         [ 2.2249703 ,  1.9522436 ,  2.6263077 ],\n         ...,\n         [ 1.6827044 ,  1.5703079 ,  2.8820589 ],\n         [ 1.772651  ,  2.015991  ,  1.5471598 ],\n         [ 2.7044554 ,  1.5184634 ,  2.0428064 ]],\n\n        [[ 1.5210556 ,  0.42924353,  3.0235293 ],\n         [ 1.1078975 ,  1.139994  ,  1.2363602 ],\n         [ 1.8622999 ,  1.7033432 ,  2.203355  ],\n         ...,\n         [ 3.058149  ,  1.8094599 ,  3.2404916 ],\n         [ 1.6484432 ,  2.8081949 ,  1.120027  ],\n         [ 3.2356935 ,  1.8265636 ,  2.4401178 ]],\n\n        [[ 1.7338067 ,  0.75122714,  0.62543446],\n         [ 2.483309  ,  4.194837  ,  1.3123794 ],\n         [ 1.0916572 ,  0.962297  ,  2.162189  ],\n         ...,\n         [ 1.1173189 ,  2.4716504 ,  2.9155843 ],\n         [ 2.237738  ,  1.9726123 ,  1.9982766 ],\n         [ 1.0243334 ,  2.4073236 ,  1.911845  ]]],\n\n\n       [[[ 0.6497182 ,  1.5265101 ,  0.2737365 ],\n         [ 1.0062611 ,  0.7273039 ,  0.97769284],\n         [ 0.7922634 ,  1.6093906 ,  2.1975746 ],\n         ...,\n         [ 1.5281417 ,  1.2433189 ,  1.3075562 ],\n         [-0.13382855,  1.0213845 ,  1.6309155 ],\n         [ 1.7310747 ,  1.3735108 ,  1.6485381 ]],\n\n        [[ 1.3588021 ,  0.06604662,  1.2889615 ],\n         [ 0.35148123,  0.84844023,  1.8272902 ],\n         [-0.469367  ,  0.556856  ,  0.42525554],\n         ...,\n         [ 0.7180831 ,  1.0977366 ,  0.04398031],\n         [ 0.09188802,  0.54057527,  1.8547456 ],\n         [ 2.1787636 ,  0.90813625,  0.5954827 ]],\n\n        [[ 0.84125596,  1.7603734 , -0.25102317],\n         [ 0.28195846,  0.7824175 ,  0.85150546],\n         [ 0.7566392 , -0.10013316,  0.9149767 ],\n         ...,\n         [ 0.8211298 , -0.21805023,  1.926155  ],\n         [-0.29194564,  1.5488118 ,  0.8175122 ],\n         [ 1.2672086 , -0.13520686,  1.5465385 ]],\n\n        ...,\n\n        [[ 1.4048158 ,  1.1439883 ,  1.5798103 ],\n         [ 0.59464467,  0.36170244,  1.396027  ],\n         [ 1.7968495 ,  2.7684166 ,  0.811661  ],\n         ...,\n         [ 0.88709116, -0.3234277 ,  1.0517743 ],\n         [ 0.99274975,  0.44084218,  1.6366682 ],\n         [ 0.56026566,  0.7286586 ,  0.04451069]],\n\n        [[ 0.74237835,  0.5452027 ,  0.5638945 ],\n         [ 0.5189527 ,  2.3704906 ,  1.4049081 ],\n         [ 0.5216599 ,  0.7417014 ,  0.7464885 ],\n         ...,\n         [ 0.81659377,  1.1004059 ,  1.1405336 ],\n         [-0.284098  ,  0.9225951 ,  2.0557795 ],\n         [ 1.1978678 ,  1.5165879 ,  1.7971778 ]],\n\n        [[ 0.7052947 ,  1.2764143 ,  1.0218211 ],\n         [ 0.9645209 ,  0.8784347 ,  0.36523452],\n         [ 0.70506847,  1.2978438 ,  1.5159012 ],\n         ...,\n         [ 1.5369956 ,  1.8290869 ,  0.9861722 ],\n         [ 0.7849697 ,  1.6481042 , -0.6114303 ],\n         [-0.5957014 ,  0.92527336,  1.0839422 ]]],\n\n\n       [[[-0.59466445, -0.16538094, -0.47089225],\n         [-0.13410203,  0.72176003,  0.83764315],\n         [-0.55096763,  0.37214053,  1.2206773 ],\n         ...,\n         [-0.20571844, -0.2089851 , -0.12572329],\n         [ 0.29529658, -1.4763068 ,  0.76136833],\n         [ 0.20237288, -0.15132053, -0.49874088]],\n\n        [[-0.31310764,  0.35347876,  1.3863302 ],\n         [-0.32595038, -0.50692505, -0.33272028],\n         [ 0.49448922, -0.6584797 , -0.7806213 ],\n         ...,\n         [ 1.0826739 , -0.20284732,  0.19371024],\n         [-0.8139696 ,  0.5716461 , -0.2196163 ],\n         [ 0.45840865, -0.36544704,  0.06211996]],\n\n        [[-0.5853385 ,  0.2779955 ,  0.4263543 ],\n         [ 0.9914025 ,  1.420924  , -0.54550993],\n         [ 0.00762739, -0.3749839 ,  0.41845855],\n         ...,\n         [-0.6634458 , -1.5120848 ,  0.7185644 ],\n         [-0.21805835,  0.7885331 ,  1.304984  ],\n         [ 0.60055363, -0.89204633,  1.6528573 ]],\n\n        ...,\n\n        [[-0.40379474,  0.9162464 , -0.36012977],\n         [ 1.0670961 ,  0.48368344,  1.6774415 ],\n         [-1.4807303 , -0.7966726 , -0.53632146],\n         ...,\n         [ 0.15850863, -0.37400985,  0.6812199 ],\n         [-0.6489666 , -0.05064928,  0.9068011 ],\n         [-0.20246221,  1.2530555 ,  0.6763549 ]],\n\n        [[-0.25756067,  1.0592083 ,  0.707541  ],\n         [-0.45181218, -0.10739055,  0.46177772],\n         [-0.4570223 ,  0.28380442, -1.075269  ],\n         ...,\n         [-0.3917187 ,  0.21447724,  0.38541391],\n         [-0.59045357,  1.3327241 , -0.6908593 ],\n         [ 0.50239193,  0.0599623 ,  0.31972468]],\n\n        [[ 0.9125627 ,  1.2997686 , -0.9024459 ],\n         [-0.29417396,  0.43739778,  0.60037404],\n         [-0.22183347, -0.58308566,  0.01091053],\n         ...,\n         [-0.36917886,  0.23338054,  0.23796083],\n         [ 1.1245507 , -0.34195244, -1.401949  ],\n         [ 0.24688439,  0.22108644, -0.64333814]]],\n\n\n       ...,\n\n\n       [[[ 1.3099507 ,  3.0102136 ,  1.952447  ],\n         [ 2.5880277 ,  1.7685492 ,  2.5299404 ],\n         [ 1.1066588 ,  2.3859327 ,  1.5437702 ],\n         ...,\n         [ 2.0951214 ,  2.2113452 ,  2.300813  ],\n         [ 2.411214  ,  2.981152  ,  2.4022782 ],\n         [ 2.14326   ,  2.2656963 ,  3.3753014 ]],\n\n        [[ 1.9972514 ,  1.6693102 ,  2.421993  ],\n         [ 2.0175853 ,  1.3012713 ,  1.7236663 ],\n         [ 1.9469953 ,  2.4580917 ,  2.3215096 ],\n         ...,\n         [ 2.532045  ,  1.0379535 ,  2.0807924 ],\n         [ 1.199849  ,  2.4352999 ,  1.6720675 ],\n         [ 2.455083  ,  1.3037251 ,  2.3379488 ]],\n\n        [[ 2.1383832 ,  1.0198641 ,  1.8358516 ],\n         [ 0.91705835,  1.4939997 ,  2.4323983 ],\n         [ 1.8786854 ,  2.0862093 ,  1.4486463 ],\n         ...,\n         [ 1.4077032 ,  2.25841   ,  1.4204733 ],\n         [ 2.6389945 ,  1.0996883 ,  2.0707314 ],\n         [ 2.7484467 ,  1.9640365 ,  2.571441  ]],\n\n        ...,\n\n        [[ 1.639782  ,  1.8045892 ,  1.905209  ],\n         [ 1.9042168 ,  0.84424907,  2.5299163 ],\n         [ 1.9248763 ,  2.065254  ,  2.2932117 ],\n         ...,\n         [ 2.8779838 ,  1.6554171 ,  1.973181  ],\n         [ 1.7452347 ,  2.2037826 ,  0.9841608 ],\n         [ 2.5768256 ,  2.5755382 ,  1.589097  ]],\n\n        [[ 0.84064627,  2.0366187 ,  1.8258088 ],\n         [ 1.8945489 ,  2.364206  ,  2.0778902 ],\n         [ 1.4947422 ,  1.0394337 ,  3.2269232 ],\n         ...,\n         [ 2.6237442 ,  1.628478  ,  1.4932383 ],\n         [ 2.301512  ,  2.3566358 ,  2.6375968 ],\n         [ 2.0138235 ,  2.3782668 ,  2.0727115 ]],\n\n        [[ 1.2138972 ,  0.75897455,  2.395844  ],\n         [ 2.4278903 ,  2.1340597 ,  1.9615532 ],\n         [ 2.0332873 ,  1.4823809 ,  1.8087729 ],\n         ...,\n         [ 2.8198192 ,  2.2066557 ,  1.431545  ],\n         [ 1.6779033 ,  0.8364631 ,  1.5716189 ],\n         [ 1.6656086 ,  1.599615  ,  2.1591089 ]]],\n\n\n       [[[ 1.7414215 ,  0.3585702 ,  1.3698878 ],\n         [ 1.2438834 ,  1.3324057 ,  1.4977924 ],\n         [ 0.6503222 ,  1.6360596 ,  0.5590612 ],\n         ...,\n         [ 1.1237793 , -0.20515122,  0.5120941 ],\n         [ 1.2915369 ,  1.4760761 ,  0.28946117],\n         [ 0.7050323 ,  1.6141454 ,  0.35227856]],\n\n        [[ 1.207992  ,  0.28703582,  0.7560702 ],\n         [ 0.35627788,  0.7035461 ,  2.3526473 ],\n         [ 1.1006724 ,  0.87992483,  0.49287423],\n         ...,\n         [ 1.5453209 ,  1.2517555 ,  0.16872674],\n         [ 0.75174546,  0.66511923,  0.19831194],\n         [ 1.8256725 ,  1.059535  , -0.369033  ]],\n\n        [[ 1.3963689 ,  1.9338901 ,  1.0518245 ],\n         [ 2.315159  ,  0.8201004 ,  1.4977427 ],\n         [ 0.3919819 ,  1.1041601 ,  1.2862176 ],\n         ...,\n         [ 0.6410521 ,  1.5875634 ,  0.02894929],\n         [ 1.3572145 ,  1.5385766 ,  1.2245946 ],\n         [ 1.045172  ,  1.5355142 ,  0.31114987]],\n\n        ...,\n\n        [[ 1.3514612 ,  2.0533261 ,  2.0689795 ],\n         [ 0.42995012,  1.128226  ,  0.790035  ],\n         [ 1.8798119 ,  1.5356122 ,  1.4825114 ],\n         ...,\n         [ 0.57646024,  1.4588888 ,  1.3498847 ],\n         [ 1.9345435 ,  0.9696753 ,  1.5952718 ],\n         [ 1.8089062 ,  2.2988086 ,  1.1282895 ]],\n\n        [[ 1.769382  ,  1.5345465 ,  2.169295  ],\n         [-0.51268464, -0.18636616,  0.47452092],\n         [ 1.4133332 ,  0.56138223,  1.10489   ],\n         ...,\n         [ 0.9630234 ,  1.3852279 ,  0.89496344],\n         [ 1.9324583 ,  0.5710072 ,  0.5875684 ],\n         [ 1.3005884 ,  0.536136  ,  1.7755185 ]],\n\n        [[ 1.4492421 ,  1.8972404 ,  1.103652  ],\n         [ 0.88081044,  1.623235  ,  0.09253243],\n         [ 0.6601994 ,  0.9059695 ,  1.5996975 ],\n         ...,\n         [ 1.198455  ,  1.7104976 ,  1.2260208 ],\n         [ 1.1443179 ,  0.5056351 ,  0.6553765 ],\n         [ 2.2154322 ,  2.2503572 , -0.21658538]]],\n\n\n       [[[ 2.8335762 ,  2.6376622 ,  3.1999385 ],\n         [ 2.9274316 ,  3.191402  ,  4.408206  ],\n         [ 3.3175743 ,  1.0183203 ,  3.6667678 ],\n         ...,\n         [ 1.8996387 ,  2.1473536 ,  1.4318823 ],\n         [ 3.1522088 ,  3.6141844 ,  2.6369455 ],\n         [ 3.388126  ,  3.4974043 ,  2.8604913 ]],\n\n        [[ 3.950236  ,  3.3556354 ,  2.5574758 ],\n         [ 2.862204  ,  4.2122636 ,  3.4907787 ],\n         [ 3.4201028 ,  3.8351216 ,  2.6454635 ],\n         ...,\n         [ 3.259614  ,  3.3182411 ,  2.8238044 ],\n         [ 2.573326  ,  2.9609842 ,  1.6149846 ],\n         [ 3.4063408 ,  2.4825363 ,  3.2836034 ]],\n\n        [[ 3.4570982 ,  3.090267  ,  3.4756157 ],\n         [ 2.8241944 ,  2.5723364 ,  3.2905316 ],\n         [ 4.6850004 ,  2.6671474 ,  3.1267223 ],\n         ...,\n         [ 4.0209436 ,  4.7479267 ,  2.4158688 ],\n         [ 3.5069606 ,  3.159528  ,  3.2299006 ],\n         [ 3.856465  ,  3.5913415 ,  2.6088574 ]],\n\n        ...,\n\n        [[ 3.5040863 ,  2.8046007 ,  2.229762  ],\n         [ 3.1371174 ,  4.131292  ,  2.4044406 ],\n         [ 4.0729256 ,  3.227788  ,  2.9952905 ],\n         ...,\n         [ 4.3196764 ,  3.879393  ,  3.0790243 ],\n         [ 3.7341452 ,  2.7932148 ,  3.5620759 ],\n         [ 2.5966554 ,  4.1707573 ,  3.1358807 ]],\n\n        [[ 3.215389  ,  3.2378814 ,  2.9631817 ],\n         [ 2.2203846 ,  3.5166695 ,  2.575012  ],\n         [ 2.362857  ,  3.021566  ,  2.6678803 ],\n         ...,\n         [ 3.7075849 ,  2.1985695 ,  4.5142665 ],\n         [ 2.8979812 ,  3.48846   ,  3.0672405 ],\n         [ 2.9640439 ,  3.0709167 ,  3.9965708 ]],\n\n        [[ 2.2606788 ,  2.6934164 ,  2.4797783 ],\n         [ 3.346896  ,  4.3046346 ,  3.2324197 ],\n         [ 3.2366524 ,  3.6568398 ,  3.5365076 ],\n         ...,\n         [ 2.8834474 ,  4.0789633 ,  1.5014106 ],\n         [ 3.2494352 ,  3.8481572 ,  2.1511438 ],\n         [ 3.0087848 ,  4.404775  ,  1.4013829 ]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 0., 1.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.4752845, 0.75]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x12732b5f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x12733f230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.44957982659339907, 0.84]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x12789b910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.3715249, 1.0], [0.4056313, 1.0], [0.3768909, 1.0], [0.3946279, 1.0], [0.41750577, 1.0], [0.3569655, 1.0], [0.408265, 1.0], [0.3495901, 1.0], [0.37056756, 0.9375], [0.28402737, 1.0], [0.4952506, 1.0], [0.269434, 1.0], [0.437851, 1.0]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[-0.4825441 ,  0.13792601, -0.03248199],\n         [ 0.7687549 ,  1.9752518 , -0.22133711],\n         [ 0.27107552, -0.3142729 ,  1.1416644 ],\n         ...,\n         [ 1.337021  ,  1.2430475 ,  1.8615862 ],\n         [ 0.22915713,  1.4676356 ,  0.05638843],\n         [-0.12428987,  0.80670094,  0.83248454]],\n\n        [[ 0.8622204 ,  0.7407452 ,  1.6983161 ],\n         [ 2.3139076 ,  2.027908  ,  1.1575493 ],\n         [ 1.9059772 ,  1.0085673 ,  0.56165725],\n         ...,\n         [-0.21017125,  0.77160114,  0.4726147 ],\n         [ 0.76442415,  1.0306776 ,  1.5681745 ],\n         [ 2.3954022 ,  0.45802465,  1.5652544 ]],\n\n        [[ 2.077845  ,  1.8784041 ,  3.0957227 ],\n         [ 0.8241091 ,  1.0798303 ,  1.7657307 ],\n         [ 1.6154293 , -0.0197737 ,  0.40699118],\n         ...,\n         [ 0.32735506,  1.9622546 , -0.19275445],\n         [ 0.8781496 ,  0.9884387 ,  0.95480245],\n         [ 1.0140672 ,  0.6843507 ,  0.60465246]],\n\n        ...,\n\n        [[ 0.793002  ,  0.6365201 ,  1.8172313 ],\n         [ 1.7094468 ,  0.32019946, -0.6314925 ],\n         [ 0.81300324,  1.1294934 ,  1.2575324 ],\n         ...,\n         [ 1.7193356 ,  0.8563617 ,  0.50163484],\n         [ 1.27116   , -1.1019139 ,  1.0091527 ],\n         [ 1.952635  ,  1.8541843 ,  0.79125416]],\n\n        [[ 1.9262388 ,  1.4106742 ,  0.5843225 ],\n         [-1.173418  ,  1.658627  ,  1.757181  ],\n         [ 0.9117339 ,  2.7624016 ,  0.3769314 ],\n         ...,\n         [-0.37942815,  1.7169492 ,  1.35448   ],\n         [ 1.6008315 ,  0.4373188 ,  2.1747556 ],\n         [ 2.9078484 ,  0.15578912,  1.5715061 ]],\n\n        [[ 1.2397319 , -0.4209425 ,  0.8732085 ],\n         [ 1.7433691 ,  1.4592847 ,  1.2025864 ],\n         [ 0.2836789 , -0.5900763 ,  1.1165338 ],\n         ...,\n         [ 1.5489728 , -0.38867527,  1.7701415 ],\n         [-0.23383929,  0.8260824 ,  1.6684527 ],\n         [-0.3609536 ,  0.92496824,  0.80846983]]],\n\n\n       [[[ 1.3099507 ,  3.0102136 ,  1.952447  ],\n         [ 2.5880277 ,  1.7685492 ,  2.5299404 ],\n         [ 1.1066588 ,  2.3859327 ,  1.5437702 ],\n         ...,\n         [ 2.0951214 ,  2.2113452 ,  2.300813  ],\n         [ 2.411214  ,  2.981152  ,  2.4022782 ],\n         [ 2.14326   ,  2.2656963 ,  3.3753014 ]],\n\n        [[ 1.9972514 ,  1.6693102 ,  2.421993  ],\n         [ 2.0175853 ,  1.3012713 ,  1.7236663 ],\n         [ 1.9469953 ,  2.4580917 ,  2.3215096 ],\n         ...,\n         [ 2.532045  ,  1.0379535 ,  2.0807924 ],\n         [ 1.199849  ,  2.4352999 ,  1.6720675 ],\n         [ 2.455083  ,  1.3037251 ,  2.3379488 ]],\n\n        [[ 2.1383832 ,  1.0198641 ,  1.8358516 ],\n         [ 0.91705835,  1.4939997 ,  2.4323983 ],\n         [ 1.8786854 ,  2.0862093 ,  1.4486463 ],\n         ...,\n         [ 1.4077032 ,  2.25841   ,  1.4204733 ],\n         [ 2.6389945 ,  1.0996883 ,  2.0707314 ],\n         [ 2.7484467 ,  1.9640365 ,  2.571441  ]],\n\n        ...,\n\n        [[ 1.639782  ,  1.8045892 ,  1.905209  ],\n         [ 1.9042168 ,  0.84424907,  2.5299163 ],\n         [ 1.9248763 ,  2.065254  ,  2.2932117 ],\n         ...,\n         [ 2.8779838 ,  1.6554171 ,  1.973181  ],\n         [ 1.7452347 ,  2.2037826 ,  0.9841608 ],\n         [ 2.5768256 ,  2.5755382 ,  1.589097  ]],\n\n        [[ 0.84064627,  2.0366187 ,  1.8258088 ],\n         [ 1.8945489 ,  2.364206  ,  2.0778902 ],\n         [ 1.4947422 ,  1.0394337 ,  3.2269232 ],\n         ...,\n         [ 2.6237442 ,  1.628478  ,  1.4932383 ],\n         [ 2.301512  ,  2.3566358 ,  2.6375968 ],\n         [ 2.0138235 ,  2.3782668 ,  2.0727115 ]],\n\n        [[ 1.2138972 ,  0.75897455,  2.395844  ],\n         [ 2.4278903 ,  2.1340597 ,  1.9615532 ],\n         [ 2.0332873 ,  1.4823809 ,  1.8087729 ],\n         ...,\n         [ 2.8198192 ,  2.2066557 ,  1.431545  ],\n         [ 1.6779033 ,  0.8364631 ,  1.5716189 ],\n         [ 1.6656086 ,  1.599615  ,  2.1591089 ]]],\n\n\n       [[[ 2.9561636 ,  1.4067445 ,  2.875751  ],\n         [ 2.2237213 ,  2.3006256 ,  1.5162505 ],\n         [ 1.2505383 ,  3.0237224 ,  2.5713227 ],\n         ...,\n         [ 2.4698634 ,  3.3603156 ,  2.76877   ],\n         [ 1.8984178 ,  2.875103  ,  1.7374765 ],\n         [ 1.3413665 ,  2.2279615 ,  3.802414  ]],\n\n        [[ 2.164624  ,  2.4495745 ,  1.5819842 ],\n         [ 1.6074834 ,  2.3000953 ,  2.45206   ],\n         [ 2.530328  ,  2.7881873 ,  2.030098  ],\n         ...,\n         [ 1.2534648 ,  2.1074815 ,  1.2285596 ],\n         [ 0.71998113,  2.45788   ,  3.228158  ],\n         [ 2.7311249 ,  2.7866375 ,  3.3237114 ]],\n\n        [[ 1.7089663 ,  2.6638594 ,  1.3702537 ],\n         [ 1.4760534 ,  2.1381178 ,  1.8445994 ],\n         [ 3.2073798 ,  1.0672891 ,  0.60988194],\n         ...,\n         [ 1.5134677 ,  1.427726  ,  2.6046927 ],\n         [ 1.9417007 ,  2.0221887 ,  2.3125122 ],\n         [ 2.0240555 ,  1.8510044 ,  2.9968698 ]],\n\n        ...,\n\n        [[ 2.04488   ,  0.81875193,  1.9849206 ],\n         [ 1.7986362 ,  1.6609902 ,  1.4869928 ],\n         [ 3.2826154 ,  1.6845556 ,  2.2070143 ],\n         ...,\n         [ 1.8944114 ,  3.3139658 ,  2.2806206 ],\n         [ 2.5440955 ,  1.7738932 ,  2.8987987 ],\n         [ 1.3994364 ,  1.5977423 ,  0.9034979 ]],\n\n        [[ 2.8394241 ,  1.8927431 ,  1.3170724 ],\n         [ 2.0554938 ,  2.0183501 ,  1.5725001 ],\n         [ 1.2567974 ,  2.1360202 ,  2.4618826 ],\n         ...,\n         [ 1.9021753 ,  2.4434228 ,  2.757001  ],\n         [ 3.4371557 ,  1.328862  ,  2.5771549 ],\n         [ 3.1281958 ,  2.5796516 ,  1.981126  ]],\n\n        [[ 1.2122092 ,  2.3268487 ,  1.0860889 ],\n         [ 2.0491152 ,  2.8940585 ,  3.3645868 ],\n         [ 3.0689838 ,  2.3758314 ,  1.993354  ],\n         ...,\n         [ 2.6650925 ,  1.9453506 ,  2.5910766 ],\n         [ 2.3948653 ,  2.3693752 ,  1.4632387 ],\n         [ 1.5699857 ,  0.7038886 ,  2.3385217 ]]],\n\n\n       ...,\n\n\n       [[[ 2.133351  ,  2.9112637 ,  3.514737  ],\n         [ 2.159036  ,  2.8678226 ,  2.6408842 ],\n         [ 2.693611  ,  3.2040496 ,  3.600308  ],\n         ...,\n         [ 3.2556417 ,  3.66411   ,  2.7129486 ],\n         [ 1.8104508 ,  3.7222455 ,  2.6152427 ],\n         [ 2.4480312 ,  3.4551306 ,  3.7167187 ]],\n\n        [[ 2.585147  ,  3.7375627 ,  4.1056757 ],\n         [ 3.1798077 ,  3.3353117 ,  2.4358728 ],\n         [ 2.0643985 ,  4.0653977 ,  2.797725  ],\n         ...,\n         [ 4.2800345 ,  1.7016767 ,  2.6506283 ],\n         [ 3.7269926 ,  2.853948  ,  2.7642348 ],\n         [ 3.8117502 ,  2.6626728 ,  1.922178  ]],\n\n        [[ 3.397069  ,  2.708927  ,  3.117707  ],\n         [ 3.115603  ,  4.059906  ,  2.6700246 ],\n         [ 3.4575226 ,  2.794404  ,  2.9959571 ],\n         ...,\n         [ 2.204744  ,  2.8954532 ,  3.2356863 ],\n         [ 3.084026  ,  2.3049998 ,  2.3416336 ],\n         [ 3.5212693 ,  3.2372155 ,  3.526419  ]],\n\n        ...,\n\n        [[ 2.9743264 ,  1.8696771 ,  2.4249887 ],\n         [ 1.7402868 ,  3.4761798 ,  2.6134655 ],\n         [ 3.465387  ,  3.1379347 ,  2.5152636 ],\n         ...,\n         [ 2.294911  ,  3.0608718 ,  2.2822855 ],\n         [ 2.8206162 ,  3.9880667 ,  4.3930354 ],\n         [ 3.5338957 ,  2.3747888 ,  1.6587371 ]],\n\n        [[ 3.3220472 ,  4.0950317 ,  2.720054  ],\n         [ 1.8698846 ,  3.3087637 ,  3.4307394 ],\n         [ 2.591937  ,  2.5250237 ,  3.0734487 ],\n         ...,\n         [ 2.5362313 ,  3.6236823 ,  3.1440315 ],\n         [ 2.7829552 ,  4.0664415 ,  3.1693177 ],\n         [ 2.1270928 ,  3.4147477 ,  2.047084  ]],\n\n        [[ 2.588348  ,  3.2197564 ,  3.1754682 ],\n         [ 3.148712  ,  1.4703188 ,  2.843345  ],\n         [ 2.775834  ,  3.4704523 ,  2.7645366 ],\n         ...,\n         [ 3.4483285 ,  3.0925398 ,  3.9102476 ],\n         [ 3.2748837 ,  3.4768956 ,  3.0124006 ],\n         [ 2.0330772 ,  2.0796087 ,  3.8685155 ]]],\n\n\n       [[[ 1.813372  ,  2.0463033 ,  1.8390411 ],\n         [-0.42093533,  1.2829227 ,  1.167974  ],\n         [ 2.8461835 ,  1.549377  ,  1.7910935 ],\n         ...,\n         [ 1.3973672 ,  1.7416483 ,  1.9508048 ],\n         [ 2.2414153 ,  1.5116042 ,  2.0889997 ],\n         [ 1.6873626 ,  2.0432293 ,  2.4808917 ]],\n\n        [[ 0.99996877,  2.346769  ,  1.2741195 ],\n         [ 1.8925518 ,  3.1848915 ,  2.0313866 ],\n         [ 2.1177046 ,  1.820466  ,  3.2030208 ],\n         ...,\n         [ 2.6280313 ,  2.540002  ,  1.5993326 ],\n         [ 1.6740515 ,  1.980628  ,  2.5009613 ],\n         [ 3.296722  ,  1.285049  ,  0.06768453]],\n\n        [[ 0.9248643 ,  1.2156669 ,  2.0129964 ],\n         [ 1.2122453 ,  2.5755942 ,  1.198735  ],\n         [ 2.4726765 ,  1.291342  ,  1.4535177 ],\n         ...,\n         [ 3.328178  ,  2.5405579 ,  1.6699535 ],\n         [ 1.2411047 ,  1.1718726 ,  2.3427694 ],\n         [ 2.4005244 ,  2.0190718 ,  2.3375578 ]],\n\n        ...,\n\n        [[ 1.4209566 ,  4.1400647 ,  1.5956382 ],\n         [ 1.4630346 ,  2.5790334 ,  2.294139  ],\n         [ 2.1583865 ,  1.7395163 ,  0.9216153 ],\n         ...,\n         [ 1.3431419 ,  2.11928   ,  1.921968  ],\n         [ 2.8646739 ,  2.05782   ,  2.2095668 ],\n         [ 3.10267   ,  2.2980888 ,  1.7781261 ]],\n\n        [[ 2.686347  ,  0.7224965 , -0.10304505],\n         [ 1.9019072 ,  1.2190937 ,  2.6023521 ],\n         [ 3.036936  ,  2.252345  ,  1.6832381 ],\n         ...,\n         [ 1.9899786 ,  1.4832567 ,  2.5285313 ],\n         [ 2.9735775 ,  3.0372205 ,  1.5110309 ],\n         [ 2.0285876 ,  1.7900743 ,  2.3049223 ]],\n\n        [[ 2.6765504 ,  0.9246281 ,  1.5122308 ],\n         [ 1.200513  ,  1.7433606 ,  3.608061  ],\n         [ 3.2255533 ,  2.1387427 ,  1.7411848 ],\n         ...,\n         [ 1.8172183 ,  2.9028559 ,  1.0611002 ],\n         [ 2.9898865 ,  1.3811538 ,  1.974997  ],\n         [ 2.3912761 ,  1.7898732 ,  1.9301382 ]]],\n\n\n       [[[ 0.12016978, -0.4406181 , -0.5703136 ],\n         [ 1.1281494 ,  0.286827  , -1.1252112 ],\n         [-0.14259143,  1.0662307 ,  1.4431276 ],\n         ...,\n         [-0.90516376, -0.99098176, -0.54418486],\n         [ 0.65499324, -1.2037511 ,  0.77935445],\n         [ 0.5110346 , -0.17695533, -0.24861358]],\n\n        [[-0.8201422 , -0.45930928, -0.18682714],\n         [ 0.15872593, -0.22796142,  0.44701216],\n         [ 0.56671953, -0.2307877 ,  0.8005802 ],\n         ...,\n         [ 0.04028257,  0.25274426, -0.12994887],\n         [-0.73202807, -0.61500746, -0.48494393],\n         [-0.73349136,  0.40366635,  1.1806954 ]],\n\n        [[-0.4658495 , -0.7501582 , -0.3600268 ],\n         [ 1.2091229 ,  0.48093888, -0.3873696 ],\n         [ 0.0478309 ,  0.12294687, -0.8590552 ],\n         ...,\n         [-0.7490365 ,  0.8265392 , -0.66832995],\n         [ 0.33897588,  0.17473158, -0.09506743],\n         [ 0.6026239 ,  0.6307816 ,  0.00733469]],\n\n        ...,\n\n        [[ 0.28626093,  0.72461843, -0.19679646],\n         [ 1.1816903 , -0.27339858, -0.10587237],\n         [ 0.03190564, -0.73350966,  2.0803287 ],\n         ...,\n         [ 1.0570846 ,  0.16037081, -0.2772735 ],\n         [ 0.9155587 ,  0.11430386, -0.05402425],\n         [-0.28485918,  0.12279217, -0.6862815 ]],\n\n        [[ 0.8752387 ,  0.28174397,  1.4621859 ],\n         [ 0.46772015, -1.0921957 , -0.94882953],\n         [-0.42488745,  0.09508519, -0.5916203 ],\n         ...,\n         [-0.03201782,  0.25263813,  0.31954217],\n         [-0.5632773 , -0.3699506 ,  1.0168872 ],\n         [ 0.45363498,  1.6664041 ,  0.03829203]],\n\n        [[-0.28144735,  2.2870908 , -0.7445947 ],\n         [ 0.258733  , -0.64207816,  0.3190158 ],\n         [ 0.3705771 , -0.29427874,  0.65889186],\n         ...,\n         [-0.5516528 , -0.07284921, -0.3941531 ],\n         [ 0.19864997,  0.4731762 , -0.8981362 ],\n         [-0.07196806,  0.8258007 , -0.49707863]]]], dtype=float32), array([[0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[-0.4825441 ,  0.13792601, -0.03248199],\n         [ 0.7687549 ,  1.9752518 , -0.22133711],\n         [ 0.27107552, -0.3142729 ,  1.1416644 ],\n         ...,\n         [ 1.337021  ,  1.2430475 ,  1.8615862 ],\n         [ 0.22915713,  1.4676356 ,  0.05638843],\n         [-0.12428987,  0.80670094,  0.83248454]],\n\n        [[ 0.8622204 ,  0.7407452 ,  1.6983161 ],\n         [ 2.3139076 ,  2.027908  ,  1.1575493 ],\n         [ 1.9059772 ,  1.0085673 ,  0.56165725],\n         ...,\n         [-0.21017125,  0.77160114,  0.4726147 ],\n         [ 0.76442415,  1.0306776 ,  1.5681745 ],\n         [ 2.3954022 ,  0.45802465,  1.5652544 ]],\n\n        [[ 2.077845  ,  1.8784041 ,  3.0957227 ],\n         [ 0.8241091 ,  1.0798303 ,  1.7657307 ],\n         [ 1.6154293 , -0.0197737 ,  0.40699118],\n         ...,\n         [ 0.32735506,  1.9622546 , -0.19275445],\n         [ 0.8781496 ,  0.9884387 ,  0.95480245],\n         [ 1.0140672 ,  0.6843507 ,  0.60465246]],\n\n        ...,\n\n        [[ 0.793002  ,  0.6365201 ,  1.8172313 ],\n         [ 1.7094468 ,  0.32019946, -0.6314925 ],\n         [ 0.81300324,  1.1294934 ,  1.2575324 ],\n         ...,\n         [ 1.7193356 ,  0.8563617 ,  0.50163484],\n         [ 1.27116   , -1.1019139 ,  1.0091527 ],\n         [ 1.952635  ,  1.8541843 ,  0.79125416]],\n\n        [[ 1.9262388 ,  1.4106742 ,  0.5843225 ],\n         [-1.173418  ,  1.658627  ,  1.757181  ],\n         [ 0.9117339 ,  2.7624016 ,  0.3769314 ],\n         ...,\n         [-0.37942815,  1.7169492 ,  1.35448   ],\n         [ 1.6008315 ,  0.4373188 ,  2.1747556 ],\n         [ 2.9078484 ,  0.15578912,  1.5715061 ]],\n\n        [[ 1.2397319 , -0.4209425 ,  0.8732085 ],\n         [ 1.7433691 ,  1.4592847 ,  1.2025864 ],\n         [ 0.2836789 , -0.5900763 ,  1.1165338 ],\n         ...,\n         [ 1.5489728 , -0.38867527,  1.7701415 ],\n         [-0.23383929,  0.8260824 ,  1.6684527 ],\n         [-0.3609536 ,  0.92496824,  0.80846983]]],\n\n\n       [[[ 1.3099507 ,  3.0102136 ,  1.952447  ],\n         [ 2.5880277 ,  1.7685492 ,  2.5299404 ],\n         [ 1.1066588 ,  2.3859327 ,  1.5437702 ],\n         ...,\n         [ 2.0951214 ,  2.2113452 ,  2.300813  ],\n         [ 2.411214  ,  2.981152  ,  2.4022782 ],\n         [ 2.14326   ,  2.2656963 ,  3.3753014 ]],\n\n        [[ 1.9972514 ,  1.6693102 ,  2.421993  ],\n         [ 2.0175853 ,  1.3012713 ,  1.7236663 ],\n         [ 1.9469953 ,  2.4580917 ,  2.3215096 ],\n         ...,\n         [ 2.532045  ,  1.0379535 ,  2.0807924 ],\n         [ 1.199849  ,  2.4352999 ,  1.6720675 ],\n         [ 2.455083  ,  1.3037251 ,  2.3379488 ]],\n\n        [[ 2.1383832 ,  1.0198641 ,  1.8358516 ],\n         [ 0.91705835,  1.4939997 ,  2.4323983 ],\n         [ 1.8786854 ,  2.0862093 ,  1.4486463 ],\n         ...,\n         [ 1.4077032 ,  2.25841   ,  1.4204733 ],\n         [ 2.6389945 ,  1.0996883 ,  2.0707314 ],\n         [ 2.7484467 ,  1.9640365 ,  2.571441  ]],\n\n        ...,\n\n        [[ 1.639782  ,  1.8045892 ,  1.905209  ],\n         [ 1.9042168 ,  0.84424907,  2.5299163 ],\n         [ 1.9248763 ,  2.065254  ,  2.2932117 ],\n         ...,\n         [ 2.8779838 ,  1.6554171 ,  1.973181  ],\n         [ 1.7452347 ,  2.2037826 ,  0.9841608 ],\n         [ 2.5768256 ,  2.5755382 ,  1.589097  ]],\n\n        [[ 0.84064627,  2.0366187 ,  1.8258088 ],\n         [ 1.8945489 ,  2.364206  ,  2.0778902 ],\n         [ 1.4947422 ,  1.0394337 ,  3.2269232 ],\n         ...,\n         [ 2.6237442 ,  1.628478  ,  1.4932383 ],\n         [ 2.301512  ,  2.3566358 ,  2.6375968 ],\n         [ 2.0138235 ,  2.3782668 ,  2.0727115 ]],\n\n        [[ 1.2138972 ,  0.75897455,  2.395844  ],\n         [ 2.4278903 ,  2.1340597 ,  1.9615532 ],\n         [ 2.0332873 ,  1.4823809 ,  1.8087729 ],\n         ...,\n         [ 2.8198192 ,  2.2066557 ,  1.431545  ],\n         [ 1.6779033 ,  0.8364631 ,  1.5716189 ],\n         [ 1.6656086 ,  1.599615  ,  2.1591089 ]]],\n\n\n       [[[ 2.9561636 ,  1.4067445 ,  2.875751  ],\n         [ 2.2237213 ,  2.3006256 ,  1.5162505 ],\n         [ 1.2505383 ,  3.0237224 ,  2.5713227 ],\n         ...,\n         [ 2.4698634 ,  3.3603156 ,  2.76877   ],\n         [ 1.8984178 ,  2.875103  ,  1.7374765 ],\n         [ 1.3413665 ,  2.2279615 ,  3.802414  ]],\n\n        [[ 2.164624  ,  2.4495745 ,  1.5819842 ],\n         [ 1.6074834 ,  2.3000953 ,  2.45206   ],\n         [ 2.530328  ,  2.7881873 ,  2.030098  ],\n         ...,\n         [ 1.2534648 ,  2.1074815 ,  1.2285596 ],\n         [ 0.71998113,  2.45788   ,  3.228158  ],\n         [ 2.7311249 ,  2.7866375 ,  3.3237114 ]],\n\n        [[ 1.7089663 ,  2.6638594 ,  1.3702537 ],\n         [ 1.4760534 ,  2.1381178 ,  1.8445994 ],\n         [ 3.2073798 ,  1.0672891 ,  0.60988194],\n         ...,\n         [ 1.5134677 ,  1.427726  ,  2.6046927 ],\n         [ 1.9417007 ,  2.0221887 ,  2.3125122 ],\n         [ 2.0240555 ,  1.8510044 ,  2.9968698 ]],\n\n        ...,\n\n        [[ 2.04488   ,  0.81875193,  1.9849206 ],\n         [ 1.7986362 ,  1.6609902 ,  1.4869928 ],\n         [ 3.2826154 ,  1.6845556 ,  2.2070143 ],\n         ...,\n         [ 1.8944114 ,  3.3139658 ,  2.2806206 ],\n         [ 2.5440955 ,  1.7738932 ,  2.8987987 ],\n         [ 1.3994364 ,  1.5977423 ,  0.9034979 ]],\n\n        [[ 2.8394241 ,  1.8927431 ,  1.3170724 ],\n         [ 2.0554938 ,  2.0183501 ,  1.5725001 ],\n         [ 1.2567974 ,  2.1360202 ,  2.4618826 ],\n         ...,\n         [ 1.9021753 ,  2.4434228 ,  2.757001  ],\n         [ 3.4371557 ,  1.328862  ,  2.5771549 ],\n         [ 3.1281958 ,  2.5796516 ,  1.981126  ]],\n\n        [[ 1.2122092 ,  2.3268487 ,  1.0860889 ],\n         [ 2.0491152 ,  2.8940585 ,  3.3645868 ],\n         [ 3.0689838 ,  2.3758314 ,  1.993354  ],\n         ...,\n         [ 2.6650925 ,  1.9453506 ,  2.5910766 ],\n         [ 2.3948653 ,  2.3693752 ,  1.4632387 ],\n         [ 1.5699857 ,  0.7038886 ,  2.3385217 ]]],\n\n\n       ...,\n\n\n       [[[ 2.133351  ,  2.9112637 ,  3.514737  ],\n         [ 2.159036  ,  2.8678226 ,  2.6408842 ],\n         [ 2.693611  ,  3.2040496 ,  3.600308  ],\n         ...,\n         [ 3.2556417 ,  3.66411   ,  2.7129486 ],\n         [ 1.8104508 ,  3.7222455 ,  2.6152427 ],\n         [ 2.4480312 ,  3.4551306 ,  3.7167187 ]],\n\n        [[ 2.585147  ,  3.7375627 ,  4.1056757 ],\n         [ 3.1798077 ,  3.3353117 ,  2.4358728 ],\n         [ 2.0643985 ,  4.0653977 ,  2.797725  ],\n         ...,\n         [ 4.2800345 ,  1.7016767 ,  2.6506283 ],\n         [ 3.7269926 ,  2.853948  ,  2.7642348 ],\n         [ 3.8117502 ,  2.6626728 ,  1.922178  ]],\n\n        [[ 3.397069  ,  2.708927  ,  3.117707  ],\n         [ 3.115603  ,  4.059906  ,  2.6700246 ],\n         [ 3.4575226 ,  2.794404  ,  2.9959571 ],\n         ...,\n         [ 2.204744  ,  2.8954532 ,  3.2356863 ],\n         [ 3.084026  ,  2.3049998 ,  2.3416336 ],\n         [ 3.5212693 ,  3.2372155 ,  3.526419  ]],\n\n        ...,\n\n        [[ 2.9743264 ,  1.8696771 ,  2.4249887 ],\n         [ 1.7402868 ,  3.4761798 ,  2.6134655 ],\n         [ 3.465387  ,  3.1379347 ,  2.5152636 ],\n         ...,\n         [ 2.294911  ,  3.0608718 ,  2.2822855 ],\n         [ 2.8206162 ,  3.9880667 ,  4.3930354 ],\n         [ 3.5338957 ,  2.3747888 ,  1.6587371 ]],\n\n        [[ 3.3220472 ,  4.0950317 ,  2.720054  ],\n         [ 1.8698846 ,  3.3087637 ,  3.4307394 ],\n         [ 2.591937  ,  2.5250237 ,  3.0734487 ],\n         ...,\n         [ 2.5362313 ,  3.6236823 ,  3.1440315 ],\n         [ 2.7829552 ,  4.0664415 ,  3.1693177 ],\n         [ 2.1270928 ,  3.4147477 ,  2.047084  ]],\n\n        [[ 2.588348  ,  3.2197564 ,  3.1754682 ],\n         [ 3.148712  ,  1.4703188 ,  2.843345  ],\n         [ 2.775834  ,  3.4704523 ,  2.7645366 ],\n         ...,\n         [ 3.4483285 ,  3.0925398 ,  3.9102476 ],\n         [ 3.2748837 ,  3.4768956 ,  3.0124006 ],\n         [ 2.0330772 ,  2.0796087 ,  3.8685155 ]]],\n\n\n       [[[ 1.813372  ,  2.0463033 ,  1.8390411 ],\n         [-0.42093533,  1.2829227 ,  1.167974  ],\n         [ 2.8461835 ,  1.549377  ,  1.7910935 ],\n         ...,\n         [ 1.3973672 ,  1.7416483 ,  1.9508048 ],\n         [ 2.2414153 ,  1.5116042 ,  2.0889997 ],\n         [ 1.6873626 ,  2.0432293 ,  2.4808917 ]],\n\n        [[ 0.99996877,  2.346769  ,  1.2741195 ],\n         [ 1.8925518 ,  3.1848915 ,  2.0313866 ],\n         [ 2.1177046 ,  1.820466  ,  3.2030208 ],\n         ...,\n         [ 2.6280313 ,  2.540002  ,  1.5993326 ],\n         [ 1.6740515 ,  1.980628  ,  2.5009613 ],\n         [ 3.296722  ,  1.285049  ,  0.06768453]],\n\n        [[ 0.9248643 ,  1.2156669 ,  2.0129964 ],\n         [ 1.2122453 ,  2.5755942 ,  1.198735  ],\n         [ 2.4726765 ,  1.291342  ,  1.4535177 ],\n         ...,\n         [ 3.328178  ,  2.5405579 ,  1.6699535 ],\n         [ 1.2411047 ,  1.1718726 ,  2.3427694 ],\n         [ 2.4005244 ,  2.0190718 ,  2.3375578 ]],\n\n        ...,\n\n        [[ 1.4209566 ,  4.1400647 ,  1.5956382 ],\n         [ 1.4630346 ,  2.5790334 ,  2.294139  ],\n         [ 2.1583865 ,  1.7395163 ,  0.9216153 ],\n         ...,\n         [ 1.3431419 ,  2.11928   ,  1.921968  ],\n         [ 2.8646739 ,  2.05782   ,  2.2095668 ],\n         [ 3.10267   ,  2.2980888 ,  1.7781261 ]],\n\n        [[ 2.686347  ,  0.7224965 , -0.10304505],\n         [ 1.9019072 ,  1.2190937 ,  2.6023521 ],\n         [ 3.036936  ,  2.252345  ,  1.6832381 ],\n         ...,\n         [ 1.9899786 ,  1.4832567 ,  2.5285313 ],\n         [ 2.9735775 ,  3.0372205 ,  1.5110309 ],\n         [ 2.0285876 ,  1.7900743 ,  2.3049223 ]],\n\n        [[ 2.6765504 ,  0.9246281 ,  1.5122308 ],\n         [ 1.200513  ,  1.7433606 ,  3.608061  ],\n         [ 3.2255533 ,  2.1387427 ,  1.7411848 ],\n         ...,\n         [ 1.8172183 ,  2.9028559 ,  1.0611002 ],\n         [ 2.9898865 ,  1.3811538 ,  1.974997  ],\n         [ 2.3912761 ,  1.7898732 ,  1.9301382 ]]],\n\n\n       [[[ 0.12016978, -0.4406181 , -0.5703136 ],\n         [ 1.1281494 ,  0.286827  , -1.1252112 ],\n         [-0.14259143,  1.0662307 ,  1.4431276 ],\n         ...,\n         [-0.90516376, -0.99098176, -0.54418486],\n         [ 0.65499324, -1.2037511 ,  0.77935445],\n         [ 0.5110346 , -0.17695533, -0.24861358]],\n\n        [[-0.8201422 , -0.45930928, -0.18682714],\n         [ 0.15872593, -0.22796142,  0.44701216],\n         [ 0.56671953, -0.2307877 ,  0.8005802 ],\n         ...,\n         [ 0.04028257,  0.25274426, -0.12994887],\n         [-0.73202807, -0.61500746, -0.48494393],\n         [-0.73349136,  0.40366635,  1.1806954 ]],\n\n        [[-0.4658495 , -0.7501582 , -0.3600268 ],\n         [ 1.2091229 ,  0.48093888, -0.3873696 ],\n         [ 0.0478309 ,  0.12294687, -0.8590552 ],\n         ...,\n         [-0.7490365 ,  0.8265392 , -0.66832995],\n         [ 0.33897588,  0.17473158, -0.09506743],\n         [ 0.6026239 ,  0.6307816 ,  0.00733469]],\n\n        ...,\n\n        [[ 0.28626093,  0.72461843, -0.19679646],\n         [ 1.1816903 , -0.27339858, -0.10587237],\n         [ 0.03190564, -0.73350966,  2.0803287 ],\n         ...,\n         [ 1.0570846 ,  0.16037081, -0.2772735 ],\n         [ 0.9155587 ,  0.11430386, -0.05402425],\n         [-0.28485918,  0.12279217, -0.6862815 ]],\n\n        [[ 0.8752387 ,  0.28174397,  1.4621859 ],\n         [ 0.46772015, -1.0921957 , -0.94882953],\n         [-0.42488745,  0.09508519, -0.5916203 ],\n         ...,\n         [-0.03201782,  0.25263813,  0.31954217],\n         [-0.5632773 , -0.3699506 ,  1.0168872 ],\n         [ 0.45363498,  1.6664041 ,  0.03829203]],\n\n        [[-0.28144735,  2.2870908 , -0.7445947 ],\n         [ 0.258733  , -0.64207816,  0.3190158 ],\n         [ 0.3705771 , -0.29427874,  0.65889186],\n         ...,\n         [-0.5516528 , -0.07284921, -0.3941531 ],\n         [ 0.19864997,  0.4731762 , -0.8981362 ],\n         [-0.07196806,  0.8258007 , -0.49707863]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [1., 0., 0., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.437851, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x127896c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x127896820>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.3775365138053894, 0.995]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x127387fa0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.32520196, 1.0], [0.23061776, 1.0], [0.33953065, 1.0], [0.29735208, 1.0], [0.35142094, 1.0], [0.35511887, 1.0], [0.33469003, 1.0], [0.27872166, 1.0], [0.3077587, 1.0], [0.36521313, 1.0], [0.3727312, 1.0], [0.27862066, 1.0], [0.33280557, 1.0]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 4.22110260e-01, -1.35397419e-01,  6.18485093e-01],\n         [ 1.53742358e-01, -1.83492780e-01,  1.39562324e-01],\n         [ 7.06021309e-01, -5.51573038e-01, -2.38537639e-01],\n         ...,\n         [ 1.19998491e+00, -9.81745869e-02,  1.31660208e-01],\n         [ 4.06242996e-01, -1.34594917e-01, -5.68531871e-01],\n         [-5.90379894e-01, -8.09052050e-01,  6.53234899e-01]],\n\n        [[ 1.36171475e-01, -7.37624466e-01, -1.03958654e+00],\n         [ 1.39892411e+00, -5.57914078e-01,  7.67120242e-01],\n         [ 5.34032226e-01, -5.43407261e-01, -3.31714809e-01],\n         ...,\n         [-6.00209832e-01,  7.87872374e-01,  6.60523593e-01],\n         [ 7.95443654e-01,  1.02051759e+00, -2.55885601e-01],\n         [-8.99916664e-02,  3.77376258e-01, -7.11182117e-01]],\n\n        [[ 8.70628119e-01, -4.19743583e-02, -8.77619863e-01],\n         [-7.59846628e-01,  8.17185402e-01, -9.67524469e-01],\n         [ 9.19504225e-01,  1.09339051e-01, -2.52912819e-01],\n         ...,\n         [-1.08469695e-01, -9.60630417e-01,  1.49436146e-01],\n         [-1.13497622e-01, -4.18866463e-02,  7.25466385e-02],\n         [-3.59948337e-01,  2.47983843e-01, -2.89033026e-01]],\n\n        ...,\n\n        [[-2.17913330e-01, -6.34643793e-01, -1.03793241e-01],\n         [ 9.57078397e-01, -4.67912525e-01, -8.16050351e-01],\n         [-4.55174446e-01,  6.99221134e-01, -3.87060136e-01],\n         ...,\n         [-1.28484499e+00, -5.27086377e-01, -2.08185375e-01],\n         [ 7.42970526e-01, -1.10644972e+00,  6.88072264e-01],\n         [-1.77593485e-01,  7.39558876e-01, -1.69986367e-01]],\n\n        [[ 5.11478126e-01, -1.65995613e-01,  6.49167523e-02],\n         [-8.73918593e-01, -9.92828369e-01,  3.72834444e-01],\n         [ 3.47572833e-01, -2.12327152e-01,  5.50644815e-01],\n         ...,\n         [ 7.88978875e-01, -6.28214657e-01,  1.15234828e+00],\n         [ 1.83136255e-01,  6.57927036e-01,  6.87304378e-01],\n         [ 2.25387549e+00, -5.54337382e-01, -2.83591032e-01]],\n\n        [[ 7.72436559e-01, -1.01076710e+00,  6.17375970e-01],\n         [-3.59225483e-03, -4.36158001e-01,  8.26016843e-01],\n         [ 4.34527516e-01, -1.49447739e-01, -6.26865923e-01],\n         ...,\n         [-1.88164324e-01,  4.97202277e-01,  2.75098860e-01],\n         [ 1.09357190e+00,  5.68924025e-02,  9.97636020e-01],\n         [ 7.64527917e-01, -1.83725044e-01,  9.13575113e-01]]],\n\n\n       [[[ 3.38525891e+00,  2.20436978e+00,  4.28880787e+00],\n         [ 3.12850785e+00,  3.97838569e+00,  2.91610289e+00],\n         [ 2.56286073e+00,  2.52511001e+00,  2.62416005e+00],\n         ...,\n         [ 3.31585336e+00,  3.63459945e+00,  2.81839061e+00],\n         [ 2.72937346e+00,  2.62558603e+00,  2.11211371e+00],\n         [ 2.74161100e+00,  3.33665109e+00,  2.40392900e+00]],\n\n        [[ 2.72678685e+00,  2.57493663e+00,  2.95707893e+00],\n         [ 2.72134638e+00,  1.93829727e+00,  4.01617622e+00],\n         [ 2.52550745e+00,  3.20577693e+00,  4.17902136e+00],\n         ...,\n         [ 2.71445584e+00,  3.29050183e+00,  4.49562693e+00],\n         [ 3.95624948e+00,  2.48723626e+00,  3.76395130e+00],\n         [ 2.38662434e+00,  2.88997149e+00,  3.12312150e+00]],\n\n        [[ 1.24205112e+00,  2.77028990e+00,  2.41250157e+00],\n         [ 2.90267086e+00,  3.59579134e+00,  3.43326402e+00],\n         [ 1.76795816e+00,  1.18908918e+00,  3.25517917e+00],\n         ...,\n         [ 3.30812192e+00,  3.26191902e+00,  3.32396865e+00],\n         [ 8.71677756e-01,  3.65738678e+00,  1.72998583e+00],\n         [ 2.95626020e+00,  3.81703186e+00,  3.15085244e+00]],\n\n        ...,\n\n        [[ 4.17489719e+00,  2.33891988e+00,  2.92712522e+00],\n         [ 2.69302773e+00,  1.61550856e+00,  4.69809294e+00],\n         [ 2.97356892e+00,  1.74852073e+00,  3.95764709e+00],\n         ...,\n         [ 3.73142099e+00,  1.79315388e+00,  3.00032687e+00],\n         [ 4.46194506e+00,  3.71113539e+00,  3.61032414e+00],\n         [ 3.55141425e+00,  3.27271366e+00,  2.52035928e+00]],\n\n        [[ 3.06351638e+00,  3.95247841e+00,  3.91908503e+00],\n         [ 2.59749413e+00,  2.27596712e+00,  3.88515472e+00],\n         [ 2.68226814e+00,  4.09816170e+00,  2.49216270e+00],\n         ...,\n         [ 3.40539622e+00,  2.27047992e+00,  3.99033022e+00],\n         [ 2.65534711e+00,  3.44821000e+00,  2.82559085e+00],\n         [ 2.28707242e+00,  3.60599208e+00,  2.27265573e+00]],\n\n        [[ 4.28917503e+00,  2.51754618e+00,  2.46978903e+00],\n         [ 2.32113600e+00,  2.46295857e+00,  2.31789255e+00],\n         [ 4.27758169e+00,  2.79999661e+00,  3.68376255e+00],\n         ...,\n         [ 2.73628020e+00,  4.28201008e+00,  2.44430566e+00],\n         [ 4.27601051e+00,  2.59468317e+00,  1.87997568e+00],\n         [ 2.40542197e+00,  2.94530749e+00,  2.17664862e+00]]],\n\n\n       [[[-4.82544094e-01,  1.37926012e-01, -3.24819945e-02],\n         [ 7.68754900e-01,  1.97525179e+00, -2.21337110e-01],\n         [ 2.71075517e-01, -3.14272910e-01,  1.14166439e+00],\n         ...,\n         [ 1.33702099e+00,  1.24304748e+00,  1.86158621e+00],\n         [ 2.29157135e-01,  1.46763563e+00,  5.63884266e-02],\n         [-1.24289870e-01,  8.06700945e-01,  8.32484543e-01]],\n\n        [[ 8.62220407e-01,  7.40745187e-01,  1.69831610e+00],\n         [ 2.31390762e+00,  2.02790809e+00,  1.15754926e+00],\n         [ 1.90597725e+00,  1.00856733e+00,  5.61657250e-01],\n         ...,\n         [-2.10171252e-01,  7.71601140e-01,  4.72614706e-01],\n         [ 7.64424145e-01,  1.03067756e+00,  1.56817448e+00],\n         [ 2.39540219e+00,  4.58024651e-01,  1.56525445e+00]],\n\n        [[ 2.07784510e+00,  1.87840414e+00,  3.09572268e+00],\n         [ 8.24109077e-01,  1.07983029e+00,  1.76573074e+00],\n         [ 1.61542928e+00, -1.97736975e-02,  4.06991184e-01],\n         ...,\n         [ 3.27355057e-01,  1.96225464e+00, -1.92754447e-01],\n         [ 8.78149629e-01,  9.88438725e-01,  9.54802454e-01],\n         [ 1.01406717e+00,  6.84350729e-01,  6.04652464e-01]],\n\n        ...,\n\n        [[ 7.93002009e-01,  6.36520088e-01,  1.81723130e+00],\n         [ 1.70944679e+00,  3.20199460e-01, -6.31492496e-01],\n         [ 8.13003242e-01,  1.12949336e+00,  1.25753236e+00],\n         ...,\n         [ 1.71933556e+00,  8.56361687e-01,  5.01634836e-01],\n         [ 1.27116001e+00, -1.10191393e+00,  1.00915265e+00],\n         [ 1.95263505e+00,  1.85418427e+00,  7.91254163e-01]],\n\n        [[ 1.92623878e+00,  1.41067421e+00,  5.84322512e-01],\n         [-1.17341805e+00,  1.65862703e+00,  1.75718105e+00],\n         [ 9.11733925e-01,  2.76240158e+00,  3.76931399e-01],\n         ...,\n         [-3.79428148e-01,  1.71694922e+00,  1.35448003e+00],\n         [ 1.60083151e+00,  4.37318802e-01,  2.17475557e+00],\n         [ 2.90784836e+00,  1.55789122e-01,  1.57150614e+00]],\n\n        [[ 1.23973191e+00, -4.20942485e-01,  8.73208523e-01],\n         [ 1.74336910e+00,  1.45928466e+00,  1.20258641e+00],\n         [ 2.83678889e-01, -5.90076327e-01,  1.11653376e+00],\n         ...,\n         [ 1.54897285e+00, -3.88675272e-01,  1.77014148e+00],\n         [-2.33839288e-01,  8.26082408e-01,  1.66845274e+00],\n         [-3.60953599e-01,  9.24968243e-01,  8.08469832e-01]]],\n\n\n       ...,\n\n\n       [[[ 2.13335109e+00,  2.91126370e+00,  3.51473689e+00],\n         [ 2.15903592e+00,  2.86782265e+00,  2.64088416e+00],\n         [ 2.69361091e+00,  3.20404959e+00,  3.60030794e+00],\n         ...,\n         [ 3.25564170e+00,  3.66410995e+00,  2.71294856e+00],\n         [ 1.81045079e+00,  3.72224545e+00,  2.61524272e+00],\n         [ 2.44803119e+00,  3.45513058e+00,  3.71671867e+00]],\n\n        [[ 2.58514690e+00,  3.73756266e+00,  4.10567570e+00],\n         [ 3.17980766e+00,  3.33531165e+00,  2.43587279e+00],\n         [ 2.06439853e+00,  4.06539774e+00,  2.79772496e+00],\n         ...,\n         [ 4.28003454e+00,  1.70167673e+00,  2.65062833e+00],\n         [ 3.72699261e+00,  2.85394812e+00,  2.76423478e+00],\n         [ 3.81175017e+00,  2.66267276e+00,  1.92217803e+00]],\n\n        [[ 3.39706898e+00,  2.70892692e+00,  3.11770701e+00],\n         [ 3.11560297e+00,  4.05990601e+00,  2.67002463e+00],\n         [ 3.45752263e+00,  2.79440403e+00,  2.99595714e+00],\n         ...,\n         [ 2.20474410e+00,  2.89545321e+00,  3.23568630e+00],\n         [ 3.08402610e+00,  2.30499983e+00,  2.34163356e+00],\n         [ 3.52126932e+00,  3.23721552e+00,  3.52641892e+00]],\n\n        ...,\n\n        [[ 2.97432637e+00,  1.86967707e+00,  2.42498875e+00],\n         [ 1.74028683e+00,  3.47617984e+00,  2.61346555e+00],\n         [ 3.46538711e+00,  3.13793468e+00,  2.51526356e+00],\n         ...,\n         [ 2.29491091e+00,  3.06087184e+00,  2.28228545e+00],\n         [ 2.82061625e+00,  3.98806667e+00,  4.39303541e+00],\n         [ 3.53389573e+00,  2.37478876e+00,  1.65873706e+00]],\n\n        [[ 3.32204723e+00,  4.09503174e+00,  2.72005391e+00],\n         [ 1.86988461e+00,  3.30876374e+00,  3.43073940e+00],\n         [ 2.59193707e+00,  2.52502370e+00,  3.07344866e+00],\n         ...,\n         [ 2.53623128e+00,  3.62368226e+00,  3.14403152e+00],\n         [ 2.78295517e+00,  4.06644154e+00,  3.16931772e+00],\n         [ 2.12709284e+00,  3.41474771e+00,  2.04708409e+00]],\n\n        [[ 2.58834791e+00,  3.21975636e+00,  3.17546821e+00],\n         [ 3.14871192e+00,  1.47031879e+00,  2.84334493e+00],\n         [ 2.77583408e+00,  3.47045231e+00,  2.76453662e+00],\n         ...,\n         [ 3.44832850e+00,  3.09253979e+00,  3.91024756e+00],\n         [ 3.27488375e+00,  3.47689557e+00,  3.01240063e+00],\n         [ 2.03307724e+00,  2.07960868e+00,  3.86851549e+00]]],\n\n\n       [[[ 6.98340416e-01,  1.50020278e+00,  1.80649948e+00],\n         [ 2.86969519e+00,  1.44066393e+00,  1.48201227e+00],\n         [ 1.29717171e+00,  2.08287215e+00,  1.76108789e+00],\n         ...,\n         [ 1.58746994e+00,  2.99008250e+00,  1.87615061e+00],\n         [ 1.84184706e+00,  1.26602066e+00,  1.90922606e+00],\n         [ 1.36898220e+00,  1.63563013e+00,  1.95291901e+00]],\n\n        [[ 1.92989135e+00,  5.91898620e-01,  1.96573424e+00],\n         [ 1.23400736e+00,  9.61482406e-01,  1.12923837e+00],\n         [ 2.45806170e+00,  2.42919326e+00,  2.69858813e+00],\n         ...,\n         [ 2.31457758e+00,  1.14322078e+00,  1.39117801e+00],\n         [ 1.22595882e+00,  1.72601533e+00,  1.60316038e+00],\n         [ 1.37265098e+00,  1.92515969e+00,  8.80480826e-01]],\n\n        [[ 1.73949552e+00,  2.10610533e+00,  9.17678833e-01],\n         [ 1.50713301e+00,  2.82324505e+00,  2.99304748e+00],\n         [ 1.24064326e+00,  8.95569086e-01,  1.15878308e+00],\n         ...,\n         [ 1.85875690e+00,  2.81375790e+00,  1.99363863e+00],\n         [ 2.53296638e+00,  1.72679830e+00,  2.48892736e+00],\n         [ 1.71446681e+00,  1.26288533e+00,  1.72450054e+00]],\n\n        ...,\n\n        [[ 1.98710918e-01,  1.08277118e+00,  9.32370007e-01],\n         [ 2.36666083e+00,  2.25669265e+00,  5.30051470e-01],\n         [ 9.28028822e-01,  7.41010606e-01,  2.21268892e+00],\n         ...,\n         [ 1.56579995e+00,  1.58371460e+00,  3.59090358e-01],\n         [ 1.63834536e+00,  5.11564255e-01,  1.96178377e+00],\n         [ 2.20589185e+00,  2.54398656e+00,  2.63711190e+00]],\n\n        [[ 2.08369446e+00,  5.76720238e-01,  1.17572343e+00],\n         [ 1.54788029e+00,  1.34664214e+00,  2.55979586e+00],\n         [ 2.60714483e+00,  2.35552359e+00,  1.98626912e+00],\n         ...,\n         [ 1.61425090e+00,  2.75792742e+00,  8.89959157e-01],\n         [ 2.21123600e+00,  2.01794243e+00,  3.12941051e+00],\n         [ 2.41995788e+00,  2.26011801e+00,  1.28336644e+00]],\n\n        [[ 1.93388093e+00,  2.31614637e+00,  1.85709620e+00],\n         [ 2.52478981e+00,  1.08818913e+00,  3.34428835e+00],\n         [ 2.68314600e+00,  1.97166324e+00,  3.06040406e+00],\n         ...,\n         [ 1.15524745e+00,  1.84118557e+00,  2.25712872e+00],\n         [ 1.63706505e+00,  7.57834077e-01,  2.70180130e+00],\n         [ 1.92096543e+00,  1.32750368e+00,  2.11210918e+00]]],\n\n\n       [[[ 9.29760396e-01,  7.26414382e-01,  1.61432338e+00],\n         [ 1.61841261e+00,  3.04894924e-01,  1.44651639e+00],\n         [ 1.47589409e+00,  7.70992458e-01,  1.28475118e+00],\n         ...,\n         [ 1.24438025e-01,  3.88193130e-01,  2.03628707e+00],\n         [ 1.17680454e+00,  6.30483031e-01,  1.36320734e+00],\n         [ 3.65548283e-01,  1.46917164e+00,  7.03668177e-01]],\n\n        [[ 1.45963383e+00,  9.97301638e-01,  1.34942985e+00],\n         [ 5.70216700e-02,  7.65841007e-01,  2.05135250e+00],\n         [ 5.36151290e-01,  5.69974124e-01,  1.08153796e+00],\n         ...,\n         [ 1.98117745e+00,  1.75906360e+00,  2.53355473e-01],\n         [ 1.62892485e+00,  2.43885493e+00,  1.59175324e+00],\n         [ 8.73761531e-03,  1.62424791e+00,  1.08635569e+00]],\n\n        [[ 2.21138191e+00,  1.75682259e+00,  2.94135332e-01],\n         [ 1.85680175e+00, -1.48519039e-01,  2.21848679e+00],\n         [ 1.43649065e+00,  1.57105601e+00,  2.19859004e+00],\n         ...,\n         [ 7.03838885e-01,  3.55299652e-01,  5.09380102e-01],\n         [ 9.82326567e-01,  3.87295723e-01,  1.43751228e+00],\n         [ 1.74298513e+00,  1.14750063e+00,  7.73142338e-01]],\n\n        ...,\n\n        [[ 6.01515353e-01,  1.95025349e+00,  1.63592517e+00],\n         [ 1.07607830e+00,  1.33906817e+00,  7.67778277e-01],\n         [ 1.43609083e+00,  1.52271736e+00,  1.16866624e+00],\n         ...,\n         [-3.72595370e-01,  3.34490329e-01,  1.52263796e+00],\n         [ 2.70697743e-01,  8.32292140e-01,  2.99132973e-01],\n         [ 7.16751277e-01,  1.20728457e+00,  3.65730077e-01]],\n\n        [[ 1.88797247e+00,  1.08339512e+00,  1.67564857e+00],\n         [ 6.08760297e-01,  1.22961140e+00,  7.10184813e-01],\n         [ 1.35302007e+00,  2.17639476e-01,  1.22796428e+00],\n         ...,\n         [ 5.60129404e-01,  8.59580040e-01,  2.07771087e+00],\n         [ 1.65182149e+00,  1.85034478e+00, -8.06953683e-02],\n         [ 1.50029778e+00,  1.90175891e+00,  1.55336332e+00]],\n\n        [[ 4.38534945e-01,  1.93321681e+00,  1.93826568e+00],\n         [ 1.41543674e+00,  7.34539747e-01,  6.54654562e-01],\n         [ 1.61332786e+00,  1.60799122e+00,  3.25660139e-01],\n         ...,\n         [-1.07728489e-01,  1.46802294e+00,  1.38846052e+00],\n         [ 1.18776250e+00,  1.87629998e+00,  1.58768189e+00],\n         [ 7.76845336e-01,  9.66810226e-01,  1.74295115e+00]]]],\n      dtype=float32), array([[1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 4.22110260e-01, -1.35397419e-01,  6.18485093e-01],\n         [ 1.53742358e-01, -1.83492780e-01,  1.39562324e-01],\n         [ 7.06021309e-01, -5.51573038e-01, -2.38537639e-01],\n         ...,\n         [ 1.19998491e+00, -9.81745869e-02,  1.31660208e-01],\n         [ 4.06242996e-01, -1.34594917e-01, -5.68531871e-01],\n         [-5.90379894e-01, -8.09052050e-01,  6.53234899e-01]],\n\n        [[ 1.36171475e-01, -7.37624466e-01, -1.03958654e+00],\n         [ 1.39892411e+00, -5.57914078e-01,  7.67120242e-01],\n         [ 5.34032226e-01, -5.43407261e-01, -3.31714809e-01],\n         ...,\n         [-6.00209832e-01,  7.87872374e-01,  6.60523593e-01],\n         [ 7.95443654e-01,  1.02051759e+00, -2.55885601e-01],\n         [-8.99916664e-02,  3.77376258e-01, -7.11182117e-01]],\n\n        [[ 8.70628119e-01, -4.19743583e-02, -8.77619863e-01],\n         [-7.59846628e-01,  8.17185402e-01, -9.67524469e-01],\n         [ 9.19504225e-01,  1.09339051e-01, -2.52912819e-01],\n         ...,\n         [-1.08469695e-01, -9.60630417e-01,  1.49436146e-01],\n         [-1.13497622e-01, -4.18866463e-02,  7.25466385e-02],\n         [-3.59948337e-01,  2.47983843e-01, -2.89033026e-01]],\n\n        ...,\n\n        [[-2.17913330e-01, -6.34643793e-01, -1.03793241e-01],\n         [ 9.57078397e-01, -4.67912525e-01, -8.16050351e-01],\n         [-4.55174446e-01,  6.99221134e-01, -3.87060136e-01],\n         ...,\n         [-1.28484499e+00, -5.27086377e-01, -2.08185375e-01],\n         [ 7.42970526e-01, -1.10644972e+00,  6.88072264e-01],\n         [-1.77593485e-01,  7.39558876e-01, -1.69986367e-01]],\n\n        [[ 5.11478126e-01, -1.65995613e-01,  6.49167523e-02],\n         [-8.73918593e-01, -9.92828369e-01,  3.72834444e-01],\n         [ 3.47572833e-01, -2.12327152e-01,  5.50644815e-01],\n         ...,\n         [ 7.88978875e-01, -6.28214657e-01,  1.15234828e+00],\n         [ 1.83136255e-01,  6.57927036e-01,  6.87304378e-01],\n         [ 2.25387549e+00, -5.54337382e-01, -2.83591032e-01]],\n\n        [[ 7.72436559e-01, -1.01076710e+00,  6.17375970e-01],\n         [-3.59225483e-03, -4.36158001e-01,  8.26016843e-01],\n         [ 4.34527516e-01, -1.49447739e-01, -6.26865923e-01],\n         ...,\n         [-1.88164324e-01,  4.97202277e-01,  2.75098860e-01],\n         [ 1.09357190e+00,  5.68924025e-02,  9.97636020e-01],\n         [ 7.64527917e-01, -1.83725044e-01,  9.13575113e-01]]],\n\n\n       [[[ 3.38525891e+00,  2.20436978e+00,  4.28880787e+00],\n         [ 3.12850785e+00,  3.97838569e+00,  2.91610289e+00],\n         [ 2.56286073e+00,  2.52511001e+00,  2.62416005e+00],\n         ...,\n         [ 3.31585336e+00,  3.63459945e+00,  2.81839061e+00],\n         [ 2.72937346e+00,  2.62558603e+00,  2.11211371e+00],\n         [ 2.74161100e+00,  3.33665109e+00,  2.40392900e+00]],\n\n        [[ 2.72678685e+00,  2.57493663e+00,  2.95707893e+00],\n         [ 2.72134638e+00,  1.93829727e+00,  4.01617622e+00],\n         [ 2.52550745e+00,  3.20577693e+00,  4.17902136e+00],\n         ...,\n         [ 2.71445584e+00,  3.29050183e+00,  4.49562693e+00],\n         [ 3.95624948e+00,  2.48723626e+00,  3.76395130e+00],\n         [ 2.38662434e+00,  2.88997149e+00,  3.12312150e+00]],\n\n        [[ 1.24205112e+00,  2.77028990e+00,  2.41250157e+00],\n         [ 2.90267086e+00,  3.59579134e+00,  3.43326402e+00],\n         [ 1.76795816e+00,  1.18908918e+00,  3.25517917e+00],\n         ...,\n         [ 3.30812192e+00,  3.26191902e+00,  3.32396865e+00],\n         [ 8.71677756e-01,  3.65738678e+00,  1.72998583e+00],\n         [ 2.95626020e+00,  3.81703186e+00,  3.15085244e+00]],\n\n        ...,\n\n        [[ 4.17489719e+00,  2.33891988e+00,  2.92712522e+00],\n         [ 2.69302773e+00,  1.61550856e+00,  4.69809294e+00],\n         [ 2.97356892e+00,  1.74852073e+00,  3.95764709e+00],\n         ...,\n         [ 3.73142099e+00,  1.79315388e+00,  3.00032687e+00],\n         [ 4.46194506e+00,  3.71113539e+00,  3.61032414e+00],\n         [ 3.55141425e+00,  3.27271366e+00,  2.52035928e+00]],\n\n        [[ 3.06351638e+00,  3.95247841e+00,  3.91908503e+00],\n         [ 2.59749413e+00,  2.27596712e+00,  3.88515472e+00],\n         [ 2.68226814e+00,  4.09816170e+00,  2.49216270e+00],\n         ...,\n         [ 3.40539622e+00,  2.27047992e+00,  3.99033022e+00],\n         [ 2.65534711e+00,  3.44821000e+00,  2.82559085e+00],\n         [ 2.28707242e+00,  3.60599208e+00,  2.27265573e+00]],\n\n        [[ 4.28917503e+00,  2.51754618e+00,  2.46978903e+00],\n         [ 2.32113600e+00,  2.46295857e+00,  2.31789255e+00],\n         [ 4.27758169e+00,  2.79999661e+00,  3.68376255e+00],\n         ...,\n         [ 2.73628020e+00,  4.28201008e+00,  2.44430566e+00],\n         [ 4.27601051e+00,  2.59468317e+00,  1.87997568e+00],\n         [ 2.40542197e+00,  2.94530749e+00,  2.17664862e+00]]],\n\n\n       [[[-4.82544094e-01,  1.37926012e-01, -3.24819945e-02],\n         [ 7.68754900e-01,  1.97525179e+00, -2.21337110e-01],\n         [ 2.71075517e-01, -3.14272910e-01,  1.14166439e+00],\n         ...,\n         [ 1.33702099e+00,  1.24304748e+00,  1.86158621e+00],\n         [ 2.29157135e-01,  1.46763563e+00,  5.63884266e-02],\n         [-1.24289870e-01,  8.06700945e-01,  8.32484543e-01]],\n\n        [[ 8.62220407e-01,  7.40745187e-01,  1.69831610e+00],\n         [ 2.31390762e+00,  2.02790809e+00,  1.15754926e+00],\n         [ 1.90597725e+00,  1.00856733e+00,  5.61657250e-01],\n         ...,\n         [-2.10171252e-01,  7.71601140e-01,  4.72614706e-01],\n         [ 7.64424145e-01,  1.03067756e+00,  1.56817448e+00],\n         [ 2.39540219e+00,  4.58024651e-01,  1.56525445e+00]],\n\n        [[ 2.07784510e+00,  1.87840414e+00,  3.09572268e+00],\n         [ 8.24109077e-01,  1.07983029e+00,  1.76573074e+00],\n         [ 1.61542928e+00, -1.97736975e-02,  4.06991184e-01],\n         ...,\n         [ 3.27355057e-01,  1.96225464e+00, -1.92754447e-01],\n         [ 8.78149629e-01,  9.88438725e-01,  9.54802454e-01],\n         [ 1.01406717e+00,  6.84350729e-01,  6.04652464e-01]],\n\n        ...,\n\n        [[ 7.93002009e-01,  6.36520088e-01,  1.81723130e+00],\n         [ 1.70944679e+00,  3.20199460e-01, -6.31492496e-01],\n         [ 8.13003242e-01,  1.12949336e+00,  1.25753236e+00],\n         ...,\n         [ 1.71933556e+00,  8.56361687e-01,  5.01634836e-01],\n         [ 1.27116001e+00, -1.10191393e+00,  1.00915265e+00],\n         [ 1.95263505e+00,  1.85418427e+00,  7.91254163e-01]],\n\n        [[ 1.92623878e+00,  1.41067421e+00,  5.84322512e-01],\n         [-1.17341805e+00,  1.65862703e+00,  1.75718105e+00],\n         [ 9.11733925e-01,  2.76240158e+00,  3.76931399e-01],\n         ...,\n         [-3.79428148e-01,  1.71694922e+00,  1.35448003e+00],\n         [ 1.60083151e+00,  4.37318802e-01,  2.17475557e+00],\n         [ 2.90784836e+00,  1.55789122e-01,  1.57150614e+00]],\n\n        [[ 1.23973191e+00, -4.20942485e-01,  8.73208523e-01],\n         [ 1.74336910e+00,  1.45928466e+00,  1.20258641e+00],\n         [ 2.83678889e-01, -5.90076327e-01,  1.11653376e+00],\n         ...,\n         [ 1.54897285e+00, -3.88675272e-01,  1.77014148e+00],\n         [-2.33839288e-01,  8.26082408e-01,  1.66845274e+00],\n         [-3.60953599e-01,  9.24968243e-01,  8.08469832e-01]]],\n\n\n       ...,\n\n\n       [[[ 2.13335109e+00,  2.91126370e+00,  3.51473689e+00],\n         [ 2.15903592e+00,  2.86782265e+00,  2.64088416e+00],\n         [ 2.69361091e+00,  3.20404959e+00,  3.60030794e+00],\n         ...,\n         [ 3.25564170e+00,  3.66410995e+00,  2.71294856e+00],\n         [ 1.81045079e+00,  3.72224545e+00,  2.61524272e+00],\n         [ 2.44803119e+00,  3.45513058e+00,  3.71671867e+00]],\n\n        [[ 2.58514690e+00,  3.73756266e+00,  4.10567570e+00],\n         [ 3.17980766e+00,  3.33531165e+00,  2.43587279e+00],\n         [ 2.06439853e+00,  4.06539774e+00,  2.79772496e+00],\n         ...,\n         [ 4.28003454e+00,  1.70167673e+00,  2.65062833e+00],\n         [ 3.72699261e+00,  2.85394812e+00,  2.76423478e+00],\n         [ 3.81175017e+00,  2.66267276e+00,  1.92217803e+00]],\n\n        [[ 3.39706898e+00,  2.70892692e+00,  3.11770701e+00],\n         [ 3.11560297e+00,  4.05990601e+00,  2.67002463e+00],\n         [ 3.45752263e+00,  2.79440403e+00,  2.99595714e+00],\n         ...,\n         [ 2.20474410e+00,  2.89545321e+00,  3.23568630e+00],\n         [ 3.08402610e+00,  2.30499983e+00,  2.34163356e+00],\n         [ 3.52126932e+00,  3.23721552e+00,  3.52641892e+00]],\n\n        ...,\n\n        [[ 2.97432637e+00,  1.86967707e+00,  2.42498875e+00],\n         [ 1.74028683e+00,  3.47617984e+00,  2.61346555e+00],\n         [ 3.46538711e+00,  3.13793468e+00,  2.51526356e+00],\n         ...,\n         [ 2.29491091e+00,  3.06087184e+00,  2.28228545e+00],\n         [ 2.82061625e+00,  3.98806667e+00,  4.39303541e+00],\n         [ 3.53389573e+00,  2.37478876e+00,  1.65873706e+00]],\n\n        [[ 3.32204723e+00,  4.09503174e+00,  2.72005391e+00],\n         [ 1.86988461e+00,  3.30876374e+00,  3.43073940e+00],\n         [ 2.59193707e+00,  2.52502370e+00,  3.07344866e+00],\n         ...,\n         [ 2.53623128e+00,  3.62368226e+00,  3.14403152e+00],\n         [ 2.78295517e+00,  4.06644154e+00,  3.16931772e+00],\n         [ 2.12709284e+00,  3.41474771e+00,  2.04708409e+00]],\n\n        [[ 2.58834791e+00,  3.21975636e+00,  3.17546821e+00],\n         [ 3.14871192e+00,  1.47031879e+00,  2.84334493e+00],\n         [ 2.77583408e+00,  3.47045231e+00,  2.76453662e+00],\n         ...,\n         [ 3.44832850e+00,  3.09253979e+00,  3.91024756e+00],\n         [ 3.27488375e+00,  3.47689557e+00,  3.01240063e+00],\n         [ 2.03307724e+00,  2.07960868e+00,  3.86851549e+00]]],\n\n\n       [[[ 6.98340416e-01,  1.50020278e+00,  1.80649948e+00],\n         [ 2.86969519e+00,  1.44066393e+00,  1.48201227e+00],\n         [ 1.29717171e+00,  2.08287215e+00,  1.76108789e+00],\n         ...,\n         [ 1.58746994e+00,  2.99008250e+00,  1.87615061e+00],\n         [ 1.84184706e+00,  1.26602066e+00,  1.90922606e+00],\n         [ 1.36898220e+00,  1.63563013e+00,  1.95291901e+00]],\n\n        [[ 1.92989135e+00,  5.91898620e-01,  1.96573424e+00],\n         [ 1.23400736e+00,  9.61482406e-01,  1.12923837e+00],\n         [ 2.45806170e+00,  2.42919326e+00,  2.69858813e+00],\n         ...,\n         [ 2.31457758e+00,  1.14322078e+00,  1.39117801e+00],\n         [ 1.22595882e+00,  1.72601533e+00,  1.60316038e+00],\n         [ 1.37265098e+00,  1.92515969e+00,  8.80480826e-01]],\n\n        [[ 1.73949552e+00,  2.10610533e+00,  9.17678833e-01],\n         [ 1.50713301e+00,  2.82324505e+00,  2.99304748e+00],\n         [ 1.24064326e+00,  8.95569086e-01,  1.15878308e+00],\n         ...,\n         [ 1.85875690e+00,  2.81375790e+00,  1.99363863e+00],\n         [ 2.53296638e+00,  1.72679830e+00,  2.48892736e+00],\n         [ 1.71446681e+00,  1.26288533e+00,  1.72450054e+00]],\n\n        ...,\n\n        [[ 1.98710918e-01,  1.08277118e+00,  9.32370007e-01],\n         [ 2.36666083e+00,  2.25669265e+00,  5.30051470e-01],\n         [ 9.28028822e-01,  7.41010606e-01,  2.21268892e+00],\n         ...,\n         [ 1.56579995e+00,  1.58371460e+00,  3.59090358e-01],\n         [ 1.63834536e+00,  5.11564255e-01,  1.96178377e+00],\n         [ 2.20589185e+00,  2.54398656e+00,  2.63711190e+00]],\n\n        [[ 2.08369446e+00,  5.76720238e-01,  1.17572343e+00],\n         [ 1.54788029e+00,  1.34664214e+00,  2.55979586e+00],\n         [ 2.60714483e+00,  2.35552359e+00,  1.98626912e+00],\n         ...,\n         [ 1.61425090e+00,  2.75792742e+00,  8.89959157e-01],\n         [ 2.21123600e+00,  2.01794243e+00,  3.12941051e+00],\n         [ 2.41995788e+00,  2.26011801e+00,  1.28336644e+00]],\n\n        [[ 1.93388093e+00,  2.31614637e+00,  1.85709620e+00],\n         [ 2.52478981e+00,  1.08818913e+00,  3.34428835e+00],\n         [ 2.68314600e+00,  1.97166324e+00,  3.06040406e+00],\n         ...,\n         [ 1.15524745e+00,  1.84118557e+00,  2.25712872e+00],\n         [ 1.63706505e+00,  7.57834077e-01,  2.70180130e+00],\n         [ 1.92096543e+00,  1.32750368e+00,  2.11210918e+00]]],\n\n\n       [[[ 9.29760396e-01,  7.26414382e-01,  1.61432338e+00],\n         [ 1.61841261e+00,  3.04894924e-01,  1.44651639e+00],\n         [ 1.47589409e+00,  7.70992458e-01,  1.28475118e+00],\n         ...,\n         [ 1.24438025e-01,  3.88193130e-01,  2.03628707e+00],\n         [ 1.17680454e+00,  6.30483031e-01,  1.36320734e+00],\n         [ 3.65548283e-01,  1.46917164e+00,  7.03668177e-01]],\n\n        [[ 1.45963383e+00,  9.97301638e-01,  1.34942985e+00],\n         [ 5.70216700e-02,  7.65841007e-01,  2.05135250e+00],\n         [ 5.36151290e-01,  5.69974124e-01,  1.08153796e+00],\n         ...,\n         [ 1.98117745e+00,  1.75906360e+00,  2.53355473e-01],\n         [ 1.62892485e+00,  2.43885493e+00,  1.59175324e+00],\n         [ 8.73761531e-03,  1.62424791e+00,  1.08635569e+00]],\n\n        [[ 2.21138191e+00,  1.75682259e+00,  2.94135332e-01],\n         [ 1.85680175e+00, -1.48519039e-01,  2.21848679e+00],\n         [ 1.43649065e+00,  1.57105601e+00,  2.19859004e+00],\n         ...,\n         [ 7.03838885e-01,  3.55299652e-01,  5.09380102e-01],\n         [ 9.82326567e-01,  3.87295723e-01,  1.43751228e+00],\n         [ 1.74298513e+00,  1.14750063e+00,  7.73142338e-01]],\n\n        ...,\n\n        [[ 6.01515353e-01,  1.95025349e+00,  1.63592517e+00],\n         [ 1.07607830e+00,  1.33906817e+00,  7.67778277e-01],\n         [ 1.43609083e+00,  1.52271736e+00,  1.16866624e+00],\n         ...,\n         [-3.72595370e-01,  3.34490329e-01,  1.52263796e+00],\n         [ 2.70697743e-01,  8.32292140e-01,  2.99132973e-01],\n         [ 7.16751277e-01,  1.20728457e+00,  3.65730077e-01]],\n\n        [[ 1.88797247e+00,  1.08339512e+00,  1.67564857e+00],\n         [ 6.08760297e-01,  1.22961140e+00,  7.10184813e-01],\n         [ 1.35302007e+00,  2.17639476e-01,  1.22796428e+00],\n         ...,\n         [ 5.60129404e-01,  8.59580040e-01,  2.07771087e+00],\n         [ 1.65182149e+00,  1.85034478e+00, -8.06953683e-02],\n         [ 1.50029778e+00,  1.90175891e+00,  1.55336332e+00]],\n\n        [[ 4.38534945e-01,  1.93321681e+00,  1.93826568e+00],\n         [ 1.41543674e+00,  7.34539747e-01,  6.54654562e-01],\n         [ 1.61332786e+00,  1.60799122e+00,  3.25660139e-01],\n         ...,\n         [-1.07728489e-01,  1.46802294e+00,  1.38846052e+00],\n         [ 1.18776250e+00,  1.87629998e+00,  1.58768189e+00],\n         [ 7.76845336e-01,  9.66810226e-01,  1.74295115e+00]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[1., 0., 0., 0.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.33280557, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1278a4cd0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1278a49b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.32027043342590333, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x12789baf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.30781084, 1.0], [0.24784616, 1.0], [0.29205018, 1.0], [0.3012888, 1.0], [0.31687057, 1.0], [0.25995392, 1.0], [0.23258747, 1.0], [0.2857611, 1.0], [0.2494286, 1.0], [0.2504924, 1.0], [0.1197539, 1.0], [0.242105, 1.0], [0.3419997, 1.0]]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8]",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "use_sequence_api": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "13",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x1272926d0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 1.813372  ,  2.0463033 ,  1.8390411 ],\n         [-0.42093533,  1.2829227 ,  1.167974  ],\n         [ 2.8461835 ,  1.549377  ,  1.7910935 ],\n         ...,\n         [ 1.3973672 ,  1.7416483 ,  1.9508048 ],\n         [ 2.2414153 ,  1.5116042 ,  2.0889997 ],\n         [ 1.6873626 ,  2.0432293 ,  2.4808917 ]],\n\n        [[ 0.99996877,  2.346769  ,  1.2741195 ],\n         [ 1.8925518 ,  3.1848915 ,  2.0313866 ],\n         [ 2.1177046 ,  1.820466  ,  3.2030208 ],\n         ...,\n         [ 2.6280313 ,  2.540002  ,  1.5993326 ],\n         [ 1.6740515 ,  1.980628  ,  2.5009613 ],\n         [ 3.296722  ,  1.285049  ,  0.06768453]],\n\n        [[ 0.9248643 ,  1.2156669 ,  2.0129964 ],\n         [ 1.2122453 ,  2.5755942 ,  1.198735  ],\n         [ 2.4726765 ,  1.291342  ,  1.4535177 ],\n         ...,\n         [ 3.328178  ,  2.5405579 ,  1.6699535 ],\n         [ 1.2411047 ,  1.1718726 ,  2.3427694 ],\n         [ 2.4005244 ,  2.0190718 ,  2.3375578 ]],\n\n        ...,\n\n        [[ 1.4209566 ,  4.1400647 ,  1.5956382 ],\n         [ 1.4630346 ,  2.5790334 ,  2.294139  ],\n         [ 2.1583865 ,  1.7395163 ,  0.9216153 ],\n         ...,\n         [ 1.3431419 ,  2.11928   ,  1.921968  ],\n         [ 2.8646739 ,  2.05782   ,  2.2095668 ],\n         [ 3.10267   ,  2.2980888 ,  1.7781261 ]],\n\n        [[ 2.686347  ,  0.7224965 , -0.10304505],\n         [ 1.9019072 ,  1.2190937 ,  2.6023521 ],\n         [ 3.036936  ,  2.252345  ,  1.6832381 ],\n         ...,\n         [ 1.9899786 ,  1.4832567 ,  2.5285313 ],\n         [ 2.9735775 ,  3.0372205 ,  1.5110309 ],\n         [ 2.0285876 ,  1.7900743 ,  2.3049223 ]],\n\n        [[ 2.6765504 ,  0.9246281 ,  1.5122308 ],\n         [ 1.200513  ,  1.7433606 ,  3.608061  ],\n         [ 3.2255533 ,  2.1387427 ,  1.7411848 ],\n         ...,\n         [ 1.8172183 ,  2.9028559 ,  1.0611002 ],\n         [ 2.9898865 ,  1.3811538 ,  1.974997  ],\n         [ 2.3912761 ,  1.7898732 ,  1.9301382 ]]],\n\n\n       [[[ 3.8116825 ,  2.8834436 ,  4.398436  ],\n         [ 3.313181  ,  3.022658  ,  1.9359515 ],\n         [ 4.017863  ,  3.7216215 ,  2.0966446 ],\n         ...,\n         [ 2.1888156 ,  2.6820629 ,  3.7135618 ],\n         [ 3.0852766 ,  1.8068408 ,  3.054707  ],\n         [ 2.6344435 ,  3.2969935 ,  2.9619956 ]],\n\n        [[ 3.6233492 ,  2.8220108 ,  2.7694414 ],\n         [ 3.064486  ,  3.4929671 ,  2.1991782 ],\n         [ 3.8381104 ,  2.441205  ,  2.5262191 ],\n         ...,\n         [ 1.4709527 ,  1.9761322 ,  3.3921504 ],\n         [ 3.1278648 ,  2.7836533 ,  3.301347  ],\n         [ 3.1051345 ,  3.2945619 ,  2.8304539 ]],\n\n        [[ 3.6405125 ,  2.7615662 ,  4.25963   ],\n         [ 4.6957865 ,  2.286783  ,  2.6180527 ],\n         [ 2.959654  ,  2.337205  ,  2.8050103 ],\n         ...,\n         [ 3.0138085 ,  3.1027079 ,  3.733374  ],\n         [ 2.7783945 ,  3.3655295 ,  3.5460753 ],\n         [ 2.6989024 ,  2.7230854 ,  3.4783866 ]],\n\n        ...,\n\n        [[ 3.0460992 ,  4.111343  ,  2.943309  ],\n         [ 3.56688   ,  2.8059385 ,  3.446168  ],\n         [ 2.500237  ,  3.2017891 ,  2.7563982 ],\n         ...,\n         [ 2.7680378 ,  2.779498  ,  4.016355  ],\n         [ 4.1068707 ,  1.8885156 ,  3.2339046 ],\n         [ 2.7802474 ,  1.9380707 ,  3.9124637 ]],\n\n        [[ 2.6886709 ,  3.01048   ,  2.938146  ],\n         [ 3.2672255 ,  4.256826  ,  2.3405566 ],\n         [ 3.3195071 ,  3.6718757 ,  3.5066068 ],\n         ...,\n         [ 3.061117  ,  3.0626469 ,  2.4647646 ],\n         [ 2.513132  ,  2.225313  ,  2.509688  ],\n         [ 3.2351794 ,  2.8207152 ,  2.0564015 ]],\n\n        [[ 3.5396273 ,  2.6746283 ,  2.3680406 ],\n         [ 2.544104  ,  2.1678522 ,  2.619576  ],\n         [ 3.7752063 ,  3.5109572 ,  3.6133027 ],\n         ...,\n         [ 2.937659  ,  3.139846  ,  4.654365  ],\n         [ 2.1477563 ,  2.4425814 ,  1.8729949 ],\n         [ 3.787632  ,  1.8927665 ,  2.678996  ]]],\n\n\n       [[[ 1.8769673 ,  2.405747  ,  2.1838305 ],\n         [ 1.9857203 ,  1.392386  ,  1.8252753 ],\n         [ 2.746388  ,  1.2901651 ,  1.789547  ],\n         ...,\n         [ 3.1866474 ,  1.233781  ,  2.1136324 ],\n         [ 3.3849576 ,  2.5053918 ,  2.9928513 ],\n         [ 1.8753061 ,  0.5881817 ,  1.6416005 ]],\n\n        [[ 2.255261  ,  1.7456703 ,  2.9781528 ],\n         [ 2.5848913 ,  2.6891265 ,  2.8298347 ],\n         [ 1.4999745 ,  3.1868389 ,  2.025781  ],\n         ...,\n         [ 0.97368044,  3.1826286 ,  2.0867941 ],\n         [ 1.684876  ,  2.9374015 ,  1.0654843 ],\n         [ 0.65964437,  1.7394396 ,  3.1364098 ]],\n\n        [[ 2.283046  ,  1.8108152 ,  2.8473604 ],\n         [ 2.742728  ,  2.8506882 ,  0.9798077 ],\n         [ 2.000465  ,  1.4282553 ,  1.7994157 ],\n         ...,\n         [ 1.3237557 ,  1.7706378 ,  2.3475058 ],\n         [ 2.1721632 ,  1.3482094 ,  2.8008897 ],\n         [ 1.5678962 ,  2.1775215 ,  2.4540234 ]],\n\n        ...,\n\n        [[ 0.9810324 ,  2.7920833 ,  2.4633825 ],\n         [ 2.5953395 ,  1.3651923 ,  2.100448  ],\n         [ 1.2006985 ,  1.209127  ,  1.4484167 ],\n         ...,\n         [ 2.2134566 ,  0.84156007,  2.8800383 ],\n         [ 2.1680727 ,  2.3636944 ,  3.3395884 ],\n         [ 2.3240943 ,  2.3105073 ,  1.220452  ]],\n\n        [[ 2.3087695 ,  2.5612404 ,  1.5188484 ],\n         [ 0.8395832 ,  1.1850418 ,  1.729143  ],\n         [ 2.9254162 ,  2.6921158 ,  2.173244  ],\n         ...,\n         [ 1.1186228 ,  1.958898  ,  1.829946  ],\n         [ 1.4101313 ,  2.5563133 ,  2.9632795 ],\n         [ 1.5991907 ,  1.1966459 ,  2.3620133 ]],\n\n        [[ 0.717517  ,  2.3311546 ,  3.8955545 ],\n         [ 2.5662541 ,  1.8053764 ,  1.211602  ],\n         [ 1.1739285 ,  2.7425556 ,  1.9106249 ],\n         ...,\n         [ 1.1797863 ,  0.99696285,  3.5061448 ],\n         [ 2.5717974 ,  1.6872154 ,  1.2980272 ],\n         [ 3.1937313 ,  2.723729  ,  2.642637  ]]],\n\n\n       ...,\n\n\n       [[[ 2.0258462 ,  1.8456632 ,  3.1551967 ],\n         [ 3.045295  ,  3.1191044 ,  3.7252345 ],\n         [ 0.83887273,  1.8617455 ,  2.2159014 ],\n         ...,\n         [ 3.9129634 ,  2.689015  ,  2.5649905 ],\n         [ 3.2367718 ,  1.8876442 ,  2.870696  ],\n         [ 2.267162  ,  3.3102953 ,  3.6802244 ]],\n\n        [[ 3.1945262 ,  2.2648604 ,  3.1673572 ],\n         [ 3.311552  ,  2.7141097 ,  3.4957771 ],\n         [ 2.654524  ,  2.0406268 ,  3.5092063 ],\n         ...,\n         [ 2.9682593 ,  2.564636  ,  2.2931328 ],\n         [ 1.8304317 ,  3.364975  ,  3.0394132 ],\n         [ 3.2464297 ,  3.2249153 ,  2.571675  ]],\n\n        [[ 3.8779233 ,  3.7070801 ,  2.0584567 ],\n         [ 3.1943216 ,  2.072212  ,  1.8670187 ],\n         [ 1.9215332 ,  3.6065955 ,  4.3479834 ],\n         ...,\n         [ 3.1411135 ,  3.308804  ,  3.776684  ],\n         [ 2.8006716 ,  3.8653932 ,  3.4040885 ],\n         [ 3.224772  ,  2.9816802 ,  2.7212272 ]],\n\n        ...,\n\n        [[ 2.8558946 ,  3.084857  ,  3.7696586 ],\n         [ 3.4144573 ,  1.9419471 ,  1.4555712 ],\n         [ 3.0214527 ,  2.6397696 ,  3.727856  ],\n         ...,\n         [ 2.7365    ,  3.93258   ,  2.698612  ],\n         [ 2.7585523 ,  3.613242  ,  3.224315  ],\n         [ 4.0655518 ,  1.8655357 ,  2.4734516 ]],\n\n        [[ 3.9477553 ,  2.408549  ,  2.543006  ],\n         [ 3.1429372 ,  2.8966403 ,  3.1359568 ],\n         [ 2.2471845 ,  3.3520298 ,  3.075935  ],\n         ...,\n         [ 2.5360427 ,  3.2120502 ,  3.3854558 ],\n         [ 3.2855678 ,  1.6367939 ,  3.292889  ],\n         [ 3.555348  ,  3.510688  ,  2.398525  ]],\n\n        [[ 1.9422494 ,  3.8600106 ,  3.0865605 ],\n         [ 3.6574557 ,  3.6516497 ,  3.6017523 ],\n         [ 2.701627  ,  2.6160526 ,  3.1580458 ],\n         ...,\n         [ 1.1230397 ,  2.006789  ,  2.5685422 ],\n         [ 2.5642474 ,  3.0335107 ,  3.7465775 ],\n         [ 3.1696677 ,  2.828708  ,  3.6057563 ]]],\n\n\n       [[[ 1.5459552 ,  4.134329  ,  2.3433788 ],\n         [ 3.9931357 ,  2.9364507 ,  3.3035073 ],\n         [ 3.0986423 ,  2.3187618 ,  4.384248  ],\n         ...,\n         [ 2.3184402 ,  3.0910184 ,  2.9373436 ],\n         [ 2.6988535 ,  2.0226839 ,  2.048469  ],\n         [ 1.2714975 ,  4.112332  ,  3.111703  ]],\n\n        [[ 3.7663794 ,  2.5506403 ,  2.4538562 ],\n         [ 3.2740717 ,  3.112499  ,  2.9232302 ],\n         [ 3.1787355 ,  2.3022523 ,  2.0668886 ],\n         ...,\n         [ 3.6732976 ,  2.9952989 ,  2.648097  ],\n         [ 2.5836    ,  2.5993824 ,  2.7593334 ],\n         [ 2.7233899 ,  3.3809927 ,  2.5496142 ]],\n\n        [[ 3.271208  ,  2.1447196 ,  2.3291447 ],\n         [ 1.7400166 ,  2.981214  ,  2.4674585 ],\n         [ 3.4672992 ,  2.0842023 ,  4.1350794 ],\n         ...,\n         [ 1.5265167 ,  2.8323064 ,  3.8933344 ],\n         [ 3.150166  ,  3.698361  ,  2.4992323 ],\n         [ 2.7719285 ,  3.9228554 ,  2.2296429 ]],\n\n        ...,\n\n        [[ 3.3582482 ,  3.3159897 ,  2.2971666 ],\n         [ 4.572523  ,  2.7381344 ,  3.065135  ],\n         [ 3.6852498 ,  2.9708998 ,  2.465234  ],\n         ...,\n         [ 2.490192  ,  2.8712354 ,  1.5257691 ],\n         [ 2.54682   ,  3.9729955 ,  1.8427712 ],\n         [ 1.6799847 ,  2.3144922 ,  2.4651868 ]],\n\n        [[ 2.316243  ,  2.5409243 ,  3.6284993 ],\n         [ 3.3109555 ,  2.9638805 ,  3.025681  ],\n         [ 3.2176194 ,  2.7891715 ,  2.18256   ],\n         ...,\n         [ 3.940883  ,  1.5716053 ,  3.1077464 ],\n         [ 2.7965136 ,  3.5771713 ,  1.9299549 ],\n         [ 3.063409  ,  1.734575  ,  2.6199367 ]],\n\n        [[ 2.7123446 ,  3.2985506 ,  3.2784529 ],\n         [ 3.261846  ,  1.5810975 ,  3.9070756 ],\n         [ 2.9075606 ,  3.157203  ,  3.4127562 ],\n         ...,\n         [ 3.2949677 ,  3.2030618 ,  2.7260127 ],\n         [ 3.3192902 ,  3.4186823 ,  3.1954298 ],\n         [ 2.829989  ,  2.736393  ,  2.7250013 ]]],\n\n\n       [[[ 0.8979673 , -0.51147985, -0.04891366],\n         [ 0.07940403, -0.26912823,  0.8178597 ],\n         [ 1.0655845 ,  0.32210433, -0.11105441],\n         ...,\n         [ 1.0042282 ,  0.16261326, -0.86896807],\n         [ 1.0208781 ,  0.9202248 ,  0.3902361 ],\n         [ 1.9619864 ,  0.31830925,  2.390509  ]],\n\n        [[ 0.7509345 ,  0.6739965 ,  0.8598124 ],\n         [ 1.3104678 ,  0.71647227, -0.03931119],\n         [ 1.1064186 ,  1.3561292 ,  1.6392223 ],\n         ...,\n         [-0.299829  ,  1.7244956 , -0.05916084],\n         [ 1.2662318 ,  2.2298322 ,  1.5787585 ],\n         [ 0.18573968,  0.77459043, -0.15733233]],\n\n        [[ 0.82909197,  0.9107916 ,  1.0104322 ],\n         [ 0.4123131 ,  0.6333222 , -0.3210752 ],\n         [ 0.95834184,  0.7547342 ,  0.00864249],\n         ...,\n         [ 0.72365975,  1.0463902 ,  0.5767449 ],\n         [ 1.0987488 ,  1.0973872 ,  1.8483533 ],\n         [ 1.4771621 ,  1.7352012 ,  1.0923334 ]],\n\n        ...,\n\n        [[ 1.1628883 ,  0.2795193 ,  0.7170379 ],\n         [ 0.28088683,  1.2251924 , -1.0120527 ],\n         [ 1.3963275 , -0.14851087, -0.29128096],\n         ...,\n         [ 1.362005  ,  0.7044361 ,  0.3229016 ],\n         [ 1.2363309 ,  0.54404783,  0.3382253 ],\n         [ 0.27128246,  2.5807898 ,  0.04122875]],\n\n        [[-0.12271993,  0.48823607,  2.072111  ],\n         [ 0.37597743,  0.15718798,  2.40942   ],\n         [ 0.75342584, -0.28605264,  0.8766471 ],\n         ...,\n         [ 1.2383715 ,  0.25987184,  0.4774518 ],\n         [ 0.04264373,  0.80241287,  1.2402772 ],\n         [ 0.7118763 , -0.1375429 ,  0.2607058 ]],\n\n        [[ 1.3883878 ,  0.9468473 ,  0.9317391 ],\n         [ 0.41775188,  0.64923626,  1.1554872 ],\n         [ 0.89272135,  0.96604604,  0.9678384 ],\n         ...,\n         [-1.3795811 ,  2.5518258 ,  1.0249376 ],\n         [ 0.3733611 , -0.10843464,  1.2081702 ],\n         [ 1.1040379 ,  0.56769943,  1.3859975 ]]]], dtype=float32), array([[0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 1.813372  ,  2.0463033 ,  1.8390411 ],\n         [-0.42093533,  1.2829227 ,  1.167974  ],\n         [ 2.8461835 ,  1.549377  ,  1.7910935 ],\n         ...,\n         [ 1.3973672 ,  1.7416483 ,  1.9508048 ],\n         [ 2.2414153 ,  1.5116042 ,  2.0889997 ],\n         [ 1.6873626 ,  2.0432293 ,  2.4808917 ]],\n\n        [[ 0.99996877,  2.346769  ,  1.2741195 ],\n         [ 1.8925518 ,  3.1848915 ,  2.0313866 ],\n         [ 2.1177046 ,  1.820466  ,  3.2030208 ],\n         ...,\n         [ 2.6280313 ,  2.540002  ,  1.5993326 ],\n         [ 1.6740515 ,  1.980628  ,  2.5009613 ],\n         [ 3.296722  ,  1.285049  ,  0.06768453]],\n\n        [[ 0.9248643 ,  1.2156669 ,  2.0129964 ],\n         [ 1.2122453 ,  2.5755942 ,  1.198735  ],\n         [ 2.4726765 ,  1.291342  ,  1.4535177 ],\n         ...,\n         [ 3.328178  ,  2.5405579 ,  1.6699535 ],\n         [ 1.2411047 ,  1.1718726 ,  2.3427694 ],\n         [ 2.4005244 ,  2.0190718 ,  2.3375578 ]],\n\n        ...,\n\n        [[ 1.4209566 ,  4.1400647 ,  1.5956382 ],\n         [ 1.4630346 ,  2.5790334 ,  2.294139  ],\n         [ 2.1583865 ,  1.7395163 ,  0.9216153 ],\n         ...,\n         [ 1.3431419 ,  2.11928   ,  1.921968  ],\n         [ 2.8646739 ,  2.05782   ,  2.2095668 ],\n         [ 3.10267   ,  2.2980888 ,  1.7781261 ]],\n\n        [[ 2.686347  ,  0.7224965 , -0.10304505],\n         [ 1.9019072 ,  1.2190937 ,  2.6023521 ],\n         [ 3.036936  ,  2.252345  ,  1.6832381 ],\n         ...,\n         [ 1.9899786 ,  1.4832567 ,  2.5285313 ],\n         [ 2.9735775 ,  3.0372205 ,  1.5110309 ],\n         [ 2.0285876 ,  1.7900743 ,  2.3049223 ]],\n\n        [[ 2.6765504 ,  0.9246281 ,  1.5122308 ],\n         [ 1.200513  ,  1.7433606 ,  3.608061  ],\n         [ 3.2255533 ,  2.1387427 ,  1.7411848 ],\n         ...,\n         [ 1.8172183 ,  2.9028559 ,  1.0611002 ],\n         [ 2.9898865 ,  1.3811538 ,  1.974997  ],\n         [ 2.3912761 ,  1.7898732 ,  1.9301382 ]]],\n\n\n       [[[ 3.8116825 ,  2.8834436 ,  4.398436  ],\n         [ 3.313181  ,  3.022658  ,  1.9359515 ],\n         [ 4.017863  ,  3.7216215 ,  2.0966446 ],\n         ...,\n         [ 2.1888156 ,  2.6820629 ,  3.7135618 ],\n         [ 3.0852766 ,  1.8068408 ,  3.054707  ],\n         [ 2.6344435 ,  3.2969935 ,  2.9619956 ]],\n\n        [[ 3.6233492 ,  2.8220108 ,  2.7694414 ],\n         [ 3.064486  ,  3.4929671 ,  2.1991782 ],\n         [ 3.8381104 ,  2.441205  ,  2.5262191 ],\n         ...,\n         [ 1.4709527 ,  1.9761322 ,  3.3921504 ],\n         [ 3.1278648 ,  2.7836533 ,  3.301347  ],\n         [ 3.1051345 ,  3.2945619 ,  2.8304539 ]],\n\n        [[ 3.6405125 ,  2.7615662 ,  4.25963   ],\n         [ 4.6957865 ,  2.286783  ,  2.6180527 ],\n         [ 2.959654  ,  2.337205  ,  2.8050103 ],\n         ...,\n         [ 3.0138085 ,  3.1027079 ,  3.733374  ],\n         [ 2.7783945 ,  3.3655295 ,  3.5460753 ],\n         [ 2.6989024 ,  2.7230854 ,  3.4783866 ]],\n\n        ...,\n\n        [[ 3.0460992 ,  4.111343  ,  2.943309  ],\n         [ 3.56688   ,  2.8059385 ,  3.446168  ],\n         [ 2.500237  ,  3.2017891 ,  2.7563982 ],\n         ...,\n         [ 2.7680378 ,  2.779498  ,  4.016355  ],\n         [ 4.1068707 ,  1.8885156 ,  3.2339046 ],\n         [ 2.7802474 ,  1.9380707 ,  3.9124637 ]],\n\n        [[ 2.6886709 ,  3.01048   ,  2.938146  ],\n         [ 3.2672255 ,  4.256826  ,  2.3405566 ],\n         [ 3.3195071 ,  3.6718757 ,  3.5066068 ],\n         ...,\n         [ 3.061117  ,  3.0626469 ,  2.4647646 ],\n         [ 2.513132  ,  2.225313  ,  2.509688  ],\n         [ 3.2351794 ,  2.8207152 ,  2.0564015 ]],\n\n        [[ 3.5396273 ,  2.6746283 ,  2.3680406 ],\n         [ 2.544104  ,  2.1678522 ,  2.619576  ],\n         [ 3.7752063 ,  3.5109572 ,  3.6133027 ],\n         ...,\n         [ 2.937659  ,  3.139846  ,  4.654365  ],\n         [ 2.1477563 ,  2.4425814 ,  1.8729949 ],\n         [ 3.787632  ,  1.8927665 ,  2.678996  ]]],\n\n\n       [[[ 1.8769673 ,  2.405747  ,  2.1838305 ],\n         [ 1.9857203 ,  1.392386  ,  1.8252753 ],\n         [ 2.746388  ,  1.2901651 ,  1.789547  ],\n         ...,\n         [ 3.1866474 ,  1.233781  ,  2.1136324 ],\n         [ 3.3849576 ,  2.5053918 ,  2.9928513 ],\n         [ 1.8753061 ,  0.5881817 ,  1.6416005 ]],\n\n        [[ 2.255261  ,  1.7456703 ,  2.9781528 ],\n         [ 2.5848913 ,  2.6891265 ,  2.8298347 ],\n         [ 1.4999745 ,  3.1868389 ,  2.025781  ],\n         ...,\n         [ 0.97368044,  3.1826286 ,  2.0867941 ],\n         [ 1.684876  ,  2.9374015 ,  1.0654843 ],\n         [ 0.65964437,  1.7394396 ,  3.1364098 ]],\n\n        [[ 2.283046  ,  1.8108152 ,  2.8473604 ],\n         [ 2.742728  ,  2.8506882 ,  0.9798077 ],\n         [ 2.000465  ,  1.4282553 ,  1.7994157 ],\n         ...,\n         [ 1.3237557 ,  1.7706378 ,  2.3475058 ],\n         [ 2.1721632 ,  1.3482094 ,  2.8008897 ],\n         [ 1.5678962 ,  2.1775215 ,  2.4540234 ]],\n\n        ...,\n\n        [[ 0.9810324 ,  2.7920833 ,  2.4633825 ],\n         [ 2.5953395 ,  1.3651923 ,  2.100448  ],\n         [ 1.2006985 ,  1.209127  ,  1.4484167 ],\n         ...,\n         [ 2.2134566 ,  0.84156007,  2.8800383 ],\n         [ 2.1680727 ,  2.3636944 ,  3.3395884 ],\n         [ 2.3240943 ,  2.3105073 ,  1.220452  ]],\n\n        [[ 2.3087695 ,  2.5612404 ,  1.5188484 ],\n         [ 0.8395832 ,  1.1850418 ,  1.729143  ],\n         [ 2.9254162 ,  2.6921158 ,  2.173244  ],\n         ...,\n         [ 1.1186228 ,  1.958898  ,  1.829946  ],\n         [ 1.4101313 ,  2.5563133 ,  2.9632795 ],\n         [ 1.5991907 ,  1.1966459 ,  2.3620133 ]],\n\n        [[ 0.717517  ,  2.3311546 ,  3.8955545 ],\n         [ 2.5662541 ,  1.8053764 ,  1.211602  ],\n         [ 1.1739285 ,  2.7425556 ,  1.9106249 ],\n         ...,\n         [ 1.1797863 ,  0.99696285,  3.5061448 ],\n         [ 2.5717974 ,  1.6872154 ,  1.2980272 ],\n         [ 3.1937313 ,  2.723729  ,  2.642637  ]]],\n\n\n       ...,\n\n\n       [[[ 2.0258462 ,  1.8456632 ,  3.1551967 ],\n         [ 3.045295  ,  3.1191044 ,  3.7252345 ],\n         [ 0.83887273,  1.8617455 ,  2.2159014 ],\n         ...,\n         [ 3.9129634 ,  2.689015  ,  2.5649905 ],\n         [ 3.2367718 ,  1.8876442 ,  2.870696  ],\n         [ 2.267162  ,  3.3102953 ,  3.6802244 ]],\n\n        [[ 3.1945262 ,  2.2648604 ,  3.1673572 ],\n         [ 3.311552  ,  2.7141097 ,  3.4957771 ],\n         [ 2.654524  ,  2.0406268 ,  3.5092063 ],\n         ...,\n         [ 2.9682593 ,  2.564636  ,  2.2931328 ],\n         [ 1.8304317 ,  3.364975  ,  3.0394132 ],\n         [ 3.2464297 ,  3.2249153 ,  2.571675  ]],\n\n        [[ 3.8779233 ,  3.7070801 ,  2.0584567 ],\n         [ 3.1943216 ,  2.072212  ,  1.8670187 ],\n         [ 1.9215332 ,  3.6065955 ,  4.3479834 ],\n         ...,\n         [ 3.1411135 ,  3.308804  ,  3.776684  ],\n         [ 2.8006716 ,  3.8653932 ,  3.4040885 ],\n         [ 3.224772  ,  2.9816802 ,  2.7212272 ]],\n\n        ...,\n\n        [[ 2.8558946 ,  3.084857  ,  3.7696586 ],\n         [ 3.4144573 ,  1.9419471 ,  1.4555712 ],\n         [ 3.0214527 ,  2.6397696 ,  3.727856  ],\n         ...,\n         [ 2.7365    ,  3.93258   ,  2.698612  ],\n         [ 2.7585523 ,  3.613242  ,  3.224315  ],\n         [ 4.0655518 ,  1.8655357 ,  2.4734516 ]],\n\n        [[ 3.9477553 ,  2.408549  ,  2.543006  ],\n         [ 3.1429372 ,  2.8966403 ,  3.1359568 ],\n         [ 2.2471845 ,  3.3520298 ,  3.075935  ],\n         ...,\n         [ 2.5360427 ,  3.2120502 ,  3.3854558 ],\n         [ 3.2855678 ,  1.6367939 ,  3.292889  ],\n         [ 3.555348  ,  3.510688  ,  2.398525  ]],\n\n        [[ 1.9422494 ,  3.8600106 ,  3.0865605 ],\n         [ 3.6574557 ,  3.6516497 ,  3.6017523 ],\n         [ 2.701627  ,  2.6160526 ,  3.1580458 ],\n         ...,\n         [ 1.1230397 ,  2.006789  ,  2.5685422 ],\n         [ 2.5642474 ,  3.0335107 ,  3.7465775 ],\n         [ 3.1696677 ,  2.828708  ,  3.6057563 ]]],\n\n\n       [[[ 1.5459552 ,  4.134329  ,  2.3433788 ],\n         [ 3.9931357 ,  2.9364507 ,  3.3035073 ],\n         [ 3.0986423 ,  2.3187618 ,  4.384248  ],\n         ...,\n         [ 2.3184402 ,  3.0910184 ,  2.9373436 ],\n         [ 2.6988535 ,  2.0226839 ,  2.048469  ],\n         [ 1.2714975 ,  4.112332  ,  3.111703  ]],\n\n        [[ 3.7663794 ,  2.5506403 ,  2.4538562 ],\n         [ 3.2740717 ,  3.112499  ,  2.9232302 ],\n         [ 3.1787355 ,  2.3022523 ,  2.0668886 ],\n         ...,\n         [ 3.6732976 ,  2.9952989 ,  2.648097  ],\n         [ 2.5836    ,  2.5993824 ,  2.7593334 ],\n         [ 2.7233899 ,  3.3809927 ,  2.5496142 ]],\n\n        [[ 3.271208  ,  2.1447196 ,  2.3291447 ],\n         [ 1.7400166 ,  2.981214  ,  2.4674585 ],\n         [ 3.4672992 ,  2.0842023 ,  4.1350794 ],\n         ...,\n         [ 1.5265167 ,  2.8323064 ,  3.8933344 ],\n         [ 3.150166  ,  3.698361  ,  2.4992323 ],\n         [ 2.7719285 ,  3.9228554 ,  2.2296429 ]],\n\n        ...,\n\n        [[ 3.3582482 ,  3.3159897 ,  2.2971666 ],\n         [ 4.572523  ,  2.7381344 ,  3.065135  ],\n         [ 3.6852498 ,  2.9708998 ,  2.465234  ],\n         ...,\n         [ 2.490192  ,  2.8712354 ,  1.5257691 ],\n         [ 2.54682   ,  3.9729955 ,  1.8427712 ],\n         [ 1.6799847 ,  2.3144922 ,  2.4651868 ]],\n\n        [[ 2.316243  ,  2.5409243 ,  3.6284993 ],\n         [ 3.3109555 ,  2.9638805 ,  3.025681  ],\n         [ 3.2176194 ,  2.7891715 ,  2.18256   ],\n         ...,\n         [ 3.940883  ,  1.5716053 ,  3.1077464 ],\n         [ 2.7965136 ,  3.5771713 ,  1.9299549 ],\n         [ 3.063409  ,  1.734575  ,  2.6199367 ]],\n\n        [[ 2.7123446 ,  3.2985506 ,  3.2784529 ],\n         [ 3.261846  ,  1.5810975 ,  3.9070756 ],\n         [ 2.9075606 ,  3.157203  ,  3.4127562 ],\n         ...,\n         [ 3.2949677 ,  3.2030618 ,  2.7260127 ],\n         [ 3.3192902 ,  3.4186823 ,  3.1954298 ],\n         [ 2.829989  ,  2.736393  ,  2.7250013 ]]],\n\n\n       [[[ 0.8979673 , -0.51147985, -0.04891366],\n         [ 0.07940403, -0.26912823,  0.8178597 ],\n         [ 1.0655845 ,  0.32210433, -0.11105441],\n         ...,\n         [ 1.0042282 ,  0.16261326, -0.86896807],\n         [ 1.0208781 ,  0.9202248 ,  0.3902361 ],\n         [ 1.9619864 ,  0.31830925,  2.390509  ]],\n\n        [[ 0.7509345 ,  0.6739965 ,  0.8598124 ],\n         [ 1.3104678 ,  0.71647227, -0.03931119],\n         [ 1.1064186 ,  1.3561292 ,  1.6392223 ],\n         ...,\n         [-0.299829  ,  1.7244956 , -0.05916084],\n         [ 1.2662318 ,  2.2298322 ,  1.5787585 ],\n         [ 0.18573968,  0.77459043, -0.15733233]],\n\n        [[ 0.82909197,  0.9107916 ,  1.0104322 ],\n         [ 0.4123131 ,  0.6333222 , -0.3210752 ],\n         [ 0.95834184,  0.7547342 ,  0.00864249],\n         ...,\n         [ 0.72365975,  1.0463902 ,  0.5767449 ],\n         [ 1.0987488 ,  1.0973872 ,  1.8483533 ],\n         [ 1.4771621 ,  1.7352012 ,  1.0923334 ]],\n\n        ...,\n\n        [[ 1.1628883 ,  0.2795193 ,  0.7170379 ],\n         [ 0.28088683,  1.2251924 , -1.0120527 ],\n         [ 1.3963275 , -0.14851087, -0.29128096],\n         ...,\n         [ 1.362005  ,  0.7044361 ,  0.3229016 ],\n         [ 1.2363309 ,  0.54404783,  0.3382253 ],\n         [ 0.27128246,  2.5807898 ,  0.04122875]],\n\n        [[-0.12271993,  0.48823607,  2.072111  ],\n         [ 0.37597743,  0.15718798,  2.40942   ],\n         [ 0.75342584, -0.28605264,  0.8766471 ],\n         ...,\n         [ 1.2383715 ,  0.25987184,  0.4774518 ],\n         [ 0.04264373,  0.80241287,  1.2402772 ],\n         [ 0.7118763 , -0.1375429 ,  0.2607058 ]],\n\n        [[ 1.3883878 ,  0.9468473 ,  0.9317391 ],\n         [ 0.41775188,  0.64923626,  1.1554872 ],\n         [ 0.89272135,  0.96604604,  0.9678384 ],\n         ...,\n         [-1.3795811 ,  2.5518258 ,  1.0249376 ],\n         [ 0.3733611 , -0.10843464,  1.2081702 ],\n         [ 1.1040379 ,  0.56769943,  1.3859975 ]]]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 1., 0.],\n       [0., 0., 0., 1.],\n       [0., 0., 0., 1.],\n       [0., 1., 0., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(8, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.3419997, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1278b6cd0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "8",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(8, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1278b6d70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.26215590357780455, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x127327280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_sequence_api": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x127304610>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "model._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "model": {
                                    "variable_value": "<keras.engine.sequential.Sequential object at 0x1271953d0>",
                                    "variable_type": "Sequential",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.stateful_metric_functions": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "model.metrics_names": {
                                    "variable_value": "['loss', 'acc']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.stateful_metric_names": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "steps_done": {
                                    "variable_value": "32",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.1987955, 1.0], [0.20744336, 1.0], [0.20908335, 1.0], [0.20453683, 1.0], [0.28178036, 1.0], [0.2742887, 1.0], [0.20092684, 1.0], [0.22793543, 1.0], [0.25575775, 1.0], [0.24643266, 1.0], [0.22162545, 1.0], [0.25127858, 1.0], [0.21943703, 1.0], [0.17382064, 1.0], [0.26194727, 1.0], [0.25859085, 1.0], [0.19026709, 1.0], [0.27117726, 1.0], [0.23337118, 1.0], [0.22527412, 1.0], [0.21810113, 1.0], [0.2223027, 1.0], [0.24245486, 1.0], [0.22305636, 1.0], [0.22729859, 1.0], [0.24091262, 1.0], [0.19859543, 1.0], [0.18954949, 1.0], [0.18951443, 1.0], [0.24107791, 1.0], [0.191378, 1.0], [0.2804991, 1.0]]",
                                    "variable_type": "list",
                                    "variable_shape": "32"
                                },
                                "batch_sizes": {
                                    "variable_value": "[16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 4]",
                                    "variable_type": "list",
                                    "variable_shape": "32"
                                },
                                "use_sequence_api": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x127304610>",
                                    "variable_type": "NumpyArrayIterator",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "32",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.OrderedEnqueuer object at 0x12730afd0>",
                                    "variable_type": "OrderedEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method SequenceEnqueuer.start of <keras.utils.data_utils.OrderedEnqueuer object at 0x12730afd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object OrderedEnqueuer.get at 0x12738cf50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method OrderedEnqueuer.get of <keras.utils.data_utils.OrderedEnqueuer object at 0x12730afd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "iter_sequence_infinite": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[[[ 3.4095566e+00,  3.4201465e+00,  4.8524146e+00],\n         [ 3.6281106e+00,  3.2633352e+00,  3.2404640e+00],\n         [ 2.8908088e+00,  4.5362339e+00,  2.5058646e+00],\n         ...,\n         [ 1.8591069e+00,  4.2464881e+00,  2.6642492e+00],\n         [ 2.4584374e+00,  3.2237639e+00,  3.3984752e+00],\n         [ 2.9867537e+00,  2.8653376e+00,  2.7485533e+00]],\n\n        [[ 2.7525771e+00,  2.2096746e+00,  2.9507513e+00],\n         [ 3.8256924e+00,  3.0464547e+00,  2.3024621e+00],\n         [ 3.6185699e+00,  3.1814890e+00,  3.2741141e+00],\n         ...,\n         [ 2.6790595e+00,  3.5456452e+00,  3.2132568e+00],\n         [ 3.3583848e+00,  3.3599999e+00,  2.5890613e+00],\n         [ 2.6668963e+00,  2.7062144e+00,  3.1742346e+00]],\n\n        [[ 2.6702664e+00,  3.6236169e+00,  4.1456690e+00],\n         [ 3.2111886e+00,  3.6345646e+00,  2.6318662e+00],\n         [ 3.3541069e+00,  2.1579785e+00,  1.9730279e+00],\n         ...,\n         [ 2.6641703e+00,  1.5691340e+00,  3.0389347e+00],\n         [ 2.2417557e+00,  3.5864799e+00,  2.9948614e+00],\n         [ 2.9224775e+00,  4.6575933e+00,  2.4000022e+00]],\n\n        ...,\n\n        [[ 3.0895636e+00,  3.9499328e+00,  1.0860879e+00],\n         [ 3.3745971e+00,  4.3123379e+00,  4.3108459e+00],\n         [ 4.5459900e+00,  3.8030725e+00,  1.7194523e+00],\n         ...,\n         [ 3.9562547e+00,  2.1334531e+00,  2.7808242e+00],\n         [ 3.1364236e+00,  2.4103925e+00,  3.0855060e+00],\n         [ 2.6029410e+00,  3.8656895e+00,  4.2283430e+00]],\n\n        [[ 2.8124173e+00,  3.1168823e+00,  2.9010921e+00],\n         [ 2.5658116e+00,  3.4144530e+00,  2.6620216e+00],\n         [ 3.1590962e+00,  4.0077658e+00,  3.2827678e+00],\n         ...,\n         [ 2.7319148e+00,  3.7445319e+00,  3.4135950e+00],\n         [ 1.3324863e+00,  2.8494420e+00,  3.2065358e+00],\n         [ 2.9875462e+00,  4.5055857e+00,  2.1127181e+00]],\n\n        [[ 3.6451607e+00,  3.1220117e+00,  3.4012461e+00],\n         [ 2.3377569e+00,  3.6583252e+00,  2.5712163e+00],\n         [ 2.8155763e+00,  3.9182765e+00,  3.0287552e+00],\n         ...,\n         [ 2.4711022e+00,  4.9901671e+00,  4.8116360e+00],\n         [ 2.5220873e+00,  3.6456907e+00,  2.5999417e+00],\n         [ 3.4512689e+00,  3.2540753e+00,  3.6620038e+00]]],\n\n\n       [[[ 1.9675367e+00,  3.0100789e+00,  2.9968324e+00],\n         [ 2.3994920e+00,  2.3524005e+00,  2.3533349e+00],\n         [ 1.4530244e+00,  1.3305647e+00,  2.1804445e+00],\n         ...,\n         [ 1.7110175e+00,  1.0578767e+00,  2.2498100e+00],\n         [ 2.2209153e+00,  1.4150609e+00,  1.0594476e+00],\n         [ 1.5636972e+00,  1.7301921e+00,  2.0146568e+00]],\n\n        [[ 9.1371542e-01,  2.1690180e+00,  1.9917377e+00],\n         [ 2.8530858e+00,  3.8328674e+00,  2.2600510e+00],\n         [ 2.9158671e+00,  1.9281876e+00,  3.0918159e+00],\n         ...,\n         [ 3.2932692e+00,  1.4770114e+00,  1.2388892e+00],\n         [ 1.9666356e+00,  2.2414417e+00,  3.6641970e+00],\n         [ 1.7341931e+00,  2.5938900e+00,  2.7012043e+00]],\n\n        [[ 2.7806070e+00,  1.0251610e+00,  2.7273123e+00],\n         [ 1.7237600e+00,  2.1135359e+00,  3.0239258e+00],\n         [ 2.9988415e+00,  2.3761873e+00,  1.2985729e+00],\n         ...,\n         [ 2.9442141e+00,  1.6450273e+00,  2.2724292e+00],\n         [ 2.2142308e+00,  2.3439019e+00,  9.9334222e-01],\n         [ 2.3795772e+00,  2.1329331e+00,  3.0380249e+00]],\n\n        ...,\n\n        [[ 1.6560977e+00,  2.7020068e+00,  2.6332429e-01],\n         [ 1.3527987e+00,  2.8347614e+00,  2.6788881e+00],\n         [ 2.1816964e+00,  1.7207831e-01,  3.0038500e+00],\n         ...,\n         [ 2.0110459e+00,  1.3832917e+00,  2.5372488e+00],\n         [ 1.9224434e+00,  1.2528569e+00,  1.7990937e+00],\n         [ 3.2513793e+00,  2.6026797e+00,  2.0290794e+00]],\n\n        [[ 3.5262673e+00,  2.1022050e+00,  1.4861120e+00],\n         [ 2.0528154e+00,  2.5026445e+00,  3.3017409e+00],\n         [ 1.6478682e+00,  3.0509162e+00,  2.1685681e+00],\n         ...,\n         [ 2.4721916e+00,  2.4078071e+00,  2.2388690e+00],\n         [ 2.1113265e+00,  1.2770075e+00,  2.2700250e+00],\n         [ 1.5032704e+00,  2.1097755e+00,  3.1864693e+00]],\n\n        [[ 1.4091594e+00,  2.8071179e+00,  2.9397740e+00],\n         [ 2.2085538e+00,  2.4671154e+00,  1.1427327e+00],\n         [ 1.6508261e+00,  1.4010973e+00,  1.4470685e+00],\n         ...,\n         [ 1.7476422e+00,  1.2794827e+00,  1.6166772e+00],\n         [ 2.5839763e+00,  1.9560190e+00,  1.8788522e+00],\n         [ 3.0261049e+00,  1.5794028e+00,  3.2420967e+00]]],\n\n\n       [[[ 2.8463340e-01,  1.6258247e+00,  3.7353253e-01],\n         [ 7.8191072e-01,  6.5714931e-01,  1.4524552e+00],\n         [ 5.3734857e-01,  1.4392511e+00,  1.7558029e+00],\n         ...,\n         [ 1.8515890e+00,  4.2177129e-01,  2.7771255e-01],\n         [ 3.2996088e-01,  8.3265346e-01,  7.7634192e-01],\n         [ 1.7454665e+00,  2.2356310e+00,  1.4534819e+00]],\n\n        [[-8.8315047e-03,  5.6740475e-01,  1.4430336e+00],\n         [ 7.4614048e-01,  7.0958227e-01,  7.8137469e-01],\n         [ 7.1479517e-01,  7.0231760e-01,  1.8038372e+00],\n         ...,\n         [ 8.4194219e-01,  1.2581922e+00,  1.8857052e+00],\n         [ 9.5140077e-03,  2.7964851e-01,  1.0732851e+00],\n         [ 6.0194123e-01,  8.5012239e-01,  5.0577670e-01]],\n\n        [[ 1.4128059e+00,  2.2861426e+00,  1.1534470e+00],\n         [ 6.6450238e-01,  8.5306031e-01,  9.8483080e-01],\n         [ 3.0982673e+00,  1.0557421e+00,  4.6727332e-01],\n         ...,\n         [ 2.0349333e+00,  1.2979400e+00,  7.2578573e-01],\n         [-2.9254994e-01,  1.4157684e+00,  5.2502459e-01],\n         [ 1.2049992e+00,  7.8607655e-01,  7.6047593e-01]],\n\n        ...,\n\n        [[ 1.1133224e+00,  8.5124660e-01,  1.0454644e+00],\n         [ 1.3348694e-01,  6.4644569e-01,  5.4041135e-01],\n         [ 6.1261809e-01,  1.6702675e+00,  1.4296321e+00],\n         ...,\n         [ 1.2970355e+00, -1.4283350e-01,  1.7984340e+00],\n         [ 8.7070942e-01,  1.3859868e+00,  3.5926798e-01],\n         [ 9.0881008e-01,  6.6883212e-01,  1.2504872e+00]],\n\n        [[ 1.6690857e+00,  1.2130412e-01,  6.3024324e-01],\n         [ 1.4740723e+00,  1.0450578e+00,  5.8433396e-01],\n         [ 8.3309662e-01,  5.2076977e-01,  9.7463202e-01],\n         ...,\n         [ 2.3087251e+00,  2.1275809e-01,  1.2932588e+00],\n         [ 2.1500020e+00,  1.0522681e+00,  8.0624634e-01],\n         [-4.8554456e-01,  5.8858430e-01,  7.3939878e-01]],\n\n        [[ 1.2605516e+00,  7.2750586e-01,  6.3292271e-01],\n         [ 1.4389318e+00,  1.5004263e+00,  3.7081102e-01],\n         [ 1.5913533e+00,  1.1657126e+00,  1.4576306e+00],\n         ...,\n         [ 1.3234267e+00,  7.3100664e-02,  5.9858757e-01],\n         [ 1.7157274e+00,  1.2797858e+00,  8.4606898e-01],\n         [ 1.5000601e+00,  1.4466683e+00,  1.2647276e+00]]],\n\n\n       [[[ 1.0838940e+00,  6.5244865e-01,  1.9163110e+00],\n         [ 3.2406214e-01,  7.4386871e-01,  6.4004546e-01],\n         [ 1.9529027e+00,  1.4410310e+00, -1.3726873e-02],\n         ...,\n         [ 3.5582280e-01,  1.2904592e-01,  2.6916447e-01],\n         [ 1.0210640e+00, -4.0564862e-01,  4.7052991e-01],\n         [ 1.0608649e-03,  1.5072984e-01,  2.6345789e+00]],\n\n        [[ 1.1367995e+00,  1.9130131e-02, -7.4303485e-02],\n         [ 1.5293014e+00, -7.6148921e-01,  1.6326047e-01],\n         [-3.4887340e-02,  4.7036156e-01,  1.8017955e+00],\n         ...,\n         [ 1.6421543e+00,  3.0684323e+00,  1.5275162e+00],\n         [ 1.4110340e+00,  1.2612230e+00,  6.7310810e-01],\n         [ 1.5314971e+00,  7.7531403e-01,  8.0750239e-01]],\n\n        [[ 8.0181587e-01,  9.4978505e-01,  8.7170386e-01],\n         [-7.7848725e-02,  1.8414265e+00,  2.3508205e+00],\n         [ 2.0204225e-01,  1.5820957e+00,  1.0807940e+00],\n         ...,\n         [ 8.3310038e-01,  1.2934772e+00,  7.9731506e-01],\n         [ 1.1426044e+00,  1.7656213e+00,  1.7708088e-01],\n         [ 1.0919842e+00, -1.3253344e+00,  1.9306157e+00]],\n\n        ...,\n\n        [[ 2.0925455e+00,  1.2192569e+00,  4.8071629e-01],\n         [ 1.3246725e+00,  1.3349375e+00,  7.5055838e-01],\n         [ 9.4622678e-01,  4.0434784e-01,  5.2510887e-01],\n         ...,\n         [ 1.1890113e+00,  1.1908357e+00,  1.8550047e+00],\n         [ 7.3212266e-01,  1.0625082e+00,  2.0397329e+00],\n         [ 7.4230158e-01,  2.0683372e+00,  1.4287556e+00]],\n\n        [[ 4.1979930e-01,  5.7834071e-01,  7.8539956e-01],\n         [ 1.4966350e+00,  1.6334646e+00,  1.9693800e+00],\n         [ 7.7558124e-01,  5.6561536e-01,  9.9665982e-01],\n         ...,\n         [ 1.8261197e+00,  1.6542307e+00,  1.1169363e+00],\n         [ 1.4811954e+00,  1.6739496e+00,  1.5639045e+00],\n         [ 1.8038000e+00,  5.2528721e-01,  1.6089395e+00]],\n\n        [[ 1.2155811e+00,  1.5964508e+00,  1.2030604e+00],\n         [ 1.0468513e+00,  2.5968063e+00,  1.5214559e+00],\n         [ 3.3283728e-01,  7.0094728e-01,  1.4348955e+00],\n         ...,\n         [ 6.4969510e-01,  1.2121587e+00,  1.2135472e+00],\n         [ 2.6322753e+00,  9.6293020e-01,  9.5186234e-01],\n         [ 1.8885655e+00,  9.1383719e-01,  1.0105264e+00]]]],\n      dtype=float32), array([[0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.]], dtype=float32))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[[[ 3.4095566e+00,  3.4201465e+00,  4.8524146e+00],\n         [ 3.6281106e+00,  3.2633352e+00,  3.2404640e+00],\n         [ 2.8908088e+00,  4.5362339e+00,  2.5058646e+00],\n         ...,\n         [ 1.8591069e+00,  4.2464881e+00,  2.6642492e+00],\n         [ 2.4584374e+00,  3.2237639e+00,  3.3984752e+00],\n         [ 2.9867537e+00,  2.8653376e+00,  2.7485533e+00]],\n\n        [[ 2.7525771e+00,  2.2096746e+00,  2.9507513e+00],\n         [ 3.8256924e+00,  3.0464547e+00,  2.3024621e+00],\n         [ 3.6185699e+00,  3.1814890e+00,  3.2741141e+00],\n         ...,\n         [ 2.6790595e+00,  3.5456452e+00,  3.2132568e+00],\n         [ 3.3583848e+00,  3.3599999e+00,  2.5890613e+00],\n         [ 2.6668963e+00,  2.7062144e+00,  3.1742346e+00]],\n\n        [[ 2.6702664e+00,  3.6236169e+00,  4.1456690e+00],\n         [ 3.2111886e+00,  3.6345646e+00,  2.6318662e+00],\n         [ 3.3541069e+00,  2.1579785e+00,  1.9730279e+00],\n         ...,\n         [ 2.6641703e+00,  1.5691340e+00,  3.0389347e+00],\n         [ 2.2417557e+00,  3.5864799e+00,  2.9948614e+00],\n         [ 2.9224775e+00,  4.6575933e+00,  2.4000022e+00]],\n\n        ...,\n\n        [[ 3.0895636e+00,  3.9499328e+00,  1.0860879e+00],\n         [ 3.3745971e+00,  4.3123379e+00,  4.3108459e+00],\n         [ 4.5459900e+00,  3.8030725e+00,  1.7194523e+00],\n         ...,\n         [ 3.9562547e+00,  2.1334531e+00,  2.7808242e+00],\n         [ 3.1364236e+00,  2.4103925e+00,  3.0855060e+00],\n         [ 2.6029410e+00,  3.8656895e+00,  4.2283430e+00]],\n\n        [[ 2.8124173e+00,  3.1168823e+00,  2.9010921e+00],\n         [ 2.5658116e+00,  3.4144530e+00,  2.6620216e+00],\n         [ 3.1590962e+00,  4.0077658e+00,  3.2827678e+00],\n         ...,\n         [ 2.7319148e+00,  3.7445319e+00,  3.4135950e+00],\n         [ 1.3324863e+00,  2.8494420e+00,  3.2065358e+00],\n         [ 2.9875462e+00,  4.5055857e+00,  2.1127181e+00]],\n\n        [[ 3.6451607e+00,  3.1220117e+00,  3.4012461e+00],\n         [ 2.3377569e+00,  3.6583252e+00,  2.5712163e+00],\n         [ 2.8155763e+00,  3.9182765e+00,  3.0287552e+00],\n         ...,\n         [ 2.4711022e+00,  4.9901671e+00,  4.8116360e+00],\n         [ 2.5220873e+00,  3.6456907e+00,  2.5999417e+00],\n         [ 3.4512689e+00,  3.2540753e+00,  3.6620038e+00]]],\n\n\n       [[[ 1.9675367e+00,  3.0100789e+00,  2.9968324e+00],\n         [ 2.3994920e+00,  2.3524005e+00,  2.3533349e+00],\n         [ 1.4530244e+00,  1.3305647e+00,  2.1804445e+00],\n         ...,\n         [ 1.7110175e+00,  1.0578767e+00,  2.2498100e+00],\n         [ 2.2209153e+00,  1.4150609e+00,  1.0594476e+00],\n         [ 1.5636972e+00,  1.7301921e+00,  2.0146568e+00]],\n\n        [[ 9.1371542e-01,  2.1690180e+00,  1.9917377e+00],\n         [ 2.8530858e+00,  3.8328674e+00,  2.2600510e+00],\n         [ 2.9158671e+00,  1.9281876e+00,  3.0918159e+00],\n         ...,\n         [ 3.2932692e+00,  1.4770114e+00,  1.2388892e+00],\n         [ 1.9666356e+00,  2.2414417e+00,  3.6641970e+00],\n         [ 1.7341931e+00,  2.5938900e+00,  2.7012043e+00]],\n\n        [[ 2.7806070e+00,  1.0251610e+00,  2.7273123e+00],\n         [ 1.7237600e+00,  2.1135359e+00,  3.0239258e+00],\n         [ 2.9988415e+00,  2.3761873e+00,  1.2985729e+00],\n         ...,\n         [ 2.9442141e+00,  1.6450273e+00,  2.2724292e+00],\n         [ 2.2142308e+00,  2.3439019e+00,  9.9334222e-01],\n         [ 2.3795772e+00,  2.1329331e+00,  3.0380249e+00]],\n\n        ...,\n\n        [[ 1.6560977e+00,  2.7020068e+00,  2.6332429e-01],\n         [ 1.3527987e+00,  2.8347614e+00,  2.6788881e+00],\n         [ 2.1816964e+00,  1.7207831e-01,  3.0038500e+00],\n         ...,\n         [ 2.0110459e+00,  1.3832917e+00,  2.5372488e+00],\n         [ 1.9224434e+00,  1.2528569e+00,  1.7990937e+00],\n         [ 3.2513793e+00,  2.6026797e+00,  2.0290794e+00]],\n\n        [[ 3.5262673e+00,  2.1022050e+00,  1.4861120e+00],\n         [ 2.0528154e+00,  2.5026445e+00,  3.3017409e+00],\n         [ 1.6478682e+00,  3.0509162e+00,  2.1685681e+00],\n         ...,\n         [ 2.4721916e+00,  2.4078071e+00,  2.2388690e+00],\n         [ 2.1113265e+00,  1.2770075e+00,  2.2700250e+00],\n         [ 1.5032704e+00,  2.1097755e+00,  3.1864693e+00]],\n\n        [[ 1.4091594e+00,  2.8071179e+00,  2.9397740e+00],\n         [ 2.2085538e+00,  2.4671154e+00,  1.1427327e+00],\n         [ 1.6508261e+00,  1.4010973e+00,  1.4470685e+00],\n         ...,\n         [ 1.7476422e+00,  1.2794827e+00,  1.6166772e+00],\n         [ 2.5839763e+00,  1.9560190e+00,  1.8788522e+00],\n         [ 3.0261049e+00,  1.5794028e+00,  3.2420967e+00]]],\n\n\n       [[[ 2.8463340e-01,  1.6258247e+00,  3.7353253e-01],\n         [ 7.8191072e-01,  6.5714931e-01,  1.4524552e+00],\n         [ 5.3734857e-01,  1.4392511e+00,  1.7558029e+00],\n         ...,\n         [ 1.8515890e+00,  4.2177129e-01,  2.7771255e-01],\n         [ 3.2996088e-01,  8.3265346e-01,  7.7634192e-01],\n         [ 1.7454665e+00,  2.2356310e+00,  1.4534819e+00]],\n\n        [[-8.8315047e-03,  5.6740475e-01,  1.4430336e+00],\n         [ 7.4614048e-01,  7.0958227e-01,  7.8137469e-01],\n         [ 7.1479517e-01,  7.0231760e-01,  1.8038372e+00],\n         ...,\n         [ 8.4194219e-01,  1.2581922e+00,  1.8857052e+00],\n         [ 9.5140077e-03,  2.7964851e-01,  1.0732851e+00],\n         [ 6.0194123e-01,  8.5012239e-01,  5.0577670e-01]],\n\n        [[ 1.4128059e+00,  2.2861426e+00,  1.1534470e+00],\n         [ 6.6450238e-01,  8.5306031e-01,  9.8483080e-01],\n         [ 3.0982673e+00,  1.0557421e+00,  4.6727332e-01],\n         ...,\n         [ 2.0349333e+00,  1.2979400e+00,  7.2578573e-01],\n         [-2.9254994e-01,  1.4157684e+00,  5.2502459e-01],\n         [ 1.2049992e+00,  7.8607655e-01,  7.6047593e-01]],\n\n        ...,\n\n        [[ 1.1133224e+00,  8.5124660e-01,  1.0454644e+00],\n         [ 1.3348694e-01,  6.4644569e-01,  5.4041135e-01],\n         [ 6.1261809e-01,  1.6702675e+00,  1.4296321e+00],\n         ...,\n         [ 1.2970355e+00, -1.4283350e-01,  1.7984340e+00],\n         [ 8.7070942e-01,  1.3859868e+00,  3.5926798e-01],\n         [ 9.0881008e-01,  6.6883212e-01,  1.2504872e+00]],\n\n        [[ 1.6690857e+00,  1.2130412e-01,  6.3024324e-01],\n         [ 1.4740723e+00,  1.0450578e+00,  5.8433396e-01],\n         [ 8.3309662e-01,  5.2076977e-01,  9.7463202e-01],\n         ...,\n         [ 2.3087251e+00,  2.1275809e-01,  1.2932588e+00],\n         [ 2.1500020e+00,  1.0522681e+00,  8.0624634e-01],\n         [-4.8554456e-01,  5.8858430e-01,  7.3939878e-01]],\n\n        [[ 1.2605516e+00,  7.2750586e-01,  6.3292271e-01],\n         [ 1.4389318e+00,  1.5004263e+00,  3.7081102e-01],\n         [ 1.5913533e+00,  1.1657126e+00,  1.4576306e+00],\n         ...,\n         [ 1.3234267e+00,  7.3100664e-02,  5.9858757e-01],\n         [ 1.7157274e+00,  1.2797858e+00,  8.4606898e-01],\n         [ 1.5000601e+00,  1.4466683e+00,  1.2647276e+00]]],\n\n\n       [[[ 1.0838940e+00,  6.5244865e-01,  1.9163110e+00],\n         [ 3.2406214e-01,  7.4386871e-01,  6.4004546e-01],\n         [ 1.9529027e+00,  1.4410310e+00, -1.3726873e-02],\n         ...,\n         [ 3.5582280e-01,  1.2904592e-01,  2.6916447e-01],\n         [ 1.0210640e+00, -4.0564862e-01,  4.7052991e-01],\n         [ 1.0608649e-03,  1.5072984e-01,  2.6345789e+00]],\n\n        [[ 1.1367995e+00,  1.9130131e-02, -7.4303485e-02],\n         [ 1.5293014e+00, -7.6148921e-01,  1.6326047e-01],\n         [-3.4887340e-02,  4.7036156e-01,  1.8017955e+00],\n         ...,\n         [ 1.6421543e+00,  3.0684323e+00,  1.5275162e+00],\n         [ 1.4110340e+00,  1.2612230e+00,  6.7310810e-01],\n         [ 1.5314971e+00,  7.7531403e-01,  8.0750239e-01]],\n\n        [[ 8.0181587e-01,  9.4978505e-01,  8.7170386e-01],\n         [-7.7848725e-02,  1.8414265e+00,  2.3508205e+00],\n         [ 2.0204225e-01,  1.5820957e+00,  1.0807940e+00],\n         ...,\n         [ 8.3310038e-01,  1.2934772e+00,  7.9731506e-01],\n         [ 1.1426044e+00,  1.7656213e+00,  1.7708088e-01],\n         [ 1.0919842e+00, -1.3253344e+00,  1.9306157e+00]],\n\n        ...,\n\n        [[ 2.0925455e+00,  1.2192569e+00,  4.8071629e-01],\n         [ 1.3246725e+00,  1.3349375e+00,  7.5055838e-01],\n         [ 9.4622678e-01,  4.0434784e-01,  5.2510887e-01],\n         ...,\n         [ 1.1890113e+00,  1.1908357e+00,  1.8550047e+00],\n         [ 7.3212266e-01,  1.0625082e+00,  2.0397329e+00],\n         [ 7.4230158e-01,  2.0683372e+00,  1.4287556e+00]],\n\n        [[ 4.1979930e-01,  5.7834071e-01,  7.8539956e-01],\n         [ 1.4966350e+00,  1.6334646e+00,  1.9693800e+00],\n         [ 7.7558124e-01,  5.6561536e-01,  9.9665982e-01],\n         ...,\n         [ 1.8261197e+00,  1.6542307e+00,  1.1169363e+00],\n         [ 1.4811954e+00,  1.6739496e+00,  1.5639045e+00],\n         [ 1.8038000e+00,  5.2528721e-01,  1.6089395e+00]],\n\n        [[ 1.2155811e+00,  1.5964508e+00,  1.2030604e+00],\n         [ 1.0468513e+00,  2.5968063e+00,  1.5214559e+00],\n         [ 3.3283728e-01,  7.0094728e-01,  1.4348955e+00],\n         ...,\n         [ 6.4969510e-01,  1.2121587e+00,  1.2135472e+00],\n         [ 2.6322753e+00,  9.6293020e-01,  9.5186234e-01],\n         [ 1.8885655e+00,  9.1383719e-01,  1.0105264e+00]]]],\n      dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4, 16, 16, 3)"
                                },
                                "y": {
                                    "variable_value": "array([[0., 0., 0., 1.],\n       [0., 0., 1., 0.],\n       [0., 1., 0., 0.],\n       [0., 1., 0., 0.]], dtype=float32)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(4, 4)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.2804991, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "model.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.sequential.Sequential object at 0x1271953d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "to_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x1278baf00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(4, 16, 16, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1278bafa0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method SequenceEnqueuer.stop of <keras.utils.data_utils.OrderedEnqueuer object at 0x12730afd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.22618036985397338, 1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x12733f280>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unpack_singleton": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "predict_generator",
                    "function_code": "def predict_generator(model, generator,\n                      steps=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      verbose=0):\n    \"\"\"See docstring for `Model.predict_generator`.\"\"\"\n    model._make_predict_function()\n\n    steps_done = 0\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                # Compatibility with the generators\n                # used for training.\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n            else:\n                # Assumes a generator that only\n                # yields inputs (not targets and sample weights).\n                x = generator_output\n\n            outs = model.predict_on_batch(x)\n            outs = to_list(outs)\n\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]\n",
                    "decorators": [],
                    "docstring": "See docstring for `Model.predict_generator`.",
                    "start_line": 379,
                    "end_line": 472,
                    "variables": {
                        "model._make_predict_function": [
                            386
                        ],
                        "model": [
                            386,
                            447
                        ],
                        "steps_done": [
                            388,
                            456,
                            458,
                            428,
                            465,
                            469
                        ],
                        "all_outs": [
                            450,
                            452,
                            389,
                            455,
                            464,
                            466,
                            468,
                            470,
                            472
                        ],
                        "is_sequence": [
                            420,
                            390,
                            391,
                            398,
                            409
                        ],
                        "isinstance": [
                            430,
                            390
                        ],
                        "generator": [
                            421,
                            390,
                            423,
                            399,
                            411,
                            415
                        ],
                        "Sequence": [
                            390
                        ],
                        "use_multiprocessing": [
                            416,
                            412,
                            391
                        ],
                        "workers": [
                            408,
                            417,
                            391
                        ],
                        "warnings.warn": [
                            392
                        ],
                        "warnings": [
                            392
                        ],
                        "UserWarning": [
                            393
                        ],
                        "steps": [
                            426,
                            428,
                            397,
                            399
                        ],
                        "len": [
                            464,
                            433,
                            435,
                            399
                        ],
                        "ValueError": [
                            401,
                            438
                        ],
                        "enqueuer": [
                            417,
                            418,
                            461,
                            462,
                            405,
                            410,
                            414
                        ],
                        "OrderedEnqueuer": [
                            410
                        ],
                        "GeneratorEnqueuer": [
                            414
                        ],
                        "enqueuer.start": [
                            417
                        ],
                        "max_queue_size": [
                            417
                        ],
                        "output_generator": [
                            418,
                            429,
                            421,
                            423
                        ],
                        "enqueuer.get": [
                            418
                        ],
                        "iter_sequence_infinite": [
                            421
                        ],
                        "verbose": [
                            425,
                            457
                        ],
                        "progbar": [
                            458,
                            426
                        ],
                        "Progbar": [
                            426
                        ],
                        "generator_output": [
                            429,
                            430,
                            433,
                            434,
                            435,
                            436,
                            441,
                            445
                        ],
                        "next": [
                            429
                        ],
                        "tuple": [
                            430
                        ],
                        "x": [
                            434,
                            436,
                            445,
                            447
                        ],
                        "_": [
                            434,
                            436
                        ],
                        "str": [
                            441
                        ],
                        "outs": [
                            448,
                            451,
                            454,
                            447
                        ],
                        "model.predict_on_batch": [
                            447
                        ],
                        "to_list": [
                            448
                        ],
                        "out": [
                            451,
                            454,
                            455,
                            470,
                            472
                        ],
                        "all_outs.append": [
                            452
                        ],
                        "i": [
                            454,
                            455
                        ],
                        "enumerate": [
                            454
                        ],
                        "append": [
                            455
                        ],
                        "progbar.update": [
                            458
                        ],
                        "enqueuer.stop": [
                            462
                        ],
                        "np.concatenate": [
                            472,
                            468
                        ],
                        "np": [
                            472,
                            468
                        ]
                    },
                    "filtered_variables": {
                        "model._make_predict_function": [
                            386
                        ],
                        "model": [
                            386,
                            447
                        ],
                        "steps_done": [
                            388,
                            456,
                            458,
                            428,
                            465,
                            469
                        ],
                        "all_outs": [
                            450,
                            452,
                            389,
                            455,
                            464,
                            466,
                            468,
                            470,
                            472
                        ],
                        "is_sequence": [
                            420,
                            390,
                            391,
                            398,
                            409
                        ],
                        "generator": [
                            421,
                            390,
                            423,
                            399,
                            411,
                            415
                        ],
                        "Sequence": [
                            390
                        ],
                        "use_multiprocessing": [
                            416,
                            412,
                            391
                        ],
                        "workers": [
                            408,
                            417,
                            391
                        ],
                        "warnings.warn": [
                            392
                        ],
                        "warnings": [
                            392
                        ],
                        "steps": [
                            426,
                            428,
                            397,
                            399
                        ],
                        "enqueuer": [
                            417,
                            418,
                            461,
                            462,
                            405,
                            410,
                            414
                        ],
                        "OrderedEnqueuer": [
                            410
                        ],
                        "GeneratorEnqueuer": [
                            414
                        ],
                        "enqueuer.start": [
                            417
                        ],
                        "max_queue_size": [
                            417
                        ],
                        "output_generator": [
                            418,
                            429,
                            421,
                            423
                        ],
                        "enqueuer.get": [
                            418
                        ],
                        "iter_sequence_infinite": [
                            421
                        ],
                        "verbose": [
                            425,
                            457
                        ],
                        "progbar": [
                            458,
                            426
                        ],
                        "Progbar": [
                            426
                        ],
                        "generator_output": [
                            429,
                            430,
                            433,
                            434,
                            435,
                            436,
                            441,
                            445
                        ],
                        "x": [
                            434,
                            436,
                            445,
                            447
                        ],
                        "_": [
                            434,
                            436
                        ],
                        "outs": [
                            448,
                            451,
                            454,
                            447
                        ],
                        "model.predict_on_batch": [
                            447
                        ],
                        "to_list": [
                            448
                        ],
                        "out": [
                            451,
                            454,
                            455,
                            470,
                            472
                        ],
                        "all_outs.append": [
                            452
                        ],
                        "i": [
                            454,
                            455
                        ],
                        "append": [
                            455
                        ],
                        "progbar.update": [
                            458
                        ],
                        "enqueuer.stop": [
                            462
                        ],
                        "np.concatenate": [
                            472,
                            468
                        ],
                        "np": [
                            472,
                            468
                        ]
                    },
                    "diff_line_number": 390,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from .training_utils import iter_sequence_infinite",
                    "start_line": 9,
                    "end_line": 10
                }
            ],
            "inscope_functions": [
                "def fit_generator(model,\n                  generator,\n                  steps_per_epoch=None,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"See docstring for `Model.fit_generator`.\"\"\"\n    epoch = initial_epoch\n\n    do_validation = bool(validation_data)\n    model._make_train_function()\n    if do_validation:\n        model._make_test_function()\n\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a'\n                             ' generator based on the '\n                             '`keras.utils.Sequence`'\n                             ' class. Please specify `steps_per_epoch` '\n                             'or use the `keras.utils.Sequence` class.')\n\n    # python 2 has 'next', 3 has '__next__'\n    # avoid any explicit version checks\n    val_gen = (hasattr(validation_data, 'next') or\n               hasattr(validation_data, '__next__') or\n               isinstance(validation_data, Sequence))\n    if (val_gen and not isinstance(validation_data, Sequence) and\n            not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a'\n                         ' generator based on the `keras.utils.Sequence`'\n                         ' class. Please specify `validation_steps` or use'\n                         ' the `keras.utils.Sequence` class.')\n\n    # Prepare display labels.\n    out_labels = model.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n\n    # prepare callbacks\n    model.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(\n        stateful_metrics=model.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(\n            cbks.ProgbarLogger(\n                count_mode='steps',\n                stateful_metrics=model.stateful_metric_names))\n    _callbacks += (callbacks or []) + [model.history]\n    callbacks = cbks.CallbackList(_callbacks)\n\n    # it's possible to callback a different model than self:\n    if hasattr(model, 'callback_model') and model.callback_model:\n        callback_model = model.callback_model\n    else:\n        callback_model = model\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics,\n    })\n    callbacks.on_train_begin()\n\n    enqueuer = None\n    val_enqueuer = None\n\n    try:\n        if do_validation:\n            if val_gen and workers > 0:\n                # Create an Enqueuer that can be reused\n                val_data = validation_data\n                if isinstance(val_data, Sequence):\n                    val_enqueuer = OrderedEnqueuer(\n                        val_data,\n                        use_multiprocessing=use_multiprocessing)\n                    validation_steps = validation_steps or len(val_data)\n                else:\n                    val_enqueuer = GeneratorEnqueuer(\n                        val_data,\n                        use_multiprocessing=use_multiprocessing)\n                val_enqueuer.start(workers=workers,\n                                   max_queue_size=max_queue_size)\n                val_enqueuer_gen = val_enqueuer.get()\n            elif val_gen:\n                val_data = validation_data\n                if isinstance(val_data, Sequence):\n                    val_enqueuer_gen = iter_sequence_infinite(val_data)\n                    validation_steps = validation_steps or len(val_data)\n                else:\n                    val_enqueuer_gen = val_data\n            else:\n                # Prepare data for validation\n                if len(validation_data) == 2:\n                    val_x, val_y = validation_data\n                    val_sample_weight = None\n                elif len(validation_data) == 3:\n                    val_x, val_y, val_sample_weight = validation_data\n                else:\n                    raise ValueError('`validation_data` should be a tuple '\n                                     '`(val_x, val_y, val_sample_weight)` '\n                                     'or `(val_x, val_y)`. Found: ' +\n                                     str(validation_data))\n                val_x, val_y, val_sample_weights = model._standardize_user_data(\n                    val_x, val_y, val_sample_weight)\n                val_data = val_x + val_y + val_sample_weights\n                if model.uses_learning_phase and not isinstance(K.learning_phase(),\n                                                                int):\n                    val_data += [0.]\n                for cbk in callbacks:\n                    cbk.validation_data = val_data\n\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing,\n                    shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        callback_model.stop_training = False\n        # Construct epoch logs.\n        epoch_logs = {}\n        while epoch < epochs:\n            for m in model.stateful_metric_functions:\n                m.reset_states()\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n                # build batch logs\n                batch_logs = {}\n                if x is None or len(x) == 0:\n                    # Handle data tensors support when no input given\n                    # step-size = 1 for data tensors\n                    batch_size = 1\n                elif isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n\n                outs = model.train_on_batch(x, y,\n                                            sample_weight=sample_weight,\n                                            class_weight=class_weight)\n\n                outs = to_list(outs)\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n\n                batch_index += 1\n                steps_done += 1\n\n                # Epoch finished.\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = model.evaluate_generator(\n                            val_enqueuer_gen,\n                            validation_steps,\n                            workers=0)\n                    else:\n                        # No need for try/except because\n                        # data has already been validated.\n                        val_outs = model.evaluate(\n                            val_x, val_y,\n                            batch_size=batch_size,\n                            sample_weight=val_sample_weights,\n                            verbose=0)\n                    val_outs = to_list(val_outs)\n                    # Same labels assumed.\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n\n                if callback_model.stop_training:\n                    break\n\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n\n    callbacks.on_train_end()\n    return model.history",
                "def evaluate_generator(model, generator,\n                       steps=None,\n                       max_queue_size=10,\n                       workers=1,\n                       use_multiprocessing=False,\n                       verbose=0):\n    \"\"\"See docstring for `Model.evaluate_generator`.\"\"\"\n    model._make_test_function()\n\n    if hasattr(model, 'metrics'):\n        for m in model.stateful_metric_functions:\n            m.reset_states()\n        stateful_metric_indices = [\n            i for i, name in enumerate(model.metrics_names)\n            if str(name) in model.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n\n    steps_done = 0\n    outs_per_batch = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            outs = model.test_on_batch(x, y, sample_weight=sample_weight)\n            outs = to_list(outs)\n            outs_per_batch.append(outs)\n\n            if x is None or len(x) == 0:\n                # Handle data tensors support when no input given\n                # step-size = 1 for data tensors\n                batch_size = 1\n            elif isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. '\n                                 'Batches should contain '\n                                 'at least one item.')\n            steps_done += 1\n            batch_sizes.append(batch_size)\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    averages = []\n    for i in range(len(outs)):\n        if i not in stateful_metric_indices:\n            averages.append(np.average([out[i] for out in outs_per_batch],\n                                       weights=batch_sizes))\n        else:\n            averages.append(np.float64(outs_per_batch[-1][i]))\n    return unpack_singleton(averages)",
                "def predict_generator(model, generator,\n                      steps=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      verbose=0):\n    \"\"\"See docstring for `Model.predict_generator`.\"\"\"\n    model._make_predict_function()\n\n    steps_done = 0\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(\n                    generator,\n                    use_multiprocessing=use_multiprocessing)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter_sequence_infinite(generator)\n            else:\n                output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                # Compatibility with the generators\n                # used for training.\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n            else:\n                # Assumes a generator that only\n                # yields inputs (not targets and sample weights).\n                x = generator_output\n\n            outs = model.predict_on_batch(x)\n            outs = to_list(outs)\n\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]"
            ],
            "inscope_function_signatures": [
                "fit_generator(model, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                "evaluate_generator(model, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                "predict_generator(model, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)"
            ],
            "variables_in_file": {
                "epoch": [
                    36,
                    172,
                    175,
                    249,
                    250
                ],
                "initial_epoch": [
                    36
                ],
                "do_validation": [
                    98,
                    227,
                    38,
                    40,
                    107
                ],
                "bool": [
                    38
                ],
                "validation_data": [
                    64,
                    65,
                    132,
                    133,
                    38,
                    135,
                    136,
                    141,
                    110,
                    124,
                    62,
                    63
                ],
                "model._make_train_function": [
                    39
                ],
                "model": [
                    386,
                    263,
                    142,
                    145,
                    273,
                    275,
                    276,
                    279,
                    280,
                    39,
                    41,
                    173,
                    447,
                    73,
                    77,
                    79,
                    84,
                    85,
                    213,
                    342,
                    89,
                    90,
                    92,
                    229,
                    236
                ],
                "model._make_test_function": [
                    41,
                    273
                ],
                "is_sequence": [
                    288,
                    164,
                    420,
                    390,
                    295,
                    391,
                    43,
                    44,
                    398,
                    306,
                    51,
                    152,
                    409,
                    317,
                    287
                ],
                "isinstance": [
                    64,
                    65,
                    352,
                    390,
                    43,
                    203,
                    205,
                    430,
                    111,
                    145,
                    125,
                    350,
                    287
                ],
                "generator": [
                    320,
                    287,
                    165,
                    390,
                    167,
                    296,
                    415,
                    421,
                    43,
                    423,
                    399,
                    52,
                    308,
                    312,
                    154,
                    411,
                    318,
                    159
                ],
                "Sequence": [
                    64,
                    65,
                    390,
                    43,
                    111,
                    125,
                    287
                ],
                "use_multiprocessing": [
                    160,
                    288,
                    416,
                    391,
                    44,
                    114,
                    309,
                    119,
                    313,
                    155,
                    412
                ],
                "workers": [
                    288,
                    161,
                    417,
                    408,
                    391,
                    108,
                    44,
                    305,
                    151,
                    120,
                    314
                ],
                "warnings.warn": [
                    392,
                    289,
                    45
                ],
                "warnings": [
                    392,
                    289,
                    45
                ],
                "UserWarning": [
                    393,
                    290,
                    46
                ],
                "steps_per_epoch": [
                    96,
                    227,
                    178,
                    50,
                    52
                ],
                "len": [
                    132,
                    135,
                    199,
                    296,
                    332,
                    335,
                    399,
                    433,
                    370,
                    115,
                    52,
                    435,
                    464,
                    346,
                    187,
                    190,
                    127
                ],
                "ValueError": [
                    193,
                    67,
                    357,
                    328,
                    138,
                    298,
                    401,
                    338,
                    182,
                    54,
                    438
                ],
                "val_gen": [
                    65,
                    228,
                    108,
                    123,
                    62
                ],
                "hasattr": [
                    327,
                    275,
                    181,
                    89,
                    62,
                    63
                ],
                "validation_steps": [
                    231,
                    66,
                    115,
                    127
                ],
                "out_labels": [
                    73,
                    74,
                    243,
                    218
                ],
                "model.metrics_names": [
                    73,
                    279
                ],
                "callback_metrics": [
                    74,
                    99
                ],
                "n": [
                    74
                ],
                "model.history": [
                    85,
                    77,
                    263
                ],
                "cbks.History": [
                    77
                ],
                "cbks": [
                    86,
                    82,
                    77,
                    78
                ],
                "_callbacks": [
                    81,
                    85,
                    78,
                    86
                ],
                "cbks.BaseLogger": [
                    78
                ],
                "model.stateful_metric_names": [
                    280,
                    84,
                    79
                ],
                "verbose": [
                    97,
                    322,
                    425,
                    362,
                    457,
                    80
                ],
                "_callbacks.append": [
                    81
                ],
                "cbks.ProgbarLogger": [
                    82
                ],
                "callbacks": [
                    101,
                    262,
                    175,
                    211,
                    148,
                    85,
                    86,
                    221,
                    249,
                    93,
                    94
                ],
                "cbks.CallbackList": [
                    86
                ],
                "model.callback_model": [
                    89,
                    90
                ],
                "callback_model": [
                    169,
                    246,
                    90,
                    251,
                    92,
                    93
                ],
                "callbacks.set_model": [
                    93
                ],
                "callbacks.set_params": [
                    94
                ],
                "epochs": [
                    172,
                    95
                ],
                "callbacks.on_train_begin": [
                    101
                ],
                "enqueuer": [
                    256,
                    257,
                    405,
                    153,
                    410,
                    414,
                    158,
                    161,
                    162,
                    417,
                    418,
                    302,
                    307,
                    311,
                    314,
                    315,
                    461,
                    462,
                    103,
                    366,
                    367
                ],
                "val_enqueuer": [
                    259,
                    260,
                    104,
                    112,
                    117,
                    120,
                    122
                ],
                "val_data": [
                    129,
                    110,
                    111,
                    144,
                    113,
                    115,
                    147,
                    149,
                    118,
                    124,
                    125,
                    126,
                    127
                ],
                "OrderedEnqueuer": [
                    112,
                    153,
                    410,
                    307
                ],
                "GeneratorEnqueuer": [
                    414,
                    117,
                    158,
                    311
                ],
                "val_enqueuer.start": [
                    120
                ],
                "max_queue_size": [
                    417,
                    121,
                    314,
                    161
                ],
                "val_enqueuer_gen": [
                    129,
                    122,
                    126,
                    230
                ],
                "val_enqueuer.get": [
                    122
                ],
                "iter_sequence_infinite": [
                    318,
                    165,
                    126,
                    421
                ],
                "val_x": [
                    133,
                    136,
                    237,
                    142,
                    143,
                    144
                ],
                "val_y": [
                    133,
                    136,
                    237,
                    142,
                    143,
                    144
                ],
                "val_sample_weight": [
                    136,
                    134,
                    143
                ],
                "str": [
                    196,
                    331,
                    441,
                    141,
                    341,
                    280,
                    185
                ],
                "val_sample_weights": [
                    144,
                    142,
                    239
                ],
                "model._standardize_user_data": [
                    142
                ],
                "model.uses_learning_phase": [
                    145
                ],
                "K.learning_phase": [
                    145
                ],
                "K": [
                    145
                ],
                "int": [
                    146
                ],
                "cbk": [
                    148,
                    149
                ],
                "cbk.validation_data": [
                    149
                ],
                "shuffle": [
                    156
                ],
                "enqueuer.start": [
                    161,
                    314,
                    417
                ],
                "output_generator": [
                    320,
                    162,
                    418,
                    165,
                    326,
                    167,
                    421,
                    423,
                    429,
                    179,
                    315,
                    318
                ],
                "enqueuer.get": [
                    418,
                    162,
                    315
                ],
                "callback_model.stop_training": [
                    169,
                    251,
                    246
                ],
                "epoch_logs": [
                    249,
                    171,
                    244
                ],
                "m": [
                    277,
                    276,
                    173,
                    174
                ],
                "model.stateful_metric_functions": [
                    276,
                    173
                ],
                "m.reset_states": [
                    277,
                    174
                ],
                "callbacks.on_epoch_begin": [
                    175
                ],
                "steps_done": [
                    224,
                    227,
                    388,
                    325,
                    360,
                    456,
                    458,
                    363,
                    428,
                    176,
                    465,
                    178,
                    469,
                    284
                ],
                "batch_index": [
                    177,
                    209,
                    211,
                    221,
                    223
                ],
                "generator_output": [
                    429,
                    430,
                    433,
                    434,
                    179,
                    435,
                    181,
                    436,
                    185,
                    441,
                    187,
                    188,
                    445,
                    190,
                    191,
                    196,
                    326,
                    327,
                    331,
                    332,
                    333,
                    335,
                    336,
                    341
                ],
                "next": [
                    179,
                    429,
                    326
                ],
                "x": [
                    434,
                    436,
                    188,
                    445,
                    191,
                    447,
                    199,
                    203,
                    204,
                    205,
                    206,
                    333,
                    208,
                    336,
                    213,
                    342,
                    346,
                    350,
                    351,
                    352,
                    353,
                    355
                ],
                "y": [
                    333,
                    336,
                    213,
                    342,
                    188,
                    191
                ],
                "sample_weight": [
                    334,
                    336,
                    214,
                    342,
                    189,
                    191
                ],
                "batch_logs": [
                    198,
                    209,
                    210,
                    211,
                    219,
                    221
                ],
                "batch_size": [
                    353,
                    355,
                    356,
                    361,
                    202,
                    204,
                    206,
                    238,
                    208,
                    210,
                    349,
                    351
                ],
                "list": [
                    350,
                    203,
                    206,
                    353
                ],
                "shape": [
                    353,
                    204,
                    206,
                    351
                ],
                "dict": [
                    352,
                    205
                ],
                "x.values": [
                    353,
                    206
                ],
                "x.shape": [
                    208,
                    355
                ],
                "callbacks.on_batch_begin": [
                    211
                ],
                "outs": [
                    448,
                    451,
                    454,
                    370,
                    213,
                    342,
                    343,
                    344,
                    217,
                    218,
                    447
                ],
                "model.train_on_batch": [
                    213
                ],
                "class_weight": [
                    215
                ],
                "to_list": [
                    448,
                    217,
                    241,
                    343
                ],
                "l": [
                    218,
                    219,
                    244,
                    243
                ],
                "o": [
                    218,
                    219,
                    244,
                    243
                ],
                "zip": [
                    218,
                    243
                ],
                "callbacks.on_batch_end": [
                    221
                ],
                "val_outs": [
                    241,
                    243,
                    236,
                    229
                ],
                "model.evaluate_generator": [
                    229
                ],
                "model.evaluate": [
                    236
                ],
                "callbacks.on_epoch_end": [
                    249
                ],
                "enqueuer.stop": [
                    257,
                    462,
                    367
                ],
                "val_enqueuer.stop": [
                    260
                ],
                "callbacks.on_train_end": [
                    262
                ],
                "stateful_metric_indices": [
                    282,
                    371,
                    278
                ],
                "i": [
                    454,
                    455,
                    370,
                    371,
                    372,
                    375,
                    279
                ],
                "name": [
                    280,
                    279
                ],
                "enumerate": [
                    454,
                    279
                ],
                "outs_per_batch": [
                    344,
                    372,
                    285,
                    375
                ],
                "batch_sizes": [
                    361,
                    373,
                    286
                ],
                "steps": [
                    323,
                    325,
                    294,
                    296,
                    426,
                    428,
                    397,
                    399
                ],
                "progbar": [
                    363,
                    458,
                    426,
                    323
                ],
                "Progbar": [
                    426,
                    323
                ],
                "model.test_on_batch": [
                    342
                ],
                "outs_per_batch.append": [
                    344
                ],
                "batch_sizes.append": [
                    361
                ],
                "progbar.update": [
                    458,
                    363
                ],
                "averages": [
                    376,
                    369,
                    372,
                    375
                ],
                "range": [
                    370
                ],
                "averages.append": [
                    372,
                    375
                ],
                "np.average": [
                    372
                ],
                "np": [
                    472,
                    468,
                    372,
                    375
                ],
                "out": [
                    451,
                    454,
                    455,
                    372,
                    470,
                    472
                ],
                "np.float64": [
                    375
                ],
                "unpack_singleton": [
                    376
                ],
                "model._make_predict_function": [
                    386
                ],
                "all_outs": [
                    450,
                    452,
                    389,
                    455,
                    464,
                    466,
                    468,
                    470,
                    472
                ],
                "tuple": [
                    430
                ],
                "_": [
                    434,
                    436
                ],
                "model.predict_on_batch": [
                    447
                ],
                "all_outs.append": [
                    452
                ],
                "append": [
                    455
                ],
                "np.concatenate": [
                    472,
                    468
                ]
            },
            "filtered_variables_in_file": {
                "epoch": [
                    36,
                    172,
                    175,
                    249,
                    250
                ],
                "initial_epoch": [
                    36
                ],
                "do_validation": [
                    98,
                    227,
                    38,
                    40,
                    107
                ],
                "validation_data": [
                    64,
                    65,
                    132,
                    133,
                    38,
                    135,
                    136,
                    141,
                    110,
                    124,
                    62,
                    63
                ],
                "model._make_train_function": [
                    39
                ],
                "model": [
                    386,
                    263,
                    142,
                    145,
                    273,
                    275,
                    276,
                    279,
                    280,
                    39,
                    41,
                    173,
                    447,
                    73,
                    77,
                    79,
                    84,
                    85,
                    213,
                    342,
                    89,
                    90,
                    92,
                    229,
                    236
                ],
                "model._make_test_function": [
                    41,
                    273
                ],
                "is_sequence": [
                    288,
                    164,
                    420,
                    390,
                    295,
                    391,
                    43,
                    44,
                    398,
                    306,
                    51,
                    152,
                    409,
                    317,
                    287
                ],
                "generator": [
                    320,
                    287,
                    165,
                    390,
                    167,
                    296,
                    415,
                    421,
                    43,
                    423,
                    399,
                    52,
                    308,
                    312,
                    154,
                    411,
                    318,
                    159
                ],
                "Sequence": [
                    64,
                    65,
                    390,
                    43,
                    111,
                    125,
                    287
                ],
                "use_multiprocessing": [
                    160,
                    288,
                    416,
                    391,
                    44,
                    114,
                    309,
                    119,
                    313,
                    155,
                    412
                ],
                "workers": [
                    288,
                    161,
                    417,
                    408,
                    391,
                    108,
                    44,
                    305,
                    151,
                    120,
                    314
                ],
                "warnings.warn": [
                    392,
                    289,
                    45
                ],
                "warnings": [
                    392,
                    289,
                    45
                ],
                "steps_per_epoch": [
                    96,
                    227,
                    178,
                    50,
                    52
                ],
                "val_gen": [
                    65,
                    228,
                    108,
                    123,
                    62
                ],
                "validation_steps": [
                    231,
                    66,
                    115,
                    127
                ],
                "out_labels": [
                    73,
                    74,
                    243,
                    218
                ],
                "model.metrics_names": [
                    73,
                    279
                ],
                "callback_metrics": [
                    74,
                    99
                ],
                "n": [
                    74
                ],
                "model.history": [
                    85,
                    77,
                    263
                ],
                "cbks.History": [
                    77
                ],
                "cbks": [
                    86,
                    82,
                    77,
                    78
                ],
                "_callbacks": [
                    81,
                    85,
                    78,
                    86
                ],
                "cbks.BaseLogger": [
                    78
                ],
                "model.stateful_metric_names": [
                    280,
                    84,
                    79
                ],
                "verbose": [
                    97,
                    322,
                    425,
                    362,
                    457,
                    80
                ],
                "_callbacks.append": [
                    81
                ],
                "cbks.ProgbarLogger": [
                    82
                ],
                "callbacks": [
                    101,
                    262,
                    175,
                    211,
                    148,
                    85,
                    86,
                    221,
                    249,
                    93,
                    94
                ],
                "cbks.CallbackList": [
                    86
                ],
                "model.callback_model": [
                    89,
                    90
                ],
                "callback_model": [
                    169,
                    246,
                    90,
                    251,
                    92,
                    93
                ],
                "callbacks.set_model": [
                    93
                ],
                "callbacks.set_params": [
                    94
                ],
                "epochs": [
                    172,
                    95
                ],
                "callbacks.on_train_begin": [
                    101
                ],
                "enqueuer": [
                    256,
                    257,
                    405,
                    153,
                    410,
                    414,
                    158,
                    161,
                    162,
                    417,
                    418,
                    302,
                    307,
                    311,
                    314,
                    315,
                    461,
                    462,
                    103,
                    366,
                    367
                ],
                "val_enqueuer": [
                    259,
                    260,
                    104,
                    112,
                    117,
                    120,
                    122
                ],
                "val_data": [
                    129,
                    110,
                    111,
                    144,
                    113,
                    115,
                    147,
                    149,
                    118,
                    124,
                    125,
                    126,
                    127
                ],
                "OrderedEnqueuer": [
                    112,
                    153,
                    410,
                    307
                ],
                "GeneratorEnqueuer": [
                    414,
                    117,
                    158,
                    311
                ],
                "val_enqueuer.start": [
                    120
                ],
                "max_queue_size": [
                    417,
                    121,
                    314,
                    161
                ],
                "val_enqueuer_gen": [
                    129,
                    122,
                    126,
                    230
                ],
                "val_enqueuer.get": [
                    122
                ],
                "iter_sequence_infinite": [
                    318,
                    165,
                    126,
                    421
                ],
                "val_x": [
                    133,
                    136,
                    237,
                    142,
                    143,
                    144
                ],
                "val_y": [
                    133,
                    136,
                    237,
                    142,
                    143,
                    144
                ],
                "val_sample_weight": [
                    136,
                    134,
                    143
                ],
                "val_sample_weights": [
                    144,
                    142,
                    239
                ],
                "model._standardize_user_data": [
                    142
                ],
                "model.uses_learning_phase": [
                    145
                ],
                "K.learning_phase": [
                    145
                ],
                "K": [
                    145
                ],
                "cbk": [
                    148,
                    149
                ],
                "cbk.validation_data": [
                    149
                ],
                "shuffle": [
                    156
                ],
                "enqueuer.start": [
                    161,
                    314,
                    417
                ],
                "output_generator": [
                    320,
                    162,
                    418,
                    165,
                    326,
                    167,
                    421,
                    423,
                    429,
                    179,
                    315,
                    318
                ],
                "enqueuer.get": [
                    418,
                    162,
                    315
                ],
                "callback_model.stop_training": [
                    169,
                    251,
                    246
                ],
                "epoch_logs": [
                    249,
                    171,
                    244
                ],
                "m": [
                    277,
                    276,
                    173,
                    174
                ],
                "model.stateful_metric_functions": [
                    276,
                    173
                ],
                "m.reset_states": [
                    277,
                    174
                ],
                "callbacks.on_epoch_begin": [
                    175
                ],
                "steps_done": [
                    224,
                    227,
                    388,
                    325,
                    360,
                    456,
                    458,
                    363,
                    428,
                    176,
                    465,
                    178,
                    469,
                    284
                ],
                "batch_index": [
                    177,
                    209,
                    211,
                    221,
                    223
                ],
                "generator_output": [
                    429,
                    430,
                    433,
                    434,
                    179,
                    435,
                    181,
                    436,
                    185,
                    441,
                    187,
                    188,
                    445,
                    190,
                    191,
                    196,
                    326,
                    327,
                    331,
                    332,
                    333,
                    335,
                    336,
                    341
                ],
                "x": [
                    434,
                    436,
                    188,
                    445,
                    191,
                    447,
                    199,
                    203,
                    204,
                    205,
                    206,
                    333,
                    208,
                    336,
                    213,
                    342,
                    346,
                    350,
                    351,
                    352,
                    353,
                    355
                ],
                "y": [
                    333,
                    336,
                    213,
                    342,
                    188,
                    191
                ],
                "sample_weight": [
                    334,
                    336,
                    214,
                    342,
                    189,
                    191
                ],
                "batch_logs": [
                    198,
                    209,
                    210,
                    211,
                    219,
                    221
                ],
                "batch_size": [
                    353,
                    355,
                    356,
                    361,
                    202,
                    204,
                    206,
                    238,
                    208,
                    210,
                    349,
                    351
                ],
                "shape": [
                    353,
                    204,
                    206,
                    351
                ],
                "x.values": [
                    353,
                    206
                ],
                "x.shape": [
                    208,
                    355
                ],
                "callbacks.on_batch_begin": [
                    211
                ],
                "outs": [
                    448,
                    451,
                    454,
                    370,
                    213,
                    342,
                    343,
                    344,
                    217,
                    218,
                    447
                ],
                "model.train_on_batch": [
                    213
                ],
                "class_weight": [
                    215
                ],
                "to_list": [
                    448,
                    217,
                    241,
                    343
                ],
                "l": [
                    218,
                    219,
                    244,
                    243
                ],
                "o": [
                    218,
                    219,
                    244,
                    243
                ],
                "callbacks.on_batch_end": [
                    221
                ],
                "val_outs": [
                    241,
                    243,
                    236,
                    229
                ],
                "model.evaluate_generator": [
                    229
                ],
                "model.evaluate": [
                    236
                ],
                "callbacks.on_epoch_end": [
                    249
                ],
                "enqueuer.stop": [
                    257,
                    462,
                    367
                ],
                "val_enqueuer.stop": [
                    260
                ],
                "callbacks.on_train_end": [
                    262
                ],
                "stateful_metric_indices": [
                    282,
                    371,
                    278
                ],
                "i": [
                    454,
                    455,
                    370,
                    371,
                    372,
                    375,
                    279
                ],
                "name": [
                    280,
                    279
                ],
                "outs_per_batch": [
                    344,
                    372,
                    285,
                    375
                ],
                "batch_sizes": [
                    361,
                    373,
                    286
                ],
                "steps": [
                    323,
                    325,
                    294,
                    296,
                    426,
                    428,
                    397,
                    399
                ],
                "progbar": [
                    363,
                    458,
                    426,
                    323
                ],
                "Progbar": [
                    426,
                    323
                ],
                "model.test_on_batch": [
                    342
                ],
                "outs_per_batch.append": [
                    344
                ],
                "batch_sizes.append": [
                    361
                ],
                "progbar.update": [
                    458,
                    363
                ],
                "averages": [
                    376,
                    369,
                    372,
                    375
                ],
                "averages.append": [
                    372,
                    375
                ],
                "np.average": [
                    372
                ],
                "np": [
                    472,
                    468,
                    372,
                    375
                ],
                "out": [
                    451,
                    454,
                    455,
                    372,
                    470,
                    472
                ],
                "np.float64": [
                    375
                ],
                "unpack_singleton": [
                    376
                ],
                "model._make_predict_function": [
                    386
                ],
                "all_outs": [
                    450,
                    452,
                    389,
                    455,
                    464,
                    466,
                    468,
                    470,
                    472
                ],
                "_": [
                    434,
                    436
                ],
                "model.predict_on_batch": [
                    447
                ],
                "all_outs.append": [
                    452
                ],
                "append": [
                    455
                ],
                "np.concatenate": [
                    472,
                    468
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/keras_11/keras/engine/training_utils.py": {
            "buggy_functions": [
                {
                    "function_name": "iter_sequence_infinite",
                    "function_code": "def iter_sequence_infinite(seq):\n    \"\"\"Iterate indefinitely over a Sequence.\n\n    # Arguments\n        seq: Sequence object\n\n    # Returns\n        Generator yielding batches.\n    \"\"\"\n    while True:\n        for item in seq:\n            yield item\n",
                    "decorators": [],
                    "docstring": "Iterate indefinitely over a Sequence.\n\n# Arguments\n    seq: Sequence object\n\n# Returns\n    Generator yielding batches.",
                    "start_line": 580,
                    "end_line": 591,
                    "variables": {
                        "item": [
                            590,
                            591
                        ],
                        "seq": [
                            590
                        ]
                    },
                    "filtered_variables": {
                        "item": [
                            590,
                            591
                        ],
                        "seq": [
                            590
                        ]
                    },
                    "diff_line_number": 591,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from .. import losses\nfrom ..utils.generic_utils import to_list",
                    "start_line": 12,
                    "end_line": 13
                }
            ],
            "inscope_functions": [
                "def standardize_single_array(x):\n    if x is None:\n        return None\n    elif K.is_tensor(x):\n        shape = K.int_shape(x)\n        if shape is None or shape[0] is None:\n            raise ValueError(\n                'When feeding symbolic tensors to a model, we expect the'\n                'tensors to have a static batch size. '\n                'Got tensor with shape: %s' % str(shape))\n        return x\n    elif x.ndim == 1:\n        x = np.expand_dims(x, 1)\n    return x",
                "def standardize_input_data(data,\n                           names,\n                           shapes=None,\n                           check_batch_axis=True,\n                           exception_prefix=''):\n    \"\"\"Normalizes inputs and targets provided by users.\n\n    Users may pass data as a list of arrays, dictionary of arrays,\n    or as a single array. We normalize this to an ordered list of\n    arrays (same order as `names`), while checking that the provided\n    arrays have shapes that match the network's expectations.\n\n    # Arguments\n        data: User-provided input data (polymorphic).\n        names: List of expected array names.\n        shapes: Optional list of expected array shapes.\n        check_batch_axis: Boolean; whether to check that\n            the batch axis of the arrays matches the expected\n            value found in `shapes`.\n        exception_prefix: String prefix used for exception formatting.\n\n    # Returns\n        List of standardized input arrays (one array per model input).\n\n    # Raises\n        ValueError: in case of improperly formatted user-provided data.\n    \"\"\"\n    if not names:\n        if data is not None and hasattr(data, '__len__') and len(data):\n            raise ValueError('Error when checking model ' +\n                             exception_prefix + ': '\n                             'expected no data, but got:', data)\n        return []\n    if data is None:\n        return [None for _ in range(len(names))]\n\n    if isinstance(data, dict):\n        try:\n            data = [\n                data[x].values\n                if data[x].__class__.__name__ == 'DataFrame' else data[x]\n                for x in names\n            ]\n        except KeyError as e:\n            raise ValueError('No data provided for \"' + e.args[0] +\n                             '\". Need data '\n                             'for each key in: ' + str(names))\n    elif isinstance(data, list):\n        if isinstance(data[0], list):\n            data = [np.asarray(d) for d in data]\n        elif len(names) == 1 and isinstance(data[0], (float, int)):\n            data = [np.asarray(data)]\n        else:\n            data = [\n                x.values if x.__class__.__name__ == 'DataFrame'\n                else x for x in data\n            ]\n    else:\n        data = data.values if data.__class__.__name__ == 'DataFrame' else data\n        data = [data]\n    data = [standardize_single_array(x) for x in data]\n\n    if len(data) != len(names):\n        if data and hasattr(data[0], 'shape'):\n            raise ValueError(\n                'Error when checking model ' + exception_prefix +\n                ': the list of Numpy arrays that you are passing to '\n                'your model is not the size the model expected. '\n                'Expected to see ' + str(len(names)) + ' array(s), '\n                'but instead got the following list of ' +\n                str(len(data)) + ' arrays: ' + str(data)[:200] + '...')\n        elif len(names) > 1:\n            raise ValueError(\n                'Error when checking model ' + exception_prefix +\n                ': you are passing a list as input to your model, '\n                'but the model expects a list of ' + str(len(names)) +\n                ' Numpy arrays instead. '\n                'The list you passed was: ' + str(data)[:200])\n        elif len(data) == 1 and not hasattr(data[0], 'shape'):\n            raise TypeError('Error when checking model ' + exception_prefix +\n                            ': data should be a Numpy array, or list/dict of '\n                            'Numpy arrays. Found: ' + str(data)[:200] + '...')\n        elif len(names) == 1:\n            data = [np.asarray(data)]\n\n    # Check shapes compatibility.\n    if shapes:\n        for i in range(len(names)):\n            if shapes[i] is not None and not K.is_tensor(data[i]):\n                data_shape = data[i].shape\n                shape = shapes[i]\n                if data[i].ndim != len(shape):\n                    raise ValueError(\n                        'Error when checking ' + exception_prefix +\n                        ': expected ' + names[i] + ' to have ' +\n                        str(len(shape)) + ' dimensions, but got array '\n                        'with shape ' + str(data_shape))\n                if not check_batch_axis:\n                    data_shape = data_shape[1:]\n                    shape = shape[1:]\n                for dim, ref_dim in zip(data_shape, shape):\n                    if ref_dim != dim and ref_dim:\n                        raise ValueError(\n                            'Error when checking ' + exception_prefix +\n                            ': expected ' + names[i] + ' to have shape ' +\n                            str(shape) + ' but got array with shape ' +\n                            str(data_shape))\n    return data",
                "def standardize_sample_or_class_weights(x_weight,\n                                        output_names,\n                                        weight_type):\n    \"\"\"Maps `sample_weight` or `class_weight` to model outputs.\n\n    # Arguments\n        x_weight: User-provided `sample_weight` or `class_weight` argument.\n        output_names: List of output names (strings) in the model.\n        weight_type: A string used purely for exception printing.\n\n    # Returns\n        A list of `sample_weight` or `class_weight` where there are exactly\n            one element per model output.\n\n    # Raises\n        ValueError: In case of invalid user-provided argument.\n    \"\"\"\n    if x_weight is None or len(x_weight) == 0:\n        return [None for _ in output_names]\n    if len(output_names) == 1:\n        if isinstance(x_weight, list) and len(x_weight) == 1:\n            return x_weight\n        if isinstance(x_weight, dict) and output_names[0] in x_weight:\n            return [x_weight[output_names[0]]]\n        else:\n            return [x_weight]\n    if isinstance(x_weight, list):\n        if len(x_weight) != len(output_names):\n            raise ValueError('Provided `' + weight_type + '` was a list of ' +\n                             str(len(x_weight)) +\n                             ' elements, but the model has ' +\n                             str(len(output_names)) + ' outputs. '\n                             'You should provide one `' + weight_type + '`'\n                             'array per model output.')\n        return x_weight\n    if isinstance(x_weight, dict):\n        x_weights = []\n        for name in output_names:\n            x_weights.append(x_weight.get(name))\n        return x_weights\n    else:\n        raise TypeError('The model has multiple outputs, so `' +\n                        weight_type + '` '\n                        'should be either a list or a dict. '\n                        'Provided `' + weight_type +\n                        '` type not understood: ' +\n                        str(x_weight))",
                "def standardize_class_weights(class_weight, output_names):\n    return standardize_sample_or_class_weights(class_weight,\n                                               output_names,\n                                               'class_weight')",
                "def standardize_sample_weights(sample_weight, output_names):\n    return standardize_sample_or_class_weights(sample_weight,\n                                               output_names,\n                                               'sample_weight')",
                "def check_array_length_consistency(inputs, targets, weights=None):\n    \"\"\"Checks if batch axes are the same for Numpy arrays.\n\n    # Arguments\n        inputs: list of Numpy arrays of inputs.\n        targets: list of Numpy arrays of targets.\n        weights: list of Numpy arrays of sample weights.\n\n    # Raises\n        ValueError: in case of incorrectly formatted data.\n    \"\"\"\n    def set_of_lengths(x):\n        # return a set with the variation between\n        # different shapes, with None => 0\n        if x is None:\n            return {0}\n        else:\n            return set([0 if y is None else int(y.shape[0]) for y in x])\n\n    set_x = set_of_lengths(inputs)\n    set_y = set_of_lengths(targets)\n    set_w = set_of_lengths(weights)\n    if len(set_x) > 1:\n        raise ValueError('All input arrays (x) should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([x.shape for x in inputs]))\n    if len(set_y) > 1:\n        raise ValueError('All target arrays (y) should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([y.shape for y in targets]))\n    if set_x and set_y and list(set_x)[0] != list(set_y)[0]:\n        raise ValueError('Input arrays should have '\n                         'the same number of samples as target arrays. '\n                         'Found ' + str(list(set_x)[0]) + ' input samples '\n                         'and ' + str(list(set_y)[0]) + ' target samples.')\n    if len(set_w) > 1:\n        raise ValueError('All sample_weight arrays should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([w.shape for w in weights]))\n    if set_y and set_w and list(set_y)[0] != list(set_w)[0]:\n        raise ValueError('Sample_weight arrays should have '\n                         'the same number of samples as target arrays. Got ' +\n                         str(list(set_y)[0]) + ' input samples and ' +\n                         str(list(set_w)[0]) + ' target samples.')",
                "def check_loss_and_target_compatibility(targets, loss_fns, output_shapes):\n    \"\"\"Does validation on the compatibility of targets and loss functions.\n\n    This helps prevent users from using loss functions incorrectly.\n\n    # Arguments\n        targets: list of Numpy arrays of targets.\n        loss_fns: list of loss functions.\n        output_shapes: list of shapes of model outputs.\n\n    # Raises\n        ValueError: if a loss function or target array\n            is incompatible with an output.\n    \"\"\"\n    key_losses = {losses.mean_squared_error,\n                  losses.binary_crossentropy,\n                  losses.categorical_crossentropy}\n    for y, loss, shape in zip(targets, loss_fns, output_shapes):\n        if y is None or loss is None:\n            continue\n        if loss is losses.categorical_crossentropy:\n            if y.shape[-1] == 1:\n                raise ValueError(\n                    'You are passing a target array of shape ' + str(y.shape) +\n                    ' while using as loss `categorical_crossentropy`. '\n                    '`categorical_crossentropy` expects '\n                    'targets to be binary matrices (1s and 0s) '\n                    'of shape (samples, classes). '\n                    'If your targets are integer classes, '\n                    'you can convert them to the expected format via:\\n'\n                    '```\\n'\n                    'from keras.utils import to_categorical\\n'\n                    'y_binary = to_categorical(y_int)\\n'\n                    '```\\n'\n                    '\\n'\n                    'Alternatively, you can use the loss function '\n                    '`sparse_categorical_crossentropy` instead, '\n                    'which does expect integer targets.')\n        if loss in key_losses:\n            for target_dim, out_dim in zip(y.shape[1:], shape[1:]):\n                if out_dim is not None and target_dim != out_dim:\n                    raise ValueError(\n                        'A target array with shape ' + str(y.shape) +\n                        ' was passed for an output of shape ' + str(shape) +\n                        ' while using as loss `' + loss.__name__ + '`. '\n                        'This loss expects '\n                        'targets to have the same shape '\n                        'as the output.')",
                "def collect_metrics(metrics, output_names):\n    \"\"\"Maps metric functions to model outputs.\n\n    # Arguments\n        metrics: a list or dict of metric functions.\n        output_names: a list of the names (strings) of model outputs.\n\n    # Returns\n        A list (one entry per model output) of lists of metric functions.\n        For instance, if the model has 2 outputs, and for the first output\n        we want to compute \"binary_accuracy\" and \"binary_crossentropy\",\n        and just \"binary_accuracy\" for the second output,\n        the list would look like:\n            `[[binary_accuracy, binary_crossentropy], [binary_accuracy]]`\n\n    # Raises\n        TypeError: if an incorrect type is passed for the `metrics` argument.\n    \"\"\"\n    if not metrics:\n        return [[] for _ in output_names]\n    if isinstance(metrics, list):\n        # we then apply all metrics to all outputs.\n        return [copy.copy(metrics) for _ in output_names]\n    elif isinstance(metrics, dict):\n        nested_metrics = []\n        for name in output_names:\n            output_metrics = metrics.get(name, [])\n            output_metrics = to_list(output_metrics)\n            nested_metrics.append(output_metrics)\n        return nested_metrics\n    else:\n        raise TypeError('Type of `metrics` argument not understood. '\n                        'Expected a list or dictionary, found: ' +\n                        str(metrics))",
                "def batch_shuffle(index_array, batch_size):\n    \"\"\"Shuffles an array in a batch-wise fashion.\n\n    Useful for shuffling HDF5 arrays\n    (where one cannot access arbitrary indices).\n\n    # Arguments\n        index_array: array of indices to be shuffled.\n        batch_size: integer.\n\n    # Returns\n        The `index_array` array, shuffled in a batch-wise fashion.\n    \"\"\"\n    batch_count = int(len(index_array) / batch_size)\n    # to reshape we need to be cleanly divisible by batch size\n    # we stash extra items and reappend them after shuffling\n    last_batch = index_array[batch_count * batch_size:]\n    index_array = index_array[:batch_count * batch_size]\n    index_array = index_array.reshape((batch_count, batch_size))\n    np.random.shuffle(index_array)\n    index_array = index_array.flatten()\n    return np.append(index_array, last_batch)",
                "def make_batches(size, batch_size):\n    \"\"\"Returns a list of batch indices (tuples of indices).\n\n    # Arguments\n        size: Integer, total size of the data to slice into batches.\n        batch_size: Integer, batch size.\n\n    # Returns\n        A list of tuples of array indices.\n    \"\"\"\n    num_batches = (size + batch_size - 1) // batch_size  # round up\n    return [(i * batch_size, min(size, (i + 1) * batch_size))\n            for i in range(num_batches)]",
                "def weighted_masked_objective(fn):\n    \"\"\"Adds support for masking and sample-weighting to an objective function.\n\n    It transforms an objective function `fn(y_true, y_pred)`\n    into a sample-weighted, cost-masked objective function\n    `fn(y_true, y_pred, weights, mask)`.\n\n    # Arguments\n        fn: The objective function to wrap,\n            with signature `fn(y_true, y_pred)`.\n\n    # Returns\n        A function with signature `fn(y_true, y_pred, weights, mask)`.\n    \"\"\"\n    if fn is None:\n        return None\n\n    def weighted(y_true, y_pred, weights, mask=None):\n        \"\"\"Wrapper function.\n\n        # Arguments\n            y_true: `y_true` argument of `fn`.\n            y_pred: `y_pred` argument of `fn`.\n            weights: Weights tensor.\n            mask: Mask tensor.\n\n        # Returns\n            Scalar tensor.\n        \"\"\"\n        # score_array has ndim >= 2\n        score_array = fn(y_true, y_pred)\n        if mask is not None:\n            # Cast the mask to floatX to avoid float64 upcasting in Theano\n            mask = K.cast(mask, K.floatx())\n            # mask should have the same shape as score_array\n            score_array *= mask\n            #  the loss per batch should be proportional\n            #  to the number of unmasked samples.\n            score_array /= K.mean(mask)\n\n        # apply sample weighting\n        if weights is not None:\n            # reduce score_array to same ndim as weight array\n            ndim = K.ndim(score_array)\n            weight_ndim = K.ndim(weights)\n            score_array = K.mean(score_array,\n                                 axis=list(range(weight_ndim, ndim)))\n            score_array *= weights\n            score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))\n        return K.mean(score_array)\n    return weighted",
                "def standardize_weights(y,\n                        sample_weight=None,\n                        class_weight=None,\n                        sample_weight_mode=None):\n    \"\"\"Performs sample weight validation and standardization.\n\n    Everything gets normalized to a single sample-wise (or timestep-wise)\n    weight array.\n\n    # Arguments\n        y: Numpy array of model targets to be weighted.\n        sample_weight: User-provided `sample_weight` argument.\n        class_weight: User-provided `class_weight` argument.\n        sample_weight_mode: One of `None` or `\"temporal\"`.\n            `\"temporal\"` indicated that we expect 2D weight data\n            that will be applied to the last 2 dimensions of\n            the targets (i.e. we are weighting timesteps, not samples).\n\n    # Returns\n        A Numpy array of target weights, one entry per sample to weight.\n\n    # Raises\n        ValueError: In case of invalid user-provided arguments.\n    \"\"\"\n    if sample_weight_mode is not None:\n        if sample_weight_mode != 'temporal':\n            raise ValueError('\"sample_weight_mode '\n                             'should be None or \"temporal\". '\n                             'Found: ' + str(sample_weight_mode))\n        if len(y.shape) < 3:\n            raise ValueError('Found a sample_weight array for '\n                             'an input with shape ' +\n                             str(y.shape) + '. '\n                             'Timestep-wise sample weighting (use of '\n                             'sample_weight_mode=\"temporal\") is restricted to '\n                             'outputs that are at least 3D, i.e. that have '\n                             'a time dimension.')\n        if sample_weight is not None and len(sample_weight.shape) != 2:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + '. '\n                             'In order to use timestep-wise sample weighting, '\n                             'you should pass a 2D sample_weight array.')\n    else:\n        if sample_weight is not None and len(sample_weight.shape) != 1:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + '. '\n                             'In order to use timestep-wise sample weights, '\n                             'you should specify '\n                             'sample_weight_mode=\"temporal\" '\n                             'in compile(). If you just mean to use '\n                             'sample-wise weights, make sure your '\n                             'sample_weight array is 1D.')\n\n    if sample_weight is not None and class_weight is not None:\n        warnings.warn('Found both `sample_weight` and `class_weight`: '\n                      '`class_weight` argument will be ignored.')\n\n    if sample_weight is not None:\n        if len(sample_weight.shape) > len(y.shape):\n            raise ValueError('Found a sample_weight with shape' +\n                             str(sample_weight.shape) + '.'\n                             'Expected sample_weight with rank '\n                             'less than or equal to ' + str(len(y.shape)))\n\n        if y.shape[:sample_weight.ndim] != sample_weight.shape:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) +\n                             ' for an input with shape ' +\n                             str(y.shape) + '. '\n                             'sample_weight cannot be broadcast.')\n        return sample_weight\n    elif isinstance(class_weight, dict):\n        if len(y.shape) > 2:\n            raise ValueError('`class_weight` not supported for '\n                             '3+ dimensional targets.')\n        if y.shape[1] > 1:\n            y_classes = np.argmax(y, axis=1)\n        elif y.shape[1] == 1:\n            y_classes = np.reshape(y, y.shape[0])\n        else:\n            y_classes = y\n\n        weights = np.asarray([class_weight[cls] for cls in y_classes\n                              if cls in class_weight])\n\n        if len(weights) != len(y_classes):\n            # subtract the sets to pick all missing classes\n            existing_classes = set(y_classes)\n            existing_class_weight = set(class_weight.keys())\n            raise ValueError('`class_weight` must contain '\n                             'all classes in the data.'\n                             ' The classes %s exist in the data but not in '\n                             '`class_weight`.'\n                             % (existing_classes - existing_class_weight))\n        return weights\n    else:\n        if sample_weight_mode is None:\n            return np.ones((y.shape[0],), dtype=K.floatx())\n        else:\n            return np.ones((y.shape[0], y.shape[1]), dtype=K.floatx())",
                "def check_num_samples(ins,\n                      batch_size=None,\n                      steps=None,\n                      steps_name='steps'):\n    \"\"\"Checks the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When `steps` is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input Numpy array. When `steps` is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None and batch_size is not None:\n        raise ValueError(\n            'If ' + steps_name + ' is set, the `batch_size` must be None.')\n\n    if not ins or any(K.is_tensor(x) for x in ins):\n        if steps is None:\n            raise ValueError(\n                'If your data is in the form of symbolic tensors, '\n                'you should specify the `' + steps_name + '` argument '\n                '(instead of the `batch_size` argument, '\n                'because symbolic tensors are expected to produce '\n                'batches of input data).')\n        return None\n\n    if hasattr(ins[0], 'shape'):\n        return int(ins[0].shape[0])\n    return None  # Edge case where ins == [static_learning_phase]",
                "def iter_sequence_infinite(seq):\n    \"\"\"Iterate indefinitely over a Sequence.\n\n    # Arguments\n        seq: Sequence object\n\n    # Returns\n        Generator yielding batches.\n    \"\"\"\n    while True:\n        for item in seq:\n            yield item",
                "def set_of_lengths(x):\n    # return a set with the variation between\n    # different shapes, with None => 0\n    if x is None:\n        return {0}\n    else:\n        return set([0 if y is None else int(y.shape[0]) for y in x])",
                "def weighted(y_true, y_pred, weights, mask=None):\n    \"\"\"Wrapper function.\n\n    # Arguments\n        y_true: `y_true` argument of `fn`.\n        y_pred: `y_pred` argument of `fn`.\n        weights: Weights tensor.\n        mask: Mask tensor.\n\n    # Returns\n        Scalar tensor.\n    \"\"\"\n    # score_array has ndim >= 2\n    score_array = fn(y_true, y_pred)\n    if mask is not None:\n        # Cast the mask to floatX to avoid float64 upcasting in Theano\n        mask = K.cast(mask, K.floatx())\n        # mask should have the same shape as score_array\n        score_array *= mask\n        #  the loss per batch should be proportional\n        #  to the number of unmasked samples.\n        score_array /= K.mean(mask)\n\n    # apply sample weighting\n    if weights is not None:\n        # reduce score_array to same ndim as weight array\n        ndim = K.ndim(score_array)\n        weight_ndim = K.ndim(weights)\n        score_array = K.mean(score_array,\n                             axis=list(range(weight_ndim, ndim)))\n        score_array *= weights\n        score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))\n    return K.mean(score_array)"
            ],
            "inscope_function_signatures": [
                "standardize_single_array(x)",
                "standardize_input_data(data, names, shapes=None, check_batch_axis=True, exception_prefix='')",
                "standardize_sample_or_class_weights(x_weight, output_names, weight_type)",
                "standardize_class_weights(class_weight, output_names)",
                "standardize_sample_weights(sample_weight, output_names)",
                "check_array_length_consistency(inputs, targets, weights=None)",
                "check_loss_and_target_compatibility(targets, loss_fns, output_shapes)",
                "collect_metrics(metrics, output_names)",
                "batch_shuffle(index_array, batch_size)",
                "make_batches(size, batch_size)",
                "weighted_masked_objective(fn)",
                "standardize_weights(y, sample_weight=None, class_weight=None, sample_weight_mode=None)",
                "check_num_samples(ins, batch_size=None, steps=None, steps_name='steps')",
                "iter_sequence_infinite(seq)",
                "set_of_lengths(x)",
                "weighted(y_true, y_pred, weights, mask=None)"
            ],
            "variables_in_file": {
                "x": [
                    228,
                    71,
                    72,
                    73,
                    92,
                    17,
                    19,
                    20,
                    220,
                    86,
                    87,
                    565,
                    217,
                    26,
                    27,
                    28,
                    29
                ],
                "K.is_tensor": [
                    120,
                    19,
                    565
                ],
                "K": [
                    417,
                    418,
                    419,
                    422,
                    423,
                    524,
                    526,
                    19,
                    20,
                    565,
                    407,
                    120,
                    412
                ],
                "shape": [
                    288,
                    121,
                    576,
                    131,
                    132,
                    292,
                    137,
                    266,
                    20,
                    21,
                    25,
                    122,
                    123,
                    127
                ],
                "K.int_shape": [
                    20
                ],
                "ValueError": [
                    516,
                    134,
                    271,
                    22,
                    290,
                    170,
                    562,
                    567,
                    61,
                    453,
                    457,
                    76,
                    465,
                    471,
                    96,
                    226,
                    230,
                    486,
                    104,
                    234,
                    492,
                    239,
                    243,
                    500,
                    124
                ],
                "str": [
                    128,
                    137,
                    138,
                    272,
                    25,
                    291,
                    292,
                    171,
                    173,
                    188,
                    455,
                    459,
                    332,
                    78,
                    466,
                    472,
                    100,
                    228,
                    102,
                    487,
                    232,
                    489,
                    107,
                    236,
                    109,
                    237,
                    493,
                    495,
                    113,
                    241,
                    245,
                    246,
                    127
                ],
                "x.ndim": [
                    27
                ],
                "np.expand_dims": [
                    28
                ],
                "np": [
                    354,
                    356,
                    524,
                    526,
                    81,
                    115,
                    83,
                    503,
                    505,
                    28,
                    509
                ],
                "names": [
                    66,
                    100,
                    103,
                    136,
                    73,
                    107,
                    78,
                    82,
                    114,
                    119,
                    126,
                    59,
                    94
                ],
                "data": [
                    139,
                    60,
                    63,
                    65,
                    68,
                    70,
                    71,
                    72,
                    79,
                    80,
                    81,
                    82,
                    83,
                    85,
                    87,
                    90,
                    91,
                    92,
                    94,
                    95,
                    102,
                    109,
                    110,
                    113,
                    115,
                    120,
                    121,
                    123
                ],
                "hasattr": [
                    60,
                    575,
                    110,
                    95
                ],
                "len": [
                    512,
                    159,
                    161,
                    162,
                    169,
                    171,
                    173,
                    60,
                    66,
                    456,
                    464,
                    82,
                    470,
                    348,
                    94,
                    225,
                    100,
                    229,
                    102,
                    103,
                    485,
                    489,
                    107,
                    110,
                    238,
                    114,
                    499,
                    119,
                    123,
                    127
                ],
                "exception_prefix": [
                    97,
                    135,
                    105,
                    111,
                    125,
                    62
                ],
                "_": [
                    160,
                    321,
                    66,
                    318
                ],
                "range": [
                    66,
                    371,
                    420,
                    119
                ],
                "isinstance": [
                    162,
                    322,
                    68,
                    164,
                    168,
                    79,
                    80,
                    177,
                    82,
                    498,
                    319
                ],
                "dict": [
                    322,
                    164,
                    68,
                    177,
                    498
                ],
                "__class__.__name__": [
                    72
                ],
                "__class__": [
                    72
                ],
                "values": [
                    71
                ],
                "KeyError": [
                    75
                ],
                "e.args": [
                    76
                ],
                "e": [
                    76
                ],
                "list": [
                    162,
                    420,
                    168,
                    233,
                    236,
                    237,
                    79,
                    80,
                    242,
                    245,
                    246,
                    319
                ],
                "np.asarray": [
                    115,
                    81,
                    83,
                    509
                ],
                "d": [
                    81
                ],
                "float": [
                    82
                ],
                "int": [
                    576,
                    82,
                    220,
                    348
                ],
                "x.__class__.__name__": [
                    86
                ],
                "x.__class__": [
                    86
                ],
                "x.values": [
                    86
                ],
                "data.__class__.__name__": [
                    90
                ],
                "data.__class__": [
                    90
                ],
                "data.values": [
                    90
                ],
                "standardize_single_array": [
                    92
                ],
                "TypeError": [
                    183,
                    330,
                    111
                ],
                "shapes": [
                    120,
                    122,
                    118
                ],
                "i": [
                    136,
                    370,
                    371,
                    119,
                    120,
                    121,
                    122,
                    123,
                    126
                ],
                "data_shape": [
                    128,
                    130,
                    132,
                    138,
                    121
                ],
                "ndim": [
                    417,
                    123,
                    420
                ],
                "check_batch_axis": [
                    129
                ],
                "dim": [
                    132,
                    133
                ],
                "ref_dim": [
                    132,
                    133
                ],
                "zip": [
                    288,
                    266,
                    132
                ],
                "x_weight": [
                    162,
                    163,
                    164,
                    165,
                    167,
                    168,
                    169,
                    171,
                    176,
                    177,
                    180,
                    188,
                    159
                ],
                "output_names": [
                    160,
                    161,
                    193,
                    321,
                    164,
                    165,
                    324,
                    199,
                    169,
                    173,
                    179,
                    318
                ],
                "weight_type": [
                    184,
                    186,
                    170,
                    174
                ],
                "x_weights": [
                    178,
                    180,
                    181
                ],
                "name": [
                    179,
                    180,
                    325,
                    324
                ],
                "x_weights.append": [
                    180
                ],
                "x_weight.get": [
                    180
                ],
                "standardize_sample_or_class_weights": [
                    192,
                    198
                ],
                "class_weight": [
                    192,
                    480,
                    515,
                    498,
                    509,
                    510
                ],
                "sample_weight": [
                    480,
                    484,
                    485,
                    198,
                    487,
                    491,
                    493,
                    464,
                    497,
                    466,
                    470,
                    472
                ],
                "set": [
                    514,
                    515,
                    220
                ],
                "y": [
                    266,
                    267,
                    524,
                    270,
                    526,
                    272,
                    288,
                    291,
                    456,
                    459,
                    220,
                    485,
                    232,
                    489,
                    491,
                    495,
                    499,
                    502,
                    503,
                    504,
                    505,
                    507
                ],
                "y.shape": [
                    288,
                    291,
                    485,
                    232,
                    456,
                    489,
                    459,
                    491,
                    524,
                    270,
                    495,
                    272,
                    526,
                    499,
                    502,
                    504,
                    505,
                    220
                ],
                "set_x": [
                    225,
                    236,
                    233,
                    222
                ],
                "set_of_lengths": [
                    224,
                    222,
                    223
                ],
                "inputs": [
                    228,
                    222
                ],
                "set_y": [
                    229,
                    233,
                    237,
                    242,
                    245,
                    223
                ],
                "targets": [
                    232,
                    266,
                    223
                ],
                "set_w": [
                    224,
                    242,
                    238,
                    246
                ],
                "weights": [
                    224,
                    512,
                    418,
                    421,
                    422,
                    521,
                    241,
                    509,
                    415
                ],
                "x.shape": [
                    228
                ],
                "w.shape": [
                    241
                ],
                "w": [
                    241
                ],
                "key_losses": [
                    287,
                    263
                ],
                "losses.mean_squared_error": [
                    263
                ],
                "losses": [
                    264,
                    265,
                    269,
                    263
                ],
                "losses.binary_crossentropy": [
                    264
                ],
                "losses.categorical_crossentropy": [
                    265,
                    269
                ],
                "loss": [
                    293,
                    266,
                    267,
                    269,
                    287
                ],
                "loss_fns": [
                    266
                ],
                "output_shapes": [
                    266
                ],
                "target_dim": [
                    288,
                    289
                ],
                "out_dim": [
                    288,
                    289
                ],
                "loss.__name__": [
                    293
                ],
                "metrics": [
                    321,
                    322,
                    325,
                    332,
                    317,
                    319
                ],
                "copy.copy": [
                    321
                ],
                "copy": [
                    321
                ],
                "nested_metrics": [
                    328,
                    323,
                    327
                ],
                "output_metrics": [
                    325,
                    326,
                    327
                ],
                "metrics.get": [
                    325
                ],
                "to_list": [
                    326
                ],
                "nested_metrics.append": [
                    327
                ],
                "batch_count": [
                    352,
                    353,
                    348,
                    351
                ],
                "index_array": [
                    352,
                    353,
                    354,
                    355,
                    356,
                    348,
                    351
                ],
                "batch_size": [
                    352,
                    353,
                    369,
                    370,
                    561,
                    348,
                    351
                ],
                "last_batch": [
                    356,
                    351
                ],
                "index_array.reshape": [
                    353
                ],
                "np.random.shuffle": [
                    354
                ],
                "np.random": [
                    354
                ],
                "index_array.flatten": [
                    355
                ],
                "np.append": [
                    356
                ],
                "num_batches": [
                    369,
                    371
                ],
                "size": [
                    369,
                    370
                ],
                "min": [
                    370
                ],
                "fn": [
                    404,
                    388
                ],
                "score_array": [
                    417,
                    419,
                    421,
                    422,
                    423,
                    404,
                    409,
                    412
                ],
                "y_true": [
                    404
                ],
                "y_pred": [
                    404
                ],
                "mask": [
                    409,
                    412,
                    405,
                    407
                ],
                "K.cast": [
                    422,
                    407
                ],
                "K.floatx": [
                    524,
                    526,
                    422,
                    407
                ],
                "K.mean": [
                    419,
                    412,
                    422,
                    423
                ],
                "K.ndim": [
                    417,
                    418
                ],
                "weight_ndim": [
                    418,
                    420
                ],
                "K.not_equal": [
                    422
                ],
                "weighted": [
                    424
                ],
                "sample_weight_mode": [
                    523,
                    451,
                    452,
                    455
                ],
                "sample_weight.shape": [
                    485,
                    487,
                    491,
                    493,
                    464,
                    466,
                    470,
                    472
                ],
                "warnings.warn": [
                    481
                ],
                "warnings": [
                    481
                ],
                "sample_weight.ndim": [
                    491
                ],
                "y_classes": [
                    512,
                    514,
                    503,
                    505,
                    507,
                    509
                ],
                "np.argmax": [
                    503
                ],
                "np.reshape": [
                    505
                ],
                "cls": [
                    509,
                    510
                ],
                "existing_classes": [
                    520,
                    514
                ],
                "existing_class_weight": [
                    520,
                    515
                ],
                "class_weight.keys": [
                    515
                ],
                "np.ones": [
                    524,
                    526
                ],
                "steps": [
                    561,
                    566
                ],
                "steps_name": [
                    569,
                    563
                ],
                "ins": [
                    576,
                    565,
                    575
                ],
                "any": [
                    565
                ],
                "item": [
                    590,
                    591
                ],
                "seq": [
                    590
                ]
            },
            "filtered_variables_in_file": {
                "x": [
                    228,
                    71,
                    72,
                    73,
                    92,
                    17,
                    19,
                    20,
                    220,
                    86,
                    87,
                    565,
                    217,
                    26,
                    27,
                    28,
                    29
                ],
                "K.is_tensor": [
                    120,
                    19,
                    565
                ],
                "K": [
                    417,
                    418,
                    419,
                    422,
                    423,
                    524,
                    526,
                    19,
                    20,
                    565,
                    407,
                    120,
                    412
                ],
                "shape": [
                    288,
                    121,
                    576,
                    131,
                    132,
                    292,
                    137,
                    266,
                    20,
                    21,
                    25,
                    122,
                    123,
                    127
                ],
                "K.int_shape": [
                    20
                ],
                "x.ndim": [
                    27
                ],
                "np.expand_dims": [
                    28
                ],
                "np": [
                    354,
                    356,
                    524,
                    526,
                    81,
                    115,
                    83,
                    503,
                    505,
                    28,
                    509
                ],
                "names": [
                    66,
                    100,
                    103,
                    136,
                    73,
                    107,
                    78,
                    82,
                    114,
                    119,
                    126,
                    59,
                    94
                ],
                "data": [
                    139,
                    60,
                    63,
                    65,
                    68,
                    70,
                    71,
                    72,
                    79,
                    80,
                    81,
                    82,
                    83,
                    85,
                    87,
                    90,
                    91,
                    92,
                    94,
                    95,
                    102,
                    109,
                    110,
                    113,
                    115,
                    120,
                    121,
                    123
                ],
                "exception_prefix": [
                    97,
                    135,
                    105,
                    111,
                    125,
                    62
                ],
                "_": [
                    160,
                    321,
                    66,
                    318
                ],
                "__class__.__name__": [
                    72
                ],
                "__class__": [
                    72
                ],
                "values": [
                    71
                ],
                "e.args": [
                    76
                ],
                "e": [
                    76
                ],
                "np.asarray": [
                    115,
                    81,
                    83,
                    509
                ],
                "d": [
                    81
                ],
                "x.__class__.__name__": [
                    86
                ],
                "x.__class__": [
                    86
                ],
                "x.values": [
                    86
                ],
                "data.__class__.__name__": [
                    90
                ],
                "data.__class__": [
                    90
                ],
                "data.values": [
                    90
                ],
                "standardize_single_array": [
                    92
                ],
                "shapes": [
                    120,
                    122,
                    118
                ],
                "i": [
                    136,
                    370,
                    371,
                    119,
                    120,
                    121,
                    122,
                    123,
                    126
                ],
                "data_shape": [
                    128,
                    130,
                    132,
                    138,
                    121
                ],
                "ndim": [
                    417,
                    123,
                    420
                ],
                "check_batch_axis": [
                    129
                ],
                "dim": [
                    132,
                    133
                ],
                "ref_dim": [
                    132,
                    133
                ],
                "x_weight": [
                    162,
                    163,
                    164,
                    165,
                    167,
                    168,
                    169,
                    171,
                    176,
                    177,
                    180,
                    188,
                    159
                ],
                "output_names": [
                    160,
                    161,
                    193,
                    321,
                    164,
                    165,
                    324,
                    199,
                    169,
                    173,
                    179,
                    318
                ],
                "weight_type": [
                    184,
                    186,
                    170,
                    174
                ],
                "x_weights": [
                    178,
                    180,
                    181
                ],
                "name": [
                    179,
                    180,
                    325,
                    324
                ],
                "x_weights.append": [
                    180
                ],
                "x_weight.get": [
                    180
                ],
                "standardize_sample_or_class_weights": [
                    192,
                    198
                ],
                "class_weight": [
                    192,
                    480,
                    515,
                    498,
                    509,
                    510
                ],
                "sample_weight": [
                    480,
                    484,
                    485,
                    198,
                    487,
                    491,
                    493,
                    464,
                    497,
                    466,
                    470,
                    472
                ],
                "y": [
                    266,
                    267,
                    524,
                    270,
                    526,
                    272,
                    288,
                    291,
                    456,
                    459,
                    220,
                    485,
                    232,
                    489,
                    491,
                    495,
                    499,
                    502,
                    503,
                    504,
                    505,
                    507
                ],
                "y.shape": [
                    288,
                    291,
                    485,
                    232,
                    456,
                    489,
                    459,
                    491,
                    524,
                    270,
                    495,
                    272,
                    526,
                    499,
                    502,
                    504,
                    505,
                    220
                ],
                "set_x": [
                    225,
                    236,
                    233,
                    222
                ],
                "set_of_lengths": [
                    224,
                    222,
                    223
                ],
                "inputs": [
                    228,
                    222
                ],
                "set_y": [
                    229,
                    233,
                    237,
                    242,
                    245,
                    223
                ],
                "targets": [
                    232,
                    266,
                    223
                ],
                "set_w": [
                    224,
                    242,
                    238,
                    246
                ],
                "weights": [
                    224,
                    512,
                    418,
                    421,
                    422,
                    521,
                    241,
                    509,
                    415
                ],
                "x.shape": [
                    228
                ],
                "w.shape": [
                    241
                ],
                "w": [
                    241
                ],
                "key_losses": [
                    287,
                    263
                ],
                "losses.mean_squared_error": [
                    263
                ],
                "losses": [
                    264,
                    265,
                    269,
                    263
                ],
                "losses.binary_crossentropy": [
                    264
                ],
                "losses.categorical_crossentropy": [
                    265,
                    269
                ],
                "loss": [
                    293,
                    266,
                    267,
                    269,
                    287
                ],
                "loss_fns": [
                    266
                ],
                "output_shapes": [
                    266
                ],
                "target_dim": [
                    288,
                    289
                ],
                "out_dim": [
                    288,
                    289
                ],
                "loss.__name__": [
                    293
                ],
                "metrics": [
                    321,
                    322,
                    325,
                    332,
                    317,
                    319
                ],
                "copy.copy": [
                    321
                ],
                "copy": [
                    321
                ],
                "nested_metrics": [
                    328,
                    323,
                    327
                ],
                "output_metrics": [
                    325,
                    326,
                    327
                ],
                "metrics.get": [
                    325
                ],
                "to_list": [
                    326
                ],
                "nested_metrics.append": [
                    327
                ],
                "batch_count": [
                    352,
                    353,
                    348,
                    351
                ],
                "index_array": [
                    352,
                    353,
                    354,
                    355,
                    356,
                    348,
                    351
                ],
                "batch_size": [
                    352,
                    353,
                    369,
                    370,
                    561,
                    348,
                    351
                ],
                "last_batch": [
                    356,
                    351
                ],
                "index_array.reshape": [
                    353
                ],
                "np.random.shuffle": [
                    354
                ],
                "np.random": [
                    354
                ],
                "index_array.flatten": [
                    355
                ],
                "np.append": [
                    356
                ],
                "num_batches": [
                    369,
                    371
                ],
                "size": [
                    369,
                    370
                ],
                "fn": [
                    404,
                    388
                ],
                "score_array": [
                    417,
                    419,
                    421,
                    422,
                    423,
                    404,
                    409,
                    412
                ],
                "y_true": [
                    404
                ],
                "y_pred": [
                    404
                ],
                "mask": [
                    409,
                    412,
                    405,
                    407
                ],
                "K.cast": [
                    422,
                    407
                ],
                "K.floatx": [
                    524,
                    526,
                    422,
                    407
                ],
                "K.mean": [
                    419,
                    412,
                    422,
                    423
                ],
                "K.ndim": [
                    417,
                    418
                ],
                "weight_ndim": [
                    418,
                    420
                ],
                "K.not_equal": [
                    422
                ],
                "weighted": [
                    424
                ],
                "sample_weight_mode": [
                    523,
                    451,
                    452,
                    455
                ],
                "sample_weight.shape": [
                    485,
                    487,
                    491,
                    493,
                    464,
                    466,
                    470,
                    472
                ],
                "warnings.warn": [
                    481
                ],
                "warnings": [
                    481
                ],
                "sample_weight.ndim": [
                    491
                ],
                "y_classes": [
                    512,
                    514,
                    503,
                    505,
                    507,
                    509
                ],
                "np.argmax": [
                    503
                ],
                "np.reshape": [
                    505
                ],
                "cls": [
                    509,
                    510
                ],
                "existing_classes": [
                    520,
                    514
                ],
                "existing_class_weight": [
                    520,
                    515
                ],
                "class_weight.keys": [
                    515
                ],
                "np.ones": [
                    524,
                    526
                ],
                "steps": [
                    561,
                    566
                ],
                "steps_name": [
                    569,
                    563
                ],
                "ins": [
                    576,
                    565,
                    575
                ],
                "item": [
                    590,
                    591
                ],
                "seq": [
                    590
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/keras_11/keras/utils/data_utils.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "@abstractmethod",
                    "start_line": 343,
                    "end_line": 344
                }
            ],
            "inscope_functions": [
                "def _extract_archive(file_path, path='.', archive_format='auto'):\n    \"\"\"Extracts an archive if it matches tar, tar.gz, tar.bz, or zip formats.\n\n    # Arguments\n        file_path: path to the archive file\n        path: path to extract the archive file\n        archive_format: Archive format to try for extracting the file.\n            Options are 'auto', 'tar', 'zip', and None.\n            'tar' includes tar, tar.gz, and tar.bz files.\n            The default 'auto' is ['tar', 'zip'].\n            None or an empty list will return no matches found.\n\n    # Returns\n        True if a match was found and an archive extraction was completed,\n        False otherwise.\n    \"\"\"\n    if archive_format is None:\n        return False\n    if archive_format == 'auto':\n        archive_format = ['tar', 'zip']\n    if isinstance(archive_format, six.string_types):\n        archive_format = [archive_format]\n\n    for archive_type in archive_format:\n        if archive_type == 'tar':\n            open_fn = tarfile.open\n            is_match_fn = tarfile.is_tarfile\n        if archive_type == 'zip':\n            open_fn = zipfile.ZipFile\n            is_match_fn = zipfile.is_zipfile\n\n        if is_match_fn(file_path):\n            with open_fn(file_path) as archive:\n                try:\n                    archive.extractall(path)\n                except (tarfile.TarError, RuntimeError,\n                        KeyboardInterrupt):\n                    if os.path.exists(path):\n                        if os.path.isfile(path):\n                            os.remove(path)\n                        else:\n                            shutil.rmtree(path)\n                    raise\n            return True\n    return False",
                "def get_file(fname,\n             origin,\n             untar=False,\n             md5_hash=None,\n             file_hash=None,\n             cache_subdir='datasets',\n             hash_algorithm='auto',\n             extract=False,\n             archive_format='auto',\n             cache_dir=None):\n    \"\"\"Downloads a file from a URL if it not already in the cache.\n\n    By default the file at the url `origin` is downloaded to the\n    cache_dir `~/.keras`, placed in the cache_subdir `datasets`,\n    and given the filename `fname`. The final location of a file\n    `example.txt` would therefore be `~/.keras/datasets/example.txt`.\n\n    Files in tar, tar.gz, tar.bz, and zip formats can also be extracted.\n    Passing a hash will verify the file after download. The command line\n    programs `shasum` and `sha256sum` can compute the hash.\n\n    # Arguments\n        fname: Name of the file. If an absolute path `/path/to/file.txt` is\n            specified the file will be saved at that location.\n        origin: Original URL of the file.\n        untar: Deprecated in favor of 'extract'.\n            boolean, whether the file should be decompressed\n        md5_hash: Deprecated in favor of 'file_hash'.\n            md5 hash of the file for verification\n        file_hash: The expected hash string of the file after download.\n            The sha256 and md5 hash algorithms are both supported.\n        cache_subdir: Subdirectory under the Keras cache dir where the file is\n            saved. If an absolute path `/path/to/folder` is\n            specified the file will be saved at that location.\n        hash_algorithm: Select the hash algorithm to verify the file.\n            options are 'md5', 'sha256', and 'auto'.\n            The default 'auto' detects the hash algorithm in use.\n        extract: True tries extracting the file as an Archive, like tar or zip.\n        archive_format: Archive format to try for extracting the file.\n            Options are 'auto', 'tar', 'zip', and None.\n            'tar' includes tar, tar.gz, and tar.bz files.\n            The default 'auto' is ['tar', 'zip'].\n            None or an empty list will return no matches found.\n        cache_dir: Location to store cached files, when None it\n            defaults to the [Keras Directory](/faq/#where-is-the-keras-configuration-filed-stored).\n\n    # Returns\n        Path to the downloaded file\n    \"\"\"  # noqa\n    if cache_dir is None:\n        cache_dir = os.path.join(os.path.expanduser('~'), '.keras')\n    if md5_hash is not None and file_hash is None:\n        file_hash = md5_hash\n        hash_algorithm = 'md5'\n    datadir_base = os.path.expanduser(cache_dir)\n    if not os.access(datadir_base, os.W_OK):\n        datadir_base = os.path.join('/tmp', '.keras')\n    datadir = os.path.join(datadir_base, cache_subdir)\n    if not os.path.exists(datadir):\n        os.makedirs(datadir)\n\n    if untar:\n        untar_fpath = os.path.join(datadir, fname)\n        fpath = untar_fpath + '.tar.gz'\n    else:\n        fpath = os.path.join(datadir, fname)\n\n    download = False\n    if os.path.exists(fpath):\n        # File found; verify integrity if a hash was provided.\n        if file_hash is not None:\n            if not validate_file(fpath, file_hash, algorithm=hash_algorithm):\n                print('A local file was found, but it seems to be '\n                      'incomplete or outdated because the ' + hash_algorithm +\n                      ' file hash does not match the original value of ' +\n                      file_hash + ' so we will re-download the data.')\n                download = True\n    else:\n        download = True\n\n    if download:\n        print('Downloading data from', origin)\n\n        class ProgressTracker(object):\n            # Maintain progbar for the lifetime of download.\n            # This design was chosen for Python 2.7 compatibility.\n            progbar = None\n\n        def dl_progress(count, block_size, total_size):\n            if ProgressTracker.progbar is None:\n                if total_size == -1:\n                    total_size = None\n                ProgressTracker.progbar = Progbar(total_size)\n            else:\n                ProgressTracker.progbar.update(count * block_size)\n\n        error_msg = 'URL fetch failure on {}: {} -- {}'\n        try:\n            try:\n                urlretrieve(origin, fpath, dl_progress)\n            except HTTPError as e:\n                raise Exception(error_msg.format(origin, e.code, e.msg))\n            except URLError as e:\n                raise Exception(error_msg.format(origin, e.errno, e.reason))\n        except (Exception, KeyboardInterrupt):\n            if os.path.exists(fpath):\n                os.remove(fpath)\n            raise\n        ProgressTracker.progbar = None\n\n    if untar:\n        if not os.path.exists(untar_fpath):\n            _extract_archive(fpath, datadir, archive_format='tar')\n        return untar_fpath\n\n    if extract:\n        _extract_archive(fpath, datadir, archive_format)\n\n    return fpath",
                "def _hash_file(fpath, algorithm='sha256', chunk_size=65535):\n    \"\"\"Calculates a file sha256 or md5 hash.\n\n    # Example\n\n    ```python\n        >>> from keras.data_utils import _hash_file\n        >>> _hash_file('/path/to/file.zip')\n        'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n    ```\n\n    # Arguments\n        fpath: path to the file being validated\n        algorithm: hash algorithm, one of 'auto', 'sha256', or 'md5'.\n            The default 'auto' detects the hash algorithm in use.\n        chunk_size: Bytes to read at a time, important for large files.\n\n    # Returns\n        The file hash\n    \"\"\"\n    if (algorithm == 'sha256') or (algorithm == 'auto' and len(hash) == 64):\n        hasher = hashlib.sha256()\n    else:\n        hasher = hashlib.md5()\n\n    with open(fpath, 'rb') as fpath_file:\n        for chunk in iter(lambda: fpath_file.read(chunk_size), b''):\n            hasher.update(chunk)\n\n    return hasher.hexdigest()",
                "def validate_file(fpath, file_hash, algorithm='auto', chunk_size=65535):\n    \"\"\"Validates a file against a sha256 or md5 hash.\n\n    # Arguments\n        fpath: path to the file being validated\n        file_hash:  The expected hash string of the file.\n            The sha256 and md5 hash algorithms are both supported.\n        algorithm: Hash algorithm, one of 'auto', 'sha256', or 'md5'.\n            The default 'auto' detects the hash algorithm in use.\n        chunk_size: Bytes to read at a time, important for large files.\n\n    # Returns\n        Whether the file is valid\n    \"\"\"\n    if ((algorithm == 'sha256') or\n            (algorithm == 'auto' and len(file_hash) == 64)):\n        hasher = 'sha256'\n    else:\n        hasher = 'md5'\n\n    if str(_hash_file(fpath, hasher, chunk_size)) == str(file_hash):\n        return True\n    else:\n        return False",
                "def init_pool(seqs):\n    global _SHARED_SEQUENCES\n    _SHARED_SEQUENCES = seqs",
                "def get_index(uid, i):\n    \"\"\"Get the value from the Sequence `uid` at index `i`.\n\n    To allow multiple Sequences to be used at the same time, we use `uid` to\n    get a specific one. A single Sequence would cause the validation to\n    overwrite the training Sequence.\n\n    # Arguments\n        uid: int, Sequence identifier\n        i: index\n\n    # Returns\n        The value at index `i`.\n    \"\"\"\n    return _SHARED_SEQUENCES[uid][i]",
                "def init_pool_generator(gens, random_seed=None):\n    global _SHARED_SEQUENCES\n    _SHARED_SEQUENCES = gens\n\n    if random_seed is not None:\n        ident = mp.current_process().ident\n        np.random.seed(random_seed + ident)",
                "def next_sample(uid):\n    \"\"\"Get the next value from the generator `uid`.\n\n    To allow multiple generators to be used at the same time, we use `uid` to\n    get a specific one. A single generator would cause the validation to\n    overwrite the training generator.\n\n    # Arguments\n        uid: int, generator identifier\n\n    # Returns\n        The next value of generator `uid`.\n    \"\"\"\n    return six.next(_SHARED_SEQUENCES[uid])",
                "def urlretrieve(url, filename, reporthook=None, data=None):\n    \"\"\"Replacement for `urlretrive` for Python 2.\n\n    Under Python 2, `urlretrieve` relies on `FancyURLopener` from legacy\n    `urllib` module, known to have issues with proxy management.\n\n    # Arguments\n        url: url to retrieve.\n        filename: where to store the retrieved data locally.\n        reporthook: a hook function that will be called once\n            on establishment of the network connection and once\n            after each block read thereafter.\n            The hook will be passed three arguments;\n            a count of blocks transferred so far,\n            a block size in bytes, and the total size of the file.\n        data: `data` argument passed to `urlopen`.\n    \"\"\"\n\n    def chunk_read(response, chunk_size=8192, reporthook=None):\n        content_type = response.info().get('Content-Length')\n        total_size = -1\n        if content_type is not None:\n            total_size = int(content_type.strip())\n        count = 0\n        while True:\n            chunk = response.read(chunk_size)\n            count += 1\n            if reporthook is not None:\n                reporthook(count, chunk_size, total_size)\n            if chunk:\n                yield chunk\n            else:\n                break\n\n    with closing(urlopen(url, data)) as response, open(filename, 'wb') as fd:\n            for chunk in chunk_read(response, reporthook=reporthook):\n                fd.write(chunk)",
                "@abstractmethod\ndef __getitem__(self, index):\n    \"\"\"Gets batch at position `index`.\n\n    # Arguments\n        index: position of the batch in the Sequence.\n\n    # Returns\n        A batch\n    \"\"\"\n    raise NotImplementedError",
                "@abstractmethod\ndef __len__(self):\n    \"\"\"Number of batch in the Sequence.\n\n    # Returns\n        The number of batches in the Sequence.\n    \"\"\"\n    raise NotImplementedError",
                "def on_epoch_end(self):\n    \"\"\"Method called at the end of every epoch.\n    \"\"\"\n    pass",
                "def __iter__(self):\n    \"\"\"Create a generator that iterate over the Sequence.\"\"\"\n    for item in (self[i] for i in range(len(self))):\n        yield item",
                "def __init__(self, sequence,\n             use_multiprocessing=False):\n    self.sequence = sequence\n    self.use_multiprocessing = use_multiprocessing\n\n    global _SEQUENCE_COUNTER\n    if _SEQUENCE_COUNTER is None:\n        try:\n            _SEQUENCE_COUNTER = mp.Value('i', 0)\n        except OSError:\n            # In this case the OS does not allow us to use\n            # multiprocessing. We resort to an int\n            # for enqueuer indexing.\n            _SEQUENCE_COUNTER = 0\n\n    if isinstance(_SEQUENCE_COUNTER, int):\n        self.uid = _SEQUENCE_COUNTER\n        _SEQUENCE_COUNTER += 1\n    else:\n        # Doing Multiprocessing.Value += x is not process-safe.\n        with _SEQUENCE_COUNTER.get_lock():\n            self.uid = _SEQUENCE_COUNTER.value\n            _SEQUENCE_COUNTER.value += 1\n\n    self.workers = 0\n    self.executor_fn = None\n    self.queue = None\n    self.run_thread = None\n    self.stop_signal = None",
                "def is_running(self):\n    return self.stop_signal is not None and not self.stop_signal.is_set()",
                "def start(self, workers=1, max_queue_size=10):\n    \"\"\"Start the handler's workers.\n\n    # Arguments\n        workers: number of worker threads\n        max_queue_size: queue size\n            (when full, workers could block on `put()`)\n    \"\"\"\n    if self.use_multiprocessing:\n        self.executor_fn = self._get_executor_init(workers)\n    else:\n        # We do not need the init since it's threads.\n        self.executor_fn = lambda _: ThreadPool(workers)\n    self.workers = workers\n    self.queue = queue.Queue(max_queue_size)\n    self.stop_signal = threading.Event()\n    self.run_thread = threading.Thread(target=self._run)\n    self.run_thread.daemon = True\n    self.run_thread.start()",
                "def _send_sequence(self):\n    \"\"\"Send current Iterable to all workers.\"\"\"\n    # For new processes that may spawn\n    _SHARED_SEQUENCES[self.uid] = self.sequence",
                "def stop(self, timeout=None):\n    \"\"\"Stops running threads and wait for them to exit, if necessary.\n\n    Should be called by the same thread which called `start()`.\n\n    # Arguments\n        timeout: maximum time to wait on `thread.join()`\n    \"\"\"\n    self.stop_signal.set()\n    with self.queue.mutex:\n        self.queue.queue.clear()\n        self.queue.unfinished_tasks = 0\n        self.queue.not_full.notify()\n    self.run_thread.join(timeout)\n    _SHARED_SEQUENCES[self.uid] = None",
                "@abstractmethod\ndef _run(self):\n    \"\"\"Submits request to the executor and queue the `Future` objects.\"\"\"\n    raise NotImplementedError",
                "@abstractmethod\ndef _get_executor_init(self, workers):\n    \"\"\"Get the Pool initializer for multiprocessing.\n\n    # Returns\n        Function, a Function to initialize the pool\n    \"\"\"\n    raise NotImplementedError",
                "@abstractmethod\ndef get(self):\n    \"\"\"Creates a generator to extract data from the queue.\n\n    Skip the data if it is `None`.\n\n    # Returns\n        Generator yielding tuples `(inputs, targets)`\n            or `(inputs, targets, sample_weights)`.\n    \"\"\"\n    raise NotImplementedError",
                "def __init__(self, sequence, use_multiprocessing=False, shuffle=False):\n    super(OrderedEnqueuer, self).__init__(sequence, use_multiprocessing)\n    self.shuffle = shuffle",
                "def _get_executor_init(self, workers):\n    \"\"\"Get the Pool initializer for multiprocessing.\n\n    # Returns\n        Function, a Function to initialize the pool\n    \"\"\"\n    return lambda seqs: mp.Pool(workers,\n                                initializer=init_pool,\n                                initargs=(seqs,))",
                "def _wait_queue(self):\n    \"\"\"Wait for the queue to be empty.\"\"\"\n    while True:\n        time.sleep(0.1)\n        if self.queue.unfinished_tasks == 0 or self.stop_signal.is_set():\n            return",
                "def _run(self):\n    \"\"\"Submits request to the executor and queue the `Future` objects.\"\"\"\n    sequence = list(range(len(self.sequence)))\n    self._send_sequence()  # Share the initial sequence\n    while True:\n        if self.shuffle:\n            random.shuffle(sequence)\n\n        with closing(self.executor_fn(_SHARED_SEQUENCES)) as executor:\n            for i in sequence:\n                if self.stop_signal.is_set():\n                    return\n                self.queue.put(\n                    executor.apply_async(get_index, (self.uid, i)), block=True)\n\n            # Done with the current epoch, waiting for the final batches\n            self._wait_queue()\n\n            if self.stop_signal.is_set():\n                # We're done\n                return\n\n        # Call the internal on epoch end.\n        self.sequence.on_epoch_end()\n        self._send_sequence()  # Update the pool",
                "def get(self):\n    \"\"\"Creates a generator to extract data from the queue.\n\n    Skip the data if it is `None`.\n\n    # Yields\n        The next element in the queue, i.e. a tuple\n        `(inputs, targets)` or\n        `(inputs, targets, sample_weights)`.\n    \"\"\"\n    try:\n        while self.is_running():\n            inputs = self.queue.get(block=True).get()\n            self.queue.task_done()\n            if inputs is not None:\n                yield inputs\n    except Exception:\n        self.stop()\n        six.reraise(*sys.exc_info())",
                "def __init__(self, sequence, use_multiprocessing=False, wait_time=None,\n             random_seed=None):\n    super(GeneratorEnqueuer, self).__init__(sequence, use_multiprocessing)\n    self.random_seed = random_seed\n    if wait_time is not None:\n        warnings.warn('`wait_time` is not used anymore.',\n                      DeprecationWarning)",
                "def _get_executor_init(self, workers):\n    \"\"\"Get the Pool initializer for multiprocessing.\n\n    # Returns\n        Function, a Function to initialize the pool\n    \"\"\"\n    return lambda seqs: mp.Pool(workers,\n                                initializer=init_pool_generator,\n                                initargs=(seqs, self.random_seed))",
                "def _run(self):\n    \"\"\"Submits request to the executor and queue the `Future` objects.\"\"\"\n    self._send_sequence()  # Share the initial generator\n    with closing(self.executor_fn(_SHARED_SEQUENCES)) as executor:\n        while True:\n            if self.stop_signal.is_set():\n                return\n            self.queue.put(\n                executor.apply_async(next_sample, (self.uid,)), block=True)",
                "def get(self):\n    \"\"\"Creates a generator to extract data from the queue.\n\n    Skip the data if it is `None`.\n\n    # Yields\n        The next element in the queue, i.e. a tuple\n        `(inputs, targets)` or\n        `(inputs, targets, sample_weights)`.\n    \"\"\"\n    try:\n        while self.is_running():\n            inputs = self.queue.get(block=True).get()\n            self.queue.task_done()\n            if inputs is not None:\n                yield inputs\n    except StopIteration:\n        # Special case for finite generators\n        last_ones = []\n        while self.queue.qsize() > 0:\n            last_ones.append(self.queue.get(block=True))\n        # Wait for them to complete\n        list(map(lambda f: f.wait(), last_ones))\n        # Keep the good ones\n        last_ones = [future.get() for future in last_ones if future.successful()]\n        for inputs in last_ones:\n            if inputs is not None:\n                yield inputs\n    except Exception as e:\n        self.stop()\n        if 'generator already executing' in str(e):\n            raise RuntimeError(\n                \"Your generator is NOT thread-safe.\"\n                \"Keras requires a thread-safe generator when\"\n                \"`use_multiprocessing=False, workers > 1`.\"\n                \"For more information see issue #1638.\")\n        six.reraise(*sys.exc_info())",
                "def chunk_read(response, chunk_size=8192, reporthook=None):\n    content_type = response.info().get('Content-Length')\n    total_size = -1\n    if content_type is not None:\n        total_size = int(content_type.strip())\n    count = 0\n    while True:\n        chunk = response.read(chunk_size)\n        count += 1\n        if reporthook is not None:\n            reporthook(count, chunk_size, total_size)\n        if chunk:\n            yield chunk\n        else:\n            break",
                "def dl_progress(count, block_size, total_size):\n    if ProgressTracker.progbar is None:\n        if total_size == -1:\n            total_size = None\n        ProgressTracker.progbar = Progbar(total_size)\n    else:\n        ProgressTracker.progbar.update(count * block_size)"
            ],
            "inscope_function_signatures": [
                "_extract_archive(file_path, path='.', archive_format='auto')",
                "get_file(fname, origin, untar=False, md5_hash=None, file_hash=None, cache_subdir='datasets', hash_algorithm='auto', extract=False, archive_format='auto', cache_dir=None)",
                "_hash_file(fpath, algorithm='sha256', chunk_size=65535)",
                "validate_file(fpath, file_hash, algorithm='auto', chunk_size=65535)",
                "init_pool(seqs)",
                "get_index(uid, i)",
                "init_pool_generator(gens, random_seed=None)",
                "next_sample(uid)",
                "urlretrieve(url, filename, reporthook=None, data=None)",
                "__getitem__(self, index)",
                "__len__(self)",
                "on_epoch_end(self)",
                "__iter__(self)",
                "__init__(self, sequence, use_multiprocessing=False)",
                "is_running(self)",
                "start(self, workers=1, max_queue_size=10)",
                "_send_sequence(self)",
                "stop(self, timeout=None)",
                "_run(self)",
                "_get_executor_init(self, workers)",
                "get(self)",
                "__init__(self, sequence, use_multiprocessing=False, shuffle=False)",
                "_get_executor_init(self, workers)",
                "_wait_queue(self)",
                "_run(self)",
                "get(self)",
                "__init__(self, sequence, use_multiprocessing=False, wait_time=None, random_seed=None)",
                "_get_executor_init(self, workers)",
                "_run(self)",
                "get(self)",
                "chunk_read(response, chunk_size=8192, reporthook=None)",
                "dl_progress(count, block_size, total_size)"
            ],
            "variables_in_file": {
                "ImportError": [
                    29
                ],
                "sys.version_info": [
                    34
                ],
                "sys": [
                    601,
                    34,
                    709
                ],
                "content_type": [
                    56,
                    57,
                    54
                ],
                "get": [
                    595,
                    685,
                    54
                ],
                "response.info": [
                    54
                ],
                "response": [
                    70,
                    60,
                    69,
                    54
                ],
                "total_size": [
                    213,
                    214,
                    55,
                    57,
                    215,
                    63
                ],
                "int": [
                    440,
                    57
                ],
                "content_type.strip": [
                    57
                ],
                "count": [
                    217,
                    58,
                    61,
                    63
                ],
                "chunk": [
                    64,
                    65,
                    70,
                    71,
                    270,
                    271,
                    60
                ],
                "response.read": [
                    60
                ],
                "chunk_size": [
                    296,
                    60,
                    270,
                    63
                ],
                "reporthook": [
                    70,
                    62,
                    63
                ],
                "closing": [
                    666,
                    565,
                    69
                ],
                "urlopen": [
                    69
                ],
                "url": [
                    69
                ],
                "data": [
                    69
                ],
                "open": [
                    269,
                    69
                ],
                "filename": [
                    69
                ],
                "fd": [
                    69,
                    71
                ],
                "chunk_read": [
                    70
                ],
                "fd.write": [
                    71
                ],
                "archive_format": [
                    96,
                    97,
                    99,
                    239,
                    92,
                    94,
                    95
                ],
                "isinstance": [
                    96,
                    440
                ],
                "six.string_types": [
                    96
                ],
                "six": [
                    96,
                    601,
                    626,
                    709
                ],
                "archive_type": [
                    99,
                    100,
                    103
                ],
                "open_fn": [
                    104,
                    108,
                    101
                ],
                "tarfile.open": [
                    101
                ],
                "tarfile": [
                    101,
                    102,
                    111
                ],
                "is_match_fn": [
                    105,
                    107,
                    102
                ],
                "tarfile.is_tarfile": [
                    102
                ],
                "zipfile.ZipFile": [
                    104
                ],
                "zipfile": [
                    104,
                    105
                ],
                "zipfile.is_zipfile": [
                    105
                ],
                "file_path": [
                    107,
                    108
                ],
                "archive": [
                    108,
                    110
                ],
                "archive.extractall": [
                    110
                ],
                "path": [
                    110,
                    113,
                    114,
                    115,
                    117
                ],
                "tarfile.TarError": [
                    111
                ],
                "RuntimeError": [
                    704,
                    111
                ],
                "KeyboardInterrupt": [
                    112,
                    227
                ],
                "os.path.exists": [
                    228,
                    234,
                    113,
                    181,
                    191
                ],
                "os.path": [
                    228,
                    234,
                    173,
                    113,
                    114,
                    179,
                    177,
                    180,
                    181,
                    185,
                    188,
                    191
                ],
                "os": [
                    185,
                    228,
                    229,
                    234,
                    173,
                    177,
                    113,
                    114,
                    115,
                    178,
                    179,
                    180,
                    181,
                    182,
                    188,
                    191
                ],
                "os.path.isfile": [
                    114
                ],
                "os.remove": [
                    115,
                    229
                ],
                "shutil.rmtree": [
                    117
                ],
                "shutil": [
                    117
                ],
                "cache_dir": [
                    177,
                    172,
                    173
                ],
                "os.path.join": [
                    173,
                    179,
                    180,
                    185,
                    188
                ],
                "os.path.expanduser": [
                    177,
                    173
                ],
                "md5_hash": [
                    174,
                    175
                ],
                "file_hash": [
                    193,
                    194,
                    291,
                    198,
                    296,
                    174,
                    175
                ],
                "hash_algorithm": [
                    176,
                    194,
                    196
                ],
                "datadir_base": [
                    177,
                    178,
                    179,
                    180
                ],
                "os.access": [
                    178
                ],
                "os.W_OK": [
                    178
                ],
                "datadir": [
                    235,
                    239,
                    180,
                    181,
                    182,
                    185,
                    188
                ],
                "cache_subdir": [
                    180
                ],
                "os.makedirs": [
                    182
                ],
                "untar": [
                    184,
                    233
                ],
                "untar_fpath": [
                    185,
                    186,
                    234,
                    236
                ],
                "fname": [
                    185,
                    188
                ],
                "fpath": [
                    194,
                    228,
                    229,
                    296,
                    235,
                    269,
                    239,
                    241,
                    186,
                    188,
                    222,
                    191
                ],
                "download": [
                    201,
                    203,
                    190,
                    199
                ],
                "validate_file": [
                    194
                ],
                "print": [
                    195,
                    204
                ],
                "origin": [
                    224,
                    226,
                    204,
                    222
                ],
                "object": [
                    302,
                    404,
                    206
                ],
                "progbar": [
                    209
                ],
                "ProgressTracker.progbar": [
                    217,
                    231,
                    212,
                    215
                ],
                "ProgressTracker": [
                    217,
                    231,
                    212,
                    215
                ],
                "Progbar": [
                    215
                ],
                "ProgressTracker.progbar.update": [
                    217
                ],
                "block_size": [
                    217
                ],
                "error_msg": [
                    224,
                    226,
                    219
                ],
                "urlretrieve": [
                    222
                ],
                "dl_progress": [
                    222
                ],
                "HTTPError": [
                    223
                ],
                "Exception": [
                    224,
                    226,
                    227,
                    599,
                    701
                ],
                "error_msg.format": [
                    224,
                    226
                ],
                "e.code": [
                    224
                ],
                "e": [
                    224,
                    226,
                    703
                ],
                "e.msg": [
                    224
                ],
                "URLError": [
                    225
                ],
                "e.errno": [
                    226
                ],
                "e.reason": [
                    226
                ],
                "_extract_archive": [
                    235,
                    239
                ],
                "extract": [
                    238
                ],
                "algorithm": [
                    264,
                    290,
                    291
                ],
                "len": [
                    264,
                    291,
                    372,
                    559
                ],
                "hash": [
                    264
                ],
                "hasher": [
                    292,
                    294,
                    296,
                    265,
                    267,
                    271,
                    273
                ],
                "hashlib.sha256": [
                    265
                ],
                "hashlib": [
                    265,
                    267
                ],
                "hashlib.md5": [
                    267
                ],
                "fpath_file": [
                    269,
                    270
                ],
                "iter": [
                    270
                ],
                "fpath_file.read": [
                    270
                ],
                "hasher.update": [
                    271
                ],
                "hasher.hexdigest": [
                    273
                ],
                "str": [
                    296,
                    703
                ],
                "_hash_file": [
                    296
                ],
                "NotImplementedError": [
                    354,
                    523,
                    363,
                    502,
                    511
                ],
                "abstractmethod": [
                    513,
                    356,
                    504,
                    499,
                    344
                ],
                "item": [
                    372,
                    373
                ],
                "self": [
                    647,
                    648,
                    661,
                    537,
                    538,
                    665,
                    666,
                    668,
                    670,
                    671,
                    554,
                    427,
                    428,
                    684,
                    685,
                    559,
                    560,
                    686,
                    562,
                    692,
                    565,
                    693,
                    567,
                    441,
                    569,
                    570,
                    573,
                    446,
                    575,
                    702,
                    449,
                    450,
                    451,
                    452,
                    453,
                    580,
                    581,
                    456,
                    466,
                    467,
                    594,
                    595,
                    470,
                    471,
                    472,
                    473,
                    474,
                    475,
                    476,
                    596,
                    600,
                    481,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    372
                ],
                "i": [
                    401,
                    570,
                    372,
                    566
                ],
                "range": [
                    372,
                    559
                ],
                "_SHARED_SEQUENCES": [
                    384,
                    481,
                    401,
                    497,
                    626,
                    565,
                    377,
                    666,
                    606
                ],
                "_SEQUENCE_COUNTER": [
                    431,
                    433,
                    438,
                    440,
                    441,
                    442,
                    379,
                    445,
                    446,
                    447
                ],
                "seqs": [
                    384,
                    548,
                    661
                ],
                "uid": [
                    401,
                    626
                ],
                "self.sequence": [
                    481,
                    427,
                    580,
                    559
                ],
                "sequence": [
                    647,
                    427,
                    559,
                    563,
                    566,
                    537
                ],
                "self.use_multiprocessing": [
                    466,
                    428
                ],
                "use_multiprocessing": [
                    537,
                    428,
                    647
                ],
                "mp.Value": [
                    433
                ],
                "mp": [
                    433,
                    546,
                    659,
                    609
                ],
                "OSError": [
                    434
                ],
                "self.uid": [
                    481,
                    497,
                    441,
                    570,
                    446,
                    671
                ],
                "_SEQUENCE_COUNTER.get_lock": [
                    445
                ],
                "_SEQUENCE_COUNTER.value": [
                    446,
                    447
                ],
                "self.workers": [
                    449,
                    471
                ],
                "self.executor_fn": [
                    450,
                    467,
                    565,
                    470,
                    666
                ],
                "self.queue": [
                    451,
                    554,
                    492,
                    493,
                    494,
                    495,
                    685,
                    686,
                    595,
                    596,
                    692,
                    693,
                    472,
                    569,
                    670
                ],
                "self.run_thread": [
                    452,
                    496,
                    474,
                    475,
                    476
                ],
                "self.stop_signal": [
                    453,
                    456,
                    554,
                    491,
                    567,
                    473,
                    668,
                    575
                ],
                "self.stop_signal.is_set": [
                    456,
                    554,
                    567,
                    668,
                    575
                ],
                "self._get_executor_init": [
                    467
                ],
                "workers": [
                    546,
                    467,
                    659,
                    470,
                    471
                ],
                "ThreadPool": [
                    470
                ],
                "queue.Queue": [
                    472
                ],
                "queue": [
                    472
                ],
                "max_queue_size": [
                    472
                ],
                "threading.Event": [
                    473
                ],
                "threading": [
                    473,
                    474
                ],
                "threading.Thread": [
                    474
                ],
                "self._run": [
                    474
                ],
                "self.run_thread.daemon": [
                    475
                ],
                "self.run_thread.start": [
                    476
                ],
                "self.stop_signal.set": [
                    491
                ],
                "self.queue.mutex": [
                    492
                ],
                "self.queue.queue.clear": [
                    493
                ],
                "self.queue.queue": [
                    493
                ],
                "self.queue.unfinished_tasks": [
                    554,
                    494
                ],
                "self.queue.not_full.notify": [
                    495
                ],
                "self.queue.not_full": [
                    495
                ],
                "self.run_thread.join": [
                    496
                ],
                "timeout": [
                    496
                ],
                "SequenceEnqueuer": [
                    629,
                    526
                ],
                "__init__": [
                    537,
                    647
                ],
                "super": [
                    537,
                    647
                ],
                "OrderedEnqueuer": [
                    537
                ],
                "self.shuffle": [
                    538,
                    562
                ],
                "shuffle": [
                    538
                ],
                "mp.Pool": [
                    546,
                    659
                ],
                "init_pool": [
                    547
                ],
                "time.sleep": [
                    553
                ],
                "time": [
                    553
                ],
                "list": [
                    695,
                    559
                ],
                "self._send_sequence": [
                    560,
                    665,
                    581
                ],
                "random.shuffle": [
                    563
                ],
                "random": [
                    563
                ],
                "executor": [
                    671,
                    570,
                    565,
                    666
                ],
                "self.queue.put": [
                    569,
                    670
                ],
                "executor.apply_async": [
                    570,
                    671
                ],
                "get_index": [
                    570
                ],
                "self._wait_queue": [
                    573
                ],
                "self.sequence.on_epoch_end": [
                    580
                ],
                "self.is_running": [
                    594,
                    684
                ],
                "inputs": [
                    685,
                    687,
                    688,
                    595,
                    597,
                    598,
                    698,
                    699,
                    700
                ],
                "self.queue.get": [
                    595,
                    685,
                    693
                ],
                "self.queue.task_done": [
                    596,
                    686
                ],
                "self.stop": [
                    600,
                    702
                ],
                "six.reraise": [
                    601,
                    709
                ],
                "sys.exc_info": [
                    601,
                    709
                ],
                "gens": [
                    606
                ],
                "random_seed": [
                    608,
                    610,
                    648
                ],
                "ident": [
                    609,
                    610
                ],
                "mp.current_process": [
                    609
                ],
                "np.random.seed": [
                    610
                ],
                "np.random": [
                    610
                ],
                "np": [
                    610
                ],
                "six.next": [
                    626
                ],
                "GeneratorEnqueuer": [
                    647
                ],
                "self.random_seed": [
                    648,
                    661
                ],
                "wait_time": [
                    649
                ],
                "warnings.warn": [
                    650
                ],
                "warnings": [
                    650
                ],
                "DeprecationWarning": [
                    651
                ],
                "init_pool_generator": [
                    660
                ],
                "next_sample": [
                    671
                ],
                "StopIteration": [
                    689
                ],
                "last_ones": [
                    691,
                    693,
                    695,
                    697,
                    698
                ],
                "self.queue.qsize": [
                    692
                ],
                "last_ones.append": [
                    693
                ],
                "map": [
                    695
                ],
                "f.wait": [
                    695
                ],
                "f": [
                    695
                ],
                "future.get": [
                    697
                ],
                "future": [
                    697
                ],
                "future.successful": [
                    697
                ]
            },
            "filtered_variables_in_file": {
                "sys.version_info": [
                    34
                ],
                "sys": [
                    601,
                    34,
                    709
                ],
                "content_type": [
                    56,
                    57,
                    54
                ],
                "get": [
                    595,
                    685,
                    54
                ],
                "response.info": [
                    54
                ],
                "response": [
                    70,
                    60,
                    69,
                    54
                ],
                "total_size": [
                    213,
                    214,
                    55,
                    57,
                    215,
                    63
                ],
                "content_type.strip": [
                    57
                ],
                "count": [
                    217,
                    58,
                    61,
                    63
                ],
                "chunk": [
                    64,
                    65,
                    70,
                    71,
                    270,
                    271,
                    60
                ],
                "response.read": [
                    60
                ],
                "chunk_size": [
                    296,
                    60,
                    270,
                    63
                ],
                "reporthook": [
                    70,
                    62,
                    63
                ],
                "closing": [
                    666,
                    565,
                    69
                ],
                "urlopen": [
                    69
                ],
                "url": [
                    69
                ],
                "data": [
                    69
                ],
                "filename": [
                    69
                ],
                "fd": [
                    69,
                    71
                ],
                "chunk_read": [
                    70
                ],
                "fd.write": [
                    71
                ],
                "archive_format": [
                    96,
                    97,
                    99,
                    239,
                    92,
                    94,
                    95
                ],
                "six.string_types": [
                    96
                ],
                "six": [
                    96,
                    601,
                    626,
                    709
                ],
                "archive_type": [
                    99,
                    100,
                    103
                ],
                "open_fn": [
                    104,
                    108,
                    101
                ],
                "tarfile.open": [
                    101
                ],
                "tarfile": [
                    101,
                    102,
                    111
                ],
                "is_match_fn": [
                    105,
                    107,
                    102
                ],
                "tarfile.is_tarfile": [
                    102
                ],
                "zipfile.ZipFile": [
                    104
                ],
                "zipfile": [
                    104,
                    105
                ],
                "zipfile.is_zipfile": [
                    105
                ],
                "file_path": [
                    107,
                    108
                ],
                "archive": [
                    108,
                    110
                ],
                "archive.extractall": [
                    110
                ],
                "path": [
                    110,
                    113,
                    114,
                    115,
                    117
                ],
                "tarfile.TarError": [
                    111
                ],
                "os.path.exists": [
                    228,
                    234,
                    113,
                    181,
                    191
                ],
                "os.path": [
                    228,
                    234,
                    173,
                    113,
                    114,
                    179,
                    177,
                    180,
                    181,
                    185,
                    188,
                    191
                ],
                "os": [
                    185,
                    228,
                    229,
                    234,
                    173,
                    177,
                    113,
                    114,
                    115,
                    178,
                    179,
                    180,
                    181,
                    182,
                    188,
                    191
                ],
                "os.path.isfile": [
                    114
                ],
                "os.remove": [
                    115,
                    229
                ],
                "shutil.rmtree": [
                    117
                ],
                "shutil": [
                    117
                ],
                "cache_dir": [
                    177,
                    172,
                    173
                ],
                "os.path.join": [
                    173,
                    179,
                    180,
                    185,
                    188
                ],
                "os.path.expanduser": [
                    177,
                    173
                ],
                "md5_hash": [
                    174,
                    175
                ],
                "file_hash": [
                    193,
                    194,
                    291,
                    198,
                    296,
                    174,
                    175
                ],
                "hash_algorithm": [
                    176,
                    194,
                    196
                ],
                "datadir_base": [
                    177,
                    178,
                    179,
                    180
                ],
                "os.access": [
                    178
                ],
                "os.W_OK": [
                    178
                ],
                "datadir": [
                    235,
                    239,
                    180,
                    181,
                    182,
                    185,
                    188
                ],
                "cache_subdir": [
                    180
                ],
                "os.makedirs": [
                    182
                ],
                "untar": [
                    184,
                    233
                ],
                "untar_fpath": [
                    185,
                    186,
                    234,
                    236
                ],
                "fname": [
                    185,
                    188
                ],
                "fpath": [
                    194,
                    228,
                    229,
                    296,
                    235,
                    269,
                    239,
                    241,
                    186,
                    188,
                    222,
                    191
                ],
                "download": [
                    201,
                    203,
                    190,
                    199
                ],
                "validate_file": [
                    194
                ],
                "origin": [
                    224,
                    226,
                    204,
                    222
                ],
                "progbar": [
                    209
                ],
                "ProgressTracker.progbar": [
                    217,
                    231,
                    212,
                    215
                ],
                "ProgressTracker": [
                    217,
                    231,
                    212,
                    215
                ],
                "Progbar": [
                    215
                ],
                "ProgressTracker.progbar.update": [
                    217
                ],
                "block_size": [
                    217
                ],
                "error_msg": [
                    224,
                    226,
                    219
                ],
                "urlretrieve": [
                    222
                ],
                "dl_progress": [
                    222
                ],
                "HTTPError": [
                    223
                ],
                "error_msg.format": [
                    224,
                    226
                ],
                "e.code": [
                    224
                ],
                "e": [
                    224,
                    226,
                    703
                ],
                "e.msg": [
                    224
                ],
                "URLError": [
                    225
                ],
                "e.errno": [
                    226
                ],
                "e.reason": [
                    226
                ],
                "_extract_archive": [
                    235,
                    239
                ],
                "extract": [
                    238
                ],
                "algorithm": [
                    264,
                    290,
                    291
                ],
                "hasher": [
                    292,
                    294,
                    296,
                    265,
                    267,
                    271,
                    273
                ],
                "hashlib.sha256": [
                    265
                ],
                "hashlib": [
                    265,
                    267
                ],
                "hashlib.md5": [
                    267
                ],
                "fpath_file": [
                    269,
                    270
                ],
                "fpath_file.read": [
                    270
                ],
                "hasher.update": [
                    271
                ],
                "hasher.hexdigest": [
                    273
                ],
                "_hash_file": [
                    296
                ],
                "abstractmethod": [
                    513,
                    356,
                    504,
                    499,
                    344
                ],
                "item": [
                    372,
                    373
                ],
                "self": [
                    647,
                    648,
                    661,
                    537,
                    538,
                    665,
                    666,
                    668,
                    670,
                    671,
                    554,
                    427,
                    428,
                    684,
                    685,
                    559,
                    560,
                    686,
                    562,
                    692,
                    565,
                    693,
                    567,
                    441,
                    569,
                    570,
                    573,
                    446,
                    575,
                    702,
                    449,
                    450,
                    451,
                    452,
                    453,
                    580,
                    581,
                    456,
                    466,
                    467,
                    594,
                    595,
                    470,
                    471,
                    472,
                    473,
                    474,
                    475,
                    476,
                    596,
                    600,
                    481,
                    491,
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    372
                ],
                "i": [
                    401,
                    570,
                    372,
                    566
                ],
                "_SHARED_SEQUENCES": [
                    384,
                    481,
                    401,
                    497,
                    626,
                    565,
                    377,
                    666,
                    606
                ],
                "_SEQUENCE_COUNTER": [
                    431,
                    433,
                    438,
                    440,
                    441,
                    442,
                    379,
                    445,
                    446,
                    447
                ],
                "seqs": [
                    384,
                    548,
                    661
                ],
                "uid": [
                    401,
                    626
                ],
                "self.sequence": [
                    481,
                    427,
                    580,
                    559
                ],
                "sequence": [
                    647,
                    427,
                    559,
                    563,
                    566,
                    537
                ],
                "self.use_multiprocessing": [
                    466,
                    428
                ],
                "use_multiprocessing": [
                    537,
                    428,
                    647
                ],
                "mp.Value": [
                    433
                ],
                "mp": [
                    433,
                    546,
                    659,
                    609
                ],
                "self.uid": [
                    481,
                    497,
                    441,
                    570,
                    446,
                    671
                ],
                "_SEQUENCE_COUNTER.get_lock": [
                    445
                ],
                "_SEQUENCE_COUNTER.value": [
                    446,
                    447
                ],
                "self.workers": [
                    449,
                    471
                ],
                "self.executor_fn": [
                    450,
                    467,
                    565,
                    470,
                    666
                ],
                "self.queue": [
                    451,
                    554,
                    492,
                    493,
                    494,
                    495,
                    685,
                    686,
                    595,
                    596,
                    692,
                    693,
                    472,
                    569,
                    670
                ],
                "self.run_thread": [
                    452,
                    496,
                    474,
                    475,
                    476
                ],
                "self.stop_signal": [
                    453,
                    456,
                    554,
                    491,
                    567,
                    473,
                    668,
                    575
                ],
                "self.stop_signal.is_set": [
                    456,
                    554,
                    567,
                    668,
                    575
                ],
                "self._get_executor_init": [
                    467
                ],
                "workers": [
                    546,
                    467,
                    659,
                    470,
                    471
                ],
                "ThreadPool": [
                    470
                ],
                "queue.Queue": [
                    472
                ],
                "queue": [
                    472
                ],
                "max_queue_size": [
                    472
                ],
                "threading.Event": [
                    473
                ],
                "threading": [
                    473,
                    474
                ],
                "threading.Thread": [
                    474
                ],
                "self._run": [
                    474
                ],
                "self.run_thread.daemon": [
                    475
                ],
                "self.run_thread.start": [
                    476
                ],
                "self.stop_signal.set": [
                    491
                ],
                "self.queue.mutex": [
                    492
                ],
                "self.queue.queue.clear": [
                    493
                ],
                "self.queue.queue": [
                    493
                ],
                "self.queue.unfinished_tasks": [
                    554,
                    494
                ],
                "self.queue.not_full.notify": [
                    495
                ],
                "self.queue.not_full": [
                    495
                ],
                "self.run_thread.join": [
                    496
                ],
                "timeout": [
                    496
                ],
                "SequenceEnqueuer": [
                    629,
                    526
                ],
                "__init__": [
                    537,
                    647
                ],
                "OrderedEnqueuer": [
                    537
                ],
                "self.shuffle": [
                    538,
                    562
                ],
                "shuffle": [
                    538
                ],
                "mp.Pool": [
                    546,
                    659
                ],
                "init_pool": [
                    547
                ],
                "time.sleep": [
                    553
                ],
                "time": [
                    553
                ],
                "self._send_sequence": [
                    560,
                    665,
                    581
                ],
                "random.shuffle": [
                    563
                ],
                "random": [
                    563
                ],
                "executor": [
                    671,
                    570,
                    565,
                    666
                ],
                "self.queue.put": [
                    569,
                    670
                ],
                "executor.apply_async": [
                    570,
                    671
                ],
                "get_index": [
                    570
                ],
                "self._wait_queue": [
                    573
                ],
                "self.sequence.on_epoch_end": [
                    580
                ],
                "self.is_running": [
                    594,
                    684
                ],
                "inputs": [
                    685,
                    687,
                    688,
                    595,
                    597,
                    598,
                    698,
                    699,
                    700
                ],
                "self.queue.get": [
                    595,
                    685,
                    693
                ],
                "self.queue.task_done": [
                    596,
                    686
                ],
                "self.stop": [
                    600,
                    702
                ],
                "six.reraise": [
                    601,
                    709
                ],
                "sys.exc_info": [
                    601,
                    709
                ],
                "gens": [
                    606
                ],
                "random_seed": [
                    608,
                    610,
                    648
                ],
                "ident": [
                    609,
                    610
                ],
                "mp.current_process": [
                    609
                ],
                "np.random.seed": [
                    610
                ],
                "np.random": [
                    610
                ],
                "np": [
                    610
                ],
                "six.next": [
                    626
                ],
                "GeneratorEnqueuer": [
                    647
                ],
                "self.random_seed": [
                    648,
                    661
                ],
                "wait_time": [
                    649
                ],
                "warnings.warn": [
                    650
                ],
                "warnings": [
                    650
                ],
                "init_pool_generator": [
                    660
                ],
                "next_sample": [
                    671
                ],
                "last_ones": [
                    691,
                    693,
                    695,
                    697,
                    698
                ],
                "self.queue.qsize": [
                    692
                ],
                "last_ones.append": [
                    693
                ],
                "f.wait": [
                    695
                ],
                "f": [
                    695
                ],
                "future.get": [
                    697
                ],
                "future": [
                    697
                ],
                "future.successful": [
                    697
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs/repos/keras_11/tests/keras/utils/data_utils_test.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "pytestmark = pytest.mark.skipif(\n    K.backend() == 'tensorflow',\n    reason='Temporarily disabled until the use_multiprocessing problem is solved')",
                    "start_line": 24,
                    "end_line": 26
                }
            ],
            "inscope_functions": [
                "def use_spawn(func):\n    \"\"\"Decorator to test both Unix (fork) and Windows (spawn)\"\"\"\n    @six.wraps(func)\n    def wrapper(*args, **kwargs):\n        out = func(*args, **kwargs)\n        if sys.version_info > (3, 4):\n            mp.set_start_method('spawn', force=True)\n            func(*args, **kwargs)\n            mp.set_start_method('fork', force=True)\n        return out\n    return wrapper",
                "@pytest.fixture\ndef in_tmpdir(tmpdir):\n    \"\"\"Runs a function in a temporary directory.\n\n    Checks that the directory is empty afterwards.\n    \"\"\"\n    with tmpdir.as_cwd():\n        yield None\n    assert not tmpdir.listdir()",
                "def test_data_utils(in_tmpdir):\n    \"\"\"Tests get_file from a url, plus extraction and validation.\n    \"\"\"\n    dirname = 'data_utils'\n\n    with open('test.txt', 'w') as text_file:\n        text_file.write('Float like a butterfly, sting like a bee.')\n\n    with tarfile.open('test.tar.gz', 'w:gz') as tar_file:\n        tar_file.add('test.txt')\n\n    with zipfile.ZipFile('test.zip', 'w') as zip_file:\n        zip_file.write('test.txt')\n\n    origin = urljoin('file://', pathname2url(os.path.abspath('test.tar.gz')))\n\n    path = get_file(dirname, origin, untar=True)\n    filepath = path + '.tar.gz'\n    hashval_sha256 = _hash_file(filepath)\n    hashval_md5 = _hash_file(filepath, algorithm='md5')\n    path = get_file(dirname, origin, md5_hash=hashval_md5, untar=True)\n    path = get_file(filepath, origin, file_hash=hashval_sha256, extract=True)\n    assert os.path.exists(filepath)\n    assert validate_file(filepath, hashval_sha256)\n    assert validate_file(filepath, hashval_md5)\n    os.remove(filepath)\n    os.remove('test.tar.gz')\n\n    origin = urljoin('file://', pathname2url(os.path.abspath('test.zip')))\n\n    hashval_sha256 = _hash_file('test.zip')\n    hashval_md5 = _hash_file('test.zip', algorithm='md5')\n    path = get_file(dirname, origin, md5_hash=hashval_md5, extract=True)\n    path = get_file(dirname, origin, file_hash=hashval_sha256, extract=True)\n    assert os.path.exists(path)\n    assert validate_file(path, hashval_sha256)\n    assert validate_file(path, hashval_md5)\n\n    os.remove(path)\n    os.remove('test.txt')\n    os.remove('test.zip')",
                "def threadsafe_generator(f):\n    \"\"\"A decorator that takes a generator function and makes it thread-safe.\n    \"\"\"\n\n    def g(*a, **kw):\n        return threadsafe_iter(f(*a, **kw))\n\n    return g",
                "@threadsafe_generator\ndef create_generator_from_sequence_threads(ds):\n    for i in cycle(range(len(ds))):\n        yield ds[i]",
                "def create_generator_from_sequence_pcs(ds):\n    for i in cycle(range(len(ds))):\n        yield ds[i]",
                "def test_generator_enqueuer_threads():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_threads(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(int(next(gen_output)[0, 0, 0, 0]))\n\n    \"\"\"\n     Not comparing the order since it is not guaranteed.\n     It may get ordered, but not a lot, one thread can take\n     the GIL before he was supposed to.\n    \"\"\"\n    assert len(set(acc) - set(range(100))) == 0, \"Output is not the same\"\n    enqueuer.stop()",
                "def test_generator_enqueuer_processes():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_pcs(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(int(next(gen_output)[0, 0, 0, 0]))\n    assert acc != list(range(100)), ('Order was keep in GeneratorEnqueuer '\n                                     'with processes')\n    enqueuer.stop()",
                "def test_generator_enqueuer_threadsafe():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_pcs(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(RuntimeError) as e:\n        [next(gen_output) for _ in range(10)]\n    assert 'thread-safe' in str(e.value)\n    enqueuer.stop()",
                "def test_generator_enqueuer_fail_threads():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_threads(\n        FaultSequence()), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
                "def test_generator_enqueuer_fail_processes():\n    enqueuer = GeneratorEnqueuer(create_generator_from_sequence_pcs(\n        FaultSequence()), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
                "def test_ordered_enqueuer_threads():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list(range(100)), ('Order was not keep in GeneratorEnqueuer '\n                                     'with threads')\n    enqueuer.stop()",
                "def test_ordered_enqueuer_threads_not_ordered():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=False,\n                               shuffle=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc != list(range(100)), ('Order was not keep in GeneratorEnqueuer '\n                                     'with threads')\n    enqueuer.stop()",
                "@use_spawn\ndef test_ordered_enqueuer_processes():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list(range(100)), ('Order was not keep in GeneratorEnqueuer '\n                                     'with processes')\n    enqueuer.stop()",
                "def test_ordered_enqueuer_fail_threads():\n    enqueuer = OrderedEnqueuer(FaultSequence(), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
                "@use_spawn\ndef test_on_epoch_end_processes():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(200):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc[100:] == list([k * 5 for k in range(100)]), (\n        'Order was not keep in GeneratorEnqueuer with processes')\n    enqueuer.stop()",
                "@use_spawn\ndef test_context_switch():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=True)\n    enqueuer2 = OrderedEnqueuer(DummySequence([3, 200, 200, 3], value=15),\n                                use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    enqueuer2.start(3, 10)\n    gen_output = enqueuer.get()\n    gen_output2 = enqueuer2.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc[-1] == 99\n    # One epoch is completed so enqueuer will switch the Sequence\n\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output2)[0, 0, 0, 0])\n    assert acc[-1] == 99 * 15\n    # One epoch has been completed so enqueuer2 will switch\n\n    # Be sure that both Sequence were updated\n    assert next(gen_output)[0, 0, 0, 0] == 0\n    assert next(gen_output)[0, 0, 0, 0] == 5\n    assert next(gen_output2)[0, 0, 0, 0] == 0\n    assert next(gen_output2)[0, 0, 0, 0] == 15 * 5\n\n    # Tear down everything\n    enqueuer.stop()\n    enqueuer2.stop()",
                "def test_on_epoch_end_threads():\n    enqueuer = OrderedEnqueuer(DummySequence([3, 200, 200, 3]),\n                               use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    acc = []\n    for i in range(100):\n        acc.append(next(gen_output)[0, 0, 0, 0])\n    assert acc == list([k * 5 for k in range(100)]), (\n        'Order was not keep in GeneratorEnqueuer with processes')\n    enqueuer.stop()",
                "@use_spawn\ndef test_ordered_enqueuer_fail_processes():\n    enqueuer = OrderedEnqueuer(FaultSequence(), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    with pytest.raises(IndexError):\n        next(gen_output)",
                "@threadsafe_generator\ndef create_finite_generator_from_sequence_threads(ds):\n    for i in range(len(ds)):\n        yield ds[i]",
                "def create_finite_generator_from_sequence_pcs(ds):\n    for i in range(len(ds)):\n        yield ds[i]",
                "def test_finite_generator_enqueuer_threads():\n    enqueuer = GeneratorEnqueuer(create_finite_generator_from_sequence_threads(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=False)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for output in gen_output:\n        acc.append(int(output[0, 0, 0, 0]))\n    assert set(acc) == set(range(100)), \"Output is not the same\"\n    enqueuer.stop()",
                "def test_finite_generator_enqueuer_processes():\n    enqueuer = GeneratorEnqueuer(create_finite_generator_from_sequence_pcs(\n        DummySequence([3, 200, 200, 3])), use_multiprocessing=True)\n    enqueuer.start(3, 10)\n    gen_output = enqueuer.get()\n    acc = []\n    for output in gen_output:\n        acc.append(int(output[0, 0, 0, 0]))\n    assert acc != list(range(100)), ('Order was keep in GeneratorEnqueuer '\n                                     'with processes')\n    enqueuer.stop()",
                "def next(x):\n    return x.next()",
                "@six.wraps(func)\ndef wrapper(*args, **kwargs):\n    out = func(*args, **kwargs)\n    if sys.version_info > (3, 4):\n        mp.set_start_method('spawn', force=True)\n        func(*args, **kwargs)\n        mp.set_start_method('fork', force=True)\n    return out",
                "def __init__(self, it):\n    self.it = it\n    self.lock = threading.Lock()",
                "def __iter__(self):\n    return self",
                "def __next__(self):\n    return self.next()",
                "def next(self):\n    with self.lock:\n        return next(self.it)",
                "def g(*a, **kw):\n    return threadsafe_iter(f(*a, **kw))",
                "def __init__(self, shape, value=1.0):\n    self.shape = shape\n    self.inner = value",
                "def __getitem__(self, item):\n    return np.ones(self.shape, dtype=np.uint32) * item * self.inner",
                "def __len__(self):\n    return 100",
                "def on_epoch_end(self):\n    self.inner *= 5.0",
                "def __getitem__(self, item):\n    raise IndexError(item, 'is not present')",
                "def __len__(self):\n    return 100",
                "def on_epoch_end(self):\n    pass"
            ],
            "inscope_function_signatures": [
                "use_spawn(func)",
                "in_tmpdir(tmpdir)",
                "test_data_utils(in_tmpdir)",
                "threadsafe_generator(f)",
                "create_generator_from_sequence_threads(ds)",
                "create_generator_from_sequence_pcs(ds)",
                "test_generator_enqueuer_threads()",
                "test_generator_enqueuer_processes()",
                "test_generator_enqueuer_threadsafe()",
                "test_generator_enqueuer_fail_threads()",
                "test_generator_enqueuer_fail_processes()",
                "test_ordered_enqueuer_threads()",
                "test_ordered_enqueuer_threads_not_ordered()",
                "test_ordered_enqueuer_processes()",
                "test_ordered_enqueuer_fail_threads()",
                "test_on_epoch_end_processes()",
                "test_context_switch()",
                "test_on_epoch_end_threads()",
                "test_ordered_enqueuer_fail_processes()",
                "create_finite_generator_from_sequence_threads(ds)",
                "create_finite_generator_from_sequence_pcs(ds)",
                "test_finite_generator_enqueuer_threads()",
                "test_finite_generator_enqueuer_processes()",
                "next(x)",
                "wrapper(*args, **kwargs)",
                "__init__(self, it)",
                "__iter__(self)",
                "__next__(self)",
                "next(self)",
                "g(*a, **kw)",
                "__init__(self, shape, value=1.0)",
                "__getitem__(self, item)",
                "__len__(self)",
                "on_epoch_end(self)",
                "__getitem__(self, item)",
                "__len__(self)",
                "on_epoch_end(self)"
            ],
            "variables_in_file": {
                "pytestmark": [
                    24
                ],
                "pytest.mark.skipif": [
                    24
                ],
                "pytest.mark": [
                    24
                ],
                "pytest": [
                    226,
                    388,
                    206,
                    46,
                    275,
                    24,
                    217,
                    347
                ],
                "K.backend": [
                    25
                ],
                "K": [
                    25
                ],
                "sys.version_info": [
                    28,
                    38
                ],
                "sys": [
                    28,
                    38
                ],
                "x.next": [
                    30
                ],
                "x": [
                    30
                ],
                "out": [
                    42,
                    37
                ],
                "func": [
                    40,
                    35,
                    37
                ],
                "args": [
                    40,
                    37
                ],
                "kwargs": [
                    40,
                    37
                ],
                "mp.set_start_method": [
                    41,
                    39
                ],
                "mp": [
                    41,
                    39
                ],
                "six.wraps": [
                    35
                ],
                "six": [
                    35
                ],
                "wrapper": [
                    43
                ],
                "tmpdir.as_cwd": [
                    52
                ],
                "tmpdir": [
                    52,
                    54
                ],
                "tmpdir.listdir": [
                    54
                ],
                "pytest.fixture": [
                    46
                ],
                "dirname": [
                    73,
                    77,
                    89,
                    90,
                    60
                ],
                "open": [
                    62
                ],
                "text_file": [
                    62,
                    63
                ],
                "text_file.write": [
                    63
                ],
                "tarfile.open": [
                    65
                ],
                "tarfile": [
                    65
                ],
                "tar_file": [
                    65,
                    66
                ],
                "tar_file.add": [
                    66
                ],
                "zipfile.ZipFile": [
                    68
                ],
                "zipfile": [
                    68
                ],
                "zip_file": [
                    68,
                    69
                ],
                "zip_file.write": [
                    69
                ],
                "origin": [
                    71,
                    73,
                    77,
                    78,
                    85,
                    89,
                    90
                ],
                "urljoin": [
                    85,
                    71
                ],
                "pathname2url": [
                    85,
                    71
                ],
                "os.path.abspath": [
                    85,
                    71
                ],
                "os.path": [
                    91,
                    85,
                    79,
                    71
                ],
                "os": [
                    96,
                    97,
                    71,
                    79,
                    82,
                    83,
                    85,
                    91,
                    95
                ],
                "path": [
                    73,
                    74,
                    77,
                    78,
                    89,
                    90,
                    91,
                    92,
                    93,
                    95
                ],
                "get_file": [
                    73,
                    77,
                    78,
                    89,
                    90
                ],
                "filepath": [
                    74,
                    75,
                    76,
                    78,
                    79,
                    80,
                    81,
                    82
                ],
                "hashval_sha256": [
                    75,
                    78,
                    80,
                    87,
                    90,
                    92
                ],
                "_hash_file": [
                    88,
                    75,
                    76,
                    87
                ],
                "hashval_md5": [
                    76,
                    77,
                    81,
                    88,
                    89,
                    93
                ],
                "os.path.exists": [
                    91,
                    79
                ],
                "validate_file": [
                    80,
                    81,
                    92,
                    93
                ],
                "os.remove": [
                    96,
                    97,
                    82,
                    83,
                    95
                ],
                "self.it": [
                    120,
                    109
                ],
                "self": [
                    135,
                    136,
                    139,
                    109,
                    110,
                    113,
                    145,
                    116,
                    119,
                    120
                ],
                "it": [
                    109
                ],
                "self.lock": [
                    110,
                    119
                ],
                "threading.Lock": [
                    110
                ],
                "threading": [
                    110
                ],
                "self.next": [
                    116
                ],
                "next": [
                    265,
                    276,
                    287,
                    177,
                    305,
                    311,
                    316,
                    317,
                    318,
                    319,
                    195,
                    333,
                    207,
                    336,
                    218,
                    348,
                    227,
                    237,
                    120,
                    251
                ],
                "threadsafe_iter": [
                    128
                ],
                "f": [
                    128
                ],
                "a": [
                    128
                ],
                "kw": [
                    128
                ],
                "g": [
                    130
                ],
                "Sequence": [
                    148,
                    133
                ],
                "self.shape": [
                    139,
                    135
                ],
                "shape": [
                    135
                ],
                "self.inner": [
                    136,
                    145,
                    139
                ],
                "value": [
                    136
                ],
                "np.ones": [
                    139
                ],
                "np": [
                    139
                ],
                "np.uint32": [
                    139
                ],
                "item": [
                    139,
                    150
                ],
                "IndexError": [
                    226,
                    275,
                    150,
                    217,
                    347
                ],
                "i": [
                    161,
                    162,
                    194,
                    353,
                    354,
                    166,
                    167,
                    264,
                    358,
                    359,
                    236,
                    332,
                    335,
                    176,
                    304,
                    310,
                    250,
                    286
                ],
                "cycle": [
                    161,
                    166
                ],
                "range": [
                    264,
                    266,
                    286,
                    288,
                    161,
                    166,
                    176,
                    304,
                    310,
                    184,
                    194,
                    196,
                    332,
                    207,
                    335,
                    337,
                    353,
                    358,
                    236,
                    238,
                    370,
                    250,
                    252,
                    382
                ],
                "len": [
                    161,
                    353,
                    358,
                    166,
                    184
                ],
                "ds": [
                    161,
                    162,
                    353,
                    354,
                    166,
                    167,
                    358,
                    359
                ],
                "threadsafe_generator": [
                    351,
                    159
                ],
                "enqueuer": [
                    384,
                    259,
                    261,
                    262,
                    268,
                    272,
                    273,
                    274,
                    281,
                    283,
                    284,
                    290,
                    295,
                    171,
                    299,
                    173,
                    174,
                    301,
                    185,
                    189,
                    191,
                    192,
                    322,
                    198,
                    327,
                    329,
                    202,
                    330,
                    204,
                    205,
                    209,
                    339,
                    213,
                    215,
                    216,
                    344,
                    345,
                    346,
                    222,
                    375,
                    224,
                    225,
                    231,
                    233,
                    234,
                    363,
                    365,
                    366,
                    240,
                    371,
                    244,
                    247,
                    248,
                    377,
                    378,
                    254
                ],
                "GeneratorEnqueuer": [
                    202,
                    171,
                    363,
                    213,
                    375,
                    189,
                    222
                ],
                "create_generator_from_sequence_threads": [
                    171,
                    213
                ],
                "DummySequence": [
                    259,
                    231,
                    295,
                    297,
                    327,
                    203,
                    172,
                    364,
                    244,
                    376,
                    281,
                    190
                ],
                "enqueuer.start": [
                    224,
                    261,
                    233,
                    329,
                    299,
                    204,
                    173,
                    365,
                    377,
                    283,
                    273,
                    215,
                    345,
                    247,
                    191
                ],
                "gen_output": [
                    262,
                    265,
                    274,
                    276,
                    284,
                    287,
                    301,
                    174,
                    177,
                    305,
                    316,
                    317,
                    192,
                    195,
                    330,
                    205,
                    333,
                    207,
                    336,
                    216,
                    218,
                    346,
                    348,
                    225,
                    227,
                    234,
                    237,
                    366,
                    368,
                    248,
                    378,
                    251,
                    380
                ],
                "enqueuer.get": [
                    192,
                    225,
                    248,
                    262,
                    234,
                    330,
                    205,
                    174,
                    301,
                    366,
                    378,
                    274,
                    216,
                    346,
                    284
                ],
                "acc": [
                    263,
                    265,
                    266,
                    285,
                    287,
                    288,
                    175,
                    303,
                    177,
                    305,
                    306,
                    309,
                    311,
                    184,
                    312,
                    193,
                    195,
                    196,
                    331,
                    333,
                    334,
                    336,
                    337,
                    235,
                    237,
                    238,
                    367,
                    369,
                    370,
                    379,
                    249,
                    251,
                    252,
                    381,
                    382
                ],
                "acc.append": [
                    195,
                    265,
                    237,
                    333,
                    336,
                    177,
                    305,
                    369,
                    311,
                    251,
                    381,
                    287
                ],
                "int": [
                    177,
                    195,
                    381,
                    369
                ],
                "set": [
                    184,
                    370
                ],
                "enqueuer.stop": [
                    384,
                    290,
                    322,
                    198,
                    268,
                    240,
                    209,
                    339,
                    371,
                    185,
                    254
                ],
                "create_generator_from_sequence_pcs": [
                    202,
                    189,
                    222
                ],
                "list": [
                    288,
                    196,
                    266,
                    238,
                    337,
                    252,
                    382
                ],
                "pytest.raises": [
                    226,
                    206,
                    275,
                    217,
                    347
                ],
                "RuntimeError": [
                    206
                ],
                "e": [
                    208,
                    206
                ],
                "_": [
                    207
                ],
                "str": [
                    208
                ],
                "e.value": [
                    208
                ],
                "FaultSequence": [
                    272,
                    344,
                    214,
                    223
                ],
                "OrderedEnqueuer": [
                    259,
                    231,
                    295,
                    297,
                    327,
                    272,
                    244,
                    344,
                    281
                ],
                "use_spawn": [
                    257,
                    293,
                    342,
                    279
                ],
                "k": [
                    288,
                    337
                ],
                "enqueuer2": [
                    297,
                    323,
                    300,
                    302
                ],
                "enqueuer2.start": [
                    300
                ],
                "gen_output2": [
                    318,
                    319,
                    302,
                    311
                ],
                "enqueuer2.get": [
                    302
                ],
                "enqueuer2.stop": [
                    323
                ],
                "create_finite_generator_from_sequence_threads": [
                    363
                ],
                "output": [
                    368,
                    369,
                    380,
                    381
                ],
                "create_finite_generator_from_sequence_pcs": [
                    375
                ],
                "__name__": [
                    387
                ],
                "pytest.main": [
                    388
                ],
                "__file__": [
                    388
                ]
            },
            "filtered_variables_in_file": {
                "pytestmark": [
                    24
                ],
                "pytest.mark.skipif": [
                    24
                ],
                "pytest.mark": [
                    24
                ],
                "pytest": [
                    226,
                    388,
                    206,
                    46,
                    275,
                    24,
                    217,
                    347
                ],
                "K.backend": [
                    25
                ],
                "K": [
                    25
                ],
                "sys.version_info": [
                    28,
                    38
                ],
                "sys": [
                    28,
                    38
                ],
                "x.next": [
                    30
                ],
                "x": [
                    30
                ],
                "out": [
                    42,
                    37
                ],
                "func": [
                    40,
                    35,
                    37
                ],
                "args": [
                    40,
                    37
                ],
                "kwargs": [
                    40,
                    37
                ],
                "mp.set_start_method": [
                    41,
                    39
                ],
                "mp": [
                    41,
                    39
                ],
                "six.wraps": [
                    35
                ],
                "six": [
                    35
                ],
                "wrapper": [
                    43
                ],
                "tmpdir.as_cwd": [
                    52
                ],
                "tmpdir": [
                    52,
                    54
                ],
                "tmpdir.listdir": [
                    54
                ],
                "pytest.fixture": [
                    46
                ],
                "dirname": [
                    73,
                    77,
                    89,
                    90,
                    60
                ],
                "text_file": [
                    62,
                    63
                ],
                "text_file.write": [
                    63
                ],
                "tarfile.open": [
                    65
                ],
                "tarfile": [
                    65
                ],
                "tar_file": [
                    65,
                    66
                ],
                "tar_file.add": [
                    66
                ],
                "zipfile.ZipFile": [
                    68
                ],
                "zipfile": [
                    68
                ],
                "zip_file": [
                    68,
                    69
                ],
                "zip_file.write": [
                    69
                ],
                "origin": [
                    71,
                    73,
                    77,
                    78,
                    85,
                    89,
                    90
                ],
                "urljoin": [
                    85,
                    71
                ],
                "pathname2url": [
                    85,
                    71
                ],
                "os.path.abspath": [
                    85,
                    71
                ],
                "os.path": [
                    91,
                    85,
                    79,
                    71
                ],
                "os": [
                    96,
                    97,
                    71,
                    79,
                    82,
                    83,
                    85,
                    91,
                    95
                ],
                "path": [
                    73,
                    74,
                    77,
                    78,
                    89,
                    90,
                    91,
                    92,
                    93,
                    95
                ],
                "get_file": [
                    73,
                    77,
                    78,
                    89,
                    90
                ],
                "filepath": [
                    74,
                    75,
                    76,
                    78,
                    79,
                    80,
                    81,
                    82
                ],
                "hashval_sha256": [
                    75,
                    78,
                    80,
                    87,
                    90,
                    92
                ],
                "_hash_file": [
                    88,
                    75,
                    76,
                    87
                ],
                "hashval_md5": [
                    76,
                    77,
                    81,
                    88,
                    89,
                    93
                ],
                "os.path.exists": [
                    91,
                    79
                ],
                "validate_file": [
                    80,
                    81,
                    92,
                    93
                ],
                "os.remove": [
                    96,
                    97,
                    82,
                    83,
                    95
                ],
                "self.it": [
                    120,
                    109
                ],
                "self": [
                    135,
                    136,
                    139,
                    109,
                    110,
                    113,
                    145,
                    116,
                    119,
                    120
                ],
                "it": [
                    109
                ],
                "self.lock": [
                    110,
                    119
                ],
                "threading.Lock": [
                    110
                ],
                "threading": [
                    110
                ],
                "self.next": [
                    116
                ],
                "threadsafe_iter": [
                    128
                ],
                "f": [
                    128
                ],
                "a": [
                    128
                ],
                "kw": [
                    128
                ],
                "g": [
                    130
                ],
                "Sequence": [
                    148,
                    133
                ],
                "self.shape": [
                    139,
                    135
                ],
                "shape": [
                    135
                ],
                "self.inner": [
                    136,
                    145,
                    139
                ],
                "value": [
                    136
                ],
                "np.ones": [
                    139
                ],
                "np": [
                    139
                ],
                "np.uint32": [
                    139
                ],
                "item": [
                    139,
                    150
                ],
                "i": [
                    161,
                    162,
                    194,
                    353,
                    354,
                    166,
                    167,
                    264,
                    358,
                    359,
                    236,
                    332,
                    335,
                    176,
                    304,
                    310,
                    250,
                    286
                ],
                "cycle": [
                    161,
                    166
                ],
                "ds": [
                    161,
                    162,
                    353,
                    354,
                    166,
                    167,
                    358,
                    359
                ],
                "threadsafe_generator": [
                    351,
                    159
                ],
                "enqueuer": [
                    384,
                    259,
                    261,
                    262,
                    268,
                    272,
                    273,
                    274,
                    281,
                    283,
                    284,
                    290,
                    295,
                    171,
                    299,
                    173,
                    174,
                    301,
                    185,
                    189,
                    191,
                    192,
                    322,
                    198,
                    327,
                    329,
                    202,
                    330,
                    204,
                    205,
                    209,
                    339,
                    213,
                    215,
                    216,
                    344,
                    345,
                    346,
                    222,
                    375,
                    224,
                    225,
                    231,
                    233,
                    234,
                    363,
                    365,
                    366,
                    240,
                    371,
                    244,
                    247,
                    248,
                    377,
                    378,
                    254
                ],
                "GeneratorEnqueuer": [
                    202,
                    171,
                    363,
                    213,
                    375,
                    189,
                    222
                ],
                "create_generator_from_sequence_threads": [
                    171,
                    213
                ],
                "DummySequence": [
                    259,
                    231,
                    295,
                    297,
                    327,
                    203,
                    172,
                    364,
                    244,
                    376,
                    281,
                    190
                ],
                "enqueuer.start": [
                    224,
                    261,
                    233,
                    329,
                    299,
                    204,
                    173,
                    365,
                    377,
                    283,
                    273,
                    215,
                    345,
                    247,
                    191
                ],
                "gen_output": [
                    262,
                    265,
                    274,
                    276,
                    284,
                    287,
                    301,
                    174,
                    177,
                    305,
                    316,
                    317,
                    192,
                    195,
                    330,
                    205,
                    333,
                    207,
                    336,
                    216,
                    218,
                    346,
                    348,
                    225,
                    227,
                    234,
                    237,
                    366,
                    368,
                    248,
                    378,
                    251,
                    380
                ],
                "enqueuer.get": [
                    192,
                    225,
                    248,
                    262,
                    234,
                    330,
                    205,
                    174,
                    301,
                    366,
                    378,
                    274,
                    216,
                    346,
                    284
                ],
                "acc": [
                    263,
                    265,
                    266,
                    285,
                    287,
                    288,
                    175,
                    303,
                    177,
                    305,
                    306,
                    309,
                    311,
                    184,
                    312,
                    193,
                    195,
                    196,
                    331,
                    333,
                    334,
                    336,
                    337,
                    235,
                    237,
                    238,
                    367,
                    369,
                    370,
                    379,
                    249,
                    251,
                    252,
                    381,
                    382
                ],
                "acc.append": [
                    195,
                    265,
                    237,
                    333,
                    336,
                    177,
                    305,
                    369,
                    311,
                    251,
                    381,
                    287
                ],
                "enqueuer.stop": [
                    384,
                    290,
                    322,
                    198,
                    268,
                    240,
                    209,
                    339,
                    371,
                    185,
                    254
                ],
                "create_generator_from_sequence_pcs": [
                    202,
                    189,
                    222
                ],
                "pytest.raises": [
                    226,
                    206,
                    275,
                    217,
                    347
                ],
                "e": [
                    208,
                    206
                ],
                "_": [
                    207
                ],
                "e.value": [
                    208
                ],
                "FaultSequence": [
                    272,
                    344,
                    214,
                    223
                ],
                "OrderedEnqueuer": [
                    259,
                    231,
                    295,
                    297,
                    327,
                    272,
                    244,
                    344,
                    281
                ],
                "use_spawn": [
                    257,
                    293,
                    342,
                    279
                ],
                "k": [
                    288,
                    337
                ],
                "enqueuer2": [
                    297,
                    323,
                    300,
                    302
                ],
                "enqueuer2.start": [
                    300
                ],
                "gen_output2": [
                    318,
                    319,
                    302,
                    311
                ],
                "enqueuer2.get": [
                    302
                ],
                "enqueuer2.stop": [
                    323
                ],
                "create_finite_generator_from_sequence_threads": [
                    363
                ],
                "output": [
                    368,
                    369,
                    380,
                    381
                ],
                "create_finite_generator_from_sequence_pcs": [
                    375
                ],
                "pytest.main": [
                    388
                ],
                "__file__": [
                    388
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/keras_11/tests/integration_tests/test_image_data_tasks.py",
                "test_function": "test_image_data_generator_training",
                "test_function_code": "def test_image_data_generator_training():\n    np.random.seed(1337)\n    img_gen = ImageDataGenerator(rescale=1.)  # Dummy ImageDataGenerator\n    input_shape = (16, 16, 3)\n    (x_train, y_train), (x_test, y_test) = get_test_data(num_train=500,\n                                                         num_test=200,\n                                                         input_shape=input_shape,\n                                                         classification=True,\n                                                         num_classes=4)\n    y_train = to_categorical(y_train)\n    y_test = to_categorical(y_test)\n\n    model = Sequential([\n        layers.Conv2D(filters=8, kernel_size=3,\n                      activation='relu',\n                      input_shape=input_shape),\n        layers.MaxPooling2D(pool_size=2),\n        layers.Conv2D(filters=4, kernel_size=(3, 3),\n                      activation='relu', padding='same'),\n        layers.GlobalAveragePooling2D(),\n        layers.Dense(y_test.shape[-1], activation='softmax')\n    ])\n    model.compile(loss='categorical_crossentropy',\n                  optimizer='rmsprop',\n                  metrics=['accuracy'])\n    history = model.fit_generator(img_gen.flow(x_train, y_train, batch_size=16),\n                                  epochs=10,\n                                  validation_data=img_gen.flow(x_test, y_test,\n                                                               batch_size=16),\n                                  verbose=0)\n    assert history.history['val_acc'][-1] > 0.75\n    model.evaluate_generator(img_gen.flow(x_train, y_train, batch_size=16))",
                "test_error": "ValueError: `steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.",
                "full_test_error": "def test_image_data_generator_training():\n        np.random.seed(1337)\n        img_gen = ImageDataGenerator(rescale=1.)  # Dummy ImageDataGenerator\n        input_shape = (16, 16, 3)\n        (x_train, y_train), (x_test, y_test) = get_test_data(num_train=500,\n                                                             num_test=200,\n                                                             input_shape=input_shape,\n                                                             classification=True,\n                                                             num_classes=4)\n        y_train = to_categorical(y_train)\n        y_test = to_categorical(y_test)\n    \n        model = Sequential([\n            layers.Conv2D(filters=8, kernel_size=3,\n                          activation='relu',\n                          input_shape=input_shape),\n            layers.MaxPooling2D(pool_size=2),\n            layers.Conv2D(filters=4, kernel_size=(3, 3),\n                          activation='relu', padding='same'),\n            layers.GlobalAveragePooling2D(),\n            layers.Dense(y_test.shape[-1], activation='softmax')\n        ])\n        model.compile(loss='categorical_crossentropy',\n                      optimizer='rmsprop',\n                      metrics=['accuracy'])\n        history = model.fit_generator(img_gen.flow(x_train, y_train, batch_size=16),\n                                      epochs=10,\n                                      validation_data=img_gen.flow(x_test, y_test,\n                                                                   batch_size=16),\n>                                     verbose=0)\n\ntests/integration_tests/test_image_data_tasks.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/legacy/interfaces.py:91: in wrapper\n    return func(*args, **kwargs)\nkeras/engine/training.py:1418: in fit_generator\n    initial_epoch=initial_epoch)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmodel = <keras.engine.sequential.Sequential object at 0x12e5ecf10>\ngenerator = <keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x12e659bd0>\nsteps_per_epoch = None, epochs = 10, verbose = 0, callbacks = None\nvalidation_data = <keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x12e659d10>\nvalidation_steps = None, class_weight = None, max_queue_size = 10, workers = 1\nuse_multiprocessing = False, shuffle = True, initial_epoch = 0\n\n    def fit_generator(model,\n                      generator,\n                      steps_per_epoch=None,\n                      epochs=1,\n                      verbose=1,\n                      callbacks=None,\n                      validation_data=None,\n                      validation_steps=None,\n                      class_weight=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      shuffle=True,\n                      initial_epoch=0):\n        \"\"\"See docstring for `Model.fit_generator`.\"\"\"\n        epoch = initial_epoch\n    \n        do_validation = bool(validation_data)\n        model._make_train_function()\n        if do_validation:\n            model._make_test_function()\n    \n        is_sequence = isinstance(generator, Sequence)\n        if not is_sequence and use_multiprocessing and workers > 1:\n            warnings.warn(\n                UserWarning('Using a generator with `use_multiprocessing=True`'\n                            ' and multiple workers may duplicate your data.'\n                            ' Please consider using the`keras.utils.Sequence'\n                            ' class.'))\n        if steps_per_epoch is None:\n            if is_sequence:\n                steps_per_epoch = len(generator)\n            else:\n>               raise ValueError('`steps_per_epoch=None` is only valid for a'\n                                 ' generator based on the '\n                                 '`keras.utils.Sequence`'\n                                 ' class. Please specify `steps_per_epoch` '\n                                 'or use the `keras.utils.Sequence` class.')\nE               ValueError: `steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.\n\nkeras/engine/training_generator.py:54: ValueError",
                "traceback": "keras/legacy/interfaces.py:91: in wrapper\n    return func(*args, **kwargs)\nkeras/engine/training.py:1418: in fit_generator\n    initial_epoch=initial_epoch)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nmodel = <keras.engine.sequential.Sequential object at 0x12e5ecf10>\ngenerator = <keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x12e659bd0>\nsteps_per_epoch = None, epochs = 10, verbose = 0, callbacks = None\nvalidation_data = <keras_preprocessing.image.numpy_array_iterator.NumpyArrayIterator object at 0x12e659d10>\nvalidation_steps = None, class_weight = None, max_queue_size = 10, workers = 1\nuse_multiprocessing = False, shuffle = True, initial_epoch = 0\n\n    def fit_generator(model,\n                      generator,\n                      steps_per_epoch=None,\n                      epochs=1,\n                      verbose=1,\n                      callbacks=None,\n                      validation_data=None,\n                      validation_steps=None,\n                      class_weight=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      shuffle=True,\n                      initial_epoch=0):\n        \"\"\"See docstring for `Model.fit_generator`.\"\"\"\n        epoch = initial_epoch\n    \n        do_validation = bool(validation_data)\n        model._make_train_function()\n        if do_validation:\n            model._make_test_function()\n    \n        is_sequence = isinstance(generator, Sequence)\n        if not is_sequence and use_multiprocessing and workers > 1:\n            warnings.warn(\n                UserWarning('Using a generator with `use_multiprocessing=True`'\n                            ' and multiple workers may duplicate your data.'\n                            ' Please consider using the`keras.utils.Sequence'\n                            ' class.'))\n        if steps_per_epoch is None:\n            if is_sequence:\n                steps_per_epoch = len(generator)\n            else:\n>               raise ValueError('`steps_per_epoch=None` is only valid for a'\n                                 ' generator based on the '\n                                 '`keras.utils.Sequence`'\n                                 ' class. Please specify `steps_per_epoch` '\n                                 'or use the `keras.utils.Sequence` class.')\nE               ValueError: `steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.\n\nkeras/engine/training_generator.py:54: ValueError",
                "test_function_decorators": []
            }
        ]
    }
}