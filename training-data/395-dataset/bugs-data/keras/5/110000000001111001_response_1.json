{
    "keras": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "keras/utils/data_utils.py",
            "replace_code": "def get_file(fname,\n             origin,\n             untar=False,\n             md5_hash=None,\n             file_hash=None,\n             cache_subdir='datasets',\n             hash_algorithm='auto',\n             extract=False,\n             archive_format='auto',\n             cache_dir=None):\n\n    import os\n    import requests\n    import tarfile\n    import zipfile\n    import hashlib\n    if cache_dir is None:\n        cache_dir = os.path.join(os.path.expanduser('~'), '.keras')\n    \n    datadir = os.path.join(cache_dir, cache_subdir)\n    os.makedirs(datadir, exist_ok=True)\n    \n    fpath = os.path.join(datadir, fname)\n    \n    if not os.path.exists(fpath):\n        print('Downloading data from', origin)\n        r = requests.get(origin, stream=True)\n        with open(fpath, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192):\n                if chunk:\n                    f.write(chunk)\n    \n    if untar or extract:\n        if archive_format == 'zip':\n            with zipfile.ZipFile(fpath, 'r') as zip_ref:\n                zip_ref.extractall(datadir)\n        elif archive_format in ['tar', 'tar.gz', 'tar.bz']:\n            with tarfile.open(fpath, 'r') as tar_ref:\n                tar_ref.extractall(datadir)\n    \n    # Perform hash validation\n    if file_hash is not None:\n        if hash_algorithm == 'md5':\n            import hashlib\n            file_hash_calculated = hashlib.md5(open(fpath, 'rb').read()).hexdigest()\n        elif hash_algorithm == 'sha256':\n            file_hash_calculated = hashlib.sha256(open(fpath, 'rb').read()).hexdigest()\n        else:\n            raise ValueError('Invalid hash algorithm')\n    \n        if file_hash_calculated != file_hash:\n            print('Hash validation failed. Redownload the file or check the hash value.')\n            # raise an error or redownload the file\n    \n    return fpath"
        }
    ]
}