{
    "keras": [
        {
            "bugID": 5,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 123,
            "file_name": "keras/utils/data_utils.py",
            "replace_code": "def get_file(fname, origin, untar=False, md5_hash=None, file_hash=None, \n             cache_subdir='datasets', hash_algorithm='auto', extract=False, \n             archive_format='auto', cache_dir=None):\n    import os\n    import tarfile\n    import zipfile\n    from six.moves.urllib.parse import urljoin\n    from six.moves.urllib.request import pathname2url, urlretrieve\n    if cache_dir is None:\n        cache_dir = os.path.join(os.path.expanduser('~'), '.keras')\n    \n    os.makedirs(cache_dir, exist_ok=True)\n    \n    cache_subdir = os.path.join(cache_dir, cache_subdir)\n    if not os.path.exists(cache_subdir):\n        os.makedirs(cache_subdir)\n    \n    fpath = os.path.join(cache_subdir, fname)\n    \n    download = False\n    if os.path.exists(fpath):\n        if file_hash is not None:\n            if not validate_file(fpath, file_hash, algorithm=hash_algorithm):\n                print('A local file was found, but it seems to be '\n                      'incomplete or outdated because the ' + hash_algorithm +\n                      ' file hash does not match the original value of ' +\n                      file_hash + ' so we will re-download the data.')\n                download = True\n    else:\n        download = True\n    \n    if download:\n        print('Downloading data from', origin)\n        urlretrieve(origin, fpath)\n    \n    if untar:\n        untar_fpath = fpath + '.tar.gz'\n        if not os.path.exists(untar_fpath):\n            os.rename(fpath, untar_fpath)\n            with tarfile.open(untar_fpath, 'r:gz') as tar:\n                tar.extractall(cache_subdir)\n        return untar_fpath\n    \n    if extract:\n        _extract_archive(fpath, cache_subdir, archive_format)\n    \n    return fpath"
        }
    ]
}