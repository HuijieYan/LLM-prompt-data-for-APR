{
    "keras": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 428,
            "file_name": "keras/engine/training_utils.py",
            "replace_code": "def standardize_weights(y, sample_weight=None, class_weight=None, sample_weight_mode=None):\n    import numpy as np\n    if sample_weight_mode == 'temporal':\n        if len(y.shape) < 3:\n            raise ValueError('Timestep-wise sample weighting is restricted to outputs that are at least 3D.')\n        if sample_weight is not None and sample_weight.ndim != 2:\n            raise ValueError('For timestep-wise sample weighting, pass a 2D sample_weight array.')\n    \n    if sample_weight is not None and class_weight is not None:\n        warnings.warn('Found both `sample_weight` and `class_weight`: `class_weight` argument will be ignored.')\n    \n    if sample_weight is not None:\n        if sample_weight.ndim > y.ndim:\n            raise ValueError('Invalid sample_weight shape for the input shape.')\n        if np.any(y.shape[-sample_weight.ndim:] != sample_weight.shape):\n            raise ValueError('sample_weight shape is not compatible with the input shape.')\n        return sample_weight\n    elif isinstance(class_weight, dict):\n        if len(y.shape) > 2:\n            raise ValueError('`class_weight` not supported for 3+ dimensional targets.')\n        if y.shape[1] > 1:\n            y_classes = np.argmax(y, axis=1)\n        elif y.shape[1] == 1:\n            y_classes = np.reshape(y, y.shape[0])\n        else:\n            y_classes = y\n        weights = np.asarray([class_weight[cls] if cls in class_weight else 1.0 for cls in y_classes])\n        return weights\n    else:\n        if sample_weight_mode is None:\n            return np.ones((y.shape[0],), dtype=np.float32)\n        else:\n            return np.ones(y.shape, dtype=np.float32)"
        }
    ]
}