{
    "keras": [
        {
            "bugID": 10,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 428,
            "file_name": "keras/engine/training_utils.py",
            "replace_code": "def standardize_weights(y,\n                        sample_weight=None,\n                        class_weight=None,\n                        sample_weight_mode=None):\n    import numpy as np\n    import warnings\n    from tensorflow.python.keras.utils import tf_utils\n    import tensorflow.keras.backend as K\n    \"\"\"Performs sample weight validation and standardization.\n    \n    Everything gets normalized to a single sample-wise (or timestep-wise)\n    weight array.\n    \n    Arguments:\n        y: Numpy array of model targets to be weighted.\n        sample_weight: User-provided `sample_weight` argument.\n        class_weight: User-provided `class_weight` argument.\n        sample_weight_mode: One of `None` or `\"temporal\"`.\n            `\"temporal\"` indicated that we expect 2D weight data\n            that will be applied to the last 2 dimensions of\n            the targets (i.e. we are weighting timesteps, not samples).\n    \n    Returns:\n        A Numpy array of target weights, one entry per sample to weight.\n    \n    Raises:\n        ValueError: In case of invalid user-provided arguments.\n    \"\"\"\n    y = np.array(y)\n    if sample_weight_mode is not None:\n        if sample_weight_mode != 'temporal':\n            raise ValueError('\"sample_weight_mode should be None or \"temporal\". Found: ' + str(sample_weight_mode))\n        if len(y.shape) < 2:\n            raise ValueError(f'Found a sample_weight array for an input with shape {y.shape}. Timestep-wise sample weighting (use of sample_weight_mode=\"temporal\") is restricted to outputs that are at least 2D, i.e., that have a time dimension.')\n        if sample_weight is not None and len(sample_weight.shape) != 2:\n            raise ValueError(f'Found a sample_weight array with shape {sample_weight.shape}. In order to use timestep-wise sample weighting, you should pass a 2D sample_weight array.')\n    else:\n        if sample_weight is not None and len(sample_weight.shape) != 1:\n            raise ValueError(f'Found a sample_weight array with shape {sample_weight.shape}. In order to use timestep-wise sample weights, you should specify sample_weight_mode=\"temporal\" in compile(). If you just mean to use sample-wise weights, make sure your sample_weight array is 1D.')\n    \n    if sample_weight is not None and class_weight is not None:\n        warnings.warn('Found both `sample_weight` and `class_weight`: '\n                      '`class_weight` argument will be ignored.')\n    \n    if sample_weight is not None:\n        if len(sample_weight.shape) > len(y.shape):\n            raise ValueError(f'Found a sample_weight with shape {sample_weight.shape}. Expected sample_weight with rank less than or equal to {len(y.shape)}')\n    \n        if np.prod(y.shape[:sample_weight.ndim]) != sample_weight.shape[0]:\n            raise ValueError(f'Found a sample_weight array with shape {sample_weight.shape} for an input with shape {y.shape}. Sample_weight cannot be broadcasted.')\n    \n        return np.array(sample_weight)\n    \n    elif isinstance(class_weight, dict):\n        if len(y.shape) > 2:\n            raise ValueError('`class_weight` not supported for 3+ dimensional targets.')\n        if len(y.shape) - 1:\n            y_classes = np.argmax(y, axis=1)\n        elif len(y.shape) == 1:\n            y_classes = y\n        else:\n            y_classes = np.argmax(y, axis=-1)\n    \n        weights = [class_weight[c] for c in y_classes]\n        return np.array(weights) \n    else:\n        last_dim = 1 if len(y.shape) == 1 else y.shape[-1]\n        return np.ones((y.shape[0], last_dim), dtype=K.floatx())"
        }
    ]
}