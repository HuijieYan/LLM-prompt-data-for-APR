{
    "1.1.1": null,
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_27/keras/layers/wrappers.py",
    "1.3.2": null,
    "1.4.1": [
        "@keras_test\ndef test_Bidirectional_updates():\n    x = Input(shape=(3, 2))\n    layer = wrappers.Bidirectional(layers.SimpleRNN(3))\n    assert len(layer.updates) == 0\n    assert len(layer.get_updates_for(None)) == 0\n    assert len(layer.get_updates_for(x)) == 0\n    layer.forward_layer.add_update(0, inputs=x)\n    layer.forward_layer.add_update(1, inputs=None)\n    layer.backward_layer.add_update(0, inputs=x)\n    layer.backward_layer.add_update(1, inputs=None)\n    assert len(layer.updates) == 4\n    assert len(layer.get_updates_for(None)) == 2\n    assert len(layer.get_updates_for(x)) == 2",
        "@keras_test\ndef test_Bidirectional_losses():\n    x = Input(shape=(3, 2))\n    layer = wrappers.Bidirectional(\n        layers.SimpleRNN(3, kernel_regularizer='l1', bias_regularizer='l1'))\n    _ = layer(x)\n    assert len(layer.losses) == 4\n    assert len(layer.get_losses_for(None)) == 4\n    assert len(layer.get_losses_for(x)) == 0\n    layer.forward_layer.add_loss(0, inputs=x)\n    layer.forward_layer.add_loss(1, inputs=None)\n    layer.backward_layer.add_loss(0, inputs=x)\n    layer.backward_layer.add_loss(1, inputs=None)\n    assert len(layer.losses) == 8\n    assert len(layer.get_losses_for(None)) == 6\n    assert len(layer.get_losses_for(x)) == 2"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_27/tests/keras/layers/wrappers_test.py",
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_27/tests/keras/layers/wrappers_test.py"
    ],
    "2.1.1": [
        [
            "E       assert 1 == 2\nE         +1\nE         -2"
        ],
        [
            "E       assert 2 == 4\nE         +2\nE         -4"
        ]
    ],
    "2.1.2": [
        [
            "@keras_test\n    def test_Bidirectional_updates():\n        x = Input(shape=(3, 2))\n        layer = wrappers.Bidirectional(layers.SimpleRNN(3))\n        assert len(layer.updates) == 0\n        assert len(layer.get_updates_for(None)) == 0\n        assert len(layer.get_updates_for(x)) == 0\n        layer.forward_layer.add_update(0, inputs=x)\n        layer.forward_layer.add_update(1, inputs=None)\n        layer.backward_layer.add_update(0, inputs=x)\n        layer.backward_layer.add_update(1, inputs=None)\n        assert len(layer.updates) == 4\n>       assert len(layer.get_updates_for(None)) == 2",
            "\ntests/keras/layers/wrappers_test.py:571: AssertionError"
        ],
        [
            "@keras_test\n    def test_Bidirectional_losses():\n        x = Input(shape=(3, 2))\n        layer = wrappers.Bidirectional(\n            layers.SimpleRNN(3, kernel_regularizer='l1', bias_regularizer='l1'))\n        _ = layer(x)\n        assert len(layer.losses) == 4\n>       assert len(layer.get_losses_for(None)) == 4",
            "\ntests/keras/layers/wrappers_test.py:582: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}