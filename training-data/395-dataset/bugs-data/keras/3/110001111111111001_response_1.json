{
    "keras": [
        {
            "bugID": 3,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 26,
            "file_name": "models.py",
            "replace_code": "def _clone_functional_model(model, input_tensors=None):\n    from tensorflow.keras.models import Model\n    from tensorflow.keras.layers import Input, InputLayer\n    import tensorflow.keras.backend as K\n    import numpy as np\n    if not isinstance(model, Model):\n        raise ValueError('Expected `model` argument to be a `Model` instance, got ', model)\n    \n    layer_map = {}  # Cache for created layers.\n    tensor_map = {}  # Map {reference_tensor: (corresponding_tensor, mask)}\n    \n    if input_tensors is None:\n        input_tensors = [Input(batch_shape=layer.batch_input_shape,\n                               dtype=layer.dtype,\n                               sparse=layer.sparse,\n                               name=layer.name) for layer in model._input_layers]\n    \n    for x, y in zip(model.inputs, input_tensors):\n        tensor_map[x] = (y, None)  # tensor, mask\n    \n    for depth in sorted(model._nodes_by_depth.keys(), reverse=True):\n        for node in model._nodes_by_depth[depth]:\n            inbound_layer = node.inbound_layer\n            if inbound_layer not in layer_map:\n                new_layer = inbound_layer.__class__.from_config(inbound_layer.get_config())\n                layer_map[inbound_layer] = new_layer\n            else:\n                new_layer = layer_map[inbound_layer]\n                if isinstance(new_layer, InputLayer):\n                    continue\n    \n            reference_input_tensors = node.input_tensors\n            reference_output_tensors = node.output_tensors\n            computed_data = []\n    \n            for x in reference_input_tensors:\n                if x in tensor_map:\n                    computed_data.append(tensor_map[x])\n    \n            if len(computed_data) == len(reference_input_tensors):\n                kwargs = node.arguments if node.arguments else {}\n                if len(computed_data) == 1:\n                    computed_tensor, computed_mask = computed_data[0]\n                    if 'mask' in kwargs and \\\n                            hasattr(new_layer, 'call') and 'mask' not in kwargs:\n                        kwargs['mask'] = computed_mask\n                    output_tensors = K.function([computed_tensor], [new_layer(computed_tensor, **kwargs)])([computed_tensor])\n                else:\n                    computed_tensors, computed_masks = zip(*computed_data)\n                    if 'mask' in kwargs and \\\n                            hasattr(new_layer, 'call') and 'mask' not in kwargs:\n                        kwargs['mask'] = computed_masks\n                    output_tensors = K.function(computed_tensors, [new_layer(computed_tensors, **kwargs)])(computed_tensors)\n    \n                for x, y, mask in zip(reference_output_tensors, output_tensors):\n                    tensor_map[x] = (y, mask)\n    \n    output_tensors = [tensor_map[x][0] for x in model.outputs]\n    return Model(input_tensors, output_tensors, name=model.name)"
        }
    ]
}