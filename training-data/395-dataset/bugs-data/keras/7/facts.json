{
    "1.1.1": "def predict(self, x, **kwargs):\n    \n    kwargs = self.filter_sk_params(Sequential.predict, kwargs)\n    return np.squeeze(self.model.predict(x, **kwargs))\n",
    "1.1.2": "Returns predictions for the given test data.\n\n# Arguments\n    x: array-like, shape `(n_samples, n_features)`\n        Test samples where `n_samples` is the number of samples\n        and `n_features` is the number of features.\n    **kwargs: dictionary arguments\n        Legal arguments are the arguments of `Sequential.predict`.\n\n# Returns\n    preds: array-like, shape `(n_samples,)`\n        Predictions.",
    "1.2.1": "class KerasRegressor(BaseWrapper)",
    "1.2.2": "Implementation of the scikit-learn regressor API for Keras.\n    ",
    "1.2.3": [
        "predict(self, x, **kwargs)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_7/keras/wrappers/scikit_learn.py",
    "1.3.2": [
        "filter_sk_params(self, fn, override=None)",
        "predict(self, x, **kwargs)",
        "predict(self, x, **kwargs)"
    ],
    "1.4.1": [
        "def test_regression_predict_shape_correct_num_test_1():\n    assert_regression_predict_shape_correct(num_test=1)"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_7/tests/keras/wrappers/scikit_learn_test.py"
    ],
    "2.1.1": [
        [
            "E       assert () == (1,)\nE         Right contains one more item: 1\nE         Full diff:\nE         - (1,)\nE         + ()"
        ]
    ],
    "2.1.2": [
        [
            "def test_regression_predict_shape_correct_num_test_1():\n>       assert_regression_predict_shape_correct(num_test=1)\n\ntests/keras/wrappers/scikit_learn_test.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nnum_test = 1\n\n    def assert_regression_predict_shape_correct(num_test):\n        reg = KerasRegressor(\n            build_fn=build_fn_reg, hidden_dims=hidden_dims,\n            batch_size=batch_size, epochs=epochs)\n        reg.fit(X_train, y_train, batch_size=batch_size, epochs=epochs)\n    \n        preds = reg.predict(X_test[:num_test], batch_size=batch_size)\n>       assert preds.shape == (num_test, )",
            "\ntests/keras/wrappers/scikit_learn_test.py:185: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "kwargs": "{'batch_size': 32}",
                "self": "<keras.wrappers.scikit_learn.KerasRegressor object at 0x12399efd0>",
                "self.model": "<keras.engine.sequential.Sequential object at 0x123851790>",
                "x": "array([[2.115636 , 2.3982556, 1.3876354, 1.719739 , 2.3565648]],\n      dtype=float32)"
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "kwargs": "dict",
                "self": "KerasRegressor",
                "self.model": "Sequential",
                "x": "ndarray"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "kwargs": "{'batch_size': 32}",
                "self": "<keras.wrappers.scikit_learn.KerasRegressor object at 0x12a5eb710>",
                "self.model": "<keras.engine.sequential.Sequential object at 0x12a5eb750>",
                "x": "array([[2.115636 , 2.3982556, 1.3876354, 1.719739 , 2.3565648]],\n      dtype=float32)"
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "kwargs": "dict",
                "self": "KerasRegressor",
                "self.model": "Sequential",
                "x": "ndarray"
            },
            {}
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}