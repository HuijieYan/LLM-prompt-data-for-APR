{
    "keras": [
        {
            "bugID": 40,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 393,
            "file_name": "keras/layers/recurrent.py",
            "replace_code": "def compute_output_shape(self, input_shape):\n\n    if isinstance(input_shape, list):\n        input_shape = input_shape[0]\n    \n    if hasattr(self.cell.state_size, '__len__'):\n        output_dim = self.cell.state_size[0]\n    else:\n        output_dim = self.cell.state_size\n    \n    if self.return_sequences:\n        output_shape = (input_shape[0], input_shape[1], output_dim)\n    else:\n        output_shape = (input_shape[0], output_dim)\n    \n    if self.return_state:\n        state_shape = [(input_shape[0], output_dim) for _ in range(len(self.states))]\n        return [output_shape] + state_shape\n    else:\n        return output_shape"
        }
    ]
}