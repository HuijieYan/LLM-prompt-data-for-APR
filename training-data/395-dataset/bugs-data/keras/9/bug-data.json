{
    "keras:9": {
        "/Volumes/SSD2T/bgp_envs/repos/keras_9/docs/autogen.py": {
            "buggy_functions": [
                {
                    "function_name": "process_list_block",
                    "function_code": "def process_list_block(docstring, starting_point, section_end,\n                       leading_spaces, marker):\n    ending_point = docstring.find('\\n\\n', starting_point)\n    block = docstring[starting_point:(None if ending_point == -1 else\n                                      ending_point - 1)]\n    # Place marker for later reinjection.\n    docstring_slice = docstring[starting_point:section_end].replace(block, marker)\n    docstring = (docstring[:starting_point]\n                 + docstring_slice\n                 + docstring[section_end:])\n    lines = block.split('\\n')\n    # Remove the computed number of leading white spaces from each line.\n    lines = [re.sub('^' + ' ' * leading_spaces, '', line) for line in lines]\n    # Usually lines have at least 4 additional leading spaces.\n    # These have to be removed, but first the list roots have to be detected.\n    top_level_regex = r'^    ([^\\s\\\\\\(]+):(.*)'\n    top_level_replacement = r'- __\\1__:\\2'\n    lines = [re.sub(top_level_regex, top_level_replacement, line) for line in lines]\n    # All the other lines get simply the 4 leading space (if present) removed\n    lines = [re.sub(r'^    ', '', line) for line in lines]\n    # Fix text lines after lists\n    indent = 0\n    text_block = False\n    for i in range(len(lines)):\n        line = lines[i]\n        spaces = re.search(r'\\S', line)\n        if spaces:\n            # If it is a list element\n            if line[spaces.start()] == '-':\n                indent = spaces.start() + 1\n                if text_block:\n                    text_block = False\n                    lines[i] = '\\n' + line\n            elif spaces.start() < indent:\n                text_block = True\n                indent = spaces.start()\n                lines[i] = '\\n' + line\n        else:\n            text_block = False\n            indent = 0\n    block = '\\n'.join(lines)\n    return docstring, block\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 117,
                    "end_line": 158,
                    "variables": {
                        "ending_point": [
                            120,
                            121,
                            119
                        ],
                        "docstring.find": [
                            119
                        ],
                        "docstring": [
                            158,
                            119,
                            120,
                            123,
                            124,
                            126
                        ],
                        "starting_point": [
                            120,
                            123,
                            124,
                            119
                        ],
                        "block": [
                            120,
                            123,
                            157,
                            158,
                            127
                        ],
                        "docstring_slice": [
                            123,
                            125
                        ],
                        "replace": [
                            123
                        ],
                        "section_end": [
                            123,
                            126
                        ],
                        "marker": [
                            123
                        ],
                        "lines": [
                            129,
                            134,
                            136,
                            140,
                            141,
                            149,
                            153,
                            157,
                            127
                        ],
                        "block.split": [
                            127
                        ],
                        "re.sub": [
                            136,
                            129,
                            134
                        ],
                        "re": [
                            136,
                            129,
                            142,
                            134
                        ],
                        "leading_spaces": [
                            129
                        ],
                        "line": [
                            129,
                            134,
                            136,
                            141,
                            142,
                            145,
                            149,
                            153
                        ],
                        "top_level_regex": [
                            132,
                            134
                        ],
                        "top_level_replacement": [
                            133,
                            134
                        ],
                        "indent": [
                            138,
                            146,
                            150,
                            152,
                            156
                        ],
                        "text_block": [
                            139,
                            147,
                            148,
                            151,
                            155
                        ],
                        "i": [
                            153,
                            140,
                            141,
                            149
                        ],
                        "range": [
                            140
                        ],
                        "len": [
                            140
                        ],
                        "spaces": [
                            142,
                            143,
                            145,
                            146,
                            150,
                            152
                        ],
                        "re.search": [
                            142
                        ],
                        "spaces.start": [
                            152,
                            145,
                            146,
                            150
                        ],
                        "join": [
                            157
                        ]
                    },
                    "filtered_variables": {
                        "ending_point": [
                            120,
                            121,
                            119
                        ],
                        "docstring.find": [
                            119
                        ],
                        "docstring": [
                            158,
                            119,
                            120,
                            123,
                            124,
                            126
                        ],
                        "starting_point": [
                            120,
                            123,
                            124,
                            119
                        ],
                        "block": [
                            120,
                            123,
                            157,
                            158,
                            127
                        ],
                        "docstring_slice": [
                            123,
                            125
                        ],
                        "replace": [
                            123
                        ],
                        "section_end": [
                            123,
                            126
                        ],
                        "marker": [
                            123
                        ],
                        "lines": [
                            129,
                            134,
                            136,
                            140,
                            141,
                            149,
                            153,
                            157,
                            127
                        ],
                        "block.split": [
                            127
                        ],
                        "re.sub": [
                            136,
                            129,
                            134
                        ],
                        "re": [
                            136,
                            129,
                            142,
                            134
                        ],
                        "leading_spaces": [
                            129
                        ],
                        "line": [
                            129,
                            134,
                            136,
                            141,
                            142,
                            145,
                            149,
                            153
                        ],
                        "top_level_regex": [
                            132,
                            134
                        ],
                        "top_level_replacement": [
                            133,
                            134
                        ],
                        "indent": [
                            138,
                            146,
                            150,
                            152,
                            156
                        ],
                        "text_block": [
                            139,
                            147,
                            148,
                            151,
                            155
                        ],
                        "i": [
                            153,
                            140,
                            141,
                            149
                        ],
                        "spaces": [
                            142,
                            143,
                            145,
                            146,
                            150,
                            152
                        ],
                        "re.search": [
                            142
                        ],
                        "spaces.start": [
                            152,
                            145,
                            146,
                            150
                        ],
                        "join": [
                            157
                        ]
                    },
                    "diff_line_number": 120,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "ending_point": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "docstring.find": {
                                    "variable_value": "<built-in method find of str object at 0x12bf3c810>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "docstring": {
                                    "variable_value": "'Base class for recurrent layers.\\n\\n    # Arguments\\n        return_sequences: Boolean. Whether to return the last output\\n            in the output sequence, or the full sequence.\\n        return_state: Boolean. Whether to return the last state\\n            in addition to the output.\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "284"
                                },
                                "starting_point": {
                                    "variable_value": "50",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "docstring_slice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "section_end": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "marker": {
                                    "variable_value": "'$Arguments$'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leading_spaces": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "top_level_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "top_level_replacement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "text_block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spaces.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "ending_point": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "docstring.find": {
                                    "variable_value": "<built-in method find of str object at 0x12c0da2d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "docstring": {
                                    "variable_value": "'Base class for recurrent layers.\\n\\n    # Arguments\\n        return_sequences: Boolean. Whether to return the last output\\n            in the output sequence, or the full sequence.\\n        return_state: Boolean. Whether to return the last state\\n            in addition to the output.\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "284"
                                },
                                "starting_point": {
                                    "variable_value": "50",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": "'- __return_sequences__: Boolean. Whether to return the last output\\n    in the output sequence, or the full sequence.\\n- __return_state__: Boolean. Whether to return the last state\\n    in addition to the output.\\n'",
                                    "variable_type": "str",
                                    "variable_shape": "210"
                                },
                                "docstring_slice": {
                                    "variable_value": "'        return_sequences: Boolean. Whether to return the last output\\n            in the output sequence, or the full sequence.\\n        return_state: Boolean. Whether to return the last state\\n            in addition to the output.\\n   '",
                                    "variable_type": "str",
                                    "variable_shape": "233"
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "section_end": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "marker": {
                                    "variable_value": "'$Arguments$'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "lines": {
                                    "variable_value": "['- __return_sequences__: Boolean. Whether to return the last output', '    in the output sequence, or the full sequence.', '- __return_state__: Boolean. Whether to return the last state', '    in addition to the output.', '']",
                                    "variable_type": "list",
                                    "variable_shape": "5"
                                },
                                "block.split": {
                                    "variable_value": "<built-in method split of str object at 0x12d4bb9c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leading_spaces": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "top_level_regex": {
                                    "variable_value": "'^    ([^\\\\s\\\\\\\\\\\\(]+):(.*)'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "top_level_replacement": {
                                    "variable_value": "'- __\\\\1__:\\\\2'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "indent": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "text_block": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "spaces": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spaces.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "ending_point": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "docstring.find": {
                                    "variable_value": "<built-in method find of str object at 0x128cfb810>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "docstring": {
                                    "variable_value": "'Base class for recurrent layers.\\n\\n    # Arguments\\n        return_sequences: Boolean. Whether to return the last output\\n            in the output sequence, or the full sequence.\\n        return_state: Boolean. Whether to return the last state\\n            in addition to the output.\\n    '",
                                    "variable_type": "str",
                                    "variable_shape": "284"
                                },
                                "starting_point": {
                                    "variable_value": "50",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "section_end": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "docstring_slice": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marker": {
                                    "variable_value": "'$Arguments$'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "lines": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "block.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leading_spaces": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "top_level_regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "top_level_replacement": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indent": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "text_block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spaces.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "ending_point": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "docstring.find": {
                                    "variable_value": "<built-in method find of str object at 0x128d8cd50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "docstring": {
                                    "variable_value": "'Base class for recurrent layers.\\n\\n    # Arguments\\n$Arguments$ '",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                },
                                "starting_point": {
                                    "variable_value": "50",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "block": {
                                    "variable_value": "'- __return_sequences__: Boolean. Whether to return the last output\\n    in the output sequence, or the full sequence.\\n- __return_state__: Boolean. Whether to return the last state\\n    in addition to the output.\\n   '",
                                    "variable_type": "str",
                                    "variable_shape": "213"
                                },
                                "section_end": {
                                    "variable_value": "-1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "docstring_slice": {
                                    "variable_value": "'$Arguments$'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "marker": {
                                    "variable_value": "'$Arguments$'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "lines": {
                                    "variable_value": "['- __return_sequences__: Boolean. Whether to return the last output', '    in the output sequence, or the full sequence.', '- __return_state__: Boolean. Whether to return the last state', '    in addition to the output.', '   ']",
                                    "variable_type": "list",
                                    "variable_shape": "5"
                                },
                                "block.split": {
                                    "variable_value": "<built-in method split of str object at 0x12a2469c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "leading_spaces": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "line": {
                                    "variable_value": "'   '",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "top_level_regex": {
                                    "variable_value": "'^    ([^\\\\s\\\\\\\\\\\\(]+):(.*)'",
                                    "variable_type": "str",
                                    "variable_shape": "22"
                                },
                                "top_level_replacement": {
                                    "variable_value": "'- __\\\\1__:\\\\2'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "indent": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "text_block": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "spaces": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "spaces.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "join": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_function_signature(function, method=True):\n    wrapped = getattr(function, '_original_function', None)\n    if wrapped is None:\n        signature = inspect.getargspec(function)\n    else:\n        signature = inspect.getargspec(wrapped)\n    defaults = signature.defaults\n    if method:\n        args = signature.args[1:]\n    else:\n        args = signature.args\n    if defaults:\n        kwargs = zip(args[-len(defaults):], defaults)\n        args = args[:-len(defaults)]\n    else:\n        kwargs = []\n    st = '%s.%s(' % (clean_module_name(function.__module__), function.__name__)\n\n    for a in args:\n        st += str(a) + ', '\n    for a, v in kwargs:\n        if isinstance(v, str):\n            v = '\\'' + v + '\\''\n        st += str(a) + '=' + str(v) + ', '\n    if kwargs or args:\n        signature = st[:-2] + ')'\n    else:\n        signature = st + ')'\n    return post_process_signature(signature)",
                "def get_class_signature(cls):\n    try:\n        class_signature = get_function_signature(cls.__init__)\n        class_signature = class_signature.replace('__init__', cls.__name__)\n    except (TypeError, AttributeError):\n        # in case the class inherits from object and does not\n        # define __init__\n        class_signature = \"{clean_module_name}.{cls_name}()\".format(\n            clean_module_name=clean_module_name(cls.__module__),\n            cls_name=cls.__name__\n        )\n    return post_process_signature(class_signature)",
                "def post_process_signature(signature):\n    parts = re.split(r'\\.(?!\\d)', signature)\n    if len(parts) >= 4:\n        if parts[1] == 'layers':\n            signature = 'keras.layers.' + '.'.join(parts[3:])\n        if parts[1] == 'utils':\n            signature = 'keras.utils.' + '.'.join(parts[3:])\n        if parts[1] == 'backend':\n            signature = 'keras.backend.' + '.'.join(parts[3:])\n    return signature",
                "def clean_module_name(name):\n    if name.startswith('keras_applications'):\n        name = name.replace('keras_applications', 'keras.applications')\n    if name.startswith('keras_preprocessing'):\n        name = name.replace('keras_preprocessing', 'keras.preprocessing')\n    assert name[:6] == 'keras.', 'Invalid module name: %s' % name\n    return name",
                "def class_to_source_link(cls):\n    module_name = clean_module_name(cls.__module__)\n    path = module_name.replace('.', '/')\n    path += '.py'\n    line = inspect.getsourcelines(cls)[-1]\n    link = ('https://github.com/keras-team/'\n            'keras/blob/master/' + path + '#L' + str(line))\n    return '[[source]](' + link + ')'",
                "def code_snippet(snippet):\n    result = '```python\\n'\n    result += snippet + '\\n'\n    result += '```\\n'\n    return result",
                "def count_leading_spaces(s):\n    ws = re.search(r'\\S', s)\n    if ws:\n        return ws.start()\n    else:\n        return 0",
                "def process_list_block(docstring, starting_point, section_end,\n                       leading_spaces, marker):\n    ending_point = docstring.find('\\n\\n', starting_point)\n    block = docstring[starting_point:(None if ending_point == -1 else\n                                      ending_point - 1)]\n    # Place marker for later reinjection.\n    docstring_slice = docstring[starting_point:section_end].replace(block, marker)\n    docstring = (docstring[:starting_point]\n                 + docstring_slice\n                 + docstring[section_end:])\n    lines = block.split('\\n')\n    # Remove the computed number of leading white spaces from each line.\n    lines = [re.sub('^' + ' ' * leading_spaces, '', line) for line in lines]\n    # Usually lines have at least 4 additional leading spaces.\n    # These have to be removed, but first the list roots have to be detected.\n    top_level_regex = r'^    ([^\\s\\\\\\(]+):(.*)'\n    top_level_replacement = r'- __\\1__:\\2'\n    lines = [re.sub(top_level_regex, top_level_replacement, line) for line in lines]\n    # All the other lines get simply the 4 leading space (if present) removed\n    lines = [re.sub(r'^    ', '', line) for line in lines]\n    # Fix text lines after lists\n    indent = 0\n    text_block = False\n    for i in range(len(lines)):\n        line = lines[i]\n        spaces = re.search(r'\\S', line)\n        if spaces:\n            # If it is a list element\n            if line[spaces.start()] == '-':\n                indent = spaces.start() + 1\n                if text_block:\n                    text_block = False\n                    lines[i] = '\\n' + line\n            elif spaces.start() < indent:\n                text_block = True\n                indent = spaces.start()\n                lines[i] = '\\n' + line\n        else:\n            text_block = False\n            indent = 0\n    block = '\\n'.join(lines)\n    return docstring, block",
                "def process_docstring(docstring):\n    # First, extract code blocks and process them.\n    code_blocks = []\n    if '```' in docstring:\n        tmp = docstring[:]\n        while '```' in tmp:\n            tmp = tmp[tmp.find('```'):]\n            index = tmp[3:].find('```') + 6\n            snippet = tmp[:index]\n            # Place marker in docstring for later reinjection.\n            docstring = docstring.replace(\n                snippet, '$CODE_BLOCK_%d' % len(code_blocks))\n            snippet_lines = snippet.split('\\n')\n            # Remove leading spaces.\n            num_leading_spaces = snippet_lines[-1].find('`')\n            snippet_lines = ([snippet_lines[0]] +\n                             [line[num_leading_spaces:]\n                             for line in snippet_lines[1:]])\n            # Most code snippets have 3 or 4 more leading spaces\n            # on inner lines, but not all. Remove them.\n            inner_lines = snippet_lines[1:-1]\n            leading_spaces = None\n            for line in inner_lines:\n                if not line or line[0] == '\\n':\n                    continue\n                spaces = count_leading_spaces(line)\n                if leading_spaces is None:\n                    leading_spaces = spaces\n                if spaces < leading_spaces:\n                    leading_spaces = spaces\n            if leading_spaces:\n                snippet_lines = ([snippet_lines[0]] +\n                                 [line[leading_spaces:]\n                                  for line in snippet_lines[1:-1]] +\n                                 [snippet_lines[-1]])\n            snippet = '\\n'.join(snippet_lines)\n            code_blocks.append(snippet)\n            tmp = tmp[index:]\n\n    # Format docstring lists.\n    section_regex = r'\\n( +)# (.*)\\n'\n    section_idx = re.search(section_regex, docstring)\n    shift = 0\n    sections = {}\n    while section_idx and section_idx.group(2):\n        anchor = section_idx.group(2)\n        leading_spaces = len(section_idx.group(1))\n        shift += section_idx.end()\n        next_section_idx = re.search(section_regex, docstring[shift:])\n        if next_section_idx is None:\n            section_end = -1\n        else:\n            section_end = shift + next_section_idx.start()\n        marker = '$' + anchor.replace(' ', '_') + '$'\n        docstring, content = process_list_block(docstring,\n                                                shift,\n                                                section_end,\n                                                leading_spaces,\n                                                marker)\n        sections[marker] = content\n        # `docstring` has changed, so we can't use `next_section_idx` anymore\n        # we have to recompute it\n        section_idx = re.search(section_regex, docstring[shift:])\n\n    # Format docstring section titles.\n    docstring = re.sub(r'\\n(\\s+)# (.*)\\n',\n                       r'\\n\\1__\\2__\\n\\n',\n                       docstring)\n\n    # Strip all remaining leading spaces.\n    lines = docstring.split('\\n')\n    docstring = '\\n'.join([line.lstrip(' ') for line in lines])\n\n    # Reinject list blocks.\n    for marker, content in sections.items():\n        docstring = docstring.replace(marker, content)\n\n    # Reinject code blocks.\n    for i, code_block in enumerate(code_blocks):\n        docstring = docstring.replace(\n            '$CODE_BLOCK_%d' % i, code_block)\n    return docstring",
                "def add_np_implementation(function, docstring):\n    np_implementation = getattr(numpy_backend, function.__name__)\n    code = inspect.getsource(np_implementation)\n    code_lines = code.split('\\n')\n    for i in range(len(code_lines)):\n        if code_lines[i]:\n            # if there is something on the line, add 8 spaces.\n            code_lines[i] = '        ' + code_lines[i]\n    code = '\\n'.join(code_lines[:-1])\n\n    if len(code_lines) < 10:\n        section = template_np_implementation.replace('{{code}}', code)\n    else:\n        section = template_hidden_np_implementation.replace('{{code}}', code)\n    return docstring.replace('{{np_implementation}}', section)",
                "def read_file(path):\n    with open(path) as f:\n        return f.read()",
                "def collect_class_methods(cls, methods):\n    if isinstance(methods, (list, tuple)):\n        return [getattr(cls, m) if isinstance(m, str) else m for m in methods]\n    methods = []\n    for _, method in inspect.getmembers(cls, predicate=inspect.isroutine):\n        if method.__name__[0] == '_' or method.__name__ in EXCLUDE:\n            continue\n        methods.append(method)\n    return methods",
                "def render_function(function, method=True):\n    subblocks = []\n    signature = get_function_signature(function, method=method)\n    if method:\n        signature = signature.replace(\n            clean_module_name(function.__module__) + '.', '')\n    subblocks.append('### ' + function.__name__ + '\\n')\n    subblocks.append(code_snippet(signature))\n    docstring = function.__doc__\n    if docstring:\n        if ('backend' in signature and\n                '{{np_implementation}}' in docstring):\n            docstring = add_np_implementation(function, docstring)\n        subblocks.append(process_docstring(docstring))\n    return '\\n\\n'.join(subblocks)",
                "def read_page_data(page_data, type):\n    assert type in ['classes', 'functions', 'methods']\n    data = page_data.get(type, [])\n    for module in page_data.get('all_module_{}'.format(type), []):\n        module_data = []\n        for name in dir(module):\n            if name[0] == '_' or name in EXCLUDE:\n                continue\n            module_member = getattr(module, name)\n            if (inspect.isclass(module_member) and type == 'classes' or\n               inspect.isfunction(module_member) and type == 'functions'):\n                instance = module_member\n                if module.__name__ in instance.__module__:\n                    if instance not in module_data:\n                        module_data.append(instance)\n        module_data.sort(key=lambda x: id(x))\n        data += module_data\n    return data",
                "def generate():\n    if K.backend() != 'tensorflow':\n        raise ModuleNotFoundError('The documentation must be built '\n                                  'with the TensorFlow backend because this '\n                                  'is the only backend with docstrings.')\n\n    print('Cleaning up existing sources directory.')\n    if os.path.exists('sources'):\n        shutil.rmtree('sources')\n\n    print('Populating sources directory with templates.')\n    for subdir, dirs, fnames in os.walk('templates'):\n        for fname in fnames:\n            new_subdir = subdir.replace('templates', 'sources')\n            if not os.path.exists(new_subdir):\n                os.makedirs(new_subdir)\n            if fname[-3:] == '.md':\n                fpath = os.path.join(subdir, fname)\n                new_fpath = fpath.replace('templates', 'sources')\n                shutil.copy(fpath, new_fpath)\n\n    readme = read_file('../README.md')\n    index = read_file('templates/index.md')\n    index = index.replace('{{autogenerated}}', readme[readme.find('##'):])\n    with open('sources/index.md', 'w') as f:\n        f.write(index)\n\n    print('Generating docs for Keras %s.' % keras.__version__)\n    for page_data in PAGES:\n        classes = read_page_data(page_data, 'classes')\n\n        blocks = []\n        for element in classes:\n            if not isinstance(element, (list, tuple)):\n                element = (element, [])\n            cls = element[0]\n            subblocks = []\n            signature = get_class_signature(cls)\n            subblocks.append('<span style=\"float:right;\">' +\n                             class_to_source_link(cls) + '</span>')\n            if element[1]:\n                subblocks.append('## ' + cls.__name__ + ' class\\n')\n            else:\n                subblocks.append('### ' + cls.__name__ + '\\n')\n            subblocks.append(code_snippet(signature))\n            docstring = cls.__doc__\n            if docstring:\n                subblocks.append(process_docstring(docstring))\n            methods = collect_class_methods(cls, element[1])\n            if methods:\n                subblocks.append('\\n---')\n                subblocks.append('## ' + cls.__name__ + ' methods\\n')\n                subblocks.append('\\n---\\n'.join(\n                    [render_function(method, method=True) for method in methods]))\n            blocks.append('\\n'.join(subblocks))\n\n        methods = read_page_data(page_data, 'methods')\n\n        for method in methods:\n            blocks.append(render_function(method, method=True))\n\n        functions = read_page_data(page_data, 'functions')\n\n        for function in functions:\n            blocks.append(render_function(function, method=False))\n\n        if not blocks:\n            raise RuntimeError('Found no content for page ' +\n                               page_data['page'])\n\n        mkdown = '\\n----\\n\\n'.join(blocks)\n        # save module page.\n        # Either insert content into existing page,\n        # or create page otherwise\n        page_name = page_data['page']\n        path = os.path.join('sources', page_name)\n        if os.path.exists(path):\n            template = read_file(path)\n            assert '{{autogenerated}}' in template, ('Template found for ' + path +\n                                                     ' but missing {{autogenerated}}'\n                                                     ' tag.')\n            mkdown = template.replace('{{autogenerated}}', mkdown)\n            print('...inserting autogenerated content into template:', path)\n        else:\n            print('...creating new page with autogenerated content:', path)\n        subdir = os.path.dirname(path)\n        if not os.path.exists(subdir):\n            os.makedirs(subdir)\n        with open(path, 'w') as f:\n            f.write(mkdown)\n\n    shutil.copyfile('../CONTRIBUTING.md', 'sources/contributing.md')"
            ],
            "inscope_function_signatures": [
                "get_function_signature(function, method=True)",
                "get_class_signature(cls)",
                "post_process_signature(signature)",
                "clean_module_name(name)",
                "class_to_source_link(cls)",
                "code_snippet(snippet)",
                "count_leading_spaces(s)",
                "process_list_block(docstring, starting_point, section_end, leading_spaces, marker)",
                "process_docstring(docstring)",
                "add_np_implementation(function, docstring)",
                "read_file(path)",
                "collect_class_methods(cls, methods)",
                "render_function(function, method=True)",
                "read_page_data(page_data, type)",
                "generate()"
            ],
            "variables_in_file": {
                "sys.version": [
                    21
                ],
                "sys": [
                    21,
                    22,
                    23
                ],
                "reload": [
                    22
                ],
                "sys.setdefaultencoding": [
                    23
                ],
                "wrapped": [
                    27,
                    28,
                    31
                ],
                "getattr": [
                    27,
                    269,
                    246,
                    303
                ],
                "function": [
                    290,
                    42,
                    283,
                    379,
                    246,
                    280,
                    378,
                    27,
                    284,
                    29,
                    286
                ],
                "signature": [
                    280,
                    282,
                    285,
                    29,
                    31,
                    32,
                    288,
                    34,
                    36,
                    51,
                    53,
                    54,
                    72,
                    75,
                    77,
                    79,
                    80,
                    352,
                    359
                ],
                "inspect.getargspec": [
                    29,
                    31
                ],
                "inspect": [
                    96,
                    271,
                    304,
                    305,
                    247,
                    29,
                    31
                ],
                "defaults": [
                    32,
                    37,
                    38,
                    39
                ],
                "signature.defaults": [
                    32
                ],
                "method": [
                    33,
                    271,
                    272,
                    368,
                    274,
                    373,
                    374,
                    280,
                    281
                ],
                "args": [
                    34,
                    36,
                    38,
                    39,
                    44,
                    50
                ],
                "signature.args": [
                    34,
                    36
                ],
                "kwargs": [
                    46,
                    41,
                    50,
                    38
                ],
                "zip": [
                    38
                ],
                "len": [
                    38,
                    39,
                    73,
                    172,
                    140,
                    207,
                    249,
                    255
                ],
                "st": [
                    42,
                    45,
                    49,
                    51,
                    53
                ],
                "clean_module_name": [
                    65,
                    42,
                    283,
                    93
                ],
                "function.__module__": [
                    42,
                    283
                ],
                "function.__name__": [
                    42,
                    284,
                    246
                ],
                "a": [
                    49,
                    44,
                    45,
                    46
                ],
                "str": [
                    98,
                    269,
                    45,
                    47,
                    49
                ],
                "v": [
                    48,
                    49,
                    46,
                    47
                ],
                "isinstance": [
                    348,
                    268,
                    269,
                    47
                ],
                "post_process_signature": [
                    68,
                    54
                ],
                "class_signature": [
                    64,
                    59,
                    60,
                    68
                ],
                "get_function_signature": [
                    280,
                    59
                ],
                "cls.__init__": [
                    59
                ],
                "cls": [
                    96,
                    65,
                    66,
                    352,
                    354,
                    356,
                    358,
                    360,
                    363,
                    269,
                    366,
                    271,
                    59,
                    60,
                    93,
                    350
                ],
                "class_signature.replace": [
                    60
                ],
                "cls.__name__": [
                    66,
                    356,
                    358,
                    366,
                    60
                ],
                "TypeError": [
                    61
                ],
                "AttributeError": [
                    61
                ],
                "format": [
                    64,
                    298
                ],
                "cls.__module__": [
                    65,
                    93
                ],
                "parts": [
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79
                ],
                "re.split": [
                    72
                ],
                "re": [
                    129,
                    226,
                    134,
                    72,
                    136,
                    202,
                    110,
                    142,
                    209,
                    223
                ],
                "join": [
                    385,
                    196,
                    292,
                    232,
                    75,
                    77,
                    79,
                    367,
                    369,
                    253,
                    157
                ],
                "name.startswith": [
                    84,
                    86
                ],
                "name": [
                    300,
                    301,
                    303,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89
                ],
                "name.replace": [
                    85,
                    87
                ],
                "module_name": [
                    93,
                    94
                ],
                "path": [
                    98,
                    390,
                    263,
                    391,
                    392,
                    393,
                    397,
                    399,
                    400,
                    403,
                    94,
                    95
                ],
                "module_name.replace": [
                    94
                ],
                "line": [
                    96,
                    129,
                    98,
                    193,
                    194,
                    134,
                    136,
                    232,
                    141,
                    142,
                    145,
                    177,
                    178,
                    149,
                    183,
                    184,
                    153,
                    186
                ],
                "inspect.getsourcelines": [
                    96
                ],
                "link": [
                    97,
                    99
                ],
                "result": [
                    104,
                    105,
                    106,
                    103
                ],
                "snippet": [
                    196,
                    197,
                    104,
                    169,
                    172,
                    173
                ],
                "ws": [
                    112,
                    110,
                    111
                ],
                "re.search": [
                    202,
                    142,
                    110,
                    209,
                    223
                ],
                "s": [
                    110
                ],
                "ws.start": [
                    112
                ],
                "ending_point": [
                    120,
                    121,
                    119
                ],
                "docstring.find": [
                    119
                ],
                "docstring": [
                    259,
                    158,
                    286,
                    287,
                    289,
                    290,
                    291,
                    164,
                    165,
                    171,
                    202,
                    209,
                    215,
                    223,
                    226,
                    228,
                    231,
                    232,
                    360,
                    361,
                    362,
                    236,
                    240,
                    242,
                    119,
                    120,
                    123,
                    124,
                    126
                ],
                "starting_point": [
                    120,
                    123,
                    124,
                    119
                ],
                "block": [
                    120,
                    123,
                    157,
                    158,
                    127
                ],
                "docstring_slice": [
                    123,
                    125
                ],
                "replace": [
                    123
                ],
                "section_end": [
                    211,
                    213,
                    217,
                    123,
                    126
                ],
                "marker": [
                    235,
                    236,
                    219,
                    214,
                    123,
                    220
                ],
                "lines": [
                    129,
                    134,
                    231,
                    136,
                    232,
                    140,
                    141,
                    149,
                    153,
                    157,
                    127
                ],
                "block.split": [
                    127
                ],
                "re.sub": [
                    136,
                    129,
                    226,
                    134
                ],
                "leading_spaces": [
                    129,
                    193,
                    207,
                    182,
                    218,
                    187,
                    188,
                    189,
                    190,
                    191
                ],
                "top_level_regex": [
                    132,
                    134
                ],
                "top_level_replacement": [
                    133,
                    134
                ],
                "indent": [
                    138,
                    146,
                    150,
                    152,
                    156
                ],
                "text_block": [
                    139,
                    147,
                    148,
                    151,
                    155
                ],
                "i": [
                    249,
                    140,
                    141,
                    239,
                    241,
                    149,
                    153,
                    250,
                    252
                ],
                "range": [
                    249,
                    140
                ],
                "spaces": [
                    142,
                    143,
                    145,
                    146,
                    150,
                    152,
                    186,
                    188,
                    189,
                    190
                ],
                "spaces.start": [
                    152,
                    145,
                    146,
                    150
                ],
                "code_blocks": [
                    163,
                    172,
                    197,
                    239
                ],
                "tmp": [
                    165,
                    166,
                    167,
                    168,
                    169,
                    198
                ],
                "tmp.find": [
                    167
                ],
                "index": [
                    198,
                    168,
                    169,
                    337,
                    338,
                    340
                ],
                "find": [
                    168,
                    175
                ],
                "docstring.replace": [
                    240,
                    259,
                    171,
                    236
                ],
                "snippet_lines": [
                    192,
                    194,
                    195,
                    196,
                    173,
                    175,
                    176,
                    178,
                    181
                ],
                "snippet.split": [
                    173
                ],
                "num_leading_spaces": [
                    177,
                    175
                ],
                "inner_lines": [
                    181,
                    183
                ],
                "count_leading_spaces": [
                    186
                ],
                "code_blocks.append": [
                    197
                ],
                "section_regex": [
                    201,
                    202,
                    209,
                    223
                ],
                "section_idx": [
                    202,
                    205,
                    206,
                    207,
                    208,
                    223
                ],
                "shift": [
                    203,
                    208,
                    209,
                    213,
                    216,
                    223
                ],
                "sections": [
                    220,
                    204,
                    235
                ],
                "section_idx.group": [
                    205,
                    206,
                    207
                ],
                "anchor": [
                    214,
                    206
                ],
                "section_idx.end": [
                    208
                ],
                "next_section_idx": [
                    209,
                    210,
                    213
                ],
                "next_section_idx.start": [
                    213
                ],
                "anchor.replace": [
                    214
                ],
                "content": [
                    235,
                    220,
                    236,
                    215
                ],
                "process_list_block": [
                    215
                ],
                "docstring.split": [
                    231
                ],
                "line.lstrip": [
                    232
                ],
                "sections.items": [
                    235
                ],
                "code_block": [
                    241,
                    239
                ],
                "enumerate": [
                    239
                ],
                "np_implementation": [
                    246,
                    247
                ],
                "numpy_backend": [
                    246
                ],
                "code": [
                    256,
                    258,
                    247,
                    248,
                    253
                ],
                "inspect.getsource": [
                    247
                ],
                "code_lines": [
                    248,
                    249,
                    250,
                    252,
                    253,
                    255
                ],
                "code.split": [
                    248
                ],
                "section": [
                    256,
                    258,
                    259
                ],
                "template_np_implementation.replace": [
                    256
                ],
                "template_np_implementation": [
                    256
                ],
                "template_hidden_np_implementation.replace": [
                    258
                ],
                "template_hidden_np_implementation": [
                    258
                ],
                "open": [
                    339,
                    403,
                    263
                ],
                "f": [
                    263,
                    264,
                    339,
                    340,
                    403,
                    404
                ],
                "f.read": [
                    264
                ],
                "methods": [
                    363,
                    268,
                    269,
                    270,
                    364,
                    368,
                    274,
                    275,
                    371,
                    373
                ],
                "list": [
                    268,
                    348
                ],
                "tuple": [
                    268,
                    348
                ],
                "m": [
                    269
                ],
                "_": [
                    271
                ],
                "inspect.getmembers": [
                    271
                ],
                "inspect.isroutine": [
                    271
                ],
                "method.__name__": [
                    272
                ],
                "EXCLUDE": [
                    272,
                    301
                ],
                "methods.append": [
                    274
                ],
                "subblocks": [
                    353,
                    291,
                    292,
                    356,
                    358,
                    359,
                    362,
                    365,
                    366,
                    367,
                    369,
                    279,
                    284,
                    285,
                    351
                ],
                "signature.replace": [
                    282
                ],
                "subblocks.append": [
                    353,
                    291,
                    356,
                    358,
                    359,
                    362,
                    365,
                    366,
                    367,
                    284,
                    285
                ],
                "code_snippet": [
                    285,
                    359
                ],
                "function.__doc__": [
                    286
                ],
                "add_np_implementation": [
                    290
                ],
                "process_docstring": [
                    362,
                    291
                ],
                "type": [
                    296,
                    297,
                    298,
                    304,
                    305
                ],
                "data": [
                    312,
                    297,
                    311
                ],
                "page_data.get": [
                    297,
                    298
                ],
                "page_data": [
                    376,
                    389,
                    297,
                    298,
                    371,
                    343,
                    344,
                    383
                ],
                "module": [
                    298,
                    307,
                    300,
                    303
                ],
                "module_data": [
                    299,
                    308,
                    309,
                    310,
                    311
                ],
                "dir": [
                    300
                ],
                "module_member": [
                    304,
                    305,
                    306,
                    303
                ],
                "inspect.isclass": [
                    304
                ],
                "inspect.isfunction": [
                    305
                ],
                "instance": [
                    306,
                    307,
                    308,
                    309
                ],
                "module.__name__": [
                    307
                ],
                "instance.__module__": [
                    307
                ],
                "module_data.append": [
                    309
                ],
                "module_data.sort": [
                    310
                ],
                "id": [
                    310
                ],
                "x": [
                    310
                ],
                "K.backend": [
                    316
                ],
                "K": [
                    316
                ],
                "ModuleNotFoundError": [
                    317
                ],
                "print": [
                    321,
                    325,
                    397,
                    399,
                    342
                ],
                "os.path.exists": [
                    329,
                    322,
                    401,
                    391
                ],
                "os.path": [
                    322,
                    390,
                    391,
                    329,
                    332,
                    400,
                    401
                ],
                "os": [
                    322,
                    326,
                    390,
                    391,
                    329,
                    330,
                    332,
                    400,
                    401,
                    402
                ],
                "shutil.rmtree": [
                    323
                ],
                "shutil": [
                    406,
                    323,
                    334
                ],
                "subdir": [
                    326,
                    328,
                    332,
                    400,
                    401,
                    402
                ],
                "dirs": [
                    326
                ],
                "fnames": [
                    326,
                    327
                ],
                "os.walk": [
                    326
                ],
                "fname": [
                    331,
                    332,
                    327
                ],
                "new_subdir": [
                    328,
                    329,
                    330
                ],
                "subdir.replace": [
                    328
                ],
                "os.makedirs": [
                    330,
                    402
                ],
                "fpath": [
                    332,
                    333,
                    334
                ],
                "os.path.join": [
                    332,
                    390
                ],
                "new_fpath": [
                    333,
                    334
                ],
                "fpath.replace": [
                    333
                ],
                "shutil.copy": [
                    334
                ],
                "readme": [
                    336,
                    338
                ],
                "read_file": [
                    336,
                    337,
                    392
                ],
                "index.replace": [
                    338
                ],
                "readme.find": [
                    338
                ],
                "f.write": [
                    404,
                    340
                ],
                "keras.__version__": [
                    342
                ],
                "keras": [
                    342
                ],
                "PAGES": [
                    343
                ],
                "classes": [
                    344,
                    347
                ],
                "read_page_data": [
                    344,
                    371,
                    376
                ],
                "blocks": [
                    385,
                    369,
                    374,
                    346,
                    379,
                    381
                ],
                "element": [
                    355,
                    363,
                    347,
                    348,
                    349,
                    350
                ],
                "get_class_signature": [
                    352
                ],
                "class_to_source_link": [
                    354
                ],
                "cls.__doc__": [
                    360
                ],
                "collect_class_methods": [
                    363
                ],
                "render_function": [
                    368,
                    379,
                    374
                ],
                "blocks.append": [
                    369,
                    379,
                    374
                ],
                "functions": [
                    376,
                    378
                ],
                "RuntimeError": [
                    382
                ],
                "mkdown": [
                    385,
                    396,
                    404
                ],
                "page_name": [
                    389,
                    390
                ],
                "template": [
                    392,
                    393,
                    396
                ],
                "template.replace": [
                    396
                ],
                "os.path.dirname": [
                    400
                ],
                "shutil.copyfile": [
                    406
                ],
                "__name__": [
                    409
                ],
                "generate": [
                    410
                ]
            },
            "filtered_variables_in_file": {
                "sys.version": [
                    21
                ],
                "sys": [
                    21,
                    22,
                    23
                ],
                "reload": [
                    22
                ],
                "sys.setdefaultencoding": [
                    23
                ],
                "wrapped": [
                    27,
                    28,
                    31
                ],
                "function": [
                    290,
                    42,
                    283,
                    379,
                    246,
                    280,
                    378,
                    27,
                    284,
                    29,
                    286
                ],
                "signature": [
                    280,
                    282,
                    285,
                    29,
                    31,
                    32,
                    288,
                    34,
                    36,
                    51,
                    53,
                    54,
                    72,
                    75,
                    77,
                    79,
                    80,
                    352,
                    359
                ],
                "inspect.getargspec": [
                    29,
                    31
                ],
                "inspect": [
                    96,
                    271,
                    304,
                    305,
                    247,
                    29,
                    31
                ],
                "defaults": [
                    32,
                    37,
                    38,
                    39
                ],
                "signature.defaults": [
                    32
                ],
                "method": [
                    33,
                    271,
                    272,
                    368,
                    274,
                    373,
                    374,
                    280,
                    281
                ],
                "args": [
                    34,
                    36,
                    38,
                    39,
                    44,
                    50
                ],
                "signature.args": [
                    34,
                    36
                ],
                "kwargs": [
                    46,
                    41,
                    50,
                    38
                ],
                "st": [
                    42,
                    45,
                    49,
                    51,
                    53
                ],
                "clean_module_name": [
                    65,
                    42,
                    283,
                    93
                ],
                "function.__module__": [
                    42,
                    283
                ],
                "function.__name__": [
                    42,
                    284,
                    246
                ],
                "a": [
                    49,
                    44,
                    45,
                    46
                ],
                "v": [
                    48,
                    49,
                    46,
                    47
                ],
                "post_process_signature": [
                    68,
                    54
                ],
                "class_signature": [
                    64,
                    59,
                    60,
                    68
                ],
                "get_function_signature": [
                    280,
                    59
                ],
                "cls.__init__": [
                    59
                ],
                "cls": [
                    96,
                    65,
                    66,
                    352,
                    354,
                    356,
                    358,
                    360,
                    363,
                    269,
                    366,
                    271,
                    59,
                    60,
                    93,
                    350
                ],
                "class_signature.replace": [
                    60
                ],
                "cls.__name__": [
                    66,
                    356,
                    358,
                    366,
                    60
                ],
                "cls.__module__": [
                    65,
                    93
                ],
                "parts": [
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79
                ],
                "re.split": [
                    72
                ],
                "re": [
                    129,
                    226,
                    134,
                    72,
                    136,
                    202,
                    110,
                    142,
                    209,
                    223
                ],
                "join": [
                    385,
                    196,
                    292,
                    232,
                    75,
                    77,
                    79,
                    367,
                    369,
                    253,
                    157
                ],
                "name.startswith": [
                    84,
                    86
                ],
                "name": [
                    300,
                    301,
                    303,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89
                ],
                "name.replace": [
                    85,
                    87
                ],
                "module_name": [
                    93,
                    94
                ],
                "path": [
                    98,
                    390,
                    263,
                    391,
                    392,
                    393,
                    397,
                    399,
                    400,
                    403,
                    94,
                    95
                ],
                "module_name.replace": [
                    94
                ],
                "line": [
                    96,
                    129,
                    98,
                    193,
                    194,
                    134,
                    136,
                    232,
                    141,
                    142,
                    145,
                    177,
                    178,
                    149,
                    183,
                    184,
                    153,
                    186
                ],
                "inspect.getsourcelines": [
                    96
                ],
                "link": [
                    97,
                    99
                ],
                "result": [
                    104,
                    105,
                    106,
                    103
                ],
                "snippet": [
                    196,
                    197,
                    104,
                    169,
                    172,
                    173
                ],
                "ws": [
                    112,
                    110,
                    111
                ],
                "re.search": [
                    202,
                    142,
                    110,
                    209,
                    223
                ],
                "s": [
                    110
                ],
                "ws.start": [
                    112
                ],
                "ending_point": [
                    120,
                    121,
                    119
                ],
                "docstring.find": [
                    119
                ],
                "docstring": [
                    259,
                    158,
                    286,
                    287,
                    289,
                    290,
                    291,
                    164,
                    165,
                    171,
                    202,
                    209,
                    215,
                    223,
                    226,
                    228,
                    231,
                    232,
                    360,
                    361,
                    362,
                    236,
                    240,
                    242,
                    119,
                    120,
                    123,
                    124,
                    126
                ],
                "starting_point": [
                    120,
                    123,
                    124,
                    119
                ],
                "block": [
                    120,
                    123,
                    157,
                    158,
                    127
                ],
                "docstring_slice": [
                    123,
                    125
                ],
                "replace": [
                    123
                ],
                "section_end": [
                    211,
                    213,
                    217,
                    123,
                    126
                ],
                "marker": [
                    235,
                    236,
                    219,
                    214,
                    123,
                    220
                ],
                "lines": [
                    129,
                    134,
                    231,
                    136,
                    232,
                    140,
                    141,
                    149,
                    153,
                    157,
                    127
                ],
                "block.split": [
                    127
                ],
                "re.sub": [
                    136,
                    129,
                    226,
                    134
                ],
                "leading_spaces": [
                    129,
                    193,
                    207,
                    182,
                    218,
                    187,
                    188,
                    189,
                    190,
                    191
                ],
                "top_level_regex": [
                    132,
                    134
                ],
                "top_level_replacement": [
                    133,
                    134
                ],
                "indent": [
                    138,
                    146,
                    150,
                    152,
                    156
                ],
                "text_block": [
                    139,
                    147,
                    148,
                    151,
                    155
                ],
                "i": [
                    249,
                    140,
                    141,
                    239,
                    241,
                    149,
                    153,
                    250,
                    252
                ],
                "spaces": [
                    142,
                    143,
                    145,
                    146,
                    150,
                    152,
                    186,
                    188,
                    189,
                    190
                ],
                "spaces.start": [
                    152,
                    145,
                    146,
                    150
                ],
                "code_blocks": [
                    163,
                    172,
                    197,
                    239
                ],
                "tmp": [
                    165,
                    166,
                    167,
                    168,
                    169,
                    198
                ],
                "tmp.find": [
                    167
                ],
                "index": [
                    198,
                    168,
                    169,
                    337,
                    338,
                    340
                ],
                "find": [
                    168,
                    175
                ],
                "docstring.replace": [
                    240,
                    259,
                    171,
                    236
                ],
                "snippet_lines": [
                    192,
                    194,
                    195,
                    196,
                    173,
                    175,
                    176,
                    178,
                    181
                ],
                "snippet.split": [
                    173
                ],
                "num_leading_spaces": [
                    177,
                    175
                ],
                "inner_lines": [
                    181,
                    183
                ],
                "count_leading_spaces": [
                    186
                ],
                "code_blocks.append": [
                    197
                ],
                "section_regex": [
                    201,
                    202,
                    209,
                    223
                ],
                "section_idx": [
                    202,
                    205,
                    206,
                    207,
                    208,
                    223
                ],
                "shift": [
                    203,
                    208,
                    209,
                    213,
                    216,
                    223
                ],
                "sections": [
                    220,
                    204,
                    235
                ],
                "section_idx.group": [
                    205,
                    206,
                    207
                ],
                "anchor": [
                    214,
                    206
                ],
                "section_idx.end": [
                    208
                ],
                "next_section_idx": [
                    209,
                    210,
                    213
                ],
                "next_section_idx.start": [
                    213
                ],
                "anchor.replace": [
                    214
                ],
                "content": [
                    235,
                    220,
                    236,
                    215
                ],
                "process_list_block": [
                    215
                ],
                "docstring.split": [
                    231
                ],
                "line.lstrip": [
                    232
                ],
                "sections.items": [
                    235
                ],
                "code_block": [
                    241,
                    239
                ],
                "np_implementation": [
                    246,
                    247
                ],
                "numpy_backend": [
                    246
                ],
                "code": [
                    256,
                    258,
                    247,
                    248,
                    253
                ],
                "inspect.getsource": [
                    247
                ],
                "code_lines": [
                    248,
                    249,
                    250,
                    252,
                    253,
                    255
                ],
                "code.split": [
                    248
                ],
                "section": [
                    256,
                    258,
                    259
                ],
                "template_np_implementation.replace": [
                    256
                ],
                "template_np_implementation": [
                    256
                ],
                "template_hidden_np_implementation.replace": [
                    258
                ],
                "template_hidden_np_implementation": [
                    258
                ],
                "f": [
                    263,
                    264,
                    339,
                    340,
                    403,
                    404
                ],
                "f.read": [
                    264
                ],
                "methods": [
                    363,
                    268,
                    269,
                    270,
                    364,
                    368,
                    274,
                    275,
                    371,
                    373
                ],
                "m": [
                    269
                ],
                "_": [
                    271
                ],
                "inspect.getmembers": [
                    271
                ],
                "inspect.isroutine": [
                    271
                ],
                "method.__name__": [
                    272
                ],
                "EXCLUDE": [
                    272,
                    301
                ],
                "methods.append": [
                    274
                ],
                "subblocks": [
                    353,
                    291,
                    292,
                    356,
                    358,
                    359,
                    362,
                    365,
                    366,
                    367,
                    369,
                    279,
                    284,
                    285,
                    351
                ],
                "signature.replace": [
                    282
                ],
                "subblocks.append": [
                    353,
                    291,
                    356,
                    358,
                    359,
                    362,
                    365,
                    366,
                    367,
                    284,
                    285
                ],
                "code_snippet": [
                    285,
                    359
                ],
                "function.__doc__": [
                    286
                ],
                "add_np_implementation": [
                    290
                ],
                "process_docstring": [
                    362,
                    291
                ],
                "data": [
                    312,
                    297,
                    311
                ],
                "page_data.get": [
                    297,
                    298
                ],
                "page_data": [
                    376,
                    389,
                    297,
                    298,
                    371,
                    343,
                    344,
                    383
                ],
                "module": [
                    298,
                    307,
                    300,
                    303
                ],
                "module_data": [
                    299,
                    308,
                    309,
                    310,
                    311
                ],
                "module_member": [
                    304,
                    305,
                    306,
                    303
                ],
                "inspect.isclass": [
                    304
                ],
                "inspect.isfunction": [
                    305
                ],
                "instance": [
                    306,
                    307,
                    308,
                    309
                ],
                "module.__name__": [
                    307
                ],
                "instance.__module__": [
                    307
                ],
                "module_data.append": [
                    309
                ],
                "module_data.sort": [
                    310
                ],
                "x": [
                    310
                ],
                "K.backend": [
                    316
                ],
                "K": [
                    316
                ],
                "os.path.exists": [
                    329,
                    322,
                    401,
                    391
                ],
                "os.path": [
                    322,
                    390,
                    391,
                    329,
                    332,
                    400,
                    401
                ],
                "os": [
                    322,
                    326,
                    390,
                    391,
                    329,
                    330,
                    332,
                    400,
                    401,
                    402
                ],
                "shutil.rmtree": [
                    323
                ],
                "shutil": [
                    406,
                    323,
                    334
                ],
                "subdir": [
                    326,
                    328,
                    332,
                    400,
                    401,
                    402
                ],
                "dirs": [
                    326
                ],
                "fnames": [
                    326,
                    327
                ],
                "os.walk": [
                    326
                ],
                "fname": [
                    331,
                    332,
                    327
                ],
                "new_subdir": [
                    328,
                    329,
                    330
                ],
                "subdir.replace": [
                    328
                ],
                "os.makedirs": [
                    330,
                    402
                ],
                "fpath": [
                    332,
                    333,
                    334
                ],
                "os.path.join": [
                    332,
                    390
                ],
                "new_fpath": [
                    333,
                    334
                ],
                "fpath.replace": [
                    333
                ],
                "shutil.copy": [
                    334
                ],
                "readme": [
                    336,
                    338
                ],
                "read_file": [
                    336,
                    337,
                    392
                ],
                "index.replace": [
                    338
                ],
                "readme.find": [
                    338
                ],
                "f.write": [
                    404,
                    340
                ],
                "keras.__version__": [
                    342
                ],
                "keras": [
                    342
                ],
                "PAGES": [
                    343
                ],
                "classes": [
                    344,
                    347
                ],
                "read_page_data": [
                    344,
                    371,
                    376
                ],
                "blocks": [
                    385,
                    369,
                    374,
                    346,
                    379,
                    381
                ],
                "element": [
                    355,
                    363,
                    347,
                    348,
                    349,
                    350
                ],
                "get_class_signature": [
                    352
                ],
                "class_to_source_link": [
                    354
                ],
                "cls.__doc__": [
                    360
                ],
                "collect_class_methods": [
                    363
                ],
                "render_function": [
                    368,
                    379,
                    374
                ],
                "blocks.append": [
                    369,
                    379,
                    374
                ],
                "functions": [
                    376,
                    378
                ],
                "mkdown": [
                    385,
                    396,
                    404
                ],
                "page_name": [
                    389,
                    390
                ],
                "template": [
                    392,
                    393,
                    396
                ],
                "template.replace": [
                    396
                ],
                "os.path.dirname": [
                    400
                ],
                "shutil.copyfile": [
                    406
                ],
                "generate": [
                    410
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/keras_9/tests/test_doc_auto_generation.py",
                "test_function": "test_doc_lists",
                "test_function_code": "@pytest.mark.parametrize('docs_descriptor', [\n    test_doc1,\n    test_doc_with_arguments_as_last_block,\n])\ndef test_doc_lists(docs_descriptor):\n    docstring = autogen.process_docstring(docs_descriptor['doc'])\n    assert markdown(docstring) == markdown(docs_descriptor['result'])",
                "test_error": "AssertionError: assert ('<p>Base class for recurrent layers.</p>\\n'\\n '<p><strong>Arguments</strong></p>\\n'\\n '<p>return_sequences: Boolean. Whether to return the last output\\n'\\n 'in the output sequence, or the full sequence.\\n'\\n 'return_state: Boolean. Whether to return the last state\\n'\\n 'in addition to the output.</p>') == ('<p>Base class for recurrent layers.</p>\\n'\\n '<p><strong>Arguments</strong></p>\\n'\\n '<ul>\\n'\\n '<li><strong>return_sequences</strong>: Boolean. Whether to return the last '\\n 'output\\n'\\n '    in the output sequence, or the full sequence.</li>\\n'\\n '<li><strong>return_state</strong>: Boolean. Whether to return the last '\\n 'state\\n'\\n '    in addition to the output.</li>\\n'\\n '</ul>')     <p>Base class for recurrent layers.</p>     <p><strong>Arguments</strong></p>   - <ul>   - <li><strong>return_sequences</strong>: Boolean. Whether to return the last output   ?  ^^^^^^^^^^                 ---------   + <p>return_sequences: Boolean. Whether to return the last output   ?  ^   -     in the output sequence, or the full sequence.</li>   ? ----                                             -----   + in the output sequence, or the full sequence.   - <li><strong>return_state</strong>: Boolean. Whether to return the last state   ? ------------            ---------   + return_state: Boolean. Whether to return the last state   -     in addition to the output.</li>   ? ----                            ^^ -   + in addition to the output.</p>   ?                             ^   - </ul>",
                "full_test_error": "docs_descriptor = {'doc': 'Base class for recurrent layers.\\n\\n    # Arguments\\n        return_sequences: Boolean. Whether to return the...r the full sequence.\\n- __return_state__: Boolean. Whether to return the last state\\n    in addition to the output.\\n'}\n\n    @pytest.mark.parametrize('docs_descriptor', [\n        test_doc1,\n        test_doc_with_arguments_as_last_block,\n    ])\n    def test_doc_lists(docs_descriptor):\n        docstring = autogen.process_docstring(docs_descriptor['doc'])\n>       assert markdown(docstring) == markdown(docs_descriptor['result'])\nE       AssertionError: assert ('<p>Base class for recurrent layers.</p>\\n'\\n '<p><strong>Arguments</strong></p>\\n'\\n '<p>return_sequences: Boolean. Whether to return the last output\\n'\\n 'in the output sequence, or the full sequence.\\n'\\n 'return_state: Boolean. Whether to return the last state\\n'\\n 'in addition to the output.</p>') == ('<p>Base class for recurrent layers.</p>\\n'\\n '<p><strong>Arguments</strong></p>\\n'\\n '<ul>\\n'\\n '<li><strong>return_sequences</strong>: Boolean. Whether to return the last '\\n 'output\\n'\\n '    in the output sequence, or the full sequence.</li>\\n'\\n '<li><strong>return_state</strong>: Boolean. Whether to return the last '\\n 'state\\n'\\n '    in addition to the output.</li>\\n'\\n '</ul>')\nE           <p>Base class for recurrent layers.</p>\nE           <p><strong>Arguments</strong></p>\nE         - <ul>\nE         - <li><strong>return_sequences</strong>: Boolean. Whether to return the last output\nE         ?  ^^^^^^^^^^                 ---------\nE         + <p>return_sequences: Boolean. Whether to return the last output\nE         ?  ^\nE         -     in the output sequence, or the full sequence.</li>\nE         ? ----                                             -----\nE         + in the output sequence, or the full sequence.\nE         - <li><strong>return_state</strong>: Boolean. Whether to return the last state\nE         ? ------------            ---------\nE         + return_state: Boolean. Whether to return the last state\nE         -     in addition to the output.</li>\nE         ? ----                            ^^ -\nE         + in addition to the output.</p>\nE         ?                             ^\nE         - </ul>\n\ntests/test_doc_auto_generation.py:355: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('docs_descriptor', [test_doc1, test_doc_with_arguments_as_last_block])"
                ]
            }
        ]
    }
}