{
    "keras:18": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_18/keras/backend/tensorflow_backend.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self, inputs, outputs,\n             updates=None,\n             name=None,\n             **session_kwargs):\n    updates = updates or []\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` to a TensorFlow backend function '\n                        'should be a list or tuple.')\n    if not isinstance(outputs, (list, tuple)):\n        raise TypeError('`outputs` of a TensorFlow backend function '\n                        'should be a list or tuple.')\n    if not isinstance(updates, (list, tuple)):\n        raise TypeError('`updates` in a TensorFlow backend function '\n                        'should be a list or tuple.')\n    self.inputs = list(inputs)\n    self.outputs = list(outputs)\n    with tf.control_dependencies(self.outputs):\n        updates_ops = []\n        for update in updates:\n            if isinstance(update, tuple):\n                p, new_p = update\n                updates_ops.append(tf.assign(p, new_p))\n            else:\n                # assumed already an op\n                updates_ops.append(update)\n        self.updates_op = tf.group(*updates_ops)\n    self.name = name\n    # additional tensor substitutions\n    self.feed_dict = session_kwargs.pop('feed_dict', {})\n    # additional operations\n    self.fetches = session_kwargs.pop('fetches', [])\n    if not isinstance(self.fetches, list):\n        self.fetches = [self.fetches]\n    # The main use case of `fetches` being passed to a model is the ability\n    # to run custom updates\n    # (since the outputs of fetches are never returned).\n    # This requires us to wrap fetches in `identity` ops.\n    self.fetches = [tf.identity(x) for x in self.fetches]\n    self.session_kwargs = session_kwargs\n    if session_kwargs:\n        raise ValueError('Some keys in session_kwargs are not '\n                         'supported at this '\n                         'time: %s', session_kwargs.keys())\n    self._callable_fn = None\n    self._feed_arrays = None\n    self._feed_symbols = None\n    self._symbol_vals = None\n    self._session = None\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 2510,
                    "end_line": 2557,
                    "variables": {
                        "updates": [
                            2528,
                            2521,
                            2514
                        ],
                        "isinstance": [
                            2529,
                            2541,
                            2515,
                            2518,
                            2521
                        ],
                        "inputs": [
                            2515,
                            2524
                        ],
                        "list": [
                            2541,
                            2515,
                            2518,
                            2521,
                            2524,
                            2525
                        ],
                        "tuple": [
                            2521,
                            2515,
                            2529,
                            2518
                        ],
                        "TypeError": [
                            2522,
                            2516,
                            2519
                        ],
                        "outputs": [
                            2525,
                            2518
                        ],
                        "self.inputs": [
                            2524
                        ],
                        "self": [
                            2557,
                            2535,
                            2536,
                            2538,
                            2540,
                            2541,
                            2542,
                            2556,
                            2547,
                            2548,
                            2553,
                            2554,
                            2555,
                            2524,
                            2525,
                            2526
                        ],
                        "self.outputs": [
                            2525,
                            2526
                        ],
                        "tf.control_dependencies": [
                            2526
                        ],
                        "tf": [
                            2531,
                            2547,
                            2526,
                            2535
                        ],
                        "updates_ops": [
                            2535,
                            2531,
                            2534,
                            2527
                        ],
                        "update": [
                            2528,
                            2529,
                            2530,
                            2534
                        ],
                        "p": [
                            2530,
                            2531
                        ],
                        "new_p": [
                            2530,
                            2531
                        ],
                        "updates_ops.append": [
                            2531,
                            2534
                        ],
                        "tf.assign": [
                            2531
                        ],
                        "self.updates_op": [
                            2535
                        ],
                        "tf.group": [
                            2535
                        ],
                        "self.name": [
                            2536
                        ],
                        "name": [
                            2536
                        ],
                        "self.feed_dict": [
                            2538
                        ],
                        "session_kwargs.pop": [
                            2538,
                            2540
                        ],
                        "session_kwargs": [
                            2538,
                            2540,
                            2548,
                            2549,
                            2552
                        ],
                        "self.fetches": [
                            2547,
                            2540,
                            2541,
                            2542
                        ],
                        "tf.identity": [
                            2547
                        ],
                        "x": [
                            2547
                        ],
                        "self.session_kwargs": [
                            2548
                        ],
                        "ValueError": [
                            2550
                        ],
                        "session_kwargs.keys": [
                            2552
                        ],
                        "self._callable_fn": [
                            2553
                        ],
                        "self._feed_arrays": [
                            2554
                        ],
                        "self._feed_symbols": [
                            2555
                        ],
                        "self._symbol_vals": [
                            2556
                        ],
                        "self._session": [
                            2557
                        ]
                    },
                    "filtered_variables": {
                        "updates": [
                            2528,
                            2521,
                            2514
                        ],
                        "inputs": [
                            2515,
                            2524
                        ],
                        "outputs": [
                            2525,
                            2518
                        ],
                        "self.inputs": [
                            2524
                        ],
                        "self": [
                            2557,
                            2535,
                            2536,
                            2538,
                            2540,
                            2541,
                            2542,
                            2556,
                            2547,
                            2548,
                            2553,
                            2554,
                            2555,
                            2524,
                            2525,
                            2526
                        ],
                        "self.outputs": [
                            2525,
                            2526
                        ],
                        "tf.control_dependencies": [
                            2526
                        ],
                        "tf": [
                            2531,
                            2547,
                            2526,
                            2535
                        ],
                        "updates_ops": [
                            2535,
                            2531,
                            2534,
                            2527
                        ],
                        "update": [
                            2528,
                            2529,
                            2530,
                            2534
                        ],
                        "p": [
                            2530,
                            2531
                        ],
                        "new_p": [
                            2530,
                            2531
                        ],
                        "updates_ops.append": [
                            2531,
                            2534
                        ],
                        "tf.assign": [
                            2531
                        ],
                        "self.updates_op": [
                            2535
                        ],
                        "tf.group": [
                            2535
                        ],
                        "self.name": [
                            2536
                        ],
                        "name": [
                            2536
                        ],
                        "self.feed_dict": [
                            2538
                        ],
                        "session_kwargs.pop": [
                            2538,
                            2540
                        ],
                        "session_kwargs": [
                            2538,
                            2540,
                            2548,
                            2549,
                            2552
                        ],
                        "self.fetches": [
                            2547,
                            2540,
                            2541,
                            2542
                        ],
                        "tf.identity": [
                            2547
                        ],
                        "x": [
                            2547
                        ],
                        "self.session_kwargs": [
                            2548
                        ],
                        "session_kwargs.keys": [
                            2552
                        ],
                        "self._callable_fn": [
                            2553
                        ],
                        "self._feed_arrays": [
                            2554
                        ],
                        "self._feed_symbols": [
                            2555
                        ],
                        "self._symbol_vals": [
                            2556
                        ],
                        "self._session": [
                            2557
                        ]
                    },
                    "diff_line_number": 2548,
                    "class_data": {
                        "signature": "class Function(object)",
                        "docstring": "Runs a computation graph.\n\nIt's possible to pass arguments to `tf.Session.run()` via `session_kwargs`.\nIn particular additional operations via `fetches` argument and additional\ntensor substitutions via `feed_dict` arguments. Note that given\nsubstitutions are merged with substitutions from `inputs`. Even though\n`feed_dict` is passed once in the constructor (called in `model.compile()`)\nwe can modify the values in the dictionary. Through this feed_dict we can\nprovide additional substitutions besides Keras inputs.\n\n# Arguments\n    inputs: Feed placeholders to the computation graph.\n    outputs: Output tensors to fetch.\n    updates: Additional update ops to be run at function call.\n    name: a name to help users identify what this function does.\n    session_kwargs: arguments to `tf.Session.run()`:\n        `fetches`, `feed_dict`,\n        `options`, `run_metadata`",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, inputs, outputs, updates=None, name=None, **session_kwargs):\n    updates = updates or []\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` to a TensorFlow backend function should be a list or tuple.')\n    if not isinstance(outputs, (list, tuple)):\n        raise TypeError('`outputs` of a TensorFlow backend function should be a list or tuple.')\n    if not isinstance(updates, (list, tuple)):\n        raise TypeError('`updates` in a TensorFlow backend function should be a list or tuple.')\n    self.inputs = list(inputs)\n    self.outputs = list(outputs)\n    with tf.control_dependencies(self.outputs):\n        updates_ops = []\n        for update in updates:\n            if isinstance(update, tuple):\n                p, new_p = update\n                updates_ops.append(tf.assign(p, new_p))\n            else:\n                updates_ops.append(update)\n        self.updates_op = tf.group(*updates_ops)\n    self.name = name\n    self.feed_dict = session_kwargs.pop('feed_dict', {})\n    self.fetches = session_kwargs.pop('fetches', [])\n    if not isinstance(self.fetches, list):\n        self.fetches = [self.fetches]\n    self.fetches = [tf.identity(x) for x in self.fetches]\n    self.session_kwargs = session_kwargs\n    if session_kwargs:\n        raise ValueError('Some keys in session_kwargs are not supported at this time: %s', session_kwargs.keys())\n    self._callable_fn = None\n    self._feed_arrays = None\n    self._feed_symbols = None\n    self._symbol_vals = None\n    self._session = None",
                            "def _make_callable(self, feed_arrays, feed_symbols, symbol_vals, session):\n    \"\"\"Generates a callable that runs the graph.\n\n    # Arguments\n        feed_arrays: List of input tensors to be fed\n            Numpy arrays at runtime.\n        feed_symbols: List of input tensors to be fed\n            symbolic tensors at runtime.\n        symbol_vals: List of symbolic tensors to be fed to `feed_symbols`.\n        session: Session to use to generate the callable.\n\n    # Returns\n        Function that runs the graph according to the above options.\n    \"\"\"\n    callable_opts = config_pb2.CallableOptions()\n    for x in feed_arrays:\n        callable_opts.feed.append(x.name)\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            callable_opts.feed.append(key.name)\n    for x, y in zip(feed_symbols, symbol_vals):\n        connection = callable_opts.tensor_connection.add()\n        if x.dtype != y.dtype:\n            y = tf.cast(y, dtype=x.dtype)\n        from_tensor = tf_ops._as_graph_element(y)\n        if from_tensor is None:\n            from_tensor = y\n        connection.from_tensor = from_tensor.name\n        connection.to_tensor = x.name\n    for x in self.outputs + self.fetches:\n        callable_opts.fetch.append(x.name)\n    callable_opts.target.append(self.updates_op.name)\n    callable_fn = session._make_callable_from_options(callable_opts)\n    self._callable_fn = callable_fn\n    self._feed_arrays = feed_arrays\n    self._feed_symbols = feed_symbols\n    self._symbol_vals = symbol_vals\n    self._session = session",
                            "def _call(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n    session = get_session()\n    feed_arrays = []\n    array_vals = []\n    feed_symbols = []\n    symbol_vals = []\n    for tensor, value in zip(self.inputs, inputs):\n        if value is None:\n            continue\n        if is_tensor(value):\n            feed_symbols.append(tensor)\n            symbol_vals.append(value)\n        else:\n            feed_arrays.append(tensor)\n            array_vals.append(np.asarray(value, dtype=tf.as_dtype(tensor.dtype).as_numpy_dtype))\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            array_vals.append(np.asarray(self.feed_dict[key], dtype=tf.as_dtype(key.dtype).as_numpy_dtype))\n    if self._callable_fn is None or feed_arrays != self._feed_arrays or symbol_vals != self._symbol_vals or (feed_symbols != self._feed_symbols) or (session != self._session):\n        self._make_callable(feed_arrays, feed_symbols, symbol_vals, session)\n    fetched = self._callable_fn(*array_vals)\n    return fetched[:len(self.outputs)]",
                            "def _legacy_call(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n    feed_dict = self.feed_dict.copy()\n    for tensor, value in zip(self.inputs, inputs):\n        if is_sparse(tensor):\n            sparse_coo = value.tocoo()\n            indices = np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)\n            value = (indices, sparse_coo.data, sparse_coo.shape)\n        feed_dict[tensor] = value\n    fetches = self.outputs + [self.updates_op] + self.fetches\n    session = get_session()\n    updated = session.run(fetches=fetches, feed_dict=feed_dict, **self.session_kwargs)\n    return updated[:len(self.outputs)]",
                            "def __call__(self, inputs):\n    if hasattr(get_session(), '_make_callable_from_options'):\n        if py_any((is_sparse(x) for x in self.inputs)):\n            if py_any((is_tensor(x) for x in inputs)):\n                raise ValueError('Feeding from symbolic tensors is not supported with sparse inputs.')\n            return self._legacy_call(inputs)\n        return self._call(inputs)\n    else:\n        if py_any((is_tensor(x) for x in inputs)):\n            raise ValueError('In order to feed symbolic tensors to a Keras model in TensorFlow, you need tensorflow 1.8 or higher.')\n        return self._legacy_call(inputs)"
                        ],
                        "constructor_variables": [
                            "updates",
                            "_session",
                            "name",
                            "_symbol_vals",
                            "_feed_symbols",
                            "_callable_fn",
                            "session_kwargs",
                            "_feed_arrays",
                            "updates_ops",
                            "updates_op",
                            "feed_dict",
                            "outputs",
                            "fetches",
                            "inputs"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, inputs, outputs, updates=None, name=None, **session_kwargs)",
                            "_make_callable(self, feed_arrays, feed_symbols, symbol_vals, session)",
                            "_call(self, inputs)",
                            "_legacy_call(self, inputs)",
                            "__call__(self, inputs)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "updates": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inputs": {
                                    "variable_value": "[<tf.Tensor 'Placeholder:0' shape=() dtype=float32>, <tf.Tensor 'Placeholder_1:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "outputs": {
                                    "variable_value": "[<tf.Tensor 'add:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.inputs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x12d602f10>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "self.outputs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.control_dependencies": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "updates_ops": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "updates_ops.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.assign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.updates_op": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.feed_dict": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "session_kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x12d60d7d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "session_kwargs": {
                                    "variable_value": "{'options': output_partition_graphs: true\n, 'run_metadata': }",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "self.fetches": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.identity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.session_kwargs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "session_kwargs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x12d60d7d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._callable_fn": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_arrays": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_symbols": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._symbol_vals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._session": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "updates": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "inputs": {
                                    "variable_value": "[<tf.Tensor 'Placeholder:0' shape=() dtype=float32>, <tf.Tensor 'Placeholder_1:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "outputs": {
                                    "variable_value": "[<tf.Tensor 'add_1:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.inputs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x12e2850d0>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "self.outputs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.control_dependencies": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "updates_ops": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_p": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "updates_ops.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.assign": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.updates_op": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.feed_dict": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "session_kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x12e27c910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "session_kwargs": {
                                    "variable_value": "{'run_metadata': partition_graphs {\n  node {\n    name: \"_arg_Placeholder_0_0\"\n    op: \"_Arg\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    attr {\n      key: \"index\"\n      value {\n        i: 0\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"_arg_Placeholder_0_0\"\n    }\n  }\n  node {\n    name: \"_arg_Placeholder_1_0_1\"\n    op: \"_Arg\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    attr {\n      key: \"index\"\n      value {\n        i: 1\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"_arg_Placeholder_1_0_1\"\n    }\n  }\n  node {\n    name: \"add\"\n    op: \"AddV2\"\n    input: \"_arg_Placeholder_0_0\"\n    input: \"_arg_Placeholder_1_0_1\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"add\"\n    }\n  }\n  node {\n    name: \"group_deps\"\n    op: \"NoOp\"\n    input: \"^add\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    experimental_debug_info {\n      original_node_names: \"group_deps\"\n    }\n  }\n  node {\n    name: \"_retval_add_0_0\"\n    op: \"_Retval\"\n    input: \"add\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    attr {\n      key: \"index\"\n      value {\n        i: 0\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"_retval_add_0_0\"\n    }\n  }\n  library {\n  }\n  versions {\n    producer: 134\n  }\n}\n}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.fetches": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tf.identity": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.session_kwargs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "session_kwargs.copy": {
                                    "variable_value": "<built-in method copy of dict object at 0x12e27c910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self.run_options": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.run_metadata": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "session_kwargs.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x12e27c910>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "self._callable_fn": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_arrays": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_symbols": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._symbol_vals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._session": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "_make_callable",
                    "function_code": "def _make_callable(self, feed_arrays, feed_symbols, symbol_vals, session):\n    \"\"\"Generates a callable that runs the graph.\n\n    # Arguments\n        feed_arrays: List of input tensors to be fed\n            Numpy arrays at runtime.\n        feed_symbols: List of input tensors to be fed\n            symbolic tensors at runtime.\n        symbol_vals: List of symbolic tensors to be fed to `feed_symbols`.\n        session: Session to use to generate the callable.\n\n    # Returns\n        Function that runs the graph according to the above options.\n    \"\"\"\n    # Prepare callable options.\n    callable_opts = config_pb2.CallableOptions()\n    # Handle external-data feed.\n    for x in feed_arrays:\n        callable_opts.feed.append(x.name)\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            callable_opts.feed.append(key.name)\n    # Handle symbolic feed.\n    for x, y in zip(feed_symbols, symbol_vals):\n        connection = callable_opts.tensor_connection.add()\n        if x.dtype != y.dtype:\n            y = tf.cast(y, dtype=x.dtype)\n        from_tensor = tf_ops._as_graph_element(y)\n        if from_tensor is None:\n            from_tensor = y\n        connection.from_tensor = from_tensor.name  # Data tensor\n        connection.to_tensor = x.name  # Placeholder\n    # Handle fetches.\n    for x in self.outputs + self.fetches:\n        callable_opts.fetch.append(x.name)\n    # Handle updates.\n    callable_opts.target.append(self.updates_op.name)\n    # Create callable.\n    callable_fn = session._make_callable_from_options(callable_opts)\n    # Cache parameters corresponding to the generated callable, so that\n    # we can detect future mismatches and refresh the callable.\n    self._callable_fn = callable_fn\n    self._feed_arrays = feed_arrays\n    self._feed_symbols = feed_symbols\n    self._symbol_vals = symbol_vals\n    self._session = session\n",
                    "decorators": [],
                    "docstring": "Generates a callable that runs the graph.\n\n# Arguments\n    feed_arrays: List of input tensors to be fed\n        Numpy arrays at runtime.\n    feed_symbols: List of input tensors to be fed\n        symbolic tensors at runtime.\n    symbol_vals: List of symbolic tensors to be fed to `feed_symbols`.\n    session: Session to use to generate the callable.\n\n# Returns\n    Function that runs the graph according to the above options.",
                    "start_line": 2559,
                    "end_line": 2604,
                    "variables": {
                        "callable_opts": [
                            2593,
                            2595,
                            2597,
                            2574,
                            2577,
                            2580,
                            2583
                        ],
                        "config_pb2.CallableOptions": [
                            2574
                        ],
                        "config_pb2": [
                            2574
                        ],
                        "x": [
                            2592,
                            2593,
                            2576,
                            2577,
                            2582,
                            2584,
                            2585,
                            2590
                        ],
                        "feed_arrays": [
                            2576,
                            2601
                        ],
                        "callable_opts.feed.append": [
                            2577,
                            2580
                        ],
                        "callable_opts.feed": [
                            2577,
                            2580
                        ],
                        "x.name": [
                            2577,
                            2590,
                            2593
                        ],
                        "self.feed_dict": [
                            2578,
                            2579
                        ],
                        "self": [
                            2592,
                            2595,
                            2600,
                            2601,
                            2602,
                            2603,
                            2604,
                            2578,
                            2579
                        ],
                        "key": [
                            2579,
                            2580
                        ],
                        "sorted": [
                            2579
                        ],
                        "self.feed_dict.keys": [
                            2579
                        ],
                        "key.name": [
                            2580
                        ],
                        "y": [
                            2582,
                            2584,
                            2585,
                            2586,
                            2588
                        ],
                        "zip": [
                            2582
                        ],
                        "feed_symbols": [
                            2602,
                            2582
                        ],
                        "symbol_vals": [
                            2603,
                            2582
                        ],
                        "connection": [
                            2589,
                            2590,
                            2583
                        ],
                        "callable_opts.tensor_connection.add": [
                            2583
                        ],
                        "callable_opts.tensor_connection": [
                            2583
                        ],
                        "x.dtype": [
                            2584,
                            2585
                        ],
                        "y.dtype": [
                            2584
                        ],
                        "tf.cast": [
                            2585
                        ],
                        "tf": [
                            2585
                        ],
                        "from_tensor": [
                            2586,
                            2587,
                            2588,
                            2589
                        ],
                        "tf_ops._as_graph_element": [
                            2586
                        ],
                        "tf_ops": [
                            2586
                        ],
                        "connection.from_tensor": [
                            2589
                        ],
                        "from_tensor.name": [
                            2589
                        ],
                        "connection.to_tensor": [
                            2590
                        ],
                        "self.outputs": [
                            2592
                        ],
                        "self.fetches": [
                            2592
                        ],
                        "callable_opts.fetch.append": [
                            2593
                        ],
                        "callable_opts.fetch": [
                            2593
                        ],
                        "callable_opts.target.append": [
                            2595
                        ],
                        "callable_opts.target": [
                            2595
                        ],
                        "self.updates_op.name": [
                            2595
                        ],
                        "self.updates_op": [
                            2595
                        ],
                        "callable_fn": [
                            2600,
                            2597
                        ],
                        "session._make_callable_from_options": [
                            2597
                        ],
                        "session": [
                            2604,
                            2597
                        ],
                        "self._callable_fn": [
                            2600
                        ],
                        "self._feed_arrays": [
                            2601
                        ],
                        "self._feed_symbols": [
                            2602
                        ],
                        "self._symbol_vals": [
                            2603
                        ],
                        "self._session": [
                            2604
                        ]
                    },
                    "filtered_variables": {
                        "callable_opts": [
                            2593,
                            2595,
                            2597,
                            2574,
                            2577,
                            2580,
                            2583
                        ],
                        "config_pb2.CallableOptions": [
                            2574
                        ],
                        "config_pb2": [
                            2574
                        ],
                        "x": [
                            2592,
                            2593,
                            2576,
                            2577,
                            2582,
                            2584,
                            2585,
                            2590
                        ],
                        "feed_arrays": [
                            2576,
                            2601
                        ],
                        "callable_opts.feed.append": [
                            2577,
                            2580
                        ],
                        "callable_opts.feed": [
                            2577,
                            2580
                        ],
                        "x.name": [
                            2577,
                            2590,
                            2593
                        ],
                        "self.feed_dict": [
                            2578,
                            2579
                        ],
                        "self": [
                            2592,
                            2595,
                            2600,
                            2601,
                            2602,
                            2603,
                            2604,
                            2578,
                            2579
                        ],
                        "key": [
                            2579,
                            2580
                        ],
                        "self.feed_dict.keys": [
                            2579
                        ],
                        "key.name": [
                            2580
                        ],
                        "y": [
                            2582,
                            2584,
                            2585,
                            2586,
                            2588
                        ],
                        "feed_symbols": [
                            2602,
                            2582
                        ],
                        "symbol_vals": [
                            2603,
                            2582
                        ],
                        "connection": [
                            2589,
                            2590,
                            2583
                        ],
                        "callable_opts.tensor_connection.add": [
                            2583
                        ],
                        "callable_opts.tensor_connection": [
                            2583
                        ],
                        "x.dtype": [
                            2584,
                            2585
                        ],
                        "y.dtype": [
                            2584
                        ],
                        "tf.cast": [
                            2585
                        ],
                        "tf": [
                            2585
                        ],
                        "from_tensor": [
                            2586,
                            2587,
                            2588,
                            2589
                        ],
                        "tf_ops._as_graph_element": [
                            2586
                        ],
                        "tf_ops": [
                            2586
                        ],
                        "connection.from_tensor": [
                            2589
                        ],
                        "from_tensor.name": [
                            2589
                        ],
                        "connection.to_tensor": [
                            2590
                        ],
                        "self.outputs": [
                            2592
                        ],
                        "self.fetches": [
                            2592
                        ],
                        "callable_opts.fetch.append": [
                            2593
                        ],
                        "callable_opts.fetch": [
                            2593
                        ],
                        "callable_opts.target.append": [
                            2595
                        ],
                        "callable_opts.target": [
                            2595
                        ],
                        "self.updates_op.name": [
                            2595
                        ],
                        "self.updates_op": [
                            2595
                        ],
                        "callable_fn": [
                            2600,
                            2597
                        ],
                        "session._make_callable_from_options": [
                            2597
                        ],
                        "session": [
                            2604,
                            2597
                        ],
                        "self._callable_fn": [
                            2600
                        ],
                        "self._feed_arrays": [
                            2601
                        ],
                        "self._feed_symbols": [
                            2602
                        ],
                        "self._symbol_vals": [
                            2603
                        ],
                        "self._session": [
                            2604
                        ]
                    },
                    "diff_line_number": 2595,
                    "class_data": {
                        "signature": "class Function(object)",
                        "docstring": "Runs a computation graph.\n\nIt's possible to pass arguments to `tf.Session.run()` via `session_kwargs`.\nIn particular additional operations via `fetches` argument and additional\ntensor substitutions via `feed_dict` arguments. Note that given\nsubstitutions are merged with substitutions from `inputs`. Even though\n`feed_dict` is passed once in the constructor (called in `model.compile()`)\nwe can modify the values in the dictionary. Through this feed_dict we can\nprovide additional substitutions besides Keras inputs.\n\n# Arguments\n    inputs: Feed placeholders to the computation graph.\n    outputs: Output tensors to fetch.\n    updates: Additional update ops to be run at function call.\n    name: a name to help users identify what this function does.\n    session_kwargs: arguments to `tf.Session.run()`:\n        `fetches`, `feed_dict`,\n        `options`, `run_metadata`",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, inputs, outputs, updates=None, name=None, **session_kwargs):\n    updates = updates or []\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` to a TensorFlow backend function should be a list or tuple.')\n    if not isinstance(outputs, (list, tuple)):\n        raise TypeError('`outputs` of a TensorFlow backend function should be a list or tuple.')\n    if not isinstance(updates, (list, tuple)):\n        raise TypeError('`updates` in a TensorFlow backend function should be a list or tuple.')\n    self.inputs = list(inputs)\n    self.outputs = list(outputs)\n    with tf.control_dependencies(self.outputs):\n        updates_ops = []\n        for update in updates:\n            if isinstance(update, tuple):\n                p, new_p = update\n                updates_ops.append(tf.assign(p, new_p))\n            else:\n                updates_ops.append(update)\n        self.updates_op = tf.group(*updates_ops)\n    self.name = name\n    self.feed_dict = session_kwargs.pop('feed_dict', {})\n    self.fetches = session_kwargs.pop('fetches', [])\n    if not isinstance(self.fetches, list):\n        self.fetches = [self.fetches]\n    self.fetches = [tf.identity(x) for x in self.fetches]\n    self.session_kwargs = session_kwargs\n    if session_kwargs:\n        raise ValueError('Some keys in session_kwargs are not supported at this time: %s', session_kwargs.keys())\n    self._callable_fn = None\n    self._feed_arrays = None\n    self._feed_symbols = None\n    self._symbol_vals = None\n    self._session = None",
                            "def _make_callable(self, feed_arrays, feed_symbols, symbol_vals, session):\n    \"\"\"Generates a callable that runs the graph.\n\n    # Arguments\n        feed_arrays: List of input tensors to be fed\n            Numpy arrays at runtime.\n        feed_symbols: List of input tensors to be fed\n            symbolic tensors at runtime.\n        symbol_vals: List of symbolic tensors to be fed to `feed_symbols`.\n        session: Session to use to generate the callable.\n\n    # Returns\n        Function that runs the graph according to the above options.\n    \"\"\"\n    callable_opts = config_pb2.CallableOptions()\n    for x in feed_arrays:\n        callable_opts.feed.append(x.name)\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            callable_opts.feed.append(key.name)\n    for x, y in zip(feed_symbols, symbol_vals):\n        connection = callable_opts.tensor_connection.add()\n        if x.dtype != y.dtype:\n            y = tf.cast(y, dtype=x.dtype)\n        from_tensor = tf_ops._as_graph_element(y)\n        if from_tensor is None:\n            from_tensor = y\n        connection.from_tensor = from_tensor.name\n        connection.to_tensor = x.name\n    for x in self.outputs + self.fetches:\n        callable_opts.fetch.append(x.name)\n    callable_opts.target.append(self.updates_op.name)\n    callable_fn = session._make_callable_from_options(callable_opts)\n    self._callable_fn = callable_fn\n    self._feed_arrays = feed_arrays\n    self._feed_symbols = feed_symbols\n    self._symbol_vals = symbol_vals\n    self._session = session",
                            "def _call(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n    session = get_session()\n    feed_arrays = []\n    array_vals = []\n    feed_symbols = []\n    symbol_vals = []\n    for tensor, value in zip(self.inputs, inputs):\n        if value is None:\n            continue\n        if is_tensor(value):\n            feed_symbols.append(tensor)\n            symbol_vals.append(value)\n        else:\n            feed_arrays.append(tensor)\n            array_vals.append(np.asarray(value, dtype=tf.as_dtype(tensor.dtype).as_numpy_dtype))\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            array_vals.append(np.asarray(self.feed_dict[key], dtype=tf.as_dtype(key.dtype).as_numpy_dtype))\n    if self._callable_fn is None or feed_arrays != self._feed_arrays or symbol_vals != self._symbol_vals or (feed_symbols != self._feed_symbols) or (session != self._session):\n        self._make_callable(feed_arrays, feed_symbols, symbol_vals, session)\n    fetched = self._callable_fn(*array_vals)\n    return fetched[:len(self.outputs)]",
                            "def _legacy_call(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n    feed_dict = self.feed_dict.copy()\n    for tensor, value in zip(self.inputs, inputs):\n        if is_sparse(tensor):\n            sparse_coo = value.tocoo()\n            indices = np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)\n            value = (indices, sparse_coo.data, sparse_coo.shape)\n        feed_dict[tensor] = value\n    fetches = self.outputs + [self.updates_op] + self.fetches\n    session = get_session()\n    updated = session.run(fetches=fetches, feed_dict=feed_dict, **self.session_kwargs)\n    return updated[:len(self.outputs)]",
                            "def __call__(self, inputs):\n    if hasattr(get_session(), '_make_callable_from_options'):\n        if py_any((is_sparse(x) for x in self.inputs)):\n            if py_any((is_tensor(x) for x in inputs)):\n                raise ValueError('Feeding from symbolic tensors is not supported with sparse inputs.')\n            return self._legacy_call(inputs)\n        return self._call(inputs)\n    else:\n        if py_any((is_tensor(x) for x in inputs)):\n            raise ValueError('In order to feed symbolic tensors to a Keras model in TensorFlow, you need tensorflow 1.8 or higher.')\n        return self._legacy_call(inputs)"
                        ],
                        "constructor_variables": [
                            "updates",
                            "_session",
                            "name",
                            "_symbol_vals",
                            "_feed_symbols",
                            "_callable_fn",
                            "session_kwargs",
                            "_feed_arrays",
                            "updates_ops",
                            "updates_op",
                            "feed_dict",
                            "outputs",
                            "fetches",
                            "inputs"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, inputs, outputs, updates=None, name=None, **session_kwargs)",
                            "_make_callable(self, feed_arrays, feed_symbols, symbol_vals, session)",
                            "_call(self, inputs)",
                            "_legacy_call(self, inputs)",
                            "__call__(self, inputs)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "callable_opts": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config_pb2.CallableOptions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "config_pb2": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed_arrays": {
                                    "variable_value": "[<tf.Tensor 'Placeholder:0' shape=() dtype=float32>, <tf.Tensor 'Placeholder_1:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "callable_opts.feed.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callable_opts.feed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.feed_dict": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x13200ef50>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.feed_dict.keys": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed_symbols": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "symbol_vals": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "connection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callable_opts.tensor_connection.add": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callable_opts.tensor_connection": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.cast": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "from_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf_ops._as_graph_element": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf_ops": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "connection.from_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "from_tensor.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "connection.to_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.outputs": {
                                    "variable_value": "[<tf.Tensor 'add_1:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.fetches": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "callable_opts.fetch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callable_opts.fetch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callable_opts.target.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callable_opts.target": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.updates_op.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.updates_op": {
                                    "variable_value": "<tf.Operation 'group_deps_1' type=NoOp>",
                                    "variable_type": "Operation",
                                    "variable_shape": null
                                },
                                "self.run_options": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callable_opts.run_options.CopyFrom": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callable_opts.run_options": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callable_fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "session._make_callable_from_options": {
                                    "variable_value": "<bound method BaseSession._make_callable_from_options of <tensorflow.python.client.session.Session object at 0x13200e110>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "session": {
                                    "variable_value": "<tensorflow.python.client.session.Session object at 0x13200e110>",
                                    "variable_type": "Session",
                                    "variable_shape": null
                                },
                                "self._callable_fn": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_arrays": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_symbols": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._symbol_vals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._session": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "_call",
                    "function_code": "def _call(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n\n    session = get_session()\n    feed_arrays = []\n    array_vals = []\n    feed_symbols = []\n    symbol_vals = []\n    for tensor, value in zip(self.inputs, inputs):\n        if value is None:\n            continue\n        if is_tensor(value):\n            # Case: feeding symbolic tensor.\n            feed_symbols.append(tensor)\n            symbol_vals.append(value)\n        else:\n            feed_arrays.append(tensor)\n            # We need to do array conversion and type casting\n            # at this level, since\n            # `callable_fn` only supports exact matches.\n            array_vals.append(\n                np.asarray(value,\n                           dtype=tf.as_dtype(tensor.dtype).as_numpy_dtype))\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            array_vals.append(\n                np.asarray(self.feed_dict[key],\n                           dtype=tf.as_dtype(key.dtype).as_numpy_dtype))\n\n    # Refresh callable if anything has changed.\n    if (self._callable_fn is None or\n            feed_arrays != self._feed_arrays or\n            symbol_vals != self._symbol_vals or\n            feed_symbols != self._feed_symbols or\n            session != self._session):\n        self._make_callable(feed_arrays,\n                            feed_symbols,\n                            symbol_vals,\n                            session)\n    fetched = self._callable_fn(*array_vals)\n    return fetched[:len(self.outputs)]\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 2606,
                    "end_line": 2647,
                    "variables": {
                        "isinstance": [
                            2607
                        ],
                        "inputs": [
                            2615,
                            2607
                        ],
                        "list": [
                            2607
                        ],
                        "tuple": [
                            2607
                        ],
                        "TypeError": [
                            2608
                        ],
                        "session": [
                            2641,
                            2610,
                            2645
                        ],
                        "get_session": [
                            2610
                        ],
                        "feed_arrays": [
                            2642,
                            2611,
                            2638,
                            2623
                        ],
                        "array_vals": [
                            2632,
                            2627,
                            2612,
                            2646
                        ],
                        "feed_symbols": [
                            2640,
                            2643,
                            2620,
                            2613
                        ],
                        "symbol_vals": [
                            2644,
                            2621,
                            2614,
                            2639
                        ],
                        "tensor": [
                            2629,
                            2620,
                            2623,
                            2615
                        ],
                        "value": [
                            2628,
                            2615,
                            2616,
                            2618,
                            2621
                        ],
                        "zip": [
                            2615
                        ],
                        "self.inputs": [
                            2615
                        ],
                        "self": [
                            2630,
                            2631,
                            2647,
                            2633,
                            2637,
                            2638,
                            2639,
                            2640,
                            2641,
                            2642,
                            2646,
                            2615
                        ],
                        "is_tensor": [
                            2618
                        ],
                        "feed_symbols.append": [
                            2620
                        ],
                        "symbol_vals.append": [
                            2621
                        ],
                        "feed_arrays.append": [
                            2623
                        ],
                        "array_vals.append": [
                            2632,
                            2627
                        ],
                        "np.asarray": [
                            2633,
                            2628
                        ],
                        "np": [
                            2633,
                            2628
                        ],
                        "as_numpy_dtype": [
                            2634,
                            2629
                        ],
                        "tf.as_dtype": [
                            2634,
                            2629
                        ],
                        "tf": [
                            2634,
                            2629
                        ],
                        "tensor.dtype": [
                            2629
                        ],
                        "self.feed_dict": [
                            2633,
                            2630,
                            2631
                        ],
                        "key": [
                            2633,
                            2634,
                            2631
                        ],
                        "sorted": [
                            2631
                        ],
                        "self.feed_dict.keys": [
                            2631
                        ],
                        "key.dtype": [
                            2634
                        ],
                        "self._callable_fn": [
                            2637,
                            2646
                        ],
                        "self._feed_arrays": [
                            2638
                        ],
                        "self._symbol_vals": [
                            2639
                        ],
                        "self._feed_symbols": [
                            2640
                        ],
                        "self._session": [
                            2641
                        ],
                        "self._make_callable": [
                            2642
                        ],
                        "fetched": [
                            2646,
                            2647
                        ],
                        "len": [
                            2647
                        ],
                        "self.outputs": [
                            2647
                        ]
                    },
                    "filtered_variables": {
                        "inputs": [
                            2615,
                            2607
                        ],
                        "session": [
                            2641,
                            2610,
                            2645
                        ],
                        "get_session": [
                            2610
                        ],
                        "feed_arrays": [
                            2642,
                            2611,
                            2638,
                            2623
                        ],
                        "array_vals": [
                            2632,
                            2627,
                            2612,
                            2646
                        ],
                        "feed_symbols": [
                            2640,
                            2643,
                            2620,
                            2613
                        ],
                        "symbol_vals": [
                            2644,
                            2621,
                            2614,
                            2639
                        ],
                        "tensor": [
                            2629,
                            2620,
                            2623,
                            2615
                        ],
                        "value": [
                            2628,
                            2615,
                            2616,
                            2618,
                            2621
                        ],
                        "self.inputs": [
                            2615
                        ],
                        "self": [
                            2630,
                            2631,
                            2647,
                            2633,
                            2637,
                            2638,
                            2639,
                            2640,
                            2641,
                            2642,
                            2646,
                            2615
                        ],
                        "is_tensor": [
                            2618
                        ],
                        "feed_symbols.append": [
                            2620
                        ],
                        "symbol_vals.append": [
                            2621
                        ],
                        "feed_arrays.append": [
                            2623
                        ],
                        "array_vals.append": [
                            2632,
                            2627
                        ],
                        "np.asarray": [
                            2633,
                            2628
                        ],
                        "np": [
                            2633,
                            2628
                        ],
                        "as_numpy_dtype": [
                            2634,
                            2629
                        ],
                        "tf.as_dtype": [
                            2634,
                            2629
                        ],
                        "tf": [
                            2634,
                            2629
                        ],
                        "tensor.dtype": [
                            2629
                        ],
                        "self.feed_dict": [
                            2633,
                            2630,
                            2631
                        ],
                        "key": [
                            2633,
                            2634,
                            2631
                        ],
                        "self.feed_dict.keys": [
                            2631
                        ],
                        "key.dtype": [
                            2634
                        ],
                        "self._callable_fn": [
                            2637,
                            2646
                        ],
                        "self._feed_arrays": [
                            2638
                        ],
                        "self._symbol_vals": [
                            2639
                        ],
                        "self._feed_symbols": [
                            2640
                        ],
                        "self._session": [
                            2641
                        ],
                        "self._make_callable": [
                            2642
                        ],
                        "fetched": [
                            2646,
                            2647
                        ],
                        "self.outputs": [
                            2647
                        ]
                    },
                    "diff_line_number": 2646,
                    "class_data": {
                        "signature": "class Function(object)",
                        "docstring": "Runs a computation graph.\n\nIt's possible to pass arguments to `tf.Session.run()` via `session_kwargs`.\nIn particular additional operations via `fetches` argument and additional\ntensor substitutions via `feed_dict` arguments. Note that given\nsubstitutions are merged with substitutions from `inputs`. Even though\n`feed_dict` is passed once in the constructor (called in `model.compile()`)\nwe can modify the values in the dictionary. Through this feed_dict we can\nprovide additional substitutions besides Keras inputs.\n\n# Arguments\n    inputs: Feed placeholders to the computation graph.\n    outputs: Output tensors to fetch.\n    updates: Additional update ops to be run at function call.\n    name: a name to help users identify what this function does.\n    session_kwargs: arguments to `tf.Session.run()`:\n        `fetches`, `feed_dict`,\n        `options`, `run_metadata`",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, inputs, outputs, updates=None, name=None, **session_kwargs):\n    updates = updates or []\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` to a TensorFlow backend function should be a list or tuple.')\n    if not isinstance(outputs, (list, tuple)):\n        raise TypeError('`outputs` of a TensorFlow backend function should be a list or tuple.')\n    if not isinstance(updates, (list, tuple)):\n        raise TypeError('`updates` in a TensorFlow backend function should be a list or tuple.')\n    self.inputs = list(inputs)\n    self.outputs = list(outputs)\n    with tf.control_dependencies(self.outputs):\n        updates_ops = []\n        for update in updates:\n            if isinstance(update, tuple):\n                p, new_p = update\n                updates_ops.append(tf.assign(p, new_p))\n            else:\n                updates_ops.append(update)\n        self.updates_op = tf.group(*updates_ops)\n    self.name = name\n    self.feed_dict = session_kwargs.pop('feed_dict', {})\n    self.fetches = session_kwargs.pop('fetches', [])\n    if not isinstance(self.fetches, list):\n        self.fetches = [self.fetches]\n    self.fetches = [tf.identity(x) for x in self.fetches]\n    self.session_kwargs = session_kwargs\n    if session_kwargs:\n        raise ValueError('Some keys in session_kwargs are not supported at this time: %s', session_kwargs.keys())\n    self._callable_fn = None\n    self._feed_arrays = None\n    self._feed_symbols = None\n    self._symbol_vals = None\n    self._session = None",
                            "def _make_callable(self, feed_arrays, feed_symbols, symbol_vals, session):\n    \"\"\"Generates a callable that runs the graph.\n\n    # Arguments\n        feed_arrays: List of input tensors to be fed\n            Numpy arrays at runtime.\n        feed_symbols: List of input tensors to be fed\n            symbolic tensors at runtime.\n        symbol_vals: List of symbolic tensors to be fed to `feed_symbols`.\n        session: Session to use to generate the callable.\n\n    # Returns\n        Function that runs the graph according to the above options.\n    \"\"\"\n    callable_opts = config_pb2.CallableOptions()\n    for x in feed_arrays:\n        callable_opts.feed.append(x.name)\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            callable_opts.feed.append(key.name)\n    for x, y in zip(feed_symbols, symbol_vals):\n        connection = callable_opts.tensor_connection.add()\n        if x.dtype != y.dtype:\n            y = tf.cast(y, dtype=x.dtype)\n        from_tensor = tf_ops._as_graph_element(y)\n        if from_tensor is None:\n            from_tensor = y\n        connection.from_tensor = from_tensor.name\n        connection.to_tensor = x.name\n    for x in self.outputs + self.fetches:\n        callable_opts.fetch.append(x.name)\n    callable_opts.target.append(self.updates_op.name)\n    callable_fn = session._make_callable_from_options(callable_opts)\n    self._callable_fn = callable_fn\n    self._feed_arrays = feed_arrays\n    self._feed_symbols = feed_symbols\n    self._symbol_vals = symbol_vals\n    self._session = session",
                            "def _call(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n    session = get_session()\n    feed_arrays = []\n    array_vals = []\n    feed_symbols = []\n    symbol_vals = []\n    for tensor, value in zip(self.inputs, inputs):\n        if value is None:\n            continue\n        if is_tensor(value):\n            feed_symbols.append(tensor)\n            symbol_vals.append(value)\n        else:\n            feed_arrays.append(tensor)\n            array_vals.append(np.asarray(value, dtype=tf.as_dtype(tensor.dtype).as_numpy_dtype))\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            array_vals.append(np.asarray(self.feed_dict[key], dtype=tf.as_dtype(key.dtype).as_numpy_dtype))\n    if self._callable_fn is None or feed_arrays != self._feed_arrays or symbol_vals != self._symbol_vals or (feed_symbols != self._feed_symbols) or (session != self._session):\n        self._make_callable(feed_arrays, feed_symbols, symbol_vals, session)\n    fetched = self._callable_fn(*array_vals)\n    return fetched[:len(self.outputs)]",
                            "def _legacy_call(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n    feed_dict = self.feed_dict.copy()\n    for tensor, value in zip(self.inputs, inputs):\n        if is_sparse(tensor):\n            sparse_coo = value.tocoo()\n            indices = np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)\n            value = (indices, sparse_coo.data, sparse_coo.shape)\n        feed_dict[tensor] = value\n    fetches = self.outputs + [self.updates_op] + self.fetches\n    session = get_session()\n    updated = session.run(fetches=fetches, feed_dict=feed_dict, **self.session_kwargs)\n    return updated[:len(self.outputs)]",
                            "def __call__(self, inputs):\n    if hasattr(get_session(), '_make_callable_from_options'):\n        if py_any((is_sparse(x) for x in self.inputs)):\n            if py_any((is_tensor(x) for x in inputs)):\n                raise ValueError('Feeding from symbolic tensors is not supported with sparse inputs.')\n            return self._legacy_call(inputs)\n        return self._call(inputs)\n    else:\n        if py_any((is_tensor(x) for x in inputs)):\n            raise ValueError('In order to feed symbolic tensors to a Keras model in TensorFlow, you need tensorflow 1.8 or higher.')\n        return self._legacy_call(inputs)"
                        ],
                        "constructor_variables": [
                            "updates",
                            "_session",
                            "name",
                            "_symbol_vals",
                            "_feed_symbols",
                            "_callable_fn",
                            "session_kwargs",
                            "_feed_arrays",
                            "updates_ops",
                            "updates_op",
                            "feed_dict",
                            "outputs",
                            "fetches",
                            "inputs"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, inputs, outputs, updates=None, name=None, **session_kwargs)",
                            "_make_callable(self, feed_arrays, feed_symbols, symbol_vals, session)",
                            "_call(self, inputs)",
                            "_legacy_call(self, inputs)",
                            "__call__(self, inputs)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "inputs": {
                                    "variable_value": "[10.0, 20.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array_vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed_symbols": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "symbol_vals": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.inputs": {
                                    "variable_value": "[<tf.Tensor 'Placeholder:0' shape=() dtype=float32>, <tf.Tensor 'Placeholder_1:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x125f70f50>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "is_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed_symbols.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "symbol_vals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed_arrays.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "array_vals.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.asarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "as_numpy_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.as_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tensor.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.feed_dict": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.feed_dict.keys": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "key.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._callable_fn": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_arrays": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._symbol_vals": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_symbols": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._session": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._make_callable": {
                                    "variable_value": "<bound method Function._make_callable of <keras.backend.tensorflow_backend.Function object at 0x125f70f50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.run_metadata": {
                                    "variable_value": "",
                                    "variable_type": "RunMetadata",
                                    "variable_shape": null
                                },
                                "fetched": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.outputs": {
                                    "variable_value": "[<tf.Tensor 'add:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "__call__",
                    "function_code": "def __call__(self, inputs):\n    if hasattr(get_session(), '_make_callable_from_options'):\n        if py_any(is_sparse(x) for x in self.inputs):\n            if py_any(is_tensor(x) for x in inputs):\n                raise ValueError(\n                    'Feeding from symbolic tensors is not '\n                    'supported with sparse inputs.')\n            return self._legacy_call(inputs)\n\n        return self._call(inputs)\n    else:\n        if py_any(is_tensor(x) for x in inputs):\n            raise ValueError(\n                'In order to feed symbolic tensors to a Keras model '\n                'in TensorFlow, you need tensorflow 1.8 or higher.')\n        return self._legacy_call(inputs)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 2667,
                    "end_line": 2682,
                    "variables": {
                        "hasattr": [
                            2668
                        ],
                        "get_session": [
                            2668
                        ],
                        "py_any": [
                            2678,
                            2669,
                            2670
                        ],
                        "is_sparse": [
                            2669
                        ],
                        "x": [
                            2678,
                            2669,
                            2670
                        ],
                        "self.inputs": [
                            2669
                        ],
                        "self": [
                            2674,
                            2676,
                            2669,
                            2682
                        ],
                        "is_tensor": [
                            2678,
                            2670
                        ],
                        "inputs": [
                            2670,
                            2674,
                            2676,
                            2678,
                            2682
                        ],
                        "ValueError": [
                            2679,
                            2671
                        ],
                        "self._legacy_call": [
                            2674,
                            2682
                        ],
                        "self._call": [
                            2676
                        ]
                    },
                    "filtered_variables": {
                        "get_session": [
                            2668
                        ],
                        "py_any": [
                            2678,
                            2669,
                            2670
                        ],
                        "is_sparse": [
                            2669
                        ],
                        "x": [
                            2678,
                            2669,
                            2670
                        ],
                        "self.inputs": [
                            2669
                        ],
                        "self": [
                            2674,
                            2676,
                            2669,
                            2682
                        ],
                        "is_tensor": [
                            2678,
                            2670
                        ],
                        "inputs": [
                            2670,
                            2674,
                            2676,
                            2678,
                            2682
                        ],
                        "self._legacy_call": [
                            2674,
                            2682
                        ],
                        "self._call": [
                            2676
                        ]
                    },
                    "diff_line_number": 2675,
                    "class_data": {
                        "signature": "class Function(object)",
                        "docstring": "Runs a computation graph.\n\nIt's possible to pass arguments to `tf.Session.run()` via `session_kwargs`.\nIn particular additional operations via `fetches` argument and additional\ntensor substitutions via `feed_dict` arguments. Note that given\nsubstitutions are merged with substitutions from `inputs`. Even though\n`feed_dict` is passed once in the constructor (called in `model.compile()`)\nwe can modify the values in the dictionary. Through this feed_dict we can\nprovide additional substitutions besides Keras inputs.\n\n# Arguments\n    inputs: Feed placeholders to the computation graph.\n    outputs: Output tensors to fetch.\n    updates: Additional update ops to be run at function call.\n    name: a name to help users identify what this function does.\n    session_kwargs: arguments to `tf.Session.run()`:\n        `fetches`, `feed_dict`,\n        `options`, `run_metadata`",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, inputs, outputs, updates=None, name=None, **session_kwargs):\n    updates = updates or []\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` to a TensorFlow backend function should be a list or tuple.')\n    if not isinstance(outputs, (list, tuple)):\n        raise TypeError('`outputs` of a TensorFlow backend function should be a list or tuple.')\n    if not isinstance(updates, (list, tuple)):\n        raise TypeError('`updates` in a TensorFlow backend function should be a list or tuple.')\n    self.inputs = list(inputs)\n    self.outputs = list(outputs)\n    with tf.control_dependencies(self.outputs):\n        updates_ops = []\n        for update in updates:\n            if isinstance(update, tuple):\n                p, new_p = update\n                updates_ops.append(tf.assign(p, new_p))\n            else:\n                updates_ops.append(update)\n        self.updates_op = tf.group(*updates_ops)\n    self.name = name\n    self.feed_dict = session_kwargs.pop('feed_dict', {})\n    self.fetches = session_kwargs.pop('fetches', [])\n    if not isinstance(self.fetches, list):\n        self.fetches = [self.fetches]\n    self.fetches = [tf.identity(x) for x in self.fetches]\n    self.session_kwargs = session_kwargs\n    if session_kwargs:\n        raise ValueError('Some keys in session_kwargs are not supported at this time: %s', session_kwargs.keys())\n    self._callable_fn = None\n    self._feed_arrays = None\n    self._feed_symbols = None\n    self._symbol_vals = None\n    self._session = None",
                            "def _make_callable(self, feed_arrays, feed_symbols, symbol_vals, session):\n    \"\"\"Generates a callable that runs the graph.\n\n    # Arguments\n        feed_arrays: List of input tensors to be fed\n            Numpy arrays at runtime.\n        feed_symbols: List of input tensors to be fed\n            symbolic tensors at runtime.\n        symbol_vals: List of symbolic tensors to be fed to `feed_symbols`.\n        session: Session to use to generate the callable.\n\n    # Returns\n        Function that runs the graph according to the above options.\n    \"\"\"\n    callable_opts = config_pb2.CallableOptions()\n    for x in feed_arrays:\n        callable_opts.feed.append(x.name)\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            callable_opts.feed.append(key.name)\n    for x, y in zip(feed_symbols, symbol_vals):\n        connection = callable_opts.tensor_connection.add()\n        if x.dtype != y.dtype:\n            y = tf.cast(y, dtype=x.dtype)\n        from_tensor = tf_ops._as_graph_element(y)\n        if from_tensor is None:\n            from_tensor = y\n        connection.from_tensor = from_tensor.name\n        connection.to_tensor = x.name\n    for x in self.outputs + self.fetches:\n        callable_opts.fetch.append(x.name)\n    callable_opts.target.append(self.updates_op.name)\n    callable_fn = session._make_callable_from_options(callable_opts)\n    self._callable_fn = callable_fn\n    self._feed_arrays = feed_arrays\n    self._feed_symbols = feed_symbols\n    self._symbol_vals = symbol_vals\n    self._session = session",
                            "def _call(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n    session = get_session()\n    feed_arrays = []\n    array_vals = []\n    feed_symbols = []\n    symbol_vals = []\n    for tensor, value in zip(self.inputs, inputs):\n        if value is None:\n            continue\n        if is_tensor(value):\n            feed_symbols.append(tensor)\n            symbol_vals.append(value)\n        else:\n            feed_arrays.append(tensor)\n            array_vals.append(np.asarray(value, dtype=tf.as_dtype(tensor.dtype).as_numpy_dtype))\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            array_vals.append(np.asarray(self.feed_dict[key], dtype=tf.as_dtype(key.dtype).as_numpy_dtype))\n    if self._callable_fn is None or feed_arrays != self._feed_arrays or symbol_vals != self._symbol_vals or (feed_symbols != self._feed_symbols) or (session != self._session):\n        self._make_callable(feed_arrays, feed_symbols, symbol_vals, session)\n    fetched = self._callable_fn(*array_vals)\n    return fetched[:len(self.outputs)]",
                            "def _legacy_call(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n    feed_dict = self.feed_dict.copy()\n    for tensor, value in zip(self.inputs, inputs):\n        if is_sparse(tensor):\n            sparse_coo = value.tocoo()\n            indices = np.concatenate((np.expand_dims(sparse_coo.row, 1), np.expand_dims(sparse_coo.col, 1)), 1)\n            value = (indices, sparse_coo.data, sparse_coo.shape)\n        feed_dict[tensor] = value\n    fetches = self.outputs + [self.updates_op] + self.fetches\n    session = get_session()\n    updated = session.run(fetches=fetches, feed_dict=feed_dict, **self.session_kwargs)\n    return updated[:len(self.outputs)]",
                            "def __call__(self, inputs):\n    if hasattr(get_session(), '_make_callable_from_options'):\n        if py_any((is_sparse(x) for x in self.inputs)):\n            if py_any((is_tensor(x) for x in inputs)):\n                raise ValueError('Feeding from symbolic tensors is not supported with sparse inputs.')\n            return self._legacy_call(inputs)\n        return self._call(inputs)\n    else:\n        if py_any((is_tensor(x) for x in inputs)):\n            raise ValueError('In order to feed symbolic tensors to a Keras model in TensorFlow, you need tensorflow 1.8 or higher.')\n        return self._legacy_call(inputs)"
                        ],
                        "constructor_variables": [
                            "updates",
                            "_session",
                            "name",
                            "_symbol_vals",
                            "_feed_symbols",
                            "_callable_fn",
                            "session_kwargs",
                            "_feed_arrays",
                            "updates_ops",
                            "updates_op",
                            "feed_dict",
                            "outputs",
                            "fetches",
                            "inputs"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, inputs, outputs, updates=None, name=None, **session_kwargs)",
                            "_make_callable(self, feed_arrays, feed_symbols, symbol_vals, session)",
                            "_call(self, inputs)",
                            "_legacy_call(self, inputs)",
                            "__call__(self, inputs)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py_any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.inputs": {
                                    "variable_value": "[<tf.Tensor 'Placeholder:0' shape=() dtype=float32>, <tf.Tensor 'Placeholder_1:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x12abfadd0>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "is_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inputs": {
                                    "variable_value": "[10.0, 20.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self._legacy_call": {
                                    "variable_value": "<bound method Function._legacy_call of <keras.backend.tensorflow_backend.Function object at 0x12abfadd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.run_metadata": {
                                    "variable_value": "",
                                    "variable_type": "RunMetadata",
                                    "variable_shape": null
                                },
                                "StrictVersion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.__version__.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.__version__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._call": {
                                    "variable_value": "<bound method Function._call of <keras.backend.tensorflow_backend.Function object at 0x12abfadd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py_any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.inputs": {
                                    "variable_value": "[<tf.Tensor 'Placeholder:0' shape=() dtype=float32>, <tf.Tensor 'Placeholder_1:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x12abfadd0>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "is_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inputs": {
                                    "variable_value": "[10.0, 20.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self._legacy_call": {
                                    "variable_value": "<bound method Function._legacy_call of <keras.backend.tensorflow_backend.Function object at 0x12abfadd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.run_metadata": {
                                    "variable_value": "",
                                    "variable_type": "RunMetadata",
                                    "variable_shape": null
                                },
                                "StrictVersion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.__version__.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.__version__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._call": {
                                    "variable_value": "<bound method Function._call of <keras.backend.tensorflow_backend.Function object at 0x12abfadd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py_any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.inputs": {
                                    "variable_value": "[<tf.Tensor 'Placeholder:0' shape=() dtype=float32>, <tf.Tensor 'Placeholder_1:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x12abfae90>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "is_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inputs": {
                                    "variable_value": "[10.0, 20.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self._legacy_call": {
                                    "variable_value": "<bound method Function._legacy_call of <keras.backend.tensorflow_backend.Function object at 0x12abfae90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.run_metadata": {
                                    "variable_value": "partition_graphs {\n  node {\n    name: \"_arg_Placeholder_0_0\"\n    op: \"_Arg\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    attr {\n      key: \"index\"\n      value {\n        i: 0\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"_arg_Placeholder_0_0\"\n    }\n  }\n  node {\n    name: \"_arg_Placeholder_1_0_1\"\n    op: \"_Arg\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    attr {\n      key: \"index\"\n      value {\n        i: 1\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"_arg_Placeholder_1_0_1\"\n    }\n  }\n  node {\n    name: \"add\"\n    op: \"AddV2\"\n    input: \"_arg_Placeholder_0_0\"\n    input: \"_arg_Placeholder_1_0_1\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"add\"\n    }\n  }\n  node {\n    name: \"group_deps\"\n    op: \"NoOp\"\n    input: \"^add\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    experimental_debug_info {\n      original_node_names: \"group_deps\"\n    }\n  }\n  node {\n    name: \"_retval_add_0_0\"\n    op: \"_Retval\"\n    input: \"add\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    attr {\n      key: \"index\"\n      value {\n        i: 0\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"_retval_add_0_0\"\n    }\n  }\n  library {\n  }\n  versions {\n    producer: 134\n  }\n}\n",
                                    "variable_type": "RunMetadata",
                                    "variable_shape": null
                                },
                                "StrictVersion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.__version__.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.__version__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._call": {
                                    "variable_value": "<bound method Function._call of <keras.backend.tensorflow_backend.Function object at 0x12abfae90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            },
                            {
                                "get_session": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "py_any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.inputs": {
                                    "variable_value": "[<tf.Tensor 'Placeholder:0' shape=() dtype=float32>, <tf.Tensor 'Placeholder_1:0' shape=() dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x12abfae90>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "is_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inputs": {
                                    "variable_value": "[10.0, 20.0]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self._legacy_call": {
                                    "variable_value": "<bound method Function._legacy_call of <keras.backend.tensorflow_backend.Function object at 0x12abfae90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.run_metadata": {
                                    "variable_value": "partition_graphs {\n  node {\n    name: \"_arg_Placeholder_0_0\"\n    op: \"_Arg\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    attr {\n      key: \"index\"\n      value {\n        i: 0\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"_arg_Placeholder_0_0\"\n    }\n  }\n  node {\n    name: \"_arg_Placeholder_1_0_1\"\n    op: \"_Arg\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    attr {\n      key: \"index\"\n      value {\n        i: 1\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"_arg_Placeholder_1_0_1\"\n    }\n  }\n  node {\n    name: \"add\"\n    op: \"AddV2\"\n    input: \"_arg_Placeholder_0_0\"\n    input: \"_arg_Placeholder_1_0_1\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"add\"\n    }\n  }\n  node {\n    name: \"group_deps\"\n    op: \"NoOp\"\n    input: \"^add\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    experimental_debug_info {\n      original_node_names: \"group_deps\"\n    }\n  }\n  node {\n    name: \"_retval_add_0_0\"\n    op: \"_Retval\"\n    input: \"add\"\n    device: \"/job:localhost/replica:0/task:0/device:CPU:0\"\n    attr {\n      key: \"T\"\n      value {\n        type: DT_FLOAT\n      }\n    }\n    attr {\n      key: \"index\"\n      value {\n        i: 0\n      }\n    }\n    experimental_debug_info {\n      original_node_names: \"_retval_add_0_0\"\n    }\n  }\n  library {\n  }\n  versions {\n    producer: 134\n  }\n}\n",
                                    "variable_type": "RunMetadata",
                                    "variable_shape": null
                                },
                                "StrictVersion": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.__version__.split": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf.__version__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tf": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._call": {
                                    "variable_value": "<bound method Function._call of <keras.backend.tensorflow_backend.Function object at 0x12abfae90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_uid(prefix=''):\n    \"\"\"Get the uid for the default graph.\n\n    # Arguments\n        prefix: An optional prefix of the graph.\n\n    # Returns\n        A unique identifier for the graph.\n    \"\"\"\n    global _GRAPH_UID_DICTS\n    graph = tf.get_default_graph()\n    if graph not in _GRAPH_UID_DICTS:\n        _GRAPH_UID_DICTS[graph] = defaultdict(int)\n    _GRAPH_UID_DICTS[graph][prefix] += 1\n    return _GRAPH_UID_DICTS[graph][prefix]",
                "def reset_uids():\n    \"\"\"Resets graph identifiers.\n    \"\"\"\n    global _GRAPH_UID_DICTS\n    _GRAPH_UID_DICTS = {}",
                "def clear_session():\n    \"\"\"Destroys the current TF graph and creates a new one.\n\n    Useful to avoid clutter from old models / layers.\n    \"\"\"\n    global _SESSION\n    global _GRAPH_LEARNING_PHASES\n    tf.reset_default_graph()\n    reset_uids()\n    _SESSION = None\n    phase = tf.placeholder_with_default(False,\n                                        shape=(),\n                                        name='keras_learning_phase')\n    _GRAPH_LEARNING_PHASES = {}\n    _GRAPH_LEARNING_PHASES[tf.get_default_graph()] = phase",
                "def manual_variable_initialization(value):\n    \"\"\"Sets the manual variable initialization flag.\n\n    This boolean flag determines whether\n    variables should be initialized\n    as they are instantiated (default), or if\n    the user should handle the initialization\n    (e.g. via `tf.initialize_all_variables()`).\n\n    # Arguments\n        value: Python boolean.\n    \"\"\"\n    global _MANUAL_VAR_INIT\n    _MANUAL_VAR_INIT = value",
                "def learning_phase():\n    \"\"\"Returns the learning phase flag.\n\n    The learning phase flag is a bool tensor (0 = test, 1 = train)\n    to be passed as input to any Keras function\n    that uses a different behavior at train time and test time.\n\n    # Returns\n        Learning phase (scalar integer tensor or Python integer).\n    \"\"\"\n    graph = tf.get_default_graph()\n    if graph not in _GRAPH_LEARNING_PHASES:\n        phase = tf.placeholder_with_default(False,\n                                            shape=(),\n                                            name='keras_learning_phase')\n        _GRAPH_LEARNING_PHASES[graph] = phase\n    return _GRAPH_LEARNING_PHASES[graph]",
                "def set_learning_phase(value):\n    \"\"\"Sets the learning phase to a fixed value.\n\n    # Arguments\n        value: Learning phase value, either 0 or 1 (integers).\n\n    # Raises\n        ValueError: if `value` is neither `0` nor `1`.\n    \"\"\"\n    global _GRAPH_LEARNING_PHASES\n    if value not in {0, 1}:\n        raise ValueError('Expected learning phase to be '\n                         '0 or 1.')\n    _GRAPH_LEARNING_PHASES[tf.get_default_graph()] = value",
                "def get_session():\n    \"\"\"Returns the TF session to be used by the backend.\n\n    If a default TensorFlow session is available, we will return it.\n\n    Else, we will return the global Keras session.\n\n    If no global Keras session exists at this point:\n    we will create a new global session.\n\n    Note that you can manually set the global session\n    via `K.set_session(sess)`.\n\n    # Returns\n        A TensorFlow session.\n    \"\"\"\n    global _SESSION\n\n    default_session = tf.get_default_session()\n\n    if default_session is not None:\n        session = default_session\n    else:\n        if _SESSION is None:\n            if not os.environ.get('OMP_NUM_THREADS'):\n                config = tf.ConfigProto(allow_soft_placement=True)\n            else:\n                num_thread = int(os.environ.get('OMP_NUM_THREADS'))\n                config = tf.ConfigProto(intra_op_parallelism_threads=num_thread,\n                                        allow_soft_placement=True)\n            _SESSION = tf.Session(config=config)\n        session = _SESSION\n    if not _MANUAL_VAR_INIT:\n        with session.graph.as_default():\n            variables = tf.global_variables()\n            candidate_vars = []\n            for v in variables:\n                if not getattr(v, '_keras_initialized', False):\n                    candidate_vars.append(v)\n            if candidate_vars:\n                # This step is expensive, so we only run it on variables\n                # not already marked as initialized.\n                is_initialized = session.run(\n                    [tf.is_variable_initialized(v) for v in candidate_vars])\n                uninitialized_vars = []\n                for flag, v in zip(is_initialized, candidate_vars):\n                    if not flag:\n                        uninitialized_vars.append(v)\n                    v._keras_initialized = True\n                if uninitialized_vars:\n                    session.run(tf.variables_initializer(uninitialized_vars))\n    # hack for list_devices() function.\n    # list_devices() function is not available under tensorflow r1.3.\n    if not hasattr(session, 'list_devices'):\n        session.list_devices = lambda: device_lib.list_local_devices()\n    return session",
                "def set_session(session):\n    \"\"\"Sets the global TensorFlow session.\n\n    # Arguments\n        session: A TF Session.\n    \"\"\"\n    global _SESSION\n    _SESSION = session",
                "def _get_current_tf_device():\n    \"\"\"Return explicit device of current context, otherwise returns `None`.\n\n    # Returns\n        If the current device scope is explicitly set, it returns a string with\n        the device (`CPU` or `GPU`). If the scope is not explicitly set, it will\n        return `None`.\n    \"\"\"\n    g = tf.get_default_graph()\n    op = _TfDeviceCaptureOp()\n    g._apply_device_functions(op)\n    return op.device",
                "def _is_current_explicit_device(device_type):\n    \"\"\"Check if the current device is explicitly set on the device type specified.\n\n    # Arguments\n        device_type: A string containing `GPU` or `CPU` (case-insensitive).\n\n    # Returns\n        A boolean indicating if the current device scope is explicitly set on the device type.\n\n    # Raises\n        ValueError: If the `device_type` string indicates an unsupported device.\n    \"\"\"\n    device_type = device_type.upper()\n    if device_type not in ['CPU', 'GPU']:\n        raise ValueError('`device_type` should be either \"CPU\" or \"GPU\".')\n    device = _get_current_tf_device()\n    return (device is not None and device.device_type == device_type.upper())",
                "def _get_available_gpus():\n    \"\"\"Get a list of available gpu devices (formatted as strings).\n\n    # Returns\n        A list of available GPU devices.\n    \"\"\"\n    global _LOCAL_DEVICES\n    if _LOCAL_DEVICES is None:\n        _LOCAL_DEVICES = get_session().list_devices()\n    return [x.name for x in _LOCAL_DEVICES if x.device_type == 'GPU']",
                "def _has_nchw_support():\n    \"\"\"Check whether the current scope supports NCHW ops.\n\n    TensorFlow does not support NCHW on CPU. Therefore we check if we are not explicitly put on\n    CPU, and have GPUs available. In this case there will be soft-placing on the GPU device.\n\n    # Returns\n        bool: if the current scope device placement would support nchw\n    \"\"\"\n    explicitly_on_cpu = _is_current_explicit_device('CPU')\n    gpus_available = len(_get_available_gpus()) > 0\n    return (not explicitly_on_cpu and gpus_available)",
                "def _to_tensor(x, dtype):\n    \"\"\"Convert the input `x` to a tensor of type `dtype`.\n\n    # Arguments\n        x: An object to be converted (numpy array, list, tensors).\n        dtype: The destination type.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.convert_to_tensor(x, dtype=dtype)",
                "def is_sparse(tensor):\n    \"\"\"Returns whether a tensor is a sparse tensor.\n\n    # Arguments\n        tensor: A tensor instance.\n\n    # Returns\n        A boolean.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> a = K.placeholder((2, 2), sparse=False)\n        >>> print(K.is_sparse(a))\n        False\n        >>> b = K.placeholder((2, 2), sparse=True)\n        >>> print(K.is_sparse(b))\n        True\n    ```\n    \"\"\"\n    return isinstance(tensor, tf.SparseTensor)",
                "def to_dense(tensor):\n    \"\"\"Converts a sparse tensor into a dense tensor and returns it.\n\n    # Arguments\n        tensor: A tensor instance (potentially sparse).\n\n    # Returns\n        A dense tensor.\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> b = K.placeholder((2, 2), sparse=True)\n        >>> print(K.is_sparse(b))\n        True\n        >>> c = K.to_dense(b)\n        >>> print(K.is_sparse(c))\n        False\n    ```\n    \"\"\"\n    if is_sparse(tensor):\n        return tf.sparse_tensor_to_dense(tensor)\n    else:\n        return tensor",
                "def variable(value, dtype=None, name=None, constraint=None):\n    \"\"\"Instantiates a variable and returns it.\n\n    # Arguments\n        value: Numpy array, initial value of the tensor.\n        dtype: Tensor type.\n        name: Optional name string for the tensor.\n        constraint: Optional projection function to be\n            applied to the variable after an optimizer update.\n\n    # Returns\n        A variable instance (with Keras metadata included).\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> val = np.array([[1, 2], [3, 4]])\n        >>> kvar = K.variable(value=val, dtype='float64', name='example_var')\n        >>> K.dtype(kvar)\n        'float64'\n        >>> print(kvar)\n        example_var\n        >>> K.eval(kvar)\n        array([[ 1.,  2.],\n               [ 3.,  4.]])\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if hasattr(value, 'tocoo'):\n        sparse_coo = value.tocoo()\n        indices = np.concatenate((np.expand_dims(sparse_coo.row, 1),\n                                  np.expand_dims(sparse_coo.col, 1)), 1)\n        v = tf.SparseTensor(indices=indices,\n                            values=sparse_coo.data,\n                            dense_shape=sparse_coo.shape)\n        v._keras_shape = sparse_coo.shape\n        v._uses_learning_phase = False\n        return v\n    v = tf.Variable(value, dtype=tf.as_dtype(dtype), name=name)\n    if isinstance(value, np.ndarray):\n        v._keras_shape = value.shape\n    elif hasattr(value, 'get_shape'):\n        v._keras_shape = int_shape(value)\n    v._uses_learning_phase = False\n    # TODO: move to Variable constructor when supported in public release.\n    try:\n        v.constraint = constraint\n    except AttributeError:\n        v._constraint = constraint\n    return v",
                "def constant(value, dtype=None, shape=None, name=None):\n    \"\"\"Creates a constant tensor.\n\n    # Arguments\n        value: A constant value (or list)\n        dtype: The type of the elements of the resulting tensor.\n        shape: Optional dimensions of resulting tensor.\n        name: Optional name for the tensor.\n\n    # Returns\n        A Constant Tensor.\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    return tf.constant(value, dtype=dtype, shape=shape, name=name)",
                "def is_keras_tensor(x):\n    \"\"\"Returns whether `x` is a Keras tensor.\n\n    A \"Keras tensor\" is a tensor that was returned by a Keras layer,\n    (`Layer` class) or by `Input`.\n\n    # Arguments\n        x: A candidate tensor.\n\n    # Returns\n        A boolean: Whether the argument is a Keras tensor.\n\n    # Raises\n        ValueError: In case `x` is not a symbolic tensor.\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> from keras.layers import Input, Dense\n        >>> np_var = numpy.array([1, 2])\n        >>> K.is_keras_tensor(np_var) # A numpy array is not a symbolic tensor.\n        ValueError\n        >>> k_var = tf.placeholder('float32', shape=(1,1))\n        >>> K.is_keras_tensor(k_var) # A variable indirectly created outside of keras is not a Keras tensor.\n        False\n        >>> keras_var = K.variable(np_var)\n        >>> K.is_keras_tensor(keras_var)  # A variable created with the keras backend is not a Keras tensor.\n        False\n        >>> keras_placeholder = K.placeholder(shape=(2, 4, 5))\n        >>> K.is_keras_tensor(keras_placeholder)  # A placeholder is not a Keras tensor.\n        False\n        >>> keras_input = Input([10])\n        >>> K.is_keras_tensor(keras_input) # An Input is a Keras tensor.\n        True\n        >>> keras_layer_output = Dense(10)(keras_input)\n        >>> K.is_keras_tensor(keras_layer_output) # Any Keras layer output is a Keras tensor.\n        True\n    ```\n    \"\"\"\n    if not is_tensor(x):\n        raise ValueError('Unexpectedly found an instance of type `' +\n                         str(type(x)) + '`. '\n                         'Expected a symbolic tensor instance.')\n    return hasattr(x, '_keras_history')",
                "def is_tensor(x):\n    return isinstance(x, tf_ops._TensorLike) or tf_ops.is_dense_tensor_like(x)",
                "def placeholder(shape=None, ndim=None, dtype=None, sparse=False, name=None):\n    \"\"\"Instantiates a placeholder tensor and returns it.\n\n    # Arguments\n        shape: Shape of the placeholder\n            (integer tuple, may include `None` entries).\n        ndim: Number of axes of the tensor.\n            At least one of {`shape`, `ndim`} must be specified.\n            If both are specified, `shape` is used.\n        dtype: Placeholder type.\n        sparse: Boolean, whether the placeholder should have a sparse type.\n        name: Optional name string for the placeholder.\n\n    # Returns\n        Tensor instance (with Keras metadata included).\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> input_ph = K.placeholder(shape=(2, 4, 5))\n        >>> input_ph._keras_shape\n        (2, 4, 5)\n        >>> input_ph\n        <tf.Tensor 'Placeholder_4:0' shape=(2, 4, 5) dtype=float32>\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if not shape:\n        if ndim:\n            shape = tuple([None for _ in range(ndim)])\n    if sparse:\n        x = tf.sparse_placeholder(dtype, shape=shape, name=name)\n    else:\n        x = tf.placeholder(dtype, shape=shape, name=name)\n    x._keras_shape = shape\n    x._uses_learning_phase = False\n    return x",
                "def is_placeholder(x):\n    \"\"\"Returns whether `x` is a placeholder.\n\n    # Arguments\n        x: A candidate placeholder.\n\n    # Returns\n        Boolean.\n    \"\"\"\n    try:\n        return x.op.type == 'Placeholder'\n    except AttributeError:\n        return False",
                "def shape(x):\n    \"\"\"Returns the symbolic shape of a tensor or variable.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A symbolic shape (which is itself a tensor).\n\n    # Examples\n    ```python\n        # TensorFlow example\n        >>> from keras import backend as K\n        >>> tf_session = K.get_session()\n        >>> val = np.array([[1, 2], [3, 4]])\n        >>> kvar = K.variable(value=val)\n        >>> inputs = keras.backend.placeholder(shape=(2, 4, 5))\n        >>> K.shape(kvar)\n        <tf.Tensor 'Shape_8:0' shape=(2,) dtype=int32>\n        >>> K.shape(inputs)\n        <tf.Tensor 'Shape_9:0' shape=(3,) dtype=int32>\n        # To get integer shape (Instead, you can use K.int_shape(x))\n        >>> K.shape(kvar).eval(session=tf_session)\n        array([2, 2], dtype=int32)\n        >>> K.shape(inputs).eval(session=tf_session)\n        array([2, 4, 5], dtype=int32)\n    ```\n    \"\"\"\n    return tf.shape(x)",
                "def int_shape(x):\n    \"\"\"Returns the shape of tensor or variable as a tuple of int or None entries.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tuple of integers (or None entries).\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> inputs = K.placeholder(shape=(2, 4, 5))\n        >>> K.int_shape(inputs)\n        (2, 4, 5)\n        >>> val = np.array([[1, 2], [3, 4]])\n        >>> kvar = K.variable(value=val)\n        >>> K.int_shape(kvar)\n        (2, 2)\n    ```\n    \"\"\"\n    if hasattr(x, '_keras_shape'):\n        return x._keras_shape\n    try:\n        return tuple(x.get_shape().as_list())\n    except ValueError:\n        return None",
                "def ndim(x):\n    \"\"\"Returns the number of axes in a tensor, as an integer.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        Integer (scalar), number of axes.\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> inputs = K.placeholder(shape=(2, 4, 5))\n        >>> val = np.array([[1, 2], [3, 4]])\n        >>> kvar = K.variable(value=val)\n        >>> K.ndim(inputs)\n        3\n        >>> K.ndim(kvar)\n        2\n    ```\n    \"\"\"\n    dims = x.get_shape()._dims\n    if dims is not None:\n        return len(dims)\n    return None",
                "def dtype(x):\n    \"\"\"Returns the dtype of a Keras tensor or variable, as a string.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        String, dtype of `x`.\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> K.dtype(K.placeholder(shape=(2,4,5)))\n        'float32'\n        >>> K.dtype(K.placeholder(shape=(2,4,5), dtype='float32'))\n        'float32'\n        >>> K.dtype(K.placeholder(shape=(2,4,5), dtype='float64'))\n        'float64'\n        # Keras variable\n        >>> kvar = K.variable(np.array([[1, 2], [3, 4]]))\n        >>> K.dtype(kvar)\n        'float32_ref'\n        >>> kvar = K.variable(np.array([[1, 2], [3, 4]]), dtype='float32')\n        >>> K.dtype(kvar)\n        'float32_ref'\n    ```\n    \"\"\"\n    return x.dtype.base_dtype.name",
                "def eval(x):\n    \"\"\"Evaluates the value of a variable.\n\n    # Arguments\n        x: A variable.\n\n    # Returns\n        A Numpy array.\n\n    # Examples\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.variable(np.array([[1, 2], [3, 4]]), dtype='float32')\n        >>> K.eval(kvar)\n        array([[ 1.,  2.],\n               [ 3.,  4.]], dtype=float32)\n    ```\n    \"\"\"\n    return to_dense(x).eval(session=get_session())",
                "def zeros(shape, dtype=None, name=None):\n    \"\"\"Instantiates an all-zeros variable and returns it.\n\n    # Arguments\n        shape: Tuple of integers, shape of returned Keras variable\n        dtype: String, data type of returned Keras variable\n        name: String, name of returned Keras variable\n\n    # Returns\n        A variable (including Keras metadata), filled with `0.0`.\n        Note that if `shape` was symbolic, we cannot return a variable,\n        and will return a dynamically-shaped tensor instead.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.zeros((3,4))\n        >>> K.eval(kvar)\n        array([[ 0.,  0.,  0.,  0.],\n               [ 0.,  0.,  0.,  0.],\n               [ 0.,  0.,  0.,  0.]], dtype=float32)\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    tf_dtype = tf.as_dtype(dtype)\n    v = tf.zeros(shape=shape, dtype=tf_dtype, name=name)\n    if py_all(v.get_shape().as_list()):\n        return variable(v, dtype=dtype, name=name)\n    return v",
                "def ones(shape, dtype=None, name=None):\n    \"\"\"Instantiates an all-ones variable and returns it.\n\n    # Arguments\n        shape: Tuple of integers, shape of returned Keras variable.\n        dtype: String, data type of returned Keras variable.\n        name: String, name of returned Keras variable.\n\n    # Returns\n        A Keras variable, filled with `1.0`.\n        Note that if `shape` was symbolic, we cannot return a variable,\n        and will return a dynamically-shaped tensor instead.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.ones((3,4))\n        >>> K.eval(kvar)\n        array([[ 1.,  1.,  1.,  1.],\n               [ 1.,  1.,  1.,  1.],\n               [ 1.,  1.,  1.,  1.]], dtype=float32)\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    tf_dtype = tf.as_dtype(dtype)\n    v = tf.ones(shape=shape, dtype=tf_dtype, name=name)\n    if py_all(v.get_shape().as_list()):\n        return variable(v, dtype=dtype, name=name)\n    return v",
                "def eye(size, dtype=None, name=None):\n    \"\"\"Instantiate an identity matrix and returns it.\n\n    # Arguments\n        size: Integer, number of rows/columns.\n        dtype: String, data type of returned Keras variable.\n        name: String, name of returned Keras variable.\n\n    # Returns\n        A Keras variable, an identity matrix.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.eye(3)\n        >>> K.eval(kvar)\n        array([[ 1.,  0.,  0.],\n               [ 0.,  1.,  0.],\n               [ 0.,  0.,  1.]], dtype=float32)\n    ```\n\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    tf_dtype = tf.as_dtype(dtype)\n    return variable(tf.eye(size, dtype=tf_dtype), dtype, name)",
                "def zeros_like(x, dtype=None, name=None):\n    \"\"\"Instantiates an all-zeros variable of the same shape as another tensor.\n\n    # Arguments\n        x: Keras variable or Keras tensor.\n        dtype: String, dtype of returned Keras variable.\n             None uses the dtype of x.\n        name: String, name for the variable to create.\n\n    # Returns\n        A Keras variable with the shape of x filled with zeros.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.variable(np.random.random((2,3)))\n        >>> kvar_zeros = K.zeros_like(kvar)\n        >>> K.eval(kvar_zeros)\n        array([[ 0.,  0.,  0.],\n               [ 0.,  0.,  0.]], dtype=float32)\n    ```\n    \"\"\"\n    return tf.zeros_like(x, dtype=dtype, name=name)",
                "def ones_like(x, dtype=None, name=None):\n    \"\"\"Instantiates an all-ones variable of the same shape as another tensor.\n\n    # Arguments\n        x: Keras variable or tensor.\n        dtype: String, dtype of returned Keras variable.\n             None uses the dtype of x.\n        name: String, name for the variable to create.\n\n    # Returns\n        A Keras variable with the shape of x filled with ones.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> kvar = K.variable(np.random.random((2,3)))\n        >>> kvar_ones = K.ones_like(kvar)\n        >>> K.eval(kvar_ones)\n        array([[ 1.,  1.,  1.],\n               [ 1.,  1.,  1.]], dtype=float32)\n    ```\n    \"\"\"\n    return tf.ones_like(x, dtype=dtype, name=name)",
                "def identity(x, name=None):\n    \"\"\"Returns a tensor with the same content as the input tensor.\n\n    # Arguments\n        x: The input tensor.\n        name: String, name for the variable to create.\n\n    # Returns\n        A tensor of the same shape, type and content.\n    \"\"\"\n    return tf.identity(x, name)",
                "def random_uniform_variable(shape, low, high, dtype=None,\n                            name=None, seed=None):\n    \"\"\"Instantiates a variable with values drawn from a uniform distribution.\n\n    # Arguments\n        shape: Tuple of integers, shape of returned Keras variable.\n        low: Float, lower boundary of the output interval.\n        high: Float, upper boundary of the output interval.\n        dtype: String, dtype of returned Keras variable.\n        name: String, name of returned Keras variable.\n        seed: Integer, random seed.\n\n    # Returns\n        A Keras variable, filled with drawn samples.\n\n    # Example\n    ```python\n        # TensorFlow example\n        >>> kvar = K.random_uniform_variable((2,3), 0, 1)\n        >>> kvar\n        <tensorflow.python.ops.variables.Variable object at 0x10ab40b10>\n        >>> K.eval(kvar)\n        array([[ 0.10940075,  0.10047495,  0.476143  ],\n               [ 0.66137183,  0.00869417,  0.89220798]], dtype=float32)\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    tf_dtype = tf.as_dtype(dtype)\n    if seed is None:\n        # ensure that randomness is conditioned by the Numpy RNG\n        seed = np.random.randint(10e8)\n    value = tf.random_uniform_initializer(\n        low, high, dtype=tf_dtype, seed=seed)(shape)\n    return variable(value, dtype=dtype, name=name)",
                "def random_normal_variable(shape, mean, scale, dtype=None,\n                           name=None, seed=None):\n    \"\"\"Instantiates a variable with values drawn from a normal distribution.\n\n    # Arguments\n        shape: Tuple of integers, shape of returned Keras variable.\n        mean: Float, mean of the normal distribution.\n        scale: Float, standard deviation of the normal distribution.\n        dtype: String, dtype of returned Keras variable.\n        name: String, name of returned Keras variable.\n        seed: Integer, random seed.\n\n    # Returns\n        A Keras variable, filled with drawn samples.\n\n    # Example\n    ```python\n        # TensorFlow example\n        >>> kvar = K.random_normal_variable((2,3), 0, 1)\n        >>> kvar\n        <tensorflow.python.ops.variables.Variable object at 0x10ab12dd0>\n        >>> K.eval(kvar)\n        array([[ 1.19591331,  0.68685907, -0.63814116],\n               [ 0.92629528,  0.28055015,  1.70484698]], dtype=float32)\n    ```\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    tf_dtype = tf.as_dtype(dtype)\n    if seed is None:\n        # ensure that randomness is conditioned by the Numpy RNG\n        seed = np.random.randint(10e8)\n    value = tf.random_normal_initializer(\n        mean, scale, dtype=tf_dtype, seed=seed)(shape)\n    return variable(value, dtype=dtype, name=name)",
                "def count_params(x):\n    \"\"\"Returns the static number of elements in a Keras variable or tensor.\n\n    # Arguments\n        x: Keras variable or tensor.\n\n    # Returns\n        Integer, the number of elements in `x`, i.e., the product of the\n        array's static dimensions.\n\n    # Example\n    ```python\n        >>> kvar = K.zeros((2,3))\n        >>> K.count_params(kvar)\n        6\n        >>> K.eval(kvar)\n        array([[ 0.,  0.,  0.],\n               [ 0.,  0.,  0.]], dtype=float32)\n    ```\n    \"\"\"\n    return np.prod(int_shape(x))",
                "def cast(x, dtype):\n    \"\"\"Casts a tensor to a different dtype and returns it.\n\n    You can cast a Keras variable but it still returns a Keras tensor.\n\n    # Arguments\n        x: Keras tensor (or variable).\n        dtype: String, either (`'float16'`, `'float32'`, or `'float64'`).\n\n    # Returns\n        Keras tensor with dtype `dtype`.\n\n    # Example\n    ```python\n        >>> from keras import backend as K\n        >>> input = K.placeholder((2, 3), dtype='float32')\n        >>> input\n        <tf.Tensor 'Placeholder_2:0' shape=(2, 3) dtype=float32>\n        # It doesn't work in-place as below.\n        >>> K.cast(input, dtype='float16')\n        <tf.Tensor 'Cast_1:0' shape=(2, 3) dtype=float16>\n        >>> input\n        <tf.Tensor 'Placeholder_2:0' shape=(2, 3) dtype=float32>\n        # you need to assign it.\n        >>> input = K.cast(input, dtype='float16')\n        >>> input\n        <tf.Tensor 'Cast_2:0' shape=(2, 3) dtype=float16>\n    ```\n    \"\"\"\n    return tf.cast(x, dtype)",
                "def update(x, new_x):\n    \"\"\"Update the value of `x` to `new_x`.\n\n    # Arguments\n        x: A `Variable`.\n        new_x: A tensor of same shape as `x`.\n\n    # Returns\n        The variable `x` updated.\n    \"\"\"\n    return tf.assign(x, new_x)",
                "def update_add(x, increment):\n    \"\"\"Update the value of `x` by adding `increment`.\n\n    # Arguments\n        x: A `Variable`.\n        increment: A tensor of same shape as `x`.\n\n    # Returns\n        The variable `x` updated.\n    \"\"\"\n    return tf.assign_add(x, increment)",
                "def update_sub(x, decrement):\n    \"\"\"Update the value of `x` by subtracting `decrement`.\n\n    # Arguments\n        x: A `Variable`.\n        decrement: A tensor of same shape as `x`.\n\n    # Returns\n        The variable `x` updated.\n    \"\"\"\n    return tf.assign_sub(x, decrement)",
                "def moving_average_update(x, value, momentum):\n    \"\"\"Compute the moving average of a variable.\n\n    # Arguments\n        x: A `Variable`.\n        value: A tensor with the same shape as `x`.\n        momentum: The moving average momentum.\n\n    # Returns\n        An operation to update the variable.\n    \"\"\"\n    return moving_averages.assign_moving_average(\n        x, value, momentum, zero_debias=True)",
                "def dot(x, y):\n    \"\"\"Multiplies 2 tensors (and/or variables) and returns a *tensor*.\n\n    When attempting to multiply a nD tensor\n    with a nD tensor, it reproduces the Theano behavior.\n    (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`)\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A tensor, dot product of `x` and `y`.\n\n    # Examples\n    ```python\n        # dot product between tensors\n        >>> x = K.placeholder(shape=(2, 3))\n        >>> y = K.placeholder(shape=(3, 4))\n        >>> xy = K.dot(x, y)\n        >>> xy\n        <tf.Tensor 'MatMul_9:0' shape=(2, 4) dtype=float32>\n    ```\n\n    ```python\n        # dot product between tensors\n        >>> x = K.placeholder(shape=(32, 28, 3))\n        >>> y = K.placeholder(shape=(3, 4))\n        >>> xy = K.dot(x, y)\n        >>> xy\n        <tf.Tensor 'MatMul_9:0' shape=(32, 28, 4) dtype=float32>\n    ```\n\n    ```python\n        # Theano-like behavior example\n        >>> x = K.random_uniform_variable(shape=(2, 3), low=0, high=1)\n        >>> y = K.ones((4, 3, 5))\n        >>> xy = K.dot(x, y)\n        >>> K.int_shape(xy)\n        (2, 4, 5)\n    ```\n    \"\"\"\n    if ndim(x) is not None and (ndim(x) > 2 or ndim(y) > 2):\n        x_shape = []\n        for i, s in zip(int_shape(x), tf.unstack(tf.shape(x))):\n            if i is not None:\n                x_shape.append(i)\n            else:\n                x_shape.append(s)\n        x_shape = tuple(x_shape)\n        y_shape = []\n        for i, s in zip(int_shape(y), tf.unstack(tf.shape(y))):\n            if i is not None:\n                y_shape.append(i)\n            else:\n                y_shape.append(s)\n        y_shape = tuple(y_shape)\n        y_permute_dim = list(range(ndim(y)))\n        y_permute_dim = [y_permute_dim.pop(-2)] + y_permute_dim\n        xt = tf.reshape(x, [-1, x_shape[-1]])\n        yt = tf.reshape(tf.transpose(y, perm=y_permute_dim), [y_shape[-2], -1])\n        return tf.reshape(tf.matmul(xt, yt),\n                          x_shape[:-1] + y_shape[:-2] + y_shape[-1:])\n    if is_sparse(x):\n        out = tf.sparse_tensor_dense_matmul(x, y)\n    else:\n        out = tf.matmul(x, y)\n    return out",
                "def batch_dot(x, y, axes=None):\n    \"\"\"Batchwise dot product.\n\n    `batch_dot` is used to compute dot product of `x` and `y` when\n    `x` and `y` are data in batch, i.e. in a shape of\n    `(batch_size, :)`.\n    `batch_dot` results in a tensor or variable with less dimensions\n    than the input. If the number of dimensions is reduced to 1,\n    we use `expand_dims` to make sure that ndim is at least 2.\n\n    # Arguments\n        x: Keras tensor or variable with `ndim >= 2`.\n        y: Keras tensor or variable with `ndim >= 2`.\n        axes: list of (or single) int with target dimensions.\n            The lengths of `axes[0]` and `axes[1]` should be the same.\n\n    # Returns\n        A tensor with shape equal to the concatenation of `x`'s shape\n        (less the dimension that was summed over) and `y`'s shape\n        (less the batch dimension and the dimension that was summed over).\n        If the final rank is 1, we reshape it to `(batch_size, 1)`.\n\n    # Examples\n        Assume `x = [[1, 2], [3, 4]]` and `y = [[5, 6], [7, 8]]`\n        `batch_dot(x, y, axes=1) = [[17], [53]]` which is the main diagonal\n        of `x.dot(y.T)`, although we never have to calculate the off-diagonal\n        elements.\n\n        Shape inference:\n        Let `x`'s shape be `(100, 20)` and `y`'s shape be `(100, 30, 20)`.\n        If `axes` is (1, 2), to find the output shape of resultant tensor,\n            loop through each dimension in `x`'s shape and `y`'s shape:\n\n        * `x.shape[0]` : 100 : append to output shape\n        * `x.shape[1]` : 20 : do not append to output shape,\n            dimension 1 of `x` has been summed over. (`dot_axes[0]` = 1)\n        * `y.shape[0]` : 100 : do not append to output shape,\n            always ignore first dimension of `y`\n        * `y.shape[1]` : 30 : append to output shape\n        * `y.shape[2]` : 20 : do not append to output shape,\n            dimension 2 of `y` has been summed over. (`dot_axes[1]` = 2)\n        `output_shape` = `(100, 30)`\n\n    ```python\n        >>> x_batch = K.ones(shape=(32, 20, 1))\n        >>> y_batch = K.ones(shape=(32, 30, 20))\n        >>> xy_batch_dot = K.batch_dot(x_batch, y_batch, axes=[1, 2])\n        >>> K.int_shape(xy_batch_dot)\n        (32, 1, 30)\n    ```\n    \"\"\"\n    if isinstance(axes, int):\n        axes = (axes, axes)\n    x_ndim = ndim(x)\n    y_ndim = ndim(y)\n    if axes is None:\n        # behaves like tf.batch_matmul as default\n        axes = [x_ndim - 1, y_ndim - 2]\n    if py_any([isinstance(a, (list, tuple)) for a in axes]):\n        raise ValueError('Multiple target dimensions are not supported. ' +\n                         'Expected: None, int, (int, int), ' +\n                         'Provided: ' + str(axes))\n    if x_ndim > y_ndim:\n        diff = x_ndim - y_ndim\n        y = tf.reshape(y, tf.concat([tf.shape(y), [1] * (diff)], axis=0))\n    elif y_ndim > x_ndim:\n        diff = y_ndim - x_ndim\n        x = tf.reshape(x, tf.concat([tf.shape(x), [1] * (diff)], axis=0))\n    else:\n        diff = 0\n    if ndim(x) == 2 and ndim(y) == 2:\n        if axes[0] == axes[1]:\n            out = tf.reduce_sum(tf.multiply(x, y), axes[0])\n        else:\n            out = tf.reduce_sum(tf.multiply(tf.transpose(x, [1, 0]), y), axes[1])\n    else:\n        if axes is not None:\n            adj_x = None if axes[0] == ndim(x) - 1 else True\n            adj_y = True if axes[1] == ndim(y) - 1 else None\n        else:\n            adj_x = None\n            adj_y = None\n        out = tf.matmul(x, y, adjoint_a=adj_x, adjoint_b=adj_y)\n    if diff:\n        if x_ndim > y_ndim:\n            idx = x_ndim + y_ndim - 3\n        else:\n            idx = x_ndim - 1\n        out = tf.squeeze(out, list(range(idx, idx + diff)))\n    if ndim(out) == 1:\n        out = expand_dims(out, 1)\n    return out",
                "def transpose(x):\n    \"\"\"Transposes a tensor and returns it.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n\n    # Examples\n    ```python\n        >>> var = K.variable([[1, 2, 3], [4, 5, 6]])\n        >>> K.eval(var)\n        array([[ 1.,  2.,  3.],\n               [ 4.,  5.,  6.]], dtype=float32)\n        >>> var_transposed = K.transpose(var)\n        >>> K.eval(var_transposed)\n        array([[ 1.,  4.],\n               [ 2.,  5.],\n               [ 3.,  6.]], dtype=float32)\n    ```\n\n    ```python\n        >>> inputs = K.placeholder((2, 3))\n        >>> inputs\n        <tf.Tensor 'Placeholder_11:0' shape=(2, 3) dtype=float32>\n        >>> input_transposed = K.transpose(inputs)\n        >>> input_transposed\n        <tf.Tensor 'transpose_4:0' shape=(3, 2) dtype=float32>\n\n    ```\n    \"\"\"\n    return tf.transpose(x)",
                "def gather(reference, indices):\n    \"\"\"Retrieves the elements of indices `indices` in the tensor `reference`.\n\n    # Arguments\n        reference: A tensor.\n        indices: An integer tensor of indices.\n\n    # Returns\n        A tensor of same type as `reference`.\n    \"\"\"\n    return tf.nn.embedding_lookup(reference, indices)",
                "def max(x, axis=None, keepdims=False):\n    \"\"\"Maximum value in a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to find maximum values.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with maximum values of `x`.\n    \"\"\"\n    return tf.reduce_max(x, axis, keepdims)",
                "def min(x, axis=None, keepdims=False):\n    \"\"\"Minimum value in a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to find minimum values.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with miminum values of `x`.\n    \"\"\"\n    return tf.reduce_min(x, axis, keepdims)",
                "def sum(x, axis=None, keepdims=False):\n    \"\"\"Sum of the values in a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to sum over.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with sum of `x`.\n    \"\"\"\n    return tf.reduce_sum(x, axis, keepdims)",
                "def prod(x, axis=None, keepdims=False):\n    \"\"\"Multiplies the values in a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to compute the product.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with the product of elements of `x`.\n    \"\"\"\n    return tf.reduce_prod(x, axis, keepdims)",
                "def cumsum(x, axis=0):\n    \"\"\"Cumulative sum of the values in a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to compute the sum.\n\n    # Returns\n        A tensor of the cumulative sum of values of `x` along `axis`.\n    \"\"\"\n    return tf.cumsum(x, axis=axis)",
                "def cumprod(x, axis=0):\n    \"\"\"Cumulative product of the values in a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to compute the product.\n\n    # Returns\n        A tensor of the cumulative product of values of `x` along `axis`.\n    \"\"\"\n    return tf.cumprod(x, axis=axis)",
                "def var(x, axis=None, keepdims=False):\n    \"\"\"Variance of a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to compute the variance.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with the variance of elements of `x`.\n    \"\"\"\n    if x.dtype.base_dtype == tf.bool:\n        x = tf.cast(x, floatx())\n    m = tf.reduce_mean(x, axis, True)\n    devs_squared = tf.square(x - m)\n    return tf.reduce_mean(devs_squared,\n                          axis,\n                          keepdims)",
                "def std(x, axis=None, keepdims=False):\n    \"\"\"Standard deviation of a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to compute the standard deviation.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`,\n            the reduced dimension is retained with length 1.\n\n    # Returns\n        A tensor with the standard deviation of elements of `x`.\n    \"\"\"\n    return tf.sqrt(var(x, axis=axis, keepdims=keepdims))",
                "def mean(x, axis=None, keepdims=False):\n    \"\"\"Mean of a tensor, alongside the specified axis.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: A list of integer. Axes to compute the mean.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1 for each entry in `axis`. If `keepdims` is `True`,\n            the reduced dimensions are retained with length 1.\n\n    # Returns\n        A tensor with the mean of elements of `x`.\n    \"\"\"\n    if x.dtype.base_dtype == tf.bool:\n        x = tf.cast(x, floatx())\n    return tf.reduce_mean(x, axis, keepdims)",
                "def any(x, axis=None, keepdims=False):\n    \"\"\"Bitwise reduction (logical OR).\n\n    # Arguments\n        x: Tensor or variable.\n        axis: axis along which to perform the reduction.\n        keepdims: whether the drop or broadcast the reduction axes.\n\n    # Returns\n        A uint8 tensor (0s and 1s).\n    \"\"\"\n    x = tf.cast(x, tf.bool)\n    return tf.reduce_any(x, axis, keepdims)",
                "def all(x, axis=None, keepdims=False):\n    \"\"\"Bitwise reduction (logical AND).\n\n    # Arguments\n        x: Tensor or variable.\n        axis: axis along which to perform the reduction.\n        keepdims: whether the drop or broadcast the reduction axes.\n\n    # Returns\n        A uint8 tensor (0s and 1s).\n    \"\"\"\n    x = tf.cast(x, tf.bool)\n    return tf.reduce_all(x, axis, keepdims)",
                "def argmax(x, axis=-1):\n    \"\"\"Returns the index of the maximum value along an axis.\n\n    # Arguments\n        x: Tensor or variable.\n        axis: axis along which to perform the reduction.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.argmax(x, axis)",
                "def argmin(x, axis=-1):\n    \"\"\"Returns the index of the minimum value along an axis.\n\n    # Arguments\n        x: Tensor or variable.\n        axis: axis along which to perform the reduction.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.argmin(x, axis)",
                "def square(x):\n    \"\"\"Element-wise square.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.square(x)",
                "def abs(x):\n    \"\"\"Element-wise absolute value.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.abs(x)",
                "def sqrt(x):\n    \"\"\"Element-wise square root.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    zero = _to_tensor(0., x.dtype.base_dtype)\n    inf = _to_tensor(np.inf, x.dtype.base_dtype)\n    x = tf.clip_by_value(x, zero, inf)\n    return tf.sqrt(x)",
                "def exp(x):\n    \"\"\"Element-wise exponential.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.exp(x)",
                "def log(x):\n    \"\"\"Element-wise log.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.log(x)",
                "def logsumexp(x, axis=None, keepdims=False):\n    \"\"\"Computes log(sum(exp(elements across dimensions of a tensor))).\n\n    This function is more numerically stable than log(sum(exp(x))).\n    It avoids overflows caused by taking the exp of large inputs and\n    underflows caused by taking the log of small inputs.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: An integer, the axis to reduce over.\n        keepdims: A boolean, whether to keep the dimensions or not.\n            If `keepdims` is `False`, the rank of the tensor is reduced\n            by 1. If `keepdims` is `True`, the reduced dimension is\n            retained with length 1.\n\n    # Returns\n        The reduced tensor.\n    \"\"\"\n    return tf.reduce_logsumexp(x, axis, keepdims)",
                "def round(x):\n    \"\"\"Element-wise rounding to the closest integer.\n\n    In case of tie, the rounding mode used is \"half to even\".\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.round(x)",
                "def sign(x):\n    \"\"\"Element-wise sign.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.sign(x)",
                "def pow(x, a):\n    \"\"\"Element-wise exponentiation.\n\n    # Arguments\n        x: Tensor or variable.\n        a: Python integer.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.pow(x, a)",
                "def clip(x, min_value, max_value):\n    \"\"\"Element-wise value clipping.\n\n    # Arguments\n        x: Tensor or variable.\n        min_value: Python float or integer.\n        max_value: Python float or integer.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if max_value is not None and max_value < min_value:\n        max_value = min_value\n    if max_value is None:\n        max_value = np.inf\n    min_value = _to_tensor(min_value, x.dtype.base_dtype)\n    max_value = _to_tensor(max_value, x.dtype.base_dtype)\n    return tf.clip_by_value(x, min_value, max_value)",
                "def equal(x, y):\n    \"\"\"Element-wise equality between two tensors.\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.equal(x, y)",
                "def not_equal(x, y):\n    \"\"\"Element-wise inequality between two tensors.\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.not_equal(x, y)",
                "def greater(x, y):\n    \"\"\"Element-wise truth value of (x > y).\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.greater(x, y)",
                "def greater_equal(x, y):\n    \"\"\"Element-wise truth value of (x >= y).\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.greater_equal(x, y)",
                "def less(x, y):\n    \"\"\"Element-wise truth value of (x < y).\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.less(x, y)",
                "def less_equal(x, y):\n    \"\"\"Element-wise truth value of (x <= y).\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A bool tensor.\n    \"\"\"\n    return tf.less_equal(x, y)",
                "def maximum(x, y):\n    \"\"\"Element-wise maximum of two tensors.\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.maximum(x, y)",
                "def minimum(x, y):\n    \"\"\"Element-wise minimum of two tensors.\n\n    # Arguments\n        x: Tensor or variable.\n        y: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.minimum(x, y)",
                "def sin(x):\n    \"\"\"Computes sin of x element-wise.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.sin(x)",
                "def cos(x):\n    \"\"\"Computes cos of x element-wise.\n\n    # Arguments\n        x: Tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.cos(x)",
                "def _regular_normalize_batch_in_training(x, gamma, beta,\n                                         reduction_axes, epsilon=1e-3):\n    \"\"\"Non-fused version of `normalize_batch_in_training`.\n\n    # Arguments\n        x: Input tensor or variable.\n        gamma: Tensor by which to scale the input.\n        beta: Tensor with which to center the input.\n        reduction_axes: iterable of integers,\n            axes over which to normalize.\n        epsilon: Fuzz factor.\n\n    # Returns\n        A tuple length of 3, `(normalized_tensor, mean, variance)`.\n    \"\"\"\n    mean, var = tf.nn.moments(x, reduction_axes,\n                              None, None, False)\n    normed = tf.nn.batch_normalization(x, mean, var,\n                                       beta, gamma,\n                                       epsilon)\n    return normed, mean, var",
                "def _broadcast_normalize_batch_in_training(x, gamma, beta,\n                                           reduction_axes, epsilon=1e-3):\n    \"\"\"Non-fused, broadcast version of `normalize_batch_in_training`.\n\n    # Arguments\n        x: Input tensor or variable.\n        gamma: Tensor by which to scale the input.\n        beta: Tensor with which to center the input.\n        reduction_axes: iterable of integers,\n            axes over which to normalize.\n        epsilon: Fuzz factor.\n\n    # Returns\n        A tuple length of 3, `(normalized_tensor, mean, variance)`.\n    \"\"\"\n    mean, var = tf.nn.moments(x, reduction_axes,\n                              None, None, False)\n    target_shape = []\n    for axis in range(ndim(x)):\n        if axis in reduction_axes:\n            target_shape.append(1)\n        else:\n            target_shape.append(tf.shape(x)[axis])\n    target_shape = tf.stack(target_shape)\n\n    broadcast_mean = tf.reshape(mean, target_shape)\n    broadcast_var = tf.reshape(var, target_shape)\n    if gamma is None:\n        broadcast_gamma = None\n    else:\n        broadcast_gamma = tf.reshape(gamma, target_shape)\n    if beta is None:\n        broadcast_beta = None\n    else:\n        broadcast_beta = tf.reshape(beta, target_shape)\n\n    normed = tf.nn.batch_normalization(\n        x,\n        broadcast_mean,\n        broadcast_var,\n        broadcast_beta,\n        broadcast_gamma,\n        epsilon)\n    return normed, mean, var",
                "def _fused_normalize_batch_in_training(x, gamma, beta, reduction_axes,\n                                       epsilon=1e-3):\n    \"\"\"Fused version of `normalize_batch_in_training`.\n\n    # Arguments\n        x: Input tensor or variable.\n        gamma: Tensor by which to scale the input.\n        beta: Tensor with which to center the input.\n        reduction_axes: iterable of integers,\n            axes over which to normalize.\n        epsilon: Fuzz factor.\n\n    # Returns\n        A tuple length of 3, `(normalized_tensor, mean, variance)`.\n    \"\"\"\n    if list(reduction_axes) == [0, 1, 2]:\n        normalization_axis = 3\n        tf_data_format = 'NHWC'\n    else:\n        normalization_axis = 1\n        tf_data_format = 'NCHW'\n\n    if gamma is None:\n        gamma = tf.constant(1.0,\n                            dtype=x.dtype,\n                            shape=[x.get_shape()[normalization_axis]])\n    if beta is None:\n        beta = tf.constant(0.0,\n                           dtype=x.dtype,\n                           shape=[x.get_shape()[normalization_axis]])\n\n    return tf.nn.fused_batch_norm(\n        x,\n        gamma,\n        beta,\n        epsilon=epsilon,\n        data_format=tf_data_format)",
                "def normalize_batch_in_training(x, gamma, beta,\n                                reduction_axes, epsilon=1e-3):\n    \"\"\"Computes mean and std for batch then apply batch_normalization on batch.\n\n    # Arguments\n        x: Input tensor or variable.\n        gamma: Tensor by which to scale the input.\n        beta: Tensor with which to center the input.\n        reduction_axes: iterable of integers,\n            axes over which to normalize.\n        epsilon: Fuzz factor.\n\n    # Returns\n        A tuple length of 3, `(normalized_tensor, mean, variance)`.\n    \"\"\"\n    if ndim(x) == 4 and list(reduction_axes) in [[0, 1, 2], [0, 2, 3]]:\n        if not _has_nchw_support() and list(reduction_axes) == [0, 2, 3]:\n            return _broadcast_normalize_batch_in_training(x, gamma, beta,\n                                                          reduction_axes,\n                                                          epsilon=epsilon)\n        return _fused_normalize_batch_in_training(\n            x, gamma, beta, reduction_axes,\n            epsilon=epsilon)\n    else:\n        if sorted(reduction_axes) == list(range(ndim(x)))[:-1]:\n            return _regular_normalize_batch_in_training(x, gamma, beta,\n                                                        reduction_axes,\n                                                        epsilon=epsilon)\n        else:\n            return _broadcast_normalize_batch_in_training(x, gamma, beta,\n                                                          reduction_axes,\n                                                          epsilon=epsilon)",
                "def batch_normalization(x, mean, var, beta, gamma, axis=-1, epsilon=1e-3):\n    \"\"\"Applies batch normalization on x given mean, var, beta and gamma.\n\n    I.e. returns:\n    `output = (x - mean) / sqrt(var + epsilon) * gamma + beta`\n\n    # Arguments\n        x: Input tensor or variable.\n        mean: Mean of batch.\n        var: Variance of batch.\n        beta: Tensor with which to center the input.\n        gamma: Tensor by which to scale the input.\n        axis: Integer, the axis that should be normalized.\n            (typically the features axis).\n        epsilon: Fuzz factor.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if ndim(x) == 4:\n        # The CPU implementation of FusedBatchNorm only support NHWC\n        if axis == 1 or axis == -3:\n            tf_data_format = 'NCHW'\n        elif axis == 3 or axis == -1:\n            tf_data_format = 'NHWC'\n        else:\n            tf_data_format = None\n\n        if tf_data_format == 'NHWC' or tf_data_format == 'NCHW' and _has_nchw_support():\n            # The mean / var / beta / gamma may be processed by broadcast\n            # so it may have extra axes with 1, it is not needed and should be removed\n            if ndim(mean) > 1:\n                mean = tf.squeeze(mean)\n            if ndim(var) > 1:\n                var = tf.squeeze(var)\n            if beta is None:\n                beta = zeros_like(mean)\n            elif ndim(beta) > 1:\n                beta = tf.squeeze(beta)\n            if gamma is None:\n                gamma = ones_like(mean)\n            elif ndim(gamma) > 1:\n                gamma = tf.squeeze(gamma)\n            y, _, _ = tf.nn.fused_batch_norm(\n                x,\n                gamma,\n                beta,\n                epsilon=epsilon,\n                mean=mean,\n                variance=var,\n                data_format=tf_data_format,\n                is_training=False\n            )\n            return y\n    # default\n    return tf.nn.batch_normalization(x, mean, var, beta, gamma, epsilon)",
                "def concatenate(tensors, axis=-1):\n    \"\"\"Concatenates a list of tensors alongside the specified axis.\n\n    # Arguments\n        tensors: list of tensors to concatenate.\n        axis: concatenation axis.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if axis < 0:\n        rank = ndim(tensors[0])\n        if rank:\n            axis %= rank\n        else:\n            axis = 0\n\n    if py_all([is_sparse(x) for x in tensors]):\n        return tf.sparse_concat(axis, tensors)\n    else:\n        return tf.concat([to_dense(x) for x in tensors], axis)",
                "def reshape(x, shape):\n    \"\"\"Reshapes a tensor to the specified shape.\n\n    # Arguments\n        x: Tensor or variable.\n        shape: Target shape tuple.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.reshape(x, shape)",
                "def permute_dimensions(x, pattern):\n    \"\"\"Permutes axes in a tensor.\n\n    # Arguments\n        x: Tensor or variable.\n        pattern: A tuple of\n            dimension indices, e.g. `(0, 2, 1)`.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.transpose(x, perm=pattern)",
                "def resize_images(x,\n                  height_factor,\n                  width_factor,\n                  data_format,\n                  interpolation='nearest'):\n    \"\"\"Resizes the images contained in a 4D tensor.\n\n    # Arguments\n        x: Tensor or variable to resize.\n        height_factor: Positive integer.\n        width_factor: Positive integer.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        interpolation: A string, one of `nearest` or `bilinear`.\n\n    # Returns\n        A tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n    \"\"\"\n    if data_format == 'channels_first':\n        rows, cols = 2, 3\n    else:\n        rows, cols = 1, 2\n\n    original_shape = int_shape(x)\n    new_shape = tf.shape(x)[rows:cols + 1]\n    new_shape *= tf.constant(np.array([height_factor, width_factor], dtype='int32'))\n\n    if data_format == 'channels_first':\n        x = permute_dimensions(x, [0, 2, 3, 1])\n    if interpolation == 'nearest':\n        x = tf.image.resize_nearest_neighbor(x, new_shape)\n    elif interpolation == 'bilinear':\n        x = tf.image.resize_bilinear(x, new_shape)\n    else:\n        raise ValueError('interpolation should be one '\n                         'of \"nearest\" or \"bilinear\".')\n    if data_format == 'channels_first':\n        x = permute_dimensions(x, [0, 3, 1, 2])\n\n    if original_shape[rows] is None:\n        new_height = None\n    else:\n        new_height = original_shape[rows] * height_factor\n\n    if original_shape[cols] is None:\n        new_width = None\n    else:\n        new_width = original_shape[cols] * width_factor\n\n    output_shape = (None, new_height, new_width, None)\n    x.set_shape(transpose_shape(output_shape, data_format, spatial_axes=(1, 2)))\n    return x",
                "def resize_volumes(x, depth_factor, height_factor, width_factor, data_format):\n    \"\"\"Resizes the volume contained in a 5D tensor.\n\n    # Arguments\n        x: Tensor or variable to resize.\n        depth_factor: Positive integer.\n        height_factor: Positive integer.\n        width_factor: Positive integer.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n    \"\"\"\n    if data_format == 'channels_first':\n        output = repeat_elements(x, depth_factor, axis=2)\n        output = repeat_elements(output, height_factor, axis=3)\n        output = repeat_elements(output, width_factor, axis=4)\n        return output\n    elif data_format == 'channels_last':\n        output = repeat_elements(x, depth_factor, axis=1)\n        output = repeat_elements(output, height_factor, axis=2)\n        output = repeat_elements(output, width_factor, axis=3)\n        return output\n    else:\n        raise ValueError('Unknown data_format: ' + str(data_format))",
                "def repeat_elements(x, rep, axis):\n    \"\"\"Repeats the elements of a tensor along an axis, like `np.repeat`.\n\n    If `x` has shape `(s1, s2, s3)` and `axis` is `1`, the output\n    will have shape `(s1, s2 * rep, s3)`.\n\n    # Arguments\n        x: Tensor or variable.\n        rep: Python integer, number of times to repeat.\n        axis: Axis along which to repeat.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    x_shape = x.get_shape().as_list()\n    # For static axis\n    if x_shape[axis] is not None:\n        # slices along the repeat axis\n        splits = tf.split(value=x, num_or_size_splits=x_shape[axis], axis=axis)\n        # repeat each slice the given number of reps\n        x_rep = [s for s in splits for _ in range(rep)]\n        return concatenate(x_rep, axis)\n\n    # Here we use tf.tile to mimic behavior of np.repeat so that\n    # we can handle dynamic shapes (that include None).\n    # To do that, we need an auxiliary axis to repeat elements along\n    # it and then merge them along the desired axis.\n\n    # Repeating\n    auxiliary_axis = axis + 1\n    x_shape = tf.shape(x)\n    x_rep = tf.expand_dims(x, axis=auxiliary_axis)\n    reps = np.ones(len(x.get_shape()) + 1)\n    reps[auxiliary_axis] = rep\n    x_rep = tf.tile(x_rep, reps)\n\n    # Merging\n    reps = np.delete(reps, auxiliary_axis)\n    reps[axis] = rep\n    reps = tf.constant(reps, dtype='int32')\n    x_shape = x_shape * reps\n    x_rep = tf.reshape(x_rep, x_shape)\n\n    # Fix shape representation\n    x_shape = x.get_shape().as_list()\n    x_rep.set_shape(x_shape)\n    x_rep._keras_shape = tuple(x_shape)\n    return x_rep",
                "def repeat(x, n):\n    \"\"\"Repeats a 2D tensor.\n\n    if `x` has shape (samples, dim) and `n` is `2`,\n    the output will have shape `(samples, 2, dim)`.\n\n    # Arguments\n        x: Tensor or variable.\n        n: Python integer, number of times to repeat.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    assert ndim(x) == 2\n    x = tf.expand_dims(x, 1)\n    pattern = tf.stack([1, n, 1])\n    return tf.tile(x, pattern)",
                "def arange(start, stop=None, step=1, dtype='int32'):\n    \"\"\"Creates a 1D tensor containing a sequence of integers.\n\n    The function arguments use the same convention as\n    Theano's arange: if only one argument is provided,\n    it is in fact the \"stop\" argument and \"start\" is 0.\n\n    The default type of the returned tensor is `'int32'` to\n    match TensorFlow's default.\n\n    # Arguments\n        start: Start value.\n        stop: Stop value.\n        step: Difference between two successive values.\n        dtype: Integer dtype to use.\n\n    # Returns\n        An integer tensor.\n\n    \"\"\"\n    # Match the behavior of numpy and Theano by returning an empty sequence.\n    if stop is None:\n        try:\n            if start < 0:\n                start = 0\n        except TypeError:\n            # Handle case where start is a tensor\n            start = tf.cond(start < 0,\n                            true_fn=lambda: tf.constant(0, dtype=start.dtype),\n                            false_fn=lambda: start)\n\n    result = tf.range(start, limit=stop, delta=step, name='arange')\n    if dtype != 'int32':\n        result = cast(result, dtype)\n    return result",
                "def tile(x, n):\n    \"\"\"Creates a tensor by tiling `x` by `n`.\n\n    # Arguments\n        x: A tensor or variable\n        n: A list of integer. The length must be the same as the number of\n            dimensions in `x`.\n\n    # Returns\n        A tiled tensor.\n    \"\"\"\n    if isinstance(n, int):\n        n = [n]\n    return tf.tile(x, n)",
                "def flatten(x):\n    \"\"\"Flatten a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor, reshaped into 1-D\n    \"\"\"\n    return tf.reshape(x, [-1])",
                "def batch_flatten(x):\n    \"\"\"Turn a nD tensor into a 2D tensor with same 0th dimension.\n\n    In other words, it flattens each data samples of a batch.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    x = tf.reshape(x, tf.stack([-1, prod(shape(x)[1:])]))\n    return x",
                "def expand_dims(x, axis=-1):\n    \"\"\"Adds a 1-sized dimension at index \"axis\".\n\n    # Arguments\n        x: A tensor or variable.\n        axis: Position where to add a new axis.\n\n    # Returns\n        A tensor with expanded dimensions.\n    \"\"\"\n    return tf.expand_dims(x, axis)",
                "def squeeze(x, axis):\n    \"\"\"Removes a 1-dimension from the tensor at index \"axis\".\n\n    # Arguments\n        x: A tensor or variable.\n        axis: Axis to drop.\n\n    # Returns\n        A tensor with the same data as `x` but reduced dimensions.\n    \"\"\"\n    return tf.squeeze(x, [axis])",
                "def temporal_padding(x, padding=(1, 1)):\n    \"\"\"Pads the middle dimension of a 3D tensor.\n\n    # Arguments\n        x: Tensor or variable.\n        padding: Tuple of 2 integers, how many zeros to\n            add at the start and end of dim 1.\n\n    # Returns\n        A padded 3D tensor.\n    \"\"\"\n    assert len(padding) == 2\n    pattern = [[0, 0], [padding[0], padding[1]], [0, 0]]\n    return tf.pad(x, pattern)",
                "def spatial_2d_padding(x, padding=((1, 1), (1, 1)), data_format=None):\n    \"\"\"Pads the 2nd and 3rd dimensions of a 4D tensor.\n\n    # Arguments\n        x: Tensor or variable.\n        padding: Tuple of 2 tuples, padding pattern.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A padded 4D tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n    \"\"\"\n    assert len(padding) == 2\n    assert len(padding[0]) == 2\n    assert len(padding[1]) == 2\n    data_format = normalize_data_format(data_format)\n\n    pattern = [[0, 0],\n               list(padding[0]),\n               list(padding[1]),\n               [0, 0]]\n    pattern = transpose_shape(pattern, data_format, spatial_axes=(1, 2))\n    return tf.pad(x, pattern)",
                "def spatial_3d_padding(x, padding=((1, 1), (1, 1), (1, 1)), data_format=None):\n    \"\"\"Pads 5D tensor with zeros along the depth, height, width dimensions.\n\n    Pads these dimensions with respectively\n    \"padding[0]\", \"padding[1]\" and \"padding[2]\" zeros left and right.\n\n    For 'channels_last' data_format,\n    the 2nd, 3rd and 4th dimension will be padded.\n    For 'channels_first' data_format,\n    the 3rd, 4th and 5th dimension will be padded.\n\n    # Arguments\n        x: Tensor or variable.\n        padding: Tuple of 3 tuples, padding pattern.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A padded 5D tensor.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n\n    \"\"\"\n    assert len(padding) == 3\n    assert len(padding[0]) == 2\n    assert len(padding[1]) == 2\n    assert len(padding[2]) == 2\n    data_format = normalize_data_format(data_format)\n\n    pattern = [\n        [0, 0],\n        [padding[0][0], padding[0][1]],\n        [padding[1][0], padding[1][1]],\n        [padding[2][0], padding[2][1]],\n        [0, 0]\n    ]\n    pattern = transpose_shape(pattern, data_format, spatial_axes=(1, 2, 3))\n\n    return tf.pad(x, pattern)",
                "def stack(x, axis=0):\n    \"\"\"Stacks a list of rank `R` tensors into a rank `R+1` tensor.\n\n    # Arguments\n        x: List of tensors.\n        axis: Axis along which to perform stacking.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.stack(x, axis=axis)",
                "def one_hot(indices, num_classes):\n    \"\"\"Computes the one-hot representation of an integer tensor.\n\n    # Arguments\n        indices: nD integer tensor of shape\n            `(batch_size, dim1, dim2, ... dim(n-1))`\n        num_classes: Integer, number of classes to consider.\n\n    # Returns\n        (n + 1)D one hot representation of the input\n        with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n    \"\"\"\n    return tf.one_hot(indices, depth=num_classes, axis=-1)",
                "def reverse(x, axes):\n    \"\"\"Reverses a tensor along the specified axes.\n\n    # Arguments\n        x: Tensor to reverse.\n        axes: Integer or iterable of integers.\n            Axes to reverse.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if isinstance(axes, int):\n        axes = [axes]\n    return tf.reverse(x, axes)",
                "def slice(x, start, size):\n    \"\"\"Extracts a slice from a tensor.\n\n    # Arguments\n        x: Input tensor.\n        start: Integer list/tuple or tensor\n            indicating the start indices of the slice\n            along each axis.\n        size: Integer list/tuple or tensor\n            indicating how many dimensions to slice\n            along each axis.\n\n    # Returns\n        Tensor `x[start[0]: start[0] + size[0],\n                  ...,\n                  start[-1]: start[-1] + size[-1]]`\n    \"\"\"\n    return tf.slice(x, start, size)",
                "def get_value(x):\n    \"\"\"Returns the value of a variable.\n\n    # Arguments\n        x: input variable.\n\n    # Returns\n        A Numpy array.\n    \"\"\"\n    return x.eval(session=get_session())",
                "def batch_get_value(ops):\n    \"\"\"Returns the value of more than one tensor variable.\n\n    # Arguments\n        ops: list of ops to run.\n\n    # Returns\n        A list of Numpy arrays.\n    \"\"\"\n    if ops:\n        return get_session().run(ops)\n    else:\n        return []",
                "def set_value(x, value):\n    \"\"\"Sets the value of a variable, from a Numpy array.\n\n    # Arguments\n        x: Tensor to set to a new value.\n        value: Value to set the tensor to, as a Numpy array\n            (of the same shape).\n    \"\"\"\n    value = np.asarray(value, dtype=dtype(x))\n    tf_dtype = tf.as_dtype(x.dtype.name.split('_')[0])\n    if hasattr(x, '_assign_placeholder'):\n        assign_placeholder = x._assign_placeholder\n        assign_op = x._assign_op\n    else:\n        assign_placeholder = tf.placeholder(tf_dtype, shape=value.shape)\n        assign_op = x.assign(assign_placeholder)\n        x._assign_placeholder = assign_placeholder\n        x._assign_op = assign_op\n    get_session().run(assign_op, feed_dict={assign_placeholder: value})",
                "def batch_set_value(tuples):\n    \"\"\"Sets the values of many tensor variables at once.\n\n    # Arguments\n        tuples: a list of tuples `(tensor, value)`.\n            `value` should be a Numpy array.\n    \"\"\"\n    if tuples:\n        assign_ops = []\n        feed_dict = {}\n        for x, value in tuples:\n            value = np.asarray(value, dtype=dtype(x))\n            tf_dtype = tf.as_dtype(x.dtype.name.split('_')[0])\n            if hasattr(x, '_assign_placeholder'):\n                assign_placeholder = x._assign_placeholder\n                assign_op = x._assign_op\n            else:\n                assign_placeholder = tf.placeholder(tf_dtype,\n                                                    shape=value.shape)\n                assign_op = x.assign(assign_placeholder)\n                x._assign_placeholder = assign_placeholder\n                x._assign_op = assign_op\n            assign_ops.append(assign_op)\n            feed_dict[assign_placeholder] = value\n        get_session().run(assign_ops, feed_dict=feed_dict)",
                "def get_variable_shape(x):\n    \"\"\"Returns the shape of a variable.\n\n    # Arguments\n        x: A variable.\n\n    # Returns\n        A tuple of integers.\n    \"\"\"\n    return int_shape(x)",
                "def print_tensor(x, message=''):\n    \"\"\"Prints `message` and the tensor value when evaluated.\n\n     Note that `print_tensor` returns a new tensor identical to `x`\n     which should be used in the following code. Otherwise the\n     print operation is not taken into account during evaluation.\n\n     # Example\n     ```python\n         >>> x = K.print_tensor(x, message=\"x is: \")\n     ```\n\n    # Arguments\n        x: Tensor to print.\n        message: Message to print jointly with the tensor.\n\n    # Returns\n        The same tensor `x`, unchanged.\n    \"\"\"\n    return tf.Print(x, [x], message)",
                "def function(inputs, outputs, updates=None, **kwargs):\n    \"\"\"Instantiates a Keras function.\n\n    # Arguments\n        inputs: List of placeholder tensors.\n        outputs: List of output tensors.\n        updates: List of update ops.\n        **kwargs: Passed to `tf.Session.run`.\n\n    # Returns\n        Output values as Numpy arrays.\n\n    # Raises\n        ValueError: if invalid kwargs are passed in.\n    \"\"\"\n    if kwargs:\n        for key in kwargs:\n            if not (has_arg(tf.Session.run, key, True) or has_arg(Function.__init__, key, True)):\n                msg = 'Invalid argument \"%s\" passed to K.function with TensorFlow backend' % key\n                raise ValueError(msg)\n    return Function(inputs, outputs, updates=updates, **kwargs)",
                "def gradients(loss, variables):\n    \"\"\"Returns the gradients of `loss` w.r.t. `variables`.\n\n    # Arguments\n        loss: Scalar tensor to minimize.\n        variables: List of variables.\n\n    # Returns\n        A gradients tensor.\n    \"\"\"\n    return tf.gradients(loss, variables, colocate_gradients_with_ops=True)",
                "def stop_gradient(variables):\n    \"\"\"Returns `variables` but with zero gradient w.r.t. every other variable.\n\n    # Arguments\n        variables: tensor or list of tensors to consider constant with respect\n            to any other variable.\n\n    # Returns\n        A single tensor or a list of tensors (depending on the passed argument)\n            that has constant gradient with respect to any other variable.\n    \"\"\"\n    if isinstance(variables, (list, tuple)):\n        return map(tf.stop_gradient, variables)\n    else:\n        return tf.stop_gradient(variables)",
                "def rnn(step_function, inputs, initial_states,\n        go_backwards=False, mask=None, constants=None,\n        unroll=False, input_length=None):\n    \"\"\"Iterates over the time dimension of a tensor.\n\n    # Arguments\n        step_function:\n            Parameters:\n                inputs: Tensor with shape (samples, ...) (no time dimension),\n                    representing input for the batch of samples at a certain\n                    time step.\n                states: List of tensors.\n            Returns:\n                outputs: Tensor with shape (samples, ...) (no time dimension),\n                new_states: List of tensors, same length and shapes\n                    as 'states'.\n        inputs: Tensor of temporal data of shape (samples, time, ...)\n            (at least 3D).\n        initial_states: Tensor with shape (samples, ...) (no time dimension),\n            containing the initial values for the states used in\n            the step function.\n        go_backwards: Boolean. If True, do the iteration over the time\n            dimension in reverse order and return the reversed sequence.\n        mask: Binary tensor with shape (samples, time),\n            with a zero for every element that is masked.\n        constants: A list of constant values passed at each step.\n        unroll: Whether to unroll the RNN or to use a symbolic loop\n            (`while_loop` or `scan` depending on backend).\n        input_length: Static number of timesteps in the input.\n\n    # Returns\n        A tuple, `(last_output, outputs, new_states)`.\n\n        last_output: The latest output of the rnn, of shape `(samples, ...)`\n        outputs: Tensor with shape `(samples, time, ...)` where each\n            entry `outputs[s, t]` is the output of the step function\n            at time `t` for sample `s`.\n        new_states: List of tensors, latest states returned by\n            the step function, of shape `(samples, ...)`.\n\n    # Raises\n        ValueError: If input dimension is less than 3.\n        ValueError: If `unroll` is `True`\n            but input timestep is not a fixed number.\n        ValueError: If `mask` is provided (not `None`)\n            but states is not provided (`len(states)` == 0).\n    \"\"\"\n    ndim = len(inputs.get_shape())\n    if ndim < 3:\n        raise ValueError('Input should be at least 3D.')\n\n    # Transpose to time-major, i.e.\n    # from (batch, time, ...) to (time, batch, ...)\n    axes = [1, 0] + list(range(2, ndim))\n    inputs = tf.transpose(inputs, (axes))\n\n    if mask is not None:\n        if mask.dtype != tf.bool:\n            mask = tf.cast(mask, tf.bool)\n        if len(mask.get_shape()) == ndim - 1:\n            mask = expand_dims(mask)\n        mask = tf.transpose(mask, axes)\n\n    if constants is None:\n        constants = []\n\n    global uses_learning_phase\n    uses_learning_phase = False\n\n    if unroll:\n        if not inputs.get_shape()[0]:\n            raise ValueError('Unrolling requires a '\n                             'fixed number of timesteps.')\n        states = initial_states\n        successive_states = []\n        successive_outputs = []\n\n        input_list = tf.unstack(inputs)\n        if go_backwards:\n            input_list.reverse()\n\n        if mask is not None:\n            mask_list = tf.unstack(mask)\n            if go_backwards:\n                mask_list.reverse()\n\n            for inp, mask_t in zip(input_list, mask_list):\n                output, new_states = step_function(inp, states + constants)\n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n\n                # tf.where needs its condition tensor\n                # to be the same shape as its two\n                # result tensors, but in our case\n                # the condition (mask) tensor is\n                # (nsamples, 1), and A and B are (nsamples, ndimensions).\n                # So we need to\n                # broadcast the mask to match the shape of A and B.\n                # That's what the tile call does,\n                # it just repeats the mask along its second dimension\n                # n times.\n                tiled_mask_t = tf.tile(mask_t,\n                                       tf.stack([1, tf.shape(output)[1]]))\n\n                if not successive_outputs:\n                    prev_output = zeros_like(output)\n                else:\n                    prev_output = successive_outputs[-1]\n\n                output = tf.where(tiled_mask_t, output, prev_output)\n\n                return_states = []\n                for state, new_state in zip(states, new_states):\n                    # (see earlier comment for tile explanation)\n                    tiled_mask_t = tf.tile(mask_t,\n                                           tf.stack([1, tf.shape(new_state)[1]]))\n                    return_states.append(tf.where(tiled_mask_t,\n                                                  new_state,\n                                                  state))\n                states = return_states\n                successive_outputs.append(output)\n                successive_states.append(states)\n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs)\n        else:\n            for inp in input_list:\n                output, states = step_function(inp, states + constants)\n                if getattr(output, '_uses_learning_phase', False):\n                    uses_learning_phase = True\n                successive_outputs.append(output)\n                successive_states.append(states)\n            last_output = successive_outputs[-1]\n            new_states = successive_states[-1]\n            outputs = tf.stack(successive_outputs)\n\n    else:\n        if go_backwards:\n            inputs = reverse(inputs, 0)\n\n        states = tuple(initial_states)\n\n        time_steps = tf.shape(inputs)[0]\n        outputs, _ = step_function(inputs[0], initial_states + constants)\n        output_ta = tensor_array_ops.TensorArray(\n            dtype=outputs.dtype,\n            size=time_steps,\n            tensor_array_name='output_ta')\n        input_ta = tensor_array_ops.TensorArray(\n            dtype=inputs.dtype,\n            size=time_steps,\n            tensor_array_name='input_ta')\n        input_ta = input_ta.unstack(inputs)\n        time = tf.constant(0, dtype='int32', name='time')\n\n        if mask is not None:\n            if not states:\n                raise ValueError('No initial states provided! '\n                                 'When using masking in an RNN, you should '\n                                 'provide initial states '\n                                 '(and your step function should return '\n                                 'as its first state at time `t` '\n                                 'the output at time `t-1`).')\n            if go_backwards:\n                mask = reverse(mask, 0)\n\n            mask_ta = tensor_array_ops.TensorArray(\n                dtype=tf.bool,\n                size=time_steps,\n                tensor_array_name='mask_ta')\n            mask_ta = mask_ta.unstack(mask)\n\n            def _step(time, output_ta_t, *states):\n                \"\"\"RNN step function.\n\n                # Arguments\n                    time: Current timestep value.\n                    output_ta_t: TensorArray.\n                    *states: List of states.\n\n                # Returns\n                    Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n                \"\"\"\n                current_input = input_ta.read(time)\n                mask_t = mask_ta.read(time)\n                output, new_states = step_function(current_input,\n                                                   tuple(states) +\n                                                   tuple(constants))\n                if getattr(output, '_uses_learning_phase', False):\n                    global uses_learning_phase\n                    uses_learning_phase = True\n                for state, new_state in zip(states, new_states):\n                    new_state.set_shape(state.get_shape())\n                tiled_mask_t = tf.tile(mask_t,\n                                       tf.stack([1, tf.shape(output)[1]]))\n                output = tf.where(tiled_mask_t, output, states[0])\n                new_states = [\n                    tf.where(tf.tile(mask_t, tf.stack([1, tf.shape(new_states[i])[1]])),\n                             new_states[i], states[i]) for i in range(len(states))\n                ]\n                output_ta_t = output_ta_t.write(time, output)\n                return (time + 1, output_ta_t) + tuple(new_states)\n        else:\n            def _step(time, output_ta_t, *states):\n                \"\"\"RNN step function.\n\n                # Arguments\n                    time: Current timestep value.\n                    output_ta_t: TensorArray.\n                    *states: List of states.\n\n                # Returns\n                    Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n                \"\"\"\n                current_input = input_ta.read(time)\n                output, new_states = step_function(current_input,\n                                                   tuple(states) +\n                                                   tuple(constants))\n                if getattr(output, '_uses_learning_phase', False):\n                    global uses_learning_phase\n                    uses_learning_phase = True\n                for state, new_state in zip(states, new_states):\n                    new_state.set_shape(state.get_shape())\n                output_ta_t = output_ta_t.write(time, output)\n                return (time + 1, output_ta_t) + tuple(new_states)\n\n        final_outputs = control_flow_ops.while_loop(\n            cond=lambda time, *_: time < time_steps,\n            body=_step,\n            loop_vars=(time, output_ta) + states,\n            parallel_iterations=32,\n            swap_memory=True,\n            maximum_iterations=input_length)\n        last_time = final_outputs[0]\n        output_ta = final_outputs[1]\n        new_states = final_outputs[2:]\n\n        outputs = output_ta.stack()\n        last_output = output_ta.read(last_time - 1)\n\n    axes = [1, 0] + list(range(2, len(outputs.get_shape())))\n    outputs = tf.transpose(outputs, axes)\n    last_output._uses_learning_phase = uses_learning_phase\n    return last_output, outputs, new_states",
                "def switch(condition, then_expression, else_expression):\n    \"\"\"Switches between two operations depending on a scalar value.\n\n    Note that both `then_expression` and `else_expression`\n    should be symbolic tensors of the *same shape*.\n\n    # Arguments\n        condition: tensor (`int` or `bool`).\n        then_expression: either a tensor, or a callable that returns a tensor.\n        else_expression: either a tensor, or a callable that returns a tensor.\n\n    # Returns\n        The selected tensor.\n\n    # Raises\n        ValueError: If rank of `condition` is greater than rank of expressions.\n    \"\"\"\n    if condition.dtype != tf.bool:\n        condition = tf.cast(condition, 'bool')\n    cond_ndim = ndim(condition)\n    if not cond_ndim:\n        if not callable(then_expression):\n            def then_expression_fn():\n                return then_expression\n        else:\n            then_expression_fn = then_expression\n        if not callable(else_expression):\n            def else_expression_fn():\n                return else_expression\n        else:\n            else_expression_fn = else_expression\n        x = tf.cond(condition,\n                    then_expression_fn,\n                    else_expression_fn)\n    else:\n        # tf.where needs its condition tensor\n        # to be the same shape as its two\n        # result tensors\n        if callable(then_expression):\n            then_expression = then_expression()\n        if callable(else_expression):\n            else_expression = else_expression()\n        expr_ndim = ndim(then_expression)\n        if cond_ndim > expr_ndim:\n            raise ValueError('Rank of `condition` should be less than or'\n                             ' equal to rank of `then_expression` and '\n                             '`else_expression`. ndim(condition)=' +\n                             str(cond_ndim) + ', ndim(then_expression)'\n                             '=' + str(expr_ndim))\n        if cond_ndim > 1:\n            ndim_diff = expr_ndim - cond_ndim\n            cond_shape = tf.concat([tf.shape(condition), [1] * ndim_diff], axis=0)\n            condition = tf.reshape(condition, cond_shape)\n            expr_shape = tf.shape(then_expression)\n            shape_diff = expr_shape - cond_shape\n            tile_shape = tf.where(shape_diff > 0, expr_shape, tf.ones_like(expr_shape))\n            condition = tf.tile(condition, tile_shape)\n        x = tf.where(condition, then_expression, else_expression)\n    return x",
                "def in_train_phase(x, alt, training=None):\n    \"\"\"Selects `x` in train phase, and `alt` otherwise.\n\n    Note that `alt` should have the *same shape* as `x`.\n\n    # Arguments\n        x: What to return in train phase\n            (tensor or callable that returns a tensor).\n        alt: What to return otherwise\n            (tensor or callable that returns a tensor).\n        training: Optional scalar tensor\n            (or Python boolean, or Python integer)\n            specifying the learning phase.\n\n    # Returns\n        Either `x` or `alt` based on the `training` flag.\n        the `training` flag defaults to `K.learning_phase()`.\n    \"\"\"\n    if training is None:\n        training = learning_phase()\n        uses_learning_phase = True\n    else:\n        uses_learning_phase = False\n\n    if training is 1 or training is True:\n        if callable(x):\n            return x()\n        else:\n            return x\n\n    elif training is 0 or training is False:\n        if callable(alt):\n            return alt()\n        else:\n            return alt\n\n    # else: assume learning phase is a placeholder tensor.\n    x = switch(training, x, alt)\n    if uses_learning_phase:\n        x._uses_learning_phase = True\n    return x",
                "def in_test_phase(x, alt, training=None):\n    \"\"\"Selects `x` in test phase, and `alt` otherwise.\n\n    Note that `alt` should have the *same shape* as `x`.\n\n    # Arguments\n        x: What to return in test phase\n            (tensor or callable that returns a tensor).\n        alt: What to return otherwise\n            (tensor or callable that returns a tensor).\n        training: Optional scalar tensor\n            (or Python boolean, or Python integer)\n            specifying the learning phase.\n\n    # Returns\n        Either `x` or `alt` based on `K.learning_phase`.\n    \"\"\"\n    return in_train_phase(alt, x, training=training)",
                "def relu(x, alpha=0., max_value=None):\n    \"\"\"Rectified linear unit.\n\n    With default values, it returns element-wise `max(x, 0)`.\n\n    # Arguments\n        x: A tensor or variable.\n        alpha: A scalar, slope of negative section (default=`0.`).\n        max_value: Saturation threshold.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if alpha != 0.:\n        x = tf.nn.leaky_relu(x, alpha)\n    else:\n        x = tf.nn.relu(x)\n\n    if max_value is not None:\n        max_value = _to_tensor(max_value, x.dtype.base_dtype)\n        x = tf.minimum(x, max_value)\n    return x",
                "def elu(x, alpha=1.):\n    \"\"\"Exponential linear unit.\n\n    # Arguments\n        x: A tensor or variable to compute the activation function for.\n        alpha: A scalar, slope of negative section.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    res = tf.nn.elu(x)\n    if alpha == 1:\n        return res\n    else:\n        return tf.where(x > 0, res, alpha * res)",
                "def softmax(x, axis=-1):\n    \"\"\"Softmax of a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n        axis: The dimension softmax would be performed on.\n            The default is -1 which indicates the last dimension.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.softmax(x, axis=axis)",
                "def softplus(x):\n    \"\"\"Softplus of a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.softplus(x)",
                "def softsign(x):\n    \"\"\"Softsign of a tensor.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.softsign(x)",
                "def categorical_crossentropy(target, output, from_logits=False, axis=-1):\n    \"\"\"Categorical crossentropy between an output tensor and a target tensor.\n\n    # Arguments\n        target: A tensor of the same shape as `output`.\n        output: A tensor resulting from a softmax\n            (unless `from_logits` is True, in which\n            case `output` is expected to be the logits).\n        from_logits: Boolean, whether `output` is the\n            result of a softmax, or is a tensor of logits.\n        axis: Int specifying the channels axis. `axis=-1`\n            corresponds to data format `channels_last`,\n            and `axis=1` corresponds to data format\n            `channels_first`.\n\n    # Returns\n        Output tensor.\n\n    # Raises\n        ValueError: if `axis` is neither -1 nor one of\n            the axes of `output`.\n    \"\"\"\n    output_dimensions = list(range(len(output.get_shape())))\n    if axis != -1 and axis not in output_dimensions:\n        raise ValueError(\n            '{}{}{}'.format(\n                'Unexpected channels axis {}. '.format(axis),\n                'Expected to be -1 or one of the axes of `output`, ',\n                'which has {} dimensions.'.format(len(output.get_shape()))))\n    # Note: tf.nn.softmax_cross_entropy_with_logits\n    # expects logits, Keras expects probabilities.\n    if not from_logits:\n        # scale preds so that the class probas of each sample sum to 1\n        output /= tf.reduce_sum(output, axis, True)\n        # manual computation of crossentropy\n        _epsilon = _to_tensor(epsilon(), output.dtype.base_dtype)\n        output = tf.clip_by_value(output, _epsilon, 1. - _epsilon)\n        return - tf.reduce_sum(target * tf.log(output), axis)\n    else:\n        return tf.nn.softmax_cross_entropy_with_logits(labels=target,\n                                                       logits=output)",
                "def sparse_categorical_crossentropy(target, output, from_logits=False, axis=-1):\n    \"\"\"Categorical crossentropy with integer targets.\n\n    # Arguments\n        target: An integer tensor.\n        output: A tensor resulting from a softmax\n            (unless `from_logits` is True, in which\n            case `output` is expected to be the logits).\n        from_logits: Boolean, whether `output` is the\n            result of a softmax, or is a tensor of logits.\n        axis: Int specifying the channels axis. `axis=-1`\n            corresponds to data format `channels_last`,\n            and `axis=1` corresponds to data format\n            `channels_first`.\n\n    # Returns\n        Output tensor.\n\n    # Raises\n        ValueError: if `axis` is neither -1 nor one of\n            the axes of `output`.\n    \"\"\"\n    output_dimensions = list(range(len(output.get_shape())))\n    if axis != -1 and axis not in output_dimensions:\n        raise ValueError(\n            '{}{}{}'.format(\n                'Unexpected channels axis {}. '.format(axis),\n                'Expected to be -1 or one of the axes of `output`, ',\n                'which has {} dimensions.'.format(len(output.get_shape()))))\n    # If the channels are not in the last axis, move them to be there:\n    if axis != -1 and axis != output_dimensions[-1]:\n        permutation = output_dimensions[:axis] + output_dimensions[axis + 1:]\n        permutation += [axis]\n        output = tf.transpose(output, perm=permutation)\n\n    # Note: tf.nn.sparse_softmax_cross_entropy_with_logits\n    # expects logits, Keras expects probabilities.\n    if not from_logits:\n        _epsilon = _to_tensor(epsilon(), output.dtype.base_dtype)\n        output = tf.clip_by_value(output, _epsilon, 1 - _epsilon)\n        output = tf.log(output)\n\n    output_shape = output.get_shape()\n    targets = cast(flatten(target), 'int64')\n    logits = tf.reshape(output, [-1, int(output_shape[-1])])\n    res = tf.nn.sparse_softmax_cross_entropy_with_logits(\n        labels=targets,\n        logits=logits)\n    if len(output_shape) >= 3:\n        # if our output includes timestep dimension\n        # or spatial dimensions we need to reshape\n        return tf.reshape(res, tf.shape(output)[:-1])\n    else:\n        return res",
                "def binary_crossentropy(target, output, from_logits=False):\n    \"\"\"Binary crossentropy between an output tensor and a target tensor.\n\n    # Arguments\n        target: A tensor with the same shape as `output`.\n        output: A tensor.\n        from_logits: Whether `output` is expected to be a logits tensor.\n            By default, we consider that `output`\n            encodes a probability distribution.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    # Note: tf.nn.sigmoid_cross_entropy_with_logits\n    # expects logits, Keras expects probabilities.\n    if not from_logits:\n        # transform back to logits\n        _epsilon = _to_tensor(epsilon(), output.dtype.base_dtype)\n        output = tf.clip_by_value(output, _epsilon, 1 - _epsilon)\n        output = tf.log(output / (1 - output))\n\n    return tf.nn.sigmoid_cross_entropy_with_logits(labels=target,\n                                                   logits=output)",
                "def sigmoid(x):\n    \"\"\"Element-wise sigmoid.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.sigmoid(x)",
                "def hard_sigmoid(x):\n    \"\"\"Segment-wise linear approximation of sigmoid.\n\n    Faster than sigmoid.\n    Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n    In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    x = (0.2 * x) + 0.5\n    zero = _to_tensor(0., x.dtype.base_dtype)\n    one = _to_tensor(1., x.dtype.base_dtype)\n    x = tf.clip_by_value(x, zero, one)\n    return x",
                "def tanh(x):\n    \"\"\"Element-wise tanh.\n\n    # Arguments\n        x: A tensor or variable.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.tanh(x)",
                "def dropout(x, level, noise_shape=None, seed=None):\n    \"\"\"Sets entries in `x` to zero at random, while scaling the entire tensor.\n\n    # Arguments\n        x: tensor\n        level: fraction of the entries in the tensor\n            that will be set to 0.\n        noise_shape: shape for randomly generated keep/drop flags,\n            must be broadcastable to the shape of `x`\n        seed: random seed to ensure determinism.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    retain_prob = 1. - level\n    if seed is None:\n        seed = np.random.randint(10e6)\n    # the dummy 1. works around a TF bug\n    # (float32_ref vs. float32 incompatibility)\n    return tf.nn.dropout(x * 1., retain_prob, noise_shape, seed=seed)",
                "def l2_normalize(x, axis=None):\n    \"\"\"Normalizes a tensor wrt the L2 norm alongside the specified axis.\n\n    # Arguments\n        x: Tensor or variable.\n        axis: axis along which to perform normalization.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    return tf.nn.l2_normalize(x, axis=axis)",
                "def in_top_k(predictions, targets, k):\n    \"\"\"Returns whether the `targets` are in the top `k` `predictions`.\n\n    # Arguments\n        predictions: A tensor of shape `(batch_size, classes)` and type `float32`.\n        targets: A 1D tensor of length `batch_size` and type `int32` or `int64`.\n        k: An `int`, number of top elements to consider.\n\n    # Returns\n        A 1D tensor of length `batch_size` and type `bool`.\n        `output[i]` is `True` if `predictions[i, targets[i]]` is within top-`k`\n        values of `predictions[i]`.\n    \"\"\"\n    return tf.nn.in_top_k(predictions, targets, k)",
                "def _preprocess_conv1d_input(x, data_format):\n    \"\"\"Transpose and cast the input before the conv1d.\n\n    # Arguments\n        x: input tensor.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    # tensorflow doesn't support float64 for conv layer before 1.8.0\n    if (dtype(x) == 'float64' and\n            StrictVersion(tf.__version__.split('-')[0]) < StrictVersion('1.8.0')):\n        x = tf.cast(x, 'float32')\n    tf_data_format = 'NWC'  # to pass TF Conv2dNative operations\n    if data_format == 'channels_first':\n        if not _has_nchw_support():\n            x = tf.transpose(x, (0, 2, 1))  # NCW -> NWC\n        else:\n            tf_data_format = 'NCW'\n    return x, tf_data_format",
                "def _preprocess_conv2d_input(x, data_format, force_transpose=False):\n    \"\"\"Transpose and cast the input before the conv2d.\n\n    # Arguments\n        x: input tensor.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        force_transpose: boolean, whether force to transpose input from NCHW to NHWC\n                        if the `data_format` is `\"channels_first\"`.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    # tensorflow doesn't support float64 for conv layer before 1.8.0\n    if (dtype(x) == 'float64' and\n            StrictVersion(tf.__version__.split('-')[0]) < StrictVersion('1.8.0')):\n        x = tf.cast(x, 'float32')\n    tf_data_format = 'NHWC'\n    if data_format == 'channels_first':\n        if not _has_nchw_support() or force_transpose:\n            x = tf.transpose(x, (0, 2, 3, 1))  # NCHW -> NHWC\n        else:\n            tf_data_format = 'NCHW'\n    return x, tf_data_format",
                "def _preprocess_conv3d_input(x, data_format):\n    \"\"\"Transpose and cast the input before the conv3d.\n\n    # Arguments\n        x: input tensor.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    # tensorflow doesn't support float64 for conv layer before 1.8.0\n    if (dtype(x) == 'float64' and\n            StrictVersion(tf.__version__.split('-')[0]) < StrictVersion('1.8.0')):\n        x = tf.cast(x, 'float32')\n    tf_data_format = 'NDHWC'\n    if data_format == 'channels_first':\n        if not _has_nchw_support():\n            x = tf.transpose(x, (0, 2, 3, 4, 1))\n        else:\n            tf_data_format = 'NCDHW'\n    return x, tf_data_format",
                "def _preprocess_padding(padding):\n    \"\"\"Convert keras' padding to tensorflow's padding.\n\n    # Arguments\n        padding: string, `\"same\"` or `\"valid\"`.\n\n    # Returns\n        a string, `\"SAME\"` or `\"VALID\"`.\n\n    # Raises\n        ValueError: if `padding` is invalid.\n    \"\"\"\n    if padding == 'same':\n        padding = 'SAME'\n    elif padding == 'valid':\n        padding = 'VALID'\n    else:\n        raise ValueError('Invalid padding: ' + str(padding))\n    return padding",
                "def conv1d(x, kernel, strides=1, padding='valid',\n           data_format=None, dilation_rate=1):\n    \"\"\"1D convolution.\n\n    # Arguments\n        x: Tensor or variable.\n        kernel: kernel tensor.\n        strides: stride integer.\n        padding: string, `\"same\"`, `\"causal\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        dilation_rate: integer dilate rate.\n\n    # Returns\n        A tensor, result of 1D convolution.\n\n    # Raises\n        ValueError: If `data_format` is neither\n            `\"channels_last\"` nor `\"channels_first\"`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n\n    kernel_shape = kernel.get_shape().as_list()\n    if padding == 'causal':\n        if data_format != 'channels_last':\n            raise ValueError('When using causal padding in `conv1d`, '\n                             '`data_format` must be \"channels_last\" '\n                             '(temporal data).')\n        # causal (dilated) convolution:\n        left_pad = dilation_rate * (kernel_shape[0] - 1)\n        x = temporal_padding(x, (left_pad, 0))\n        padding = 'valid'\n    padding = _preprocess_padding(padding)\n    x, tf_data_format = _preprocess_conv1d_input(x, data_format)\n    x = tf.nn.convolution(\n        input=x,\n        filter=kernel,\n        dilation_rate=(dilation_rate,),\n        strides=(strides,),\n        padding=padding,\n        data_format=tf_data_format)\n\n    if data_format == 'channels_first' and tf_data_format == 'NWC':\n        x = tf.transpose(x, (0, 2, 1))  # NWC -> NCW\n    return x",
                "def conv2d(x, kernel, strides=(1, 1), padding='valid',\n           data_format=None, dilation_rate=(1, 1)):\n    \"\"\"2D convolution.\n\n    # Arguments\n        x: Tensor or variable.\n        kernel: kernel tensor.\n        strides: strides tuple.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n            Whether to use Theano or TensorFlow/CNTK data format\n            for inputs/kernels/outputs.\n        dilation_rate: tuple of 2 integers.\n\n    # Returns\n        A tensor, result of 2D convolution.\n\n    # Raises\n        ValueError: If `data_format` is neither\n            `\"channels_last\"` nor `\"channels_first\"`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n\n    x, tf_data_format = _preprocess_conv2d_input(x, data_format)\n\n    padding = _preprocess_padding(padding)\n    x = tf.nn.convolution(\n        input=x,\n        filter=kernel,\n        dilation_rate=dilation_rate,\n        strides=strides,\n        padding=padding,\n        data_format=tf_data_format)\n\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 3, 1, 2))  # NHWC -> NCHW\n    return x",
                "def conv2d_transpose(x, kernel, output_shape, strides=(1, 1),\n                     padding='valid', data_format=None, dilation_rate=(1, 1)):\n    \"\"\"2D deconvolution (i.e. transposed convolution).\n\n    # Arguments\n        x: Tensor or variable.\n        kernel: kernel tensor.\n        output_shape: 1D int tensor for the output shape.\n        strides: strides tuple.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n            Whether to use Theano or TensorFlow/CNTK data format\n            for inputs/kernels/outputs.\n        dilation_rate: tuple of 2 integers.\n\n    # Returns\n        A tensor, result of transposed 2D convolution.\n\n    # Raises\n        ValueError: If `data_format` is neither\n            `\"channels_last\"` nor `\"channels_first\"`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n    if isinstance(output_shape, (tuple, list)):\n        output_shape = tf.stack(output_shape)\n\n    # tf.nn.atrous_conv2d_transpose input only supports NHWC format\n    if data_format == 'channels_first' and dilation_rate != (1, 1):\n        force_transpose = True\n    else:\n        force_transpose = False\n\n    x, tf_data_format = _preprocess_conv2d_input(x, data_format, force_transpose)\n\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        output_shape = (output_shape[0],\n                        output_shape[2],\n                        output_shape[3],\n                        output_shape[1])\n    if output_shape[0] is None:\n        output_shape = (tf.shape(x)[0],) + tuple(output_shape[1:])\n        output_shape = tf.stack(list(output_shape))\n\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        strides = (1,) + strides + (1,)\n    else:\n        strides = (1, 1) + strides\n\n    if dilation_rate == (1, 1):\n        x = tf.nn.conv2d_transpose(x, kernel, output_shape, strides,\n                                   padding=padding,\n                                   data_format=tf_data_format)\n    else:\n        assert dilation_rate[0] == dilation_rate[1]\n        x = tf.nn.atrous_conv2d_transpose(\n            x, kernel, output_shape, dilation_rate[0], padding)\n\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 3, 1, 2))  # NHWC -> NCHW\n    return x",
                "def separable_conv1d(x, depthwise_kernel, pointwise_kernel, strides=1,\n                     padding='valid', data_format=None, dilation_rate=1):\n    \"\"\"1D convolution with separable filters.\n\n    # Arguments\n        x: input tensor\n        depthwise_kernel: convolution kernel for the depthwise convolution.\n        pointwise_kernel: kernel for the 1x1 convolution.\n        strides: stride integer.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        dilation_rate: integer dilation rate.\n\n    # Returns\n        Output tensor.\n\n    # Raises\n        ValueError: If `data_format` is neither\n            `\"channels_last\"` nor `\"channels_first\"`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n    if isinstance(strides, int):\n        strides = (strides,)\n    if isinstance(dilation_rate, int):\n        dilation_rate = (dilation_rate,)\n\n    x, tf_data_format = _preprocess_conv1d_input(x, data_format)\n    if tf_data_format == 'NWC':\n        tf_data_format = 'NHWC'\n    else:\n        tf_data_format = 'NCHW'\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        spatial_start_dim = 1\n        strides = (1,) + strides * 2 + (1,)\n    else:\n        spatial_start_dim = 2\n        strides = (1, 1) + strides * 2\n    x = tf.expand_dims(x, spatial_start_dim)\n    depthwise_kernel = tf.expand_dims(depthwise_kernel, 0)\n    pointwise_kernel = tf.expand_dims(pointwise_kernel, 0)\n    dilation_rate = (1,) + dilation_rate\n\n    x = tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel,\n                               strides=strides,\n                               padding=padding,\n                               rate=dilation_rate,\n                               data_format=tf_data_format)\n\n    x = tf.squeeze(x, [spatial_start_dim])\n\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 2, 1))  # NWC -> NCW\n\n    return x",
                "def separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=(1, 1),\n                     padding='valid', data_format=None, dilation_rate=(1, 1)):\n    \"\"\"2D convolution with separable filters.\n\n    # Arguments\n        x: input tensor\n        depthwise_kernel: convolution kernel for the depthwise convolution.\n        pointwise_kernel: kernel for the 1x1 convolution.\n        strides: strides tuple (length 2).\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        dilation_rate: tuple of integers,\n            dilation rates for the separable convolution.\n\n    # Returns\n        Output tensor.\n\n    # Raises\n        ValueError: If `data_format` is neither\n            `\"channels_last\"` nor `\"channels_first\"`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n\n    x, tf_data_format = _preprocess_conv2d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        strides = (1,) + strides + (1,)\n    else:\n        strides = (1, 1) + strides\n\n    x = tf.nn.separable_conv2d(x, depthwise_kernel, pointwise_kernel,\n                               strides=strides,\n                               padding=padding,\n                               rate=dilation_rate,\n                               data_format=tf_data_format)\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 3, 1, 2))  # NHWC -> NCHW\n    return x",
                "def depthwise_conv2d(x, depthwise_kernel, strides=(1, 1), padding='valid',\n                     data_format=None, dilation_rate=(1, 1)):\n    \"\"\"2D convolution with separable filters.\n\n    # Arguments\n        x: input tensor\n        depthwise_kernel: convolution kernel for the depthwise convolution.\n        strides: strides tuple (length 2).\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        dilation_rate: tuple of integers,\n            dilation rates for the separable convolution.\n\n    # Returns\n        Output tensor.\n\n    # Raises\n        ValueError: If `data_format` is neither\n            `\"channels_last\"` nor `\"channels_first\"`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n\n    x, tf_data_format = _preprocess_conv2d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        strides = (1,) + strides + (1,)\n    else:\n        strides = (1, 1) + strides\n\n    x = tf.nn.depthwise_conv2d(x, depthwise_kernel,\n                               strides=strides,\n                               padding=padding,\n                               rate=dilation_rate,\n                               data_format=tf_data_format)\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 3, 1, 2))  # NHWC -> NCHW\n    return x",
                "def conv3d(x, kernel, strides=(1, 1, 1), padding='valid',\n           data_format=None, dilation_rate=(1, 1, 1)):\n    \"\"\"3D convolution.\n\n    # Arguments\n        x: Tensor or variable.\n        kernel: kernel tensor.\n        strides: strides tuple.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n            Whether to use Theano or TensorFlow/CNTK data format\n            for inputs/kernels/outputs.\n        dilation_rate: tuple of 3 integers.\n\n    # Returns\n        A tensor, result of 3D convolution.\n\n    # Raises\n        ValueError: If `data_format` is neither\n            `\"channels_last\"` nor `\"channels_first\"`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n\n    x, tf_data_format = _preprocess_conv3d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    x = tf.nn.convolution(\n        input=x,\n        filter=kernel,\n        dilation_rate=dilation_rate,\n        strides=strides,\n        padding=padding,\n        data_format=tf_data_format)\n    if data_format == 'channels_first' and tf_data_format == 'NDHWC':\n        x = tf.transpose(x, (0, 4, 1, 2, 3))\n    return x",
                "def conv3d_transpose(x, kernel, output_shape, strides=(1, 1, 1),\n                     padding='valid', data_format=None):\n    \"\"\"3D deconvolution (i.e. transposed convolution).\n\n    # Arguments\n        x: input tensor.\n        kernel: kernel tensor.\n        output_shape: 1D int tensor for the output shape.\n        strides: strides tuple.\n        padding: string, \"same\" or \"valid\".\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n            Whether to use Theano or TensorFlow/CNTK data format\n            for inputs/kernels/outputs.\n\n    # Returns\n        A tensor, result of transposed 3D convolution.\n\n    # Raises\n        ValueError: If `data_format` is neither\n            `\"channels_last\"` nor `\"channels_first\"`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n    if isinstance(output_shape, (tuple, list)):\n        output_shape = tf.stack(output_shape)\n\n    x, tf_data_format = _preprocess_conv3d_input(x, data_format)\n\n    if data_format == 'channels_first' and tf_data_format == 'NDHWC':\n        output_shape = (output_shape[0],\n                        output_shape[2],\n                        output_shape[3],\n                        output_shape[4],\n                        output_shape[1])\n    if output_shape[0] is None:\n        output_shape = (tf.shape(x)[0],) + tuple(output_shape[1:])\n        output_shape = tf.stack(list(output_shape))\n\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NDHWC':\n        strides = (1,) + strides + (1,)\n    else:\n        strides = (1, 1) + strides\n\n    x = tf.nn.conv3d_transpose(x, kernel, output_shape, strides,\n                               padding=padding,\n                               data_format=tf_data_format)\n    if data_format == 'channels_first' and tf_data_format == 'NDHWC':\n        x = tf.transpose(x, (0, 4, 1, 2, 3))\n    return x",
                "def pool2d(x, pool_size, strides=(1, 1),\n           padding='valid', data_format=None,\n           pool_mode='max'):\n    \"\"\"2D Pooling.\n\n    # Arguments\n        x: Tensor or variable.\n        pool_size: tuple of 2 integers.\n        strides: tuple of 2 integers.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        pool_mode: string, `\"max\"` or `\"avg\"`.\n\n    # Returns\n        A tensor, result of 2D pooling.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n        ValueError: if `pool_mode` is neither `\"max\"` or `\"avg\"`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n\n    x, tf_data_format = _preprocess_conv2d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NHWC':\n        strides = (1,) + strides + (1,)\n        pool_size = (1,) + pool_size + (1,)\n    else:\n        strides = (1, 1) + strides\n        pool_size = (1, 1) + pool_size\n\n    if pool_mode == 'max':\n        x = tf.nn.max_pool(x, pool_size, strides,\n                           padding=padding,\n                           data_format=tf_data_format)\n    elif pool_mode == 'avg':\n        x = tf.nn.avg_pool(x, pool_size, strides,\n                           padding=padding,\n                           data_format=tf_data_format)\n    else:\n        raise ValueError('Invalid pool_mode: ' + str(pool_mode))\n\n    if data_format == 'channels_first' and tf_data_format == 'NHWC':\n        x = tf.transpose(x, (0, 3, 1, 2))  # NHWC -> NCHW\n    return x",
                "def pool3d(x, pool_size, strides=(1, 1, 1), padding='valid',\n           data_format=None, pool_mode='max'):\n    \"\"\"3D Pooling.\n\n    # Arguments\n        x: Tensor or variable.\n        pool_size: tuple of 3 integers.\n        strides: tuple of 3 integers.\n        padding: string, `\"same\"` or `\"valid\"`.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n        pool_mode: string, `\"max\"` or `\"avg\"`.\n\n    # Returns\n        A tensor, result of 3D pooling.\n\n    # Raises\n        ValueError: if `data_format` is neither `\"channels_last\"` or `\"channels_first\"`.\n        ValueError: if `pool_mode` is neither `\"max\"` or `\"avg\"`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n\n    x, tf_data_format = _preprocess_conv3d_input(x, data_format)\n    padding = _preprocess_padding(padding)\n    if tf_data_format == 'NDHWC':\n        strides = (1,) + strides + (1,)\n        pool_size = (1,) + pool_size + (1,)\n    else:\n        strides = (1, 1) + strides\n        pool_size = (1, 1) + pool_size\n\n    if pool_mode == 'max':\n        x = tf.nn.max_pool3d(x, pool_size, strides,\n                             padding=padding,\n                             data_format=tf_data_format)\n    elif pool_mode == 'avg':\n        x = tf.nn.avg_pool3d(x, pool_size, strides,\n                             padding=padding,\n                             data_format=tf_data_format)\n    else:\n        raise ValueError('Invalid pool_mode: ' + str(pool_mode))\n\n    if data_format == 'channels_first' and tf_data_format == 'NDHWC':\n        x = tf.transpose(x, (0, 4, 1, 2, 3))\n    return x",
                "def bias_add(x, bias, data_format=None):\n    \"\"\"Adds a bias vector to a tensor.\n\n    # Arguments\n        x: Tensor or variable.\n        bias: Bias tensor to add.\n        data_format: string, `\"channels_last\"` or `\"channels_first\"`.\n\n    # Returns\n        Output tensor.\n\n    # Raises\n        ValueError: In one of the two cases below:\n                    1. invalid `data_format` argument.\n                    2. invalid bias shape.\n                       the bias should be either a vector or\n                       a tensor with ndim(x) - 1 dimension\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n    bias_shape = int_shape(bias)\n    if len(bias_shape) != 1 and len(bias_shape) != ndim(x) - 1:\n        raise ValueError('Unexpected bias dimensions %d, expect to be 1 or %d dimensions'\n                         % (len(bias_shape), ndim(x)))\n    if ndim(x) == 5:\n        if len(bias_shape) == 1:\n            new_shape = (1, 1, 1, 1, bias_shape[0])\n        else:\n            new_shape = (1,) + bias_shape\n        new_shape = transpose_shape(new_shape, data_format, spatial_axes=(1, 2, 3))\n        x += reshape(bias, new_shape)\n    elif ndim(x) == 4:\n        if data_format == 'channels_first':\n            if len(bias_shape) == 1:\n                if _has_nchw_support():\n                    x = tf.nn.bias_add(x, bias,\n                                       data_format='NCHW')\n                else:\n                    x += reshape(bias, (1, bias_shape[0], 1, 1))\n            else:\n                x += reshape(bias, (1, bias_shape[2]) + bias_shape[:2])\n        elif data_format == 'channels_last':\n            if len(bias_shape) == 1:\n                x = tf.nn.bias_add(x, bias,\n                                   data_format='NHWC')\n            else:\n                x += reshape(bias, (1,) + bias_shape)\n    elif ndim(x) == 3:\n        if len(bias_shape) == 1:\n            new_shape = (1, 1, bias_shape[0])\n        else:\n            new_shape = (1,) + bias_shape\n        new_shape = transpose_shape(new_shape, data_format, spatial_axes=(1,))\n        x += reshape(bias, new_shape)\n    else:\n        x = tf.nn.bias_add(x, bias)\n    return x",
                "def random_normal(shape, mean=0.0, stddev=1.0, dtype=None, seed=None):\n    \"\"\"Returns a tensor with normal distribution of values.\n\n    # Arguments\n        shape: A tuple of integers, the shape of tensor to create.\n        mean: A float, mean of the normal distribution to draw samples.\n        stddev: A float, standard deviation of the normal distribution\n            to draw samples.\n        dtype: String, dtype of returned tensor.\n        seed: Integer, random seed.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if seed is None:\n        seed = np.random.randint(10e6)\n    return tf.random_normal(shape, mean=mean, stddev=stddev,\n                            dtype=dtype, seed=seed)",
                "def random_uniform(shape, minval=0.0, maxval=1.0, dtype=None, seed=None):\n    \"\"\"Returns a tensor with uniform distribution of values.\n\n    # Arguments\n        shape: A tuple of integers, the shape of tensor to create.\n        minval: A float, lower boundary of the uniform distribution\n            to draw samples.\n        maxval: A float, upper boundary of the uniform distribution\n            to draw samples.\n        dtype: String, dtype of returned tensor.\n        seed: Integer, random seed.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if seed is None:\n        seed = np.random.randint(10e6)\n    return tf.random_uniform(shape, minval=minval, maxval=maxval,\n                             dtype=dtype, seed=seed)",
                "def random_binomial(shape, p=0.0, dtype=None, seed=None):\n    \"\"\"Returns a tensor with random binomial distribution of values.\n\n    # Arguments\n        shape: A tuple of integers, the shape of tensor to create.\n        p: A float, `0. <= p <= 1`, probability of binomial distribution.\n        dtype: String, dtype of returned tensor.\n        seed: Integer, random seed.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if seed is None:\n        seed = np.random.randint(10e6)\n    return tf.where(tf.random_uniform(shape, dtype=dtype, seed=seed) <= p,\n                    tf.ones(shape, dtype=dtype),\n                    tf.zeros(shape, dtype=dtype))",
                "def truncated_normal(shape, mean=0.0, stddev=1.0, dtype=None, seed=None):\n    \"\"\"Returns a tensor with truncated random normal distribution of values.\n\n    The generated values follow a normal distribution\n    with specified mean and standard deviation,\n    except that values whose magnitude is more than\n    two standard deviations from the mean are dropped and re-picked.\n\n    # Arguments\n        shape: A tuple of integers, the shape of tensor to create.\n        mean: Mean of the values.\n        stddev: Standard deviation of the values.\n        dtype: String, dtype of returned tensor.\n        seed: Integer, random seed.\n\n    # Returns\n        A tensor.\n    \"\"\"\n    if dtype is None:\n        dtype = floatx()\n    if seed is None:\n        seed = np.random.randint(10e6)\n    return tf.truncated_normal(shape, mean, stddev, dtype=dtype, seed=seed)",
                "def ctc_label_dense_to_sparse(labels, label_lengths):\n    \"\"\"Converts CTC labels from dense to sparse.\n\n    # Arguments\n        labels: dense CTC labels.\n        label_lengths: length of the labels.\n\n    # Returns\n        A sparse tensor representation of the labels.\n    \"\"\"\n    label_shape = tf.shape(labels)\n    num_batches_tns = tf.stack([label_shape[0]])\n    max_num_labels_tns = tf.stack([label_shape[1]])\n\n    def range_less_than(_, current_input):\n        return tf.expand_dims(tf.range(label_shape[1]), 0) < tf.fill(\n            max_num_labels_tns, current_input)\n\n    init = tf.cast(tf.fill([1, label_shape[1]], 0), tf.bool)\n    dense_mask = functional_ops.scan(range_less_than, label_lengths,\n                                     initializer=init, parallel_iterations=1)\n    dense_mask = dense_mask[:, 0, :]\n\n    label_array = tf.reshape(tf.tile(tf.range(label_shape[1]), num_batches_tns),\n                             label_shape)\n    label_ind = tf.boolean_mask(label_array, dense_mask)\n\n    batch_array = tf.transpose(tf.reshape(tf.tile(tf.range(label_shape[0]),\n                                                  max_num_labels_tns), reverse(label_shape, 0)))\n    batch_ind = tf.boolean_mask(batch_array, dense_mask)\n    indices = tf.transpose(tf.reshape(concatenate([batch_ind, label_ind], axis=0), [2, -1]))\n\n    vals_sparse = tf.gather_nd(labels, indices)\n\n    return tf.SparseTensor(tf.to_int64(indices), vals_sparse, tf.to_int64(label_shape))",
                "def ctc_batch_cost(y_true, y_pred, input_length, label_length):\n    \"\"\"Runs CTC loss algorithm on each batch element.\n\n    # Arguments\n        y_true: tensor `(samples, max_string_length)`\n            containing the truth labels.\n        y_pred: tensor `(samples, time_steps, num_categories)`\n            containing the prediction, or output of the softmax.\n        input_length: tensor `(samples, 1)` containing the sequence length for\n            each batch item in `y_pred`.\n        label_length: tensor `(samples, 1)` containing the sequence length for\n            each batch item in `y_true`.\n\n    # Returns\n        Tensor with shape (samples,1) containing the\n            CTC loss of each element.\n    \"\"\"\n    label_length = tf.to_int32(tf.squeeze(label_length, axis=-1))\n    input_length = tf.to_int32(tf.squeeze(input_length, axis=-1))\n    sparse_labels = tf.to_int32(ctc_label_dense_to_sparse(y_true, label_length))\n\n    y_pred = tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())\n\n    return tf.expand_dims(ctc.ctc_loss(inputs=y_pred,\n                                       labels=sparse_labels,\n                                       sequence_length=input_length), 1)",
                "def ctc_decode(y_pred, input_length, greedy=True, beam_width=100,\n               top_paths=1):\n    \"\"\"Decodes the output of a softmax.\n\n    Can use either greedy search (also known as best path)\n    or a constrained dictionary search.\n\n    # Arguments\n        y_pred: tensor `(samples, time_steps, num_categories)`\n            containing the prediction, or output of the softmax.\n        input_length: tensor `(samples, )` containing the sequence length for\n            each batch item in `y_pred`.\n        greedy: perform much faster best-path search if `true`.\n            This does not use a dictionary.\n        beam_width: if `greedy` is `false`: a beam search decoder will be used\n            with a beam of this width.\n        top_paths: if `greedy` is `false`,\n            how many of the most probable paths will be returned.\n\n    # Returns\n        Tuple:\n            List: if `greedy` is `true`, returns a list of one element that\n                contains the decoded sequence.\n                If `false`, returns the `top_paths` most probable\n                decoded sequences.\n                Important: blank labels are returned as `-1`.\n            Tensor `(top_paths, )` that contains\n                the log probability of each decoded sequence.\n    \"\"\"\n    y_pred = tf.log(tf.transpose(y_pred, perm=[1, 0, 2]) + epsilon())\n    input_length = tf.to_int32(input_length)\n\n    if greedy:\n        (decoded, log_prob) = ctc.ctc_greedy_decoder(\n            inputs=y_pred,\n            sequence_length=input_length)\n    else:\n        (decoded, log_prob) = ctc.ctc_beam_search_decoder(\n            inputs=y_pred,\n            sequence_length=input_length, beam_width=beam_width,\n            top_paths=top_paths)\n\n    decoded_dense = [tf.sparse_to_dense(st.indices, st.dense_shape, st.values, default_value=-1)\n                     for st in decoded]\n    return (decoded_dense, log_prob)",
                "def map_fn(fn, elems, name=None, dtype=None):\n    \"\"\"Map the function fn over the elements elems and return the outputs.\n\n    # Arguments\n        fn: Callable that will be called upon each element in elems\n        elems: tensor\n        name: A string name for the map node in the graph\n        dtype: Output data type.\n\n    # Returns\n        Tensor with dtype `dtype`.\n    \"\"\"\n    return tf.map_fn(fn, elems, name=name, dtype=dtype)",
                "def foldl(fn, elems, initializer=None, name=None):\n    \"\"\"Reduce elems using fn to combine them from left to right.\n\n    # Arguments\n        fn: Callable that will be called upon each element in elems and an\n            accumulator, for instance `lambda acc, x: acc + x`\n        elems: tensor\n        initializer: The first value used (`elems[0]` in case of None)\n        name: A string name for the foldl node in the graph\n\n    # Returns\n        Tensor with same type and shape as `initializer`.\n    \"\"\"\n    return tf.foldl(fn, elems, initializer=initializer, name=name)",
                "def foldr(fn, elems, initializer=None, name=None):\n    \"\"\"Reduce elems using fn to combine them from right to left.\n\n    # Arguments\n        fn: Callable that will be called upon each element in elems and an\n            accumulator, for instance `lambda acc, x: acc + x`\n        elems: tensor\n        initializer: The first value used (`elems[-1]` in case of None)\n        name: A string name for the foldr node in the graph\n\n    # Returns\n        Tensor with same type and shape as `initializer`.\n    \"\"\"\n    return tf.foldr(fn, elems, initializer=initializer, name=name)",
                "def local_conv1d(inputs, kernel, kernel_size, strides, data_format=None):\n    \"\"\"Apply 1D conv with un-shared weights.\n\n    # Arguments\n        inputs: 3D tensor with shape: (batch_size, steps, input_dim)\n        kernel: the unshared weight for convolution,\n                with shape (output_length, feature_dim, filters)\n        kernel_size: a tuple of a single integer,\n                     specifying the length of the 1D convolution window\n        strides: a tuple of a single integer,\n                 specifying the stride length of the convolution\n        data_format: the data format, channels_first or channels_last\n\n    # Returns\n        the tensor after 1d conv with un-shared weights, with shape (batch_size, output_length, filters)\n\n    # Raises\n        ValueError: If `data_format` is neither\n            `\"channels_last\"` nor `\"channels_first\"`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n\n    stride = strides[0]\n    kernel_shape = int_shape(kernel)\n    output_length, feature_dim, filters = kernel_shape\n\n    xs = []\n    for i in range(output_length):\n        slice_length = py_slice(i * stride,\n                                i * stride + kernel_size[0])\n        xs.append(reshape(inputs[:, slice_length, :],\n                          (1, -1, feature_dim)))\n    x_aggregate = concatenate(xs, axis=0)\n    # Shape: `(output_length, batch_size, filters)`.\n    output = batch_dot(x_aggregate, kernel)\n    return permute_dimensions(output, (1, 0, 2))",
                "def local_conv2d(inputs, kernel, kernel_size, strides, output_shape, data_format=None):\n    \"\"\"Apply 2D conv with un-shared weights.\n\n    # Arguments\n        inputs: 4D tensor with shape:\n                (batch_size, filters, new_rows, new_cols)\n                if data_format='channels_first'\n                or 4D tensor with shape:\n                (batch_size, new_rows, new_cols, filters)\n                if data_format='channels_last'.\n        kernel: the unshared weight for convolution,\n                with shape (output_items, feature_dim, filters)\n        kernel_size: a tuple of 2 integers, specifying the\n                     width and height of the 2D convolution window.\n        strides: a tuple of 2 integers, specifying the strides\n                 of the convolution along the width and height.\n        output_shape: a tuple with (output_row, output_col)\n        data_format: the data format, channels_first or channels_last\n\n    # Returns\n        A 4d tensor with shape:\n        (batch_size, filters, new_rows, new_cols)\n        if data_format='channels_first'\n        or 4D tensor with shape:\n        (batch_size, new_rows, new_cols, filters)\n        if data_format='channels_last'.\n\n    # Raises\n        ValueError: if `data_format` is neither\n                    `channels_last` or `channels_first`.\n    \"\"\"\n    data_format = normalize_data_format(data_format)\n\n    stride_row, stride_col = strides\n    output_row, output_col = output_shape\n    kernel_shape = int_shape(kernel)\n    _, feature_dim, filters = kernel_shape\n\n    xs = []\n    for i in range(output_row):\n        for j in range(output_col):\n            slice_row = py_slice(i * stride_row,\n                                 i * stride_row + kernel_size[0])\n            slice_col = py_slice(j * stride_col,\n                                 j * stride_col + kernel_size[1])\n            if data_format == 'channels_first':\n                xs.append(reshape(inputs[:, :, slice_row, slice_col],\n                                  (1, -1, feature_dim)))\n            else:\n                xs.append(reshape(inputs[:, slice_row, slice_col, :],\n                                  (1, -1, feature_dim)))\n\n    x_aggregate = concatenate(xs, axis=0)\n    output = batch_dot(x_aggregate, kernel)\n    output = reshape(output,\n                     (output_row, output_col, -1, filters))\n\n    if data_format == 'channels_first':\n        output = permute_dimensions(output, (2, 3, 0, 1))\n    else:\n        output = permute_dimensions(output, (2, 0, 1, 3))\n    return output",
                "def __init__(self):\n    self.device = None",
                "def _set_device(self, device):\n    \"\"\"This method captures TF's explicit device scope setting.\"\"\"\n    self.device = device",
                "def __init__(self, inputs, outputs,\n             updates=None,\n             name=None,\n             **session_kwargs):\n    updates = updates or []\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` to a TensorFlow backend function '\n                        'should be a list or tuple.')\n    if not isinstance(outputs, (list, tuple)):\n        raise TypeError('`outputs` of a TensorFlow backend function '\n                        'should be a list or tuple.')\n    if not isinstance(updates, (list, tuple)):\n        raise TypeError('`updates` in a TensorFlow backend function '\n                        'should be a list or tuple.')\n    self.inputs = list(inputs)\n    self.outputs = list(outputs)\n    with tf.control_dependencies(self.outputs):\n        updates_ops = []\n        for update in updates:\n            if isinstance(update, tuple):\n                p, new_p = update\n                updates_ops.append(tf.assign(p, new_p))\n            else:\n                # assumed already an op\n                updates_ops.append(update)\n        self.updates_op = tf.group(*updates_ops)\n    self.name = name\n    # additional tensor substitutions\n    self.feed_dict = session_kwargs.pop('feed_dict', {})\n    # additional operations\n    self.fetches = session_kwargs.pop('fetches', [])\n    if not isinstance(self.fetches, list):\n        self.fetches = [self.fetches]\n    # The main use case of `fetches` being passed to a model is the ability\n    # to run custom updates\n    # (since the outputs of fetches are never returned).\n    # This requires us to wrap fetches in `identity` ops.\n    self.fetches = [tf.identity(x) for x in self.fetches]\n    self.session_kwargs = session_kwargs\n    if session_kwargs:\n        raise ValueError('Some keys in session_kwargs are not '\n                         'supported at this '\n                         'time: %s', session_kwargs.keys())\n    self._callable_fn = None\n    self._feed_arrays = None\n    self._feed_symbols = None\n    self._symbol_vals = None\n    self._session = None",
                "def _make_callable(self, feed_arrays, feed_symbols, symbol_vals, session):\n    \"\"\"Generates a callable that runs the graph.\n\n    # Arguments\n        feed_arrays: List of input tensors to be fed\n            Numpy arrays at runtime.\n        feed_symbols: List of input tensors to be fed\n            symbolic tensors at runtime.\n        symbol_vals: List of symbolic tensors to be fed to `feed_symbols`.\n        session: Session to use to generate the callable.\n\n    # Returns\n        Function that runs the graph according to the above options.\n    \"\"\"\n    # Prepare callable options.\n    callable_opts = config_pb2.CallableOptions()\n    # Handle external-data feed.\n    for x in feed_arrays:\n        callable_opts.feed.append(x.name)\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            callable_opts.feed.append(key.name)\n    # Handle symbolic feed.\n    for x, y in zip(feed_symbols, symbol_vals):\n        connection = callable_opts.tensor_connection.add()\n        if x.dtype != y.dtype:\n            y = tf.cast(y, dtype=x.dtype)\n        from_tensor = tf_ops._as_graph_element(y)\n        if from_tensor is None:\n            from_tensor = y\n        connection.from_tensor = from_tensor.name  # Data tensor\n        connection.to_tensor = x.name  # Placeholder\n    # Handle fetches.\n    for x in self.outputs + self.fetches:\n        callable_opts.fetch.append(x.name)\n    # Handle updates.\n    callable_opts.target.append(self.updates_op.name)\n    # Create callable.\n    callable_fn = session._make_callable_from_options(callable_opts)\n    # Cache parameters corresponding to the generated callable, so that\n    # we can detect future mismatches and refresh the callable.\n    self._callable_fn = callable_fn\n    self._feed_arrays = feed_arrays\n    self._feed_symbols = feed_symbols\n    self._symbol_vals = symbol_vals\n    self._session = session",
                "def _call(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n\n    session = get_session()\n    feed_arrays = []\n    array_vals = []\n    feed_symbols = []\n    symbol_vals = []\n    for tensor, value in zip(self.inputs, inputs):\n        if value is None:\n            continue\n        if is_tensor(value):\n            # Case: feeding symbolic tensor.\n            feed_symbols.append(tensor)\n            symbol_vals.append(value)\n        else:\n            feed_arrays.append(tensor)\n            # We need to do array conversion and type casting\n            # at this level, since\n            # `callable_fn` only supports exact matches.\n            array_vals.append(\n                np.asarray(value,\n                           dtype=tf.as_dtype(tensor.dtype).as_numpy_dtype))\n    if self.feed_dict:\n        for key in sorted(self.feed_dict.keys()):\n            array_vals.append(\n                np.asarray(self.feed_dict[key],\n                           dtype=tf.as_dtype(key.dtype).as_numpy_dtype))\n\n    # Refresh callable if anything has changed.\n    if (self._callable_fn is None or\n            feed_arrays != self._feed_arrays or\n            symbol_vals != self._symbol_vals or\n            feed_symbols != self._feed_symbols or\n            session != self._session):\n        self._make_callable(feed_arrays,\n                            feed_symbols,\n                            symbol_vals,\n                            session)\n    fetched = self._callable_fn(*array_vals)\n    return fetched[:len(self.outputs)]",
                "def _legacy_call(self, inputs):\n    if not isinstance(inputs, (list, tuple)):\n        raise TypeError('`inputs` should be a list or tuple.')\n    feed_dict = self.feed_dict.copy()\n    for tensor, value in zip(self.inputs, inputs):\n        if is_sparse(tensor):\n            sparse_coo = value.tocoo()\n            indices = np.concatenate(\n                (np.expand_dims(sparse_coo.row, 1),\n                 np.expand_dims(sparse_coo.col, 1)), 1)\n            value = (indices, sparse_coo.data, sparse_coo.shape)\n        feed_dict[tensor] = value\n    fetches = self.outputs + [self.updates_op] + self.fetches\n    session = get_session()\n    updated = session.run(fetches=fetches, feed_dict=feed_dict,\n                          **self.session_kwargs)\n    return updated[:len(self.outputs)]",
                "def __call__(self, inputs):\n    if hasattr(get_session(), '_make_callable_from_options'):\n        if py_any(is_sparse(x) for x in self.inputs):\n            if py_any(is_tensor(x) for x in inputs):\n                raise ValueError(\n                    'Feeding from symbolic tensors is not '\n                    'supported with sparse inputs.')\n            return self._legacy_call(inputs)\n\n        return self._call(inputs)\n    else:\n        if py_any(is_tensor(x) for x in inputs):\n            raise ValueError(\n                'In order to feed symbolic tensors to a Keras model '\n                'in TensorFlow, you need tensorflow 1.8 or higher.')\n        return self._legacy_call(inputs)",
                "def range_less_than(_, current_input):\n    return tf.expand_dims(tf.range(label_shape[1]), 0) < tf.fill(\n        max_num_labels_tns, current_input)",
                "def _step(time, output_ta_t, *states):\n    \"\"\"RNN step function.\n\n    # Arguments\n        time: Current timestep value.\n        output_ta_t: TensorArray.\n        *states: List of states.\n\n    # Returns\n        Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n    \"\"\"\n    current_input = input_ta.read(time)\n    mask_t = mask_ta.read(time)\n    output, new_states = step_function(current_input,\n                                       tuple(states) +\n                                       tuple(constants))\n    if getattr(output, '_uses_learning_phase', False):\n        global uses_learning_phase\n        uses_learning_phase = True\n    for state, new_state in zip(states, new_states):\n        new_state.set_shape(state.get_shape())\n    tiled_mask_t = tf.tile(mask_t,\n                           tf.stack([1, tf.shape(output)[1]]))\n    output = tf.where(tiled_mask_t, output, states[0])\n    new_states = [\n        tf.where(tf.tile(mask_t, tf.stack([1, tf.shape(new_states[i])[1]])),\n                 new_states[i], states[i]) for i in range(len(states))\n    ]\n    output_ta_t = output_ta_t.write(time, output)\n    return (time + 1, output_ta_t) + tuple(new_states)",
                "def _step(time, output_ta_t, *states):\n    \"\"\"RNN step function.\n\n    # Arguments\n        time: Current timestep value.\n        output_ta_t: TensorArray.\n        *states: List of states.\n\n    # Returns\n        Tuple: `(time + 1,output_ta_t) + tuple(new_states)`\n    \"\"\"\n    current_input = input_ta.read(time)\n    output, new_states = step_function(current_input,\n                                       tuple(states) +\n                                       tuple(constants))\n    if getattr(output, '_uses_learning_phase', False):\n        global uses_learning_phase\n        uses_learning_phase = True\n    for state, new_state in zip(states, new_states):\n        new_state.set_shape(state.get_shape())\n    output_ta_t = output_ta_t.write(time, output)\n    return (time + 1, output_ta_t) + tuple(new_states)",
                "def then_expression_fn():\n    return then_expression",
                "def else_expression_fn():\n    return else_expression"
            ],
            "inscope_function_signatures": [
                "get_uid(prefix='')",
                "reset_uids()",
                "clear_session()",
                "manual_variable_initialization(value)",
                "learning_phase()",
                "set_learning_phase(value)",
                "get_session()",
                "set_session(session)",
                "_get_current_tf_device()",
                "_is_current_explicit_device(device_type)",
                "_get_available_gpus()",
                "_has_nchw_support()",
                "_to_tensor(x, dtype)",
                "is_sparse(tensor)",
                "to_dense(tensor)",
                "variable(value, dtype=None, name=None, constraint=None)",
                "constant(value, dtype=None, shape=None, name=None)",
                "is_keras_tensor(x)",
                "is_tensor(x)",
                "placeholder(shape=None, ndim=None, dtype=None, sparse=False, name=None)",
                "is_placeholder(x)",
                "shape(x)",
                "int_shape(x)",
                "ndim(x)",
                "dtype(x)",
                "eval(x)",
                "zeros(shape, dtype=None, name=None)",
                "ones(shape, dtype=None, name=None)",
                "eye(size, dtype=None, name=None)",
                "zeros_like(x, dtype=None, name=None)",
                "ones_like(x, dtype=None, name=None)",
                "identity(x, name=None)",
                "random_uniform_variable(shape, low, high, dtype=None, name=None, seed=None)",
                "random_normal_variable(shape, mean, scale, dtype=None, name=None, seed=None)",
                "count_params(x)",
                "cast(x, dtype)",
                "update(x, new_x)",
                "update_add(x, increment)",
                "update_sub(x, decrement)",
                "moving_average_update(x, value, momentum)",
                "dot(x, y)",
                "batch_dot(x, y, axes=None)",
                "transpose(x)",
                "gather(reference, indices)",
                "max(x, axis=None, keepdims=False)",
                "min(x, axis=None, keepdims=False)",
                "sum(x, axis=None, keepdims=False)",
                "prod(x, axis=None, keepdims=False)",
                "cumsum(x, axis=0)",
                "cumprod(x, axis=0)",
                "var(x, axis=None, keepdims=False)",
                "std(x, axis=None, keepdims=False)",
                "mean(x, axis=None, keepdims=False)",
                "any(x, axis=None, keepdims=False)",
                "all(x, axis=None, keepdims=False)",
                "argmax(x, axis=-1)",
                "argmin(x, axis=-1)",
                "square(x)",
                "abs(x)",
                "sqrt(x)",
                "exp(x)",
                "log(x)",
                "logsumexp(x, axis=None, keepdims=False)",
                "round(x)",
                "sign(x)",
                "pow(x, a)",
                "clip(x, min_value, max_value)",
                "equal(x, y)",
                "not_equal(x, y)",
                "greater(x, y)",
                "greater_equal(x, y)",
                "less(x, y)",
                "less_equal(x, y)",
                "maximum(x, y)",
                "minimum(x, y)",
                "sin(x)",
                "cos(x)",
                "_regular_normalize_batch_in_training(x, gamma, beta, reduction_axes, epsilon=0.001)",
                "_broadcast_normalize_batch_in_training(x, gamma, beta, reduction_axes, epsilon=0.001)",
                "_fused_normalize_batch_in_training(x, gamma, beta, reduction_axes, epsilon=0.001)",
                "normalize_batch_in_training(x, gamma, beta, reduction_axes, epsilon=0.001)",
                "batch_normalization(x, mean, var, beta, gamma, axis=-1, epsilon=0.001)",
                "concatenate(tensors, axis=-1)",
                "reshape(x, shape)",
                "permute_dimensions(x, pattern)",
                "resize_images(x, height_factor, width_factor, data_format, interpolation='nearest')",
                "resize_volumes(x, depth_factor, height_factor, width_factor, data_format)",
                "repeat_elements(x, rep, axis)",
                "repeat(x, n)",
                "arange(start, stop=None, step=1, dtype='int32')",
                "tile(x, n)",
                "flatten(x)",
                "batch_flatten(x)",
                "expand_dims(x, axis=-1)",
                "squeeze(x, axis)",
                "temporal_padding(x, padding=(1, 1))",
                "spatial_2d_padding(x, padding=((1, 1), (1, 1)), data_format=None)",
                "spatial_3d_padding(x, padding=((1, 1), (1, 1), (1, 1)), data_format=None)",
                "stack(x, axis=0)",
                "one_hot(indices, num_classes)",
                "reverse(x, axes)",
                "slice(x, start, size)",
                "get_value(x)",
                "batch_get_value(ops)",
                "set_value(x, value)",
                "batch_set_value(tuples)",
                "get_variable_shape(x)",
                "print_tensor(x, message='')",
                "function(inputs, outputs, updates=None, **kwargs)",
                "gradients(loss, variables)",
                "stop_gradient(variables)",
                "rnn(step_function, inputs, initial_states, go_backwards=False, mask=None, constants=None, unroll=False, input_length=None)",
                "switch(condition, then_expression, else_expression)",
                "in_train_phase(x, alt, training=None)",
                "in_test_phase(x, alt, training=None)",
                "relu(x, alpha=0.0, max_value=None)",
                "elu(x, alpha=1.0)",
                "softmax(x, axis=-1)",
                "softplus(x)",
                "softsign(x)",
                "categorical_crossentropy(target, output, from_logits=False, axis=-1)",
                "sparse_categorical_crossentropy(target, output, from_logits=False, axis=-1)",
                "binary_crossentropy(target, output, from_logits=False)",
                "sigmoid(x)",
                "hard_sigmoid(x)",
                "tanh(x)",
                "dropout(x, level, noise_shape=None, seed=None)",
                "l2_normalize(x, axis=None)",
                "in_top_k(predictions, targets, k)",
                "_preprocess_conv1d_input(x, data_format)",
                "_preprocess_conv2d_input(x, data_format, force_transpose=False)",
                "_preprocess_conv3d_input(x, data_format)",
                "_preprocess_padding(padding)",
                "conv1d(x, kernel, strides=1, padding='valid', data_format=None, dilation_rate=1)",
                "conv2d(x, kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1))",
                "conv2d_transpose(x, kernel, output_shape, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1))",
                "separable_conv1d(x, depthwise_kernel, pointwise_kernel, strides=1, padding='valid', data_format=None, dilation_rate=1)",
                "separable_conv2d(x, depthwise_kernel, pointwise_kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1))",
                "depthwise_conv2d(x, depthwise_kernel, strides=(1, 1), padding='valid', data_format=None, dilation_rate=(1, 1))",
                "conv3d(x, kernel, strides=(1, 1, 1), padding='valid', data_format=None, dilation_rate=(1, 1, 1))",
                "conv3d_transpose(x, kernel, output_shape, strides=(1, 1, 1), padding='valid', data_format=None)",
                "pool2d(x, pool_size, strides=(1, 1), padding='valid', data_format=None, pool_mode='max')",
                "pool3d(x, pool_size, strides=(1, 1, 1), padding='valid', data_format=None, pool_mode='max')",
                "bias_add(x, bias, data_format=None)",
                "random_normal(shape, mean=0.0, stddev=1.0, dtype=None, seed=None)",
                "random_uniform(shape, minval=0.0, maxval=1.0, dtype=None, seed=None)",
                "random_binomial(shape, p=0.0, dtype=None, seed=None)",
                "truncated_normal(shape, mean=0.0, stddev=1.0, dtype=None, seed=None)",
                "ctc_label_dense_to_sparse(labels, label_lengths)",
                "ctc_batch_cost(y_true, y_pred, input_length, label_length)",
                "ctc_decode(y_pred, input_length, greedy=True, beam_width=100, top_paths=1)",
                "map_fn(fn, elems, name=None, dtype=None)",
                "foldl(fn, elems, initializer=None, name=None)",
                "foldr(fn, elems, initializer=None, name=None)",
                "local_conv1d(inputs, kernel, kernel_size, strides, data_format=None)",
                "local_conv2d(inputs, kernel, kernel_size, strides, output_shape, data_format=None)",
                "__init__(self)",
                "_set_device(self, device)",
                "__init__(self, inputs, outputs, updates=None, name=None, **session_kwargs)",
                "_make_callable(self, feed_arrays, feed_symbols, symbol_vals, session)",
                "_call(self, inputs)",
                "_legacy_call(self, inputs)",
                "__call__(self, inputs)",
                "range_less_than(_, current_input)",
                "_step(time, output_ta_t, *states)",
                "_step(time, output_ta_t, *states)",
                "then_expression_fn()",
                "else_expression_fn()"
            ],
            "variables_in_file": {
                "py_all": [
                    703,
                    735,
                    1933,
                    31
                ],
                "all": [
                    31
                ],
                "py_any": [
                    32,
                    2669,
                    2670,
                    2678,
                    1147
                ],
                "any": [
                    32
                ],
                "py_sum": [
                    33
                ],
                "sum": [
                    33
                ],
                "py_slice": [
                    4368,
                    34,
                    4370,
                    4317
                ],
                "slice": [
                    34
                ],
                "_SESSION": [
                    97,
                    40,
                    179,
                    186,
                    187,
                    221
                ],
                "_GRAPH_LEARNING_PHASES": [
                    132,
                    101,
                    102,
                    136,
                    137,
                    45,
                    153
                ],
                "_GRAPH_UID_DICTS": [
                    75,
                    76,
                    77,
                    78,
                    51,
                    85
                ],
                "_MANUAL_VAR_INIT": [
                    56,
                    188,
                    118
                ],
                "_LOCAL_DEVICES": [
                    277,
                    61,
                    278,
                    279
                ],
                "graph": [
                    131,
                    132,
                    136,
                    137,
                    74,
                    75,
                    76,
                    77,
                    78
                ],
                "tf.get_default_graph": [
                    131,
                    102,
                    74,
                    245,
                    153
                ],
                "tf": [
                    1538,
                    515,
                    3586,
                    517,
                    1550,
                    2070,
                    4118,
                    2585,
                    1563,
                    3614,
                    2082,
                    2083,
                    2086,
                    1063,
                    4138,
                    2091,
                    4139,
                    2093,
                    1070,
                    1583,
                    3630,
                    3631,
                    4140,
                    4143,
                    4146,
                    566,
                    1078,
                    1079,
                    1080,
                    3126,
                    1083,
                    1596,
                    1085,
                    3128,
                    3132,
                    3640,
                    3645,
                    3649,
                    4155,
                    2116,
                    2117,
                    2118,
                    2629,
                    4160,
                    1609,
                    74,
                    2634,
                    3146,
                    3150,
                    1622,
                    4182,
                    4183,
                    4184,
                    4186,
                    3164,
                    4188,
                    95,
                    98,
                    1635,
                    2148,
                    2149,
                    102,
                    2152,
                    3176,
                    3691,
                    3692,
                    3693,
                    1648,
                    3696,
                    3188,
                    3702,
                    3705,
                    2171,
                    1661,
                    4222,
                    4223,
                    1153,
                    131,
                    1156,
                    133,
                    2183,
                    1161,
                    1674,
                    1163,
                    4235,
                    2702,
                    1171,
                    2197,
                    1687,
                    3224,
                    153,
                    1177,
                    3227,
                    3228,
                    3740,
                    2718,
                    3230,
                    4254,
                    3746,
                    1699,
                    2211,
                    2733,
                    174,
                    1711,
                    2224,
                    2735,
                    4270,
                    181,
                    184,
                    186,
                    701,
                    190,
                    702,
                    1215,
                    1729,
                    2240,
                    1731,
                    3267,
                    3779,
                    4286,
                    199,
                    3273,
                    3274,
                    3785,
                    1228,
                    206,
                    3278,
                    3279,
                    3285,
                    1752,
                    2267,
                    733,
                    734,
                    1759,
                    1248,
                    1760,
                    1762,
                    1763,
                    3814,
                    1767,
                    2794,
                    1771,
                    3308,
                    1773,
                    2797,
                    2798,
                    3309,
                    1265,
                    2801,
                    3311,
                    3822,
                    245,
                    764,
                    765,
                    3324,
                    2817,
                    1282,
                    2308,
                    2822,
                    3849,
                    1806,
                    3343,
                    2321,
                    1810,
                    1299,
                    3860,
                    3861,
                    790,
                    1814,
                    2841,
                    2842,
                    3356,
                    3869,
                    1312,
                    2336,
                    2849,
                    3873,
                    2854,
                    2855,
                    2856,
                    1325,
                    815,
                    2352,
                    2864,
                    3378,
                    308,
                    2874,
                    828,
                    1342,
                    1343,
                    1344,
                    1345,
                    1346,
                    2882,
                    2372,
                    3391,
                    3909,
                    3913,
                    331,
                    2893,
                    3407,
                    3920,
                    1365,
                    859,
                    2907,
                    863,
                    1888,
                    3425,
                    1890,
                    355,
                    3426,
                    1382,
                    1383,
                    360,
                    1384,
                    1894,
                    1898,
                    1899,
                    3430,
                    2414,
                    2419,
                    3955,
                    2933,
                    1398,
                    1399,
                    1911,
                    2934,
                    2935,
                    2937,
                    3450,
                    3451,
                    3959,
                    3455,
                    896,
                    3966,
                    900,
                    1413,
                    1414,
                    2438,
                    2443,
                    396,
                    1934,
                    1936,
                    3473,
                    402,
                    1427,
                    3474,
                    4151,
                    3478,
                    1949,
                    4153,
                    1440,
                    4004,
                    2981,
                    1963,
                    1452,
                    4012,
                    430,
                    4157,
                    2484,
                    1464,
                    4024,
                    4158,
                    3003,
                    3004,
                    957,
                    1478,
                    1479,
                    1992,
                    1993,
                    3017,
                    973,
                    1998,
                    4162,
                    2000,
                    4048,
                    3538,
                    1491,
                    986,
                    3547,
                    3037,
                    2526,
                    1503,
                    3038,
                    3039,
                    3041,
                    2531,
                    3042,
                    3043,
                    999,
                    2535,
                    4071,
                    2547,
                    1524,
                    3577,
                    4091,
                    4092,
                    4093
                ],
                "defaultdict": [
                    76
                ],
                "int": [
                    76,
                    2350,
                    3278,
                    1140,
                    183,
                    2169,
                    3674,
                    3676
                ],
                "prefix": [
                    77,
                    78
                ],
                "tf.reset_default_graph": [
                    95
                ],
                "reset_uids": [
                    96
                ],
                "phase": [
                    136,
                    98,
                    133,
                    102
                ],
                "tf.placeholder_with_default": [
                    98,
                    133
                ],
                "value": [
                    900,
                    2436,
                    902,
                    2437,
                    392,
                    393,
                    2444,
                    2449,
                    402,
                    403,
                    404,
                    405,
                    150,
                    406,
                    153,
                    2423,
                    430,
                    2615,
                    2616,
                    2618,
                    2621,
                    2628,
                    2653,
                    863,
                    2655,
                    865,
                    2659,
                    2660,
                    2413,
                    2419,
                    118,
                    1014
                ],
                "ValueError": [
                    2049,
                    265,
                    3215,
                    2704,
                    151,
                    3991,
                    3501,
                    3258,
                    3529,
                    3917,
                    2897,
                    594,
                    2002,
                    3030,
                    473,
                    3963,
                    2789,
                    2671,
                    2550,
                    2679,
                    2811,
                    1148
                ],
                "default_session": [
                    176,
                    177,
                    174
                ],
                "tf.get_default_session": [
                    174
                ],
                "session": [
                    2597,
                    198,
                    2662,
                    2663,
                    2604,
                    206,
                    177,
                    209,
                    210,
                    211,
                    2610,
                    2641,
                    2645,
                    221,
                    187,
                    189
                ],
                "os.environ.get": [
                    180,
                    183
                ],
                "os.environ": [
                    180,
                    183
                ],
                "os": [
                    180,
                    183
                ],
                "config": [
                    184,
                    186,
                    181
                ],
                "tf.ConfigProto": [
                    184,
                    181
                ],
                "num_thread": [
                    184,
                    183
                ],
                "tf.Session": [
                    186,
                    2702
                ],
                "session.graph.as_default": [
                    189
                ],
                "session.graph": [
                    189
                ],
                "variables": [
                    192,
                    2732,
                    2733,
                    2735,
                    190,
                    2718
                ],
                "tf.global_variables": [
                    190
                ],
                "candidate_vars": [
                    194,
                    195,
                    199,
                    201,
                    191
                ],
                "v": [
                    396,
                    399,
                    400,
                    401,
                    402,
                    404,
                    406,
                    407,
                    410,
                    412,
                    413,
                    702,
                    703,
                    192,
                    193,
                    194,
                    704,
                    705,
                    199,
                    201,
                    203,
                    204,
                    734,
                    735,
                    736,
                    737
                ],
                "getattr": [
                    193,
                    2828,
                    2958,
                    2928,
                    2868
                ],
                "candidate_vars.append": [
                    194
                ],
                "is_initialized": [
                    201,
                    198
                ],
                "session.run": [
                    206,
                    198,
                    2663
                ],
                "tf.is_variable_initialized": [
                    199
                ],
                "uninitialized_vars": [
                    200,
                    203,
                    205,
                    206
                ],
                "flag": [
                    201,
                    202
                ],
                "zip": [
                    2852,
                    1063,
                    201,
                    2826,
                    1070,
                    2961,
                    2931,
                    2582,
                    2615,
                    2653
                ],
                "uninitialized_vars.append": [
                    203
                ],
                "v._keras_initialized": [
                    204
                ],
                "tf.variables_initializer": [
                    206
                ],
                "hasattr": [
                    2439,
                    392,
                    2668,
                    590,
                    2415,
                    209,
                    405,
                    476
                ],
                "session.list_devices": [
                    210
                ],
                "device_lib.list_local_devices": [
                    210
                ],
                "device_lib": [
                    210
                ],
                "object": [
                    2489,
                    226
                ],
                "self.device": [
                    234,
                    230
                ],
                "self": [
                    2578,
                    2579,
                    2592,
                    2595,
                    2600,
                    2601,
                    2602,
                    2603,
                    2604,
                    2682,
                    2615,
                    2630,
                    2631,
                    2633,
                    2637,
                    2638,
                    2639,
                    2640,
                    2641,
                    2642,
                    2646,
                    2647,
                    2524,
                    2525,
                    2526,
                    2652,
                    2653,
                    2661,
                    230,
                    2535,
                    2536,
                    2664,
                    234,
                    2538,
                    2540,
                    2541,
                    2542,
                    2665,
                    2669,
                    2674,
                    2547,
                    2548,
                    2676,
                    2553,
                    2554,
                    2555,
                    2556,
                    2557
                ],
                "device": [
                    267,
                    234,
                    266
                ],
                "g": [
                    245,
                    247
                ],
                "op": [
                    248,
                    246,
                    247
                ],
                "_TfDeviceCaptureOp": [
                    246
                ],
                "g._apply_device_functions": [
                    247
                ],
                "op.device": [
                    248
                ],
                "device_type": [
                    264,
                    267,
                    263
                ],
                "device_type.upper": [
                    267,
                    263
                ],
                "_get_current_tf_device": [
                    266
                ],
                "device.device_type": [
                    267
                ],
                "list_devices": [
                    278
                ],
                "get_session": [
                    2400,
                    673,
                    2662,
                    2668,
                    2450,
                    2387,
                    2610,
                    278,
                    2423
                ],
                "x.name": [
                    2577,
                    2593,
                    2590,
                    279
                ],
                "x": [
                    3072,
                    3073,
                    1538,
                    515,
                    3075,
                    517,
                    518,
                    519,
                    520,
                    3586,
                    3587,
                    3084,
                    1550,
                    3086,
                    2576,
                    2577,
                    2066,
                    3087,
                    533,
                    2070,
                    2582,
                    2584,
                    2585,
                    1563,
                    2590,
                    2592,
                    2593,
                    2082,
                    2083,
                    2084,
                    1061,
                    3107,
                    1063,
                    3622,
                    1581,
                    1582,
                    1583,
                    2096,
                    3630,
                    566,
                    1078,
                    3126,
                    3128,
                    1082,
                    1083,
                    1596,
                    1085,
                    3131,
                    3132,
                    3133,
                    3640,
                    3645,
                    2115,
                    2116,
                    3646,
                    2118,
                    3649,
                    3650,
                    1609,
                    3146,
                    590,
                    591,
                    3150,
                    593,
                    1622,
                    3164,
                    3679,
                    1635,
                    3176,
                    619,
                    3691,
                    2669,
                    2670,
                    1648,
                    3696,
                    3188,
                    1142,
                    2678,
                    3702,
                    3705,
                    2171,
                    3707,
                    1661,
                    1156,
                    1159,
                    2183,
                    1161,
                    1674,
                    1163,
                    652,
                    1166,
                    1171,
                    2197,
                    2198,
                    1687,
                    3733,
                    3740,
                    673,
                    3746,
                    1699,
                    2211,
                    3747,
                    1711,
                    2224,
                    3772,
                    1215,
                    2240,
                    1729,
                    1731,
                    3779,
                    3785,
                    3786,
                    1752,
                    1755,
                    2267,
                    1759,
                    1248,
                    3812,
                    3814,
                    3815,
                    1774,
                    3822,
                    3823,
                    1265,
                    3324,
                    1282,
                    2308,
                    3851,
                    3340,
                    3341,
                    3342,
                    1807,
                    1808,
                    2321,
                    3343,
                    1299,
                    1811,
                    1812,
                    790,
                    279,
                    1815,
                    3344,
                    3860,
                    3356,
                    3869,
                    1312,
                    3873,
                    3874,
                    1325,
                    1837,
                    815,
                    1839,
                    2352,
                    3378,
                    1843,
                    308,
                    1846,
                    1847,
                    1851,
                    828,
                    3899,
                    1342,
                    1343,
                    1344,
                    1345,
                    3391,
                    2372,
                    3909,
                    3913,
                    3920,
                    3921,
                    1875,
                    2387,
                    1365,
                    3424,
                    3426,
                    1382,
                    1383,
                    1384,
                    3430,
                    3433,
                    3945,
                    1900,
                    2413,
                    2414,
                    2415,
                    2416,
                    2417,
                    3955,
                    2420,
                    2421,
                    1398,
                    1399,
                    1911,
                    2422,
                    3449,
                    3451,
                    3959,
                    3966,
                    3455,
                    3967,
                    3458,
                    2436,
                    1413,
                    1414,
                    2437,
                    2438,
                    2439,
                    2440,
                    2441,
                    1933,
                    2445,
                    2446,
                    1936,
                    2447,
                    3472,
                    1427,
                    3474,
                    3478,
                    3990,
                    3992,
                    3481,
                    3993,
                    925,
                    1949,
                    2462,
                    1440,
                    3999,
                    4000,
                    4004,
                    4007,
                    4009,
                    1963,
                    1452,
                    4012,
                    4015,
                    4016,
                    2484,
                    4022,
                    1464,
                    4024,
                    4025,
                    957,
                    1476,
                    1477,
                    1478,
                    1479,
                    1991,
                    1992,
                    3017,
                    1996,
                    973,
                    1998,
                    3534,
                    2000,
                    3537,
                    3538,
                    1491,
                    3539,
                    2005,
                    472,
                    474,
                    986,
                    476,
                    3547,
                    3548,
                    1503,
                    480,
                    2018,
                    2019,
                    3043,
                    3044,
                    999,
                    2547,
                    1524,
                    1014,
                    2039,
                    3574,
                    3577,
                    3578,
                    2044
                ],
                "x.device_type": [
                    279
                ],
                "explicitly_on_cpu": [
                    291,
                    293
                ],
                "_is_current_explicit_device": [
                    291
                ],
                "gpus_available": [
                    292,
                    293
                ],
                "len": [
                    3213,
                    3219,
                    3990,
                    3992,
                    3994,
                    4002,
                    292,
                    2084,
                    2980,
                    4011,
                    4017,
                    3256,
                    2238,
                    3262,
                    2257,
                    2258,
                    2259,
                    3282,
                    2647,
                    2787,
                    2665,
                    621,
                    2799,
                    2293,
                    2294,
                    2295,
                    2296,
                    2938
                ],
                "_get_available_gpus": [
                    292
                ],
                "tf.convert_to_tensor": [
                    308
                ],
                "dtype": [
                    896,
                    515,
                    517,
                    390,
                    391,
                    902,
                    765,
                    2437,
                    3472,
                    402,
                    894,
                    4114,
                    4115,
                    790,
                    4118,
                    4254,
                    428,
                    429,
                    430,
                    815,
                    308,
                    699,
                    700,
                    701,
                    957,
                    704,
                    4044,
                    4045,
                    4049,
                    857,
                    858,
                    731,
                    732,
                    733,
                    859,
                    736,
                    865,
                    3424,
                    4067,
                    4068,
                    4091,
                    4072,
                    2153,
                    2154,
                    4092,
                    2413,
                    4093,
                    4087,
                    4088,
                    3449,
                    762,
                    763,
                    764,
                    509,
                    510,
                    895
                ],
                "isinstance": [
                    3848,
                    403,
                    3613,
                    2732,
                    2350,
                    2607,
                    331,
                    2515,
                    2518,
                    2521,
                    3674,
                    2650,
                    3676,
                    480,
                    2529,
                    2541,
                    1140,
                    2169,
                    1147
                ],
                "tensor": [
                    354,
                    355,
                    2660,
                    357,
                    2629,
                    331,
                    2615,
                    2620,
                    2653,
                    2654,
                    2623
                ],
                "tf.SparseTensor": [
                    4162,
                    331,
                    396
                ],
                "is_sparse": [
                    354,
                    2669,
                    1933,
                    1082,
                    2654
                ],
                "tf.sparse_tensor_to_dense": [
                    355
                ],
                "name_scope": [
                    360
                ],
                "tf.name_scope": [
                    360
                ],
                "floatx": [
                    700,
                    4068,
                    1343,
                    391,
                    1383,
                    429,
                    4045,
                    4115,
                    4088,
                    858,
                    763,
                    732,
                    510,
                    895
                ],
                "sparse_coo": [
                    2657,
                    2658,
                    2659,
                    393,
                    394,
                    395,
                    397,
                    398,
                    399,
                    2655
                ],
                "value.tocoo": [
                    393,
                    2655
                ],
                "indices": [
                    2336,
                    2656,
                    4160,
                    2659,
                    4162,
                    394,
                    1228,
                    396,
                    4158
                ],
                "np.concatenate": [
                    2656,
                    394
                ],
                "np": [
                    899,
                    2437,
                    394,
                    395,
                    403,
                    4117,
                    925,
                    2084,
                    2089,
                    1580,
                    3375,
                    2628,
                    1477,
                    1993,
                    2633,
                    4047,
                    862,
                    2656,
                    2657,
                    2658,
                    4070,
                    2413,
                    4090
                ],
                "np.expand_dims": [
                    2657,
                    394,
                    395,
                    2658
                ],
                "sparse_coo.row": [
                    2657,
                    394
                ],
                "sparse_coo.col": [
                    2658,
                    395
                ],
                "sparse_coo.data": [
                    2659,
                    397
                ],
                "sparse_coo.shape": [
                    2659,
                    398,
                    399
                ],
                "v._keras_shape": [
                    404,
                    406,
                    399
                ],
                "v._uses_learning_phase": [
                    400,
                    407
                ],
                "tf.Variable": [
                    402
                ],
                "tf.as_dtype": [
                    896,
                    2629,
                    2438,
                    701,
                    2634,
                    2414,
                    402,
                    859,
                    764,
                    733
                ],
                "name": [
                    704,
                    736,
                    865,
                    515,
                    517,
                    902,
                    2536,
                    734,
                    430,
                    815,
                    4270,
                    4286,
                    402,
                    790,
                    4254,
                    828,
                    765,
                    702
                ],
                "np.ndarray": [
                    403
                ],
                "value.shape": [
                    2444,
                    2419,
                    404
                ],
                "int_shape": [
                    1991,
                    1063,
                    4362,
                    1070,
                    3989,
                    406,
                    4312,
                    925,
                    2462
                ],
                "v.constraint": [
                    410
                ],
                "constraint": [
                    410,
                    412
                ],
                "AttributeError": [
                    411,
                    534
                ],
                "v._constraint": [
                    412
                ],
                "tf.constant": [
                    2149,
                    1993,
                    2091,
                    2893,
                    430,
                    1806,
                    1810
                ],
                "shape": [
                    864,
                    513,
                    515,
                    517,
                    518,
                    901,
                    4071,
                    734,
                    430,
                    4048,
                    4093,
                    2197,
                    4118,
                    4091,
                    4092,
                    1949,
                    702,
                    511
                ],
                "is_tensor": [
                    472,
                    2618,
                    2678,
                    2670
                ],
                "str": [
                    2049,
                    3501,
                    3917,
                    474,
                    3033,
                    3034,
                    3963,
                    1150
                ],
                "type": [
                    474
                ],
                "tf_ops._TensorLike": [
                    480
                ],
                "tf_ops": [
                    480,
                    2586
                ],
                "tf_ops.is_dense_tensor_like": [
                    480
                ],
                "ndim": [
                    512,
                    513,
                    1159,
                    1927,
                    1166,
                    1167,
                    3990,
                    3992,
                    3993,
                    1178,
                    4000,
                    1061,
                    1837,
                    4016,
                    1076,
                    1846,
                    3005,
                    2115,
                    1875,
                    3028,
                    1755,
                    1887,
                    1889,
                    2787,
                    2788,
                    1893,
                    1897,
                    2793,
                    2799,
                    1142,
                    1143
                ],
                "tuple": [
                    513,
                    3848,
                    2956,
                    2957,
                    2964,
                    3860,
                    3613,
                    1068,
                    2732,
                    3630,
                    2607,
                    2098,
                    1075,
                    2880,
                    593,
                    2515,
                    2518,
                    2521,
                    2650,
                    2529,
                    2926,
                    2927,
                    1147,
                    2941
                ],
                "_": [
                    513,
                    2883,
                    1899,
                    4363,
                    2072
                ],
                "range": [
                    513,
                    2980,
                    2793,
                    3213,
                    4366,
                    4367,
                    1076,
                    1846,
                    2072,
                    1177,
                    2938,
                    1755,
                    4316,
                    3256
                ],
                "sparse": [
                    514
                ],
                "tf.sparse_placeholder": [
                    515
                ],
                "tf.placeholder": [
                    2419,
                    2443,
                    517
                ],
                "x._keras_shape": [
                    518,
                    591
                ],
                "x._uses_learning_phase": [
                    3086,
                    519
                ],
                "x.op.type": [
                    533
                ],
                "x.op": [
                    533
                ],
                "tf.shape": [
                    1153,
                    1156,
                    3860,
                    2842,
                    2082,
                    1063,
                    2855,
                    4138,
                    1070,
                    3630,
                    566,
                    2882,
                    1992,
                    3285,
                    3037,
                    3039,
                    1759,
                    2934,
                    2937
                ],
                "as_list": [
                    3526,
                    2096,
                    593,
                    2066,
                    703,
                    735
                ],
                "x.get_shape": [
                    2084,
                    619,
                    1808,
                    593,
                    2066,
                    2096,
                    1812
                ],
                "dims": [
                    619,
                    620,
                    621
                ],
                "_dims": [
                    619
                ],
                "x.dtype.base_dtype.name": [
                    652
                ],
                "x.dtype.base_dtype": [
                    1476,
                    1477,
                    1382,
                    652,
                    1581,
                    1582,
                    3341,
                    3342,
                    3131,
                    1342
                ],
                "x.dtype": [
                    1476,
                    1477,
                    1382,
                    2438,
                    652,
                    1581,
                    1582,
                    1807,
                    2414,
                    3341,
                    3342,
                    1811,
                    2584,
                    2585,
                    3131,
                    1342
                ],
                "eval": [
                    673
                ],
                "to_dense": [
                    1936,
                    673
                ],
                "tf_dtype": [
                    864,
                    896,
                    901,
                    2438,
                    701,
                    765,
                    2443,
                    702,
                    2414,
                    2419,
                    859,
                    764,
                    733,
                    734
                ],
                "tf.zeros": [
                    4093,
                    702
                ],
                "v.get_shape": [
                    735,
                    703
                ],
                "variable": [
                    704,
                    736,
                    865,
                    902,
                    765
                ],
                "tf.ones": [
                    4092,
                    734
                ],
                "tf.eye": [
                    765
                ],
                "size": [
                    2372,
                    765
                ],
                "tf.zeros_like": [
                    790
                ],
                "tf.ones_like": [
                    3041,
                    815
                ],
                "tf.identity": [
                    2547,
                    828
                ],
                "seed": [
                    897,
                    899,
                    901,
                    4116,
                    4117,
                    4118,
                    3374,
                    3375,
                    3378,
                    4046,
                    4047,
                    4049,
                    860,
                    862,
                    864,
                    4069,
                    4070,
                    4072,
                    4089,
                    4090,
                    4091
                ],
                "np.random.randint": [
                    899,
                    4070,
                    4047,
                    3375,
                    4117,
                    4090,
                    862
                ],
                "np.random": [
                    899,
                    4070,
                    4047,
                    3375,
                    4117,
                    4090,
                    862
                ],
                "tf.random_uniform_initializer": [
                    863
                ],
                "low": [
                    864
                ],
                "high": [
                    864
                ],
                "tf.random_normal_initializer": [
                    900
                ],
                "mean": [
                    1888,
                    1729,
                    1762,
                    1731,
                    1892,
                    901,
                    1734,
                    1896,
                    1904,
                    4048,
                    1780,
                    4118,
                    1911,
                    1752,
                    1887
                ],
                "scale": [
                    901
                ],
                "np.prod": [
                    925
                ],
                "tf.cast": [
                    3426,
                    1413,
                    1383,
                    2798,
                    3474,
                    4146,
                    1398,
                    2585,
                    3451,
                    3004,
                    957,
                    1343
                ],
                "tf.assign": [
                    2531,
                    973
                ],
                "new_x": [
                    973
                ],
                "tf.assign_add": [
                    986
                ],
                "increment": [
                    986
                ],
                "tf.assign_sub": [
                    999
                ],
                "decrement": [
                    999
                ],
                "moving_averages.assign_moving_average": [
                    1013
                ],
                "moving_averages": [
                    1013
                ],
                "momentum": [
                    1014
                ],
                "y": [
                    1153,
                    1159,
                    1161,
                    1674,
                    1163,
                    1167,
                    1171,
                    2582,
                    1687,
                    2584,
                    2585,
                    2586,
                    2588,
                    1061,
                    1070,
                    1076,
                    1079,
                    1083,
                    1596,
                    1085,
                    1609,
                    1622,
                    1635,
                    1899,
                    1648,
                    1909,
                    1143,
                    1661
                ],
                "x_shape": [
                    2082,
                    1062,
                    1065,
                    1067,
                    1068,
                    2092,
                    2093,
                    2096,
                    2097,
                    2066,
                    2098,
                    2068,
                    1078,
                    2070,
                    1081
                ],
                "i": [
                    1063,
                    1064,
                    1065,
                    1070,
                    1071,
                    1072,
                    4366,
                    4368,
                    4369,
                    2937,
                    2938,
                    4316,
                    4317,
                    4318
                ],
                "s": [
                    1063,
                    1067,
                    1070,
                    1074,
                    2072
                ],
                "tf.unstack": [
                    2817,
                    2822,
                    1070,
                    1063
                ],
                "x_shape.append": [
                    1065,
                    1067
                ],
                "y_shape": [
                    1069,
                    1072,
                    1074,
                    1075,
                    1079,
                    1081
                ],
                "y_shape.append": [
                    1072,
                    1074
                ],
                "y_permute_dim": [
                    1076,
                    1077,
                    1079
                ],
                "list": [
                    1798,
                    3848,
                    3213,
                    3861,
                    1177,
                    3613,
                    2980,
                    2732,
                    1837,
                    1838,
                    2607,
                    3631,
                    1076,
                    1846,
                    3256,
                    2515,
                    2518,
                    2263,
                    2264,
                    2521,
                    2650,
                    2524,
                    2525,
                    2793,
                    2541,
                    1147
                ],
                "y_permute_dim.pop": [
                    1077
                ],
                "xt": [
                    1080,
                    1078
                ],
                "tf.reshape": [
                    1153,
                    1156,
                    2183,
                    2197,
                    1949,
                    2093,
                    1078,
                    1079,
                    1080,
                    4151,
                    4155,
                    4158,
                    3278,
                    3285,
                    3038,
                    1762,
                    1763,
                    1767,
                    1771
                ],
                "yt": [
                    1080,
                    1079
                ],
                "tf.transpose": [
                    3586,
                    1163,
                    3478,
                    3873,
                    3746,
                    2981,
                    1963,
                    1079,
                    4155,
                    4158,
                    1215,
                    3649,
                    3267,
                    3785,
                    3920,
                    4186,
                    3547,
                    3430,
                    2794,
                    3822,
                    2801,
                    3705,
                    4222,
                    3966,
                    3455
                ],
                "tf.matmul": [
                    1080,
                    1171,
                    1085
                ],
                "out": [
                    1161,
                    1163,
                    1179,
                    1171,
                    1177,
                    1178,
                    1083,
                    1180,
                    1085,
                    1086
                ],
                "tf.sparse_tensor_dense_matmul": [
                    1083
                ],
                "axes": [
                    1160,
                    1161,
                    1163,
                    1165,
                    1166,
                    1167,
                    2980,
                    2981,
                    2350,
                    2351,
                    2352,
                    2793,
                    2794,
                    2801,
                    1140,
                    1141,
                    1144,
                    1146,
                    1147,
                    1150
                ],
                "x_ndim": [
                    1152,
                    1154,
                    1155,
                    1173,
                    1142,
                    1174,
                    1176,
                    1146,
                    1151
                ],
                "y_ndim": [
                    1152,
                    1154,
                    1155,
                    1173,
                    1174,
                    1143,
                    1146,
                    1151
                ],
                "a": [
                    1563,
                    1147
                ],
                "diff": [
                    1152,
                    1153,
                    1155,
                    1156,
                    1158,
                    1172,
                    1177
                ],
                "tf.concat": [
                    1936,
                    1153,
                    1156,
                    3037
                ],
                "tf.reduce_sum": [
                    1282,
                    1161,
                    1163,
                    3224,
                    3228
                ],
                "tf.multiply": [
                    1161,
                    1163
                ],
                "adj_x": [
                    1169,
                    1171,
                    1166
                ],
                "adj_y": [
                    1170,
                    1171,
                    1167
                ],
                "idx": [
                    1176,
                    1177,
                    1174
                ],
                "tf.squeeze": [
                    1888,
                    1890,
                    1894,
                    1898,
                    2224,
                    3702,
                    4182,
                    4183,
                    1177
                ],
                "expand_dims": [
                    2800,
                    1179
                ],
                "tf.nn.embedding_lookup": [
                    1228
                ],
                "tf.nn": [
                    1814,
                    3356,
                    3740,
                    3230,
                    3869,
                    4004,
                    4012,
                    3378,
                    3126,
                    3128,
                    3640,
                    4024,
                    3645,
                    3391,
                    1729,
                    1731,
                    3779,
                    3909,
                    3913,
                    3146,
                    1228,
                    3279,
                    3407,
                    3959,
                    3538,
                    1752,
                    3164,
                    3814,
                    3176,
                    1899,
                    1773,
                    3311,
                    3696,
                    3955,
                    3188,
                    1911,
                    3577,
                    3324
                ],
                "reference": [
                    1228
                ],
                "tf.reduce_max": [
                    1248
                ],
                "axis": [
                    1282,
                    1414,
                    1926,
                    1929,
                    1931,
                    1934,
                    3214,
                    1936,
                    2321,
                    3217,
                    1299,
                    1427,
                    2068,
                    2070,
                    3224,
                    2073,
                    3228,
                    1312,
                    1440,
                    2081,
                    2211,
                    2090,
                    1325,
                    2224,
                    3257,
                    3260,
                    3391,
                    1344,
                    3264,
                    3265,
                    1347,
                    3266,
                    1365,
                    1877,
                    1879,
                    1755,
                    1756,
                    3164,
                    1759,
                    1248,
                    1384,
                    1265,
                    1524,
                    1399
                ],
                "keepdims": [
                    1248,
                    1282,
                    1348,
                    1414,
                    1384,
                    1265,
                    1299,
                    1524,
                    1365,
                    1399
                ],
                "tf.reduce_min": [
                    1265
                ],
                "tf.reduce_prod": [
                    1299
                ],
                "tf.cumsum": [
                    1312
                ],
                "tf.cumprod": [
                    1325
                ],
                "tf.bool": [
                    1413,
                    1382,
                    3003,
                    2797,
                    2798,
                    4146,
                    1398,
                    2907,
                    1342
                ],
                "m": [
                    1344,
                    1345
                ],
                "tf.reduce_mean": [
                    1344,
                    1346,
                    1384
                ],
                "devs_squared": [
                    1345,
                    1346
                ],
                "tf.square": [
                    1345,
                    1452
                ],
                "tf.sqrt": [
                    1365,
                    1479
                ],
                "var": [
                    1729,
                    1889,
                    1731,
                    1763,
                    1890,
                    1734,
                    1905,
                    1780,
                    1365,
                    1911,
                    1752
                ],
                "tf.reduce_any": [
                    1399
                ],
                "tf.reduce_all": [
                    1414
                ],
                "tf.argmax": [
                    1427
                ],
                "tf.argmin": [
                    1440
                ],
                "tf.abs": [
                    1464
                ],
                "zero": [
                    1476,
                    3341,
                    1478,
                    3343
                ],
                "_to_tensor": [
                    1476,
                    1477,
                    3272,
                    3307,
                    1581,
                    1582,
                    3341,
                    3342,
                    3226,
                    3131
                ],
                "inf": [
                    1477,
                    1478
                ],
                "np.inf": [
                    1580,
                    1477
                ],
                "tf.clip_by_value": [
                    1478,
                    3273,
                    3308,
                    1583,
                    3343,
                    3227
                ],
                "tf.exp": [
                    1491
                ],
                "tf.log": [
                    3274,
                    3309,
                    4186,
                    3228,
                    4222,
                    1503
                ],
                "tf.reduce_logsumexp": [
                    1524
                ],
                "tf.round": [
                    1538
                ],
                "tf.sign": [
                    1550
                ],
                "tf.pow": [
                    1563
                ],
                "max_value": [
                    1577,
                    1578,
                    1579,
                    1580,
                    1582,
                    1583,
                    3130,
                    3131,
                    3132
                ],
                "min_value": [
                    1577,
                    1578,
                    1581,
                    1583
                ],
                "tf.equal": [
                    1596
                ],
                "tf.not_equal": [
                    1609
                ],
                "tf.greater": [
                    1622
                ],
                "tf.greater_equal": [
                    1635
                ],
                "tf.less": [
                    1648
                ],
                "tf.less_equal": [
                    1661
                ],
                "tf.maximum": [
                    1674
                ],
                "tf.minimum": [
                    3132,
                    1687
                ],
                "tf.sin": [
                    1699
                ],
                "tf.cos": [
                    1711
                ],
                "tf.nn.moments": [
                    1752,
                    1729
                ],
                "reduction_axes": [
                    1729,
                    1798,
                    1852,
                    1837,
                    1838,
                    1840,
                    1848,
                    1843,
                    1846,
                    1752,
                    1756
                ],
                "normed": [
                    1731,
                    1780,
                    1773,
                    1734
                ],
                "tf.nn.batch_normalization": [
                    1731,
                    1773,
                    1911
                ],
                "beta": [
                    1891,
                    1732,
                    1892,
                    1893,
                    1894,
                    1768,
                    1771,
                    1902,
                    1839,
                    1911,
                    1809,
                    1810,
                    1843,
                    1847,
                    1817,
                    1851
                ],
                "gamma": [
                    1732,
                    1764,
                    1767,
                    1895,
                    1896,
                    1897,
                    1898,
                    1805,
                    1806,
                    1839,
                    1901,
                    1911,
                    1843,
                    1847,
                    1816,
                    1851
                ],
                "epsilon": [
                    1733,
                    4186,
                    3226,
                    3272,
                    3307,
                    1903,
                    1841,
                    1779,
                    1844,
                    1911,
                    1849,
                    1818,
                    1853,
                    4222
                ],
                "target_shape": [
                    1760,
                    1762,
                    1763,
                    1767,
                    1771,
                    1754,
                    1757,
                    1759
                ],
                "target_shape.append": [
                    1757,
                    1759
                ],
                "tf.stack": [
                    1760,
                    2117,
                    2855,
                    3849,
                    4139,
                    4140,
                    3631,
                    2864,
                    2321,
                    2197,
                    2934,
                    3861,
                    2937,
                    2842,
                    2874,
                    3614
                ],
                "broadcast_mean": [
                    1762,
                    1775
                ],
                "broadcast_var": [
                    1776,
                    1763
                ],
                "broadcast_gamma": [
                    1778,
                    1765,
                    1767
                ],
                "broadcast_beta": [
                    1769,
                    1771,
                    1777
                ],
                "normalization_axis": [
                    1808,
                    1802,
                    1812,
                    1799
                ],
                "tf_data_format": [
                    3457,
                    3458,
                    3585,
                    1800,
                    1803,
                    3851,
                    3853,
                    3475,
                    3733,
                    3735,
                    3480,
                    3481,
                    3864,
                    1819,
                    3871,
                    3744,
                    3745,
                    3872,
                    3622,
                    3624,
                    3634,
                    3642,
                    3899,
                    3772,
                    3901,
                    3774,
                    3648,
                    3783,
                    3784,
                    3911,
                    3915,
                    3919,
                    3537,
                    1878,
                    3544,
                    1880,
                    1882,
                    3546,
                    1884,
                    3679,
                    3680,
                    3681,
                    3427,
                    3683,
                    3685,
                    3812,
                    3432,
                    3433,
                    3945,
                    3947,
                    3820,
                    3821,
                    1906,
                    3700,
                    3957,
                    3574,
                    3704,
                    3961,
                    3452,
                    3965,
                    3583
                ],
                "tf.nn.fused_batch_norm": [
                    1899,
                    1814
                ],
                "_has_nchw_support": [
                    4003,
                    3429,
                    1838,
                    3477,
                    1884,
                    3454
                ],
                "_broadcast_normalize_batch_in_training": [
                    1851,
                    1839
                ],
                "_fused_normalize_batch_in_training": [
                    1842
                ],
                "sorted": [
                    2579,
                    1846,
                    2631
                ],
                "_regular_normalize_batch_in_training": [
                    1847
                ],
                "zeros_like": [
                    1892,
                    2845
                ],
                "ones_like": [
                    1896
                ],
                "rank": [
                    1928,
                    1929,
                    1927
                ],
                "tensors": [
                    1936,
                    1933,
                    1934,
                    1927
                ],
                "tf.sparse_concat": [
                    1934
                ],
                "pattern": [
                    2240,
                    2306,
                    2308,
                    2117,
                    2118,
                    1963,
                    2299,
                    2262,
                    2266,
                    2267,
                    2239
                ],
                "data_format": [
                    2049,
                    2306,
                    3585,
                    4358,
                    3847,
                    3851,
                    3853,
                    3731,
                    3476,
                    3733,
                    3988,
                    4372,
                    3612,
                    3998,
                    3872,
                    3617,
                    3745,
                    4001,
                    4384,
                    3622,
                    3624,
                    4010,
                    4021,
                    3897,
                    3770,
                    3899,
                    3772,
                    3648,
                    1986,
                    3524,
                    3528,
                    3784,
                    1995,
                    3919,
                    3537,
                    2004,
                    2260,
                    4309,
                    3673,
                    3546,
                    2266,
                    3679,
                    2018,
                    3810,
                    3428,
                    3812,
                    3943,
                    3945,
                    3821,
                    3965,
                    3572,
                    2038,
                    3574,
                    3704,
                    2297,
                    2043,
                    3453
                ],
                "rows": [
                    1987,
                    1989,
                    1992,
                    2007,
                    2010
                ],
                "cols": [
                    1987,
                    1989,
                    1992,
                    2012,
                    2015
                ],
                "original_shape": [
                    1991,
                    2007,
                    2010,
                    2012,
                    2015
                ],
                "new_shape": [
                    1992,
                    1993,
                    1998,
                    2000,
                    4018,
                    4020,
                    4021,
                    4022,
                    3995,
                    3997,
                    3998,
                    3999
                ],
                "np.array": [
                    1993
                ],
                "height_factor": [
                    2040,
                    1993,
                    2010,
                    2045
                ],
                "width_factor": [
                    1993,
                    2041,
                    2046,
                    2015
                ],
                "permute_dimensions": [
                    4385,
                    4387,
                    4324,
                    1996,
                    2005
                ],
                "interpolation": [
                    1997,
                    1999
                ],
                "tf.image.resize_nearest_neighbor": [
                    1998
                ],
                "tf.image": [
                    2000,
                    1998
                ],
                "tf.image.resize_bilinear": [
                    2000
                ],
                "new_height": [
                    2008,
                    2017,
                    2010
                ],
                "new_width": [
                    2017,
                    2013,
                    2015
                ],
                "output_shape": [
                    3848,
                    3849,
                    4361,
                    3854,
                    3855,
                    3856,
                    3857,
                    3858,
                    3859,
                    3860,
                    3861,
                    3613,
                    3614,
                    3869,
                    3625,
                    3626,
                    3627,
                    3628,
                    3629,
                    3630,
                    3631,
                    3640,
                    3646,
                    3276,
                    3278,
                    3282,
                    2017,
                    2018
                ],
                "x.set_shape": [
                    2018
                ],
                "transpose_shape": [
                    2018,
                    2306,
                    4021,
                    2266,
                    3998
                ],
                "output": [
                    2827,
                    2828,
                    2955,
                    2958,
                    3213,
                    2963,
                    3219,
                    3224,
                    2842,
                    3226,
                    3227,
                    2845,
                    3228,
                    3231,
                    4380,
                    2849,
                    4381,
                    4385,
                    4387,
                    4388,
                    2860,
                    2935,
                    2867,
                    2868,
                    2870,
                    3256,
                    3262,
                    3267,
                    2940,
                    3272,
                    3273,
                    3274,
                    3276,
                    3278,
                    3285,
                    4323,
                    4324,
                    3307,
                    3308,
                    2925,
                    3309,
                    2928,
                    3312,
                    2934,
                    2039,
                    2040,
                    2041,
                    2042,
                    2044,
                    2045,
                    2046,
                    2047
                ],
                "repeat_elements": [
                    2039,
                    2040,
                    2041,
                    2044,
                    2045,
                    2046
                ],
                "depth_factor": [
                    2044,
                    2039
                ],
                "splits": [
                    2072,
                    2070
                ],
                "tf.split": [
                    2070
                ],
                "x_rep": [
                    2083,
                    2086,
                    2093,
                    2097,
                    2098,
                    2099,
                    2072,
                    2073
                ],
                "rep": [
                    2072,
                    2090,
                    2085
                ],
                "concatenate": [
                    2073,
                    4379,
                    4321,
                    4158
                ],
                "auxiliary_axis": [
                    2081,
                    2083,
                    2085,
                    2089
                ],
                "tf.expand_dims": [
                    2083,
                    2116,
                    2211,
                    3691,
                    3692,
                    3693,
                    4143,
                    4188
                ],
                "reps": [
                    2084,
                    2085,
                    2086,
                    2089,
                    2090,
                    2091,
                    2092
                ],
                "np.ones": [
                    2084
                ],
                "tf.tile": [
                    2937,
                    3042,
                    2854,
                    2118,
                    2086,
                    4155,
                    2933,
                    4151,
                    2841,
                    2171
                ],
                "np.delete": [
                    2089
                ],
                "x_rep.set_shape": [
                    2097
                ],
                "x_rep._keras_shape": [
                    2098
                ],
                "n": [
                    2169,
                    2170,
                    2171,
                    2117
                ],
                "stop": [
                    2152,
                    2142
                ],
                "start": [
                    2144,
                    2145,
                    2148,
                    2149,
                    2150,
                    2372,
                    2152
                ],
                "TypeError": [
                    2146,
                    2608,
                    2516,
                    2519,
                    2522,
                    2651
                ],
                "tf.cond": [
                    3017,
                    2148
                ],
                "start.dtype": [
                    2149
                ],
                "result": [
                    2152,
                    2154,
                    2155
                ],
                "tf.range": [
                    2152,
                    4155,
                    4151,
                    4143
                ],
                "step": [
                    2152
                ],
                "cast": [
                    2154,
                    3277
                ],
                "prod": [
                    2197
                ],
                "padding": [
                    3734,
                    3863,
                    3742,
                    3870,
                    3496,
                    3497,
                    3498,
                    3499,
                    3501,
                    3502,
                    3633,
                    3641,
                    3900,
                    3773,
                    2238,
                    2239,
                    3646,
                    3781,
                    3910,
                    3527,
                    3576,
                    3914,
                    3535,
                    3536,
                    2257,
                    2258,
                    2259,
                    3960,
                    2263,
                    2264,
                    3543,
                    3684,
                    3813,
                    3582,
                    3946,
                    3819,
                    3698,
                    3956,
                    2293,
                    2294,
                    2295,
                    2296,
                    2301,
                    2302,
                    2303
                ],
                "tf.pad": [
                    2240,
                    2267,
                    2308
                ],
                "normalize_data_format": [
                    3810,
                    3524,
                    4358,
                    3847,
                    3943,
                    3673,
                    3731,
                    3572,
                    2260,
                    3988,
                    3897,
                    4309,
                    2297,
                    3770,
                    3612
                ],
                "tf.one_hot": [
                    2336
                ],
                "num_classes": [
                    2336
                ],
                "tf.reverse": [
                    2352
                ],
                "tf.slice": [
                    2372
                ],
                "x.eval": [
                    2387
                ],
                "ops": [
                    2400,
                    2399
                ],
                "run": [
                    2400,
                    2450,
                    2423
                ],
                "np.asarray": [
                    2633,
                    2628,
                    2413,
                    2437
                ],
                "x.dtype.name.split": [
                    2438,
                    2414
                ],
                "x.dtype.name": [
                    2438,
                    2414
                ],
                "assign_placeholder": [
                    2440,
                    2443,
                    2445,
                    2446,
                    2416,
                    2449,
                    2419,
                    2420,
                    2421,
                    2423
                ],
                "x._assign_placeholder": [
                    2416,
                    2440,
                    2421,
                    2446
                ],
                "assign_op": [
                    2441,
                    2445,
                    2447,
                    2448,
                    2417,
                    2420,
                    2422,
                    2423
                ],
                "x._assign_op": [
                    2417,
                    2441,
                    2422,
                    2447
                ],
                "x.assign": [
                    2420,
                    2445
                ],
                "tuples": [
                    2433,
                    2436
                ],
                "assign_ops": [
                    2448,
                    2434,
                    2450
                ],
                "feed_dict": [
                    2435,
                    2660,
                    2663,
                    2449,
                    2450,
                    2652
                ],
                "assign_ops.append": [
                    2448
                ],
                "tf.Print": [
                    2484
                ],
                "message": [
                    2484
                ],
                "updates": [
                    2528,
                    2521,
                    2514,
                    2705
                ],
                "inputs": [
                    2817,
                    2705,
                    4373,
                    4376,
                    2607,
                    2682,
                    2615,
                    2878,
                    2882,
                    2883,
                    2889,
                    2892,
                    2515,
                    2650,
                    2524,
                    2653,
                    4319,
                    2787,
                    2794,
                    2670,
                    2674,
                    2676,
                    2678,
                    2810
                ],
                "outputs": [
                    2977,
                    2883,
                    2980,
                    2885,
                    2981,
                    2983,
                    2864,
                    2705,
                    2518,
                    2874,
                    2525
                ],
                "self.inputs": [
                    2669,
                    2524,
                    2653,
                    2615
                ],
                "self.outputs": [
                    2592,
                    2661,
                    2665,
                    2647,
                    2525,
                    2526
                ],
                "tf.control_dependencies": [
                    2526
                ],
                "updates_ops": [
                    2535,
                    2531,
                    2534,
                    2527
                ],
                "update": [
                    2528,
                    2529,
                    2530,
                    2534
                ],
                "p": [
                    2530,
                    2531,
                    4091
                ],
                "new_p": [
                    2530,
                    2531
                ],
                "updates_ops.append": [
                    2531,
                    2534
                ],
                "self.updates_op": [
                    2595,
                    2661,
                    2535
                ],
                "tf.group": [
                    2535
                ],
                "self.name": [
                    2536
                ],
                "self.feed_dict": [
                    2630,
                    2631,
                    2633,
                    2538,
                    2578,
                    2579,
                    2652
                ],
                "session_kwargs.pop": [
                    2538,
                    2540
                ],
                "session_kwargs": [
                    2538,
                    2540,
                    2548,
                    2549,
                    2552
                ],
                "self.fetches": [
                    2592,
                    2661,
                    2540,
                    2541,
                    2542,
                    2547
                ],
                "self.session_kwargs": [
                    2664,
                    2548
                ],
                "session_kwargs.keys": [
                    2552
                ],
                "self._callable_fn": [
                    2600,
                    2553,
                    2637,
                    2646
                ],
                "self._feed_arrays": [
                    2601,
                    2554,
                    2638
                ],
                "self._feed_symbols": [
                    2640,
                    2602,
                    2555
                ],
                "self._symbol_vals": [
                    2603,
                    2556,
                    2639
                ],
                "self._session": [
                    2641,
                    2604,
                    2557
                ],
                "callable_opts": [
                    2593,
                    2595,
                    2597,
                    2574,
                    2577,
                    2580,
                    2583
                ],
                "config_pb2.CallableOptions": [
                    2574
                ],
                "config_pb2": [
                    2574
                ],
                "feed_arrays": [
                    2601,
                    2638,
                    2576,
                    2642,
                    2611,
                    2623
                ],
                "callable_opts.feed.append": [
                    2577,
                    2580
                ],
                "callable_opts.feed": [
                    2577,
                    2580
                ],
                "key": [
                    2631,
                    2633,
                    2634,
                    2701,
                    2702,
                    2703,
                    2579,
                    2580
                ],
                "self.feed_dict.keys": [
                    2579,
                    2631
                ],
                "key.name": [
                    2580
                ],
                "feed_symbols": [
                    2602,
                    2640,
                    2643,
                    2613,
                    2582,
                    2620
                ],
                "symbol_vals": [
                    2603,
                    2639,
                    2644,
                    2614,
                    2582,
                    2621
                ],
                "connection": [
                    2589,
                    2590,
                    2583
                ],
                "callable_opts.tensor_connection.add": [
                    2583
                ],
                "callable_opts.tensor_connection": [
                    2583
                ],
                "y.dtype": [
                    2584
                ],
                "from_tensor": [
                    2586,
                    2587,
                    2588,
                    2589
                ],
                "tf_ops._as_graph_element": [
                    2586
                ],
                "connection.from_tensor": [
                    2589
                ],
                "from_tensor.name": [
                    2589
                ],
                "connection.to_tensor": [
                    2590
                ],
                "callable_opts.fetch.append": [
                    2593
                ],
                "callable_opts.fetch": [
                    2593
                ],
                "callable_opts.target.append": [
                    2595
                ],
                "callable_opts.target": [
                    2595
                ],
                "self.updates_op.name": [
                    2595
                ],
                "callable_fn": [
                    2600,
                    2597
                ],
                "session._make_callable_from_options": [
                    2597
                ],
                "array_vals": [
                    2632,
                    2627,
                    2612,
                    2646
                ],
                "feed_symbols.append": [
                    2620
                ],
                "symbol_vals.append": [
                    2621
                ],
                "feed_arrays.append": [
                    2623
                ],
                "array_vals.append": [
                    2632,
                    2627
                ],
                "as_numpy_dtype": [
                    2634,
                    2629
                ],
                "tensor.dtype": [
                    2629
                ],
                "key.dtype": [
                    2634
                ],
                "self._make_callable": [
                    2642
                ],
                "fetched": [
                    2646,
                    2647
                ],
                "self.feed_dict.copy": [
                    2652
                ],
                "fetches": [
                    2661,
                    2663
                ],
                "updated": [
                    2665,
                    2663
                ],
                "self._legacy_call": [
                    2674,
                    2682
                ],
                "self._call": [
                    2676
                ],
                "kwargs": [
                    2705,
                    2700,
                    2701
                ],
                "has_arg": [
                    2702
                ],
                "tf.Session.run": [
                    2702
                ],
                "Function.__init__": [
                    2702
                ],
                "Function": [
                    2705,
                    2702
                ],
                "msg": [
                    2704,
                    2703
                ],
                "tf.gradients": [
                    2718
                ],
                "loss": [
                    2718
                ],
                "map": [
                    2733
                ],
                "tf.stop_gradient": [
                    2733,
                    2735
                ],
                "inputs.get_shape": [
                    2810,
                    2787
                ],
                "mask": [
                    2821,
                    2822,
                    2796,
                    2797,
                    2798,
                    2799,
                    2800,
                    2801,
                    2895,
                    2904,
                    2910
                ],
                "mask.dtype": [
                    2797
                ],
                "mask.get_shape": [
                    2799
                ],
                "constants": [
                    2883,
                    2827,
                    2957,
                    2927,
                    2867,
                    2803,
                    2804
                ],
                "uses_learning_phase": [
                    2982,
                    2829,
                    3085,
                    2960,
                    2930,
                    2869,
                    2807,
                    3067,
                    3069
                ],
                "unroll": [
                    2809
                ],
                "states": [
                    2880,
                    2852,
                    2859,
                    2827,
                    2861,
                    2926,
                    2935,
                    2896,
                    2956,
                    2961,
                    2867,
                    2931,
                    2871,
                    2969,
                    2938,
                    2813
                ],
                "initial_states": [
                    2880,
                    2883,
                    2813
                ],
                "successive_states": [
                    2861,
                    2863,
                    2871,
                    2873,
                    2814
                ],
                "successive_outputs": [
                    2860,
                    2862,
                    2864,
                    2815,
                    2870,
                    2872,
                    2874,
                    2844,
                    2847
                ],
                "input_list": [
                    2817,
                    2826,
                    2819,
                    2866
                ],
                "go_backwards": [
                    2818,
                    2877,
                    2903,
                    2823
                ],
                "input_list.reverse": [
                    2819
                ],
                "mask_list": [
                    2824,
                    2826,
                    2822
                ],
                "mask_list.reverse": [
                    2824
                ],
                "inp": [
                    2867,
                    2826,
                    2827,
                    2866
                ],
                "mask_t": [
                    2937,
                    2854,
                    2826,
                    2924,
                    2933,
                    2841
                ],
                "new_states": [
                    2937,
                    2852,
                    2983,
                    2827,
                    2955,
                    2925,
                    2863,
                    2961,
                    2931,
                    2964,
                    2936,
                    2873,
                    2938,
                    2941,
                    2975
                ],
                "step_function": [
                    2883,
                    2827,
                    2955,
                    2925,
                    2867
                ],
                "tiled_mask_t": [
                    2849,
                    2854,
                    2856,
                    2933,
                    2935,
                    2841
                ],
                "prev_output": [
                    2849,
                    2845,
                    2847
                ],
                "tf.where": [
                    2849,
                    3041,
                    3043,
                    2856,
                    3150,
                    2935,
                    2937,
                    4091
                ],
                "return_states": [
                    2856,
                    2859,
                    2851
                ],
                "state": [
                    2852,
                    2858,
                    2961,
                    2962,
                    2931,
                    2932
                ],
                "new_state": [
                    2852,
                    2855,
                    2857,
                    2961,
                    2962,
                    2931,
                    2932
                ],
                "return_states.append": [
                    2856
                ],
                "successive_outputs.append": [
                    2860,
                    2870
                ],
                "successive_states.append": [
                    2861,
                    2871
                ],
                "last_output": [
                    2978,
                    2982,
                    2983,
                    2862,
                    2872
                ],
                "reverse": [
                    2904,
                    4156,
                    2878
                ],
                "time_steps": [
                    2882,
                    2886,
                    2890,
                    2967,
                    2908
                ],
                "output_ta": [
                    2977,
                    2978,
                    2884,
                    2969,
                    2974
                ],
                "tensor_array_ops.TensorArray": [
                    2888,
                    2906,
                    2884
                ],
                "tensor_array_ops": [
                    2888,
                    2906,
                    2884
                ],
                "outputs.dtype": [
                    2885
                ],
                "input_ta": [
                    2888,
                    2954,
                    2923,
                    2892
                ],
                "inputs.dtype": [
                    2889
                ],
                "input_ta.unstack": [
                    2892
                ],
                "time": [
                    2954,
                    2923,
                    2924,
                    2893,
                    2963,
                    2964,
                    2967,
                    2969,
                    2940,
                    2941
                ],
                "mask_ta": [
                    2906,
                    2924,
                    2910
                ],
                "mask_ta.unstack": [
                    2910
                ],
                "current_input": [
                    2954,
                    2923,
                    2955,
                    2925,
                    4144
                ],
                "input_ta.read": [
                    2954,
                    2923
                ],
                "mask_ta.read": [
                    2924
                ],
                "new_state.set_shape": [
                    2962,
                    2932
                ],
                "state.get_shape": [
                    2962,
                    2932
                ],
                "output_ta_t": [
                    2964,
                    2963,
                    2940,
                    2941
                ],
                "output_ta_t.write": [
                    2963,
                    2940
                ],
                "final_outputs": [
                    2974,
                    2973,
                    2966,
                    2975
                ],
                "control_flow_ops.while_loop": [
                    2966
                ],
                "control_flow_ops": [
                    2966
                ],
                "_step": [
                    2968
                ],
                "input_length": [
                    4228,
                    4232,
                    4183,
                    2972,
                    4190,
                    4223
                ],
                "last_time": [
                    2978,
                    2973
                ],
                "output_ta.stack": [
                    2977
                ],
                "output_ta.read": [
                    2978
                ],
                "outputs.get_shape": [
                    2980
                ],
                "last_output._uses_learning_phase": [
                    2982
                ],
                "condition.dtype": [
                    3003
                ],
                "condition": [
                    3042,
                    3043,
                    3017,
                    3005,
                    3003,
                    3004,
                    3037,
                    3038
                ],
                "cond_ndim": [
                    3029,
                    3033,
                    3035,
                    3036,
                    3005,
                    3006
                ],
                "callable": [
                    3072,
                    3012,
                    3078,
                    3024,
                    3026,
                    3007
                ],
                "then_expression": [
                    3009,
                    3011,
                    3043,
                    3024,
                    3025,
                    3028,
                    3039,
                    3007
                ],
                "then_expression_fn": [
                    3018,
                    3011
                ],
                "else_expression": [
                    3043,
                    3012,
                    3014,
                    3016,
                    3026,
                    3027
                ],
                "else_expression_fn": [
                    3016,
                    3019
                ],
                "expr_ndim": [
                    3034,
                    3036,
                    3028,
                    3029
                ],
                "ndim_diff": [
                    3036,
                    3037
                ],
                "cond_shape": [
                    3040,
                    3037,
                    3038
                ],
                "expr_shape": [
                    3040,
                    3041,
                    3039
                ],
                "shape_diff": [
                    3040,
                    3041
                ],
                "tile_shape": [
                    3041,
                    3042
                ],
                "training": [
                    3107,
                    3077,
                    3084,
                    3065,
                    3066,
                    3071
                ],
                "learning_phase": [
                    3066
                ],
                "alt": [
                    3107,
                    3078,
                    3079,
                    3081,
                    3084
                ],
                "switch": [
                    3084
                ],
                "in_train_phase": [
                    3107
                ],
                "alpha": [
                    3150,
                    3147,
                    3125,
                    3126
                ],
                "tf.nn.leaky_relu": [
                    3126
                ],
                "tf.nn.relu": [
                    3128
                ],
                "res": [
                    3146,
                    3148,
                    3150,
                    3279,
                    3285,
                    3287
                ],
                "tf.nn.elu": [
                    3146
                ],
                "tf.nn.softmax": [
                    3164
                ],
                "tf.nn.softplus": [
                    3176
                ],
                "tf.nn.softsign": [
                    3188
                ],
                "output_dimensions": [
                    3264,
                    3265,
                    3213,
                    3214,
                    3256,
                    3257
                ],
                "output.get_shape": [
                    3276,
                    3213,
                    3219,
                    3256,
                    3262
                ],
                "format": [
                    3216,
                    3217,
                    3219,
                    3259,
                    3260,
                    3262
                ],
                "from_logits": [
                    3305,
                    3222,
                    3271
                ],
                "_epsilon": [
                    3272,
                    3273,
                    3307,
                    3308,
                    3226,
                    3227
                ],
                "output.dtype.base_dtype": [
                    3272,
                    3226,
                    3307
                ],
                "output.dtype": [
                    3272,
                    3226,
                    3307
                ],
                "target": [
                    3228,
                    3277,
                    3230,
                    3311
                ],
                "tf.nn.softmax_cross_entropy_with_logits": [
                    3230
                ],
                "permutation": [
                    3265,
                    3266,
                    3267
                ],
                "targets": [
                    3280,
                    3277,
                    3407
                ],
                "flatten": [
                    3277
                ],
                "logits": [
                    3281,
                    3278
                ],
                "tf.nn.sparse_softmax_cross_entropy_with_logits": [
                    3279
                ],
                "tf.nn.sigmoid_cross_entropy_with_logits": [
                    3311
                ],
                "tf.nn.sigmoid": [
                    3324
                ],
                "one": [
                    3342,
                    3343
                ],
                "tf.nn.tanh": [
                    3356
                ],
                "retain_prob": [
                    3378,
                    3373
                ],
                "level": [
                    3373
                ],
                "tf.nn.dropout": [
                    3378
                ],
                "noise_shape": [
                    3378
                ],
                "tf.nn.l2_normalize": [
                    3391
                ],
                "tf.nn.in_top_k": [
                    3407
                ],
                "predictions": [
                    3407
                ],
                "k": [
                    3407
                ],
                "StrictVersion": [
                    3425,
                    3450,
                    3473
                ],
                "tf.__version__.split": [
                    3425,
                    3450,
                    3473
                ],
                "tf.__version__": [
                    3425,
                    3450,
                    3473
                ],
                "force_transpose": [
                    3622,
                    3618,
                    3620,
                    3454
                ],
                "kernel_shape": [
                    3526,
                    4362,
                    4363,
                    3533,
                    4312,
                    4313
                ],
                "kernel.get_shape": [
                    3526
                ],
                "kernel": [
                    4323,
                    3526,
                    3816,
                    4362,
                    3540,
                    3640,
                    3579,
                    4380,
                    3869,
                    3646,
                    4312
                ],
                "left_pad": [
                    3533,
                    3534
                ],
                "dilation_rate": [
                    3617,
                    3782,
                    3646,
                    3817,
                    3533,
                    3694,
                    3743,
                    3699,
                    3541,
                    3639,
                    3580,
                    3677,
                    3644,
                    3676
                ],
                "temporal_padding": [
                    3534
                ],
                "_preprocess_padding": [
                    3684,
                    3813,
                    3946,
                    3536,
                    3633,
                    3734,
                    3863,
                    3576,
                    3900,
                    3773
                ],
                "_preprocess_conv1d_input": [
                    3537,
                    3679
                ],
                "tf.nn.convolution": [
                    3577,
                    3538,
                    3814
                ],
                "strides": [
                    4360,
                    3736,
                    3865,
                    3738,
                    3867,
                    3741,
                    3869,
                    3635,
                    3637,
                    3640,
                    3902,
                    3775,
                    3777,
                    3905,
                    3780,
                    3909,
                    3913,
                    3542,
                    4311,
                    3674,
                    3675,
                    3687,
                    3690,
                    3818,
                    3948,
                    3951,
                    3697,
                    3955,
                    3959,
                    3581
                ],
                "_preprocess_conv2d_input": [
                    3622,
                    3733,
                    3574,
                    3899,
                    3772
                ],
                "tf.nn.conv2d_transpose": [
                    3640
                ],
                "tf.nn.atrous_conv2d_transpose": [
                    3645
                ],
                "spatial_start_dim": [
                    3689,
                    3702,
                    3691,
                    3686
                ],
                "depthwise_kernel": [
                    3696,
                    3740,
                    3779,
                    3692
                ],
                "pointwise_kernel": [
                    3696,
                    3740,
                    3693
                ],
                "tf.nn.separable_conv2d": [
                    3696,
                    3740
                ],
                "tf.nn.depthwise_conv2d": [
                    3779
                ],
                "_preprocess_conv3d_input": [
                    3945,
                    3851,
                    3812
                ],
                "tf.nn.conv3d_transpose": [
                    3869
                ],
                "pool_size": [
                    3906,
                    3909,
                    3913,
                    3949,
                    3952,
                    3955,
                    3959,
                    3903
                ],
                "pool_mode": [
                    3908,
                    3912,
                    3917,
                    3954,
                    3958,
                    3963
                ],
                "tf.nn.max_pool": [
                    3909
                ],
                "tf.nn.avg_pool": [
                    3913
                ],
                "tf.nn.max_pool3d": [
                    3955
                ],
                "tf.nn.avg_pool3d": [
                    3959
                ],
                "bias_shape": [
                    4002,
                    4007,
                    4009,
                    4011,
                    4015,
                    4017,
                    4018,
                    4020,
                    3989,
                    3990,
                    3992,
                    3994,
                    3995,
                    3997
                ],
                "bias": [
                    4004,
                    4007,
                    4009,
                    4012,
                    4015,
                    3989,
                    4022,
                    4024,
                    3999
                ],
                "reshape": [
                    4319,
                    4007,
                    4009,
                    4015,
                    4373,
                    4022,
                    4376,
                    4381,
                    3999
                ],
                "tf.nn.bias_add": [
                    4024,
                    4012,
                    4004
                ],
                "tf.random_normal": [
                    4048
                ],
                "stddev": [
                    4048,
                    4118
                ],
                "tf.random_uniform": [
                    4091,
                    4071
                ],
                "minval": [
                    4071
                ],
                "maxval": [
                    4071
                ],
                "tf.truncated_normal": [
                    4118
                ],
                "label_shape": [
                    4162,
                    4138,
                    4139,
                    4140,
                    4143,
                    4146,
                    4151,
                    4152,
                    4155,
                    4156
                ],
                "labels": [
                    4160,
                    4138
                ],
                "num_batches_tns": [
                    4139,
                    4151
                ],
                "max_num_labels_tns": [
                    4144,
                    4140,
                    4156
                ],
                "tf.fill": [
                    4146,
                    4143
                ],
                "init": [
                    4146,
                    4148
                ],
                "dense_mask": [
                    4153,
                    4147,
                    4157,
                    4149
                ],
                "functional_ops.scan": [
                    4147
                ],
                "functional_ops": [
                    4147
                ],
                "range_less_than": [
                    4147
                ],
                "label_lengths": [
                    4147
                ],
                "label_array": [
                    4153,
                    4151
                ],
                "label_ind": [
                    4153,
                    4158
                ],
                "tf.boolean_mask": [
                    4153,
                    4157
                ],
                "batch_array": [
                    4155,
                    4157
                ],
                "batch_ind": [
                    4157,
                    4158
                ],
                "vals_sparse": [
                    4160,
                    4162
                ],
                "tf.gather_nd": [
                    4160
                ],
                "tf.to_int64": [
                    4162
                ],
                "label_length": [
                    4184,
                    4182
                ],
                "tf.to_int32": [
                    4184,
                    4223,
                    4182,
                    4183
                ],
                "sparse_labels": [
                    4184,
                    4189
                ],
                "ctc_label_dense_to_sparse": [
                    4184
                ],
                "y_true": [
                    4184
                ],
                "y_pred": [
                    4227,
                    4231,
                    4186,
                    4188,
                    4222
                ],
                "ctc.ctc_loss": [
                    4188
                ],
                "ctc": [
                    4226,
                    4188,
                    4230
                ],
                "greedy": [
                    4225
                ],
                "decoded": [
                    4226,
                    4236,
                    4230
                ],
                "log_prob": [
                    4226,
                    4237,
                    4230
                ],
                "ctc.ctc_greedy_decoder": [
                    4226
                ],
                "ctc.ctc_beam_search_decoder": [
                    4230
                ],
                "beam_width": [
                    4232
                ],
                "top_paths": [
                    4233
                ],
                "decoded_dense": [
                    4235,
                    4237
                ],
                "tf.sparse_to_dense": [
                    4235
                ],
                "st.indices": [
                    4235
                ],
                "st": [
                    4235,
                    4236
                ],
                "st.dense_shape": [
                    4235
                ],
                "st.values": [
                    4235
                ],
                "tf.map_fn": [
                    4254
                ],
                "fn": [
                    4286,
                    4270,
                    4254
                ],
                "elems": [
                    4286,
                    4270,
                    4254
                ],
                "tf.foldl": [
                    4270
                ],
                "initializer": [
                    4286,
                    4270
                ],
                "tf.foldr": [
                    4286
                ],
                "stride": [
                    4317,
                    4318,
                    4311
                ],
                "output_length": [
                    4313,
                    4316
                ],
                "feature_dim": [
                    4320,
                    4377,
                    4363,
                    4374,
                    4313
                ],
                "filters": [
                    4313,
                    4363,
                    4382
                ],
                "xs": [
                    4321,
                    4365,
                    4379,
                    4373,
                    4376,
                    4315,
                    4319
                ],
                "slice_length": [
                    4317,
                    4319
                ],
                "kernel_size": [
                    4369,
                    4371,
                    4318
                ],
                "xs.append": [
                    4376,
                    4373,
                    4319
                ],
                "x_aggregate": [
                    4379,
                    4321,
                    4323,
                    4380
                ],
                "batch_dot": [
                    4323,
                    4380
                ],
                "stride_row": [
                    4360,
                    4368,
                    4369
                ],
                "stride_col": [
                    4360,
                    4370,
                    4371
                ],
                "output_row": [
                    4361,
                    4366,
                    4382
                ],
                "output_col": [
                    4361,
                    4382,
                    4367
                ],
                "j": [
                    4370,
                    4371,
                    4367
                ],
                "slice_row": [
                    4368,
                    4376,
                    4373
                ],
                "slice_col": [
                    4376,
                    4370,
                    4373
                ]
            },
            "filtered_variables_in_file": {
                "py_all": [
                    703,
                    735,
                    1933,
                    31
                ],
                "py_any": [
                    32,
                    2669,
                    2670,
                    2678,
                    1147
                ],
                "py_sum": [
                    33
                ],
                "py_slice": [
                    4368,
                    34,
                    4370,
                    4317
                ],
                "_SESSION": [
                    97,
                    40,
                    179,
                    186,
                    187,
                    221
                ],
                "_GRAPH_LEARNING_PHASES": [
                    132,
                    101,
                    102,
                    136,
                    137,
                    45,
                    153
                ],
                "_GRAPH_UID_DICTS": [
                    75,
                    76,
                    77,
                    78,
                    51,
                    85
                ],
                "_MANUAL_VAR_INIT": [
                    56,
                    188,
                    118
                ],
                "_LOCAL_DEVICES": [
                    277,
                    61,
                    278,
                    279
                ],
                "graph": [
                    131,
                    132,
                    136,
                    137,
                    74,
                    75,
                    76,
                    77,
                    78
                ],
                "tf.get_default_graph": [
                    131,
                    102,
                    74,
                    245,
                    153
                ],
                "tf": [
                    1538,
                    515,
                    3586,
                    517,
                    1550,
                    2070,
                    4118,
                    2585,
                    1563,
                    3614,
                    2082,
                    2083,
                    2086,
                    1063,
                    4138,
                    2091,
                    4139,
                    2093,
                    1070,
                    1583,
                    3630,
                    3631,
                    4140,
                    4143,
                    4146,
                    566,
                    1078,
                    1079,
                    1080,
                    3126,
                    1083,
                    1596,
                    1085,
                    3128,
                    3132,
                    3640,
                    3645,
                    3649,
                    4155,
                    2116,
                    2117,
                    2118,
                    2629,
                    4160,
                    1609,
                    74,
                    2634,
                    3146,
                    3150,
                    1622,
                    4182,
                    4183,
                    4184,
                    4186,
                    3164,
                    4188,
                    95,
                    98,
                    1635,
                    2148,
                    2149,
                    102,
                    2152,
                    3176,
                    3691,
                    3692,
                    3693,
                    1648,
                    3696,
                    3188,
                    3702,
                    3705,
                    2171,
                    1661,
                    4222,
                    4223,
                    1153,
                    131,
                    1156,
                    133,
                    2183,
                    1161,
                    1674,
                    1163,
                    4235,
                    2702,
                    1171,
                    2197,
                    1687,
                    3224,
                    153,
                    1177,
                    3227,
                    3228,
                    3740,
                    2718,
                    3230,
                    4254,
                    3746,
                    1699,
                    2211,
                    2733,
                    174,
                    1711,
                    2224,
                    2735,
                    4270,
                    181,
                    184,
                    186,
                    701,
                    190,
                    702,
                    1215,
                    1729,
                    2240,
                    1731,
                    3267,
                    3779,
                    4286,
                    199,
                    3273,
                    3274,
                    3785,
                    1228,
                    206,
                    3278,
                    3279,
                    3285,
                    1752,
                    2267,
                    733,
                    734,
                    1759,
                    1248,
                    1760,
                    1762,
                    1763,
                    3814,
                    1767,
                    2794,
                    1771,
                    3308,
                    1773,
                    2797,
                    2798,
                    3309,
                    1265,
                    2801,
                    3311,
                    3822,
                    245,
                    764,
                    765,
                    3324,
                    2817,
                    1282,
                    2308,
                    2822,
                    3849,
                    1806,
                    3343,
                    2321,
                    1810,
                    1299,
                    3860,
                    3861,
                    790,
                    1814,
                    2841,
                    2842,
                    3356,
                    3869,
                    1312,
                    2336,
                    2849,
                    3873,
                    2854,
                    2855,
                    2856,
                    1325,
                    815,
                    2352,
                    2864,
                    3378,
                    308,
                    2874,
                    828,
                    1342,
                    1343,
                    1344,
                    1345,
                    1346,
                    2882,
                    2372,
                    3391,
                    3909,
                    3913,
                    331,
                    2893,
                    3407,
                    3920,
                    1365,
                    859,
                    2907,
                    863,
                    1888,
                    3425,
                    1890,
                    355,
                    3426,
                    1382,
                    1383,
                    360,
                    1384,
                    1894,
                    1898,
                    1899,
                    3430,
                    2414,
                    2419,
                    3955,
                    2933,
                    1398,
                    1399,
                    1911,
                    2934,
                    2935,
                    2937,
                    3450,
                    3451,
                    3959,
                    3455,
                    896,
                    3966,
                    900,
                    1413,
                    1414,
                    2438,
                    2443,
                    396,
                    1934,
                    1936,
                    3473,
                    402,
                    1427,
                    3474,
                    4151,
                    3478,
                    1949,
                    4153,
                    1440,
                    4004,
                    2981,
                    1963,
                    1452,
                    4012,
                    430,
                    4157,
                    2484,
                    1464,
                    4024,
                    4158,
                    3003,
                    3004,
                    957,
                    1478,
                    1479,
                    1992,
                    1993,
                    3017,
                    973,
                    1998,
                    4162,
                    2000,
                    4048,
                    3538,
                    1491,
                    986,
                    3547,
                    3037,
                    2526,
                    1503,
                    3038,
                    3039,
                    3041,
                    2531,
                    3042,
                    3043,
                    999,
                    2535,
                    4071,
                    2547,
                    1524,
                    3577,
                    4091,
                    4092,
                    4093
                ],
                "defaultdict": [
                    76
                ],
                "prefix": [
                    77,
                    78
                ],
                "tf.reset_default_graph": [
                    95
                ],
                "reset_uids": [
                    96
                ],
                "phase": [
                    136,
                    98,
                    133,
                    102
                ],
                "tf.placeholder_with_default": [
                    98,
                    133
                ],
                "value": [
                    900,
                    2436,
                    902,
                    2437,
                    392,
                    393,
                    2444,
                    2449,
                    402,
                    403,
                    404,
                    405,
                    150,
                    406,
                    153,
                    2423,
                    430,
                    2615,
                    2616,
                    2618,
                    2621,
                    2628,
                    2653,
                    863,
                    2655,
                    865,
                    2659,
                    2660,
                    2413,
                    2419,
                    118,
                    1014
                ],
                "default_session": [
                    176,
                    177,
                    174
                ],
                "tf.get_default_session": [
                    174
                ],
                "session": [
                    2597,
                    198,
                    2662,
                    2663,
                    2604,
                    206,
                    177,
                    209,
                    210,
                    211,
                    2610,
                    2641,
                    2645,
                    221,
                    187,
                    189
                ],
                "os.environ.get": [
                    180,
                    183
                ],
                "os.environ": [
                    180,
                    183
                ],
                "os": [
                    180,
                    183
                ],
                "config": [
                    184,
                    186,
                    181
                ],
                "tf.ConfigProto": [
                    184,
                    181
                ],
                "num_thread": [
                    184,
                    183
                ],
                "tf.Session": [
                    186,
                    2702
                ],
                "session.graph.as_default": [
                    189
                ],
                "session.graph": [
                    189
                ],
                "variables": [
                    192,
                    2732,
                    2733,
                    2735,
                    190,
                    2718
                ],
                "tf.global_variables": [
                    190
                ],
                "candidate_vars": [
                    194,
                    195,
                    199,
                    201,
                    191
                ],
                "v": [
                    396,
                    399,
                    400,
                    401,
                    402,
                    404,
                    406,
                    407,
                    410,
                    412,
                    413,
                    702,
                    703,
                    192,
                    193,
                    194,
                    704,
                    705,
                    199,
                    201,
                    203,
                    204,
                    734,
                    735,
                    736,
                    737
                ],
                "candidate_vars.append": [
                    194
                ],
                "is_initialized": [
                    201,
                    198
                ],
                "session.run": [
                    206,
                    198,
                    2663
                ],
                "tf.is_variable_initialized": [
                    199
                ],
                "uninitialized_vars": [
                    200,
                    203,
                    205,
                    206
                ],
                "flag": [
                    201,
                    202
                ],
                "uninitialized_vars.append": [
                    203
                ],
                "v._keras_initialized": [
                    204
                ],
                "tf.variables_initializer": [
                    206
                ],
                "session.list_devices": [
                    210
                ],
                "device_lib.list_local_devices": [
                    210
                ],
                "device_lib": [
                    210
                ],
                "self.device": [
                    234,
                    230
                ],
                "self": [
                    2578,
                    2579,
                    2592,
                    2595,
                    2600,
                    2601,
                    2602,
                    2603,
                    2604,
                    2682,
                    2615,
                    2630,
                    2631,
                    2633,
                    2637,
                    2638,
                    2639,
                    2640,
                    2641,
                    2642,
                    2646,
                    2647,
                    2524,
                    2525,
                    2526,
                    2652,
                    2653,
                    2661,
                    230,
                    2535,
                    2536,
                    2664,
                    234,
                    2538,
                    2540,
                    2541,
                    2542,
                    2665,
                    2669,
                    2674,
                    2547,
                    2548,
                    2676,
                    2553,
                    2554,
                    2555,
                    2556,
                    2557
                ],
                "device": [
                    267,
                    234,
                    266
                ],
                "g": [
                    245,
                    247
                ],
                "op": [
                    248,
                    246,
                    247
                ],
                "_TfDeviceCaptureOp": [
                    246
                ],
                "g._apply_device_functions": [
                    247
                ],
                "op.device": [
                    248
                ],
                "device_type": [
                    264,
                    267,
                    263
                ],
                "device_type.upper": [
                    267,
                    263
                ],
                "_get_current_tf_device": [
                    266
                ],
                "device.device_type": [
                    267
                ],
                "list_devices": [
                    278
                ],
                "get_session": [
                    2400,
                    673,
                    2662,
                    2668,
                    2450,
                    2387,
                    2610,
                    278,
                    2423
                ],
                "x.name": [
                    2577,
                    2593,
                    2590,
                    279
                ],
                "x": [
                    3072,
                    3073,
                    1538,
                    515,
                    3075,
                    517,
                    518,
                    519,
                    520,
                    3586,
                    3587,
                    3084,
                    1550,
                    3086,
                    2576,
                    2577,
                    2066,
                    3087,
                    533,
                    2070,
                    2582,
                    2584,
                    2585,
                    1563,
                    2590,
                    2592,
                    2593,
                    2082,
                    2083,
                    2084,
                    1061,
                    3107,
                    1063,
                    3622,
                    1581,
                    1582,
                    1583,
                    2096,
                    3630,
                    566,
                    1078,
                    3126,
                    3128,
                    1082,
                    1083,
                    1596,
                    1085,
                    3131,
                    3132,
                    3133,
                    3640,
                    3645,
                    2115,
                    2116,
                    3646,
                    2118,
                    3649,
                    3650,
                    1609,
                    3146,
                    590,
                    591,
                    3150,
                    593,
                    1622,
                    3164,
                    3679,
                    1635,
                    3176,
                    619,
                    3691,
                    2669,
                    2670,
                    1648,
                    3696,
                    3188,
                    1142,
                    2678,
                    3702,
                    3705,
                    2171,
                    3707,
                    1661,
                    1156,
                    1159,
                    2183,
                    1161,
                    1674,
                    1163,
                    652,
                    1166,
                    1171,
                    2197,
                    2198,
                    1687,
                    3733,
                    3740,
                    673,
                    3746,
                    1699,
                    2211,
                    3747,
                    1711,
                    2224,
                    3772,
                    1215,
                    2240,
                    1729,
                    1731,
                    3779,
                    3785,
                    3786,
                    1752,
                    1755,
                    2267,
                    1759,
                    1248,
                    3812,
                    3814,
                    3815,
                    1774,
                    3822,
                    3823,
                    1265,
                    3324,
                    1282,
                    2308,
                    3851,
                    3340,
                    3341,
                    3342,
                    1807,
                    1808,
                    2321,
                    3343,
                    1299,
                    1811,
                    1812,
                    790,
                    279,
                    1815,
                    3344,
                    3860,
                    3356,
                    3869,
                    1312,
                    3873,
                    3874,
                    1325,
                    1837,
                    815,
                    1839,
                    2352,
                    3378,
                    1843,
                    308,
                    1846,
                    1847,
                    1851,
                    828,
                    3899,
                    1342,
                    1343,
                    1344,
                    1345,
                    3391,
                    2372,
                    3909,
                    3913,
                    3920,
                    3921,
                    1875,
                    2387,
                    1365,
                    3424,
                    3426,
                    1382,
                    1383,
                    1384,
                    3430,
                    3433,
                    3945,
                    1900,
                    2413,
                    2414,
                    2415,
                    2416,
                    2417,
                    3955,
                    2420,
                    2421,
                    1398,
                    1399,
                    1911,
                    2422,
                    3449,
                    3451,
                    3959,
                    3966,
                    3455,
                    3967,
                    3458,
                    2436,
                    1413,
                    1414,
                    2437,
                    2438,
                    2439,
                    2440,
                    2441,
                    1933,
                    2445,
                    2446,
                    1936,
                    2447,
                    3472,
                    1427,
                    3474,
                    3478,
                    3990,
                    3992,
                    3481,
                    3993,
                    925,
                    1949,
                    2462,
                    1440,
                    3999,
                    4000,
                    4004,
                    4007,
                    4009,
                    1963,
                    1452,
                    4012,
                    4015,
                    4016,
                    2484,
                    4022,
                    1464,
                    4024,
                    4025,
                    957,
                    1476,
                    1477,
                    1478,
                    1479,
                    1991,
                    1992,
                    3017,
                    1996,
                    973,
                    1998,
                    3534,
                    2000,
                    3537,
                    3538,
                    1491,
                    3539,
                    2005,
                    472,
                    474,
                    986,
                    476,
                    3547,
                    3548,
                    1503,
                    480,
                    2018,
                    2019,
                    3043,
                    3044,
                    999,
                    2547,
                    1524,
                    1014,
                    2039,
                    3574,
                    3577,
                    3578,
                    2044
                ],
                "x.device_type": [
                    279
                ],
                "explicitly_on_cpu": [
                    291,
                    293
                ],
                "_is_current_explicit_device": [
                    291
                ],
                "gpus_available": [
                    292,
                    293
                ],
                "_get_available_gpus": [
                    292
                ],
                "tf.convert_to_tensor": [
                    308
                ],
                "dtype": [
                    896,
                    515,
                    517,
                    390,
                    391,
                    902,
                    765,
                    2437,
                    3472,
                    402,
                    894,
                    4114,
                    4115,
                    790,
                    4118,
                    4254,
                    428,
                    429,
                    430,
                    815,
                    308,
                    699,
                    700,
                    701,
                    957,
                    704,
                    4044,
                    4045,
                    4049,
                    857,
                    858,
                    731,
                    732,
                    733,
                    859,
                    736,
                    865,
                    3424,
                    4067,
                    4068,
                    4091,
                    4072,
                    2153,
                    2154,
                    4092,
                    2413,
                    4093,
                    4087,
                    4088,
                    3449,
                    762,
                    763,
                    764,
                    509,
                    510,
                    895
                ],
                "tensor": [
                    354,
                    355,
                    2660,
                    357,
                    2629,
                    331,
                    2615,
                    2620,
                    2653,
                    2654,
                    2623
                ],
                "tf.SparseTensor": [
                    4162,
                    331,
                    396
                ],
                "is_sparse": [
                    354,
                    2669,
                    1933,
                    1082,
                    2654
                ],
                "tf.sparse_tensor_to_dense": [
                    355
                ],
                "name_scope": [
                    360
                ],
                "tf.name_scope": [
                    360
                ],
                "floatx": [
                    700,
                    4068,
                    1343,
                    391,
                    1383,
                    429,
                    4045,
                    4115,
                    4088,
                    858,
                    763,
                    732,
                    510,
                    895
                ],
                "sparse_coo": [
                    2657,
                    2658,
                    2659,
                    393,
                    394,
                    395,
                    397,
                    398,
                    399,
                    2655
                ],
                "value.tocoo": [
                    393,
                    2655
                ],
                "indices": [
                    2336,
                    2656,
                    4160,
                    2659,
                    4162,
                    394,
                    1228,
                    396,
                    4158
                ],
                "np.concatenate": [
                    2656,
                    394
                ],
                "np": [
                    899,
                    2437,
                    394,
                    395,
                    403,
                    4117,
                    925,
                    2084,
                    2089,
                    1580,
                    3375,
                    2628,
                    1477,
                    1993,
                    2633,
                    4047,
                    862,
                    2656,
                    2657,
                    2658,
                    4070,
                    2413,
                    4090
                ],
                "np.expand_dims": [
                    2657,
                    394,
                    395,
                    2658
                ],
                "sparse_coo.row": [
                    2657,
                    394
                ],
                "sparse_coo.col": [
                    2658,
                    395
                ],
                "sparse_coo.data": [
                    2659,
                    397
                ],
                "sparse_coo.shape": [
                    2659,
                    398,
                    399
                ],
                "v._keras_shape": [
                    404,
                    406,
                    399
                ],
                "v._uses_learning_phase": [
                    400,
                    407
                ],
                "tf.Variable": [
                    402
                ],
                "tf.as_dtype": [
                    896,
                    2629,
                    2438,
                    701,
                    2634,
                    2414,
                    402,
                    859,
                    764,
                    733
                ],
                "name": [
                    704,
                    736,
                    865,
                    515,
                    517,
                    902,
                    2536,
                    734,
                    430,
                    815,
                    4270,
                    4286,
                    402,
                    790,
                    4254,
                    828,
                    765,
                    702
                ],
                "np.ndarray": [
                    403
                ],
                "value.shape": [
                    2444,
                    2419,
                    404
                ],
                "int_shape": [
                    1991,
                    1063,
                    4362,
                    1070,
                    3989,
                    406,
                    4312,
                    925,
                    2462
                ],
                "v.constraint": [
                    410
                ],
                "constraint": [
                    410,
                    412
                ],
                "v._constraint": [
                    412
                ],
                "tf.constant": [
                    2149,
                    1993,
                    2091,
                    2893,
                    430,
                    1806,
                    1810
                ],
                "shape": [
                    864,
                    513,
                    515,
                    517,
                    518,
                    901,
                    4071,
                    734,
                    430,
                    4048,
                    4093,
                    2197,
                    4118,
                    4091,
                    4092,
                    1949,
                    702,
                    511
                ],
                "is_tensor": [
                    472,
                    2618,
                    2678,
                    2670
                ],
                "tf_ops._TensorLike": [
                    480
                ],
                "tf_ops": [
                    480,
                    2586
                ],
                "tf_ops.is_dense_tensor_like": [
                    480
                ],
                "ndim": [
                    512,
                    513,
                    1159,
                    1927,
                    1166,
                    1167,
                    3990,
                    3992,
                    3993,
                    1178,
                    4000,
                    1061,
                    1837,
                    4016,
                    1076,
                    1846,
                    3005,
                    2115,
                    1875,
                    3028,
                    1755,
                    1887,
                    1889,
                    2787,
                    2788,
                    1893,
                    1897,
                    2793,
                    2799,
                    1142,
                    1143
                ],
                "_": [
                    513,
                    2883,
                    1899,
                    4363,
                    2072
                ],
                "sparse": [
                    514
                ],
                "tf.sparse_placeholder": [
                    515
                ],
                "tf.placeholder": [
                    2419,
                    2443,
                    517
                ],
                "x._keras_shape": [
                    518,
                    591
                ],
                "x._uses_learning_phase": [
                    3086,
                    519
                ],
                "x.op.type": [
                    533
                ],
                "x.op": [
                    533
                ],
                "tf.shape": [
                    1153,
                    1156,
                    3860,
                    2842,
                    2082,
                    1063,
                    2855,
                    4138,
                    1070,
                    3630,
                    566,
                    2882,
                    1992,
                    3285,
                    3037,
                    3039,
                    1759,
                    2934,
                    2937
                ],
                "as_list": [
                    3526,
                    2096,
                    593,
                    2066,
                    703,
                    735
                ],
                "x.get_shape": [
                    2084,
                    619,
                    1808,
                    593,
                    2066,
                    2096,
                    1812
                ],
                "dims": [
                    619,
                    620,
                    621
                ],
                "_dims": [
                    619
                ],
                "x.dtype.base_dtype.name": [
                    652
                ],
                "x.dtype.base_dtype": [
                    1476,
                    1477,
                    1382,
                    652,
                    1581,
                    1582,
                    3341,
                    3342,
                    3131,
                    1342
                ],
                "x.dtype": [
                    1476,
                    1477,
                    1382,
                    2438,
                    652,
                    1581,
                    1582,
                    1807,
                    2414,
                    3341,
                    3342,
                    1811,
                    2584,
                    2585,
                    3131,
                    1342
                ],
                "to_dense": [
                    1936,
                    673
                ],
                "tf_dtype": [
                    864,
                    896,
                    901,
                    2438,
                    701,
                    765,
                    2443,
                    702,
                    2414,
                    2419,
                    859,
                    764,
                    733,
                    734
                ],
                "tf.zeros": [
                    4093,
                    702
                ],
                "v.get_shape": [
                    735,
                    703
                ],
                "variable": [
                    704,
                    736,
                    865,
                    902,
                    765
                ],
                "tf.ones": [
                    4092,
                    734
                ],
                "tf.eye": [
                    765
                ],
                "size": [
                    2372,
                    765
                ],
                "tf.zeros_like": [
                    790
                ],
                "tf.ones_like": [
                    3041,
                    815
                ],
                "tf.identity": [
                    2547,
                    828
                ],
                "seed": [
                    897,
                    899,
                    901,
                    4116,
                    4117,
                    4118,
                    3374,
                    3375,
                    3378,
                    4046,
                    4047,
                    4049,
                    860,
                    862,
                    864,
                    4069,
                    4070,
                    4072,
                    4089,
                    4090,
                    4091
                ],
                "np.random.randint": [
                    899,
                    4070,
                    4047,
                    3375,
                    4117,
                    4090,
                    862
                ],
                "np.random": [
                    899,
                    4070,
                    4047,
                    3375,
                    4117,
                    4090,
                    862
                ],
                "tf.random_uniform_initializer": [
                    863
                ],
                "low": [
                    864
                ],
                "high": [
                    864
                ],
                "tf.random_normal_initializer": [
                    900
                ],
                "mean": [
                    1888,
                    1729,
                    1762,
                    1731,
                    1892,
                    901,
                    1734,
                    1896,
                    1904,
                    4048,
                    1780,
                    4118,
                    1911,
                    1752,
                    1887
                ],
                "scale": [
                    901
                ],
                "np.prod": [
                    925
                ],
                "tf.cast": [
                    3426,
                    1413,
                    1383,
                    2798,
                    3474,
                    4146,
                    1398,
                    2585,
                    3451,
                    3004,
                    957,
                    1343
                ],
                "tf.assign": [
                    2531,
                    973
                ],
                "new_x": [
                    973
                ],
                "tf.assign_add": [
                    986
                ],
                "increment": [
                    986
                ],
                "tf.assign_sub": [
                    999
                ],
                "decrement": [
                    999
                ],
                "moving_averages.assign_moving_average": [
                    1013
                ],
                "moving_averages": [
                    1013
                ],
                "momentum": [
                    1014
                ],
                "y": [
                    1153,
                    1159,
                    1161,
                    1674,
                    1163,
                    1167,
                    1171,
                    2582,
                    1687,
                    2584,
                    2585,
                    2586,
                    2588,
                    1061,
                    1070,
                    1076,
                    1079,
                    1083,
                    1596,
                    1085,
                    1609,
                    1622,
                    1635,
                    1899,
                    1648,
                    1909,
                    1143,
                    1661
                ],
                "x_shape": [
                    2082,
                    1062,
                    1065,
                    1067,
                    1068,
                    2092,
                    2093,
                    2096,
                    2097,
                    2066,
                    2098,
                    2068,
                    1078,
                    2070,
                    1081
                ],
                "i": [
                    1063,
                    1064,
                    1065,
                    1070,
                    1071,
                    1072,
                    4366,
                    4368,
                    4369,
                    2937,
                    2938,
                    4316,
                    4317,
                    4318
                ],
                "s": [
                    1063,
                    1067,
                    1070,
                    1074,
                    2072
                ],
                "tf.unstack": [
                    2817,
                    2822,
                    1070,
                    1063
                ],
                "x_shape.append": [
                    1065,
                    1067
                ],
                "y_shape": [
                    1069,
                    1072,
                    1074,
                    1075,
                    1079,
                    1081
                ],
                "y_shape.append": [
                    1072,
                    1074
                ],
                "y_permute_dim": [
                    1076,
                    1077,
                    1079
                ],
                "y_permute_dim.pop": [
                    1077
                ],
                "xt": [
                    1080,
                    1078
                ],
                "tf.reshape": [
                    1153,
                    1156,
                    2183,
                    2197,
                    1949,
                    2093,
                    1078,
                    1079,
                    1080,
                    4151,
                    4155,
                    4158,
                    3278,
                    3285,
                    3038,
                    1762,
                    1763,
                    1767,
                    1771
                ],
                "yt": [
                    1080,
                    1079
                ],
                "tf.transpose": [
                    3586,
                    1163,
                    3478,
                    3873,
                    3746,
                    2981,
                    1963,
                    1079,
                    4155,
                    4158,
                    1215,
                    3649,
                    3267,
                    3785,
                    3920,
                    4186,
                    3547,
                    3430,
                    2794,
                    3822,
                    2801,
                    3705,
                    4222,
                    3966,
                    3455
                ],
                "tf.matmul": [
                    1080,
                    1171,
                    1085
                ],
                "out": [
                    1161,
                    1163,
                    1179,
                    1171,
                    1177,
                    1178,
                    1083,
                    1180,
                    1085,
                    1086
                ],
                "tf.sparse_tensor_dense_matmul": [
                    1083
                ],
                "axes": [
                    1160,
                    1161,
                    1163,
                    1165,
                    1166,
                    1167,
                    2980,
                    2981,
                    2350,
                    2351,
                    2352,
                    2793,
                    2794,
                    2801,
                    1140,
                    1141,
                    1144,
                    1146,
                    1147,
                    1150
                ],
                "x_ndim": [
                    1152,
                    1154,
                    1155,
                    1173,
                    1142,
                    1174,
                    1176,
                    1146,
                    1151
                ],
                "y_ndim": [
                    1152,
                    1154,
                    1155,
                    1173,
                    1174,
                    1143,
                    1146,
                    1151
                ],
                "a": [
                    1563,
                    1147
                ],
                "diff": [
                    1152,
                    1153,
                    1155,
                    1156,
                    1158,
                    1172,
                    1177
                ],
                "tf.concat": [
                    1936,
                    1153,
                    1156,
                    3037
                ],
                "tf.reduce_sum": [
                    1282,
                    1161,
                    1163,
                    3224,
                    3228
                ],
                "tf.multiply": [
                    1161,
                    1163
                ],
                "adj_x": [
                    1169,
                    1171,
                    1166
                ],
                "adj_y": [
                    1170,
                    1171,
                    1167
                ],
                "idx": [
                    1176,
                    1177,
                    1174
                ],
                "tf.squeeze": [
                    1888,
                    1890,
                    1894,
                    1898,
                    2224,
                    3702,
                    4182,
                    4183,
                    1177
                ],
                "expand_dims": [
                    2800,
                    1179
                ],
                "tf.nn.embedding_lookup": [
                    1228
                ],
                "tf.nn": [
                    1814,
                    3356,
                    3740,
                    3230,
                    3869,
                    4004,
                    4012,
                    3378,
                    3126,
                    3128,
                    3640,
                    4024,
                    3645,
                    3391,
                    1729,
                    1731,
                    3779,
                    3909,
                    3913,
                    3146,
                    1228,
                    3279,
                    3407,
                    3959,
                    3538,
                    1752,
                    3164,
                    3814,
                    3176,
                    1899,
                    1773,
                    3311,
                    3696,
                    3955,
                    3188,
                    1911,
                    3577,
                    3324
                ],
                "reference": [
                    1228
                ],
                "tf.reduce_max": [
                    1248
                ],
                "axis": [
                    1282,
                    1414,
                    1926,
                    1929,
                    1931,
                    1934,
                    3214,
                    1936,
                    2321,
                    3217,
                    1299,
                    1427,
                    2068,
                    2070,
                    3224,
                    2073,
                    3228,
                    1312,
                    1440,
                    2081,
                    2211,
                    2090,
                    1325,
                    2224,
                    3257,
                    3260,
                    3391,
                    1344,
                    3264,
                    3265,
                    1347,
                    3266,
                    1365,
                    1877,
                    1879,
                    1755,
                    1756,
                    3164,
                    1759,
                    1248,
                    1384,
                    1265,
                    1524,
                    1399
                ],
                "keepdims": [
                    1248,
                    1282,
                    1348,
                    1414,
                    1384,
                    1265,
                    1299,
                    1524,
                    1365,
                    1399
                ],
                "tf.reduce_min": [
                    1265
                ],
                "tf.reduce_prod": [
                    1299
                ],
                "tf.cumsum": [
                    1312
                ],
                "tf.cumprod": [
                    1325
                ],
                "tf.bool": [
                    1413,
                    1382,
                    3003,
                    2797,
                    2798,
                    4146,
                    1398,
                    2907,
                    1342
                ],
                "m": [
                    1344,
                    1345
                ],
                "tf.reduce_mean": [
                    1344,
                    1346,
                    1384
                ],
                "devs_squared": [
                    1345,
                    1346
                ],
                "tf.square": [
                    1345,
                    1452
                ],
                "tf.sqrt": [
                    1365,
                    1479
                ],
                "var": [
                    1729,
                    1889,
                    1731,
                    1763,
                    1890,
                    1734,
                    1905,
                    1780,
                    1365,
                    1911,
                    1752
                ],
                "tf.reduce_any": [
                    1399
                ],
                "tf.reduce_all": [
                    1414
                ],
                "tf.argmax": [
                    1427
                ],
                "tf.argmin": [
                    1440
                ],
                "tf.abs": [
                    1464
                ],
                "zero": [
                    1476,
                    3341,
                    1478,
                    3343
                ],
                "_to_tensor": [
                    1476,
                    1477,
                    3272,
                    3307,
                    1581,
                    1582,
                    3341,
                    3342,
                    3226,
                    3131
                ],
                "inf": [
                    1477,
                    1478
                ],
                "np.inf": [
                    1580,
                    1477
                ],
                "tf.clip_by_value": [
                    1478,
                    3273,
                    3308,
                    1583,
                    3343,
                    3227
                ],
                "tf.exp": [
                    1491
                ],
                "tf.log": [
                    3274,
                    3309,
                    4186,
                    3228,
                    4222,
                    1503
                ],
                "tf.reduce_logsumexp": [
                    1524
                ],
                "tf.round": [
                    1538
                ],
                "tf.sign": [
                    1550
                ],
                "tf.pow": [
                    1563
                ],
                "max_value": [
                    1577,
                    1578,
                    1579,
                    1580,
                    1582,
                    1583,
                    3130,
                    3131,
                    3132
                ],
                "min_value": [
                    1577,
                    1578,
                    1581,
                    1583
                ],
                "tf.equal": [
                    1596
                ],
                "tf.not_equal": [
                    1609
                ],
                "tf.greater": [
                    1622
                ],
                "tf.greater_equal": [
                    1635
                ],
                "tf.less": [
                    1648
                ],
                "tf.less_equal": [
                    1661
                ],
                "tf.maximum": [
                    1674
                ],
                "tf.minimum": [
                    3132,
                    1687
                ],
                "tf.sin": [
                    1699
                ],
                "tf.cos": [
                    1711
                ],
                "tf.nn.moments": [
                    1752,
                    1729
                ],
                "reduction_axes": [
                    1729,
                    1798,
                    1852,
                    1837,
                    1838,
                    1840,
                    1848,
                    1843,
                    1846,
                    1752,
                    1756
                ],
                "normed": [
                    1731,
                    1780,
                    1773,
                    1734
                ],
                "tf.nn.batch_normalization": [
                    1731,
                    1773,
                    1911
                ],
                "beta": [
                    1891,
                    1732,
                    1892,
                    1893,
                    1894,
                    1768,
                    1771,
                    1902,
                    1839,
                    1911,
                    1809,
                    1810,
                    1843,
                    1847,
                    1817,
                    1851
                ],
                "gamma": [
                    1732,
                    1764,
                    1767,
                    1895,
                    1896,
                    1897,
                    1898,
                    1805,
                    1806,
                    1839,
                    1901,
                    1911,
                    1843,
                    1847,
                    1816,
                    1851
                ],
                "epsilon": [
                    1733,
                    4186,
                    3226,
                    3272,
                    3307,
                    1903,
                    1841,
                    1779,
                    1844,
                    1911,
                    1849,
                    1818,
                    1853,
                    4222
                ],
                "target_shape": [
                    1760,
                    1762,
                    1763,
                    1767,
                    1771,
                    1754,
                    1757,
                    1759
                ],
                "target_shape.append": [
                    1757,
                    1759
                ],
                "tf.stack": [
                    1760,
                    2117,
                    2855,
                    3849,
                    4139,
                    4140,
                    3631,
                    2864,
                    2321,
                    2197,
                    2934,
                    3861,
                    2937,
                    2842,
                    2874,
                    3614
                ],
                "broadcast_mean": [
                    1762,
                    1775
                ],
                "broadcast_var": [
                    1776,
                    1763
                ],
                "broadcast_gamma": [
                    1778,
                    1765,
                    1767
                ],
                "broadcast_beta": [
                    1769,
                    1771,
                    1777
                ],
                "normalization_axis": [
                    1808,
                    1802,
                    1812,
                    1799
                ],
                "tf_data_format": [
                    3457,
                    3458,
                    3585,
                    1800,
                    1803,
                    3851,
                    3853,
                    3475,
                    3733,
                    3735,
                    3480,
                    3481,
                    3864,
                    1819,
                    3871,
                    3744,
                    3745,
                    3872,
                    3622,
                    3624,
                    3634,
                    3642,
                    3899,
                    3772,
                    3901,
                    3774,
                    3648,
                    3783,
                    3784,
                    3911,
                    3915,
                    3919,
                    3537,
                    1878,
                    3544,
                    1880,
                    1882,
                    3546,
                    1884,
                    3679,
                    3680,
                    3681,
                    3427,
                    3683,
                    3685,
                    3812,
                    3432,
                    3433,
                    3945,
                    3947,
                    3820,
                    3821,
                    1906,
                    3700,
                    3957,
                    3574,
                    3704,
                    3961,
                    3452,
                    3965,
                    3583
                ],
                "tf.nn.fused_batch_norm": [
                    1899,
                    1814
                ],
                "_has_nchw_support": [
                    4003,
                    3429,
                    1838,
                    3477,
                    1884,
                    3454
                ],
                "_broadcast_normalize_batch_in_training": [
                    1851,
                    1839
                ],
                "_fused_normalize_batch_in_training": [
                    1842
                ],
                "_regular_normalize_batch_in_training": [
                    1847
                ],
                "zeros_like": [
                    1892,
                    2845
                ],
                "ones_like": [
                    1896
                ],
                "rank": [
                    1928,
                    1929,
                    1927
                ],
                "tensors": [
                    1936,
                    1933,
                    1934,
                    1927
                ],
                "tf.sparse_concat": [
                    1934
                ],
                "pattern": [
                    2240,
                    2306,
                    2308,
                    2117,
                    2118,
                    1963,
                    2299,
                    2262,
                    2266,
                    2267,
                    2239
                ],
                "data_format": [
                    2049,
                    2306,
                    3585,
                    4358,
                    3847,
                    3851,
                    3853,
                    3731,
                    3476,
                    3733,
                    3988,
                    4372,
                    3612,
                    3998,
                    3872,
                    3617,
                    3745,
                    4001,
                    4384,
                    3622,
                    3624,
                    4010,
                    4021,
                    3897,
                    3770,
                    3899,
                    3772,
                    3648,
                    1986,
                    3524,
                    3528,
                    3784,
                    1995,
                    3919,
                    3537,
                    2004,
                    2260,
                    4309,
                    3673,
                    3546,
                    2266,
                    3679,
                    2018,
                    3810,
                    3428,
                    3812,
                    3943,
                    3945,
                    3821,
                    3965,
                    3572,
                    2038,
                    3574,
                    3704,
                    2297,
                    2043,
                    3453
                ],
                "rows": [
                    1987,
                    1989,
                    1992,
                    2007,
                    2010
                ],
                "cols": [
                    1987,
                    1989,
                    1992,
                    2012,
                    2015
                ],
                "original_shape": [
                    1991,
                    2007,
                    2010,
                    2012,
                    2015
                ],
                "new_shape": [
                    1992,
                    1993,
                    1998,
                    2000,
                    4018,
                    4020,
                    4021,
                    4022,
                    3995,
                    3997,
                    3998,
                    3999
                ],
                "np.array": [
                    1993
                ],
                "height_factor": [
                    2040,
                    1993,
                    2010,
                    2045
                ],
                "width_factor": [
                    1993,
                    2041,
                    2046,
                    2015
                ],
                "permute_dimensions": [
                    4385,
                    4387,
                    4324,
                    1996,
                    2005
                ],
                "interpolation": [
                    1997,
                    1999
                ],
                "tf.image.resize_nearest_neighbor": [
                    1998
                ],
                "tf.image": [
                    2000,
                    1998
                ],
                "tf.image.resize_bilinear": [
                    2000
                ],
                "new_height": [
                    2008,
                    2017,
                    2010
                ],
                "new_width": [
                    2017,
                    2013,
                    2015
                ],
                "output_shape": [
                    3848,
                    3849,
                    4361,
                    3854,
                    3855,
                    3856,
                    3857,
                    3858,
                    3859,
                    3860,
                    3861,
                    3613,
                    3614,
                    3869,
                    3625,
                    3626,
                    3627,
                    3628,
                    3629,
                    3630,
                    3631,
                    3640,
                    3646,
                    3276,
                    3278,
                    3282,
                    2017,
                    2018
                ],
                "x.set_shape": [
                    2018
                ],
                "transpose_shape": [
                    2018,
                    2306,
                    4021,
                    2266,
                    3998
                ],
                "output": [
                    2827,
                    2828,
                    2955,
                    2958,
                    3213,
                    2963,
                    3219,
                    3224,
                    2842,
                    3226,
                    3227,
                    2845,
                    3228,
                    3231,
                    4380,
                    2849,
                    4381,
                    4385,
                    4387,
                    4388,
                    2860,
                    2935,
                    2867,
                    2868,
                    2870,
                    3256,
                    3262,
                    3267,
                    2940,
                    3272,
                    3273,
                    3274,
                    3276,
                    3278,
                    3285,
                    4323,
                    4324,
                    3307,
                    3308,
                    2925,
                    3309,
                    2928,
                    3312,
                    2934,
                    2039,
                    2040,
                    2041,
                    2042,
                    2044,
                    2045,
                    2046,
                    2047
                ],
                "repeat_elements": [
                    2039,
                    2040,
                    2041,
                    2044,
                    2045,
                    2046
                ],
                "depth_factor": [
                    2044,
                    2039
                ],
                "splits": [
                    2072,
                    2070
                ],
                "tf.split": [
                    2070
                ],
                "x_rep": [
                    2083,
                    2086,
                    2093,
                    2097,
                    2098,
                    2099,
                    2072,
                    2073
                ],
                "rep": [
                    2072,
                    2090,
                    2085
                ],
                "concatenate": [
                    2073,
                    4379,
                    4321,
                    4158
                ],
                "auxiliary_axis": [
                    2081,
                    2083,
                    2085,
                    2089
                ],
                "tf.expand_dims": [
                    2083,
                    2116,
                    2211,
                    3691,
                    3692,
                    3693,
                    4143,
                    4188
                ],
                "reps": [
                    2084,
                    2085,
                    2086,
                    2089,
                    2090,
                    2091,
                    2092
                ],
                "np.ones": [
                    2084
                ],
                "tf.tile": [
                    2937,
                    3042,
                    2854,
                    2118,
                    2086,
                    4155,
                    2933,
                    4151,
                    2841,
                    2171
                ],
                "np.delete": [
                    2089
                ],
                "x_rep.set_shape": [
                    2097
                ],
                "x_rep._keras_shape": [
                    2098
                ],
                "n": [
                    2169,
                    2170,
                    2171,
                    2117
                ],
                "stop": [
                    2152,
                    2142
                ],
                "start": [
                    2144,
                    2145,
                    2148,
                    2149,
                    2150,
                    2372,
                    2152
                ],
                "tf.cond": [
                    3017,
                    2148
                ],
                "start.dtype": [
                    2149
                ],
                "result": [
                    2152,
                    2154,
                    2155
                ],
                "tf.range": [
                    2152,
                    4155,
                    4151,
                    4143
                ],
                "step": [
                    2152
                ],
                "cast": [
                    2154,
                    3277
                ],
                "prod": [
                    2197
                ],
                "padding": [
                    3734,
                    3863,
                    3742,
                    3870,
                    3496,
                    3497,
                    3498,
                    3499,
                    3501,
                    3502,
                    3633,
                    3641,
                    3900,
                    3773,
                    2238,
                    2239,
                    3646,
                    3781,
                    3910,
                    3527,
                    3576,
                    3914,
                    3535,
                    3536,
                    2257,
                    2258,
                    2259,
                    3960,
                    2263,
                    2264,
                    3543,
                    3684,
                    3813,
                    3582,
                    3946,
                    3819,
                    3698,
                    3956,
                    2293,
                    2294,
                    2295,
                    2296,
                    2301,
                    2302,
                    2303
                ],
                "tf.pad": [
                    2240,
                    2267,
                    2308
                ],
                "normalize_data_format": [
                    3810,
                    3524,
                    4358,
                    3847,
                    3943,
                    3673,
                    3731,
                    3572,
                    2260,
                    3988,
                    3897,
                    4309,
                    2297,
                    3770,
                    3612
                ],
                "tf.one_hot": [
                    2336
                ],
                "num_classes": [
                    2336
                ],
                "tf.reverse": [
                    2352
                ],
                "tf.slice": [
                    2372
                ],
                "x.eval": [
                    2387
                ],
                "ops": [
                    2400,
                    2399
                ],
                "run": [
                    2400,
                    2450,
                    2423
                ],
                "np.asarray": [
                    2633,
                    2628,
                    2413,
                    2437
                ],
                "x.dtype.name.split": [
                    2438,
                    2414
                ],
                "x.dtype.name": [
                    2438,
                    2414
                ],
                "assign_placeholder": [
                    2440,
                    2443,
                    2445,
                    2446,
                    2416,
                    2449,
                    2419,
                    2420,
                    2421,
                    2423
                ],
                "x._assign_placeholder": [
                    2416,
                    2440,
                    2421,
                    2446
                ],
                "assign_op": [
                    2441,
                    2445,
                    2447,
                    2448,
                    2417,
                    2420,
                    2422,
                    2423
                ],
                "x._assign_op": [
                    2417,
                    2441,
                    2422,
                    2447
                ],
                "x.assign": [
                    2420,
                    2445
                ],
                "tuples": [
                    2433,
                    2436
                ],
                "assign_ops": [
                    2448,
                    2434,
                    2450
                ],
                "feed_dict": [
                    2435,
                    2660,
                    2663,
                    2449,
                    2450,
                    2652
                ],
                "assign_ops.append": [
                    2448
                ],
                "tf.Print": [
                    2484
                ],
                "message": [
                    2484
                ],
                "updates": [
                    2528,
                    2521,
                    2514,
                    2705
                ],
                "inputs": [
                    2817,
                    2705,
                    4373,
                    4376,
                    2607,
                    2682,
                    2615,
                    2878,
                    2882,
                    2883,
                    2889,
                    2892,
                    2515,
                    2650,
                    2524,
                    2653,
                    4319,
                    2787,
                    2794,
                    2670,
                    2674,
                    2676,
                    2678,
                    2810
                ],
                "outputs": [
                    2977,
                    2883,
                    2980,
                    2885,
                    2981,
                    2983,
                    2864,
                    2705,
                    2518,
                    2874,
                    2525
                ],
                "self.inputs": [
                    2669,
                    2524,
                    2653,
                    2615
                ],
                "self.outputs": [
                    2592,
                    2661,
                    2665,
                    2647,
                    2525,
                    2526
                ],
                "tf.control_dependencies": [
                    2526
                ],
                "updates_ops": [
                    2535,
                    2531,
                    2534,
                    2527
                ],
                "update": [
                    2528,
                    2529,
                    2530,
                    2534
                ],
                "p": [
                    2530,
                    2531,
                    4091
                ],
                "new_p": [
                    2530,
                    2531
                ],
                "updates_ops.append": [
                    2531,
                    2534
                ],
                "self.updates_op": [
                    2595,
                    2661,
                    2535
                ],
                "tf.group": [
                    2535
                ],
                "self.name": [
                    2536
                ],
                "self.feed_dict": [
                    2630,
                    2631,
                    2633,
                    2538,
                    2578,
                    2579,
                    2652
                ],
                "session_kwargs.pop": [
                    2538,
                    2540
                ],
                "session_kwargs": [
                    2538,
                    2540,
                    2548,
                    2549,
                    2552
                ],
                "self.fetches": [
                    2592,
                    2661,
                    2540,
                    2541,
                    2542,
                    2547
                ],
                "self.session_kwargs": [
                    2664,
                    2548
                ],
                "session_kwargs.keys": [
                    2552
                ],
                "self._callable_fn": [
                    2600,
                    2553,
                    2637,
                    2646
                ],
                "self._feed_arrays": [
                    2601,
                    2554,
                    2638
                ],
                "self._feed_symbols": [
                    2640,
                    2602,
                    2555
                ],
                "self._symbol_vals": [
                    2603,
                    2556,
                    2639
                ],
                "self._session": [
                    2641,
                    2604,
                    2557
                ],
                "callable_opts": [
                    2593,
                    2595,
                    2597,
                    2574,
                    2577,
                    2580,
                    2583
                ],
                "config_pb2.CallableOptions": [
                    2574
                ],
                "config_pb2": [
                    2574
                ],
                "feed_arrays": [
                    2601,
                    2638,
                    2576,
                    2642,
                    2611,
                    2623
                ],
                "callable_opts.feed.append": [
                    2577,
                    2580
                ],
                "callable_opts.feed": [
                    2577,
                    2580
                ],
                "key": [
                    2631,
                    2633,
                    2634,
                    2701,
                    2702,
                    2703,
                    2579,
                    2580
                ],
                "self.feed_dict.keys": [
                    2579,
                    2631
                ],
                "key.name": [
                    2580
                ],
                "feed_symbols": [
                    2602,
                    2640,
                    2643,
                    2613,
                    2582,
                    2620
                ],
                "symbol_vals": [
                    2603,
                    2639,
                    2644,
                    2614,
                    2582,
                    2621
                ],
                "connection": [
                    2589,
                    2590,
                    2583
                ],
                "callable_opts.tensor_connection.add": [
                    2583
                ],
                "callable_opts.tensor_connection": [
                    2583
                ],
                "y.dtype": [
                    2584
                ],
                "from_tensor": [
                    2586,
                    2587,
                    2588,
                    2589
                ],
                "tf_ops._as_graph_element": [
                    2586
                ],
                "connection.from_tensor": [
                    2589
                ],
                "from_tensor.name": [
                    2589
                ],
                "connection.to_tensor": [
                    2590
                ],
                "callable_opts.fetch.append": [
                    2593
                ],
                "callable_opts.fetch": [
                    2593
                ],
                "callable_opts.target.append": [
                    2595
                ],
                "callable_opts.target": [
                    2595
                ],
                "self.updates_op.name": [
                    2595
                ],
                "callable_fn": [
                    2600,
                    2597
                ],
                "session._make_callable_from_options": [
                    2597
                ],
                "array_vals": [
                    2632,
                    2627,
                    2612,
                    2646
                ],
                "feed_symbols.append": [
                    2620
                ],
                "symbol_vals.append": [
                    2621
                ],
                "feed_arrays.append": [
                    2623
                ],
                "array_vals.append": [
                    2632,
                    2627
                ],
                "as_numpy_dtype": [
                    2634,
                    2629
                ],
                "tensor.dtype": [
                    2629
                ],
                "key.dtype": [
                    2634
                ],
                "self._make_callable": [
                    2642
                ],
                "fetched": [
                    2646,
                    2647
                ],
                "self.feed_dict.copy": [
                    2652
                ],
                "fetches": [
                    2661,
                    2663
                ],
                "updated": [
                    2665,
                    2663
                ],
                "self._legacy_call": [
                    2674,
                    2682
                ],
                "self._call": [
                    2676
                ],
                "kwargs": [
                    2705,
                    2700,
                    2701
                ],
                "has_arg": [
                    2702
                ],
                "tf.Session.run": [
                    2702
                ],
                "Function.__init__": [
                    2702
                ],
                "Function": [
                    2705,
                    2702
                ],
                "msg": [
                    2704,
                    2703
                ],
                "tf.gradients": [
                    2718
                ],
                "loss": [
                    2718
                ],
                "tf.stop_gradient": [
                    2733,
                    2735
                ],
                "inputs.get_shape": [
                    2810,
                    2787
                ],
                "mask": [
                    2821,
                    2822,
                    2796,
                    2797,
                    2798,
                    2799,
                    2800,
                    2801,
                    2895,
                    2904,
                    2910
                ],
                "mask.dtype": [
                    2797
                ],
                "mask.get_shape": [
                    2799
                ],
                "constants": [
                    2883,
                    2827,
                    2957,
                    2927,
                    2867,
                    2803,
                    2804
                ],
                "uses_learning_phase": [
                    2982,
                    2829,
                    3085,
                    2960,
                    2930,
                    2869,
                    2807,
                    3067,
                    3069
                ],
                "unroll": [
                    2809
                ],
                "states": [
                    2880,
                    2852,
                    2859,
                    2827,
                    2861,
                    2926,
                    2935,
                    2896,
                    2956,
                    2961,
                    2867,
                    2931,
                    2871,
                    2969,
                    2938,
                    2813
                ],
                "initial_states": [
                    2880,
                    2883,
                    2813
                ],
                "successive_states": [
                    2861,
                    2863,
                    2871,
                    2873,
                    2814
                ],
                "successive_outputs": [
                    2860,
                    2862,
                    2864,
                    2815,
                    2870,
                    2872,
                    2874,
                    2844,
                    2847
                ],
                "input_list": [
                    2817,
                    2826,
                    2819,
                    2866
                ],
                "go_backwards": [
                    2818,
                    2877,
                    2903,
                    2823
                ],
                "input_list.reverse": [
                    2819
                ],
                "mask_list": [
                    2824,
                    2826,
                    2822
                ],
                "mask_list.reverse": [
                    2824
                ],
                "inp": [
                    2867,
                    2826,
                    2827,
                    2866
                ],
                "mask_t": [
                    2937,
                    2854,
                    2826,
                    2924,
                    2933,
                    2841
                ],
                "new_states": [
                    2937,
                    2852,
                    2983,
                    2827,
                    2955,
                    2925,
                    2863,
                    2961,
                    2931,
                    2964,
                    2936,
                    2873,
                    2938,
                    2941,
                    2975
                ],
                "step_function": [
                    2883,
                    2827,
                    2955,
                    2925,
                    2867
                ],
                "tiled_mask_t": [
                    2849,
                    2854,
                    2856,
                    2933,
                    2935,
                    2841
                ],
                "prev_output": [
                    2849,
                    2845,
                    2847
                ],
                "tf.where": [
                    2849,
                    3041,
                    3043,
                    2856,
                    3150,
                    2935,
                    2937,
                    4091
                ],
                "return_states": [
                    2856,
                    2859,
                    2851
                ],
                "state": [
                    2852,
                    2858,
                    2961,
                    2962,
                    2931,
                    2932
                ],
                "new_state": [
                    2852,
                    2855,
                    2857,
                    2961,
                    2962,
                    2931,
                    2932
                ],
                "return_states.append": [
                    2856
                ],
                "successive_outputs.append": [
                    2860,
                    2870
                ],
                "successive_states.append": [
                    2861,
                    2871
                ],
                "last_output": [
                    2978,
                    2982,
                    2983,
                    2862,
                    2872
                ],
                "reverse": [
                    2904,
                    4156,
                    2878
                ],
                "time_steps": [
                    2882,
                    2886,
                    2890,
                    2967,
                    2908
                ],
                "output_ta": [
                    2977,
                    2978,
                    2884,
                    2969,
                    2974
                ],
                "tensor_array_ops.TensorArray": [
                    2888,
                    2906,
                    2884
                ],
                "tensor_array_ops": [
                    2888,
                    2906,
                    2884
                ],
                "outputs.dtype": [
                    2885
                ],
                "input_ta": [
                    2888,
                    2954,
                    2923,
                    2892
                ],
                "inputs.dtype": [
                    2889
                ],
                "input_ta.unstack": [
                    2892
                ],
                "time": [
                    2954,
                    2923,
                    2924,
                    2893,
                    2963,
                    2964,
                    2967,
                    2969,
                    2940,
                    2941
                ],
                "mask_ta": [
                    2906,
                    2924,
                    2910
                ],
                "mask_ta.unstack": [
                    2910
                ],
                "current_input": [
                    2954,
                    2923,
                    2955,
                    2925,
                    4144
                ],
                "input_ta.read": [
                    2954,
                    2923
                ],
                "mask_ta.read": [
                    2924
                ],
                "new_state.set_shape": [
                    2962,
                    2932
                ],
                "state.get_shape": [
                    2962,
                    2932
                ],
                "output_ta_t": [
                    2964,
                    2963,
                    2940,
                    2941
                ],
                "output_ta_t.write": [
                    2963,
                    2940
                ],
                "final_outputs": [
                    2974,
                    2973,
                    2966,
                    2975
                ],
                "control_flow_ops.while_loop": [
                    2966
                ],
                "control_flow_ops": [
                    2966
                ],
                "_step": [
                    2968
                ],
                "input_length": [
                    4228,
                    4232,
                    4183,
                    2972,
                    4190,
                    4223
                ],
                "last_time": [
                    2978,
                    2973
                ],
                "output_ta.stack": [
                    2977
                ],
                "output_ta.read": [
                    2978
                ],
                "outputs.get_shape": [
                    2980
                ],
                "last_output._uses_learning_phase": [
                    2982
                ],
                "condition.dtype": [
                    3003
                ],
                "condition": [
                    3042,
                    3043,
                    3017,
                    3005,
                    3003,
                    3004,
                    3037,
                    3038
                ],
                "cond_ndim": [
                    3029,
                    3033,
                    3035,
                    3036,
                    3005,
                    3006
                ],
                "then_expression": [
                    3009,
                    3011,
                    3043,
                    3024,
                    3025,
                    3028,
                    3039,
                    3007
                ],
                "then_expression_fn": [
                    3018,
                    3011
                ],
                "else_expression": [
                    3043,
                    3012,
                    3014,
                    3016,
                    3026,
                    3027
                ],
                "else_expression_fn": [
                    3016,
                    3019
                ],
                "expr_ndim": [
                    3034,
                    3036,
                    3028,
                    3029
                ],
                "ndim_diff": [
                    3036,
                    3037
                ],
                "cond_shape": [
                    3040,
                    3037,
                    3038
                ],
                "expr_shape": [
                    3040,
                    3041,
                    3039
                ],
                "shape_diff": [
                    3040,
                    3041
                ],
                "tile_shape": [
                    3041,
                    3042
                ],
                "training": [
                    3107,
                    3077,
                    3084,
                    3065,
                    3066,
                    3071
                ],
                "learning_phase": [
                    3066
                ],
                "alt": [
                    3107,
                    3078,
                    3079,
                    3081,
                    3084
                ],
                "switch": [
                    3084
                ],
                "in_train_phase": [
                    3107
                ],
                "alpha": [
                    3150,
                    3147,
                    3125,
                    3126
                ],
                "tf.nn.leaky_relu": [
                    3126
                ],
                "tf.nn.relu": [
                    3128
                ],
                "res": [
                    3146,
                    3148,
                    3150,
                    3279,
                    3285,
                    3287
                ],
                "tf.nn.elu": [
                    3146
                ],
                "tf.nn.softmax": [
                    3164
                ],
                "tf.nn.softplus": [
                    3176
                ],
                "tf.nn.softsign": [
                    3188
                ],
                "output_dimensions": [
                    3264,
                    3265,
                    3213,
                    3214,
                    3256,
                    3257
                ],
                "output.get_shape": [
                    3276,
                    3213,
                    3219,
                    3256,
                    3262
                ],
                "from_logits": [
                    3305,
                    3222,
                    3271
                ],
                "_epsilon": [
                    3272,
                    3273,
                    3307,
                    3308,
                    3226,
                    3227
                ],
                "output.dtype.base_dtype": [
                    3272,
                    3226,
                    3307
                ],
                "output.dtype": [
                    3272,
                    3226,
                    3307
                ],
                "target": [
                    3228,
                    3277,
                    3230,
                    3311
                ],
                "tf.nn.softmax_cross_entropy_with_logits": [
                    3230
                ],
                "permutation": [
                    3265,
                    3266,
                    3267
                ],
                "targets": [
                    3280,
                    3277,
                    3407
                ],
                "flatten": [
                    3277
                ],
                "logits": [
                    3281,
                    3278
                ],
                "tf.nn.sparse_softmax_cross_entropy_with_logits": [
                    3279
                ],
                "tf.nn.sigmoid_cross_entropy_with_logits": [
                    3311
                ],
                "tf.nn.sigmoid": [
                    3324
                ],
                "one": [
                    3342,
                    3343
                ],
                "tf.nn.tanh": [
                    3356
                ],
                "retain_prob": [
                    3378,
                    3373
                ],
                "level": [
                    3373
                ],
                "tf.nn.dropout": [
                    3378
                ],
                "noise_shape": [
                    3378
                ],
                "tf.nn.l2_normalize": [
                    3391
                ],
                "tf.nn.in_top_k": [
                    3407
                ],
                "predictions": [
                    3407
                ],
                "k": [
                    3407
                ],
                "StrictVersion": [
                    3425,
                    3450,
                    3473
                ],
                "tf.__version__.split": [
                    3425,
                    3450,
                    3473
                ],
                "tf.__version__": [
                    3425,
                    3450,
                    3473
                ],
                "force_transpose": [
                    3622,
                    3618,
                    3620,
                    3454
                ],
                "kernel_shape": [
                    3526,
                    4362,
                    4363,
                    3533,
                    4312,
                    4313
                ],
                "kernel.get_shape": [
                    3526
                ],
                "kernel": [
                    4323,
                    3526,
                    3816,
                    4362,
                    3540,
                    3640,
                    3579,
                    4380,
                    3869,
                    3646,
                    4312
                ],
                "left_pad": [
                    3533,
                    3534
                ],
                "dilation_rate": [
                    3617,
                    3782,
                    3646,
                    3817,
                    3533,
                    3694,
                    3743,
                    3699,
                    3541,
                    3639,
                    3580,
                    3677,
                    3644,
                    3676
                ],
                "temporal_padding": [
                    3534
                ],
                "_preprocess_padding": [
                    3684,
                    3813,
                    3946,
                    3536,
                    3633,
                    3734,
                    3863,
                    3576,
                    3900,
                    3773
                ],
                "_preprocess_conv1d_input": [
                    3537,
                    3679
                ],
                "tf.nn.convolution": [
                    3577,
                    3538,
                    3814
                ],
                "strides": [
                    4360,
                    3736,
                    3865,
                    3738,
                    3867,
                    3741,
                    3869,
                    3635,
                    3637,
                    3640,
                    3902,
                    3775,
                    3777,
                    3905,
                    3780,
                    3909,
                    3913,
                    3542,
                    4311,
                    3674,
                    3675,
                    3687,
                    3690,
                    3818,
                    3948,
                    3951,
                    3697,
                    3955,
                    3959,
                    3581
                ],
                "_preprocess_conv2d_input": [
                    3622,
                    3733,
                    3574,
                    3899,
                    3772
                ],
                "tf.nn.conv2d_transpose": [
                    3640
                ],
                "tf.nn.atrous_conv2d_transpose": [
                    3645
                ],
                "spatial_start_dim": [
                    3689,
                    3702,
                    3691,
                    3686
                ],
                "depthwise_kernel": [
                    3696,
                    3740,
                    3779,
                    3692
                ],
                "pointwise_kernel": [
                    3696,
                    3740,
                    3693
                ],
                "tf.nn.separable_conv2d": [
                    3696,
                    3740
                ],
                "tf.nn.depthwise_conv2d": [
                    3779
                ],
                "_preprocess_conv3d_input": [
                    3945,
                    3851,
                    3812
                ],
                "tf.nn.conv3d_transpose": [
                    3869
                ],
                "pool_size": [
                    3906,
                    3909,
                    3913,
                    3949,
                    3952,
                    3955,
                    3959,
                    3903
                ],
                "pool_mode": [
                    3908,
                    3912,
                    3917,
                    3954,
                    3958,
                    3963
                ],
                "tf.nn.max_pool": [
                    3909
                ],
                "tf.nn.avg_pool": [
                    3913
                ],
                "tf.nn.max_pool3d": [
                    3955
                ],
                "tf.nn.avg_pool3d": [
                    3959
                ],
                "bias_shape": [
                    4002,
                    4007,
                    4009,
                    4011,
                    4015,
                    4017,
                    4018,
                    4020,
                    3989,
                    3990,
                    3992,
                    3994,
                    3995,
                    3997
                ],
                "bias": [
                    4004,
                    4007,
                    4009,
                    4012,
                    4015,
                    3989,
                    4022,
                    4024,
                    3999
                ],
                "reshape": [
                    4319,
                    4007,
                    4009,
                    4015,
                    4373,
                    4022,
                    4376,
                    4381,
                    3999
                ],
                "tf.nn.bias_add": [
                    4024,
                    4012,
                    4004
                ],
                "tf.random_normal": [
                    4048
                ],
                "stddev": [
                    4048,
                    4118
                ],
                "tf.random_uniform": [
                    4091,
                    4071
                ],
                "minval": [
                    4071
                ],
                "maxval": [
                    4071
                ],
                "tf.truncated_normal": [
                    4118
                ],
                "label_shape": [
                    4162,
                    4138,
                    4139,
                    4140,
                    4143,
                    4146,
                    4151,
                    4152,
                    4155,
                    4156
                ],
                "labels": [
                    4160,
                    4138
                ],
                "num_batches_tns": [
                    4139,
                    4151
                ],
                "max_num_labels_tns": [
                    4144,
                    4140,
                    4156
                ],
                "tf.fill": [
                    4146,
                    4143
                ],
                "init": [
                    4146,
                    4148
                ],
                "dense_mask": [
                    4153,
                    4147,
                    4157,
                    4149
                ],
                "functional_ops.scan": [
                    4147
                ],
                "functional_ops": [
                    4147
                ],
                "range_less_than": [
                    4147
                ],
                "label_lengths": [
                    4147
                ],
                "label_array": [
                    4153,
                    4151
                ],
                "label_ind": [
                    4153,
                    4158
                ],
                "tf.boolean_mask": [
                    4153,
                    4157
                ],
                "batch_array": [
                    4155,
                    4157
                ],
                "batch_ind": [
                    4157,
                    4158
                ],
                "vals_sparse": [
                    4160,
                    4162
                ],
                "tf.gather_nd": [
                    4160
                ],
                "tf.to_int64": [
                    4162
                ],
                "label_length": [
                    4184,
                    4182
                ],
                "tf.to_int32": [
                    4184,
                    4223,
                    4182,
                    4183
                ],
                "sparse_labels": [
                    4184,
                    4189
                ],
                "ctc_label_dense_to_sparse": [
                    4184
                ],
                "y_true": [
                    4184
                ],
                "y_pred": [
                    4227,
                    4231,
                    4186,
                    4188,
                    4222
                ],
                "ctc.ctc_loss": [
                    4188
                ],
                "ctc": [
                    4226,
                    4188,
                    4230
                ],
                "greedy": [
                    4225
                ],
                "decoded": [
                    4226,
                    4236,
                    4230
                ],
                "log_prob": [
                    4226,
                    4237,
                    4230
                ],
                "ctc.ctc_greedy_decoder": [
                    4226
                ],
                "ctc.ctc_beam_search_decoder": [
                    4230
                ],
                "beam_width": [
                    4232
                ],
                "top_paths": [
                    4233
                ],
                "decoded_dense": [
                    4235,
                    4237
                ],
                "tf.sparse_to_dense": [
                    4235
                ],
                "st.indices": [
                    4235
                ],
                "st": [
                    4235,
                    4236
                ],
                "st.dense_shape": [
                    4235
                ],
                "st.values": [
                    4235
                ],
                "tf.map_fn": [
                    4254
                ],
                "fn": [
                    4286,
                    4270,
                    4254
                ],
                "elems": [
                    4286,
                    4270,
                    4254
                ],
                "tf.foldl": [
                    4270
                ],
                "initializer": [
                    4286,
                    4270
                ],
                "tf.foldr": [
                    4286
                ],
                "stride": [
                    4317,
                    4318,
                    4311
                ],
                "output_length": [
                    4313,
                    4316
                ],
                "feature_dim": [
                    4320,
                    4377,
                    4363,
                    4374,
                    4313
                ],
                "filters": [
                    4313,
                    4363,
                    4382
                ],
                "xs": [
                    4321,
                    4365,
                    4379,
                    4373,
                    4376,
                    4315,
                    4319
                ],
                "slice_length": [
                    4317,
                    4319
                ],
                "kernel_size": [
                    4369,
                    4371,
                    4318
                ],
                "xs.append": [
                    4376,
                    4373,
                    4319
                ],
                "x_aggregate": [
                    4379,
                    4321,
                    4323,
                    4380
                ],
                "batch_dot": [
                    4323,
                    4380
                ],
                "stride_row": [
                    4360,
                    4368,
                    4369
                ],
                "stride_col": [
                    4360,
                    4370,
                    4371
                ],
                "output_row": [
                    4361,
                    4366,
                    4382
                ],
                "output_col": [
                    4361,
                    4382,
                    4367
                ],
                "j": [
                    4370,
                    4371,
                    4367
                ],
                "slice_row": [
                    4368,
                    4376,
                    4373
                ],
                "slice_col": [
                    4376,
                    4370,
                    4373
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/keras_18/tests/keras/backend/backend_test.py",
                "test_function": "test_function_tf_run_options_with_run_metadata",
                "test_function_code": "    @pytest.mark.skipif(K.backend() != 'tensorflow',\n                        reason='Uses the `options` and `run_metadata` arguments.')\n    def test_function_tf_run_options_with_run_metadata(self):\n        from tensorflow.core.protobuf import config_pb2\n        x_placeholder = K.placeholder(shape=())\n        y_placeholder = K.placeholder(shape=())\n\n        run_options = config_pb2.RunOptions(output_partition_graphs=True)\n        run_metadata = config_pb2.RunMetadata()\n        # enable run_options.\n        f = K.function(inputs=[x_placeholder, y_placeholder],\n                       outputs=[x_placeholder + y_placeholder],\n                       options=run_options,\n                       run_metadata=run_metadata)\n        output = f([10., 20.])\n        assert output == [30.]\n        assert len(run_metadata.partition_graphs) > 0\n        # disable run_options.\n        f = K.function(inputs=[x_placeholder, y_placeholder],\n                       outputs=[x_placeholder + y_placeholder],\n                       run_metadata=run_metadata)\n        output = f([10., 20.])\n        assert output == [30.]\n        assert len(run_metadata.partition_graphs) == 0",
                "test_error": "ValueError: ('Some keys in session_kwargs are not supported at this time: %s', dict_keys(['options', 'run_metadata']))",
                "full_test_error": "self = <backend_test.TestBackend object at 0x13220a650>\n\n    @pytest.mark.skipif(K.backend() != 'tensorflow',\n                        reason='Uses the `options` and `run_metadata` arguments.')\n    def test_function_tf_run_options_with_run_metadata(self):\n        from tensorflow.core.protobuf import config_pb2\n        x_placeholder = K.placeholder(shape=())\n        y_placeholder = K.placeholder(shape=())\n    \n        run_options = config_pb2.RunOptions(output_partition_graphs=True)\n        run_metadata = config_pb2.RunMetadata()\n        # enable run_options.\n        f = K.function(inputs=[x_placeholder, y_placeholder],\n                       outputs=[x_placeholder + y_placeholder],\n                       options=run_options,\n>                      run_metadata=run_metadata)\n\ntests/keras/backend/backend_test.py:544: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nkeras/backend/tensorflow_backend.py:2705: in function\n    return Function(inputs, outputs, updates=updates, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <keras.backend.tensorflow_backend.Function object at 0x1321a58d0>\ninputs = [<tf.Tensor 'Placeholder:0' shape=() dtype=float32>, <tf.Tensor 'Placeholder_1:0' shape=() dtype=float32>]\noutputs = [<tf.Tensor 'add:0' shape=() dtype=float32>], updates = []\nname = None\nsession_kwargs = {'options': output_partition_graphs: true\n, 'run_metadata': }\nupdates_ops = []\n\n    def __init__(self, inputs, outputs,\n                 updates=None,\n                 name=None,\n                 **session_kwargs):\n        updates = updates or []\n        if not isinstance(inputs, (list, tuple)):\n            raise TypeError('`inputs` to a TensorFlow backend function '\n                            'should be a list or tuple.')\n        if not isinstance(outputs, (list, tuple)):\n            raise TypeError('`outputs` of a TensorFlow backend function '\n                            'should be a list or tuple.')\n        if not isinstance(updates, (list, tuple)):\n            raise TypeError('`updates` in a TensorFlow backend function '\n                            'should be a list or tuple.')\n        self.inputs = list(inputs)\n        self.outputs = list(outputs)\n        with tf.control_dependencies(self.outputs):\n            updates_ops = []\n            for update in updates:\n                if isinstance(update, tuple):\n                    p, new_p = update\n                    updates_ops.append(tf.assign(p, new_p))\n                else:\n                    # assumed already an op\n                    updates_ops.append(update)\n            self.updates_op = tf.group(*updates_ops)\n        self.name = name\n        # additional tensor substitutions\n        self.feed_dict = session_kwargs.pop('feed_dict', {})\n        # additional operations\n        self.fetches = session_kwargs.pop('fetches', [])\n        if not isinstance(self.fetches, list):\n            self.fetches = [self.fetches]\n        # The main use case of `fetches` being passed to a model is the ability\n        # to run custom updates\n        # (since the outputs of fetches are never returned).\n        # This requires us to wrap fetches in `identity` ops.\n        self.fetches = [tf.identity(x) for x in self.fetches]\n        self.session_kwargs = session_kwargs\n        if session_kwargs:\n            raise ValueError('Some keys in session_kwargs are not '\n                             'supported at this '\n>                            'time: %s', session_kwargs.keys())\nE           ValueError: ('Some keys in session_kwargs are not supported at this time: %s', dict_keys(['options', 'run_metadata']))\n\nkeras/backend/tensorflow_backend.py:2552: ValueError",
                "traceback": "keras/backend/tensorflow_backend.py:2705: in function\n    return Function(inputs, outputs, updates=updates, **kwargs)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <keras.backend.tensorflow_backend.Function object at 0x1321a58d0>\ninputs = [<tf.Tensor 'Placeholder:0' shape=() dtype=float32>, <tf.Tensor 'Placeholder_1:0' shape=() dtype=float32>]\noutputs = [<tf.Tensor 'add:0' shape=() dtype=float32>], updates = []\nname = None\nsession_kwargs = {'options': output_partition_graphs: true\n, 'run_metadata': }\nupdates_ops = []\n\n    def __init__(self, inputs, outputs,\n                 updates=None,\n                 name=None,\n                 **session_kwargs):\n        updates = updates or []\n        if not isinstance(inputs, (list, tuple)):\n            raise TypeError('`inputs` to a TensorFlow backend function '\n                            'should be a list or tuple.')\n        if not isinstance(outputs, (list, tuple)):\n            raise TypeError('`outputs` of a TensorFlow backend function '\n                            'should be a list or tuple.')\n        if not isinstance(updates, (list, tuple)):\n            raise TypeError('`updates` in a TensorFlow backend function '\n                            'should be a list or tuple.')\n        self.inputs = list(inputs)\n        self.outputs = list(outputs)\n        with tf.control_dependencies(self.outputs):\n            updates_ops = []\n            for update in updates:\n                if isinstance(update, tuple):\n                    p, new_p = update\n                    updates_ops.append(tf.assign(p, new_p))\n                else:\n                    # assumed already an op\n                    updates_ops.append(update)\n            self.updates_op = tf.group(*updates_ops)\n        self.name = name\n        # additional tensor substitutions\n        self.feed_dict = session_kwargs.pop('feed_dict', {})\n        # additional operations\n        self.fetches = session_kwargs.pop('fetches', [])\n        if not isinstance(self.fetches, list):\n            self.fetches = [self.fetches]\n        # The main use case of `fetches` being passed to a model is the ability\n        # to run custom updates\n        # (since the outputs of fetches are never returned).\n        # This requires us to wrap fetches in `identity` ops.\n        self.fetches = [tf.identity(x) for x in self.fetches]\n        self.session_kwargs = session_kwargs\n        if session_kwargs:\n            raise ValueError('Some keys in session_kwargs are not '\n                             'supported at this '\n>                            'time: %s', session_kwargs.keys())\nE           ValueError: ('Some keys in session_kwargs are not supported at this time: %s', dict_keys(['options', 'run_metadata']))\n\nkeras/backend/tensorflow_backend.py:2552: ValueError",
                "test_function_decorators": [
                    "pytest.mark.skipif(K.backend() != 'tensorflow', reason='Uses the `options` and `run_metadata` arguments.')"
                ]
            }
        ]
    }
}