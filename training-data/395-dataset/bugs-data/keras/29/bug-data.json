{
    "keras:29": {
        "/Volumes/SSD2T/bgp_envs/repos/keras_29/keras/engine/training.py": {
            "buggy_functions": [
                {
                    "function_name": "compile",
                    "function_code": "def compile(self, optimizer, loss=None, metrics=None, loss_weights=None,\n            sample_weight_mode=None, weighted_metrics=None,\n            target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n\n    # Prepare loss functions.\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss '\n                                 'dictionary: \"' + name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name +\n                              '\" missing from loss dictionary. '\n                              'We assume this was done on purpose, '\n                              'and we will not be expecting '\n                              'any data to be passed to \"' + name +\n                              '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, '\n                             'it should have one entry per model outputs. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed loss=' +\n                             str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n\n    # Prepare output masks.\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n\n    # Prepare loss weights.\n    if loss_weights is None:\n        loss_weights_list = [1. for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights '\n                                 'dictionary: \"' + name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, '\n                             'it should have one entry per model output. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed loss_weights=' +\n                             str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' +\n                        str(loss_weights) +\n                        ' - expected a list of dicts.')\n\n    # Prepare targets of model.\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError(\n                    'When passing a list as `target_tensors`, '\n                    'it should have one entry per model output. '\n                    'The model has ' + str(len(self.outputs)) +\n                    ' outputs, but you passed target_tensors=' +\n                    str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` '\n                                     'dictionary: \"' + name + '\". '\n                                     'Only expected the following keys: ' +\n                                     str(self.output_names))\n            tmp_target_tensors = []\n            for name in self.output_names:\n                tmp_target_tensors.append(target_tensors.get(name, None))\n            target_tensors = tmp_target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be '\n                            'a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self._internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape),\n                                           name=name + '_target',\n                                           sparse=K.is_sparse(self.outputs[i]),\n                                           dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n\n    # Prepare sample weights.\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in '\n                                 'sample_weight_mode dictionary: \"' +\n                                 name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name +\n                                     '\" missing from sample_weight_modes '\n                                     'dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, '\n                             'it should have one entry per model output. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed '\n                             'sample_weight_mode=' +\n                             str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            else:\n                if sample_weight_mode == 'temporal':\n                    sample_weights.append(\n                        K.placeholder(ndim=2,\n                                      name=name + '_sample_weights'))\n                    sample_weight_modes.append('temporal')\n                else:\n                    sample_weights.append(\n                        K.placeholder(ndim=1,\n                                      name=name + '_sample_weights'))\n                    sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n\n    # Prepare metrics.\n    self.metrics = metrics or []\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n\n    # Compute total loss.\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred,\n                                            sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled '\n                                 'because it has no loss to optimize.')\n            else:\n                total_loss = 0.\n\n        # Add regularization penalties\n        # and other layer-specific losses.\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n\n    # List of same size as output_names.\n    # contains tuples (metrics for output, names of metrics).\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n    self.metrics_updates = []\n    self.stateful_metric_names = []\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n\n                for metric in metrics:\n                    if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n                        # custom handling of accuracy/crossentropy\n                        # (because of class mode duality)\n                        output_shape = self._internal_output_shapes[i]\n                        if (output_shape[-1] == 1 or\n                           self.loss_functions[i] == losses.binary_crossentropy):\n                            # case: binary accuracy/crossentropy\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.binary_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.binary_crossentropy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            # case: categorical accuracy/crossentropy with sparse targets\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.sparse_categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.sparse_categorical_crossentropy\n                        else:\n                            # case: categorical accuracy/crossentropy\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.categorical_crossentropy\n                        if metric in ('accuracy', 'acc'):\n                                suffix = 'acc'\n                        elif metric in ('crossentropy', 'ce'):\n                                suffix = 'ce'\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + suffix\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        # Get metric name as string\n                        if hasattr(metric_fn, 'name'):\n                            metric_name = metric_fn.name\n                        else:\n                            metric_name = metric_fn.__name__\n                        metric_name = metric_name_prefix + metric_name\n\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred,\n                                                           weights=weights,\n                                                           mask=masks[i])\n\n                    # Append to self.metrics_names, self.metric_tensors,\n                    # self.stateful_metric_names\n                    if len(self.output_names) > 1:\n                        metric_name = self.output_names[i] + '_' + metric_name\n                    # Dedupe name\n                    j = 1\n                    base_metric_name = metric_name\n                    while metric_name in self.metrics_names:\n                        metric_name = base_metric_name + '_' + str(j)\n                        j += 1\n                    self.metrics_names.append(metric_name)\n                    self.metrics_tensors.append(metric_result)\n\n                    # Keep track of state updates created by\n                    # stateful metrics (i.e. metrics layers).\n                    if isinstance(metric_fn, Layer) and metric_fn.stateful:\n                        self.stateful_metric_names.append(metric_name)\n                        self.metrics_updates += metric_fn.updates\n\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n\n    # Prepare gradient updates and state updates.\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n\n    # Functions for train, test and predict will\n    # be compiled lazily when required.\n    # This saves time when the user is not using all functions.\n    self._function_kwargs = kwargs\n\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n\n    # Collected trainable weights, sorted in topological order.\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights\n",
                    "decorators": [],
                    "docstring": "Configures the model for training.\n\n# Arguments\n    optimizer: String (name of optimizer) or optimizer instance.\n        See [optimizers](/optimizers).\n    loss: String (name of objective function) or objective function.\n        See [losses](/losses).\n        If the model has multiple outputs, you can use a different loss\n        on each output by passing a dictionary or a list of losses.\n        The loss value that will be minimized by the model\n        will then be the sum of all individual losses.\n    metrics: List of metrics to be evaluated by the model\n        during training and testing.\n        Typically you will use `metrics=['accuracy']`.\n        To specify different metrics for different outputs of a\n        multi-output model, you could also pass a dictionary,\n        such as `metrics={'output_a': 'accuracy'}`.\n    loss_weights: Optional list or dictionary specifying scalar\n        coefficients (Python floats) to weight the loss contributions\n        of different model outputs.\n        The loss value that will be minimized by the model\n        will then be the *weighted sum* of all individual losses,\n        weighted by the `loss_weights` coefficients.\n        If a list, it is expected to have a 1:1 mapping\n        to the model's outputs. If a tensor, it is expected to map\n        output names (strings) to scalar coefficients.\n    sample_weight_mode: If you need to do timestep-wise\n        sample weighting (2D weights), set this to `\"temporal\"`.\n        `None` defaults to sample-wise weights (1D).\n        If the model has multiple outputs, you can use a different\n        `sample_weight_mode` on each output by passing a\n        dictionary or a list of modes.\n    weighted_metrics: List of metrics to be evaluated and weighted\n        by sample_weight or class_weight during training and testing.\n    target_tensors: By default, Keras will create placeholders for the\n        model's target, which will be fed with the target data during\n        training. If instead you would like to use your own\n        target tensors (in turn, Keras will not expect external\n        Numpy data for these targets at training time), you\n        can specify them via the `target_tensors` argument. It can be\n        a single tensor (for a single-output model), a list of tensors,\n        or a dict mapping output names to target tensors.\n    **kwargs: When using the Theano/CNTK backends, these arguments\n        are passed into `K.function`.\n        When using the TensorFlow backend,\n        these arguments are passed into `tf.Session.run`.\n\n# Raises\n    ValueError: In case of invalid arguments for\n        `optimizer`, `loss`, `metrics` or `sample_weight_mode`.",
                    "start_line": 549,
                    "end_line": 956,
                    "variables": {
                        "loss": [
                            610,
                            611,
                            619,
                            626,
                            627,
                            628,
                            633,
                            634,
                            603,
                            636,
                            605
                        ],
                        "self.optimizer": [
                            604
                        ],
                        "self": [
                            604,
                            605,
                            606,
                            607,
                            612,
                            616,
                            618,
                            628,
                            631,
                            637,
                            638,
                            642,
                            643,
                            644,
                            645,
                            652,
                            654,
                            660,
                            663,
                            667,
                            669,
                            672,
                            675,
                            685,
                            686,
                            689,
                            693,
                            698,
                            702,
                            704,
                            710,
                            712,
                            714,
                            715,
                            724,
                            725,
                            726,
                            727,
                            728,
                            729,
                            730,
                            733,
                            740,
                            745,
                            746,
                            765,
                            768,
                            772,
                            778,
                            789,
                            804,
                            805,
                            806,
                            808,
                            811,
                            812,
                            813,
                            814,
                            819,
                            822,
                            823,
                            828,
                            831,
                            832,
                            833,
                            839,
                            847,
                            852,
                            853,
                            854,
                            855,
                            857,
                            861,
                            862,
                            874,
                            876,
                            882,
                            917,
                            918,
                            922,
                            925,
                            926,
                            931,
                            932,
                            938,
                            939,
                            940,
                            941,
                            943,
                            948,
                            950,
                            951,
                            952,
                            955,
                            956
                        ],
                        "optimizers.get": [
                            604
                        ],
                        "optimizers": [
                            604
                        ],
                        "optimizer": [
                            604
                        ],
                        "self.loss": [
                            605
                        ],
                        "self.loss_weights": [
                            606
                        ],
                        "loss_weights": [
                            672,
                            677,
                            678,
                            606,
                            681,
                            659,
                            661,
                            662,
                            670,
                            671
                        ],
                        "self.sample_weight_mode": [
                            607
                        ],
                        "sample_weight_mode": [
                            738,
                            739,
                            771,
                            777,
                            751,
                            755,
                            794,
                            764,
                            765,
                            607
                        ],
                        "isinstance": [
                            610,
                            738,
                            930,
                            655,
                            688,
                            627,
                            661,
                            696,
                            764,
                            671
                        ],
                        "dict": [
                            696,
                            610,
                            738,
                            661
                        ],
                        "name": [
                            778,
                            781,
                            785,
                            789,
                            662,
                            663,
                            665,
                            669,
                            670,
                            797,
                            802,
                            697,
                            698,
                            700,
                            704,
                            705,
                            715,
                            723,
                            728,
                            611,
                            612,
                            739,
                            614,
                            740,
                            743,
                            618,
                            619,
                            620,
                            746,
                            751,
                            624,
                            752,
                            626,
                            755,
                            757,
                            761
                        ],
                        "self.output_names": [
                            772,
                            778,
                            789,
                            917,
                            663,
                            918,
                            667,
                            669,
                            698,
                            828,
                            702,
                            704,
                            833,
                            715,
                            852,
                            853,
                            612,
                            740,
                            616,
                            745,
                            618,
                            746
                        ],
                        "ValueError": [
                            673,
                            613,
                            741,
                            840,
                            752,
                            690,
                            629,
                            664,
                            699,
                            766
                        ],
                        "str": [
                            768,
                            675,
                            771,
                            677,
                            923,
                            616,
                            681,
                            695,
                            745,
                            693,
                            631,
                            633,
                            667,
                            702
                        ],
                        "loss_functions": [
                            617,
                            626,
                            634,
                            637,
                            638,
                            639
                        ],
                        "warnings.warn": [
                            620
                        ],
                        "warnings": [
                            620
                        ],
                        "loss_functions.append": [
                            626
                        ],
                        "losses.get": [
                            626,
                            636,
                            634
                        ],
                        "losses": [
                            876,
                            626,
                            882,
                            634,
                            636
                        ],
                        "loss.get": [
                            626
                        ],
                        "list": [
                            655,
                            688,
                            627,
                            764,
                            671
                        ],
                        "len": [
                            768,
                            772,
                            637,
                            646,
                            660,
                            917,
                            672,
                            675,
                            806,
                            941,
                            689,
                            819,
                            693,
                            831,
                            710,
                            722,
                            857,
                            628,
                            631,
                            765
                        ],
                        "self.outputs": [
                            768,
                            637,
                            654,
                            660,
                            672,
                            675,
                            806,
                            689,
                            819,
                            693,
                            823,
                            831,
                            710,
                            724,
                            725,
                            727,
                            857,
                            862,
                            628,
                            631,
                            765
                        ],
                        "l": [
                            634
                        ],
                        "loss_function": [
                            636,
                            637
                        ],
                        "_": [
                            660,
                            637,
                            654
                        ],
                        "range": [
                            772,
                            710,
                            646,
                            806,
                            941,
                            819,
                            660,
                            857,
                            637
                        ],
                        "self.loss_functions": [
                            730,
                            876,
                            638,
                            882
                        ],
                        "weighted_losses": [
                            647,
                            824,
                            646,
                            639
                        ],
                        "_weighted_masked_objective": [
                            898,
                            902,
                            639
                        ],
                        "fn": [
                            639
                        ],
                        "skip_target_indices": [
                            640,
                            711,
                            648,
                            820,
                            858
                        ],
                        "skip_target_weighing_indices": [
                            641,
                            773,
                            807,
                            649,
                            747,
                            942,
                            790,
                            732
                        ],
                        "self._feed_outputs": [
                            642,
                            727
                        ],
                        "self._feed_output_names": [
                            728,
                            643
                        ],
                        "self._feed_output_shapes": [
                            729,
                            644
                        ],
                        "self._feed_loss_fns": [
                            730,
                            645
                        ],
                        "i": [
                            772,
                            773,
                            646,
                            647,
                            648,
                            649,
                            777,
                            778,
                            913,
                            789,
                            790,
                            918,
                            806,
                            807,
                            808,
                            941,
                            942,
                            943,
                            819,
                            820,
                            822,
                            823,
                            824,
                            825,
                            826,
                            827,
                            828,
                            833,
                            710,
                            711,
                            714,
                            715,
                            717,
                            724,
                            725,
                            727,
                            857,
                            730,
                            858,
                            732,
                            861,
                            862,
                            863,
                            864,
                            865,
                            746,
                            747,
                            874,
                            876,
                            882
                        ],
                        "skip_target_indices.append": [
                            648
                        ],
                        "skip_target_weighing_indices.append": [
                            649,
                            732
                        ],
                        "masks": [
                            652,
                            653,
                            654,
                            655,
                            656,
                            913,
                            826
                        ],
                        "self.compute_mask": [
                            652
                        ],
                        "self.inputs": [
                            652
                        ],
                        "loss_weights_list": [
                            678,
                            660,
                            827,
                            668,
                            670
                        ],
                        "loss_weights_list.append": [
                            670
                        ],
                        "loss_weights.get": [
                            670
                        ],
                        "TypeError": [
                            680,
                            708
                        ],
                        "self.targets": [
                            712,
                            861,
                            685,
                            822,
                            733
                        ],
                        "self._feed_targets": [
                            726,
                            686
                        ],
                        "target_tensors": [
                            705,
                            706,
                            709,
                            716,
                            717,
                            687,
                            688,
                            689,
                            695,
                            696,
                            697
                        ],
                        "tmp_target_tensors": [
                            705,
                            706,
                            703
                        ],
                        "tmp_target_tensors.append": [
                            705
                        ],
                        "target_tensors.get": [
                            705
                        ],
                        "self.targets.append": [
                            712,
                            733
                        ],
                        "shape": [
                            722,
                            714,
                            729
                        ],
                        "self._internal_output_shapes": [
                            714,
                            874
                        ],
                        "target": [
                            717,
                            719,
                            720,
                            721,
                            722,
                            726,
                            733
                        ],
                        "K.is_placeholder": [
                            720
                        ],
                        "K": [
                            801,
                            828,
                            780,
                            910,
                            720,
                            784,
                            722,
                            818,
                            756,
                            724,
                            725,
                            856,
                            760,
                            796
                        ],
                        "K.placeholder": [
                            801,
                            780,
                            784,
                            722,
                            756,
                            760,
                            796
                        ],
                        "K.is_sparse": [
                            724
                        ],
                        "K.dtype": [
                            725
                        ],
                        "self._feed_targets.append": [
                            726
                        ],
                        "self._feed_outputs.append": [
                            727
                        ],
                        "self._feed_output_names.append": [
                            728
                        ],
                        "self._feed_output_shapes.append": [
                            729
                        ],
                        "self._feed_loss_fns.append": [
                            730
                        ],
                        "sample_weights": [
                            736,
                            795,
                            800,
                            939,
                            943,
                            787,
                            792,
                            825,
                            763,
                            863
                        ],
                        "sample_weight_modes": [
                            737,
                            803,
                            804,
                            775,
                            749,
                            782,
                            786,
                            758,
                            791,
                            762,
                            798
                        ],
                        "enumerate": [
                            746,
                            789
                        ],
                        "weight": [
                            774,
                            748,
                            780,
                            784,
                            787,
                            756,
                            760,
                            763
                        ],
                        "sample_weight_modes.append": [
                            803,
                            775,
                            749,
                            782,
                            786,
                            758,
                            791,
                            762,
                            798
                        ],
                        "sample_weight_mode.get": [
                            755
                        ],
                        "sample_weights.append": [
                            800,
                            795,
                            787,
                            792,
                            763
                        ],
                        "mode": [
                            777,
                            779
                        ],
                        "self.sample_weight_modes": [
                            808,
                            804
                        ],
                        "self._feed_sample_weight_modes": [
                            808,
                            805
                        ],
                        "self._feed_sample_weight_modes.append": [
                            808
                        ],
                        "self.metrics": [
                            811
                        ],
                        "metrics": [
                            811,
                            852,
                            870
                        ],
                        "self.weighted_metrics": [
                            812
                        ],
                        "weighted_metrics": [
                            812,
                            853
                        ],
                        "self.metrics_names": [
                            833,
                            922,
                            813,
                            925
                        ],
                        "self.metrics_tensors": [
                            832,
                            926,
                            814
                        ],
                        "total_loss": [
                            834,
                            835,
                            837,
                            838,
                            938,
                            843,
                            848,
                            817
                        ],
                        "K.name_scope": [
                            856,
                            818,
                            828,
                            910
                        ],
                        "y_true": [
                            861,
                            829,
                            822,
                            911
                        ],
                        "y_pred": [
                            911,
                            829,
                            862,
                            823
                        ],
                        "weighted_loss": [
                            824,
                            829
                        ],
                        "sample_weight": [
                            825,
                            830
                        ],
                        "mask": [
                            826,
                            830
                        ],
                        "loss_weight": [
                            835,
                            827,
                            837
                        ],
                        "output_loss": [
                            832,
                            835,
                            837,
                            829
                        ],
                        "self.metrics_tensors.append": [
                            832,
                            926
                        ],
                        "self.metrics_names.append": [
                            833,
                            925
                        ],
                        "self.losses": [
                            847,
                            839
                        ],
                        "loss_tensor": [
                            848,
                            847
                        ],
                        "nested_metrics": [
                            864,
                            852
                        ],
                        "_collect_metrics": [
                            852,
                            853
                        ],
                        "nested_weighted_metrics": [
                            865,
                            853
                        ],
                        "self.metrics_updates": [
                            932,
                            854
                        ],
                        "self.stateful_metric_names": [
                            931,
                            855
                        ],
                        "weights": [
                            912,
                            935,
                            868,
                            863
                        ],
                        "output_metrics": [
                            864,
                            934
                        ],
                        "output_weighted_metrics": [
                            865,
                            935
                        ],
                        "metric_name_prefix": [
                            908,
                            899,
                            868
                        ],
                        "metric": [
                            896,
                            901,
                            870,
                            871,
                            878,
                            880,
                            884,
                            886,
                            890,
                            892,
                            894
                        ],
                        "output_shape": [
                            874,
                            875
                        ],
                        "losses.binary_crossentropy": [
                            876
                        ],
                        "metric_fn": [
                            898,
                            930,
                            932,
                            901,
                            902,
                            904,
                            905,
                            907,
                            879,
                            881,
                            885,
                            887,
                            891,
                            893
                        ],
                        "metrics_module.binary_accuracy": [
                            879
                        ],
                        "metrics_module": [
                            901,
                            879,
                            881,
                            885,
                            887,
                            891,
                            893
                        ],
                        "metrics_module.binary_crossentropy": [
                            881
                        ],
                        "losses.sparse_categorical_crossentropy": [
                            882
                        ],
                        "metrics_module.sparse_categorical_accuracy": [
                            885
                        ],
                        "metrics_module.sparse_categorical_crossentropy": [
                            887
                        ],
                        "metrics_module.categorical_accuracy": [
                            891
                        ],
                        "metrics_module.categorical_crossentropy": [
                            893
                        ],
                        "suffix": [
                            897,
                            899,
                            895
                        ],
                        "weighted_metric_fn": [
                            898,
                            902,
                            911
                        ],
                        "metric_name": [
                            899,
                            931,
                            905,
                            907,
                            908,
                            910,
                            918,
                            921,
                            922,
                            923,
                            925
                        ],
                        "metrics_module.get": [
                            901
                        ],
                        "hasattr": [
                            904
                        ],
                        "metric_fn.name": [
                            905
                        ],
                        "metric_fn.__name__": [
                            907
                        ],
                        "metric_result": [
                            926,
                            911
                        ],
                        "j": [
                            920,
                            923,
                            924
                        ],
                        "base_metric_name": [
                            921,
                            923
                        ],
                        "Layer": [
                            930
                        ],
                        "metric_fn.stateful": [
                            930
                        ],
                        "self.stateful_metric_names.append": [
                            931
                        ],
                        "metric_fn.updates": [
                            932
                        ],
                        "handle_metrics": [
                            934,
                            935
                        ],
                        "self.total_loss": [
                            938
                        ],
                        "self.sample_weights": [
                            939,
                            941
                        ],
                        "self._feed_sample_weights": [
                            940,
                            943
                        ],
                        "self._feed_sample_weights.append": [
                            943
                        ],
                        "self._function_kwargs": [
                            948
                        ],
                        "kwargs": [
                            948
                        ],
                        "self.train_function": [
                            950
                        ],
                        "self.test_function": [
                            951
                        ],
                        "self.predict_function": [
                            952
                        ],
                        "trainable_weights": [
                            955,
                            956
                        ],
                        "self.trainable_weights": [
                            955
                        ],
                        "self._collected_trainable_weights": [
                            956
                        ]
                    },
                    "filtered_variables": {
                        "loss": [
                            610,
                            611,
                            619,
                            626,
                            627,
                            628,
                            633,
                            634,
                            603,
                            636,
                            605
                        ],
                        "self.optimizer": [
                            604
                        ],
                        "self": [
                            604,
                            605,
                            606,
                            607,
                            612,
                            616,
                            618,
                            628,
                            631,
                            637,
                            638,
                            642,
                            643,
                            644,
                            645,
                            652,
                            654,
                            660,
                            663,
                            667,
                            669,
                            672,
                            675,
                            685,
                            686,
                            689,
                            693,
                            698,
                            702,
                            704,
                            710,
                            712,
                            714,
                            715,
                            724,
                            725,
                            726,
                            727,
                            728,
                            729,
                            730,
                            733,
                            740,
                            745,
                            746,
                            765,
                            768,
                            772,
                            778,
                            789,
                            804,
                            805,
                            806,
                            808,
                            811,
                            812,
                            813,
                            814,
                            819,
                            822,
                            823,
                            828,
                            831,
                            832,
                            833,
                            839,
                            847,
                            852,
                            853,
                            854,
                            855,
                            857,
                            861,
                            862,
                            874,
                            876,
                            882,
                            917,
                            918,
                            922,
                            925,
                            926,
                            931,
                            932,
                            938,
                            939,
                            940,
                            941,
                            943,
                            948,
                            950,
                            951,
                            952,
                            955,
                            956
                        ],
                        "optimizers.get": [
                            604
                        ],
                        "optimizers": [
                            604
                        ],
                        "optimizer": [
                            604
                        ],
                        "self.loss": [
                            605
                        ],
                        "self.loss_weights": [
                            606
                        ],
                        "loss_weights": [
                            672,
                            677,
                            678,
                            606,
                            681,
                            659,
                            661,
                            662,
                            670,
                            671
                        ],
                        "self.sample_weight_mode": [
                            607
                        ],
                        "sample_weight_mode": [
                            738,
                            739,
                            771,
                            777,
                            751,
                            755,
                            794,
                            764,
                            765,
                            607
                        ],
                        "name": [
                            778,
                            781,
                            785,
                            789,
                            662,
                            663,
                            665,
                            669,
                            670,
                            797,
                            802,
                            697,
                            698,
                            700,
                            704,
                            705,
                            715,
                            723,
                            728,
                            611,
                            612,
                            739,
                            614,
                            740,
                            743,
                            618,
                            619,
                            620,
                            746,
                            751,
                            624,
                            752,
                            626,
                            755,
                            757,
                            761
                        ],
                        "self.output_names": [
                            772,
                            778,
                            789,
                            917,
                            663,
                            918,
                            667,
                            669,
                            698,
                            828,
                            702,
                            704,
                            833,
                            715,
                            852,
                            853,
                            612,
                            740,
                            616,
                            745,
                            618,
                            746
                        ],
                        "loss_functions": [
                            617,
                            626,
                            634,
                            637,
                            638,
                            639
                        ],
                        "warnings.warn": [
                            620
                        ],
                        "warnings": [
                            620
                        ],
                        "loss_functions.append": [
                            626
                        ],
                        "losses.get": [
                            626,
                            636,
                            634
                        ],
                        "losses": [
                            876,
                            626,
                            882,
                            634,
                            636
                        ],
                        "loss.get": [
                            626
                        ],
                        "self.outputs": [
                            768,
                            637,
                            654,
                            660,
                            672,
                            675,
                            806,
                            689,
                            819,
                            693,
                            823,
                            831,
                            710,
                            724,
                            725,
                            727,
                            857,
                            862,
                            628,
                            631,
                            765
                        ],
                        "l": [
                            634
                        ],
                        "loss_function": [
                            636,
                            637
                        ],
                        "_": [
                            660,
                            637,
                            654
                        ],
                        "self.loss_functions": [
                            730,
                            876,
                            638,
                            882
                        ],
                        "weighted_losses": [
                            647,
                            824,
                            646,
                            639
                        ],
                        "_weighted_masked_objective": [
                            898,
                            902,
                            639
                        ],
                        "fn": [
                            639
                        ],
                        "skip_target_indices": [
                            640,
                            711,
                            648,
                            820,
                            858
                        ],
                        "skip_target_weighing_indices": [
                            641,
                            773,
                            807,
                            649,
                            747,
                            942,
                            790,
                            732
                        ],
                        "self._feed_outputs": [
                            642,
                            727
                        ],
                        "self._feed_output_names": [
                            728,
                            643
                        ],
                        "self._feed_output_shapes": [
                            729,
                            644
                        ],
                        "self._feed_loss_fns": [
                            730,
                            645
                        ],
                        "i": [
                            772,
                            773,
                            646,
                            647,
                            648,
                            649,
                            777,
                            778,
                            913,
                            789,
                            790,
                            918,
                            806,
                            807,
                            808,
                            941,
                            942,
                            943,
                            819,
                            820,
                            822,
                            823,
                            824,
                            825,
                            826,
                            827,
                            828,
                            833,
                            710,
                            711,
                            714,
                            715,
                            717,
                            724,
                            725,
                            727,
                            857,
                            730,
                            858,
                            732,
                            861,
                            862,
                            863,
                            864,
                            865,
                            746,
                            747,
                            874,
                            876,
                            882
                        ],
                        "skip_target_indices.append": [
                            648
                        ],
                        "skip_target_weighing_indices.append": [
                            649,
                            732
                        ],
                        "masks": [
                            652,
                            653,
                            654,
                            655,
                            656,
                            913,
                            826
                        ],
                        "self.compute_mask": [
                            652
                        ],
                        "self.inputs": [
                            652
                        ],
                        "loss_weights_list": [
                            678,
                            660,
                            827,
                            668,
                            670
                        ],
                        "loss_weights_list.append": [
                            670
                        ],
                        "loss_weights.get": [
                            670
                        ],
                        "self.targets": [
                            712,
                            861,
                            685,
                            822,
                            733
                        ],
                        "self._feed_targets": [
                            726,
                            686
                        ],
                        "target_tensors": [
                            705,
                            706,
                            709,
                            716,
                            717,
                            687,
                            688,
                            689,
                            695,
                            696,
                            697
                        ],
                        "tmp_target_tensors": [
                            705,
                            706,
                            703
                        ],
                        "tmp_target_tensors.append": [
                            705
                        ],
                        "target_tensors.get": [
                            705
                        ],
                        "self.targets.append": [
                            712,
                            733
                        ],
                        "shape": [
                            722,
                            714,
                            729
                        ],
                        "self._internal_output_shapes": [
                            714,
                            874
                        ],
                        "target": [
                            717,
                            719,
                            720,
                            721,
                            722,
                            726,
                            733
                        ],
                        "K.is_placeholder": [
                            720
                        ],
                        "K": [
                            801,
                            828,
                            780,
                            910,
                            720,
                            784,
                            722,
                            818,
                            756,
                            724,
                            725,
                            856,
                            760,
                            796
                        ],
                        "K.placeholder": [
                            801,
                            780,
                            784,
                            722,
                            756,
                            760,
                            796
                        ],
                        "K.is_sparse": [
                            724
                        ],
                        "K.dtype": [
                            725
                        ],
                        "self._feed_targets.append": [
                            726
                        ],
                        "self._feed_outputs.append": [
                            727
                        ],
                        "self._feed_output_names.append": [
                            728
                        ],
                        "self._feed_output_shapes.append": [
                            729
                        ],
                        "self._feed_loss_fns.append": [
                            730
                        ],
                        "sample_weights": [
                            736,
                            795,
                            800,
                            939,
                            943,
                            787,
                            792,
                            825,
                            763,
                            863
                        ],
                        "sample_weight_modes": [
                            737,
                            803,
                            804,
                            775,
                            749,
                            782,
                            786,
                            758,
                            791,
                            762,
                            798
                        ],
                        "weight": [
                            774,
                            748,
                            780,
                            784,
                            787,
                            756,
                            760,
                            763
                        ],
                        "sample_weight_modes.append": [
                            803,
                            775,
                            749,
                            782,
                            786,
                            758,
                            791,
                            762,
                            798
                        ],
                        "sample_weight_mode.get": [
                            755
                        ],
                        "sample_weights.append": [
                            800,
                            795,
                            787,
                            792,
                            763
                        ],
                        "mode": [
                            777,
                            779
                        ],
                        "self.sample_weight_modes": [
                            808,
                            804
                        ],
                        "self._feed_sample_weight_modes": [
                            808,
                            805
                        ],
                        "self._feed_sample_weight_modes.append": [
                            808
                        ],
                        "self.metrics": [
                            811
                        ],
                        "metrics": [
                            811,
                            852,
                            870
                        ],
                        "self.weighted_metrics": [
                            812
                        ],
                        "weighted_metrics": [
                            812,
                            853
                        ],
                        "self.metrics_names": [
                            833,
                            922,
                            813,
                            925
                        ],
                        "self.metrics_tensors": [
                            832,
                            926,
                            814
                        ],
                        "total_loss": [
                            834,
                            835,
                            837,
                            838,
                            938,
                            843,
                            848,
                            817
                        ],
                        "K.name_scope": [
                            856,
                            818,
                            828,
                            910
                        ],
                        "y_true": [
                            861,
                            829,
                            822,
                            911
                        ],
                        "y_pred": [
                            911,
                            829,
                            862,
                            823
                        ],
                        "weighted_loss": [
                            824,
                            829
                        ],
                        "sample_weight": [
                            825,
                            830
                        ],
                        "mask": [
                            826,
                            830
                        ],
                        "loss_weight": [
                            835,
                            827,
                            837
                        ],
                        "output_loss": [
                            832,
                            835,
                            837,
                            829
                        ],
                        "self.metrics_tensors.append": [
                            832,
                            926
                        ],
                        "self.metrics_names.append": [
                            833,
                            925
                        ],
                        "self.losses": [
                            847,
                            839
                        ],
                        "loss_tensor": [
                            848,
                            847
                        ],
                        "nested_metrics": [
                            864,
                            852
                        ],
                        "_collect_metrics": [
                            852,
                            853
                        ],
                        "nested_weighted_metrics": [
                            865,
                            853
                        ],
                        "self.metrics_updates": [
                            932,
                            854
                        ],
                        "self.stateful_metric_names": [
                            931,
                            855
                        ],
                        "weights": [
                            912,
                            935,
                            868,
                            863
                        ],
                        "output_metrics": [
                            864,
                            934
                        ],
                        "output_weighted_metrics": [
                            865,
                            935
                        ],
                        "metric_name_prefix": [
                            908,
                            899,
                            868
                        ],
                        "metric": [
                            896,
                            901,
                            870,
                            871,
                            878,
                            880,
                            884,
                            886,
                            890,
                            892,
                            894
                        ],
                        "output_shape": [
                            874,
                            875
                        ],
                        "losses.binary_crossentropy": [
                            876
                        ],
                        "metric_fn": [
                            898,
                            930,
                            932,
                            901,
                            902,
                            904,
                            905,
                            907,
                            879,
                            881,
                            885,
                            887,
                            891,
                            893
                        ],
                        "metrics_module.binary_accuracy": [
                            879
                        ],
                        "metrics_module": [
                            901,
                            879,
                            881,
                            885,
                            887,
                            891,
                            893
                        ],
                        "metrics_module.binary_crossentropy": [
                            881
                        ],
                        "losses.sparse_categorical_crossentropy": [
                            882
                        ],
                        "metrics_module.sparse_categorical_accuracy": [
                            885
                        ],
                        "metrics_module.sparse_categorical_crossentropy": [
                            887
                        ],
                        "metrics_module.categorical_accuracy": [
                            891
                        ],
                        "metrics_module.categorical_crossentropy": [
                            893
                        ],
                        "suffix": [
                            897,
                            899,
                            895
                        ],
                        "weighted_metric_fn": [
                            898,
                            902,
                            911
                        ],
                        "metric_name": [
                            899,
                            931,
                            905,
                            907,
                            908,
                            910,
                            918,
                            921,
                            922,
                            923,
                            925
                        ],
                        "metrics_module.get": [
                            901
                        ],
                        "metric_fn.name": [
                            905
                        ],
                        "metric_fn.__name__": [
                            907
                        ],
                        "metric_result": [
                            926,
                            911
                        ],
                        "j": [
                            920,
                            923,
                            924
                        ],
                        "base_metric_name": [
                            921,
                            923
                        ],
                        "Layer": [
                            930
                        ],
                        "metric_fn.stateful": [
                            930
                        ],
                        "self.stateful_metric_names.append": [
                            931
                        ],
                        "metric_fn.updates": [
                            932
                        ],
                        "handle_metrics": [
                            934,
                            935
                        ],
                        "self.total_loss": [
                            938
                        ],
                        "self.sample_weights": [
                            939,
                            941
                        ],
                        "self._feed_sample_weights": [
                            940,
                            943
                        ],
                        "self._feed_sample_weights.append": [
                            943
                        ],
                        "self._function_kwargs": [
                            948
                        ],
                        "kwargs": [
                            948
                        ],
                        "self.train_function": [
                            950
                        ],
                        "self.test_function": [
                            951
                        ],
                        "self.predict_function": [
                            952
                        ],
                        "trainable_weights": [
                            955,
                            956
                        ],
                        "self.trainable_weights": [
                            955
                        ],
                        "self._collected_trainable_weights": [
                            956
                        ]
                    },
                    "diff_line_number": 855,
                    "class_data": {
                        "signature": "class Model(Container)",
                        "docstring": "The `Model` class adds training & evaluation routines to a `Container`.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name + '\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"' + name + '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss=' + str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n    if loss_weights is None:\n        loss_weights_list = [1.0 for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.0))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss_weights=' + str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' + str(loss_weights) + ' - expected a list of dicts.')\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError('When passing a list as `target_tensors`, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed target_tensors=' + str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n            tmp_target_tensors = []\n            for name in self.output_names:\n                tmp_target_tensors.append(target_tensors.get(name, None))\n            target_tensors = tmp_target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self._internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in sample_weight_mode dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name + '\" missing from sample_weight_modes dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed sample_weight_mode=' + str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            elif sample_weight_mode == 'temporal':\n                sample_weights.append(K.placeholder(ndim=2, name=name + '_sample_weights'))\n                sample_weight_modes.append('temporal')\n            else:\n                sample_weights.append(K.placeholder(ndim=1, name=name + '_sample_weights'))\n                sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n    self.metrics = metrics or []\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled because it has no loss to optimize.')\n            else:\n                total_loss = 0.0\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n    self.metrics_updates = []\n    self.stateful_metric_names = []\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n                for metric in metrics:\n                    if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n                        output_shape = self._internal_output_shapes[i]\n                        if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.binary_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.binary_crossentropy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.sparse_categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.sparse_categorical_crossentropy\n                        elif metric in ('accuracy', 'acc'):\n                            metric_fn = metrics_module.categorical_accuracy\n                        elif metric in ('crossentropy', 'ce'):\n                            metric_fn = metrics_module.categorical_crossentropy\n                        if metric in ('accuracy', 'acc'):\n                            suffix = 'acc'\n                        elif metric in ('crossentropy', 'ce'):\n                            suffix = 'ce'\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + suffix\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        if hasattr(metric_fn, 'name'):\n                            metric_name = metric_fn.name\n                        else:\n                            metric_name = metric_fn.__name__\n                        metric_name = metric_name_prefix + metric_name\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n                    if len(self.output_names) > 1:\n                        metric_name = self.output_names[i] + '_' + metric_name\n                    j = 1\n                    base_metric_name = metric_name\n                    while metric_name in self.metrics_names:\n                        metric_name = base_metric_name + '_' + str(j)\n                        j += 1\n                    self.metrics_names.append(metric_name)\n                    self.metrics_tensors.append(metric_result)\n                    if isinstance(metric_fn, Layer) and metric_fn.stateful:\n                        self.stateful_metric_names.append(metric_name)\n                        self.metrics_updates += metric_fn.updates\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n    self._function_kwargs = kwargs\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                            "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n    if len(self.trainable_weights) != len(self._collected_trainable_weights):\n        warnings.warn(UserWarning('Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?'))",
                            "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)\n            updates = self.updates + training_updates + self.metrics_updates\n            self.train_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)",
                            "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        self.test_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates + self.metrics_updates, name='test_function', **self._function_kwargs)",
                            "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)",
                            "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name + ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have a defined shape, or ' + steps_name + ' should be specified.')\n    return num_samples",
                            "def _fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' % (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` when doing step-wise training, i.e. `steps_per_epoch` must be set.')\n    num_train_samples = self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        _callbacks.append(cbks.ProgbarLogger(count_mode, stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    out_labels = out_labels or []\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'batch_size': batch_size, 'epochs': epochs, 'steps': steps_per_epoch, 'samples': num_train_samples, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics or []})\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    for epoch in range(initial_epoch, epochs):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, steps=validation_steps, verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. If using HDF5 input data, pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                for i in indices_for_conversion_to_dense:\n                    ins_batch[i] = ins_batch[i].toarray()\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n                if batch_index == len(batches) - 1:\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                            "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    indices_for_conversion_to_dense = []\n    for i in range(len(self._feed_inputs)):\n        if issparse(ins[i]) and (not K.is_sparse(self._feed_inputs[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0) for i in range(len(unconcatenated_outs))]\n    else:\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                            "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if hasattr(self, 'metrics'):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = float(batch_out)\n                    else:\n                        outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs * len(batch_ids)\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                            "def _standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.')\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        elif not hasattr(loss_fn, '__name__') or getattr(losses, loss_fn.__name__, None) is None:\n            output_shapes.append(None)\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False, exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight, self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight, self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode) for ref, sw, cw, mode in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    if check_array_lengths:\n        _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y, self._feed_loss_fns, self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples')\n    return (x, y, sample_weights)",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and (steps_per_epoch is None):\n        raise ValueError('If fitting from data tensors, you should specify the `steps_per_epoch` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, batch_size=batch_size)\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, it must contain 2 (x_val, y_val) or 3 (x_val, y_val, val_sample_weights) items, however it contains %d items' % len(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, sample_weight=val_sample_weight, batch_size=batch_size)\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_split and 0.0 < validation_split < 1.0:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1.0 - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1.0 - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (_slice_arrays(sample_weights, 0, split_at), _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = [0.0]\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n    out_labels = self.metrics_names\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n    return self._fit_loop(f, ins, out_labels=out_labels, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, callback_metrics=callback_metrics, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and (steps is None):\n        raise ValueError('If evaluating from data tensors, you should specify the `steps` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, batch_size=batch_size)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def predict(self, x, batch_size=None, verbose=0, steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, you should specify the `steps` argument.')\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples. Batch size: ' + str(batch_size) + '.')\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def train_on_batch(self, x, y, sample_weight=None, class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Trains the model on data generated batch-by-batch by a Python generator or an instance of `Sequence`.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches may\n            have different sizes. For example, the last batch of the epoch\n            is commonly smaller than the others, if the size of the dataset\n            is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only). This can be useful to tell the model to\n            \"pay more attention\" to samples from an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process-based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean.\n            If `True`, use process-based threading.\n            If unspecified, `use_multiprocessing` will default to `False`.\n            Note that because this implementation relies on multiprocessing,\n            you should not pass non-picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        shuffle: Boolean. Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (`keras.utils.Sequence`).\n            Has no effect when `steps_per_epoch` is not `None`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        ValueError: In case the generator yields data in an invalid format.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while True:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n    \"\"\"\n    wait_time = 0.01\n    epoch = initial_epoch\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.')\n    val_gen = hasattr(validation_data, 'next') or hasattr(validation_data, '__next__') or isinstance(validation_data, Sequence)\n    if val_gen and (not isinstance(validation_data, Sequence)) and (not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `validation_steps` or use the `keras.utils.Sequence` class.')\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(cbks.ProgbarLogger(count_mode='steps', stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'epochs': epochs, 'steps': steps_per_epoch, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics})\n    callbacks.on_train_begin()\n    enqueuer = None\n    val_enqueuer = None\n    try:\n        if do_validation and (not val_gen):\n            if len(validation_data) == 2:\n                val_x, val_y = validation_data\n                val_sample_weight = None\n            elif len(validation_data) == 3:\n                val_x, val_y, val_sample_weight = validation_data\n            else:\n                raise ValueError('`validation_data` should be a tuple `(val_x, val_y, val_sample_weight)` or `(val_x, val_y)`. Found: ' + str(validation_data))\n            val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, val_sample_weight)\n            val_data = val_x + val_y + val_sample_weights\n            if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n                val_data += [0.0]\n            for cbk in callbacks:\n                cbk.validation_data = val_data\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        callback_model.stop_training = False\n        epoch_logs = {}\n        while epoch < epochs:\n            for m in self.metrics:\n                if isinstance(m, Layer) and m.stateful:\n                    m.reset_states()\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                batch_logs = {}\n                if x is None or len(x) == 0:\n                    batch_size = 1\n                elif isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = self.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                batch_index += 1\n                steps_done += 1\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(validation_data, validation_steps, workers=workers, use_multiprocessing=use_multiprocessing, max_queue_size=max_queue_size)\n                    else:\n                        val_outs = self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n                if callback_model.stop_training:\n                    break\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n    callbacks.on_train_end()\n    return self.history",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n    stateful_metric_indices = []\n    if hasattr(self, 'metrics'):\n        for i, m in enumerate(self.metrics):\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    steps_done = 0\n    wait_time = 0.01\n    outs_per_batch = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if not isinstance(outs, list):\n                outs = [outs]\n            outs_per_batch.append(outs)\n            if x is None or len(x) == 0:\n                batch_size = 1\n            elif isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. Batches should at least contain one item.')\n            steps_done += 1\n            batch_sizes.append(batch_size)\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    averages = []\n    for i in range(len(outs)):\n        if i not in stateful_metric_indices:\n            averages.append(np.average([out[i] for out in outs_per_batch], weights=batch_sizes))\n        else:\n            averages.append(float(outs_per_batch[-1][i]))\n    if len(averages) == 1:\n        return averages[0]\n    return averages",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n            else:\n                x = generator_output\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                            "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n    for metric in metrics:\n        if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n            output_shape = self._internal_output_shapes[i]\n            if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.binary_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.binary_crossentropy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.sparse_categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.sparse_categorical_crossentropy\n            elif metric in ('accuracy', 'acc'):\n                metric_fn = metrics_module.categorical_accuracy\n            elif metric in ('crossentropy', 'ce'):\n                metric_fn = metrics_module.categorical_crossentropy\n            if metric in ('accuracy', 'acc'):\n                suffix = 'acc'\n            elif metric in ('crossentropy', 'ce'):\n                suffix = 'ce'\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + suffix\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            if hasattr(metric_fn, 'name'):\n                metric_name = metric_fn.name\n            else:\n                metric_name = metric_fn.__name__\n            metric_name = metric_name_prefix + metric_name\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[i] + '_' + metric_name\n        j = 1\n        base_metric_name = metric_name\n        while metric_name in self.metrics_names:\n            metric_name = base_metric_name + '_' + str(j)\n            j += 1\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_result)\n        if isinstance(metric_fn, Layer) and metric_fn.stateful:\n            self.stateful_metric_names.append(metric_name)\n            self.metrics_updates += metric_fn.updates"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "_check_trainable_weights_consistency(self)",
                            "_make_train_function(self)",
                            "_make_test_function(self)",
                            "_make_predict_function(self)",
                            "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                            "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                            "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                            "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                            "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                            "predict(self, x, batch_size=None, verbose=0, steps=None)",
                            "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_on_batch(self, x)",
                            "fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "handle_metrics(metrics, weights=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "loss": {
                                    "variable_value": "'binary_crossentropy'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "self.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1166d0810>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "optimizers.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "optimizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "optimizer": {
                                    "variable_value": "'sgd'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.loss": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.loss_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "loss_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.sample_weight_mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weight_mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.output_names": {
                                    "variable_value": "['out']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "loss_functions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_functions.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.outputs": {
                                    "variable_value": "[<tf.Tensor 'out/Sigmoid:0' shape=(?, 1) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.loss_functions": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weighted_losses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_weighted_masked_objective": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_target_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_target_weighing_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_outputs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_shapes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_loss_fns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_target_indices.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_target_weighing_indices.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.compute_mask": {
                                    "variable_value": "<bound method Container.compute_mask of <keras.engine.training.Model object at 0x1166d0810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "loss_weights_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_weights_list.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_weights.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.targets": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_targets": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "target_tensors": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tmp_target_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tmp_target_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_tensors.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.targets.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._internal_output_shapes": {
                                    "variable_value": "[(None, 1)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "target": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_placeholder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.placeholder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_targets.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_outputs.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_shapes.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_loss_fns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight_modes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight_modes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight_mode.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weights.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sample_weight_modes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_sample_weight_modes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_sample_weight_modes.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x1166d05d0>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.weighted_metrics": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weighted_metrics": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics_tensors": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "total_loss": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.name_scope": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_true": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_pred": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weighted_loss": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_loss": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_tensors.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.losses": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "loss_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nested_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_collect_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nested_weighted_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_updates": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_weighted_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_name_prefix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses.binary_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.binary_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.binary_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses.sparse_categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.sparse_categorical_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.sparse_categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.categorical_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weighted_metric_fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "base_metric_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.stateful": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "metric_fn.updates": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "handle_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.total_loss": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.sample_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_sample_weights.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._function_kwargs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.train_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.test_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.predict_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "trainable_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.trainable_weights": {
                                    "variable_value": "[<tf.Variable 'out/kernel:0' shape=(2, 1) dtype=float32_ref>, <tf.Variable 'out/bias:0' shape=(1,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self._collected_trainable_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "loss": {
                                    "variable_value": "'binary_crossentropy'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "self.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x116746f10>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x1166d0810>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "optimizers.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "optimizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "optimizer": {
                                    "variable_value": "'sgd'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.loss": {
                                    "variable_value": "'binary_crossentropy'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "self.loss_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "loss_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.sample_weight_mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weight_mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'out'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.output_names": {
                                    "variable_value": "['out']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "loss_functions": {
                                    "variable_value": "[<function binary_crossentropy at 0x116589ef0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_functions.append": {
                                    "variable_value": "<built-in method append of list object at 0x1167441e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "losses.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.outputs": {
                                    "variable_value": "[<tf.Tensor 'out/Sigmoid:0' shape=(?, 1) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_function": {
                                    "variable_value": "<function binary_crossentropy at 0x116589ef0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.loss_functions": {
                                    "variable_value": "[<function binary_crossentropy at 0x116589ef0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "weighted_losses": {
                                    "variable_value": "[<function _weighted_masked_objective.<locals>.weighted at 0x1166b0ef0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_weighted_masked_objective": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_target_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "skip_target_weighing_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "self._feed_outputs": {
                                    "variable_value": "[<tf.Tensor 'out/Sigmoid:0' shape=(?, 1) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_output_names": {
                                    "variable_value": "['out']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_output_shapes": {
                                    "variable_value": "[(None, 1)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_loss_fns": {
                                    "variable_value": "[<function binary_crossentropy at 0x116589ef0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "i": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "skip_target_indices.append": {
                                    "variable_value": "<built-in method append of list object at 0x11674b640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "skip_target_weighing_indices.append": {
                                    "variable_value": "<built-in method append of list object at 0x11674be60>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.compute_mask": {
                                    "variable_value": "<bound method Container.compute_mask of <keras.engine.training.Model object at 0x1166d0810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "loss_weights_list": {
                                    "variable_value": "[1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "loss_weights_list.append": {
                                    "variable_value": "<built-in method append of list object at 0x116763410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "loss_weights.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "target_tensors": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tmp_target_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tmp_target_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_tensors.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.targets.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(None, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._internal_output_shapes": {
                                    "variable_value": "[(None, 1)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "target": {
                                    "variable_value": "<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(None)])"
                                },
                                "K.is_placeholder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.placeholder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_targets.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_outputs.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_shapes.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_loss_fns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "sample_weight_modes": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight_modes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1167755f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "sample_weight_mode.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weights.append": {
                                    "variable_value": "<built-in method append of list object at 0x11676c780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sample_weight_modes": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weight_modes": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weight_modes.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x1166d05d0>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x1166d05d0>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.weighted_metrics": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weighted_metrics": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.metrics_tensors": {
                                    "variable_value": "[<tf.Tensor 'metrics/acc/Mean_1:0' shape=() dtype=float32>, <tf.Tensor 'metrics/true_positives/Mean:0' shape=() dtype=int32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/mul:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "K.name_scope": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_true": {
                                    "variable_value": "<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(None)])"
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Tensor 'out/Sigmoid:0' shape=(?, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(1)])"
                                },
                                "weighted_loss": {
                                    "variable_value": "<function _weighted_masked_objective.<locals>.weighted at 0x1166b0ef0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": "<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None)])"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "loss_weight": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "output_loss": {
                                    "variable_value": "<tf.Tensor 'loss/out_loss/Mean_3:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "self.metrics_tensors.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.losses": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "loss_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nested_metrics": {
                                    "variable_value": "[['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x1166d05d0>]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_collect_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nested_weighted_metrics": {
                                    "variable_value": "[[]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_updates": {
                                    "variable_value": "[<tf.Tensor 'metrics/true_positives/AssignAdd:0' shape=() dtype=int32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "weights": {
                                    "variable_value": "<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None)])"
                                },
                                "output_metrics": {
                                    "variable_value": "['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x1166d05d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "output_weighted_metrics": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "metric_name_prefix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses.binary_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.binary_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.binary_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses.sparse_categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.sparse_categorical_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.sparse_categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.categorical_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weighted_metric_fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "base_metric_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.stateful": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "metric_fn.updates": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "handle_metrics": {
                                    "variable_value": "<function Model.compile.<locals>.handle_metrics at 0x1166b0e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/mul:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "self.sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._function_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.train_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.test_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.predict_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "trainable_weights": {
                                    "variable_value": "[<tf.Variable 'out/kernel:0' shape=(2, 1) dtype=float32_ref>, <tf.Variable 'out/bias:0' shape=(1,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.trainable_weights": {
                                    "variable_value": "[<tf.Variable 'out/kernel:0' shape=(2, 1) dtype=float32_ref>, <tf.Variable 'out/bias:0' shape=(1,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self._collected_trainable_weights": {
                                    "variable_value": "[<tf.Variable 'out/kernel:0' shape=(2, 1) dtype=float32_ref>, <tf.Variable 'out/bias:0' shape=(1,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "loss": {
                                    "variable_value": "'binary_crossentropy'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "self.optimizer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11892f810>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "optimizers.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "optimizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "optimizer": {
                                    "variable_value": "'sgd'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.loss": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.loss_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "loss_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.sample_weight_mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weight_mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.output_names": {
                                    "variable_value": "['out']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "loss_functions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_functions.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.outputs": {
                                    "variable_value": "[<tf.Tensor 'out/Sigmoid:0' shape=(?, 1) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_function": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.loss_functions": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weighted_losses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_weighted_masked_objective": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_target_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_target_weighing_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_outputs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_shapes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_loss_fns": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_target_indices.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_target_weighing_indices.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.compute_mask": {
                                    "variable_value": "<bound method Container.compute_mask of <keras.engine.training.Model object at 0x11892f810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "loss_weights_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_weights_list.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_weights.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.targets": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_targets": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "target_tensors": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tmp_target_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tmp_target_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_tensors.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.targets.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._internal_output_shapes": {
                                    "variable_value": "[(None, 1)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "target": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_placeholder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.placeholder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_targets.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_outputs.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_shapes.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_loss_fns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight_modes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight_modes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight_mode.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weights.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sample_weight_modes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_sample_weight_modes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_sample_weight_modes.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11892f5d0>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.weighted_metrics": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weighted_metrics": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics_tensors": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "total_loss": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.name_scope": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_true": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_pred": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weighted_loss": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_loss": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_tensors.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.losses": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "loss_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nested_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_collect_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nested_weighted_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_updates": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_weighted_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_name_prefix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses.binary_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.binary_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.binary_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses.sparse_categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.sparse_categorical_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.sparse_categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.categorical_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weighted_metric_fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "base_metric_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.stateful": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "metric_fn.updates": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "handle_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.total_loss": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.sample_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_sample_weights.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._function_kwargs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.train_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.test_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.predict_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "trainable_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.trainable_weights": {
                                    "variable_value": "[<tf.Variable 'out/kernel:0' shape=(2, 1) dtype=float32_ref>, <tf.Variable 'out/bias:0' shape=(1,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self._collected_trainable_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "loss": {
                                    "variable_value": "'binary_crossentropy'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "self.optimizer": {
                                    "variable_value": "<keras.optimizers.SGD object at 0x1189a4f10>",
                                    "variable_type": "SGD",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11892f810>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "optimizers.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "optimizers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "optimizer": {
                                    "variable_value": "'sgd'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.loss": {
                                    "variable_value": "'binary_crossentropy'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "self.loss_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "loss_weights": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.sample_weight_mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weight_mode": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": "'out'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.output_names": {
                                    "variable_value": "['out']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "loss_functions": {
                                    "variable_value": "[<function binary_crossentropy at 0x11881eef0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_functions.append": {
                                    "variable_value": "<built-in method append of list object at 0x1189a3190>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "losses.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.outputs": {
                                    "variable_value": "[<tf.Tensor 'out/Sigmoid:0' shape=(?, 1) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loss_function": {
                                    "variable_value": "<function binary_crossentropy at 0x11881eef0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.loss_functions": {
                                    "variable_value": "[<function binary_crossentropy at 0x11881eef0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "weighted_losses": {
                                    "variable_value": "[<function _weighted_masked_objective.<locals>.weighted at 0x118915ef0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_weighted_masked_objective": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "skip_target_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "skip_target_weighing_indices": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "self._feed_outputs": {
                                    "variable_value": "[<tf.Tensor 'out/Sigmoid:0' shape=(?, 1) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_output_names": {
                                    "variable_value": "['out']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_output_shapes": {
                                    "variable_value": "[(None, 1)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_loss_fns": {
                                    "variable_value": "[<function binary_crossentropy at 0x11881eef0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "i": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "skip_target_indices.append": {
                                    "variable_value": "<built-in method append of list object at 0x1189ad5f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "skip_target_weighing_indices.append": {
                                    "variable_value": "<built-in method append of list object at 0x1189addc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.compute_mask": {
                                    "variable_value": "<bound method Container.compute_mask of <keras.engine.training.Model object at 0x11892f810>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "loss_weights_list": {
                                    "variable_value": "[1.0]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "loss_weights_list.append": {
                                    "variable_value": "<built-in method append of list object at 0x1189c5460>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "loss_weights.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "target_tensors": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "tmp_target_tensors": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tmp_target_tensors.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "target_tensors.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.targets.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": "(None, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._internal_output_shapes": {
                                    "variable_value": "[(None, 1)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "target": {
                                    "variable_value": "<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(None)])"
                                },
                                "K.is_placeholder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.placeholder": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_targets.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_outputs.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_output_shapes.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._feed_loss_fns.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "sample_weight_modes": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight_modes.append": {
                                    "variable_value": "<built-in method append of list object at 0x1189d6640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "sample_weight_mode.get": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sample_weights.append": {
                                    "variable_value": "<built-in method append of list object at 0x1189cc7d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.sample_weight_modes": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weight_modes": {
                                    "variable_value": "[None]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weight_modes.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11892f5d0>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11892f5d0>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "self.weighted_metrics": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "weighted_metrics": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.metrics_tensors": {
                                    "variable_value": "[<tf.Tensor 'metrics/acc/Mean_1:0' shape=() dtype=float32>, <tf.Tensor 'metrics/true_positives/Mean:0' shape=() dtype=int32>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/mul:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "K.name_scope": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y_true": {
                                    "variable_value": "<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(None)])"
                                },
                                "y_pred": {
                                    "variable_value": "<tf.Tensor 'out/Sigmoid:0' shape=(?, 1) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None), Dimension(1)])"
                                },
                                "weighted_loss": {
                                    "variable_value": "<function _weighted_masked_objective.<locals>.weighted at 0x118915ef0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": "<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None)])"
                                },
                                "mask": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "loss_weight": {
                                    "variable_value": "1.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "output_loss": {
                                    "variable_value": "<tf.Tensor 'loss/out_loss/Mean_3:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "self.metrics_tensors.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.metrics_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.losses": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "loss_tensor": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nested_metrics": {
                                    "variable_value": "[['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11892f5d0>]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_collect_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nested_weighted_metrics": {
                                    "variable_value": "[[]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.metrics_updates": {
                                    "variable_value": "[<tf.Tensor 'metrics/true_positives/AssignAdd:0' shape=() dtype=int32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11892f5d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "weights": {
                                    "variable_value": "<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([Dimension(None)])"
                                },
                                "output_metrics": {
                                    "variable_value": "['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11892f5d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "output_weighted_metrics": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "metric_name_prefix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "output_shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses.binary_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.binary_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.binary_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "losses.sparse_categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.sparse_categorical_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.sparse_categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.categorical_accuracy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.categorical_crossentropy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "suffix": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "weighted_metric_fn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metrics_module.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.__name__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "j": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "base_metric_name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "metric_fn.stateful": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "metric_fn.updates": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "handle_metrics": {
                                    "variable_value": "<function Model.compile.<locals>.handle_metrics at 0x118915e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self.total_loss": {
                                    "variable_value": "<tf.Tensor 'loss/mul:0' shape=() dtype=float32>",
                                    "variable_type": "Tensor",
                                    "variable_shape": "TensorShape([])"
                                },
                                "self.sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights.append": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._function_kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self.train_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.test_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.predict_function": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "trainable_weights": {
                                    "variable_value": "[<tf.Variable 'out/kernel:0' shape=(2, 1) dtype=float32_ref>, <tf.Variable 'out/bias:0' shape=(1,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self.trainable_weights": {
                                    "variable_value": "[<tf.Variable 'out/kernel:0' shape=(2, 1) dtype=float32_ref>, <tf.Variable 'out/bias:0' shape=(1,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "self._collected_trainable_weights": {
                                    "variable_value": "[<tf.Variable 'out/kernel:0' shape=(2, 1) dtype=float32_ref>, <tf.Variable 'out/bias:0' shape=(1,) dtype=float32_ref>]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "_fit_loop",
                    "function_code": "def _fit_loop(self, f, ins, out_labels=None, batch_size=None,\n              epochs=100, verbose=1, callbacks=None,\n              val_f=None, val_ins=None, shuffle=True,\n              callback_metrics=None, initial_epoch=0,\n              steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' %\n                  (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` '\n                             'when doing step-wise '\n                             'training, i.e. `steps_per_epoch` '\n                             'must be set.')\n\n    num_train_samples = self._check_num_samples(ins, batch_size,\n                                                steps_per_epoch,\n                                                'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(\n        stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        _callbacks.append(\n            cbks.ProgbarLogger(\n                count_mode,\n                stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    out_labels = out_labels or []\n\n    # it's possible to callback a different model than self\n    # (used by Sequential models)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'batch_size': batch_size,\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'samples': num_train_samples,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics or [],\n    })\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n\n    # To prevent a slowdown, we find beforehand the arrays that need conversion.\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and not K.is_sparse(feed[i]):\n            indices_for_conversion_to_dense.append(i)\n\n    for epoch in range(initial_epoch, epochs):\n        # Reset stateful metrics\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins,\n                                           batch_size=batch_size,\n                                           steps=validation_steps,\n                                           verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                # Same labels assumed.\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        # Do not slice the training phase flag.\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. '\n                                    'If using HDF5 input data, '\n                                    'pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                for i in indices_for_conversion_to_dense:\n                    ins_batch[i] = ins_batch[i].toarray()\n\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n\n                if batch_index == len(batches) - 1:  # Last batch.\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins,\n                                                   batch_size=batch_size,\n                                                   verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        # Same labels assumed.\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history\n",
                    "decorators": [],
                    "docstring": "Abstract fit function for `f(ins)`.\n\nAssume that f returns a list, labeled by out_labels.\n\n# Arguments\n    f: Keras function returning a list of tensors\n    ins: List of tensors to be fed to `f`\n    out_labels: List of strings, display names of\n        the outputs of `f`\n    batch_size: Integer batch size or None if unknown.\n    epochs: Number of times to iterate over the data\n    verbose: Verbosity mode, 0, 1 or 2\n    callbacks: List of callbacks to be called during training\n    val_f: Keras function to call for validation\n    val_ins: List of tensors to be fed to `val_f`\n    shuffle: Whether to shuffle the data at the beginning of each epoch\n    callback_metrics: List of strings, the display names of the metrics\n        passed to the callbacks. They should be the\n        concatenation of list the display names of the outputs of\n         `f` and the list of display names of the outputs of `f_val`.\n    initial_epoch: Epoch at which to start training\n        (useful for resuming a previous training run)\n    steps_per_epoch: Total number of steps (batches of samples)\n        before declaring one epoch finished and starting the\n        next epoch. Ignored with the default value of `None`.\n    validation_steps: Number of steps to run validation for\n        (only if doing validation from data tensors).\n        Ignored with the default value of `None`.\n\n# Returns\n    `History` object.",
                    "start_line": 1073,
                    "end_line": 1259,
                    "variables": {
                        "do_validation": [
                            1160,
                            1199,
                            1110,
                            1112,
                            1117,
                            1246
                        ],
                        "val_f": [
                            1200,
                            1247,
                            1111
                        ],
                        "val_ins": [
                            1166,
                            1200,
                            1111,
                            1113,
                            1115,
                            1247
                        ],
                        "verbose": [
                            1113,
                            1133,
                            1159
                        ],
                        "ins": [
                            1219,
                            1188,
                            1124,
                            1221,
                            1223,
                            1172,
                            1113,
                            1115
                        ],
                        "hasattr": [
                            1113,
                            1148
                        ],
                        "print": [
                            1114
                        ],
                        "shape": [
                            1115
                        ],
                        "validation_steps": [
                            1202,
                            1116
                        ],
                        "steps_per_epoch": [
                            1157,
                            1125,
                            1134,
                            1118,
                            1182,
                            1183
                        ],
                        "ValueError": [
                            1119
                        ],
                        "num_train_samples": [
                            1124,
                            1158,
                            1127,
                            1128,
                            1215
                        ],
                        "self._check_num_samples": [
                            1124
                        ],
                        "self": [
                            1247,
                            1124,
                            1130,
                            1259,
                            1132,
                            1200,
                            1169,
                            1141,
                            1142,
                            1177,
                            1148,
                            1149,
                            1151
                        ],
                        "batch_size": [
                            1248,
                            1155,
                            1124,
                            1201,
                            1211,
                            1215
                        ],
                        "index_array": [
                            1128,
                            1217,
                            1211,
                            1213
                        ],
                        "np.arange": [
                            1128
                        ],
                        "np": [
                            1128,
                            1213
                        ],
                        "self.history": [
                            1130,
                            1259,
                            1142
                        ],
                        "cbks.History": [
                            1130
                        ],
                        "cbks": [
                            1139,
                            1130,
                            1131,
                            1143
                        ],
                        "_callbacks": [
                            1138,
                            1131,
                            1142,
                            1143
                        ],
                        "cbks.BaseLogger": [
                            1131
                        ],
                        "self.stateful_metric_names": [
                            1132,
                            1141
                        ],
                        "count_mode": [
                            1137,
                            1140,
                            1135
                        ],
                        "_callbacks.append": [
                            1138
                        ],
                        "cbks.ProgbarLogger": [
                            1139
                        ],
                        "callbacks": [
                            1153,
                            1154,
                            1187,
                            1255,
                            1258,
                            1163,
                            1195,
                            1165,
                            1231,
                            1142,
                            1143,
                            1241,
                            1180
                        ],
                        "cbks.CallbackList": [
                            1143
                        ],
                        "out_labels": [
                            1253,
                            1192,
                            1238,
                            1207,
                            1144
                        ],
                        "self.callback_model": [
                            1148,
                            1149
                        ],
                        "callback_model": [
                            1153,
                            1256,
                            1196,
                            1164,
                            1242,
                            1149,
                            1151
                        ],
                        "callbacks.set_model": [
                            1153
                        ],
                        "callbacks.set_params": [
                            1154
                        ],
                        "epochs": [
                            1156,
                            1175
                        ],
                        "callback_metrics": [
                            1161
                        ],
                        "callbacks.on_train_begin": [
                            1163
                        ],
                        "callback_model.stop_training": [
                            1256,
                            1242,
                            1196,
                            1164
                        ],
                        "cbk": [
                            1165,
                            1166
                        ],
                        "cbk.validation_data": [
                            1166
                        ],
                        "feed": [
                            1169,
                            1171,
                            1172
                        ],
                        "self._feed_inputs": [
                            1169
                        ],
                        "self._feed_targets": [
                            1169
                        ],
                        "self._feed_sample_weights": [
                            1169
                        ],
                        "indices_for_conversion_to_dense": [
                            1232,
                            1170,
                            1173
                        ],
                        "i": [
                            1232,
                            1233,
                            1171,
                            1172,
                            1173
                        ],
                        "range": [
                            1183,
                            1171,
                            1175
                        ],
                        "len": [
                            1171,
                            1245,
                            1230
                        ],
                        "issparse": [
                            1172
                        ],
                        "K.is_sparse": [
                            1172
                        ],
                        "K": [
                            1172
                        ],
                        "indices_for_conversion_to_dense.append": [
                            1173
                        ],
                        "epoch": [
                            1255,
                            1180,
                            1175
                        ],
                        "initial_epoch": [
                            1175
                        ],
                        "m": [
                            1177,
                            1178,
                            1179
                        ],
                        "self.metrics": [
                            1177
                        ],
                        "isinstance": [
                            1250,
                            1219,
                            1190,
                            1236,
                            1204,
                            1178
                        ],
                        "Layer": [
                            1178
                        ],
                        "m.stateful": [
                            1178
                        ],
                        "m.reset_states": [
                            1179
                        ],
                        "callbacks.on_epoch_begin": [
                            1180
                        ],
                        "epoch_logs": [
                            1208,
                            1181,
                            1254,
                            1255
                        ],
                        "step_index": [
                            1185,
                            1187,
                            1195,
                            1183
                        ],
                        "batch_logs": [
                            1184,
                            1185,
                            1186,
                            1187,
                            1193,
                            1195,
                            1228,
                            1229,
                            1230,
                            1231,
                            1239,
                            1241
                        ],
                        "callbacks.on_batch_begin": [
                            1187,
                            1231
                        ],
                        "outs": [
                            1188,
                            1190,
                            1191,
                            1192,
                            1235,
                            1236,
                            1237,
                            1238
                        ],
                        "f": [
                            1235,
                            1188
                        ],
                        "list": [
                            1250,
                            1236,
                            1204,
                            1190
                        ],
                        "l": [
                            1253,
                            1254,
                            1192,
                            1193,
                            1238,
                            1207,
                            1208,
                            1239
                        ],
                        "o": [
                            1253,
                            1254,
                            1192,
                            1193,
                            1238,
                            1207,
                            1208,
                            1239
                        ],
                        "zip": [
                            1192,
                            1253,
                            1238,
                            1207
                        ],
                        "callbacks.on_batch_end": [
                            1241,
                            1195
                        ],
                        "val_outs": [
                            1250,
                            1251,
                            1253,
                            1200,
                            1204,
                            1205,
                            1207,
                            1247
                        ],
                        "self._test_loop": [
                            1200,
                            1247
                        ],
                        "shuffle": [
                            1210,
                            1212
                        ],
                        "_batch_shuffle": [
                            1211
                        ],
                        "np.random.shuffle": [
                            1213
                        ],
                        "np.random": [
                            1213
                        ],
                        "batches": [
                            1216,
                            1245,
                            1215
                        ],
                        "_make_batches": [
                            1215
                        ],
                        "batch_index": [
                            1216,
                            1229,
                            1231,
                            1241,
                            1245
                        ],
                        "batch_start": [
                            1216,
                            1217
                        ],
                        "batch_end": [
                            1216,
                            1217
                        ],
                        "enumerate": [
                            1216
                        ],
                        "batch_ids": [
                            1217,
                            1221,
                            1230,
                            1223
                        ],
                        "float": [
                            1219
                        ],
                        "ins_batch": [
                            1233,
                            1235,
                            1221,
                            1223
                        ],
                        "_slice_arrays": [
                            1221,
                            1223
                        ],
                        "TypeError": [
                            1224,
                            1225
                        ],
                        "toarray": [
                            1233
                        ],
                        "callbacks.on_epoch_end": [
                            1255
                        ],
                        "callbacks.on_train_end": [
                            1258
                        ]
                    },
                    "filtered_variables": {
                        "do_validation": [
                            1160,
                            1199,
                            1110,
                            1112,
                            1117,
                            1246
                        ],
                        "val_f": [
                            1200,
                            1247,
                            1111
                        ],
                        "val_ins": [
                            1166,
                            1200,
                            1111,
                            1113,
                            1115,
                            1247
                        ],
                        "verbose": [
                            1113,
                            1133,
                            1159
                        ],
                        "ins": [
                            1219,
                            1188,
                            1124,
                            1221,
                            1223,
                            1172,
                            1113,
                            1115
                        ],
                        "shape": [
                            1115
                        ],
                        "validation_steps": [
                            1202,
                            1116
                        ],
                        "steps_per_epoch": [
                            1157,
                            1125,
                            1134,
                            1118,
                            1182,
                            1183
                        ],
                        "num_train_samples": [
                            1124,
                            1158,
                            1127,
                            1128,
                            1215
                        ],
                        "self._check_num_samples": [
                            1124
                        ],
                        "self": [
                            1247,
                            1124,
                            1130,
                            1259,
                            1132,
                            1200,
                            1169,
                            1141,
                            1142,
                            1177,
                            1148,
                            1149,
                            1151
                        ],
                        "batch_size": [
                            1248,
                            1155,
                            1124,
                            1201,
                            1211,
                            1215
                        ],
                        "index_array": [
                            1128,
                            1217,
                            1211,
                            1213
                        ],
                        "np.arange": [
                            1128
                        ],
                        "np": [
                            1128,
                            1213
                        ],
                        "self.history": [
                            1130,
                            1259,
                            1142
                        ],
                        "cbks.History": [
                            1130
                        ],
                        "cbks": [
                            1139,
                            1130,
                            1131,
                            1143
                        ],
                        "_callbacks": [
                            1138,
                            1131,
                            1142,
                            1143
                        ],
                        "cbks.BaseLogger": [
                            1131
                        ],
                        "self.stateful_metric_names": [
                            1132,
                            1141
                        ],
                        "count_mode": [
                            1137,
                            1140,
                            1135
                        ],
                        "_callbacks.append": [
                            1138
                        ],
                        "cbks.ProgbarLogger": [
                            1139
                        ],
                        "callbacks": [
                            1153,
                            1154,
                            1187,
                            1255,
                            1258,
                            1163,
                            1195,
                            1165,
                            1231,
                            1142,
                            1143,
                            1241,
                            1180
                        ],
                        "cbks.CallbackList": [
                            1143
                        ],
                        "out_labels": [
                            1253,
                            1192,
                            1238,
                            1207,
                            1144
                        ],
                        "self.callback_model": [
                            1148,
                            1149
                        ],
                        "callback_model": [
                            1153,
                            1256,
                            1196,
                            1164,
                            1242,
                            1149,
                            1151
                        ],
                        "callbacks.set_model": [
                            1153
                        ],
                        "callbacks.set_params": [
                            1154
                        ],
                        "epochs": [
                            1156,
                            1175
                        ],
                        "callback_metrics": [
                            1161
                        ],
                        "callbacks.on_train_begin": [
                            1163
                        ],
                        "callback_model.stop_training": [
                            1256,
                            1242,
                            1196,
                            1164
                        ],
                        "cbk": [
                            1165,
                            1166
                        ],
                        "cbk.validation_data": [
                            1166
                        ],
                        "feed": [
                            1169,
                            1171,
                            1172
                        ],
                        "self._feed_inputs": [
                            1169
                        ],
                        "self._feed_targets": [
                            1169
                        ],
                        "self._feed_sample_weights": [
                            1169
                        ],
                        "indices_for_conversion_to_dense": [
                            1232,
                            1170,
                            1173
                        ],
                        "i": [
                            1232,
                            1233,
                            1171,
                            1172,
                            1173
                        ],
                        "issparse": [
                            1172
                        ],
                        "K.is_sparse": [
                            1172
                        ],
                        "K": [
                            1172
                        ],
                        "indices_for_conversion_to_dense.append": [
                            1173
                        ],
                        "epoch": [
                            1255,
                            1180,
                            1175
                        ],
                        "initial_epoch": [
                            1175
                        ],
                        "m": [
                            1177,
                            1178,
                            1179
                        ],
                        "self.metrics": [
                            1177
                        ],
                        "Layer": [
                            1178
                        ],
                        "m.stateful": [
                            1178
                        ],
                        "m.reset_states": [
                            1179
                        ],
                        "callbacks.on_epoch_begin": [
                            1180
                        ],
                        "epoch_logs": [
                            1208,
                            1181,
                            1254,
                            1255
                        ],
                        "step_index": [
                            1185,
                            1187,
                            1195,
                            1183
                        ],
                        "batch_logs": [
                            1184,
                            1185,
                            1186,
                            1187,
                            1193,
                            1195,
                            1228,
                            1229,
                            1230,
                            1231,
                            1239,
                            1241
                        ],
                        "callbacks.on_batch_begin": [
                            1187,
                            1231
                        ],
                        "outs": [
                            1188,
                            1190,
                            1191,
                            1192,
                            1235,
                            1236,
                            1237,
                            1238
                        ],
                        "f": [
                            1235,
                            1188
                        ],
                        "l": [
                            1253,
                            1254,
                            1192,
                            1193,
                            1238,
                            1207,
                            1208,
                            1239
                        ],
                        "o": [
                            1253,
                            1254,
                            1192,
                            1193,
                            1238,
                            1207,
                            1208,
                            1239
                        ],
                        "callbacks.on_batch_end": [
                            1241,
                            1195
                        ],
                        "val_outs": [
                            1250,
                            1251,
                            1253,
                            1200,
                            1204,
                            1205,
                            1207,
                            1247
                        ],
                        "self._test_loop": [
                            1200,
                            1247
                        ],
                        "shuffle": [
                            1210,
                            1212
                        ],
                        "_batch_shuffle": [
                            1211
                        ],
                        "np.random.shuffle": [
                            1213
                        ],
                        "np.random": [
                            1213
                        ],
                        "batches": [
                            1216,
                            1245,
                            1215
                        ],
                        "_make_batches": [
                            1215
                        ],
                        "batch_index": [
                            1216,
                            1229,
                            1231,
                            1241,
                            1245
                        ],
                        "batch_start": [
                            1216,
                            1217
                        ],
                        "batch_end": [
                            1216,
                            1217
                        ],
                        "batch_ids": [
                            1217,
                            1221,
                            1230,
                            1223
                        ],
                        "ins_batch": [
                            1233,
                            1235,
                            1221,
                            1223
                        ],
                        "_slice_arrays": [
                            1221,
                            1223
                        ],
                        "toarray": [
                            1233
                        ],
                        "callbacks.on_epoch_end": [
                            1255
                        ],
                        "callbacks.on_train_end": [
                            1258
                        ]
                    },
                    "diff_line_number": 1177,
                    "class_data": {
                        "signature": "class Model(Container)",
                        "docstring": "The `Model` class adds training & evaluation routines to a `Container`.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name + '\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"' + name + '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss=' + str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n    if loss_weights is None:\n        loss_weights_list = [1.0 for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.0))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss_weights=' + str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' + str(loss_weights) + ' - expected a list of dicts.')\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError('When passing a list as `target_tensors`, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed target_tensors=' + str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n            tmp_target_tensors = []\n            for name in self.output_names:\n                tmp_target_tensors.append(target_tensors.get(name, None))\n            target_tensors = tmp_target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self._internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in sample_weight_mode dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name + '\" missing from sample_weight_modes dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed sample_weight_mode=' + str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            elif sample_weight_mode == 'temporal':\n                sample_weights.append(K.placeholder(ndim=2, name=name + '_sample_weights'))\n                sample_weight_modes.append('temporal')\n            else:\n                sample_weights.append(K.placeholder(ndim=1, name=name + '_sample_weights'))\n                sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n    self.metrics = metrics or []\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled because it has no loss to optimize.')\n            else:\n                total_loss = 0.0\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n    self.metrics_updates = []\n    self.stateful_metric_names = []\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n                for metric in metrics:\n                    if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n                        output_shape = self._internal_output_shapes[i]\n                        if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.binary_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.binary_crossentropy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.sparse_categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.sparse_categorical_crossentropy\n                        elif metric in ('accuracy', 'acc'):\n                            metric_fn = metrics_module.categorical_accuracy\n                        elif metric in ('crossentropy', 'ce'):\n                            metric_fn = metrics_module.categorical_crossentropy\n                        if metric in ('accuracy', 'acc'):\n                            suffix = 'acc'\n                        elif metric in ('crossentropy', 'ce'):\n                            suffix = 'ce'\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + suffix\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        if hasattr(metric_fn, 'name'):\n                            metric_name = metric_fn.name\n                        else:\n                            metric_name = metric_fn.__name__\n                        metric_name = metric_name_prefix + metric_name\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n                    if len(self.output_names) > 1:\n                        metric_name = self.output_names[i] + '_' + metric_name\n                    j = 1\n                    base_metric_name = metric_name\n                    while metric_name in self.metrics_names:\n                        metric_name = base_metric_name + '_' + str(j)\n                        j += 1\n                    self.metrics_names.append(metric_name)\n                    self.metrics_tensors.append(metric_result)\n                    if isinstance(metric_fn, Layer) and metric_fn.stateful:\n                        self.stateful_metric_names.append(metric_name)\n                        self.metrics_updates += metric_fn.updates\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n    self._function_kwargs = kwargs\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                            "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n    if len(self.trainable_weights) != len(self._collected_trainable_weights):\n        warnings.warn(UserWarning('Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?'))",
                            "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)\n            updates = self.updates + training_updates + self.metrics_updates\n            self.train_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)",
                            "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        self.test_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates + self.metrics_updates, name='test_function', **self._function_kwargs)",
                            "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)",
                            "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name + ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have a defined shape, or ' + steps_name + ' should be specified.')\n    return num_samples",
                            "def _fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' % (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` when doing step-wise training, i.e. `steps_per_epoch` must be set.')\n    num_train_samples = self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        _callbacks.append(cbks.ProgbarLogger(count_mode, stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    out_labels = out_labels or []\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'batch_size': batch_size, 'epochs': epochs, 'steps': steps_per_epoch, 'samples': num_train_samples, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics or []})\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    for epoch in range(initial_epoch, epochs):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, steps=validation_steps, verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. If using HDF5 input data, pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                for i in indices_for_conversion_to_dense:\n                    ins_batch[i] = ins_batch[i].toarray()\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n                if batch_index == len(batches) - 1:\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                            "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    indices_for_conversion_to_dense = []\n    for i in range(len(self._feed_inputs)):\n        if issparse(ins[i]) and (not K.is_sparse(self._feed_inputs[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0) for i in range(len(unconcatenated_outs))]\n    else:\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                            "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if hasattr(self, 'metrics'):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = float(batch_out)\n                    else:\n                        outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs * len(batch_ids)\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                            "def _standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.')\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        elif not hasattr(loss_fn, '__name__') or getattr(losses, loss_fn.__name__, None) is None:\n            output_shapes.append(None)\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False, exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight, self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight, self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode) for ref, sw, cw, mode in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    if check_array_lengths:\n        _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y, self._feed_loss_fns, self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples')\n    return (x, y, sample_weights)",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and (steps_per_epoch is None):\n        raise ValueError('If fitting from data tensors, you should specify the `steps_per_epoch` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, batch_size=batch_size)\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, it must contain 2 (x_val, y_val) or 3 (x_val, y_val, val_sample_weights) items, however it contains %d items' % len(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, sample_weight=val_sample_weight, batch_size=batch_size)\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_split and 0.0 < validation_split < 1.0:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1.0 - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1.0 - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (_slice_arrays(sample_weights, 0, split_at), _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = [0.0]\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n    out_labels = self.metrics_names\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n    return self._fit_loop(f, ins, out_labels=out_labels, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, callback_metrics=callback_metrics, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and (steps is None):\n        raise ValueError('If evaluating from data tensors, you should specify the `steps` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, batch_size=batch_size)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def predict(self, x, batch_size=None, verbose=0, steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, you should specify the `steps` argument.')\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples. Batch size: ' + str(batch_size) + '.')\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def train_on_batch(self, x, y, sample_weight=None, class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Trains the model on data generated batch-by-batch by a Python generator or an instance of `Sequence`.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches may\n            have different sizes. For example, the last batch of the epoch\n            is commonly smaller than the others, if the size of the dataset\n            is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only). This can be useful to tell the model to\n            \"pay more attention\" to samples from an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process-based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean.\n            If `True`, use process-based threading.\n            If unspecified, `use_multiprocessing` will default to `False`.\n            Note that because this implementation relies on multiprocessing,\n            you should not pass non-picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        shuffle: Boolean. Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (`keras.utils.Sequence`).\n            Has no effect when `steps_per_epoch` is not `None`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        ValueError: In case the generator yields data in an invalid format.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while True:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n    \"\"\"\n    wait_time = 0.01\n    epoch = initial_epoch\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.')\n    val_gen = hasattr(validation_data, 'next') or hasattr(validation_data, '__next__') or isinstance(validation_data, Sequence)\n    if val_gen and (not isinstance(validation_data, Sequence)) and (not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `validation_steps` or use the `keras.utils.Sequence` class.')\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(cbks.ProgbarLogger(count_mode='steps', stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'epochs': epochs, 'steps': steps_per_epoch, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics})\n    callbacks.on_train_begin()\n    enqueuer = None\n    val_enqueuer = None\n    try:\n        if do_validation and (not val_gen):\n            if len(validation_data) == 2:\n                val_x, val_y = validation_data\n                val_sample_weight = None\n            elif len(validation_data) == 3:\n                val_x, val_y, val_sample_weight = validation_data\n            else:\n                raise ValueError('`validation_data` should be a tuple `(val_x, val_y, val_sample_weight)` or `(val_x, val_y)`. Found: ' + str(validation_data))\n            val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, val_sample_weight)\n            val_data = val_x + val_y + val_sample_weights\n            if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n                val_data += [0.0]\n            for cbk in callbacks:\n                cbk.validation_data = val_data\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        callback_model.stop_training = False\n        epoch_logs = {}\n        while epoch < epochs:\n            for m in self.metrics:\n                if isinstance(m, Layer) and m.stateful:\n                    m.reset_states()\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                batch_logs = {}\n                if x is None or len(x) == 0:\n                    batch_size = 1\n                elif isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = self.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                batch_index += 1\n                steps_done += 1\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(validation_data, validation_steps, workers=workers, use_multiprocessing=use_multiprocessing, max_queue_size=max_queue_size)\n                    else:\n                        val_outs = self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n                if callback_model.stop_training:\n                    break\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n    callbacks.on_train_end()\n    return self.history",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n    stateful_metric_indices = []\n    if hasattr(self, 'metrics'):\n        for i, m in enumerate(self.metrics):\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    steps_done = 0\n    wait_time = 0.01\n    outs_per_batch = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if not isinstance(outs, list):\n                outs = [outs]\n            outs_per_batch.append(outs)\n            if x is None or len(x) == 0:\n                batch_size = 1\n            elif isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. Batches should at least contain one item.')\n            steps_done += 1\n            batch_sizes.append(batch_size)\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    averages = []\n    for i in range(len(outs)):\n        if i not in stateful_metric_indices:\n            averages.append(np.average([out[i] for out in outs_per_batch], weights=batch_sizes))\n        else:\n            averages.append(float(outs_per_batch[-1][i]))\n    if len(averages) == 1:\n        return averages[0]\n    return averages",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n            else:\n                x = generator_output\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                            "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n    for metric in metrics:\n        if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n            output_shape = self._internal_output_shapes[i]\n            if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.binary_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.binary_crossentropy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.sparse_categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.sparse_categorical_crossentropy\n            elif metric in ('accuracy', 'acc'):\n                metric_fn = metrics_module.categorical_accuracy\n            elif metric in ('crossentropy', 'ce'):\n                metric_fn = metrics_module.categorical_crossentropy\n            if metric in ('accuracy', 'acc'):\n                suffix = 'acc'\n            elif metric in ('crossentropy', 'ce'):\n                suffix = 'ce'\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + suffix\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            if hasattr(metric_fn, 'name'):\n                metric_name = metric_fn.name\n            else:\n                metric_name = metric_fn.__name__\n            metric_name = metric_name_prefix + metric_name\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[i] + '_' + metric_name\n        j = 1\n        base_metric_name = metric_name\n        while metric_name in self.metrics_names:\n            metric_name = base_metric_name + '_' + str(j)\n            j += 1\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_result)\n        if isinstance(metric_fn, Layer) and metric_fn.stateful:\n            self.stateful_metric_names.append(metric_name)\n            self.metrics_updates += metric_fn.updates"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "_check_trainable_weights_consistency(self)",
                            "_make_train_function(self)",
                            "_make_test_function(self)",
                            "_make_predict_function(self)",
                            "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                            "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                            "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                            "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                            "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                            "predict(self, x, batch_size=None, verbose=0, steps=None)",
                            "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_on_batch(self, x)",
                            "fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "handle_metrics(metrics, weights=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x11725fe50>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "val_ins": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.5890584 , 0.44453373],\n       [0.80689372, 0.6436606 ],\n       [0.05430554, 0.02156771],\n       ...,\n       [0.04182007, 0.80163004],\n       [0.68135087, 0.81137648],\n       [0.63715502, 0.08571966]]), array([[1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n      dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "num_train_samples": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x116f6c650>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x116f6c650>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "count_mode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'acc', 'true_positives', 'val_loss', 'val_acc', 'val_true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x116f6c810>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "Layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.stateful": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x117049ad0>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._test_loop": {
                                    "variable_value": "<bound method Model._test_loop of <keras.engine.training.Model object at 0x116f6c650>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_batch_shuffle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random.shuffle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ins_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "val_f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x11725fe50>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "val_ins": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.5890584 , 0.44453373],\n       [0.80689372, 0.6436606 ],\n       [0.05430554, 0.02156771],\n       ...,\n       [0.04182007, 0.80163004],\n       [0.68135087, 0.81137648],\n       [0.63715502, 0.08571966]]), array([[1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n      dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "num_train_samples": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x116f6c650>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x116f6c650>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([218, 662, 865, 441, 153, 220, 982, 349, 132, 500, 966, 916, 402,\n       969, 291, 255, 535, 292, 559, 979, 489, 265, 822, 539, 254, 511,\n       630, 280, 161, 687, 866, 104, 519, 205, 102, 134, 934, 677, 483,\n       417, 719, 625, 552, 810, 324, 364, 862, 198, 842, 692, 956, 657,\n         8, 543,  71,  42, 451, 896, 572, 619,  66, 714, 650, 482, 303,\n       769, 361, 208, 988,  16, 447,   2, 950, 518,   5,  59, 892, 235,\n       568, 294, 225, 832, 949, 548, 426, 430, 829, 154, 537, 902, 850,\n       877, 823, 152,  70, 209, 918, 921,  68, 797, 931, 833, 243, 188,\n       712, 526, 768, 560, 958, 849, 326,  47, 382, 517, 981,  85, 903,\n        13, 633, 497, 623, 646, 374, 320, 118, 239, 706, 231, 926, 925,\n       391, 174, 755, 128, 992, 686, 321, 529, 590, 381, 544, 157, 928,\n       514, 394, 848, 192, 699, 490, 818, 680, 565, 173, 577, 898, 679,\n       271, 136, 780, 346, 100, 337, 644, 176, 723, 262, 348,  12, 413,\n       587, 393,  53, 241, 401, 551, 708, 636, 861, 812, 304, 328, 117,\n       175, 330, 704, 971, 512, 261, 720, 162, 533, 804, 947, 217, 183,\n       893, 358, 836, 224, 469, 785, 484, 775, 933, 210, 108, 352, 333,\n       735, 783, 164,   7, 908, 960, 872, 467, 901, 101, 795, 954, 948,\n       742, 279, 158, 521, 532, 747, 196, 732, 852, 776, 792, 895, 582,\n       448, 649, 663, 696, 945, 376, 972, 955, 851, 525, 445, 475, 881,\n       817, 671, 492, 202, 788, 113, 986, 640, 741, 345, 998, 219,  73,\n       770, 624, 965, 468, 388, 486,  88, 591, 232, 796, 939, 602, 700,\n        61, 570,  40, 414, 169, 820, 103,  62, 882, 867, 574, 930, 856,\n       135, 967, 171, 904, 354, 996, 429, 109, 773, 213, 730, 284, 540,\n        52, 308, 378, 325, 370, 675, 973, 655, 608, 236,   6, 642, 999,\n       637, 757,  64, 373, 302, 442, 666, 805, 863,  96,  28, 498, 285,\n       313, 283, 523, 234, 914, 628, 616, 592, 506, 275, 859, 580, 567,\n       147, 425, 980, 146, 306, 310, 596, 952, 516,  74, 357, 444, 739,\n       462,  75, 139, 811,  32, 363, 427, 524, 844, 759, 664, 749, 828,\n       766, 784, 638, 586, 351, 455, 656, 436, 495, 248,   1, 970,  39,\n       385, 615, 545,  23, 367, 705,  55, 242, 165, 116, 148, 659, 290,\n       140, 751, 801,  86,  67, 588, 670, 618, 106, 660, 151, 432, 935,\n       206, 433, 978, 281, 827, 156, 635, 530,  41, 951, 868, 120, 240,\n        92, 639, 854, 531, 137, 509, 899, 214, 131, 685,  18, 873, 840,\n       826, 365, 466, 244, 305, 317, 272, 215, 369, 250, 372, 632, 710,\n        81, 407, 184, 390, 138, 419, 295, 124, 900, 315, 316, 534, 936,\n       464, 927, 123,  22,  50, 460, 738, 549, 340, 342, 212, 622,  90,\n        27, 821, 287, 941, 307, 359, 975, 344, 259,  93, 542, 912, 562,\n       499, 522, 180, 629, 452, 798, 105, 806, 869, 528,  82, 546, 520,\n       503, 578, 879, 211,  80,  97, 323, 839, 266, 411, 962, 127, 772,\n       112, 815, 276, 329, 995, 416, 807, 845, 269, 396, 268, 790, 472,\n       350, 227, 167, 599, 884, 177,  77, 485, 834, 754,  21, 129, 860,\n       597, 717, 777, 470, 527,  63, 362, 905, 343, 493, 395, 409, 338,\n       418, 230, 199, 508, 141, 802, 767, 553, 709,  15, 612, 245,  48,\n       406, 816,  98, 185, 779, 984, 746, 410, 119, 311, 880, 974, 458,\n       253, 658, 479, 676, 721, 536, 194, 641, 643, 178, 728, 789, 454,\n       392, 278, 238, 189, 667, 610, 389, 150, 569, 683, 944, 221,  10,\n       689, 257, 701,  91, 894, 634, 314, 288, 297, 163, 961, 435, 487,\n       223, 697,  43,  83, 335, 690, 564,  34, 809, 846, 688, 778, 277,\n       145, 855,  65, 627, 691, 693, 144, 661,  11, 727, 888, 573, 476,\n        33, 753, 319, 190, 858,  78, 282, 228, 726, 334, 857,   0, 604,\n       748, 976, 589, 994, 729, 267,  84, 289, 353,   3, 824, 550, 835,\n       456, 558, 791, 296, 695, 383, 575, 883, 258, 607, 143,  51, 722,\n       977, 554,  44, 771, 653, 488, 400, 331, 733, 437, 203, 207, 130,\n       698, 724, 166,  24, 651, 375, 399,  89, 841, 922, 412, 579, 195,\n       847, 786, 515, 765, 341, 465, 740, 774,   4, 887,  17, 678, 603,\n        94, 983, 507, 256,  38, 953, 126, 115, 398, 172, 702, 563, 191,\n       309, 989, 273, 919, 547, 669, 360, 803, 831, 159, 440, 404, 237,\n       300, 885, 876, 943, 439, 160, 907, 800, 959, 571, 993, 434, 617,\n       122, 446, 379, 731, 251, 421, 913, 415, 449, 917, 673, 906, 541,\n       614, 408, 186, 985, 200,  99, 924, 600, 181, 716, 463, 226, 694,\n       711, 718, 631, 197, 938,  45, 871, 480, 263, 609, 964, 233,  26,\n       681, 247, 339, 478, 843,  58, 222, 111, 556, 621, 318, 149, 725,\n       781, 875, 513, 929, 286, 647, 787, 510, 878, 168,  72, 387, 114,\n       422, 252, 504,  95, 932,  57, 312, 825, 752, 793, 764, 561, 538,\n       794, 299, 744, 204, 799, 626, 121,  31, 672,  35, 830, 155,  30,\n       270, 915, 761,  69, 703, 133,  46, 870, 201, 327, 264, 322, 457,\n       987, 494, 942, 502, 652, 886, 461, 853, 593, 813, 356, 557, 713,\n       648, 380, 736, 654, 246, 968, 505, 368, 920, 450, 501, 585, 601,\n       249, 819, 377, 707, 459, 366, 481, 923,  56, 431, 909, 682, 332,\n       838, 665, 347, 750,  54, 940, 566, 110, 897, 471,  60, 298, 581,\n       762, 403, 473, 734, 620, 808, 911, 957, 594, 763, 782, 937, 837,\n       991, 605,   9, 611, 182, 142,  14, 424, 453, 428, 477, 274,  25,\n       598, 674, 384, 216, 229, 756,  49, 684, 814, 355, 170, 745, 890,\n        87,  79, 443, 397, 193, 107, 889, 595, 179, 301, 743, 496, 997,\n       371, 758, 386,  19, 910, 576, 555,  20,  37, 405, 963, 645, 187,\n       438, 336,  29, 583, 613, 491, 293,  76, 874,  36, 760, 946, 423,\n       668, 737, 990, 420, 606, 891, 715, 125, 260, 584, 474, 864])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1000,)"
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x1172eb650>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x1172eb690>, <keras.callbacks.ProgbarLogger object at 0x1172eb610>, <keras.callbacks.History object at 0x1172eb650>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "count_mode": {
                                    "variable_value": "'samples'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x117313050>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x1172eb6d0>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x116f6c650>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x1172eb6d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x1172eb6d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'acc', 'true_positives', 'val_loss', 'val_acc', 'val_true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x1172eb6d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": "<keras.callbacks.History object at 0x1172eb650>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "feed": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>, <tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>, <tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": "<built-in method append of list object at 0x1173130a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "'out'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x116f6c810>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "Layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.stateful": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "m.reset_states": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x1172eb6d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 0.6407457590103149, 'val_acc': 0.699999988079071, 'val_true_positives': 491, 'loss': 0.8033562979102135, 'acc': 0.4900000066310167, 'true_positives': 484}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "step_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 0.7445489, 'acc': 0.6, 'true_positives': 484}",
                                    "variable_type": "dict",
                                    "variable_shape": "5"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x1172eb6d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.7445489, 0.6, 484]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x117049ad0>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'true_positives'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "o": {
                                    "variable_value": "491",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x1172eb6d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[0.6407457590103149, 0.699999988079071, 491]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._test_loop": {
                                    "variable_value": "<bound method Model._test_loop of <keras.engine.training.Model object at 0x116f6c650>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_batch_shuffle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random.shuffle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": "[(0, 10), (10, 20), (20, 30), (30, 40), (40, 50), (50, 60), (60, 70), (70, 80), (80, 90), (90, 100), (100, 110), (110, 120), (120, 130), (130, 140), (140, 150), (150, 160), (160, 170), (170, 180), (180, 190), (190, 200), (200, 210), (210, 220), (220, 230), (230, 240), (240, 250), (250, 260), (260, 270), (270, 280), (280, 290), (290, 300), (300, 310), (310, 320), (320, 330), (330, 340), (340, 350), (350, 360), (360, 370), (370, 380), (380, 390), (390, 400), (400, 410), (410, 420), (420, 430), (430, 440), (440, 450), (450, 460), (460, 470), (470, 480), (480, 490), (490, 500), (500, 510), (510, 520), (520, 530), (530, 540), (540, 550), (550, 560), (560, 570), (570, 580), (580, 590), (590, 600), (600, 610), (610, 620), (620, 630), (630, 640), (640, 650), (650, 660), (660, 670), (670, 680), (680, 690), (690, 700), (700, 710), (710, 720), (720, 730), (730, 740), (740, 750), (750, 760), (760, 770), (770, 780), (780, 790), (790, 800), (800, 810), (810, 820), (820, 830), (830, 840), (840, 850), (850, 860), (860, 870), (870, 880), (880, 890), (890, 900), (900, 910), (910, 920), (920, 930), (930, 940), (940, 950), (950, 960), (960, 970), (970, 980), (980, 990), (990, 1000)]",
                                    "variable_type": "list",
                                    "variable_shape": "100"
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "99",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": "990",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": "array([990, 420, 606, 891, 715, 125, 260, 584, 474, 864])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "ins_batch": {
                                    "variable_value": "[array([[0.29118509, 0.18378399],\n       [0.52297078, 0.58039063],\n       [0.78259102, 0.01691617],\n       [0.68603538, 0.59045791],\n       [0.62471962, 0.01631   ],\n       [0.20454516, 0.74371163],\n       [0.76162537, 0.17637378],\n       [0.73769111, 0.88482236],\n       [0.50803838, 0.21256348],\n       [0.7737451 , 0.93125476]]), array([[0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x1172eb6d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x1172eb6d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x113550550>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "val_ins": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.5890584 , 0.44453373],\n       [0.80689372, 0.6436606 ],\n       [0.05430554, 0.02156771],\n       ...,\n       [0.04182007, 0.80163004],\n       [0.68135087, 0.81137648],\n       [0.63715502, 0.08571966]]), array([[1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n      dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "num_train_samples": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x11345bb90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11345bb90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "count_mode": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'acc', 'true_positives', 'val_loss', 'val_acc', 'val_true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x113433210>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x11363bd10>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._test_loop": {
                                    "variable_value": "<bound method Model._test_loop of <keras.engine.training.Model object at 0x11345bb90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_batch_shuffle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random.shuffle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ins_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            },
                            {
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "val_f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x113550550>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "val_ins": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.5890584 , 0.44453373],\n       [0.80689372, 0.6436606 ],\n       [0.05430554, 0.02156771],\n       ...,\n       [0.04182007, 0.80163004],\n       [0.68135087, 0.81137648],\n       [0.63715502, 0.08571966]]), array([[1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n      dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "num_train_samples": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x11345bb90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11345bb90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([218, 662, 865, 441, 153, 220, 982, 349, 132, 500, 966, 916, 402,\n       969, 291, 255, 535, 292, 559, 979, 489, 265, 822, 539, 254, 511,\n       630, 280, 161, 687, 866, 104, 519, 205, 102, 134, 934, 677, 483,\n       417, 719, 625, 552, 810, 324, 364, 862, 198, 842, 692, 956, 657,\n         8, 543,  71,  42, 451, 896, 572, 619,  66, 714, 650, 482, 303,\n       769, 361, 208, 988,  16, 447,   2, 950, 518,   5,  59, 892, 235,\n       568, 294, 225, 832, 949, 548, 426, 430, 829, 154, 537, 902, 850,\n       877, 823, 152,  70, 209, 918, 921,  68, 797, 931, 833, 243, 188,\n       712, 526, 768, 560, 958, 849, 326,  47, 382, 517, 981,  85, 903,\n        13, 633, 497, 623, 646, 374, 320, 118, 239, 706, 231, 926, 925,\n       391, 174, 755, 128, 992, 686, 321, 529, 590, 381, 544, 157, 928,\n       514, 394, 848, 192, 699, 490, 818, 680, 565, 173, 577, 898, 679,\n       271, 136, 780, 346, 100, 337, 644, 176, 723, 262, 348,  12, 413,\n       587, 393,  53, 241, 401, 551, 708, 636, 861, 812, 304, 328, 117,\n       175, 330, 704, 971, 512, 261, 720, 162, 533, 804, 947, 217, 183,\n       893, 358, 836, 224, 469, 785, 484, 775, 933, 210, 108, 352, 333,\n       735, 783, 164,   7, 908, 960, 872, 467, 901, 101, 795, 954, 948,\n       742, 279, 158, 521, 532, 747, 196, 732, 852, 776, 792, 895, 582,\n       448, 649, 663, 696, 945, 376, 972, 955, 851, 525, 445, 475, 881,\n       817, 671, 492, 202, 788, 113, 986, 640, 741, 345, 998, 219,  73,\n       770, 624, 965, 468, 388, 486,  88, 591, 232, 796, 939, 602, 700,\n        61, 570,  40, 414, 169, 820, 103,  62, 882, 867, 574, 930, 856,\n       135, 967, 171, 904, 354, 996, 429, 109, 773, 213, 730, 284, 540,\n        52, 308, 378, 325, 370, 675, 973, 655, 608, 236,   6, 642, 999,\n       637, 757,  64, 373, 302, 442, 666, 805, 863,  96,  28, 498, 285,\n       313, 283, 523, 234, 914, 628, 616, 592, 506, 275, 859, 580, 567,\n       147, 425, 980, 146, 306, 310, 596, 952, 516,  74, 357, 444, 739,\n       462,  75, 139, 811,  32, 363, 427, 524, 844, 759, 664, 749, 828,\n       766, 784, 638, 586, 351, 455, 656, 436, 495, 248,   1, 970,  39,\n       385, 615, 545,  23, 367, 705,  55, 242, 165, 116, 148, 659, 290,\n       140, 751, 801,  86,  67, 588, 670, 618, 106, 660, 151, 432, 935,\n       206, 433, 978, 281, 827, 156, 635, 530,  41, 951, 868, 120, 240,\n        92, 639, 854, 531, 137, 509, 899, 214, 131, 685,  18, 873, 840,\n       826, 365, 466, 244, 305, 317, 272, 215, 369, 250, 372, 632, 710,\n        81, 407, 184, 390, 138, 419, 295, 124, 900, 315, 316, 534, 936,\n       464, 927, 123,  22,  50, 460, 738, 549, 340, 342, 212, 622,  90,\n        27, 821, 287, 941, 307, 359, 975, 344, 259,  93, 542, 912, 562,\n       499, 522, 180, 629, 452, 798, 105, 806, 869, 528,  82, 546, 520,\n       503, 578, 879, 211,  80,  97, 323, 839, 266, 411, 962, 127, 772,\n       112, 815, 276, 329, 995, 416, 807, 845, 269, 396, 268, 790, 472,\n       350, 227, 167, 599, 884, 177,  77, 485, 834, 754,  21, 129, 860,\n       597, 717, 777, 470, 527,  63, 362, 905, 343, 493, 395, 409, 338,\n       418, 230, 199, 508, 141, 802, 767, 553, 709,  15, 612, 245,  48,\n       406, 816,  98, 185, 779, 984, 746, 410, 119, 311, 880, 974, 458,\n       253, 658, 479, 676, 721, 536, 194, 641, 643, 178, 728, 789, 454,\n       392, 278, 238, 189, 667, 610, 389, 150, 569, 683, 944, 221,  10,\n       689, 257, 701,  91, 894, 634, 314, 288, 297, 163, 961, 435, 487,\n       223, 697,  43,  83, 335, 690, 564,  34, 809, 846, 688, 778, 277,\n       145, 855,  65, 627, 691, 693, 144, 661,  11, 727, 888, 573, 476,\n        33, 753, 319, 190, 858,  78, 282, 228, 726, 334, 857,   0, 604,\n       748, 976, 589, 994, 729, 267,  84, 289, 353,   3, 824, 550, 835,\n       456, 558, 791, 296, 695, 383, 575, 883, 258, 607, 143,  51, 722,\n       977, 554,  44, 771, 653, 488, 400, 331, 733, 437, 203, 207, 130,\n       698, 724, 166,  24, 651, 375, 399,  89, 841, 922, 412, 579, 195,\n       847, 786, 515, 765, 341, 465, 740, 774,   4, 887,  17, 678, 603,\n        94, 983, 507, 256,  38, 953, 126, 115, 398, 172, 702, 563, 191,\n       309, 989, 273, 919, 547, 669, 360, 803, 831, 159, 440, 404, 237,\n       300, 885, 876, 943, 439, 160, 907, 800, 959, 571, 993, 434, 617,\n       122, 446, 379, 731, 251, 421, 913, 415, 449, 917, 673, 906, 541,\n       614, 408, 186, 985, 200,  99, 924, 600, 181, 716, 463, 226, 694,\n       711, 718, 631, 197, 938,  45, 871, 480, 263, 609, 964, 233,  26,\n       681, 247, 339, 478, 843,  58, 222, 111, 556, 621, 318, 149, 725,\n       781, 875, 513, 929, 286, 647, 787, 510, 878, 168,  72, 387, 114,\n       422, 252, 504,  95, 932,  57, 312, 825, 752, 793, 764, 561, 538,\n       794, 299, 744, 204, 799, 626, 121,  31, 672,  35, 830, 155,  30,\n       270, 915, 761,  69, 703, 133,  46, 870, 201, 327, 264, 322, 457,\n       987, 494, 942, 502, 652, 886, 461, 853, 593, 813, 356, 557, 713,\n       648, 380, 736, 654, 246, 968, 505, 368, 920, 450, 501, 585, 601,\n       249, 819, 377, 707, 459, 366, 481, 923,  56, 431, 909, 682, 332,\n       838, 665, 347, 750,  54, 940, 566, 110, 897, 471,  60, 298, 581,\n       762, 403, 473, 734, 620, 808, 911, 957, 594, 763, 782, 937, 837,\n       991, 605,   9, 611, 182, 142,  14, 424, 453, 428, 477, 274,  25,\n       598, 674, 384, 216, 229, 756,  49, 684, 814, 355, 170, 745, 890,\n        87,  79, 443, 397, 193, 107, 889, 595, 179, 301, 743, 496, 997,\n       371, 758, 386,  19, 910, 576, 555,  20,  37, 405, 963, 645, 187,\n       438, 336,  29, 583, 613, 491, 293,  76, 874,  36, 760, 946, 423,\n       668, 737, 990, 420, 606, 891, 715, 125, 260, 584, 474, 864])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1000,)"
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x1137aa550>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x1137aa590>, <keras.callbacks.ProgbarLogger object at 0x1137aa510>, <keras.callbacks.History object at 0x1137aa550>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "count_mode": {
                                    "variable_value": "'samples'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x1137d0140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x1137aa5d0>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11345bb90>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x1137aa5d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x1137aa5d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'acc', 'true_positives', 'val_loss', 'val_acc', 'val_true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x1137aa5d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": "<keras.callbacks.History object at 0x1137aa550>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "feed": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>, <tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>, <tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": "<built-in method append of list object at 0x1137d0190>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x113433210>",
                                    "variable_type": "BinaryTruePositives",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x113433210>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": "<bound method test_stateful_metrics.<locals>.BinaryTruePositives.reset_states of <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x113433210>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x1137aa5d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 0.6407457590103149, 'val_acc': 0.699999988079071, 'val_true_positives': 7, 'loss': 0.8033562979102135, 'acc': 0.4900000066310167, 'true_positives': 484}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "step_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 99, 'size': 10, 'loss': 0.7445489, 'acc': 0.6, 'true_positives': 484}",
                                    "variable_type": "dict",
                                    "variable_shape": "5"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x1137aa5d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.7445489, 0.6, 484]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x11363bd10>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'true_positives'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "o": {
                                    "variable_value": "7",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x1137aa5d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[0.6407457590103149, 0.699999988079071, 7]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._test_loop": {
                                    "variable_value": "<bound method Model._test_loop of <keras.engine.training.Model object at 0x11345bb90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "_batch_shuffle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random.shuffle": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.random": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": "[(0, 10), (10, 20), (20, 30), (30, 40), (40, 50), (50, 60), (60, 70), (70, 80), (80, 90), (90, 100), (100, 110), (110, 120), (120, 130), (130, 140), (140, 150), (150, 160), (160, 170), (170, 180), (180, 190), (190, 200), (200, 210), (210, 220), (220, 230), (230, 240), (240, 250), (250, 260), (260, 270), (270, 280), (280, 290), (290, 300), (300, 310), (310, 320), (320, 330), (330, 340), (340, 350), (350, 360), (360, 370), (370, 380), (380, 390), (390, 400), (400, 410), (410, 420), (420, 430), (430, 440), (440, 450), (450, 460), (460, 470), (470, 480), (480, 490), (490, 500), (500, 510), (510, 520), (520, 530), (530, 540), (540, 550), (550, 560), (560, 570), (570, 580), (580, 590), (590, 600), (600, 610), (610, 620), (620, 630), (630, 640), (640, 650), (650, 660), (660, 670), (670, 680), (680, 690), (690, 700), (700, 710), (710, 720), (720, 730), (730, 740), (740, 750), (750, 760), (760, 770), (770, 780), (780, 790), (790, 800), (800, 810), (810, 820), (820, 830), (830, 840), (840, 850), (850, 860), (860, 870), (870, 880), (880, 890), (890, 900), (900, 910), (910, 920), (920, 930), (930, 940), (940, 950), (950, 960), (960, 970), (970, 980), (980, 990), (990, 1000)]",
                                    "variable_type": "list",
                                    "variable_shape": "100"
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "99",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": "990",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": "array([990, 420, 606, 891, 715, 125, 260, 584, 474, 864])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "ins_batch": {
                                    "variable_value": "[array([[0.29118509, 0.18378399],\n       [0.52297078, 0.58039063],\n       [0.78259102, 0.01691617],\n       [0.68603538, 0.59045791],\n       [0.62471962, 0.01631   ],\n       [0.20454516, 0.74371163],\n       [0.76162537, 0.17637378],\n       [0.73769111, 0.88482236],\n       [0.50803838, 0.21256348],\n       [0.7737451 , 0.93125476]]), array([[0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x1137aa5d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x1137aa5d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "_test_loop",
                    "function_code": "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n\n    if hasattr(self, 'metrics'):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [\n            i for i, name in enumerate(self.metrics_names)\n            if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n\n    num_samples = self._check_num_samples(ins, batch_size,\n                                          steps,\n                                          'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n\n    # To prevent a slowdown, we find beforehand the arrays that need conversion.\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and not K.is_sparse(feed[i]):\n            indices_for_conversion_to_dense.append(i)\n\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = float(batch_out)\n                    else:\n                        outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                # Do not slice the training phase flag.\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.)\n                outs[0] += batch_outs * len(batch_ids)\n\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs\n",
                    "decorators": [],
                    "docstring": "Abstract method to loop over some data in batches.\n\n# Arguments\n    f: Keras function returning a list of tensors.\n    ins: list of tensors to be fed to `f`.\n    batch_size: integer batch size or `None`.\n    verbose: verbosity mode.\n    steps: Total number of steps (batches of samples)\n        before declaring predictions finished.\n        Ignored with the default value of `None`.\n\n# Returns\n    Scalar loss (if the model has a single output and no metrics)\n    or list of scalars (if the model has multiple outputs\n    and/or metrics). The attribute `model.metrics_names` will give you\n    the display labels for the scalar outputs.",
                    "start_line": 1346,
                    "end_line": 1448,
                    "variables": {
                        "hasattr": [
                            1365
                        ],
                        "self": [
                            1386,
                            1365,
                            1366,
                            1370,
                            1371,
                            1375
                        ],
                        "m": [
                            1368,
                            1366,
                            1367
                        ],
                        "self.metrics": [
                            1366
                        ],
                        "isinstance": [
                            1418,
                            1395,
                            1427,
                            1367
                        ],
                        "Layer": [
                            1367
                        ],
                        "m.stateful": [
                            1367
                        ],
                        "m.reset_states": [
                            1368
                        ],
                        "stateful_metric_indices": [
                            1411,
                            1444,
                            1432,
                            1400,
                            1369,
                            1373
                        ],
                        "i": [
                            1410,
                            1411,
                            1412,
                            1423,
                            1424,
                            1431,
                            1432,
                            1433,
                            1435,
                            1443,
                            1444,
                            1445,
                            1370,
                            1388,
                            1389,
                            1390,
                            1399,
                            1400,
                            1401,
                            1403
                        ],
                        "name": [
                            1370,
                            1371
                        ],
                        "enumerate": [
                            1431,
                            1416,
                            1397,
                            1429,
                            1399,
                            1370
                        ],
                        "self.metrics_names": [
                            1370
                        ],
                        "str": [
                            1371
                        ],
                        "self.stateful_metric_names": [
                            1371
                        ],
                        "num_samples": [
                            1445,
                            1414,
                            1415,
                            1383,
                            1375
                        ],
                        "self._check_num_samples": [
                            1375
                        ],
                        "ins": [
                            1418,
                            1420,
                            1389,
                            1422,
                            1394,
                            1375
                        ],
                        "batch_size": [
                            1414,
                            1375
                        ],
                        "steps": [
                            1376,
                            1380,
                            1381,
                            1412,
                            1392,
                            1393
                        ],
                        "outs": [
                            1378,
                            1410,
                            1412,
                            1438,
                            1443,
                            1445,
                            1439,
                            1446,
                            1433,
                            1447,
                            1448,
                            1435,
                            1398,
                            1430,
                            1401,
                            1403,
                            1406,
                            1407
                        ],
                        "verbose": [
                            1408,
                            1441,
                            1379
                        ],
                        "progbar": [
                            1409,
                            1442,
                            1381,
                            1383
                        ],
                        "Progbar": [
                            1381,
                            1383
                        ],
                        "feed": [
                            1386,
                            1388,
                            1389
                        ],
                        "self._feed_inputs": [
                            1386
                        ],
                        "self._feed_targets": [
                            1386
                        ],
                        "self._feed_sample_weights": [
                            1386
                        ],
                        "indices_for_conversion_to_dense": [
                            1387,
                            1390,
                            1423
                        ],
                        "range": [
                            1393,
                            1410,
                            1443,
                            1388
                        ],
                        "len": [
                            1410,
                            1443,
                            1446,
                            1388,
                            1435,
                            1439
                        ],
                        "issparse": [
                            1389
                        ],
                        "K.is_sparse": [
                            1389
                        ],
                        "K": [
                            1389
                        ],
                        "indices_for_conversion_to_dense.append": [
                            1390
                        ],
                        "step": [
                            1393,
                            1409,
                            1396,
                            1405
                        ],
                        "batch_outs": [
                            1431,
                            1439,
                            1394,
                            1395,
                            1426,
                            1397,
                            1427,
                            1399,
                            1429,
                            1407
                        ],
                        "f": [
                            1394,
                            1426
                        ],
                        "list": [
                            1395,
                            1427
                        ],
                        "_": [
                            1397
                        ],
                        "outs.append": [
                            1438,
                            1406,
                            1430,
                            1398
                        ],
                        "batch_out": [
                            1433,
                            1435,
                            1429,
                            1431,
                            1401,
                            1403,
                            1399
                        ],
                        "float": [
                            1401,
                            1418
                        ],
                        "progbar.update": [
                            1409,
                            1442
                        ],
                        "batches": [
                            1416,
                            1414
                        ],
                        "_make_batches": [
                            1414
                        ],
                        "index_array": [
                            1417,
                            1415
                        ],
                        "np.arange": [
                            1415
                        ],
                        "np": [
                            1415
                        ],
                        "batch_index": [
                            1416,
                            1428,
                            1437
                        ],
                        "batch_start": [
                            1416,
                            1417
                        ],
                        "batch_end": [
                            1416,
                            1417,
                            1442
                        ],
                        "batch_ids": [
                            1417,
                            1420,
                            1422,
                            1435,
                            1439
                        ],
                        "ins_batch": [
                            1424,
                            1426,
                            1420,
                            1422
                        ],
                        "_slice_arrays": [
                            1420,
                            1422
                        ],
                        "toarray": [
                            1424
                        ]
                    },
                    "filtered_variables": {
                        "self": [
                            1386,
                            1365,
                            1366,
                            1370,
                            1371,
                            1375
                        ],
                        "m": [
                            1368,
                            1366,
                            1367
                        ],
                        "self.metrics": [
                            1366
                        ],
                        "Layer": [
                            1367
                        ],
                        "m.stateful": [
                            1367
                        ],
                        "m.reset_states": [
                            1368
                        ],
                        "stateful_metric_indices": [
                            1411,
                            1444,
                            1432,
                            1400,
                            1369,
                            1373
                        ],
                        "i": [
                            1410,
                            1411,
                            1412,
                            1423,
                            1424,
                            1431,
                            1432,
                            1433,
                            1435,
                            1443,
                            1444,
                            1445,
                            1370,
                            1388,
                            1389,
                            1390,
                            1399,
                            1400,
                            1401,
                            1403
                        ],
                        "name": [
                            1370,
                            1371
                        ],
                        "self.metrics_names": [
                            1370
                        ],
                        "self.stateful_metric_names": [
                            1371
                        ],
                        "num_samples": [
                            1445,
                            1414,
                            1415,
                            1383,
                            1375
                        ],
                        "self._check_num_samples": [
                            1375
                        ],
                        "ins": [
                            1418,
                            1420,
                            1389,
                            1422,
                            1394,
                            1375
                        ],
                        "batch_size": [
                            1414,
                            1375
                        ],
                        "steps": [
                            1376,
                            1380,
                            1381,
                            1412,
                            1392,
                            1393
                        ],
                        "outs": [
                            1378,
                            1410,
                            1412,
                            1438,
                            1443,
                            1445,
                            1439,
                            1446,
                            1433,
                            1447,
                            1448,
                            1435,
                            1398,
                            1430,
                            1401,
                            1403,
                            1406,
                            1407
                        ],
                        "verbose": [
                            1408,
                            1441,
                            1379
                        ],
                        "progbar": [
                            1409,
                            1442,
                            1381,
                            1383
                        ],
                        "Progbar": [
                            1381,
                            1383
                        ],
                        "feed": [
                            1386,
                            1388,
                            1389
                        ],
                        "self._feed_inputs": [
                            1386
                        ],
                        "self._feed_targets": [
                            1386
                        ],
                        "self._feed_sample_weights": [
                            1386
                        ],
                        "indices_for_conversion_to_dense": [
                            1387,
                            1390,
                            1423
                        ],
                        "issparse": [
                            1389
                        ],
                        "K.is_sparse": [
                            1389
                        ],
                        "K": [
                            1389
                        ],
                        "indices_for_conversion_to_dense.append": [
                            1390
                        ],
                        "step": [
                            1393,
                            1409,
                            1396,
                            1405
                        ],
                        "batch_outs": [
                            1431,
                            1439,
                            1394,
                            1395,
                            1426,
                            1397,
                            1427,
                            1399,
                            1429,
                            1407
                        ],
                        "f": [
                            1394,
                            1426
                        ],
                        "_": [
                            1397
                        ],
                        "outs.append": [
                            1438,
                            1406,
                            1430,
                            1398
                        ],
                        "batch_out": [
                            1433,
                            1435,
                            1429,
                            1431,
                            1401,
                            1403,
                            1399
                        ],
                        "progbar.update": [
                            1409,
                            1442
                        ],
                        "batches": [
                            1416,
                            1414
                        ],
                        "_make_batches": [
                            1414
                        ],
                        "index_array": [
                            1417,
                            1415
                        ],
                        "np.arange": [
                            1415
                        ],
                        "np": [
                            1415
                        ],
                        "batch_index": [
                            1416,
                            1428,
                            1437
                        ],
                        "batch_start": [
                            1416,
                            1417
                        ],
                        "batch_end": [
                            1416,
                            1417,
                            1442
                        ],
                        "batch_ids": [
                            1417,
                            1420,
                            1422,
                            1435,
                            1439
                        ],
                        "ins_batch": [
                            1424,
                            1426,
                            1420,
                            1422
                        ],
                        "_slice_arrays": [
                            1420,
                            1422
                        ],
                        "toarray": [
                            1424
                        ]
                    },
                    "diff_line_number": 1366,
                    "class_data": {
                        "signature": "class Model(Container)",
                        "docstring": "The `Model` class adds training & evaluation routines to a `Container`.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name + '\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"' + name + '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss=' + str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n    if loss_weights is None:\n        loss_weights_list = [1.0 for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.0))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss_weights=' + str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' + str(loss_weights) + ' - expected a list of dicts.')\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError('When passing a list as `target_tensors`, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed target_tensors=' + str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n            tmp_target_tensors = []\n            for name in self.output_names:\n                tmp_target_tensors.append(target_tensors.get(name, None))\n            target_tensors = tmp_target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self._internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in sample_weight_mode dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name + '\" missing from sample_weight_modes dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed sample_weight_mode=' + str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            elif sample_weight_mode == 'temporal':\n                sample_weights.append(K.placeholder(ndim=2, name=name + '_sample_weights'))\n                sample_weight_modes.append('temporal')\n            else:\n                sample_weights.append(K.placeholder(ndim=1, name=name + '_sample_weights'))\n                sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n    self.metrics = metrics or []\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled because it has no loss to optimize.')\n            else:\n                total_loss = 0.0\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n    self.metrics_updates = []\n    self.stateful_metric_names = []\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n                for metric in metrics:\n                    if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n                        output_shape = self._internal_output_shapes[i]\n                        if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.binary_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.binary_crossentropy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.sparse_categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.sparse_categorical_crossentropy\n                        elif metric in ('accuracy', 'acc'):\n                            metric_fn = metrics_module.categorical_accuracy\n                        elif metric in ('crossentropy', 'ce'):\n                            metric_fn = metrics_module.categorical_crossentropy\n                        if metric in ('accuracy', 'acc'):\n                            suffix = 'acc'\n                        elif metric in ('crossentropy', 'ce'):\n                            suffix = 'ce'\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + suffix\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        if hasattr(metric_fn, 'name'):\n                            metric_name = metric_fn.name\n                        else:\n                            metric_name = metric_fn.__name__\n                        metric_name = metric_name_prefix + metric_name\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n                    if len(self.output_names) > 1:\n                        metric_name = self.output_names[i] + '_' + metric_name\n                    j = 1\n                    base_metric_name = metric_name\n                    while metric_name in self.metrics_names:\n                        metric_name = base_metric_name + '_' + str(j)\n                        j += 1\n                    self.metrics_names.append(metric_name)\n                    self.metrics_tensors.append(metric_result)\n                    if isinstance(metric_fn, Layer) and metric_fn.stateful:\n                        self.stateful_metric_names.append(metric_name)\n                        self.metrics_updates += metric_fn.updates\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n    self._function_kwargs = kwargs\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                            "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n    if len(self.trainable_weights) != len(self._collected_trainable_weights):\n        warnings.warn(UserWarning('Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?'))",
                            "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)\n            updates = self.updates + training_updates + self.metrics_updates\n            self.train_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)",
                            "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        self.test_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates + self.metrics_updates, name='test_function', **self._function_kwargs)",
                            "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)",
                            "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name + ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have a defined shape, or ' + steps_name + ' should be specified.')\n    return num_samples",
                            "def _fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' % (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` when doing step-wise training, i.e. `steps_per_epoch` must be set.')\n    num_train_samples = self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        _callbacks.append(cbks.ProgbarLogger(count_mode, stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    out_labels = out_labels or []\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'batch_size': batch_size, 'epochs': epochs, 'steps': steps_per_epoch, 'samples': num_train_samples, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics or []})\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    for epoch in range(initial_epoch, epochs):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, steps=validation_steps, verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. If using HDF5 input data, pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                for i in indices_for_conversion_to_dense:\n                    ins_batch[i] = ins_batch[i].toarray()\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n                if batch_index == len(batches) - 1:\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                            "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    indices_for_conversion_to_dense = []\n    for i in range(len(self._feed_inputs)):\n        if issparse(ins[i]) and (not K.is_sparse(self._feed_inputs[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0) for i in range(len(unconcatenated_outs))]\n    else:\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                            "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if hasattr(self, 'metrics'):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = float(batch_out)\n                    else:\n                        outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs * len(batch_ids)\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                            "def _standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.')\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        elif not hasattr(loss_fn, '__name__') or getattr(losses, loss_fn.__name__, None) is None:\n            output_shapes.append(None)\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False, exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight, self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight, self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode) for ref, sw, cw, mode in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    if check_array_lengths:\n        _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y, self._feed_loss_fns, self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples')\n    return (x, y, sample_weights)",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and (steps_per_epoch is None):\n        raise ValueError('If fitting from data tensors, you should specify the `steps_per_epoch` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, batch_size=batch_size)\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, it must contain 2 (x_val, y_val) or 3 (x_val, y_val, val_sample_weights) items, however it contains %d items' % len(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, sample_weight=val_sample_weight, batch_size=batch_size)\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_split and 0.0 < validation_split < 1.0:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1.0 - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1.0 - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (_slice_arrays(sample_weights, 0, split_at), _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = [0.0]\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n    out_labels = self.metrics_names\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n    return self._fit_loop(f, ins, out_labels=out_labels, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, callback_metrics=callback_metrics, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and (steps is None):\n        raise ValueError('If evaluating from data tensors, you should specify the `steps` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, batch_size=batch_size)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def predict(self, x, batch_size=None, verbose=0, steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, you should specify the `steps` argument.')\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples. Batch size: ' + str(batch_size) + '.')\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def train_on_batch(self, x, y, sample_weight=None, class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Trains the model on data generated batch-by-batch by a Python generator or an instance of `Sequence`.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches may\n            have different sizes. For example, the last batch of the epoch\n            is commonly smaller than the others, if the size of the dataset\n            is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only). This can be useful to tell the model to\n            \"pay more attention\" to samples from an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process-based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean.\n            If `True`, use process-based threading.\n            If unspecified, `use_multiprocessing` will default to `False`.\n            Note that because this implementation relies on multiprocessing,\n            you should not pass non-picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        shuffle: Boolean. Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (`keras.utils.Sequence`).\n            Has no effect when `steps_per_epoch` is not `None`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        ValueError: In case the generator yields data in an invalid format.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while True:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n    \"\"\"\n    wait_time = 0.01\n    epoch = initial_epoch\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.')\n    val_gen = hasattr(validation_data, 'next') or hasattr(validation_data, '__next__') or isinstance(validation_data, Sequence)\n    if val_gen and (not isinstance(validation_data, Sequence)) and (not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `validation_steps` or use the `keras.utils.Sequence` class.')\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(cbks.ProgbarLogger(count_mode='steps', stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'epochs': epochs, 'steps': steps_per_epoch, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics})\n    callbacks.on_train_begin()\n    enqueuer = None\n    val_enqueuer = None\n    try:\n        if do_validation and (not val_gen):\n            if len(validation_data) == 2:\n                val_x, val_y = validation_data\n                val_sample_weight = None\n            elif len(validation_data) == 3:\n                val_x, val_y, val_sample_weight = validation_data\n            else:\n                raise ValueError('`validation_data` should be a tuple `(val_x, val_y, val_sample_weight)` or `(val_x, val_y)`. Found: ' + str(validation_data))\n            val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, val_sample_weight)\n            val_data = val_x + val_y + val_sample_weights\n            if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n                val_data += [0.0]\n            for cbk in callbacks:\n                cbk.validation_data = val_data\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        callback_model.stop_training = False\n        epoch_logs = {}\n        while epoch < epochs:\n            for m in self.metrics:\n                if isinstance(m, Layer) and m.stateful:\n                    m.reset_states()\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                batch_logs = {}\n                if x is None or len(x) == 0:\n                    batch_size = 1\n                elif isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = self.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                batch_index += 1\n                steps_done += 1\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(validation_data, validation_steps, workers=workers, use_multiprocessing=use_multiprocessing, max_queue_size=max_queue_size)\n                    else:\n                        val_outs = self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n                if callback_model.stop_training:\n                    break\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n    callbacks.on_train_end()\n    return self.history",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n    stateful_metric_indices = []\n    if hasattr(self, 'metrics'):\n        for i, m in enumerate(self.metrics):\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    steps_done = 0\n    wait_time = 0.01\n    outs_per_batch = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if not isinstance(outs, list):\n                outs = [outs]\n            outs_per_batch.append(outs)\n            if x is None or len(x) == 0:\n                batch_size = 1\n            elif isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. Batches should at least contain one item.')\n            steps_done += 1\n            batch_sizes.append(batch_size)\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    averages = []\n    for i in range(len(outs)):\n        if i not in stateful_metric_indices:\n            averages.append(np.average([out[i] for out in outs_per_batch], weights=batch_sizes))\n        else:\n            averages.append(float(outs_per_batch[-1][i]))\n    if len(averages) == 1:\n        return averages[0]\n    return averages",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n            else:\n                x = generator_output\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                            "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n    for metric in metrics:\n        if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n            output_shape = self._internal_output_shapes[i]\n            if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.binary_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.binary_crossentropy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.sparse_categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.sparse_categorical_crossentropy\n            elif metric in ('accuracy', 'acc'):\n                metric_fn = metrics_module.categorical_accuracy\n            elif metric in ('crossentropy', 'ce'):\n                metric_fn = metrics_module.categorical_crossentropy\n            if metric in ('accuracy', 'acc'):\n                suffix = 'acc'\n            elif metric in ('crossentropy', 'ce'):\n                suffix = 'ce'\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + suffix\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            if hasattr(metric_fn, 'name'):\n                metric_name = metric_fn.name\n            else:\n                metric_name = metric_fn.__name__\n            metric_name = metric_name_prefix + metric_name\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[i] + '_' + metric_name\n        j = 1\n        base_metric_name = metric_name\n        while metric_name in self.metrics_names:\n            metric_name = base_metric_name + '_' + str(j)\n            j += 1\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_result)\n        if isinstance(metric_fn, Layer) and metric_fn.stateful:\n            self.stateful_metric_names.append(metric_name)\n            self.metrics_updates += metric_fn.updates"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "_check_trainable_weights_consistency(self)",
                            "_make_train_function(self)",
                            "_make_test_function(self)",
                            "_make_predict_function(self)",
                            "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                            "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                            "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                            "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                            "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                            "predict(self, x, batch_size=None, verbose=0, steps=None)",
                            "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_on_batch(self, x)",
                            "fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "handle_metrics(metrics, weights=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x117f354d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x117f35310>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "Layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.stateful": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "num_samples": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x117f354d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x117e9c990>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ins_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x117f354d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "'out'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x117f35310>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "Layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.stateful": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "m.reset_states": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[2]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "num_samples": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x117f354d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.6407457590103149, 0.699999988079071, 491]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>, <tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>, <tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": "<built-in method append of list object at 0x1182e2870>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_outs": {
                                    "variable_value": "[0.64074576, 0.7, 491]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x117e9c990>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x1182790a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_out": {
                                    "variable_value": "491",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": "[(0, 10)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "ins_batch": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x117f354d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x117f35310>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "Layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.stateful": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "num_samples": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x117f354d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.5890584 , 0.44453373],\n       [0.80689372, 0.6436606 ],\n       [0.05430554, 0.02156771],\n       ...,\n       [0.04182007, 0.80163004],\n       [0.68135087, 0.81137648],\n       [0.63715502, 0.08571966]]), array([[1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n      dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x117e9c990>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ins_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x117f354d0>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "'out'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.metrics": {
                                    "variable_value": "{'out': ['acc', <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x117f35310>]}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "Layer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.stateful": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "m.reset_states": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[2]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "num_samples": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x117f354d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.5890584 , 0.44453373],\n       [0.80689372, 0.6436606 ],\n       [0.05430554, 0.02156771],\n       ...,\n       [0.04182007, 0.80163004],\n       [0.68135087, 0.81137648],\n       [0.63715502, 0.08571966]]), array([[1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n      dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.7724673691391944, 0.4910000070929527, 968]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": "<keras.utils.generic_utils.Progbar object at 0x1182e7850>",
                                    "variable_type": "Progbar",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>, <tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>, <tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": "<built-in method append of list object at 0x118313960>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_outs": {
                                    "variable_value": "[0.87484837, 0.3, 968]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x117e9c990>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x1183138c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_out": {
                                    "variable_value": "968",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                },
                                "progbar.update": {
                                    "variable_value": "<bound method Progbar.update of <keras.utils.generic_utils.Progbar object at 0x1182e7850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": "[(0, 10), (10, 20), (20, 30), (30, 40), (40, 50), (50, 60), (60, 70), (70, 80), (80, 90), (90, 100), (100, 110), (110, 120), (120, 130), (130, 140), (140, 150), (150, 160), (160, 170), (170, 180), (180, 190), (190, 200), (200, 210), (210, 220), (220, 230), (230, 240), (240, 250), (250, 260), (260, 270), (270, 280), (280, 290), (290, 300), (300, 310), (310, 320), (320, 330), (330, 340), (340, 350), (350, 360), (360, 370), (370, 380), (380, 390), (390, 400), (400, 410), (410, 420), (420, 430), (430, 440), (440, 450), (450, 460), (460, 470), (470, 480), (480, 490), (490, 500), (500, 510), (510, 520), (520, 530), (530, 540), (540, 550), (550, 560), (560, 570), (570, 580), (580, 590), (590, 600), (600, 610), (610, 620), (620, 630), (630, 640), (640, 650), (650, 660), (660, 670), (670, 680), (680, 690), (690, 700), (700, 710), (710, 720), (720, 730), (730, 740), (740, 750), (750, 760), (760, 770), (770, 780), (780, 790), (790, 800), (800, 810), (810, 820), (820, 830), (830, 840), (840, 850), (850, 860), (860, 870), (870, 880), (880, 890), (890, 900), (900, 910), (910, 920), (920, 930), (930, 940), (940, 950), (950, 960), (960, 970), (970, 980), (980, 990), (990, 1000)]",
                                    "variable_type": "list",
                                    "variable_shape": "100"
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,\n        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,\n        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,\n        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,\n        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,\n        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,\n        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,\n        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,\n       104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,\n       117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,\n       130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\n       143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\n       156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n       169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\n       182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,\n       195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,\n       208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\n       221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,\n       234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,\n       247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,\n       260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,\n       273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,\n       286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,\n       299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,\n       312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,\n       325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,\n       338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,\n       351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,\n       364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,\n       377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,\n       390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,\n       403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,\n       416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,\n       429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,\n       442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,\n       455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,\n       468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480,\n       481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,\n       494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506,\n       507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519,\n       520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532,\n       533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545,\n       546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558,\n       559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571,\n       572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584,\n       585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610,\n       611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623,\n       624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636,\n       637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649,\n       650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662,\n       663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675,\n       676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688,\n       689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701,\n       702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714,\n       715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727,\n       728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740,\n       741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753,\n       754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766,\n       767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779,\n       780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792,\n       793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805,\n       806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818,\n       819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831,\n       832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844,\n       845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857,\n       858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870,\n       871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883,\n       884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896,\n       897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909,\n       910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922,\n       923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935,\n       936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948,\n       949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961,\n       962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974,\n       975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987,\n       988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1000,)"
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "99",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": "990",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": "array([990, 991, 992, 993, 994, 995, 996, 997, 998, 999])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "ins_batch": {
                                    "variable_value": "[array([[0.29118509, 0.18378399],\n       [0.0137966 , 0.52717963],\n       [0.61230143, 0.61845092],\n       [0.29009067, 0.70712369],\n       [0.34459818, 0.62433438],\n       [0.83155234, 0.79251289],\n       [0.8735965 , 0.35361469],\n       [0.04182007, 0.80163004],\n       [0.68135087, 0.81137648],\n       [0.63715502, 0.08571966]]), array([[0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d28d590>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "num_samples": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x11d28d590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x11a555110>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ins_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d28d590>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>",
                                    "variable_type": "BinaryTruePositives",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": "<bound method test_stateful_metrics.<locals>.BinaryTruePositives.reset_states of <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[2]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "num_samples": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x11d28d590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.6407457590103149, 0.699999988079071, 7]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>, <tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>, <tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d6365a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_outs": {
                                    "variable_value": "[0.64074576, 0.7, 7]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x11a555110>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d63bb40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_out": {
                                    "variable_value": "7",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": "[(0, 10)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "ins_batch": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d28d590>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "num_samples": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x11d28d590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.5890584 , 0.44453373],\n       [0.80689372, 0.6436606 ],\n       [0.05430554, 0.02156771],\n       ...,\n       [0.04182007, 0.80163004],\n       [0.68135087, 0.81137648],\n       [0.63715502, 0.08571966]]), array([[1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n      dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x11a555110>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ins_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d28d590>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>",
                                    "variable_type": "BinaryTruePositives",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": "<bound method test_stateful_metrics.<locals>.BinaryTruePositives.reset_states of <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[2]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "num_samples": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x11d28d590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.5890584 , 0.44453373],\n       [0.80689372, 0.6436606 ],\n       [0.05430554, 0.02156771],\n       ...,\n       [0.04182007, 0.80163004],\n       [0.68135087, 0.81137648],\n       [0.63715502, 0.08571966]]), array([[1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n      dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.7724673691391944, 0.4910000070929527, 477]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": "<keras.utils.generic_utils.Progbar object at 0x11d63e7d0>",
                                    "variable_type": "Progbar",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>, <tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>, <tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d66d410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_outs": {
                                    "variable_value": "[0.87484837, 0.3, 477]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x11a555110>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d66d370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_out": {
                                    "variable_value": "477",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                },
                                "progbar.update": {
                                    "variable_value": "<bound method Progbar.update of <keras.utils.generic_utils.Progbar object at 0x11d63e7d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": "[(0, 10), (10, 20), (20, 30), (30, 40), (40, 50), (50, 60), (60, 70), (70, 80), (80, 90), (90, 100), (100, 110), (110, 120), (120, 130), (130, 140), (140, 150), (150, 160), (160, 170), (170, 180), (180, 190), (190, 200), (200, 210), (210, 220), (220, 230), (230, 240), (240, 250), (250, 260), (260, 270), (270, 280), (280, 290), (290, 300), (300, 310), (310, 320), (320, 330), (330, 340), (340, 350), (350, 360), (360, 370), (370, 380), (380, 390), (390, 400), (400, 410), (410, 420), (420, 430), (430, 440), (440, 450), (450, 460), (460, 470), (470, 480), (480, 490), (490, 500), (500, 510), (510, 520), (520, 530), (530, 540), (540, 550), (550, 560), (560, 570), (570, 580), (580, 590), (590, 600), (600, 610), (610, 620), (620, 630), (630, 640), (640, 650), (650, 660), (660, 670), (670, 680), (680, 690), (690, 700), (700, 710), (710, 720), (720, 730), (730, 740), (740, 750), (750, 760), (760, 770), (770, 780), (780, 790), (790, 800), (800, 810), (810, 820), (820, 830), (830, 840), (840, 850), (850, 860), (860, 870), (870, 880), (880, 890), (890, 900), (900, 910), (910, 920), (920, 930), (930, 940), (940, 950), (950, 960), (960, 970), (970, 980), (980, 990), (990, 1000)]",
                                    "variable_type": "list",
                                    "variable_shape": "100"
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,\n        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,\n        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,\n        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,\n        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,\n        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,\n        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,\n        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,\n       104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,\n       117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,\n       130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,\n       143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\n       156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n       169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,\n       182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,\n       195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,\n       208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,\n       221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,\n       234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,\n       247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,\n       260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272,\n       273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,\n       286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298,\n       299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311,\n       312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324,\n       325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337,\n       338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350,\n       351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363,\n       364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376,\n       377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389,\n       390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402,\n       403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415,\n       416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428,\n       429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441,\n       442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,\n       455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467,\n       468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480,\n       481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493,\n       494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506,\n       507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519,\n       520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532,\n       533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545,\n       546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558,\n       559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571,\n       572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584,\n       585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610,\n       611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623,\n       624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636,\n       637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649,\n       650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662,\n       663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675,\n       676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688,\n       689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701,\n       702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714,\n       715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727,\n       728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740,\n       741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753,\n       754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766,\n       767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779,\n       780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792,\n       793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805,\n       806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818,\n       819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831,\n       832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844,\n       845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857,\n       858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870,\n       871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883,\n       884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896,\n       897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909,\n       910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922,\n       923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935,\n       936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948,\n       949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961,\n       962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974,\n       975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987,\n       988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1000,)"
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "99",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": "990",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": "array([990, 991, 992, 993, 994, 995, 996, 997, 998, 999])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "ins_batch": {
                                    "variable_value": "[array([[0.29118509, 0.18378399],\n       [0.0137966 , 0.52717963],\n       [0.61230143, 0.61845092],\n       [0.29009067, 0.70712369],\n       [0.34459818, 0.62433438],\n       [0.83155234, 0.79251289],\n       [0.8735965 , 0.35361469],\n       [0.04182007, 0.80163004],\n       [0.68135087, 0.81137648],\n       [0.63715502, 0.08571966]]), array([[0],\n       [0],\n       [1],\n       [1],\n       [0],\n       [0],\n       [1],\n       [0],\n       [0],\n       [0]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d28d590>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "num_samples": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x11d28d590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x11a555110>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ins_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11d28d590>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>",
                                    "variable_type": "BinaryTruePositives",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": "<bound method test_stateful_metrics.<locals>.BinaryTruePositives.reset_states of <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11d28d3d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[2]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "num_samples": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._check_num_samples": {
                                    "variable_value": "<bound method Model._check_num_samples of <keras.engine.training.Model object at 0x11d28d590>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "ins": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "batch_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.6407457590103149, 0.699999988079071, 7]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": "<keras.utils.generic_utils.Progbar object at 0x11d61fa50>",
                                    "variable_type": "Progbar",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "feed": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>, <tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>, <tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self._feed_inputs": {
                                    "variable_value": "[<tf.Tensor 'input_1:0' shape=(?, 2) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_targets": {
                                    "variable_value": "[<tf.Tensor 'out_target:0' shape=(?, ?) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self._feed_sample_weights": {
                                    "variable_value": "[<tf.Tensor 'out_sample_weights:0' shape=(?,) dtype=float32>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "indices_for_conversion_to_dense": {
                                    "variable_value": "[]",
                                    "variable_type": "list",
                                    "variable_shape": "0"
                                },
                                "issparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K.is_sparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "indices_for_conversion_to_dense.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d621460>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "step": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_outs": {
                                    "variable_value": "[0.64074576, 0.7, 7]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "f": {
                                    "variable_value": "<keras.backend.tensorflow_backend.Function object at 0x11a555110>",
                                    "variable_type": "Function",
                                    "variable_shape": null
                                },
                                "_": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs.append": {
                                    "variable_value": "<built-in method append of list object at 0x11d619f00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_out": {
                                    "variable_value": "7",
                                    "variable_type": "int32",
                                    "variable_shape": "()"
                                },
                                "progbar.update": {
                                    "variable_value": "<bound method Progbar.update of <keras.utils.generic_utils.Progbar object at 0x11d61fa50>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "batches": {
                                    "variable_value": "[(0, 10)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_make_batches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "index_array": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "np.arange": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_start": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_end": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_ids": {
                                    "variable_value": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(10,)"
                                },
                                "ins_batch": {
                                    "variable_value": "[array([[0.25306701, 0.60320046],\n       [0.31194114, 0.08352846],\n       [0.18736018, 0.54022563],\n       [0.90068404, 0.39674635],\n       [0.03672536, 0.89119874],\n       [0.55130284, 0.68560175],\n       [0.63736809, 0.79959392],\n       [0.18263802, 0.70710747],\n       [0.14180628, 0.57313095],\n       [0.41068953, 0.69346268]]), array([[1],\n       [1],\n       [0],\n       [1],\n       [0],\n       [0],\n       [1],\n       [1],\n       [1],\n       [1]]), array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.], dtype=float32)]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "_slice_arrays": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "toarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "fit_generator",
                    "function_code": "@interfaces.legacy_generator_methods_support\ndef fit_generator(self,\n                  generator,\n                  steps_per_epoch=None,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"Trains the model on data generated batch-by-batch by a Python generator or an instance of `Sequence`.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches may\n            have different sizes. For example, the last batch of the epoch\n            is commonly smaller than the others, if the size of the dataset\n            is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only). This can be useful to tell the model to\n            \"pay more attention\" to samples from an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process-based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean.\n            If `True`, use process-based threading.\n            If unspecified, `use_multiprocessing` will default to `False`.\n            Note that because this implementation relies on multiprocessing,\n            you should not pass non-picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        shuffle: Boolean. Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (`keras.utils.Sequence`).\n            Has no effect when `steps_per_epoch` is not `None`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        ValueError: In case the generator yields data in an invalid format.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while True:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n    \"\"\"\n    wait_time = 0.01  # in seconds\n    epoch = initial_epoch\n\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a'\n                             ' generator based on the `keras.utils.Sequence`'\n                             ' class. Please specify `steps_per_epoch` or use'\n                             ' the `keras.utils.Sequence` class.')\n\n    # python 2 has 'next', 3 has '__next__'\n    # avoid any explicit version checks\n    val_gen = (hasattr(validation_data, 'next') or\n               hasattr(validation_data, '__next__') or\n               isinstance(validation_data, Sequence))\n    if (val_gen and not isinstance(validation_data, Sequence) and\n            not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a'\n                         ' generator based on the `keras.utils.Sequence`'\n                         ' class. Please specify `validation_steps` or use'\n                         ' the `keras.utils.Sequence` class.')\n\n    # Prepare display labels.\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n\n    # prepare callbacks\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(\n        stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(\n            cbks.ProgbarLogger(\n                count_mode='steps',\n                stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n\n    # it's possible to callback a different model than self:\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics,\n    })\n    callbacks.on_train_begin()\n\n    enqueuer = None\n    val_enqueuer = None\n\n    try:\n        if do_validation and not val_gen:\n            # Prepare data for validation\n            if len(validation_data) == 2:\n                val_x, val_y = validation_data\n                val_sample_weight = None\n            elif len(validation_data) == 3:\n                val_x, val_y, val_sample_weight = validation_data\n            else:\n                raise ValueError('`validation_data` should be a tuple '\n                                 '`(val_x, val_y, val_sample_weight)` '\n                                 'or `(val_x, val_y)`. Found: ' +\n                                 str(validation_data))\n            val_x, val_y, val_sample_weights = self._standardize_user_data(\n                val_x, val_y, val_sample_weight)\n            val_data = val_x + val_y + val_sample_weights\n            if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n                val_data += [0.]\n            for cbk in callbacks:\n                cbk.validation_data = val_data\n\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator,\n                                           use_multiprocessing=use_multiprocessing,\n                                           shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator,\n                                             use_multiprocessing=use_multiprocessing,\n                                             wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter(generator)\n            else:\n                output_generator = generator\n\n        callback_model.stop_training = False\n        # Construct epoch logs.\n        epoch_logs = {}\n        while epoch < epochs:\n            for m in self.metrics:\n                if isinstance(m, Layer) and m.stateful:\n                    m.reset_states()\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n                # build batch logs\n                batch_logs = {}\n                if x is None or len(x) == 0:\n                    # Handle data tensors support when no input given\n                    # step-size = 1 for data tensors\n                    batch_size = 1\n                elif isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n\n                outs = self.train_on_batch(x, y,\n                                           sample_weight=sample_weight,\n                                           class_weight=class_weight)\n\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n\n                batch_index += 1\n                steps_done += 1\n\n                # Epoch finished.\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(\n                            validation_data,\n                            validation_steps,\n                            workers=workers,\n                            use_multiprocessing=use_multiprocessing,\n                            max_queue_size=max_queue_size)\n                    else:\n                        # No need for try/except because\n                        # data has already been validated.\n                        val_outs = self.evaluate(\n                            val_x, val_y,\n                            batch_size=batch_size,\n                            sample_weight=val_sample_weights,\n                            verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    # Same labels assumed.\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n\n                if callback_model.stop_training:\n                    break\n\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n\n    callbacks.on_train_end()\n    return self.history\n",
                    "decorators": [
                        "interfaces.legacy_generator_methods_support"
                    ],
                    "docstring": "Trains the model on data generated batch-by-batch by a Python generator or an instance of `Sequence`.\n\nThe generator is run in parallel to the model, for efficiency.\nFor instance, this allows you to do real-time data augmentation\non images on CPU in parallel to training your model on GPU.\n\nThe use of `keras.utils.Sequence` guarantees the ordering\nand guarantees the single use of every input per epoch when\nusing `use_multiprocessing=True`.\n\n# Arguments\n    generator: A generator or an instance of `Sequence`\n        (`keras.utils.Sequence`) object in order to avoid\n        duplicate data when using multiprocessing.\n        The output of the generator must be either\n        - a tuple `(inputs, targets)`\n        - a tuple `(inputs, targets, sample_weights)`.\n        This tuple (a single output of the generator) makes a single\n        batch. Therefore, all arrays in this tuple must have the same\n        length (equal to the size of this batch). Different batches may\n        have different sizes. For example, the last batch of the epoch\n        is commonly smaller than the others, if the size of the dataset\n        is not divisible by the batch size.\n        The generator is expected to loop over its data\n        indefinitely. An epoch finishes when `steps_per_epoch`\n        batches have been seen by the model.\n    steps_per_epoch: Integer.\n        Total number of steps (batches of samples)\n        to yield from `generator` before declaring one epoch\n        finished and starting the next epoch. It should typically\n        be equal to the number of samples of your dataset\n        divided by the batch size.\n        Optional for `Sequence`: if unspecified, will use\n        the `len(generator)` as a number of steps.\n    epochs: Integer. Number of epochs to train the model.\n        An epoch is an iteration over the entire data provided,\n        as defined by `steps_per_epoch`.\n        Note that in conjunction with `initial_epoch`,\n        `epochs` is to be understood as \"final epoch\".\n        The model is not trained for a number of iterations\n        given by `epochs`, but merely until the epoch\n        of index `epochs` is reached.\n    verbose: Integer. 0, 1, or 2. Verbosity mode.\n        0 = silent, 1 = progress bar, 2 = one line per epoch.\n    callbacks: List of `keras.callbacks.Callback` instances.\n        List of callbacks to apply during training.\n        See [callbacks](/callbacks).\n    validation_data: This can be either\n        - a generator for the validation data\n        - tuple `(x_val, y_val)`\n        - tuple `(x_val, y_val, val_sample_weights)`\n        on which to evaluate\n        the loss and any model metrics at the end of each epoch.\n        The model will not be trained on this data.\n    validation_steps: Only relevant if `validation_data`\n        is a generator. Total number of steps (batches of samples)\n        to yield from `validation_data` generator before stopping\n        at the end of every epoch. It should typically\n        be equal to the number of samples of your\n        validation dataset divided by the batch size.\n        Optional for `Sequence`: if unspecified, will use\n        the `len(validation_data)` as a number of steps.\n    class_weight: Optional dictionary mapping class indices (integers)\n        to a weight (float) value, used for weighting the loss function\n        (during training only). This can be useful to tell the model to\n        \"pay more attention\" to samples from an under-represented class.\n    max_queue_size: Integer. Maximum size for the generator queue.\n        If unspecified, `max_queue_size` will default to 10.\n    workers: Integer. Maximum number of processes to spin up\n        when using process-based threading.\n        If unspecified, `workers` will default to 1. If 0, will\n        execute the generator on the main thread.\n    use_multiprocessing: Boolean.\n        If `True`, use process-based threading.\n        If unspecified, `use_multiprocessing` will default to `False`.\n        Note that because this implementation relies on multiprocessing,\n        you should not pass non-picklable arguments to the generator\n        as they can't be passed easily to children processes.\n    shuffle: Boolean. Whether to shuffle the order of the batches at\n        the beginning of each epoch. Only used with instances\n        of `Sequence` (`keras.utils.Sequence`).\n        Has no effect when `steps_per_epoch` is not `None`.\n    initial_epoch: Integer.\n        Epoch at which to start training\n        (useful for resuming a previous training run).\n\n# Returns\n    A `History` object. Its `History.history` attribute is\n    a record of training loss values and metrics values\n    at successive epochs, as well as validation loss values\n    and validation metrics values (if applicable).\n\n# Raises\n    ValueError: In case the generator yields data in an invalid format.\n\n# Example\n\n```python\n    def generate_arrays_from_file(path):\n        while True:\n            with open(path) as f:\n                for line in f:\n                    # create numpy arrays of input data\n                    # and labels, from each line in the file\n                    x1, x2, y = process_line(line)\n                    yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n    model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                        steps_per_epoch=10000, epochs=10)\n```",
                    "start_line": 1950,
                    "end_line": 2283,
                    "variables": {
                        "wait_time": [
                            2076,
                            2175
                        ],
                        "epoch": [
                            2187,
                            2191,
                            2077,
                            2269,
                            2270
                        ],
                        "initial_epoch": [
                            2077
                        ],
                        "do_validation": [
                            2081,
                            2147,
                            2244,
                            2138,
                            2079
                        ],
                        "bool": [
                            2079
                        ],
                        "validation_data": [
                            2149,
                            2150,
                            2247,
                            2152,
                            2153,
                            2158,
                            2102,
                            2103,
                            2104,
                            2105,
                            2079
                        ],
                        "self._make_train_function": [
                            2080
                        ],
                        "self": [
                            2080,
                            2113,
                            2082,
                            2117,
                            2246,
                            2119,
                            2283,
                            2124,
                            2125,
                            2188,
                            2159,
                            2255,
                            2129,
                            2130,
                            2162,
                            2132,
                            2229
                        ],
                        "self._make_test_function": [
                            2082
                        ],
                        "is_sequence": [
                            2179,
                            2084,
                            2085,
                            2092,
                            2168
                        ],
                        "isinstance": [
                            2233,
                            2084,
                            2219,
                            2189,
                            2221,
                            2162,
                            2260,
                            2104,
                            2105
                        ],
                        "generator": [
                            2180,
                            2084,
                            2182,
                            2093,
                            2169,
                            2173
                        ],
                        "Sequence": [
                            2104,
                            2105,
                            2084
                        ],
                        "use_multiprocessing": [
                            2250,
                            2170,
                            2085,
                            2174
                        ],
                        "workers": [
                            2176,
                            2249,
                            2085,
                            2167
                        ],
                        "warnings.warn": [
                            2086
                        ],
                        "warnings": [
                            2086
                        ],
                        "UserWarning": [
                            2087
                        ],
                        "steps_per_epoch": [
                            2244,
                            2091,
                            2093,
                            2194,
                            2136
                        ],
                        "len": [
                            2149,
                            2215,
                            2152,
                            2093,
                            2203,
                            2206
                        ],
                        "ValueError": [
                            2209,
                            2155,
                            2095,
                            2198,
                            2107
                        ],
                        "val_gen": [
                            2105,
                            2147,
                            2245,
                            2102
                        ],
                        "hasattr": [
                            2129,
                            2197,
                            2102,
                            2103
                        ],
                        "validation_steps": [
                            2248,
                            2106
                        ],
                        "out_labels": [
                            2113,
                            2114,
                            2235,
                            2263
                        ],
                        "self.metrics_names": [
                            2113
                        ],
                        "callback_metrics": [
                            2114,
                            2139
                        ],
                        "n": [
                            2114
                        ],
                        "self.history": [
                            2283,
                            2125,
                            2117
                        ],
                        "cbks.History": [
                            2117
                        ],
                        "cbks": [
                            2126,
                            2122,
                            2117,
                            2118
                        ],
                        "_callbacks": [
                            2126,
                            2121,
                            2125,
                            2118
                        ],
                        "cbks.BaseLogger": [
                            2118
                        ],
                        "self.stateful_metric_names": [
                            2124,
                            2119
                        ],
                        "verbose": [
                            2120,
                            2137
                        ],
                        "_callbacks.append": [
                            2121
                        ],
                        "cbks.ProgbarLogger": [
                            2122
                        ],
                        "callbacks": [
                            2282,
                            2125,
                            2126,
                            2191,
                            2227,
                            2164,
                            2133,
                            2134,
                            2269,
                            2141,
                            2238
                        ],
                        "cbks.CallbackList": [
                            2126
                        ],
                        "self.callback_model": [
                            2129,
                            2130
                        ],
                        "callback_model": [
                            2184,
                            2130,
                            2132,
                            2133,
                            2266,
                            2271
                        ],
                        "callbacks.set_model": [
                            2133
                        ],
                        "callbacks.set_params": [
                            2134
                        ],
                        "epochs": [
                            2187,
                            2135
                        ],
                        "callbacks.on_train_begin": [
                            2141
                        ],
                        "enqueuer": [
                            2176,
                            2177,
                            2276,
                            2277,
                            2169,
                            2173,
                            2143
                        ],
                        "val_enqueuer": [
                            2144,
                            2280,
                            2279
                        ],
                        "val_x": [
                            2150,
                            2153,
                            2159,
                            2160,
                            2161,
                            2256
                        ],
                        "val_y": [
                            2150,
                            2153,
                            2159,
                            2160,
                            2161,
                            2256
                        ],
                        "val_sample_weight": [
                            2160,
                            2153,
                            2151
                        ],
                        "str": [
                            2201,
                            2212,
                            2158
                        ],
                        "val_sample_weights": [
                            2161,
                            2258,
                            2159
                        ],
                        "self._standardize_user_data": [
                            2159
                        ],
                        "val_data": [
                            2161,
                            2163,
                            2165
                        ],
                        "self.uses_learning_phase": [
                            2162
                        ],
                        "K.learning_phase": [
                            2162
                        ],
                        "K": [
                            2162
                        ],
                        "int": [
                            2162
                        ],
                        "cbk": [
                            2164,
                            2165
                        ],
                        "cbk.validation_data": [
                            2165
                        ],
                        "OrderedEnqueuer": [
                            2169
                        ],
                        "shuffle": [
                            2171
                        ],
                        "GeneratorEnqueuer": [
                            2173
                        ],
                        "enqueuer.start": [
                            2176
                        ],
                        "max_queue_size": [
                            2176,
                            2251
                        ],
                        "output_generator": [
                            2177,
                            2195,
                            2180,
                            2182
                        ],
                        "enqueuer.get": [
                            2177
                        ],
                        "iter": [
                            2180
                        ],
                        "callback_model.stop_training": [
                            2184,
                            2266,
                            2271
                        ],
                        "epoch_logs": [
                            2264,
                            2186,
                            2269
                        ],
                        "m": [
                            2188,
                            2189,
                            2190
                        ],
                        "self.metrics": [
                            2188
                        ],
                        "Layer": [
                            2189
                        ],
                        "m.stateful": [
                            2189
                        ],
                        "m.reset_states": [
                            2190
                        ],
                        "callbacks.on_epoch_begin": [
                            2191
                        ],
                        "steps_done": [
                            2192,
                            2241,
                            2194,
                            2244
                        ],
                        "batch_index": [
                            2240,
                            2193,
                            2225,
                            2227,
                            2238
                        ],
                        "generator_output": [
                            2212,
                            2195,
                            2197,
                            2201,
                            2203,
                            2204,
                            2206,
                            2207
                        ],
                        "next": [
                            2195
                        ],
                        "x": [
                            2215,
                            2219,
                            2220,
                            2221,
                            2222,
                            2224,
                            2229,
                            2204,
                            2207
                        ],
                        "y": [
                            2204,
                            2229,
                            2207
                        ],
                        "sample_weight": [
                            2205,
                            2230,
                            2207
                        ],
                        "batch_logs": [
                            2214,
                            2225,
                            2226,
                            2227,
                            2236,
                            2238
                        ],
                        "batch_size": [
                            2218,
                            2220,
                            2222,
                            2224,
                            2257,
                            2226
                        ],
                        "list": [
                            2233,
                            2219,
                            2260,
                            2222
                        ],
                        "shape": [
                            2220,
                            2222
                        ],
                        "dict": [
                            2221
                        ],
                        "x.values": [
                            2222
                        ],
                        "x.shape": [
                            2224
                        ],
                        "callbacks.on_batch_begin": [
                            2227
                        ],
                        "outs": [
                            2233,
                            2234,
                            2235,
                            2229
                        ],
                        "self.train_on_batch": [
                            2229
                        ],
                        "class_weight": [
                            2231
                        ],
                        "l": [
                            2264,
                            2235,
                            2236,
                            2263
                        ],
                        "o": [
                            2264,
                            2235,
                            2236,
                            2263
                        ],
                        "zip": [
                            2235,
                            2263
                        ],
                        "callbacks.on_batch_end": [
                            2238
                        ],
                        "val_outs": [
                            2246,
                            2255,
                            2260,
                            2261,
                            2263
                        ],
                        "self.evaluate_generator": [
                            2246
                        ],
                        "self.evaluate": [
                            2255
                        ],
                        "callbacks.on_epoch_end": [
                            2269
                        ],
                        "enqueuer.stop": [
                            2277
                        ],
                        "val_enqueuer.stop": [
                            2280
                        ],
                        "callbacks.on_train_end": [
                            2282
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1950
                        ],
                        "interfaces": [
                            1950
                        ]
                    },
                    "filtered_variables": {
                        "wait_time": [
                            2076,
                            2175
                        ],
                        "epoch": [
                            2187,
                            2191,
                            2077,
                            2269,
                            2270
                        ],
                        "initial_epoch": [
                            2077
                        ],
                        "do_validation": [
                            2081,
                            2147,
                            2244,
                            2138,
                            2079
                        ],
                        "validation_data": [
                            2149,
                            2150,
                            2247,
                            2152,
                            2153,
                            2158,
                            2102,
                            2103,
                            2104,
                            2105,
                            2079
                        ],
                        "self._make_train_function": [
                            2080
                        ],
                        "self": [
                            2080,
                            2113,
                            2082,
                            2117,
                            2246,
                            2119,
                            2283,
                            2124,
                            2125,
                            2188,
                            2159,
                            2255,
                            2129,
                            2130,
                            2162,
                            2132,
                            2229
                        ],
                        "self._make_test_function": [
                            2082
                        ],
                        "is_sequence": [
                            2179,
                            2084,
                            2085,
                            2092,
                            2168
                        ],
                        "generator": [
                            2180,
                            2084,
                            2182,
                            2093,
                            2169,
                            2173
                        ],
                        "Sequence": [
                            2104,
                            2105,
                            2084
                        ],
                        "use_multiprocessing": [
                            2250,
                            2170,
                            2085,
                            2174
                        ],
                        "workers": [
                            2176,
                            2249,
                            2085,
                            2167
                        ],
                        "warnings.warn": [
                            2086
                        ],
                        "warnings": [
                            2086
                        ],
                        "steps_per_epoch": [
                            2244,
                            2091,
                            2093,
                            2194,
                            2136
                        ],
                        "val_gen": [
                            2105,
                            2147,
                            2245,
                            2102
                        ],
                        "validation_steps": [
                            2248,
                            2106
                        ],
                        "out_labels": [
                            2113,
                            2114,
                            2235,
                            2263
                        ],
                        "self.metrics_names": [
                            2113
                        ],
                        "callback_metrics": [
                            2114,
                            2139
                        ],
                        "n": [
                            2114
                        ],
                        "self.history": [
                            2283,
                            2125,
                            2117
                        ],
                        "cbks.History": [
                            2117
                        ],
                        "cbks": [
                            2126,
                            2122,
                            2117,
                            2118
                        ],
                        "_callbacks": [
                            2126,
                            2121,
                            2125,
                            2118
                        ],
                        "cbks.BaseLogger": [
                            2118
                        ],
                        "self.stateful_metric_names": [
                            2124,
                            2119
                        ],
                        "verbose": [
                            2120,
                            2137
                        ],
                        "_callbacks.append": [
                            2121
                        ],
                        "cbks.ProgbarLogger": [
                            2122
                        ],
                        "callbacks": [
                            2282,
                            2125,
                            2126,
                            2191,
                            2227,
                            2164,
                            2133,
                            2134,
                            2269,
                            2141,
                            2238
                        ],
                        "cbks.CallbackList": [
                            2126
                        ],
                        "self.callback_model": [
                            2129,
                            2130
                        ],
                        "callback_model": [
                            2184,
                            2130,
                            2132,
                            2133,
                            2266,
                            2271
                        ],
                        "callbacks.set_model": [
                            2133
                        ],
                        "callbacks.set_params": [
                            2134
                        ],
                        "epochs": [
                            2187,
                            2135
                        ],
                        "callbacks.on_train_begin": [
                            2141
                        ],
                        "enqueuer": [
                            2176,
                            2177,
                            2276,
                            2277,
                            2169,
                            2173,
                            2143
                        ],
                        "val_enqueuer": [
                            2144,
                            2280,
                            2279
                        ],
                        "val_x": [
                            2150,
                            2153,
                            2159,
                            2160,
                            2161,
                            2256
                        ],
                        "val_y": [
                            2150,
                            2153,
                            2159,
                            2160,
                            2161,
                            2256
                        ],
                        "val_sample_weight": [
                            2160,
                            2153,
                            2151
                        ],
                        "val_sample_weights": [
                            2161,
                            2258,
                            2159
                        ],
                        "self._standardize_user_data": [
                            2159
                        ],
                        "val_data": [
                            2161,
                            2163,
                            2165
                        ],
                        "self.uses_learning_phase": [
                            2162
                        ],
                        "K.learning_phase": [
                            2162
                        ],
                        "K": [
                            2162
                        ],
                        "cbk": [
                            2164,
                            2165
                        ],
                        "cbk.validation_data": [
                            2165
                        ],
                        "OrderedEnqueuer": [
                            2169
                        ],
                        "shuffle": [
                            2171
                        ],
                        "GeneratorEnqueuer": [
                            2173
                        ],
                        "enqueuer.start": [
                            2176
                        ],
                        "max_queue_size": [
                            2176,
                            2251
                        ],
                        "output_generator": [
                            2177,
                            2195,
                            2180,
                            2182
                        ],
                        "enqueuer.get": [
                            2177
                        ],
                        "callback_model.stop_training": [
                            2184,
                            2266,
                            2271
                        ],
                        "epoch_logs": [
                            2264,
                            2186,
                            2269
                        ],
                        "m": [
                            2188,
                            2189,
                            2190
                        ],
                        "self.metrics": [
                            2188
                        ],
                        "Layer": [
                            2189
                        ],
                        "m.stateful": [
                            2189
                        ],
                        "m.reset_states": [
                            2190
                        ],
                        "callbacks.on_epoch_begin": [
                            2191
                        ],
                        "steps_done": [
                            2192,
                            2241,
                            2194,
                            2244
                        ],
                        "batch_index": [
                            2240,
                            2193,
                            2225,
                            2227,
                            2238
                        ],
                        "generator_output": [
                            2212,
                            2195,
                            2197,
                            2201,
                            2203,
                            2204,
                            2206,
                            2207
                        ],
                        "x": [
                            2215,
                            2219,
                            2220,
                            2221,
                            2222,
                            2224,
                            2229,
                            2204,
                            2207
                        ],
                        "y": [
                            2204,
                            2229,
                            2207
                        ],
                        "sample_weight": [
                            2205,
                            2230,
                            2207
                        ],
                        "batch_logs": [
                            2214,
                            2225,
                            2226,
                            2227,
                            2236,
                            2238
                        ],
                        "batch_size": [
                            2218,
                            2220,
                            2222,
                            2224,
                            2257,
                            2226
                        ],
                        "shape": [
                            2220,
                            2222
                        ],
                        "x.values": [
                            2222
                        ],
                        "x.shape": [
                            2224
                        ],
                        "callbacks.on_batch_begin": [
                            2227
                        ],
                        "outs": [
                            2233,
                            2234,
                            2235,
                            2229
                        ],
                        "self.train_on_batch": [
                            2229
                        ],
                        "class_weight": [
                            2231
                        ],
                        "l": [
                            2264,
                            2235,
                            2236,
                            2263
                        ],
                        "o": [
                            2264,
                            2235,
                            2236,
                            2263
                        ],
                        "callbacks.on_batch_end": [
                            2238
                        ],
                        "val_outs": [
                            2246,
                            2255,
                            2260,
                            2261,
                            2263
                        ],
                        "self.evaluate_generator": [
                            2246
                        ],
                        "self.evaluate": [
                            2255
                        ],
                        "callbacks.on_epoch_end": [
                            2269
                        ],
                        "enqueuer.stop": [
                            2277
                        ],
                        "val_enqueuer.stop": [
                            2280
                        ],
                        "callbacks.on_train_end": [
                            2282
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            1950
                        ],
                        "interfaces": [
                            1950
                        ]
                    },
                    "diff_line_number": 2188,
                    "class_data": {
                        "signature": "class Model(Container)",
                        "docstring": "The `Model` class adds training & evaluation routines to a `Container`.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name + '\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"' + name + '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss=' + str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n    if loss_weights is None:\n        loss_weights_list = [1.0 for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.0))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss_weights=' + str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' + str(loss_weights) + ' - expected a list of dicts.')\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError('When passing a list as `target_tensors`, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed target_tensors=' + str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n            tmp_target_tensors = []\n            for name in self.output_names:\n                tmp_target_tensors.append(target_tensors.get(name, None))\n            target_tensors = tmp_target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self._internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in sample_weight_mode dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name + '\" missing from sample_weight_modes dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed sample_weight_mode=' + str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            elif sample_weight_mode == 'temporal':\n                sample_weights.append(K.placeholder(ndim=2, name=name + '_sample_weights'))\n                sample_weight_modes.append('temporal')\n            else:\n                sample_weights.append(K.placeholder(ndim=1, name=name + '_sample_weights'))\n                sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n    self.metrics = metrics or []\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled because it has no loss to optimize.')\n            else:\n                total_loss = 0.0\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n    self.metrics_updates = []\n    self.stateful_metric_names = []\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n                for metric in metrics:\n                    if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n                        output_shape = self._internal_output_shapes[i]\n                        if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.binary_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.binary_crossentropy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.sparse_categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.sparse_categorical_crossentropy\n                        elif metric in ('accuracy', 'acc'):\n                            metric_fn = metrics_module.categorical_accuracy\n                        elif metric in ('crossentropy', 'ce'):\n                            metric_fn = metrics_module.categorical_crossentropy\n                        if metric in ('accuracy', 'acc'):\n                            suffix = 'acc'\n                        elif metric in ('crossentropy', 'ce'):\n                            suffix = 'ce'\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + suffix\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        if hasattr(metric_fn, 'name'):\n                            metric_name = metric_fn.name\n                        else:\n                            metric_name = metric_fn.__name__\n                        metric_name = metric_name_prefix + metric_name\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n                    if len(self.output_names) > 1:\n                        metric_name = self.output_names[i] + '_' + metric_name\n                    j = 1\n                    base_metric_name = metric_name\n                    while metric_name in self.metrics_names:\n                        metric_name = base_metric_name + '_' + str(j)\n                        j += 1\n                    self.metrics_names.append(metric_name)\n                    self.metrics_tensors.append(metric_result)\n                    if isinstance(metric_fn, Layer) and metric_fn.stateful:\n                        self.stateful_metric_names.append(metric_name)\n                        self.metrics_updates += metric_fn.updates\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n    self._function_kwargs = kwargs\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                            "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n    if len(self.trainable_weights) != len(self._collected_trainable_weights):\n        warnings.warn(UserWarning('Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?'))",
                            "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)\n            updates = self.updates + training_updates + self.metrics_updates\n            self.train_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)",
                            "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        self.test_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates + self.metrics_updates, name='test_function', **self._function_kwargs)",
                            "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)",
                            "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name + ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have a defined shape, or ' + steps_name + ' should be specified.')\n    return num_samples",
                            "def _fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' % (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` when doing step-wise training, i.e. `steps_per_epoch` must be set.')\n    num_train_samples = self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        _callbacks.append(cbks.ProgbarLogger(count_mode, stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    out_labels = out_labels or []\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'batch_size': batch_size, 'epochs': epochs, 'steps': steps_per_epoch, 'samples': num_train_samples, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics or []})\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    for epoch in range(initial_epoch, epochs):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, steps=validation_steps, verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. If using HDF5 input data, pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                for i in indices_for_conversion_to_dense:\n                    ins_batch[i] = ins_batch[i].toarray()\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n                if batch_index == len(batches) - 1:\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                            "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    indices_for_conversion_to_dense = []\n    for i in range(len(self._feed_inputs)):\n        if issparse(ins[i]) and (not K.is_sparse(self._feed_inputs[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0) for i in range(len(unconcatenated_outs))]\n    else:\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                            "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if hasattr(self, 'metrics'):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = float(batch_out)\n                    else:\n                        outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs * len(batch_ids)\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                            "def _standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.')\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        elif not hasattr(loss_fn, '__name__') or getattr(losses, loss_fn.__name__, None) is None:\n            output_shapes.append(None)\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False, exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight, self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight, self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode) for ref, sw, cw, mode in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    if check_array_lengths:\n        _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y, self._feed_loss_fns, self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples')\n    return (x, y, sample_weights)",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and (steps_per_epoch is None):\n        raise ValueError('If fitting from data tensors, you should specify the `steps_per_epoch` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, batch_size=batch_size)\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, it must contain 2 (x_val, y_val) or 3 (x_val, y_val, val_sample_weights) items, however it contains %d items' % len(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, sample_weight=val_sample_weight, batch_size=batch_size)\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_split and 0.0 < validation_split < 1.0:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1.0 - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1.0 - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (_slice_arrays(sample_weights, 0, split_at), _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = [0.0]\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n    out_labels = self.metrics_names\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n    return self._fit_loop(f, ins, out_labels=out_labels, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, callback_metrics=callback_metrics, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and (steps is None):\n        raise ValueError('If evaluating from data tensors, you should specify the `steps` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, batch_size=batch_size)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def predict(self, x, batch_size=None, verbose=0, steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, you should specify the `steps` argument.')\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples. Batch size: ' + str(batch_size) + '.')\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def train_on_batch(self, x, y, sample_weight=None, class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Trains the model on data generated batch-by-batch by a Python generator or an instance of `Sequence`.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches may\n            have different sizes. For example, the last batch of the epoch\n            is commonly smaller than the others, if the size of the dataset\n            is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only). This can be useful to tell the model to\n            \"pay more attention\" to samples from an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process-based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean.\n            If `True`, use process-based threading.\n            If unspecified, `use_multiprocessing` will default to `False`.\n            Note that because this implementation relies on multiprocessing,\n            you should not pass non-picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        shuffle: Boolean. Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (`keras.utils.Sequence`).\n            Has no effect when `steps_per_epoch` is not `None`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        ValueError: In case the generator yields data in an invalid format.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while True:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n    \"\"\"\n    wait_time = 0.01\n    epoch = initial_epoch\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.')\n    val_gen = hasattr(validation_data, 'next') or hasattr(validation_data, '__next__') or isinstance(validation_data, Sequence)\n    if val_gen and (not isinstance(validation_data, Sequence)) and (not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `validation_steps` or use the `keras.utils.Sequence` class.')\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(cbks.ProgbarLogger(count_mode='steps', stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'epochs': epochs, 'steps': steps_per_epoch, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics})\n    callbacks.on_train_begin()\n    enqueuer = None\n    val_enqueuer = None\n    try:\n        if do_validation and (not val_gen):\n            if len(validation_data) == 2:\n                val_x, val_y = validation_data\n                val_sample_weight = None\n            elif len(validation_data) == 3:\n                val_x, val_y, val_sample_weight = validation_data\n            else:\n                raise ValueError('`validation_data` should be a tuple `(val_x, val_y, val_sample_weight)` or `(val_x, val_y)`. Found: ' + str(validation_data))\n            val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, val_sample_weight)\n            val_data = val_x + val_y + val_sample_weights\n            if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n                val_data += [0.0]\n            for cbk in callbacks:\n                cbk.validation_data = val_data\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        callback_model.stop_training = False\n        epoch_logs = {}\n        while epoch < epochs:\n            for m in self.metrics:\n                if isinstance(m, Layer) and m.stateful:\n                    m.reset_states()\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                batch_logs = {}\n                if x is None or len(x) == 0:\n                    batch_size = 1\n                elif isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = self.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                batch_index += 1\n                steps_done += 1\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(validation_data, validation_steps, workers=workers, use_multiprocessing=use_multiprocessing, max_queue_size=max_queue_size)\n                    else:\n                        val_outs = self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n                if callback_model.stop_training:\n                    break\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n    callbacks.on_train_end()\n    return self.history",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n    stateful_metric_indices = []\n    if hasattr(self, 'metrics'):\n        for i, m in enumerate(self.metrics):\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    steps_done = 0\n    wait_time = 0.01\n    outs_per_batch = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if not isinstance(outs, list):\n                outs = [outs]\n            outs_per_batch.append(outs)\n            if x is None or len(x) == 0:\n                batch_size = 1\n            elif isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. Batches should at least contain one item.')\n            steps_done += 1\n            batch_sizes.append(batch_size)\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    averages = []\n    for i in range(len(outs)):\n        if i not in stateful_metric_indices:\n            averages.append(np.average([out[i] for out in outs_per_batch], weights=batch_sizes))\n        else:\n            averages.append(float(outs_per_batch[-1][i]))\n    if len(averages) == 1:\n        return averages[0]\n    return averages",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n            else:\n                x = generator_output\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                            "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n    for metric in metrics:\n        if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n            output_shape = self._internal_output_shapes[i]\n            if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.binary_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.binary_crossentropy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.sparse_categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.sparse_categorical_crossentropy\n            elif metric in ('accuracy', 'acc'):\n                metric_fn = metrics_module.categorical_accuracy\n            elif metric in ('crossentropy', 'ce'):\n                metric_fn = metrics_module.categorical_crossentropy\n            if metric in ('accuracy', 'acc'):\n                suffix = 'acc'\n            elif metric in ('crossentropy', 'ce'):\n                suffix = 'ce'\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + suffix\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            if hasattr(metric_fn, 'name'):\n                metric_name = metric_fn.name\n            else:\n                metric_name = metric_fn.__name__\n            metric_name = metric_name_prefix + metric_name\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[i] + '_' + metric_name\n        j = 1\n        base_metric_name = metric_name\n        while metric_name in self.metrics_names:\n            metric_name = base_metric_name + '_' + str(j)\n            j += 1\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_result)\n        if isinstance(metric_fn, Layer) and metric_fn.stateful:\n            self.stateful_metric_names.append(metric_name)\n            self.metrics_updates += metric_fn.updates"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "_check_trainable_weights_consistency(self)",
                            "_make_train_function(self)",
                            "_make_test_function(self)",
                            "_make_predict_function(self)",
                            "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                            "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                            "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                            "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                            "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                            "predict(self, x, batch_size=None, verbose=0, steps=None)",
                            "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_on_batch(self, x)",
                            "fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "handle_metrics(metrics, weights=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<list_iterator object at 0x11a85a3d0>",
                                    "variable_type": "list_iterator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11a52b690>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<list_iterator object at 0x11a45a110>",
                                    "variable_type": "list_iterator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "callback_metrics": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x11a83d910>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11a52b850>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "o": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "epoch": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "initial_epoch": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "do_validation": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_data": {
                                    "variable_value": "<list_iterator object at 0x11a85a3d0>",
                                    "variable_type": "list_iterator",
                                    "variable_shape": null
                                },
                                "self._make_train_function": {
                                    "variable_value": "<bound method Model._make_train_function of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11a52b690>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<list_iterator object at 0x11a45a110>",
                                    "variable_type": "list_iterator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps_per_epoch": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "val_gen": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validation_steps": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "out_labels": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "callback_metrics": {
                                    "variable_value": "['loss', 'acc', 'true_positives', 'val_loss', 'val_acc', 'val_true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "6"
                                },
                                "n": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.history": {
                                    "variable_value": "<keras.callbacks.History object at 0x11a91d190>",
                                    "variable_type": "History",
                                    "variable_shape": null
                                },
                                "cbks.History": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_callbacks": {
                                    "variable_value": "[<keras.callbacks.BaseLogger object at 0x11a91d250>, <keras.callbacks.ProgbarLogger object at 0x11a91d290>, <keras.callbacks.History object at 0x11a91d190>]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "cbks.BaseLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "verbose": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "_callbacks.append": {
                                    "variable_value": "<built-in method append of list object at 0x11a634640>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "cbks.ProgbarLogger": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "callbacks": {
                                    "variable_value": "<keras.callbacks.CallbackList object at 0x11a91d2d0>",
                                    "variable_type": "CallbackList",
                                    "variable_shape": null
                                },
                                "cbks.CallbackList": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.callback_model": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callback_model": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11a52b690>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "callbacks.set_model": {
                                    "variable_value": "<bound method CallbackList.set_model of <keras.callbacks.CallbackList object at 0x11a91d2d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.set_params": {
                                    "variable_value": "<bound method CallbackList.set_params of <keras.callbacks.CallbackList object at 0x11a91d2d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "epochs": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_begin": {
                                    "variable_value": "<bound method CallbackList.on_train_begin of <keras.callbacks.CallbackList object at 0x11a91d2d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x11a91d310>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "val_enqueuer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "val_x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "val_sample_weights": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._standardize_user_data": {
                                    "variable_value": "<bound method Model._standardize_user_data of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.uses_learning_phase": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "K.learning_phase": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "K": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cbk.validation_data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shuffle": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11a91d310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x11a517ed0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11a91d310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callback_model.stop_training": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "epoch_logs": {
                                    "variable_value": "{'val_loss': 0.7279536843299865, 'val_acc': 0.3, 'val_true_positives': 2.0, 'loss': 0.7126208692342043, 'acc': 0.502, 'true_positives': 291}",
                                    "variable_type": "dict",
                                    "variable_shape": "6"
                                },
                                "m": {
                                    "variable_value": "<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11a52b850>",
                                    "variable_type": "BinaryTruePositives",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11a52b850>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": "<bound method test_stateful_metrics.<locals>.BinaryTruePositives.reset_states of <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x11a52b850>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_begin": {
                                    "variable_value": "<bound method CallbackList.on_epoch_begin of <keras.callbacks.CallbackList object at 0x11a91d2d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "steps_done": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "batch_index": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[0.63715502, 0.08571966]]), array([[0]]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[0.63715502, 0.08571966]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 2)"
                                },
                                "y": {
                                    "variable_value": "array([[0]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "batch_logs": {
                                    "variable_value": "{'batch': 999, 'size': 1, 'loss': 0.5181278, 'acc': 1.0, 'true_positives': 291}",
                                    "variable_type": "dict",
                                    "variable_shape": "5"
                                },
                                "batch_size": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "callbacks.on_batch_begin": {
                                    "variable_value": "<bound method CallbackList.on_batch_begin of <keras.callbacks.CallbackList object at 0x11a91d2d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.5181278, 1.0, 291]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.train_on_batch": {
                                    "variable_value": "<bound method Model.train_on_batch of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "class_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "l": {
                                    "variable_value": "'true_positives'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "o": {
                                    "variable_value": "2.0",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "callbacks.on_batch_end": {
                                    "variable_value": "<bound method CallbackList.on_batch_end of <keras.callbacks.CallbackList object at 0x11a91d2d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_outs": {
                                    "variable_value": "[0.7279536843299865, 0.3, 2.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.evaluate_generator": {
                                    "variable_value": "<bound method Model.evaluate_generator of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.evaluate": {
                                    "variable_value": "<bound method Model.evaluate of <keras.engine.training.Model object at 0x11a52b690>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "callbacks.on_epoch_end": {
                                    "variable_value": "<bound method CallbackList.on_epoch_end of <keras.callbacks.CallbackList object at 0x11a91d2d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11a91d310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "val_enqueuer.stop": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "callbacks.on_train_end": {
                                    "variable_value": "<bound method CallbackList.on_train_end of <keras.callbacks.CallbackList object at 0x11a91d2d0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "evaluate_generator",
                    "function_code": "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None,\n                       max_queue_size=10,\n                       workers=1,\n                       use_multiprocessing=False,\n                       verbose=0):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n\n    stateful_metric_indices = []\n    if hasattr(self, 'metrics'):\n        for i, m in enumerate(self.metrics):\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [\n            i for i, name in enumerate(self.metrics_names)\n            if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n\n    steps_done = 0\n    wait_time = 0.01\n    outs_per_batch = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator,\n                                           use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator,\n                                             use_multiprocessing=use_multiprocessing,\n                                             wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter(generator)\n            else:\n                output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if not isinstance(outs, list):\n                outs = [outs]\n            outs_per_batch.append(outs)\n\n            if x is None or len(x) == 0:\n                # Handle data tensors support when no input given\n                # step-size = 1 for data tensors\n                batch_size = 1\n            elif isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. '\n                                 'Batches should at least contain one item.')\n\n            steps_done += 1\n            batch_sizes.append(batch_size)\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    averages = []\n    for i in range(len(outs)):\n        if i not in stateful_metric_indices:\n            averages.append(np.average([out[i] for out in outs_per_batch],\n                                       weights=batch_sizes))\n        else:\n            averages.append(float(outs_per_batch[-1][i]))\n    if len(averages) == 1:\n        return averages[0]\n    return averages\n",
                    "decorators": [
                        "interfaces.legacy_generator_methods_support"
                    ],
                    "docstring": "Evaluates the model on a data generator.\n\nThe generator should return the same kind of data\nas accepted by `test_on_batch`.\n\n# Arguments\n    generator: Generator yielding tuples (inputs, targets)\n        or (inputs, targets, sample_weights)\n        or an instance of Sequence (keras.utils.Sequence)\n        object in order to avoid duplicate data\n        when using multiprocessing.\n    steps: Total number of steps (batches of samples)\n        to yield from `generator` before stopping.\n        Optional for `Sequence`: if unspecified, will use\n        the `len(generator)` as a number of steps.\n    max_queue_size: maximum size for the generator queue\n    workers: Integer. Maximum number of processes to spin up\n        when using process based threading.\n        If unspecified, `workers` will default to 1. If 0, will\n        execute the generator on the main thread.\n    use_multiprocessing: if True, use process based threading.\n        Note that because\n        this implementation relies on multiprocessing,\n        you should not pass\n        non picklable arguments to the generator\n        as they can't be passed\n        easily to children processes.\n    verbose: verbosity mode, 0 or 1.\n\n# Returns\n    Scalar test loss (if the model has a single output and no metrics)\n    or list of scalars (if the model has multiple outputs\n    and/or metrics). The attribute `model.metrics_names` will give you\n    the display labels for the scalar outputs.\n\n# Raises\n    ValueError: In case the generator yields\n        data in an invalid format.",
                    "start_line": 2285,
                    "end_line": 2438,
                    "variables": {
                        "self._make_test_function": [
                            2330
                        ],
                        "self": [
                            2401,
                            2338,
                            2339,
                            2330,
                            2333,
                            2334
                        ],
                        "stateful_metric_indices": [
                            2337,
                            2332,
                            2341,
                            2431
                        ],
                        "hasattr": [
                            2386,
                            2333
                        ],
                        "i": [
                            2432,
                            2338,
                            2435,
                            2431,
                            2430,
                            2334
                        ],
                        "m": [
                            2336,
                            2334,
                            2335
                        ],
                        "enumerate": [
                            2338,
                            2334
                        ],
                        "self.metrics": [
                            2334
                        ],
                        "isinstance": [
                            2402,
                            2410,
                            2347,
                            2412,
                            2335
                        ],
                        "Layer": [
                            2335
                        ],
                        "m.stateful": [
                            2335
                        ],
                        "m.reset_states": [
                            2336
                        ],
                        "name": [
                            2338,
                            2339
                        ],
                        "self.metrics_names": [
                            2338
                        ],
                        "str": [
                            2400,
                            2339,
                            2390
                        ],
                        "self.stateful_metric_names": [
                            2339
                        ],
                        "steps_done": [
                            2384,
                            2420,
                            2423,
                            2343
                        ],
                        "wait_time": [
                            2344,
                            2372
                        ],
                        "outs_per_batch": [
                            2432,
                            2345,
                            2435,
                            2404
                        ],
                        "batch_sizes": [
                            2433,
                            2346,
                            2421
                        ],
                        "is_sequence": [
                            2376,
                            2347,
                            2348,
                            2355,
                            2366
                        ],
                        "generator": [
                            2370,
                            2377,
                            2347,
                            2379,
                            2356,
                            2367
                        ],
                        "Sequence": [
                            2347
                        ],
                        "use_multiprocessing": [
                            2368,
                            2371,
                            2348
                        ],
                        "workers": [
                            2348,
                            2365,
                            2373
                        ],
                        "warnings.warn": [
                            2349
                        ],
                        "warnings": [
                            2349
                        ],
                        "UserWarning": [
                            2350
                        ],
                        "steps": [
                            2384,
                            2354,
                            2356,
                            2382
                        ],
                        "len": [
                            2436,
                            2406,
                            2356,
                            2391,
                            2394,
                            2430
                        ],
                        "ValueError": [
                            2417,
                            2387,
                            2397,
                            2358
                        ],
                        "enqueuer": [
                            2370,
                            2373,
                            2374,
                            2426,
                            2362,
                            2427,
                            2367
                        ],
                        "OrderedEnqueuer": [
                            2367
                        ],
                        "GeneratorEnqueuer": [
                            2370
                        ],
                        "enqueuer.start": [
                            2373
                        ],
                        "max_queue_size": [
                            2373
                        ],
                        "output_generator": [
                            2385,
                            2377,
                            2379,
                            2374
                        ],
                        "enqueuer.get": [
                            2374
                        ],
                        "iter": [
                            2377
                        ],
                        "verbose": [
                            2381,
                            2422
                        ],
                        "progbar": [
                            2382,
                            2423
                        ],
                        "Progbar": [
                            2382
                        ],
                        "generator_output": [
                            2400,
                            2385,
                            2386,
                            2390,
                            2391,
                            2392,
                            2394,
                            2395
                        ],
                        "next": [
                            2385
                        ],
                        "x": [
                            2401,
                            2406,
                            2410,
                            2411,
                            2412,
                            2413,
                            2415,
                            2392,
                            2395
                        ],
                        "y": [
                            2392,
                            2401,
                            2395
                        ],
                        "sample_weight": [
                            2401,
                            2393,
                            2395
                        ],
                        "outs": [
                            2401,
                            2402,
                            2403,
                            2404,
                            2430
                        ],
                        "self.test_on_batch": [
                            2401
                        ],
                        "list": [
                            2402,
                            2413,
                            2410
                        ],
                        "outs_per_batch.append": [
                            2404
                        ],
                        "batch_size": [
                            2409,
                            2411,
                            2413,
                            2415,
                            2416,
                            2421
                        ],
                        "shape": [
                            2411,
                            2413
                        ],
                        "dict": [
                            2412
                        ],
                        "x.values": [
                            2413
                        ],
                        "x.shape": [
                            2415
                        ],
                        "batch_sizes.append": [
                            2421
                        ],
                        "progbar.update": [
                            2423
                        ],
                        "enqueuer.stop": [
                            2427
                        ],
                        "averages": [
                            2432,
                            2435,
                            2436,
                            2437,
                            2438,
                            2429
                        ],
                        "range": [
                            2430
                        ],
                        "averages.append": [
                            2432,
                            2435
                        ],
                        "np.average": [
                            2432
                        ],
                        "np": [
                            2432
                        ],
                        "out": [
                            2432
                        ],
                        "float": [
                            2435
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            2285
                        ],
                        "interfaces": [
                            2285
                        ]
                    },
                    "filtered_variables": {
                        "self._make_test_function": [
                            2330
                        ],
                        "self": [
                            2401,
                            2338,
                            2339,
                            2330,
                            2333,
                            2334
                        ],
                        "stateful_metric_indices": [
                            2337,
                            2332,
                            2341,
                            2431
                        ],
                        "i": [
                            2432,
                            2338,
                            2435,
                            2431,
                            2430,
                            2334
                        ],
                        "m": [
                            2336,
                            2334,
                            2335
                        ],
                        "self.metrics": [
                            2334
                        ],
                        "Layer": [
                            2335
                        ],
                        "m.stateful": [
                            2335
                        ],
                        "m.reset_states": [
                            2336
                        ],
                        "name": [
                            2338,
                            2339
                        ],
                        "self.metrics_names": [
                            2338
                        ],
                        "self.stateful_metric_names": [
                            2339
                        ],
                        "steps_done": [
                            2384,
                            2420,
                            2423,
                            2343
                        ],
                        "wait_time": [
                            2344,
                            2372
                        ],
                        "outs_per_batch": [
                            2432,
                            2345,
                            2435,
                            2404
                        ],
                        "batch_sizes": [
                            2433,
                            2346,
                            2421
                        ],
                        "is_sequence": [
                            2376,
                            2347,
                            2348,
                            2355,
                            2366
                        ],
                        "generator": [
                            2370,
                            2377,
                            2347,
                            2379,
                            2356,
                            2367
                        ],
                        "Sequence": [
                            2347
                        ],
                        "use_multiprocessing": [
                            2368,
                            2371,
                            2348
                        ],
                        "workers": [
                            2348,
                            2365,
                            2373
                        ],
                        "warnings.warn": [
                            2349
                        ],
                        "warnings": [
                            2349
                        ],
                        "steps": [
                            2384,
                            2354,
                            2356,
                            2382
                        ],
                        "enqueuer": [
                            2370,
                            2373,
                            2374,
                            2426,
                            2362,
                            2427,
                            2367
                        ],
                        "OrderedEnqueuer": [
                            2367
                        ],
                        "GeneratorEnqueuer": [
                            2370
                        ],
                        "enqueuer.start": [
                            2373
                        ],
                        "max_queue_size": [
                            2373
                        ],
                        "output_generator": [
                            2385,
                            2377,
                            2379,
                            2374
                        ],
                        "enqueuer.get": [
                            2374
                        ],
                        "verbose": [
                            2381,
                            2422
                        ],
                        "progbar": [
                            2382,
                            2423
                        ],
                        "Progbar": [
                            2382
                        ],
                        "generator_output": [
                            2400,
                            2385,
                            2386,
                            2390,
                            2391,
                            2392,
                            2394,
                            2395
                        ],
                        "x": [
                            2401,
                            2406,
                            2410,
                            2411,
                            2412,
                            2413,
                            2415,
                            2392,
                            2395
                        ],
                        "y": [
                            2392,
                            2401,
                            2395
                        ],
                        "sample_weight": [
                            2401,
                            2393,
                            2395
                        ],
                        "outs": [
                            2401,
                            2402,
                            2403,
                            2404,
                            2430
                        ],
                        "self.test_on_batch": [
                            2401
                        ],
                        "outs_per_batch.append": [
                            2404
                        ],
                        "batch_size": [
                            2409,
                            2411,
                            2413,
                            2415,
                            2416,
                            2421
                        ],
                        "shape": [
                            2411,
                            2413
                        ],
                        "x.values": [
                            2413
                        ],
                        "x.shape": [
                            2415
                        ],
                        "batch_sizes.append": [
                            2421
                        ],
                        "progbar.update": [
                            2423
                        ],
                        "enqueuer.stop": [
                            2427
                        ],
                        "averages": [
                            2432,
                            2435,
                            2436,
                            2437,
                            2438,
                            2429
                        ],
                        "averages.append": [
                            2432,
                            2435
                        ],
                        "np.average": [
                            2432
                        ],
                        "np": [
                            2432
                        ],
                        "out": [
                            2432
                        ],
                        "interfaces.legacy_generator_methods_support": [
                            2285
                        ],
                        "interfaces": [
                            2285
                        ]
                    },
                    "diff_line_number": 2334,
                    "class_data": {
                        "signature": "class Model(Container)",
                        "docstring": "The `Model` class adds training & evaluation routines to a `Container`.\n    ",
                        "constructor_docstring": null,
                        "functions": [
                            "def compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name + '\" missing from loss dictionary. We assume this was done on purpose, and we will not be expecting any data to be passed to \"' + name + '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, it should have one entry per model outputs. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss=' + str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n    if loss_weights is None:\n        loss_weights_list = [1.0 for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.0))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed loss_weights=' + str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' + str(loss_weights) + ' - expected a list of dicts.')\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError('When passing a list as `target_tensors`, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed target_tensors=' + str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n            tmp_target_tensors = []\n            for name in self.output_names:\n                tmp_target_tensors.append(target_tensors.get(name, None))\n            target_tensors = tmp_target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self._internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape), name=name + '_target', sparse=K.is_sparse(self.outputs[i]), dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in sample_weight_mode dictionary: \"' + name + '\". Only expected the following keys: ' + str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name + '\" missing from sample_weight_modes dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, it should have one entry per model output. The model has ' + str(len(self.outputs)) + ' outputs, but you passed sample_weight_mode=' + str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2, name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1, name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            elif sample_weight_mode == 'temporal':\n                sample_weights.append(K.placeholder(ndim=2, name=name + '_sample_weights'))\n                sample_weight_modes.append('temporal')\n            else:\n                sample_weights.append(K.placeholder(ndim=1, name=name + '_sample_weights'))\n                sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n    self.metrics = metrics or []\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred, sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled because it has no loss to optimize.')\n            else:\n                total_loss = 0.0\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n    self.metrics_updates = []\n    self.stateful_metric_names = []\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n                for metric in metrics:\n                    if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n                        output_shape = self._internal_output_shapes[i]\n                        if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.binary_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.binary_crossentropy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.sparse_categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.sparse_categorical_crossentropy\n                        elif metric in ('accuracy', 'acc'):\n                            metric_fn = metrics_module.categorical_accuracy\n                        elif metric in ('crossentropy', 'ce'):\n                            metric_fn = metrics_module.categorical_crossentropy\n                        if metric in ('accuracy', 'acc'):\n                            suffix = 'acc'\n                        elif metric in ('crossentropy', 'ce'):\n                            suffix = 'ce'\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + suffix\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        if hasattr(metric_fn, 'name'):\n                            metric_name = metric_fn.name\n                        else:\n                            metric_name = metric_fn.__name__\n                        metric_name = metric_name_prefix + metric_name\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n                    if len(self.output_names) > 1:\n                        metric_name = self.output_names[i] + '_' + metric_name\n                    j = 1\n                    base_metric_name = metric_name\n                    while metric_name in self.metrics_names:\n                        metric_name = base_metric_name + '_' + str(j)\n                        j += 1\n                    self.metrics_names.append(metric_name)\n                    self.metrics_tensors.append(metric_result)\n                    if isinstance(metric_fn, Layer) and metric_fn.stateful:\n                        self.stateful_metric_names.append(metric_name)\n                        self.metrics_updates += metric_fn.updates\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n    self._function_kwargs = kwargs\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                            "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n    if len(self.trainable_weights) != len(self._collected_trainable_weights):\n        warnings.warn(UserWarning('Discrepancy between trainable weights and collected trainable weights, did you set `model.trainable` without calling `model.compile` after ?'))",
                            "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(params=self._collected_trainable_weights, loss=self.total_loss)\n            updates = self.updates + training_updates + self.metrics_updates\n            self.train_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=updates, name='train_function', **self._function_kwargs)",
                            "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs += [K.learning_phase()]\n        self.test_function = K.function(inputs, [self.total_loss] + self.metrics_tensors, updates=self.state_updates + self.metrics_updates, name='test_function', **self._function_kwargs)",
                            "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs, self.outputs, updates=self.state_updates, name='predict_function', **kwargs)",
                            "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name + ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have a defined shape, or ' + steps_name + ' should be specified.')\n    return num_samples",
                            "def _fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' % (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` when doing step-wise training, i.e. `steps_per_epoch` must be set.')\n    num_train_samples = self._check_num_samples(ins, batch_size, steps_per_epoch, 'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        _callbacks.append(cbks.ProgbarLogger(count_mode, stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    out_labels = out_labels or []\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'batch_size': batch_size, 'epochs': epochs, 'steps': steps_per_epoch, 'samples': num_train_samples, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics or []})\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    for epoch in range(initial_epoch, epochs):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, steps=validation_steps, verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. If using HDF5 input data, pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                for i in indices_for_conversion_to_dense:\n                    ins_batch[i] = ins_batch[i].toarray()\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n                if batch_index == len(batches) - 1:\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins, batch_size=batch_size, verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                            "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    indices_for_conversion_to_dense = []\n    for i in range(len(self._feed_inputs)):\n        if issparse(ins[i]) and (not K.is_sparse(self._feed_inputs[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0) for i in range(len(unconcatenated_outs))]\n    else:\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                            "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if hasattr(self, 'metrics'):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    num_samples = self._check_num_samples(ins, batch_size, steps, 'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and (not K.is_sparse(feed[i])):\n            indices_for_conversion_to_dense.append(i)\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = float(batch_out)\n                    else:\n                        outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.0)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.0)\n                outs[0] += batch_outs * len(batch_ids)\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                            "def _standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before training/testing. Use `model.compile(optimizer, loss)`.')\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        elif not hasattr(loss_fn, '__name__') or getattr(losses, loss_fn.__name__, None) is None:\n            output_shapes.append(None)\n        else:\n            output_shapes.append(output_shape)\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False, exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names, output_shapes, check_batch_axis=False, exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight, self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight, self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode) for ref, sw, cw, mode in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n    if check_array_lengths:\n        _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y, self._feed_loss_fns, self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples')\n    return (x, y, sample_weights)",
                            "def fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and (steps_per_epoch is None):\n        raise ValueError('If fitting from data tensors, you should specify the `steps_per_epoch` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight, batch_size=batch_size)\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, it must contain 2 (x_val, y_val) or 3 (x_val, y_val, val_sample_weights) items, however it contains %d items' % len(validation_data))\n        val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, sample_weight=val_sample_weight, batch_size=batch_size)\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_split and 0.0 < validation_split < 1.0:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1.0 - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1.0 - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (_slice_arrays(sample_weights, 0, split_at), _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = val_x + val_y + val_sample_weights + [0.0]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n            val_ins = [0.0]\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n    out_labels = self.metrics_names\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n    return self._fit_loop(f, ins, out_labels=out_labels, batch_size=batch_size, epochs=epochs, verbose=verbose, callbacks=callbacks, val_f=val_f, val_ins=val_ins, shuffle=shuffle, callback_metrics=callback_metrics, initial_epoch=initial_epoch, steps_per_epoch=steps_per_epoch, validation_steps=validation_steps)",
                            "def evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and (steps is None):\n        raise ValueError('If evaluating from data tensors, you should specify the `steps` argument.')\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, batch_size=batch_size)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def predict(self, x, batch_size=None, verbose=0, steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, you should specify the `steps` argument.')\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes, check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, you should only pass inputs with a number of samples that can be divided by the batch size. Found: ' + str(x[0].shape[0]) + ' samples. Batch size: ' + str(batch_size) + '.')\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size, verbose=verbose, steps=steps)",
                            "def train_on_batch(self, x, y, sample_weight=None, class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight, class_weight=class_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [1.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(x, y, sample_weight=sample_weight)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + y + sample_weights + [0.0]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names, self._feed_input_shapes)\n    if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n        ins = x + [0.0]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                            "@interfaces.legacy_generator_methods_support\ndef fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0):\n    \"\"\"Trains the model on data generated batch-by-batch by a Python generator or an instance of `Sequence`.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches may\n            have different sizes. For example, the last batch of the epoch\n            is commonly smaller than the others, if the size of the dataset\n            is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only). This can be useful to tell the model to\n            \"pay more attention\" to samples from an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process-based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean.\n            If `True`, use process-based threading.\n            If unspecified, `use_multiprocessing` will default to `False`.\n            Note that because this implementation relies on multiprocessing,\n            you should not pass non-picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        shuffle: Boolean. Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (`keras.utils.Sequence`).\n            Has no effect when `steps_per_epoch` is not `None`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        ValueError: In case the generator yields data in an invalid format.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while True:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n    \"\"\"\n    wait_time = 0.01\n    epoch = initial_epoch\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps_per_epoch` or use the `keras.utils.Sequence` class.')\n    val_gen = hasattr(validation_data, 'next') or hasattr(validation_data, '__next__') or isinstance(validation_data, Sequence)\n    if val_gen and (not isinstance(validation_data, Sequence)) and (not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `validation_steps` or use the `keras.utils.Sequence` class.')\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(cbks.ProgbarLogger(count_mode='steps', stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({'epochs': epochs, 'steps': steps_per_epoch, 'verbose': verbose, 'do_validation': do_validation, 'metrics': callback_metrics})\n    callbacks.on_train_begin()\n    enqueuer = None\n    val_enqueuer = None\n    try:\n        if do_validation and (not val_gen):\n            if len(validation_data) == 2:\n                val_x, val_y = validation_data\n                val_sample_weight = None\n            elif len(validation_data) == 3:\n                val_x, val_y, val_sample_weight = validation_data\n            else:\n                raise ValueError('`validation_data` should be a tuple `(val_x, val_y, val_sample_weight)` or `(val_x, val_y)`. Found: ' + str(validation_data))\n            val_x, val_y, val_sample_weights = self._standardize_user_data(val_x, val_y, val_sample_weight)\n            val_data = val_x + val_y + val_sample_weights\n            if self.uses_learning_phase and (not isinstance(K.learning_phase(), int)):\n                val_data += [0.0]\n            for cbk in callbacks:\n                cbk.validation_data = val_data\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing, shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        callback_model.stop_training = False\n        epoch_logs = {}\n        while epoch < epochs:\n            for m in self.metrics:\n                if isinstance(m, Layer) and m.stateful:\n                    m.reset_states()\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n                batch_logs = {}\n                if x is None or len(x) == 0:\n                    batch_size = 1\n                elif isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                outs = self.train_on_batch(x, y, sample_weight=sample_weight, class_weight=class_weight)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n                callbacks.on_batch_end(batch_index, batch_logs)\n                batch_index += 1\n                steps_done += 1\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(validation_data, validation_steps, workers=workers, use_multiprocessing=use_multiprocessing, max_queue_size=max_queue_size)\n                    else:\n                        val_outs = self.evaluate(val_x, val_y, batch_size=batch_size, sample_weight=val_sample_weights, verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n                if callback_model.stop_training:\n                    break\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n    callbacks.on_train_end()\n    return self.history",
                            "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n    stateful_metric_indices = []\n    if hasattr(self, 'metrics'):\n        for i, m in enumerate(self.metrics):\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [i for i, name in enumerate(self.metrics_names) if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n    steps_done = 0\n    wait_time = 0.01\n    outs_per_batch = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple (x, y, sample_weight) or (x, y). Found: ' + str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if not isinstance(outs, list):\n                outs = [outs]\n            outs_per_batch.append(outs)\n            if x is None or len(x) == 0:\n                batch_size = 1\n            elif isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. Batches should at least contain one item.')\n            steps_done += 1\n            batch_sizes.append(batch_size)\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    averages = []\n    for i in range(len(outs)):\n        if i not in stateful_metric_indices:\n            averages.append(np.average([out[i] for out in outs_per_batch], weights=batch_sizes))\n        else:\n            averages.append(float(outs_per_batch[-1][i]))\n    if len(averages) == 1:\n        return averages[0]\n    return averages",
                            "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and (workers > 1):\n        warnings.warn(UserWarning('Using a generator with `use_multiprocessing=True` and multiple workers may duplicate your data. Please consider using the`keras.utils.Sequence class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator based on the `keras.utils.Sequence` class. Please specify `steps` or use the `keras.utils.Sequence` class.')\n    enqueuer = None\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator, use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator, use_multiprocessing=use_multiprocessing, wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        elif is_sequence:\n            output_generator = iter(generator)\n        else:\n            output_generator = generator\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be a tuple `(x, y, sample_weight)` or `(x, y)`. Found: ' + str(generator_output))\n            else:\n                x = generator_output\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                            "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n    for metric in metrics:\n        if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n            output_shape = self._internal_output_shapes[i]\n            if output_shape[-1] == 1 or self.loss_functions[i] == losses.binary_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.binary_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.binary_crossentropy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.sparse_categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.sparse_categorical_crossentropy\n            elif metric in ('accuracy', 'acc'):\n                metric_fn = metrics_module.categorical_accuracy\n            elif metric in ('crossentropy', 'ce'):\n                metric_fn = metrics_module.categorical_crossentropy\n            if metric in ('accuracy', 'acc'):\n                suffix = 'acc'\n            elif metric in ('crossentropy', 'ce'):\n                suffix = 'ce'\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + suffix\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            if hasattr(metric_fn, 'name'):\n                metric_name = metric_fn.name\n            else:\n                metric_name = metric_fn.__name__\n            metric_name = metric_name_prefix + metric_name\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred, weights=weights, mask=masks[i])\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[i] + '_' + metric_name\n        j = 1\n        base_metric_name = metric_name\n        while metric_name in self.metrics_names:\n            metric_name = base_metric_name + '_' + str(j)\n            j += 1\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_result)\n        if isinstance(metric_fn, Layer) and metric_fn.stateful:\n            self.stateful_metric_names.append(metric_name)\n            self.metrics_updates += metric_fn.updates"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                            "_check_trainable_weights_consistency(self)",
                            "_make_train_function(self)",
                            "_make_test_function(self)",
                            "_make_predict_function(self)",
                            "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                            "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                            "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                            "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                            "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None)",
                            "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                            "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                            "predict(self, x, batch_size=None, verbose=0, steps=None)",
                            "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                            "test_on_batch(self, x, y, sample_weight=None)",
                            "predict_on_batch(self, x)",
                            "fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                            "evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                            "handle_metrics(metrics, weights=None)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11bcc1610>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<list_iterator object at 0x11bbfdbd0>",
                                    "variable_type": "list_iterator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11bcc1610>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[2]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>",
                                    "variable_type": "BinaryTruePositives",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": "<bound method test_stateful_metrics.<locals>.BinaryTruePositives.reset_states of <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "steps_done": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.737204, 0.0, 0], [0.95439315, 0.0, 0], [0.62142, 1.0, 0], [0.7427792, 0.0, 0], [0.7359721, 0.0, 0], [0.7152945, 0.0, 0], [0.62097484, 1.0, 1], [0.7047863, 0.0, 1], [0.76253295, 0.0, 1], [0.6841798, 1.0, 2]]",
                                    "variable_type": "list",
                                    "variable_shape": "10"
                                },
                                "batch_sizes": {
                                    "variable_value": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
                                    "variable_type": "list",
                                    "variable_shape": "10"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<list_iterator object at 0x11bbfdbd0>",
                                    "variable_type": "list_iterator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x11c0b3310>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11c0b3310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x11bcacad0>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11c0b3310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[0.41068953, 0.69346268]]), array([[1]]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[0.41068953, 0.69346268]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 2)"
                                },
                                "y": {
                                    "variable_value": "array([[1]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.6841798, 1.0, 2]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c026320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c0b14b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11c0b3310>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.7279536843299865, 0.3, 2.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c071320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11bcc1610>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<list_iterator object at 0x11bd9cb50>",
                                    "variable_type": "list_iterator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11bcc1610>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[2]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>",
                                    "variable_type": "BinaryTruePositives",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": "<bound method test_stateful_metrics.<locals>.BinaryTruePositives.reset_states of <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "steps_done": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.76078916, 0.0, 0], [0.7285929, 0.0, 0], [0.44694644, 1.0, 0], [0.65570134, 1.0, 1], [0.7367691, 0.0, 1], [0.9842877, 0.0, 1], [0.89553344, 0.0, 1], [0.9366024, 0.0, 1], [0.73337203, 0.0, 1], [0.6584171, 1.0, 2], [0.9555932, 0.0, 2], [0.68144983, 1.0, 3], [0.7551796, 0.0, 3], [0.8913995, 0.0, 3], [0.8086178, 0.0, 3], [0.6826495, 1.0, 4], [0.6556708, 1.0, 4], [0.8157403, 0.0, 4], [0.7524547, 0.0, 4], [0.55610603, 1.0, 4], [0.5396862, 1.0, 4], [0.59377706, 1.0, 4], [0.8414642, 0.0, 4], [0.6875652, 1.0, 5], [0.60624754, 1.0, 5], [0.60881937, 1.0, 6], [0.59248775, 1.0, 6], [0.7438197, 0.0, 6], [0.5875818, 1.0, 7], [0.77875113, 0.0, 7], [0.68846273, 1.0, 7], [0.96711457, 0.0, 7], [0.5267292, 1.0, 7], [0.67022043, 1.0, 8], [0.84887123, 0.0, 8], [0.63688666, 1.0, 8], [0.543574, 1.0, 9], [0.5906966, 1.0, 10], [0.69668335, 0.0, 10], [0.66268235, 1.0, 10], [0.8679018, 0.0, 10], [0.7320125, 0.0, 10], [0.60186285, 1.0, 11], [0.617785, 1.0, 11], [0.6430629, 1.0, 12], [0.9158144, 0.0, 12], [0.6947912, 0.0, 12], [0.8316878, 0.0, 12], [0.56861186, 1.0, 12], [0.83561563, 0.0, 12], [0.8450911, 0.0, 12], [0.90092534, 0.0, 12], [0.6103753, 1.0, 12], [0.69358957, 0.0, 12], [0.5203788, 1.0, 13], [0.7508765, 0.0, 13], [0.86640525, 0.0, 13], [0.6699468, 1.0, 14], [0.73193806, 0.0, 14], [0.655873, 1.0, 15], [0.77337855, 0.0, 15], [0.86918974, 0.0, 15], [0.7030279, 0.0, 15], [0.7153848, 0.0, 15], [0.8173619, 0.0, 15], [0.67027473, 1.0, 16], [0.56607693, 1.0, 16], [0.6092133, 1.0, 16], [0.63835424, 1.0, 17], [0.63959736, 1.0, 18], [0.7464323, 0.0, 18], [0.83264565, 0.0, 18], [0.875919, 0.0, 18], [0.8877138, 0.0, 18], [0.86138856, 0.0, 18], [0.5880321, 1.0, 18], [0.6775644, 1.0, 18], [0.86437273, 0.0, 18], [0.82904077, 0.0, 18], [0.72640365, 0.0, 18], [0.59447044, 1.0, 18], [0.8929194, 0.0, 18], [0.9057158, 0.0, 18], [0.92863697, 0.0, 18], [0.71452713, 0.0, 18], [0.5739937, 1.0, 18], [0.6504441, 1.0, 19], [0.82702136, 0.0, 19], [0.58794606, 1.0, 19], [0.62687504, 1.0, 20], [0.7086157, 0.0, 20], [0.84947705, 0.0, 20], [0.5765339, 1.0, 20], [0.6205424, 1.0, 21], [0.5900131, 1.0, 22], [0.70866257, 0.0, 22], [0.59892136, 1.0, 22], [0.7108855, 0.0, 22], [0.54158926, 1.0, 22], [0.60443836, 1.0, 22], [0.73268706, 0.0, 22], [0.7607465, 0.0, 22], [0.7267546, 0.0, 22], [0.52000886, 1.0, 22], [0.49190018, 1.0, 22], [0.897115, 0.0, 22], [0.45353973, 1.0, 22], [0.621147, 1.0, 22], [0.55023485, 1.0, 22], [0.532133, 1.0, 22], [0.77746785, 0.0, 22], [0.60434973, 1.0, 22], [0.7237197, 0.0, 22], [0.78824794, 0.0, 22], [0.50220376, 1.0, 22], [0.5904676, 1.0, 22], [0.6592286, 1.0, 23], [0.60475004, 1.0, 24], [0.5665556, 1.0, 24], [0.79513973, 0.0, 24], [0.7526328, 0.0, 24], [0.6038581, 1.0, 24], [0.53845114, 1.0, 24], [0.80350864, 0.0, 24], [0.5579648, 1.0, 24], [0.6979817, 0.0, 24], [0.85402834, 0.0, 24], [0.7754286, 0.0, 24], [0.8942798, 0.0, 24], [0.86035275, 0.0, 24], [0.8274703, 0.0, 24], [0.8733115, 0.0, 24], [0.6717887, 1.0, 24], [0.49893844, 1.0, 24], [0.5304397, 1.0, 24], [0.6267533, 1.0, 25], [0.7624053, 0.0, 25], [0.903632, 0.0, 25], [0.5105571, 1.0, 25], [0.7104198, 0.0, 25], [0.4964391, 1.0, 25], [0.5050974, 1.0, 25], [0.7512106, 0.0, 25], [0.6931162, 1.0, 25], [0.80684775, 0.0, 25], [0.58599913, 1.0, 25], [0.7332487, 0.0, 25], [0.4945415, 1.0, 25], [0.8164331, 0.0, 25], [0.79142964, 0.0, 25], [0.776369, 0.0, 25], [0.644989, 1.0, 25], [0.85049725, 0.0, 25], [0.83438575, 0.0, 25], [0.7373294, 0.0, 25], [0.90787876, 0.0, 25], [0.85216105, 0.0, 25], [0.7595918, 0.0, 25], [0.6256482, 1.0, 25], [0.54440767, 1.0, 26], [0.77310723, 0.0, 26], [0.76326305, 0.0, 26], [0.73738176, 0.0, 26], [0.6303959, 1.0, 26], [0.52990144, 1.0, 26], [0.77590495, 0.0, 26], [0.7094782, 0.0, 26], [0.6049632, 1.0, 27], [0.71154886, 0.0, 27], [0.5386972, 1.0, 27], [0.76036227, 0.0, 27], [0.70480597, 0.0, 27], [0.65749395, 1.0, 27], [0.5838482, 1.0, 28], [0.53778714, 1.0, 28], [0.54811716, 1.0, 29], [0.651935, 1.0, 29], [0.7984174, 0.0, 29], [0.7523842, 0.0, 29], [0.5949688, 1.0, 30], [0.54613733, 1.0, 30], [0.85209703, 0.0, 30], [0.8620689, 0.0, 30], [0.81885225, 0.0, 30], [0.7286367, 0.0, 30], [0.4902255, 1.0, 30], [0.884655, 0.0, 30], [0.6825039, 1.0, 31], [0.72899, 0.0, 31], [0.79247963, 0.0, 31], [0.8305507, 0.0, 31], [0.9498007, 0.0, 31], [0.7413717, 0.0, 31], [0.6528735, 1.0, 32], [0.64942265, 1.0, 32], [0.55185133, 1.0, 32], [0.906361, 0.0, 32], [1.0065076, 0.0, 32], [0.5149857, 1.0, 32], [0.8095939, 0.0, 32], [0.87571007, 0.0, 32], [0.64348704, 1.0, 32], [0.6725357, 1.0, 33], [0.8671675, 0.0, 33], [0.5528711, 1.0, 33], [0.7262012, 0.0, 33], [0.88443804, 0.0, 33], [0.6326027, 1.0, 33], [0.8373734, 0.0, 33], [0.8515805, 0.0, 33], [0.94125235, 0.0, 33], [0.60113597, 1.0, 33], [0.54589134, 1.0, 33], [0.5729393, 1.0, 33], [0.55027634, 1.0, 33], [0.84248245, 0.0, 33], [0.88178813, 0.0, 33], [0.61845994, 1.0, 33], [0.907796, 0.0, 33], [0.65443397, 1.0, 33], [0.735739, 0.0, 33], [0.93897474, 0.0, 33], [0.84808946, 0.0, 33], [0.48007593, 1.0, 33], [0.5417498, 1.0, 33], [0.8206205, 0.0, 33], [0.67489773, 1.0, 34], [0.53369564, 1.0, 34], [0.84431684, 0.0, 34], [0.62932914, 1.0, 34], [0.7937906, 0.0, 34], [0.5212219, 1.0, 34], [0.5932885, 1.0, 34], [0.86240923, 0.0, 34], [0.77809715, 0.0, 34], [0.48657152, 1.0, 34], [0.52297235, 1.0, 34], [0.6289777, 1.0, 34], [0.6527722, 1.0, 35], [0.6486945, 1.0, 36], [0.81156015, 0.0, 36], [0.97041905, 0.0, 36], [0.50719005, 1.0, 36], [0.5999952, 1.0, 37], [0.5479794, 1.0, 37], [0.6326798, 1.0, 37], [0.7640234, 0.0, 37], [0.9643288, 0.0, 37], [0.5640441, 1.0, 37], [0.5473669, 1.0, 37], [0.5380178, 1.0, 37], [0.75264776, 0.0, 37], [0.79413635, 0.0, 37], [0.7688105, 0.0, 37], [0.6575081, 1.0, 37], [0.812693, 0.0, 37], [0.63866746, 1.0, 37], [0.5093483, 1.0, 37], [0.8402214, 0.0, 37], [0.8668966, 0.0, 37], [0.8520292, 0.0, 37], [0.67046756, 1.0, 37], [0.9455874, 0.0, 37], [0.6819422, 1.0, 38], [0.7343601, 0.0, 38], [0.86706305, 0.0, 38], [0.7994075, 0.0, 38], [0.5351558, 1.0, 38], [0.5451222, 1.0, 38], [0.5943739, 1.0, 39], [0.85513073, 0.0, 39], [0.72168154, 0.0, 39], [0.6587801, 1.0, 39], [0.8290905, 0.0, 39], [0.75394195, 0.0, 39], [0.60090774, 1.0, 39], [0.6753708, 1.0, 39], [0.7849518, 0.0, 39], [0.6672485, 1.0, 39], [0.6608912, 1.0, 40], [0.88264775, 0.0, 40], [0.7333286, 0.0, 40], [0.76052564, 0.0, 40], [0.9371199, 0.0, 40], [0.5848235, 1.0, 41], [0.5921502, 1.0, 41], [0.4477818, 1.0, 41], [0.6758495, 1.0, 42], [0.50396246, 1.0, 42], [0.73733723, 0.0, 42], [0.59476024, 1.0, 42], [0.7048504, 0.0, 42], [0.6928571, 1.0, 42], [0.8248198, 0.0, 42], [0.7203417, 0.0, 42], [0.5181395, 1.0, 42], [0.5600499, 1.0, 43], [0.61698127, 1.0, 44], [0.58284545, 1.0, 45], [0.781413, 0.0, 45], [0.50163645, 1.0, 45], [0.8262826, 0.0, 45], [0.70581883, 0.0, 45], [0.57328707, 1.0, 45], [0.6371576, 1.0, 46], [0.7375477, 0.0, 46], [0.51844877, 1.0, 46], [0.92916965, 0.0, 46], [0.5922409, 1.0, 46], [0.77994704, 0.0, 46], [0.6734625, 1.0, 47], [0.68521583, 1.0, 48], [0.5371624, 1.0, 49], [0.9040183, 0.0, 49], [0.77264076, 0.0, 49], [0.87012815, 0.0, 49], [0.5147875, 1.0, 49], [0.7506968, 0.0, 49], [0.6077326, 1.0, 50], [0.5446094, 1.0, 50], [0.7194336, 0.0, 50], [0.54555964, 1.0, 51], [0.83465385, 0.0, 51], [0.6605316, 1.0, 52], [0.6716677, 1.0, 52], [0.9865719, 0.0, 52], [0.74651015, 0.0, 52], [0.7684478, 0.0, 52], [0.90263623, 0.0, 52], [0.81827915, 0.0, 52], [0.96137655, 0.0, 52], [0.78677076, 0.0, 52], [0.7256877, 0.0, 52], [0.7074354, 0.0, 52], [0.68836933, 1.0, 53], [0.5997124, 1.0, 53], [0.8602303, 0.0, 53], [0.64405966, 1.0, 53], [0.8500947, 0.0, 53], [0.8240111, 0.0, 53], [0.69748735, 0.0, 53], [0.6385426, 1.0, 54], [0.61173815, 1.0, 54], [0.80791783, 0.0, 54], [0.63483864, 1.0, 55], [0.70555615, 0.0, 55], [0.65010744, 1.0, 56], [0.74415666, 0.0, 56], [0.812653, 0.0, 56], [0.48050535, 1.0, 56], [0.79844195, 0.0, 56], [0.73247206, 0.0, 56], [0.62473565, 1.0, 56], [0.87081695, 0.0, 56], [0.5219489, 1.0, 56], [0.81102705, 0.0, 56], [0.46451032, 1.0, 56], [0.58683187, 1.0, 57], [0.6836538, 1.0, 57], [0.6438776, 1.0, 58], [0.62079686, 1.0, 58], [0.53051245, 1.0, 58], [0.57034725, 1.0, 59], [0.7724986, 0.0, 59], [0.58567786, 1.0, 59], [0.4624652, 1.0, 59], [0.80782217, 0.0, 59], [0.74305004, 0.0, 59], [0.8541069, 0.0, 59], [0.8067732, 0.0, 59], [0.5936273, 1.0, 59], [0.98405623, 0.0, 59], [0.6682849, 1.0, 60], [0.5612362, 1.0, 61], [0.7452542, 0.0, 61], [0.79403675, 0.0, 61], [0.5810648, 1.0, 61], [0.7408669, 0.0, 61], [0.5792017, 1.0, 61], [0.5895074, 1.0, 62], [0.88384545, 0.0, 62], [0.5517193, 1.0, 62], [0.6833961, 1.0, 63], [0.78406316, 0.0, 63], [0.7250725, 0.0, 63], [0.6122467, 1.0, 64], [0.71862173, 0.0, 64], [0.6234228, 1.0, 65], [0.7503713, 0.0, 65], [0.5577992, 1.0, 66], [0.77520734, 0.0, 66], [0.91858345, 0.0, 66], [0.6630427, 1.0, 67], [0.51080996, 1.0, 67], [0.7307401, 0.0, 67], [0.5047758, 1.0, 67], [0.66471434, 1.0, 68], [0.8050045, 0.0, 68], [0.5317247, 1.0, 68], [0.49877506, 1.0, 68], [0.71783835, 0.0, 68], [0.72812927, 0.0, 68], [0.83282876, 0.0, 68], [0.77663237, 0.0, 68], [1.006729, 0.0, 68], [0.9016775, 0.0, 68], [0.74638355, 0.0, 68], [0.63333833, 1.0, 69], [0.8603313, 0.0, 69], [0.7751806, 0.0, 69], [0.62285, 1.0, 70], [0.942587, 0.0, 70], [0.45398378, 1.0, 70], [0.5573068, 1.0, 71], [0.52324027, 1.0, 71], [0.6119508, 1.0, 71], [0.8864703, 0.0, 71], [0.8186333, 0.0, 71], [0.5213859, 1.0, 71], [0.8381488, 0.0, 71], [0.6720708, 1.0, 71], [0.8795852, 0.0, 71], [0.4833199, 1.0, 71], [0.83404964, 0.0, 71], [0.7032099, 0.0, 71], [0.9677603, 0.0, 71], [0.626702, 1.0, 71], [0.6854748, 1.0, 71], [0.74136454, 0.0, 71], [0.6440174, 1.0, 71], [0.94005126, 0.0, 71], [0.5982949, 1.0, 71], [0.6130105, 1.0, 72], [0.5774678, 1.0, 73], [0.7884991, 0.0, 73], [0.8029153, 0.0, 73], [0.6752325, 1.0, 75], [0.94194764, 0.0, 74], [0.6316079, 1.0, 75], [0.6079722, 1.0, 75], [0.8531853, 0.0, 75], [0.78229284, 0.0, 75], [0.7306696, 0.0, 75], [0.62979305, 1.0, 75], [0.7804545, 0.0, 75], [0.6059952, 1.0, 75], [0.6341681, 1.0, 75], [0.80506235, 0.0, 75], [0.89198554, 0.0, 75], [0.55672425, 1.0, 75], [0.49741232, 1.0, 75], [0.6005063, 1.0, 76], [0.5563136, 1.0, 76], [0.5249782, 1.0, 76], [0.84335715, 0.0, 76], [0.65795016, 1.0, 76], [0.70162034, 0.0, 76], [0.59588635, 1.0, 76], [0.531948, 1.0, 77], [0.7878102, 0.0, 77], [0.63430077, 1.0, 78], [0.5509732, 1.0, 78], [0.90752125, 0.0, 78], [0.9419869, 0.0, 78], [0.5916096, 1.0, 78], [0.63830674, 1.0, 79], [0.8954946, 0.0, 79], [0.86016166, 0.0, 79], [0.5544495, 1.0, 79], [0.6646545, 1.0, 79], [0.6470583, 1.0, 79], [0.58978456, 1.0, 79], [0.61540717, 1.0, 79], [0.7436443, 0.0, 79], [0.8692175, 0.0, 79], [0.73666465, 0.0, 79], [0.49143448, 1.0, 79], [0.8065442, 0.0, 79], [0.7830961, 0.0, 79], [0.53478366, 1.0, 79], [0.88646007, 0.0, 79], [0.85872746, 0.0, 79], [0.5477421, 1.0, 79], [0.7961004, 0.0, 79], [0.65432763, 1.0, 79], [0.7025412, 0.0, 79], [0.63691044, 1.0, 79], [0.7215151, 0.0, 79], [0.50413513, 1.0, 79], [0.7669767, 0.0, 79], [0.5962088, 1.0, 80], [0.5766446, 1.0, 81], [0.9029413, 0.0, 81], [0.6643902, 1.0, 82], [0.53566253, 1.0, 82], [0.73838264, 0.0, 82], [0.55966246, 1.0, 82], [0.5272168, 1.0, 83], [0.53868544, 1.0, 84], [0.77769846, 0.0, 84], [0.57580215, 1.0, 84], [0.6947797, 0.0, 84], [0.6622042, 1.0, 84], [0.75917053, 0.0, 84], [0.6697401, 1.0, 85], [0.6190005, 1.0, 86], [0.66582835, 1.0, 86], [0.5077929, 1.0, 86], [0.5594358, 1.0, 86], [0.6612085, 1.0, 87], [0.7748982, 0.0, 87], [0.8227171, 0.0, 87], [0.6258569, 1.0, 88], [0.5768267, 1.0, 89], [0.6232465, 1.0, 89], [0.7111685, 0.0, 89], [0.5592196, 1.0, 89], [0.6705252, 1.0, 90], [0.6374493, 1.0, 90], [0.7065582, 0.0, 90], [0.7447798, 0.0, 90], [0.7290656, 0.0, 90], [0.6229823, 1.0, 90], [0.9431803, 0.0, 90], [0.6667386, 1.0, 91], [0.49633154, 1.0, 91], [0.5770804, 1.0, 92], [0.6511041, 1.0, 93], [0.7924538, 0.0, 93], [0.50955296, 1.0, 93], [0.57140714, 1.0, 94], [0.59176064, 1.0, 95], [0.49214286, 1.0, 95], [0.87332654, 0.0, 95], [0.46286157, 1.0, 95], [0.6446398, 1.0, 96], [0.678385, 1.0, 96], [0.55003774, 1.0, 96], [0.48684746, 1.0, 96], [0.8192316, 0.0, 96], [0.93303335, 0.0, 96], [0.68314034, 1.0, 97], [0.610484, 1.0, 98], [0.77980286, 0.0, 98], [0.7435452, 0.0, 98], [0.7013983, 0.0, 98], [0.6873669, 1.0, 99], [0.7661042, 0.0, 99], [0.75131387, 0.0, 99], [0.7435644, 0.0, 99], [0.87475383, 0.0, 99], [0.8731512, 0.0, 99], [0.57934374, 1.0, 99], [0.6986467, 0.0, 99], [0.677063, 1.0, 100], [0.62650985, 1.0, 100], [0.5095349, 1.0, 100], [0.8559011, 0.0, 100], [0.7960454, 0.0, 100], [0.82682323, 0.0, 100], [0.66488487, 1.0, 100], [0.55884624, 1.0, 101], [0.80863804, 0.0, 101], [0.5729869, 1.0, 102], [0.74247026, 0.0, 102], [0.89024067, 0.0, 102], [0.7668038, 0.0, 102], [0.4433774, 1.0, 102], [0.55170417, 1.0, 102], [0.7622192, 0.0, 102], [0.4765857, 1.0, 102], [0.90461886, 0.0, 102], [0.856285, 0.0, 102], [0.6062807, 1.0, 102], [0.5961605, 1.0, 102], [0.8153612, 0.0, 102], [0.6973713, 0.0, 102], [0.75888205, 0.0, 102], [0.5094346, 1.0, 102], [0.8441233, 0.0, 102], [0.8806659, 0.0, 102], [0.74159914, 0.0, 102], [0.56744134, 1.0, 103], [0.81384486, 0.0, 103], [0.5814517, 1.0, 104], [0.59170216, 1.0, 104], [0.74207324, 0.0, 104], [0.84173864, 0.0, 104], [0.7177056, 0.0, 104], [0.6928182, 1.0, 104], [0.6044022, 1.0, 105], [0.59596324, 1.0, 106], [0.685266, 1.0, 107], [0.5930056, 1.0, 108], [0.86773574, 0.0, 108], [0.6712221, 1.0, 108], [0.74162906, 0.0, 108], [0.56495404, 1.0, 108], [0.53511554, 1.0, 108], [0.47962117, 1.0, 108], [0.6288405, 1.0, 108], [0.50618947, 1.0, 108], [0.5778642, 1.0, 108], [0.8122552, 0.0, 108], [0.566463, 1.0, 108], [0.7002699, 0.0, 108], [0.9205083, 0.0, 108], [0.920306, 0.0, 108], [0.8407054, 0.0, 108], [0.63915056, 1.0, 109], [0.5118008, 1.0, 109], [0.49924436, 1.0, 109], [0.85045826, 0.0, 109], [0.560078, 1.0, 110], [0.4739341, 1.0, 110], [0.49772826, 1.0, 110], [0.88506025, 0.0, 110], [0.82703626, 0.0, 110], [0.8398702, 0.0, 110], [0.6431934, 1.0, 110], [0.4821093, 1.0, 110], [0.859413, 0.0, 110], [0.7989346, 0.0, 110], [0.5098635, 1.0, 110], [0.60257417, 1.0, 110], [0.811552, 0.0, 110], [0.51545167, 1.0, 110], [0.6576468, 1.0, 110], [0.48637602, 1.0, 110], [0.6275065, 1.0, 111], [0.6172044, 1.0, 112], [0.73446625, 0.0, 112], [0.6442521, 1.0, 112], [0.73042756, 0.0, 112], [0.5517077, 1.0, 113], [0.97249687, 0.0, 113], [0.8414053, 0.0, 113], [0.9333335, 0.0, 113], [0.5811491, 1.0, 113], [0.8252902, 0.0, 113], [0.79541713, 0.0, 113], [0.5779751, 1.0, 113], [0.7723071, 0.0, 113], [0.8371778, 0.0, 113], [0.7237149, 0.0, 113], [0.7758398, 0.0, 113], [0.744525, 0.0, 113], [0.53346604, 1.0, 113], [0.8875554, 0.0, 113], [0.62596273, 1.0, 114], [0.7954011, 0.0, 114], [0.5979518, 1.0, 115], [0.8102645, 0.0, 115], [0.84427524, 0.0, 115], [0.5967149, 1.0, 115], [0.63290006, 1.0, 116], [0.50031984, 1.0, 116], [0.77264094, 0.0, 116], [0.93288803, 0.0, 116], [0.8553786, 0.0, 116], [0.61452836, 1.0, 116], [0.82193947, 0.0, 116], [0.69588834, 0.0, 116], [0.74403495, 0.0, 116], [1.0157483, 0.0, 116], [0.9190382, 0.0, 116], [0.96341157, 0.0, 116], [0.67993605, 1.0, 116], [0.53395516, 1.0, 116], [0.59295875, 1.0, 116], [0.7243921, 0.0, 116], [0.53976864, 1.0, 116], [0.6540206, 1.0, 117], [0.92485064, 0.0, 117], [0.8512087, 0.0, 117], [0.852645, 0.0, 117], [0.87295353, 0.0, 117], [0.88620615, 0.0, 117], [0.9494666, 0.0, 117], [0.57850945, 1.0, 118], [0.90819687, 0.0, 118], [0.79186213, 0.0, 118], [0.74884355, 0.0, 118], [0.72505224, 0.0, 118], [0.5299716, 1.0, 118], [0.74948895, 0.0, 118], [0.7675767, 0.0, 118], [0.74437344, 0.0, 118], [0.47655743, 1.0, 118], [0.83234394, 0.0, 118], [0.46196562, 1.0, 118], [0.84669435, 0.0, 118], [0.6148545, 1.0, 119], [0.63068676, 1.0, 120], [0.58672434, 1.0, 120], [0.5532736, 1.0, 120], [0.8076134, 0.0, 120], [0.8601856, 0.0, 120], [0.9246491, 0.0, 120], [0.7898018, 0.0, 120], [0.65376973, 1.0, 121], [0.68123806, 1.0, 122], [0.91278946, 0.0, 122], [0.6136065, 1.0, 122], [0.9523126, 0.0, 122], [0.61202717, 1.0, 123], [0.7953985, 0.0, 123], [0.5682293, 1.0, 123], [0.7317052, 0.0, 123], [0.6263462, 1.0, 124], [0.5774861, 1.0, 124], [0.7558921, 0.0, 124], [0.74652433, 0.0, 124], [0.83762956, 0.0, 124], [0.6603672, 1.0, 125], [0.94240844, 0.0, 125], [0.7517557, 0.0, 125], [0.60854197, 1.0, 126], [0.60737914, 1.0, 126], [0.7829463, 0.0, 126], [0.53828704, 1.0, 127], [0.813058, 0.0, 127], [0.64249194, 1.0, 127], [0.9503488, 0.0, 127], [0.5658874, 1.0, 127], [0.6533192, 1.0, 128], [0.7162651, 0.0, 128], [0.60600364, 1.0, 128], [0.59396493, 1.0, 128], [0.6804567, 1.0, 129], [0.8679563, 0.0, 129], [0.8560299, 0.0, 129], [0.89655244, 0.0, 129], [0.681893, 1.0, 130], [0.64847314, 1.0, 130], [0.7000799, 0.0, 130], [0.8515382, 0.0, 130], [0.88675344, 0.0, 130], [0.57743096, 1.0, 130], [0.7677289, 0.0, 130], [0.6761094, 1.0, 131], [0.66945076, 1.0, 131], [0.6769899, 1.0, 132], [0.8101409, 0.0, 132], [0.48282215, 1.0, 132], [0.8669044, 0.0, 132], [0.7769748, 0.0, 132], [0.6998432, 0.0, 132], [0.48447803, 1.0, 132], [0.8124962, 0.0, 132], [0.48396596, 1.0, 132], [0.54695517, 1.0, 132], [0.6309703, 1.0, 132], [0.5122165, 1.0, 132], [0.7561641, 0.0, 132], [0.7027636, 0.0, 132], [0.6823302, 1.0, 133], [0.7012182, 0.0, 133], [0.86900353, 0.0, 133], [0.7844212, 0.0, 133], [0.77005494, 0.0, 133], [0.6870288, 1.0, 133], [0.843376, 0.0, 133], [0.58009887, 1.0, 133], [0.6414861, 1.0, 133], [0.6941351, 0.0, 133], [0.83170617, 0.0, 133], [0.77086604, 0.0, 133], [0.8385675, 0.0, 133], [0.6693113, 1.0, 133], [0.7067502, 0.0, 133], [0.7627852, 0.0, 133], [0.53698206, 1.0, 133], [0.6110703, 1.0, 133], [0.886341, 0.0, 133], [0.5685061, 1.0, 133], [0.6809111, 1.0, 133], [0.73486125, 0.0, 133], [0.545112, 1.0, 134], [0.51936746, 1.0, 134], [0.8297601, 0.0, 134], [0.7699324, 0.0, 134], [0.54623294, 1.0, 134], [0.5608566, 1.0, 134], [0.82000935, 0.0, 134], [0.49790227, 1.0, 134], [0.70696, 0.0, 134], [0.8793858, 0.0, 134], [0.53508204, 1.0, 134], [0.6818467, 1.0, 135], [0.5760037, 1.0, 136], [0.69989836, 0.0, 136], [0.6259954, 1.0, 136], [0.6744782, 1.0, 136], [0.5793274, 1.0, 137], [0.59974045, 1.0, 138], [0.72262853, 0.0, 138], [0.5711251, 1.0, 138], [0.6184249, 1.0, 139], [0.6503744, 1.0, 139], [0.8601626, 0.0, 139], [0.9390983, 0.0, 139], [0.7803532, 0.0, 139], [0.7687589, 0.0, 139], [0.6553063, 1.0, 140], [0.6120382, 1.0, 140], [0.6413481, 1.0, 140], [0.67248666, 1.0, 141], [0.89300805, 0.0, 141], [0.58399624, 1.0, 141], [0.7174801, 0.0, 141], [0.82432145, 0.0, 141], [0.64902925, 1.0, 142], [0.5156199, 1.0, 142], [0.5691195, 1.0, 142], [0.7945537, 0.0, 142], [0.5225346, 1.0, 142], [0.8242029, 0.0, 142], [0.5359641, 1.0, 142], [0.9052818, 0.0, 142], [0.50642014, 1.0, 142], [0.6781011, 1.0, 143], [0.65786296, 1.0, 144], [0.8168883, 0.0, 144], [0.5519677, 1.0, 145], [0.82238877, 0.0, 145], [0.9439928, 0.0, 145], [0.6522585, 1.0, 146], [0.8657412, 0.0, 146], [0.83861905, 0.0, 146], [0.5236622, 1.0, 146], [0.6883874, 1.0, 147], [0.49093884, 1.0, 147], [0.5841179, 1.0, 147], [0.6112266, 1.0, 147], [0.72715956, 0.0, 147], [0.9211869, 0.0, 147], [0.78943086, 0.0, 147], [0.7904692, 0.0, 147], [0.7735536, 0.0, 147], [0.57211286, 1.0, 148], [0.6002706, 1.0, 148], [0.6098934, 1.0, 149], [0.8029563, 0.0, 149], [0.61576164, 1.0, 150], [0.62860984, 1.0, 150], [0.7481295, 0.0, 150], [0.6418859, 1.0, 151], [0.5673336, 1.0, 152], [0.6943572, 0.0, 152], [0.4771873, 1.0, 152], [0.52921903, 1.0, 152], [0.6441159, 1.0, 152], [0.9551908, 0.0, 152], [0.64565635, 1.0, 152], [0.56118166, 1.0, 152], [0.64195687, 1.0, 152], [0.7895424, 0.0, 152], [0.81893045, 0.0, 152], [0.64495105, 1.0, 153], [0.6428122, 1.0, 153], [0.4931824, 1.0, 153], [0.71308815, 0.0, 153], [0.6459745, 1.0, 154], [0.8434372, 0.0, 154], [0.88002324, 0.0, 154], [0.8624315, 0.0, 154], [0.84441805, 0.0, 154], [0.53340554, 1.0, 154], [0.7158638, 0.0, 154], [0.7298371, 0.0, 154], [0.691185, 1.0, 154], [0.90176415, 0.0, 154], [0.60347104, 1.0, 154], [0.5965217, 1.0, 155], [0.8769772, 0.0, 155], [0.80016017, 0.0, 155], [0.69442713, 0.0, 155], [0.5477449, 1.0, 155], [0.58842283, 1.0, 155], [0.7958627, 0.0, 155], [0.6174409, 1.0, 155], [0.6358819, 1.0, 156], [0.69109195, 1.0, 156], [0.5047158, 1.0, 156], [0.51468205, 1.0, 156], [0.6184113, 1.0, 156], [0.68852895, 1.0, 156], [0.5935652, 1.0, 157], [0.67928225, 1.0, 157], [0.6631272, 1.0, 157], [0.69219685, 1.0, 158], [0.88291335, 0.0, 158], [0.93297905, 0.0, 158], [0.69711065, 0.0, 158], [0.48657185, 1.0, 158], [0.7987933, 0.0, 158], [0.6415367, 1.0, 158], [0.6507313, 1.0, 159], [0.63604647, 1.0, 160], [0.88918763, 0.0, 160], [0.554896, 1.0, 160], [0.60178363, 1.0, 160], [0.7879132, 0.0, 160], [0.712176, 0.0, 160], [0.9209533, 0.0, 160], [0.7133709, 0.0, 160], [0.8148698, 0.0, 160], [0.6848224, 1.0, 161], [0.7792231, 0.0, 161], [0.4486309, 1.0, 161], [0.96260846, 0.0, 161], [0.74139136, 0.0, 161], [0.56974757, 1.0, 162], [0.8545125, 0.0, 162], [0.6952616, 0.0, 162], [0.82218355, 0.0, 162], [0.6600801, 1.0, 162], [0.8252294, 0.0, 162], [0.54434484, 1.0, 163], [0.61557, 1.0, 163], [0.6300291, 1.0, 163], [0.5773767, 1.0, 164], [0.94918597, 0.0, 164], [0.5161927, 1.0, 164], [0.499158, 1.0, 164], [0.5604101, 1.0, 165], [0.605681, 1.0, 166], [0.48959678, 1.0, 166], [0.4848499, 1.0, 166], [0.58725417, 1.0, 167], [0.66530395, 1.0, 168], [0.662611, 1.0, 168], [0.5933651, 1.0, 169], [0.57932687, 1.0, 170], [0.7754117, 0.0, 170], [0.7295158, 0.0, 170], [0.7857604, 0.0, 170], [0.57201594, 1.0, 171], [0.5886671, 1.0, 172], [0.7212688, 0.0, 172], [0.77890956, 0.0, 172], [0.7946998, 0.0, 172], [0.58418864, 1.0, 172], [0.76414233, 0.0, 172], [0.6975634, 0.0, 172], [0.85353994, 0.0, 172], [0.45414567, 1.0, 172], [0.60538423, 1.0, 173], [0.539475, 1.0, 173], [0.74809813, 0.0, 173], [0.6512143, 1.0, 174], [0.6799596, 1.0, 175], [0.57637036, 1.0, 175], [0.525978, 1.0, 175], [0.83104646, 0.0, 175], [1.0261607, 0.0, 175], [0.8011403, 0.0, 175], [0.86602414, 0.0, 175], [0.79322255, 0.0, 175], [0.79997325, 0.0, 175], [0.62585574, 1.0, 176], [0.70569414, 0.0, 176], [0.6339267, 1.0, 177], [0.71900946, 0.0, 177], [0.7292426, 0.0, 177], [0.6122509, 1.0, 178], [1.0040036, 0.0, 178], [0.48216063, 1.0, 178], [0.7986921, 0.0, 178], [0.8736883, 0.0, 178], [0.82054377, 0.0, 178], [0.674915, 1.0, 178], [0.823341, 0.0, 178], [0.8455869, 0.0, 178], [0.9140301, 0.0, 178], [0.6384532, 1.0, 179], [0.7609434, 0.0, 179], [0.8160658, 0.0, 179], [0.72898746, 0.0, 179], [0.53871715, 1.0, 180], [0.944406, 0.0, 180], [0.61696273, 1.0, 180], [0.58579797, 1.0, 180], [0.6071484, 1.0, 180], [0.81524396, 0.0, 180], [0.76589066, 0.0, 180], [0.747613, 0.0, 180], [0.69278926, 1.0, 180], [0.7936169, 0.0, 180], [0.51437014, 1.0, 180], [0.59897417, 1.0, 180], [0.6898883, 1.0, 181], [0.69257164, 1.0, 182], [0.66870546, 1.0, 182], [0.79181033, 0.0, 182], [0.76337314, 0.0, 182], [0.70164347, 0.0, 182], [0.78113854, 0.0, 182], [0.5158209, 1.0, 182]]",
                                    "variable_type": "list",
                                    "variable_shape": "1000"
                                },
                                "batch_sizes": {
                                    "variable_value": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
                                    "variable_type": "list",
                                    "variable_shape": "1000"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<list_iterator object at 0x11bd9cb50>",
                                    "variable_type": "list_iterator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "1000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x11c0b8790>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11c0b8790>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x11bcacb50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11c0b8790>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[0.63715502, 0.08571966]]), array([[0]]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[0.63715502, 0.08571966]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 2)"
                                },
                                "y": {
                                    "variable_value": "array([[0]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.5158209, 1.0, 182]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c0b4780>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c071410>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11c0b8790>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.7004788903295994, 0.504, 182.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c03eeb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11bcc1610>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "steps_done": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<list_iterator object at 0x11bd0e850>",
                                    "variable_type": "list_iterator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "y": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sample_weight": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "batch_sizes.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "averages.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self._make_test_function": {
                                    "variable_value": "<bound method Model._make_test_function of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<keras.engine.training.Model object at 0x11bcc1610>",
                                    "variable_type": "Model",
                                    "variable_shape": null
                                },
                                "stateful_metric_indices": {
                                    "variable_value": "[2]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>",
                                    "variable_type": "BinaryTruePositives",
                                    "variable_shape": null
                                },
                                "self.stateful_metric_functions": {
                                    "variable_value": "[<metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "m.reset_states": {
                                    "variable_value": "<bound method test_stateful_metrics.<locals>.BinaryTruePositives.reset_states of <metrics_test.test_stateful_metrics.<locals>.BinaryTruePositives object at 0x10a6a4cd0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "name": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.metrics_names": {
                                    "variable_value": "['loss', 'acc', 'true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.stateful_metric_names": {
                                    "variable_value": "['true_positives']",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "steps_done": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "wait_time": {
                                    "variable_value": "0.01",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "outs_per_batch": {
                                    "variable_value": "[[0.737204, 0.0, 0], [0.95439315, 0.0, 0], [0.62142, 1.0, 0], [0.7427792, 0.0, 0], [0.7359721, 0.0, 0], [0.7152945, 0.0, 0], [0.62097484, 1.0, 1], [0.7047863, 0.0, 1], [0.76253295, 0.0, 1], [0.6841798, 1.0, 2]]",
                                    "variable_type": "list",
                                    "variable_shape": "10"
                                },
                                "batch_sizes": {
                                    "variable_value": "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]",
                                    "variable_type": "list",
                                    "variable_shape": "10"
                                },
                                "is_sequence": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "generator": {
                                    "variable_value": "<list_iterator object at 0x11bd0e850>",
                                    "variable_type": "list_iterator",
                                    "variable_shape": null
                                },
                                "Sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "use_multiprocessing": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "workers": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "steps": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "enqueuer": {
                                    "variable_value": "<keras.utils.data_utils.GeneratorEnqueuer object at 0x11bcc1710>",
                                    "variable_type": "GeneratorEnqueuer",
                                    "variable_shape": null
                                },
                                "OrderedEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "GeneratorEnqueuer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.start": {
                                    "variable_value": "<bound method GeneratorEnqueuer.start of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11bcc1710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "max_queue_size": {
                                    "variable_value": "10",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "output_generator": {
                                    "variable_value": "<generator object GeneratorEnqueuer.get at 0x11bf47d50>",
                                    "variable_type": "generator",
                                    "variable_shape": null
                                },
                                "enqueuer.get": {
                                    "variable_value": "<bound method GeneratorEnqueuer.get of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11bcc1710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "verbose": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Progbar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "generator_output": {
                                    "variable_value": "(array([[0.41068953, 0.69346268]]), array([[1]]))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "x": {
                                    "variable_value": "array([[0.41068953, 0.69346268]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 2)"
                                },
                                "y": {
                                    "variable_value": "array([[1]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "(1, 1)"
                                },
                                "sample_weight": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "outs": {
                                    "variable_value": "[0.6841798, 1.0, 2]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "self.test_on_batch": {
                                    "variable_value": "<bound method Model.test_on_batch of <keras.engine.training.Model object at 0x11bcc1610>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "outs_per_batch.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c0b4730>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "batch_size": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "shape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.values": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "batch_sizes.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c05c820>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "progbar.update": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "enqueuer.stop": {
                                    "variable_value": "<bound method GeneratorEnqueuer.stop of <keras.utils.data_utils.GeneratorEnqueuer object at 0x11bcc1710>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "averages": {
                                    "variable_value": "[0.7279536843299865, 0.3, 2.0]",
                                    "variable_type": "list",
                                    "variable_shape": "3"
                                },
                                "averages.append": {
                                    "variable_value": "<built-in method append of list object at 0x11c0ef230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "np.average": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "out": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces.legacy_generator_methods_support": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "interfaces": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _standardize_input_data(data, names, shapes=None,\n                            check_batch_axis=True,\n                            exception_prefix=''):\n    \"\"\"Normalizes inputs and targets provided by users.\n\n    Users may pass data as a list of arrays, dictionary of arrays,\n    or as a single array. We normalize this to an ordered list of\n    arrays (same order as `names`), while checking that the provided\n    arrays have shapes that match the network's expectations.\n\n    # Arguments\n        data: User-provided input data (polymorphic).\n        names: List of expected array names.\n        shapes: Optional list of expected array shapes.\n        check_batch_axis: Boolean; whether to check that\n            the batch axis of the arrays matches the expected\n            value found in `shapes`.\n        exception_prefix: String prefix used for exception formatting.\n\n    # Returns\n        List of standardized input arrays (one array per model input).\n\n    # Raises\n        ValueError: in case of improperly formatted user-provided data.\n    \"\"\"\n    if not names:\n        if data is not None and hasattr(data, '__len__') and len(data):\n            raise ValueError('Error when checking model ' +\n                             exception_prefix + ': '\n                             'expected no data, but got:', data)\n        return []\n    if data is None:\n        return [None for _ in range(len(names))]\n\n    if isinstance(data, dict):\n        try:\n            data = [data[x].values if data[x].__class__.__name__ == 'DataFrame' else data[x] for x in names]\n        except KeyError as e:\n            raise ValueError(\n                'No data provided for \"' + e.args[0] + '\". Need data '\n                'for each key in: ' + str(names))\n    elif isinstance(data, list):\n        if len(names) == 1 and data and isinstance(data[0], (float, int)):\n            data = [np.asarray(data)]\n        else:\n            data = [x.values if x.__class__.__name__ == 'DataFrame' else x for x in data]\n    else:\n        data = data.values if data.__class__.__name__ == 'DataFrame' else data\n        data = [data]\n    data = [np.expand_dims(x, 1) if x is not None and x.ndim == 1 else x for x in data]\n\n    if len(data) != len(names):\n        if data and hasattr(data[0], 'shape'):\n            raise ValueError(\n                'Error when checking model ' + exception_prefix +\n                ': the list of Numpy arrays that you are passing to '\n                'your model is not the size the model expected. '\n                'Expected to see ' + str(len(names)) + ' array(s), '\n                'but instead got the following list of ' +\n                str(len(data)) + ' arrays: ' + str(data)[:200] + '...')\n        elif len(names) > 1:\n            raise ValueError(\n                'Error when checking model ' + exception_prefix +\n                ': you are passing a list as input to your model, '\n                'but the model expects a list of ' + str(len(names)) +\n                ' Numpy arrays instead. The list you passed was: ' +\n                str(data)[:200])\n        elif len(data) == 1 and not hasattr(data[0], 'shape'):\n            raise TypeError(\n                'Error when checking model ' + exception_prefix +\n                ': data should be a Numpy array, or list/dict of '\n                'Numpy arrays. Found: ' + str(data)[:200] + '...')\n        elif len(names) == 1:\n            data = [np.asarray(data)]\n\n    # Check shapes compatibility.\n    if shapes:\n        for i in range(len(names)):\n            if shapes[i] is not None:\n                data_shape = data[i].shape\n                shape = shapes[i]\n                if data[i].ndim != len(shape):\n                    raise ValueError(\n                        'Error when checking ' + exception_prefix +\n                        ': expected ' + names[i] + ' to have ' +\n                        str(len(shape)) + ' dimensions, but got array '\n                        'with shape ' + str(data_shape))\n                if not check_batch_axis:\n                    data_shape = data_shape[1:]\n                    shape = shape[1:]\n                for dim, ref_dim in zip(data_shape, shape):\n                    if ref_dim != dim and ref_dim:\n                        raise ValueError(\n                            'Error when checking ' + exception_prefix +\n                            ': expected ' + names[i] + ' to have shape ' +\n                            str(shape) + ' but got array with shape ' +\n                            str(data_shape))\n    return data",
                "def _standardize_sample_or_class_weights(x_weight, output_names, weight_type):\n    \"\"\"Maps `sample_weight` or `class_weight` to model outputs.\n\n    # Arguments\n        x_weight: User-provided `sample_weight` or `class_weight` argument.\n        output_names: List of output names (strings) in the model.\n        weight_type: A string used purely for exception printing.\n\n    # Returns\n        A list of `sample_weight` or `class_weight` where there are exactly\n            one element per model output.\n\n    # Raises\n        ValueError: In case of invalid user-provided argument.\n    \"\"\"\n    if x_weight is None or len(x_weight) == 0:\n        return [None for _ in output_names]\n    if len(output_names) == 1:\n        if isinstance(x_weight, list) and len(x_weight) == 1:\n            return x_weight\n        if isinstance(x_weight, dict) and output_names[0] in x_weight:\n            return [x_weight[output_names[0]]]\n        else:\n            return [x_weight]\n    if isinstance(x_weight, list):\n        if len(x_weight) != len(output_names):\n            raise ValueError('Provided `' + weight_type + '` was a list of ' +\n                             str(len(x_weight)) +\n                             ' elements, but the model has ' +\n                             str(len(output_names)) + ' outputs. '\n                             'You should provide one `' + weight_type + '`'\n                             'array per model output.')\n        return x_weight\n    if isinstance(x_weight, dict):\n        x_weights = []\n        for name in output_names:\n            x_weights.append(x_weight.get(name))\n        return x_weights\n    else:\n        raise TypeError('The model has multiple outputs, so `' +\n                        weight_type + '` '\n                        'should be either a list or a dict. '\n                        'Provided `' + weight_type +\n                        '` type not understood: ' +\n                        str(x_weight))",
                "def _standardize_class_weights(class_weight, output_names):\n    return _standardize_sample_or_class_weights(class_weight,\n                                                output_names,\n                                                'class_weight')",
                "def _standardize_sample_weights(sample_weight, output_names):\n    return _standardize_sample_or_class_weights(sample_weight,\n                                                output_names,\n                                                'sample_weight')",
                "def _check_array_lengths(inputs, targets, weights=None):\n    \"\"\"Checks if batch axes are the same for numpy arrays.\n\n    # Arguments\n        inputs: list of Numpy arrays of inputs.\n        targets: list of Numpy arrays of targets.\n        weights: list of Numpy arrays of sample weights.\n\n    # Raises\n        ValueError: in case of incorrectly formatted data.\n    \"\"\"\n    def set_of_lengths(x):\n        # return a set with the variation between\n        # different shapes, with None => 0\n        if x is None:\n            return {0}\n        else:\n            return set([0 if y is None else y.shape[0] for y in x])\n\n    set_x = set_of_lengths(inputs)\n    set_y = set_of_lengths(targets)\n    set_w = set_of_lengths(weights)\n    if len(set_x) > 1:\n        raise ValueError('All input arrays (x) should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([x.shape for x in inputs]))\n    if len(set_y) > 1:\n        raise ValueError('All target arrays (y) should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([y.shape for y in targets]))\n    if set_x and set_y and list(set_x)[0] != list(set_y)[0]:\n        raise ValueError('Input arrays should have '\n                         'the same number of samples as target arrays. '\n                         'Found ' + str(list(set_x)[0]) + ' input samples '\n                         'and ' + str(list(set_y)[0]) + ' target samples.')\n    if len(set_w) > 1:\n        raise ValueError('All sample_weight arrays should have '\n                         'the same number of samples. Got array shapes: ' +\n                         str([w.shape for w in weights]))\n    if set_y and set_w and list(set_y)[0] != list(set_w)[0]:\n        raise ValueError('Sample_weight arrays should have '\n                         'the same number of samples as target arrays. Got ' +\n                         str(list(set_y)[0]) + ' input samples and ' +\n                         str(list(set_w)[0]) + ' target samples.')",
                "def _check_loss_and_target_compatibility(targets, loss_fns, output_shapes):\n    \"\"\"Does validation on the compatibility of targets and loss functions.\n\n    This helps prevent users from using loss functions incorrectly.\n\n    # Arguments\n        targets: list of Numpy arrays of targets.\n        loss_fns: list of loss functions.\n        output_shapes: list of shapes of model outputs.\n\n    # Raises\n        ValueError: if a loss function or target array\n            is incompatible with an output.\n    \"\"\"\n    key_losses = {losses.mean_squared_error,\n                  losses.binary_crossentropy,\n                  losses.categorical_crossentropy}\n    for y, loss, shape in zip(targets, loss_fns, output_shapes):\n        if y is None or loss is None:\n            continue\n        if loss is losses.categorical_crossentropy:\n            if y.shape[-1] == 1:\n                raise ValueError(\n                    'You are passing a target array of shape ' + str(y.shape) +\n                    ' while using as loss `categorical_crossentropy`. '\n                    '`categorical_crossentropy` expects '\n                    'targets to be binary matrices (1s and 0s) '\n                    'of shape (samples, classes). '\n                    'If your targets are integer classes, '\n                    'you can convert them to the expected format via:\\n'\n                    '```\\n'\n                    'from keras.utils import to_categorical\\n'\n                    'y_binary = to_categorical(y_int)\\n'\n                    '```\\n'\n                    '\\n'\n                    'Alternatively, you can use the loss function '\n                    '`sparse_categorical_crossentropy` instead, '\n                    'which does expect integer targets.')\n        if loss in key_losses:\n            for target_dim, out_dim in zip(y.shape[1:], shape[1:]):\n                if out_dim is not None and target_dim != out_dim:\n                    raise ValueError(\n                        'A target array with shape ' + str(y.shape) +\n                        ' was passed for an output of shape ' + str(shape) +\n                        ' while using as loss `' + loss.__name__ + '`. '\n                        'This loss expects '\n                        'targets to have the same shape '\n                        'as the output.')",
                "def _collect_metrics(metrics, output_names):\n    \"\"\"Maps metric functions to model outputs.\n\n    # Arguments\n        metrics: a list or dict of metric functions.\n        output_names: a list of the names (strings) of model outputs.\n\n    # Returns\n        A list (one entry per model output) of lists of metric functions.\n        For instance, if the model has 2 outputs, and for the first output\n        we want to compute \"binary_accuracy\" and \"binary_crossentropy\",\n        and just \"binary_accuracy\" for the second output,\n        the list would look like:\n            `[[binary_accuracy, binary_crossentropy], [binary_accuracy]]`\n\n    # Raises\n        TypeError: if an incorrect type is passed for the `metrics` argument.\n    \"\"\"\n    if not metrics:\n        return [[] for _ in output_names]\n    if isinstance(metrics, list):\n        # we then apply all metrics to all outputs.\n        return [copy.copy(metrics) for _ in output_names]\n    elif isinstance(metrics, dict):\n        nested_metrics = []\n        for name in output_names:\n            output_metrics = metrics.get(name, [])\n            if not isinstance(output_metrics, list):\n                output_metrics = [output_metrics]\n            nested_metrics.append(output_metrics)\n        return nested_metrics\n    else:\n        raise TypeError('Type of `metrics` argument not understood. '\n                        'Expected a list or dictionary, found: ' +\n                        str(metrics))",
                "def _batch_shuffle(index_array, batch_size):\n    \"\"\"Shuffles an array in a batch-wise fashion.\n\n    Useful for shuffling HDF5 arrays\n    (where one cannot access arbitrary indices).\n\n    # Arguments\n        index_array: array of indices to be shuffled.\n        batch_size: integer.\n\n    # Returns\n        The `index_array` array, shuffled in a batch-wise fashion.\n    \"\"\"\n    batch_count = int(len(index_array) / batch_size)\n    # to reshape we need to be cleanly divisible by batch size\n    # we stash extra items and reappend them after shuffling\n    last_batch = index_array[batch_count * batch_size:]\n    index_array = index_array[:batch_count * batch_size]\n    index_array = index_array.reshape((batch_count, batch_size))\n    np.random.shuffle(index_array)\n    index_array = index_array.flatten()\n    return np.append(index_array, last_batch)",
                "def _make_batches(size, batch_size):\n    \"\"\"Returns a list of batch indices (tuples of indices).\n\n    # Arguments\n        size: Integer, total size of the data to slice into batches.\n        batch_size: Integer, batch size.\n\n    # Returns\n        A list of tuples of array indices.\n    \"\"\"\n    num_batches = (size + batch_size - 1) // batch_size  # round up\n    return [(i * batch_size, min(size, (i + 1) * batch_size))\n            for i in range(num_batches)]",
                "def _slice_arrays(arrays, start=None, stop=None):\n    \"\"\"Slice an array or list of arrays.\n\n    This takes an array-like, or a list of\n    array-likes, and outputs:\n        - arrays[start:stop] if `arrays` is an array-like\n        - [x[start:stop] for x in arrays] if `arrays` is a list\n\n    Can also work on list/array of indices: `_slice_arrays(x, indices)`\n\n    # Arguments\n        arrays: Single array or list of arrays.\n        start: can be an integer index (start index)\n            or a list/array of indices\n        stop: integer (stop index); should be None if\n            `start` was a list.\n\n    # Returns\n        A slice of the array(s).\n    \"\"\"\n    if arrays is None:\n        return [None]\n    elif isinstance(arrays, list):\n        if hasattr(start, '__len__'):\n            # hdf5 datasets only support list objects as indices\n            if hasattr(start, 'shape'):\n                start = start.tolist()\n            return [None if x is None else x[start] for x in arrays]\n        else:\n            return [None if x is None else x[start:stop] for x in arrays]\n    else:\n        if hasattr(start, '__len__'):\n            if hasattr(start, 'shape'):\n                start = start.tolist()\n            return arrays[start]\n        elif hasattr(start, '__getitem__'):\n            return arrays[start:stop]\n        else:\n            return [None]",
                "def _weighted_masked_objective(fn):\n    \"\"\"Adds support for masking and sample-weighting to an objective function.\n\n    It transforms an objective function `fn(y_true, y_pred)`\n    into a sample-weighted, cost-masked objective function\n    `fn(y_true, y_pred, weights, mask)`.\n\n    # Arguments\n        fn: The objective function to wrap,\n            with signature `fn(y_true, y_pred)`.\n\n    # Returns\n        A function with signature `fn(y_true, y_pred, weights, mask)`.\n    \"\"\"\n    if fn is None:\n        return None\n\n    def weighted(y_true, y_pred, weights, mask=None):\n        \"\"\"Wrapper function.\n\n        # Arguments\n            y_true: `y_true` argument of `fn`.\n            y_pred: `y_pred` argument of `fn`.\n            weights: Weights tensor.\n            mask: Mask tensor.\n\n        # Returns\n            Scalar tensor.\n        \"\"\"\n        # score_array has ndim >= 2\n        score_array = fn(y_true, y_pred)\n        if mask is not None:\n            # Cast the mask to floatX to avoid float64 upcasting in Theano\n            mask = K.cast(mask, K.floatx())\n            # mask should have the same shape as score_array\n            score_array *= mask\n            #  the loss per batch should be proportional\n            #  to the number of unmasked samples.\n            score_array /= K.mean(mask)\n\n        # apply sample weighting\n        if weights is not None:\n            # reduce score_array to same ndim as weight array\n            ndim = K.ndim(score_array)\n            weight_ndim = K.ndim(weights)\n            score_array = K.mean(score_array, axis=list(range(weight_ndim, ndim)))\n            score_array *= weights\n            score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))\n        return K.mean(score_array)\n    return weighted",
                "def _standardize_weights(y, sample_weight=None, class_weight=None,\n                         sample_weight_mode=None):\n    \"\"\"Performs sample weight validation and standardization.\n\n    Everything gets normalized to a single sample-wise (or timestep-wise)\n    weight array.\n\n    # Arguments\n        y: Numpy array of model targets to be weighted.\n        sample_weight: User-provided `sample_weight` argument.\n        class_weight: User-provided `class_weight` argument.\n        sample_weight_mode: One of `None` or `\"temporal\"`.\n            `\"temporal\"` indicated that we expect 2D weight data\n            that will be applied to the last 2 dimensions of\n            the targets (i.e. we are weighting timesteps, not samples).\n\n    # Returns\n        A numpy array of target weights, one entry per sample to weight.\n\n    # Raises\n        ValueError: In case of invalid user-provided arguments.\n    \"\"\"\n    if sample_weight_mode is not None:\n        if sample_weight_mode != 'temporal':\n            raise ValueError('\"sample_weight_mode '\n                             'should be None or \"temporal\". '\n                             'Found: ' + str(sample_weight_mode))\n        if len(y.shape) < 3:\n            raise ValueError('Found a sample_weight array for '\n                             'an input with shape ' +\n                             str(y.shape) + '. '\n                             'Timestep-wise sample weighting (use of '\n                             'sample_weight_mode=\"temporal\") is restricted to '\n                             'outputs that are at least 3D, i.e. that have '\n                             'a time dimension.')\n        if sample_weight is not None and len(sample_weight.shape) != 2:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + '. '\n                             'In order to use timestep-wise sample weighting, '\n                             'you should pass a 2D sample_weight array.')\n    else:\n        if sample_weight is not None and len(sample_weight.shape) != 1:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + '. '\n                             'In order to use timestep-wise sample weights, '\n                             'you should specify '\n                             'sample_weight_mode=\"temporal\" '\n                             'in compile(). If you just mean to use '\n                             'sample-wise weights, make sure your '\n                             'sample_weight array is 1D.')\n\n    if sample_weight is not None:\n        if len(sample_weight.shape) > len(y.shape):\n            raise ValueError('Found a sample_weight with shape' +\n                             str(sample_weight.shape) + '.'\n                             'Expected sample_weight with rank '\n                             'less than or equal to ' + str(len(y.shape)))\n\n        if y.shape[:sample_weight.ndim] != sample_weight.shape:\n            raise ValueError('Found a sample_weight array with shape ' +\n                             str(sample_weight.shape) + ' for an input with shape ' +\n                             str(y.shape) + '. '\n                             'sample_weight cannot be broadcast.')\n        return sample_weight\n    elif isinstance(class_weight, dict):\n        if len(y.shape) > 2:\n            raise ValueError('`class_weight` not supported for '\n                             '3+ dimensional targets.')\n        if y.shape[1] > 1:\n            y_classes = np.argmax(y, axis=1)\n        elif y.shape[1] == 1:\n            y_classes = np.reshape(y, y.shape[0])\n        else:\n            y_classes = y\n\n        weights = np.asarray([class_weight[cls] for cls in y_classes\n                              if cls in class_weight])\n\n        if len(weights) != len(y_classes):\n            # subtract the sets to pick all missing classes\n            existing_classes = set(y_classes)\n            existing_class_weight = set(class_weight.keys())\n            raise ValueError('`class_weight` must contain all classes in the data.'\n                             ' The classes %s exist in the data but not in '\n                             '`class_weight`.'\n                             % (existing_classes - existing_class_weight))\n        return weights\n    else:\n        if sample_weight_mode is None:\n            return np.ones((y.shape[0],), dtype=K.floatx())\n        else:\n            return np.ones((y.shape[0], y.shape[1]), dtype=K.floatx())",
                "def set_of_lengths(x):\n    # return a set with the variation between\n    # different shapes, with None => 0\n    if x is None:\n        return {0}\n    else:\n        return set([0 if y is None else y.shape[0] for y in x])",
                "def weighted(y_true, y_pred, weights, mask=None):\n    \"\"\"Wrapper function.\n\n    # Arguments\n        y_true: `y_true` argument of `fn`.\n        y_pred: `y_pred` argument of `fn`.\n        weights: Weights tensor.\n        mask: Mask tensor.\n\n    # Returns\n        Scalar tensor.\n    \"\"\"\n    # score_array has ndim >= 2\n    score_array = fn(y_true, y_pred)\n    if mask is not None:\n        # Cast the mask to floatX to avoid float64 upcasting in Theano\n        mask = K.cast(mask, K.floatx())\n        # mask should have the same shape as score_array\n        score_array *= mask\n        #  the loss per batch should be proportional\n        #  to the number of unmasked samples.\n        score_array /= K.mean(mask)\n\n    # apply sample weighting\n    if weights is not None:\n        # reduce score_array to same ndim as weight array\n        ndim = K.ndim(score_array)\n        weight_ndim = K.ndim(weights)\n        score_array = K.mean(score_array, axis=list(range(weight_ndim, ndim)))\n        score_array *= weights\n        score_array /= K.mean(K.cast(K.not_equal(weights, 0), K.floatx()))\n    return K.mean(score_array)",
                "def compile(self, optimizer, loss=None, metrics=None, loss_weights=None,\n            sample_weight_mode=None, weighted_metrics=None,\n            target_tensors=None, **kwargs):\n    \"\"\"Configures the model for training.\n\n    # Arguments\n        optimizer: String (name of optimizer) or optimizer instance.\n            See [optimizers](/optimizers).\n        loss: String (name of objective function) or objective function.\n            See [losses](/losses).\n            If the model has multiple outputs, you can use a different loss\n            on each output by passing a dictionary or a list of losses.\n            The loss value that will be minimized by the model\n            will then be the sum of all individual losses.\n        metrics: List of metrics to be evaluated by the model\n            during training and testing.\n            Typically you will use `metrics=['accuracy']`.\n            To specify different metrics for different outputs of a\n            multi-output model, you could also pass a dictionary,\n            such as `metrics={'output_a': 'accuracy'}`.\n        loss_weights: Optional list or dictionary specifying scalar\n            coefficients (Python floats) to weight the loss contributions\n            of different model outputs.\n            The loss value that will be minimized by the model\n            will then be the *weighted sum* of all individual losses,\n            weighted by the `loss_weights` coefficients.\n            If a list, it is expected to have a 1:1 mapping\n            to the model's outputs. If a tensor, it is expected to map\n            output names (strings) to scalar coefficients.\n        sample_weight_mode: If you need to do timestep-wise\n            sample weighting (2D weights), set this to `\"temporal\"`.\n            `None` defaults to sample-wise weights (1D).\n            If the model has multiple outputs, you can use a different\n            `sample_weight_mode` on each output by passing a\n            dictionary or a list of modes.\n        weighted_metrics: List of metrics to be evaluated and weighted\n            by sample_weight or class_weight during training and testing.\n        target_tensors: By default, Keras will create placeholders for the\n            model's target, which will be fed with the target data during\n            training. If instead you would like to use your own\n            target tensors (in turn, Keras will not expect external\n            Numpy data for these targets at training time), you\n            can specify them via the `target_tensors` argument. It can be\n            a single tensor (for a single-output model), a list of tensors,\n            or a dict mapping output names to target tensors.\n        **kwargs: When using the Theano/CNTK backends, these arguments\n            are passed into `K.function`.\n            When using the TensorFlow backend,\n            these arguments are passed into `tf.Session.run`.\n\n    # Raises\n        ValueError: In case of invalid arguments for\n            `optimizer`, `loss`, `metrics` or `sample_weight_mode`.\n    \"\"\"\n    loss = loss or {}\n    self.optimizer = optimizers.get(optimizer)\n    self.loss = loss\n    self.loss_weights = loss_weights\n    self.sample_weight_mode = sample_weight_mode\n\n    # Prepare loss functions.\n    if isinstance(loss, dict):\n        for name in loss:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss '\n                                 'dictionary: \"' + name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        loss_functions = []\n        for name in self.output_names:\n            if name not in loss:\n                warnings.warn('Output \"' + name +\n                              '\" missing from loss dictionary. '\n                              'We assume this was done on purpose, '\n                              'and we will not be expecting '\n                              'any data to be passed to \"' + name +\n                              '\" during training.', stacklevel=2)\n            loss_functions.append(losses.get(loss.get(name)))\n    elif isinstance(loss, list):\n        if len(loss) != len(self.outputs):\n            raise ValueError('When passing a list as loss, '\n                             'it should have one entry per model outputs. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed loss=' +\n                             str(loss))\n        loss_functions = [losses.get(l) for l in loss]\n    else:\n        loss_function = losses.get(loss)\n        loss_functions = [loss_function for _ in range(len(self.outputs))]\n    self.loss_functions = loss_functions\n    weighted_losses = [_weighted_masked_objective(fn) for fn in loss_functions]\n    skip_target_indices = []\n    skip_target_weighing_indices = []\n    self._feed_outputs = []\n    self._feed_output_names = []\n    self._feed_output_shapes = []\n    self._feed_loss_fns = []\n    for i in range(len(weighted_losses)):\n        if weighted_losses[i] is None:\n            skip_target_indices.append(i)\n            skip_target_weighing_indices.append(i)\n\n    # Prepare output masks.\n    masks = self.compute_mask(self.inputs, mask=None)\n    if masks is None:\n        masks = [None for _ in self.outputs]\n    if not isinstance(masks, list):\n        masks = [masks]\n\n    # Prepare loss weights.\n    if loss_weights is None:\n        loss_weights_list = [1. for _ in range(len(self.outputs))]\n    elif isinstance(loss_weights, dict):\n        for name in loss_weights:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in loss_weights '\n                                 'dictionary: \"' + name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        loss_weights_list = []\n        for name in self.output_names:\n            loss_weights_list.append(loss_weights.get(name, 1.))\n    elif isinstance(loss_weights, list):\n        if len(loss_weights) != len(self.outputs):\n            raise ValueError('When passing a list as loss_weights, '\n                             'it should have one entry per model output. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed loss_weights=' +\n                             str(loss_weights))\n        loss_weights_list = loss_weights\n    else:\n        raise TypeError('Could not interpret loss_weights argument: ' +\n                        str(loss_weights) +\n                        ' - expected a list of dicts.')\n\n    # Prepare targets of model.\n    self.targets = []\n    self._feed_targets = []\n    if target_tensors is not None:\n        if isinstance(target_tensors, list):\n            if len(target_tensors) != len(self.outputs):\n                raise ValueError(\n                    'When passing a list as `target_tensors`, '\n                    'it should have one entry per model output. '\n                    'The model has ' + str(len(self.outputs)) +\n                    ' outputs, but you passed target_tensors=' +\n                    str(target_tensors))\n        elif isinstance(target_tensors, dict):\n            for name in target_tensors:\n                if name not in self.output_names:\n                    raise ValueError('Unknown entry in `target_tensors` '\n                                     'dictionary: \"' + name + '\". '\n                                     'Only expected the following keys: ' +\n                                     str(self.output_names))\n            tmp_target_tensors = []\n            for name in self.output_names:\n                tmp_target_tensors.append(target_tensors.get(name, None))\n            target_tensors = tmp_target_tensors\n        else:\n            raise TypeError('Expected `target_tensors` to be '\n                            'a list or dict, but got:', target_tensors)\n    for i in range(len(self.outputs)):\n        if i in skip_target_indices:\n            self.targets.append(None)\n        else:\n            shape = self._internal_output_shapes[i]\n            name = self.output_names[i]\n            if target_tensors is not None:\n                target = target_tensors[i]\n            else:\n                target = None\n            if target is None or K.is_placeholder(target):\n                if target is None:\n                    target = K.placeholder(ndim=len(shape),\n                                           name=name + '_target',\n                                           sparse=K.is_sparse(self.outputs[i]),\n                                           dtype=K.dtype(self.outputs[i]))\n                self._feed_targets.append(target)\n                self._feed_outputs.append(self.outputs[i])\n                self._feed_output_names.append(name)\n                self._feed_output_shapes.append(shape)\n                self._feed_loss_fns.append(self.loss_functions[i])\n            else:\n                skip_target_weighing_indices.append(i)\n            self.targets.append(target)\n\n    # Prepare sample weights.\n    sample_weights = []\n    sample_weight_modes = []\n    if isinstance(sample_weight_mode, dict):\n        for name in sample_weight_mode:\n            if name not in self.output_names:\n                raise ValueError('Unknown entry in '\n                                 'sample_weight_mode dictionary: \"' +\n                                 name + '\". '\n                                 'Only expected the following keys: ' +\n                                 str(self.output_names))\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                if name not in sample_weight_mode:\n                    raise ValueError('Output \"' + name +\n                                     '\" missing from sample_weight_modes '\n                                     'dictionary')\n                if sample_weight_mode.get(name) == 'temporal':\n                    weight = K.placeholder(ndim=2,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    elif isinstance(sample_weight_mode, list):\n        if len(sample_weight_mode) != len(self.outputs):\n            raise ValueError('When passing a list as sample_weight_mode, '\n                             'it should have one entry per model output. '\n                             'The model has ' + str(len(self.outputs)) +\n                             ' outputs, but you passed '\n                             'sample_weight_mode=' +\n                             str(sample_weight_mode))\n        for i in range(len(self.output_names)):\n            if i in skip_target_weighing_indices:\n                weight = None\n                sample_weight_modes.append(None)\n            else:\n                mode = sample_weight_mode[i]\n                name = self.output_names[i]\n                if mode == 'temporal':\n                    weight = K.placeholder(ndim=2,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append('temporal')\n                else:\n                    weight = K.placeholder(ndim=1,\n                                           name=name + '_sample_weights')\n                    sample_weight_modes.append(None)\n            sample_weights.append(weight)\n    else:\n        for i, name in enumerate(self.output_names):\n            if i in skip_target_weighing_indices:\n                sample_weight_modes.append(None)\n                sample_weights.append(None)\n            else:\n                if sample_weight_mode == 'temporal':\n                    sample_weights.append(\n                        K.placeholder(ndim=2,\n                                      name=name + '_sample_weights'))\n                    sample_weight_modes.append('temporal')\n                else:\n                    sample_weights.append(\n                        K.placeholder(ndim=1,\n                                      name=name + '_sample_weights'))\n                    sample_weight_modes.append(None)\n    self.sample_weight_modes = sample_weight_modes\n    self._feed_sample_weight_modes = []\n    for i in range(len(self.outputs)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weight_modes.append(self.sample_weight_modes[i])\n\n    # Prepare metrics.\n    self.metrics = metrics or []\n    self.weighted_metrics = weighted_metrics\n    self.metrics_names = ['loss']\n    self.metrics_tensors = []\n\n    # Compute total loss.\n    total_loss = None\n    with K.name_scope('loss'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weighted_loss = weighted_losses[i]\n            sample_weight = sample_weights[i]\n            mask = masks[i]\n            loss_weight = loss_weights_list[i]\n            with K.name_scope(self.output_names[i] + '_loss'):\n                output_loss = weighted_loss(y_true, y_pred,\n                                            sample_weight, mask)\n            if len(self.outputs) > 1:\n                self.metrics_tensors.append(output_loss)\n                self.metrics_names.append(self.output_names[i] + '_loss')\n            if total_loss is None:\n                total_loss = loss_weight * output_loss\n            else:\n                total_loss += loss_weight * output_loss\n        if total_loss is None:\n            if not self.losses:\n                raise ValueError('The model cannot be compiled '\n                                 'because it has no loss to optimize.')\n            else:\n                total_loss = 0.\n\n        # Add regularization penalties\n        # and other layer-specific losses.\n        for loss_tensor in self.losses:\n            total_loss += loss_tensor\n\n    # List of same size as output_names.\n    # contains tuples (metrics for output, names of metrics).\n    nested_metrics = _collect_metrics(metrics, self.output_names)\n    nested_weighted_metrics = _collect_metrics(weighted_metrics, self.output_names)\n    self.metrics_updates = []\n    self.stateful_metric_names = []\n    with K.name_scope('metrics'):\n        for i in range(len(self.outputs)):\n            if i in skip_target_indices:\n                continue\n\n            y_true = self.targets[i]\n            y_pred = self.outputs[i]\n            weights = sample_weights[i]\n            output_metrics = nested_metrics[i]\n            output_weighted_metrics = nested_weighted_metrics[i]\n\n            def handle_metrics(metrics, weights=None):\n                metric_name_prefix = 'weighted_' if weights is not None else ''\n\n                for metric in metrics:\n                    if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n                        # custom handling of accuracy/crossentropy\n                        # (because of class mode duality)\n                        output_shape = self._internal_output_shapes[i]\n                        if (output_shape[-1] == 1 or\n                           self.loss_functions[i] == losses.binary_crossentropy):\n                            # case: binary accuracy/crossentropy\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.binary_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.binary_crossentropy\n                        elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                            # case: categorical accuracy/crossentropy with sparse targets\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.sparse_categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.sparse_categorical_crossentropy\n                        else:\n                            # case: categorical accuracy/crossentropy\n                            if metric in ('accuracy', 'acc'):\n                                metric_fn = metrics_module.categorical_accuracy\n                            elif metric in ('crossentropy', 'ce'):\n                                metric_fn = metrics_module.categorical_crossentropy\n                        if metric in ('accuracy', 'acc'):\n                                suffix = 'acc'\n                        elif metric in ('crossentropy', 'ce'):\n                                suffix = 'ce'\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        metric_name = metric_name_prefix + suffix\n                    else:\n                        metric_fn = metrics_module.get(metric)\n                        weighted_metric_fn = _weighted_masked_objective(metric_fn)\n                        # Get metric name as string\n                        if hasattr(metric_fn, 'name'):\n                            metric_name = metric_fn.name\n                        else:\n                            metric_name = metric_fn.__name__\n                        metric_name = metric_name_prefix + metric_name\n\n                    with K.name_scope(metric_name):\n                        metric_result = weighted_metric_fn(y_true, y_pred,\n                                                           weights=weights,\n                                                           mask=masks[i])\n\n                    # Append to self.metrics_names, self.metric_tensors,\n                    # self.stateful_metric_names\n                    if len(self.output_names) > 1:\n                        metric_name = self.output_names[i] + '_' + metric_name\n                    # Dedupe name\n                    j = 1\n                    base_metric_name = metric_name\n                    while metric_name in self.metrics_names:\n                        metric_name = base_metric_name + '_' + str(j)\n                        j += 1\n                    self.metrics_names.append(metric_name)\n                    self.metrics_tensors.append(metric_result)\n\n                    # Keep track of state updates created by\n                    # stateful metrics (i.e. metrics layers).\n                    if isinstance(metric_fn, Layer) and metric_fn.stateful:\n                        self.stateful_metric_names.append(metric_name)\n                        self.metrics_updates += metric_fn.updates\n\n            handle_metrics(output_metrics)\n            handle_metrics(output_weighted_metrics, weights=weights)\n\n    # Prepare gradient updates and state updates.\n    self.total_loss = total_loss\n    self.sample_weights = sample_weights\n    self._feed_sample_weights = []\n    for i in range(len(self.sample_weights)):\n        if i not in skip_target_weighing_indices:\n            self._feed_sample_weights.append(sample_weights[i])\n\n    # Functions for train, test and predict will\n    # be compiled lazily when required.\n    # This saves time when the user is not using all functions.\n    self._function_kwargs = kwargs\n\n    self.train_function = None\n    self.test_function = None\n    self.predict_function = None\n\n    # Collected trainable weights, sorted in topological order.\n    trainable_weights = self.trainable_weights\n    self._collected_trainable_weights = trainable_weights",
                "def _check_trainable_weights_consistency(self):\n    \"\"\"Check trainable weights count consistency.\n\n    This will raise a warning if `trainable_weights` and\n    `_collected_trainable_weights` are inconsistent (i.e. have different\n    number of parameters).\n    Inconsistency will typically arise when one modifies `model.trainable`\n    without calling `model.compile` again.\n    \"\"\"\n    if not hasattr(self, '_collected_trainable_weights'):\n        return\n\n    if (len(self.trainable_weights) !=\n            len(self._collected_trainable_weights)):\n        warnings.warn(UserWarning(\n            'Discrepancy between trainable weights and collected trainable'\n            ' weights, did you set `model.trainable` without calling'\n            ' `model.compile` after ?'))",
                "def _make_train_function(self):\n    if not hasattr(self, 'train_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    self._check_trainable_weights_consistency()\n    if self.train_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            inputs += [K.learning_phase()]\n\n        with K.name_scope('training'):\n            with K.name_scope(self.optimizer.__class__.__name__):\n                training_updates = self.optimizer.get_updates(\n                    params=self._collected_trainable_weights,\n                    loss=self.total_loss)\n            updates = self.updates + training_updates + self.metrics_updates\n            # Gets loss and metrics. Updates weights at each call.\n            self.train_function = K.function(inputs,\n                                             [self.total_loss] + self.metrics_tensors,\n                                             updates=updates,\n                                             name='train_function',\n                                             **self._function_kwargs)",
                "def _make_test_function(self):\n    if not hasattr(self, 'test_function'):\n        raise RuntimeError('You must compile your model before using it.')\n    if self.test_function is None:\n        inputs = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            inputs += [K.learning_phase()]\n        # Return loss and metrics, no gradient updates.\n        # Does update the network states.\n        self.test_function = K.function(inputs,\n                                        [self.total_loss] + self.metrics_tensors,\n                                        updates=self.state_updates + self.metrics_updates,\n                                        name='test_function',\n                                        **self._function_kwargs)",
                "def _make_predict_function(self):\n    if not hasattr(self, 'predict_function'):\n        self.predict_function = None\n    if self.predict_function is None:\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            inputs = self._feed_inputs + [K.learning_phase()]\n        else:\n            inputs = self._feed_inputs\n        # Gets network outputs. Does not update weights.\n        # Does update the network states.\n        kwargs = getattr(self, '_function_kwargs', {})\n        self.predict_function = K.function(inputs,\n                                           self.outputs,\n                                           updates=self.state_updates,\n                                           name='predict_function',\n                                           **kwargs)",
                "def _check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps'):\n    \"\"\"Determine the number of samples provided for training and evaluation.\n\n    The number of samples is not defined when running with `steps`,\n    in which case the number of samples is set to `None`.\n\n    # Arguments\n        ins: List of tensors to be fed to the Keras function.\n        batch_size: Integer batch size or `None` if not defined.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n        steps_name: The public API's parameter name for `steps`.\n\n    # Raises\n        ValueError: when `steps` is `None` and the attribute `ins.shape`\n        does not exist. Also raises ValueError when `steps` is not `None`\n        and `batch_size` is not `None` because they are mutually\n        exclusive.\n\n    # Returns\n        When steps is `None`, returns the number of samples to be\n        processed based on the size of the first dimension of the\n        first input numpy array. When steps is not `None` and\n        `batch_size` is `None`, returns `None`.\n\n    # Raises\n        ValueError: In case of invalid arguments.\n    \"\"\"\n    if steps is not None:\n        num_samples = None\n        if batch_size is not None:\n            raise ValueError('If ' + steps_name +\n                             ' is set, the `batch_size` must be None.')\n    elif ins and hasattr(ins[0], 'shape'):\n        num_samples = ins[0].shape[0]\n    else:\n        raise ValueError('Either the input data should have '\n                         'a defined shape, or ' + steps_name +\n                         ' should be specified.')\n    return num_samples",
                "def _fit_loop(self, f, ins, out_labels=None, batch_size=None,\n              epochs=100, verbose=1, callbacks=None,\n              val_f=None, val_ins=None, shuffle=True,\n              callback_metrics=None, initial_epoch=0,\n              steps_per_epoch=None, validation_steps=None):\n    \"\"\"Abstract fit function for `f(ins)`.\n\n    Assume that f returns a list, labeled by out_labels.\n\n    # Arguments\n        f: Keras function returning a list of tensors\n        ins: List of tensors to be fed to `f`\n        out_labels: List of strings, display names of\n            the outputs of `f`\n        batch_size: Integer batch size or None if unknown.\n        epochs: Number of times to iterate over the data\n        verbose: Verbosity mode, 0, 1 or 2\n        callbacks: List of callbacks to be called during training\n        val_f: Keras function to call for validation\n        val_ins: List of tensors to be fed to `val_f`\n        shuffle: Whether to shuffle the data at the beginning of each epoch\n        callback_metrics: List of strings, the display names of the metrics\n            passed to the callbacks. They should be the\n            concatenation of list the display names of the outputs of\n             `f` and the list of display names of the outputs of `f_val`.\n        initial_epoch: Epoch at which to start training\n            (useful for resuming a previous training run)\n        steps_per_epoch: Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. Ignored with the default value of `None`.\n        validation_steps: Number of steps to run validation for\n            (only if doing validation from data tensors).\n            Ignored with the default value of `None`.\n\n    # Returns\n        `History` object.\n    \"\"\"\n    do_validation = False\n    if val_f and val_ins:\n        do_validation = True\n        if verbose and ins and hasattr(ins[0], 'shape') and hasattr(val_ins[0], 'shape'):\n            print('Train on %d samples, validate on %d samples' %\n                  (ins[0].shape[0], val_ins[0].shape[0]))\n    if validation_steps:\n        do_validation = True\n        if steps_per_epoch is None:\n            raise ValueError('Can only use `validation_steps` '\n                             'when doing step-wise '\n                             'training, i.e. `steps_per_epoch` '\n                             'must be set.')\n\n    num_train_samples = self._check_num_samples(ins, batch_size,\n                                                steps_per_epoch,\n                                                'steps_per_epoch')\n    if num_train_samples is not None:\n        index_array = np.arange(num_train_samples)\n\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(\n        stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        if steps_per_epoch is not None:\n            count_mode = 'steps'\n        else:\n            count_mode = 'samples'\n        _callbacks.append(\n            cbks.ProgbarLogger(\n                count_mode,\n                stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n    out_labels = out_labels or []\n\n    # it's possible to callback a different model than self\n    # (used by Sequential models)\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'batch_size': batch_size,\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'samples': num_train_samples,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics or [],\n    })\n    callbacks.on_train_begin()\n    callback_model.stop_training = False\n    for cbk in callbacks:\n        cbk.validation_data = val_ins\n\n    # To prevent a slowdown, we find beforehand the arrays that need conversion.\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and not K.is_sparse(feed[i]):\n            indices_for_conversion_to_dense.append(i)\n\n    for epoch in range(initial_epoch, epochs):\n        # Reset stateful metrics\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        callbacks.on_epoch_begin(epoch)\n        epoch_logs = {}\n        if steps_per_epoch is not None:\n            for step_index in range(steps_per_epoch):\n                batch_logs = {}\n                batch_logs['batch'] = step_index\n                batch_logs['size'] = 1\n                callbacks.on_batch_begin(step_index, batch_logs)\n                outs = f(ins)\n\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(step_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n\n            if do_validation:\n                val_outs = self._test_loop(val_f, val_ins,\n                                           batch_size=batch_size,\n                                           steps=validation_steps,\n                                           verbose=0)\n                if not isinstance(val_outs, list):\n                    val_outs = [val_outs]\n                # Same labels assumed.\n                for l, o in zip(out_labels, val_outs):\n                    epoch_logs['val_' + l] = o\n        else:\n            if shuffle == 'batch':\n                index_array = _batch_shuffle(index_array, batch_size)\n            elif shuffle:\n                np.random.shuffle(index_array)\n\n            batches = _make_batches(num_train_samples, batch_size)\n            for batch_index, (batch_start, batch_end) in enumerate(batches):\n                batch_ids = index_array[batch_start:batch_end]\n                try:\n                    if isinstance(ins[-1], float):\n                        # Do not slice the training phase flag.\n                        ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n                    else:\n                        ins_batch = _slice_arrays(ins, batch_ids)\n                except TypeError:\n                    raise TypeError('TypeError while preparing batch. '\n                                    'If using HDF5 input data, '\n                                    'pass shuffle=\"batch\".')\n                batch_logs = {}\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = len(batch_ids)\n                callbacks.on_batch_begin(batch_index, batch_logs)\n                for i in indices_for_conversion_to_dense:\n                    ins_batch[i] = ins_batch[i].toarray()\n\n                outs = f(ins_batch)\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n                if callback_model.stop_training:\n                    break\n\n                if batch_index == len(batches) - 1:  # Last batch.\n                    if do_validation:\n                        val_outs = self._test_loop(val_f, val_ins,\n                                                   batch_size=batch_size,\n                                                   verbose=0)\n                        if not isinstance(val_outs, list):\n                            val_outs = [val_outs]\n                        # Same labels assumed.\n                        for l, o in zip(out_labels, val_outs):\n                            epoch_logs['val_' + l] = o\n        callbacks.on_epoch_end(epoch, epoch_logs)\n        if callback_model.stop_training:\n            break\n    callbacks.on_train_end()\n    return self.history",
                "def _predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring `_predict_loop` finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Array of predictions (if the model has a single output)\n        or list of arrays of predictions\n        (if the model has multiple outputs).\n    \"\"\"\n    num_samples = self._check_num_samples(ins, batch_size,\n                                          steps,\n                                          'steps')\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n\n    indices_for_conversion_to_dense = []\n    for i in range(len(self._feed_inputs)):\n        if issparse(ins[i]) and not K.is_sparse(self._feed_inputs[i]):\n            indices_for_conversion_to_dense.append(i)\n\n    if steps is not None:\n        # Step-based predictions.\n        # Since we do not know how many samples\n        # we will see, we cannot pre-allocate\n        # the returned Numpy arrays.\n        # Instead, we store one array per batch seen\n        # and concatenate them upon returning.\n        unconcatenated_outs = []\n        for step in range(steps):\n            batch_outs = f(ins)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if step == 0:\n                for batch_out in batch_outs:\n                    unconcatenated_outs.append([])\n            for i, batch_out in enumerate(batch_outs):\n                unconcatenated_outs[i].append(batch_out)\n            if verbose == 1:\n                progbar.update(step + 1)\n        if len(unconcatenated_outs) == 1:\n            return np.concatenate(unconcatenated_outs[0], axis=0)\n        return [np.concatenate(unconcatenated_outs[i], axis=0)\n                for i in range(len(unconcatenated_outs))]\n    else:\n        # Sample-based predictions.\n        outs = []\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if ins and isinstance(ins[-1], float):\n                # Do not slice the training phase flag.\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n\n            batch_outs = f(ins_batch)\n            if not isinstance(batch_outs, list):\n                batch_outs = [batch_outs]\n            if batch_index == 0:\n                # Pre-allocate the results arrays.\n                for batch_out in batch_outs:\n                    shape = (num_samples,) + batch_out.shape[1:]\n                    outs.append(np.zeros(shape, dtype=batch_out.dtype))\n            for i, batch_out in enumerate(batch_outs):\n                outs[i][batch_start:batch_end] = batch_out\n            if verbose == 1:\n                progbar.update(batch_end)\n        if len(outs) == 1:\n            return outs[0]\n        return outs",
                "def _test_loop(self, f, ins, batch_size=None, verbose=0, steps=None):\n    \"\"\"Abstract method to loop over some data in batches.\n\n    # Arguments\n        f: Keras function returning a list of tensors.\n        ins: list of tensors to be fed to `f`.\n        batch_size: integer batch size or `None`.\n        verbose: verbosity mode.\n        steps: Total number of steps (batches of samples)\n            before declaring predictions finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n\n    if hasattr(self, 'metrics'):\n        for m in self.metrics:\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [\n            i for i, name in enumerate(self.metrics_names)\n            if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n\n    num_samples = self._check_num_samples(ins, batch_size,\n                                          steps,\n                                          'steps')\n    outs = []\n    if verbose == 1:\n        if steps is not None:\n            progbar = Progbar(target=steps)\n        else:\n            progbar = Progbar(target=num_samples)\n\n    # To prevent a slowdown, we find beforehand the arrays that need conversion.\n    feed = self._feed_inputs + self._feed_targets + self._feed_sample_weights\n    indices_for_conversion_to_dense = []\n    for i in range(len(feed)):\n        if issparse(ins[i]) and not K.is_sparse(feed[i]):\n            indices_for_conversion_to_dense.append(i)\n\n    if steps is not None:\n        for step in range(steps):\n            batch_outs = f(ins)\n            if isinstance(batch_outs, list):\n                if step == 0:\n                    for _ in enumerate(batch_outs):\n                        outs.append(0.)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = float(batch_out)\n                    else:\n                        outs[i] += batch_out\n            else:\n                if step == 0:\n                    outs.append(0.)\n                outs[0] += batch_outs\n            if verbose == 1:\n                progbar.update(step + 1)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= steps\n    else:\n        batches = _make_batches(num_samples, batch_size)\n        index_array = np.arange(num_samples)\n        for batch_index, (batch_start, batch_end) in enumerate(batches):\n            batch_ids = index_array[batch_start:batch_end]\n            if isinstance(ins[-1], float):\n                # Do not slice the training phase flag.\n                ins_batch = _slice_arrays(ins[:-1], batch_ids) + [ins[-1]]\n            else:\n                ins_batch = _slice_arrays(ins, batch_ids)\n            for i in indices_for_conversion_to_dense:\n                ins_batch[i] = ins_batch[i].toarray()\n\n            batch_outs = f(ins_batch)\n            if isinstance(batch_outs, list):\n                if batch_index == 0:\n                    for batch_out in enumerate(batch_outs):\n                        outs.append(0.)\n                for i, batch_out in enumerate(batch_outs):\n                    if i in stateful_metric_indices:\n                        outs[i] = batch_out\n                    else:\n                        outs[i] += batch_out * len(batch_ids)\n            else:\n                if batch_index == 0:\n                    outs.append(0.)\n                outs[0] += batch_outs * len(batch_ids)\n\n            if verbose == 1:\n                progbar.update(batch_end)\n        for i in range(len(outs)):\n            if i not in stateful_metric_indices:\n                outs[i] /= num_samples\n    if len(outs) == 1:\n        return outs[0]\n    return outs",
                "def _standardize_user_data(self, x, y,\n                           sample_weight=None, class_weight=None,\n                           check_array_lengths=True, batch_size=None):\n    if not hasattr(self, 'optimizer'):\n        raise RuntimeError('You must compile a model before '\n                           'training/testing. '\n                           'Use `model.compile(optimizer, loss)`.')\n\n    output_shapes = []\n    for output_shape, loss_fn in zip(self._feed_output_shapes, self._feed_loss_fns):\n        if loss_fn is losses.sparse_categorical_crossentropy:\n            output_shapes.append(output_shape[:-1] + (1,))\n        elif (not hasattr(loss_fn, '__name__') or\n              getattr(losses, loss_fn.__name__, None) is None):\n            # If `loss_fn` is not a function (e.g. callable class)\n            # or if it not in the `losses` module, then\n            # it is a user-defined loss and we make no assumptions\n            # about it.\n            output_shapes.append(None)\n        else:\n            output_shapes.append(output_shape)\n    # `check_batch_axis` is set to False since `x` may contain multiple batches\n    #  and in general `x[0].shape[0] != self._feed_input_shapes[0][0]`\n    x = _standardize_input_data(x, self._feed_input_names,\n                                self._feed_input_shapes,\n                                check_batch_axis=False,\n                                exception_prefix='input')\n    y = _standardize_input_data(y, self._feed_output_names,\n                                output_shapes,\n                                check_batch_axis=False,\n                                exception_prefix='target')\n    sample_weights = _standardize_sample_weights(sample_weight,\n                                                 self._feed_output_names)\n    class_weights = _standardize_class_weights(class_weight,\n                                               self._feed_output_names)\n    sample_weights = [_standardize_weights(ref, sw, cw, mode)\n                      for (ref, sw, cw, mode)\n                      in zip(y, sample_weights, class_weights, self._feed_sample_weight_modes)]\n\n    if check_array_lengths:\n        _check_array_lengths(x, y, sample_weights)\n    _check_loss_and_target_compatibility(y,\n                                         self._feed_loss_fns,\n                                         self._feed_output_shapes)\n    if self.stateful and batch_size:\n        if x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, '\n                             'you should only pass inputs with '\n                             'a number of samples that can be '\n                             'divided by the batch size. Found: ' +\n                             str(x[0].shape[0]) + ' samples')\n    return x, y, sample_weights",
                "def fit(self,\n        x=None,\n        y=None,\n        batch_size=None,\n        epochs=1,\n        verbose=1,\n        callbacks=None,\n        validation_split=0.,\n        validation_data=None,\n        shuffle=True,\n        class_weight=None,\n        sample_weight=None,\n        initial_epoch=0,\n        steps_per_epoch=None,\n        validation_steps=None,\n        **kwargs):\n    \"\"\"Trains the model for a fixed number of epochs (iterations on a dataset).\n\n    # Arguments\n        x: Numpy array of training data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per gradient update.\n            If unspecified, `batch_size` will default to 32.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire `x` and `y`\n            data provided.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_split: Float between 0 and 1.\n            Fraction of the training data to be used as validation data.\n            The model will set apart this fraction of the training data,\n            will not train on it, and will evaluate\n            the loss and any model metrics\n            on this data at the end of each epoch.\n            The validation data is selected from the last samples\n            in the `x` and `y` data provided, before shuffling.\n        validation_data: tuple `(x_val, y_val)` or tuple\n            `(x_val, y_val, val_sample_weights)` on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n            `validation_data` will override `validation_split`.\n        shuffle: Boolean (whether to shuffle the training data\n            before each epoch) or str (for 'batch').\n            'batch' is a special option for dealing with the\n            limitations of HDF5 data; it shuffles in batch-sized chunks.\n            Has no effect when `steps_per_epoch` is not `None`.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only).\n            This can be useful to tell the model to\n            \"pay more attention\" to samples from\n            an under-represented class.\n        sample_weight: Optional Numpy array of weights for\n            the training samples, used for weighting the loss function\n            (during training only). You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n        steps_per_epoch: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring one epoch finished and starting the\n            next epoch. When training with input tensors such as\n            TensorFlow data tensors, the default `None` is equal to\n            the number of samples in your dataset divided by\n            the batch size, or 1 if that cannot be determined.\n        validation_steps: Only relevant if `steps_per_epoch`\n            is specified. Total number of steps (batches of samples)\n            to validate before stopping.\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        RuntimeError: If the model was never compiled.\n        ValueError: In case of mismatch between the provided input data\n            and what the model expects.\n    \"\"\"\n    # Backwards compatibility\n    if batch_size is None and steps_per_epoch is None:\n        batch_size = 32\n    # Legacy support\n    if 'nb_epoch' in kwargs:\n        warnings.warn('The `nb_epoch` argument in `fit` '\n                      'has been renamed `epochs`.', stacklevel=2)\n        epochs = kwargs.pop('nb_epoch')\n    if kwargs:\n        raise TypeError('Unrecognized keyword arguments: ' + str(kwargs))\n    if x is None and y is None and steps_per_epoch is None:\n        raise ValueError('If fitting from data tensors, '\n                         'you should specify the `steps_per_epoch` '\n                         'argument.')\n    # Validate user data.\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight,\n        class_weight=class_weight,\n        batch_size=batch_size)\n    # Prepare validation data.\n    do_validation = False\n    if validation_data:\n        do_validation = True\n        if len(validation_data) == 2:\n            val_x, val_y = validation_data\n            val_sample_weight = None\n        elif len(validation_data) == 3:\n            val_x, val_y, val_sample_weight = validation_data\n        else:\n            raise ValueError('When passing validation_data, '\n                             'it must contain 2 (x_val, y_val) '\n                             'or 3 (x_val, y_val, val_sample_weights) '\n                             'items, however it contains %d items' %\n                             len(validation_data))\n\n        val_x, val_y, val_sample_weights = self._standardize_user_data(\n            val_x, val_y,\n            sample_weight=val_sample_weight,\n            batch_size=batch_size)\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            val_ins = val_x + val_y + val_sample_weights + [0.]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n\n    elif validation_split and 0. < validation_split < 1.:\n        do_validation = True\n        if hasattr(x[0], 'shape'):\n            split_at = int(x[0].shape[0] * (1. - validation_split))\n        else:\n            split_at = int(len(x[0]) * (1. - validation_split))\n        x, val_x = (_slice_arrays(x, 0, split_at), _slice_arrays(x, split_at))\n        y, val_y = (_slice_arrays(y, 0, split_at), _slice_arrays(y, split_at))\n        sample_weights, val_sample_weights = (\n            _slice_arrays(sample_weights, 0, split_at),\n            _slice_arrays(sample_weights, split_at))\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            val_ins = val_x + val_y + val_sample_weights + [0.]\n        else:\n            val_ins = val_x + val_y + val_sample_weights\n\n    elif validation_steps:\n        do_validation = True\n        if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n            val_ins = [0.]\n\n    # Prepare input arrays and training function.\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [1.]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    f = self.train_function\n\n    # Prepare display labels.\n    out_labels = self.metrics_names\n\n    if do_validation:\n        self._make_test_function()\n        val_f = self.test_function\n        callback_metrics = copy.copy(out_labels) + ['val_' + n for n in out_labels]\n    else:\n        callback_metrics = copy.copy(out_labels)\n        val_f = None\n        val_ins = []\n\n    # Delegate logic to `_fit_loop`.\n    return self._fit_loop(f, ins, out_labels=out_labels,\n                          batch_size=batch_size, epochs=epochs,\n                          verbose=verbose, callbacks=callbacks,\n                          val_f=val_f, val_ins=val_ins, shuffle=shuffle,\n                          callback_metrics=callback_metrics,\n                          initial_epoch=initial_epoch,\n                          steps_per_epoch=steps_per_epoch,\n                          validation_steps=validation_steps)",
                "def evaluate(self, x=None, y=None,\n             batch_size=None,\n             verbose=1,\n             sample_weight=None,\n             steps=None):\n    \"\"\"Returns the loss value & metrics values for the model in test mode.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: Numpy array of test data (if the model has a single input),\n            or list of Numpy arrays (if the model has multiple inputs).\n            If input layers in the model are named, you can also pass a\n            dictionary mapping input names to Numpy arrays.\n            `x` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        y: Numpy array of target (label) data\n            (if the model has a single output),\n            or list of Numpy arrays (if the model has multiple outputs).\n            If output layers in the model are named, you can also pass a\n            dictionary mapping output names to Numpy arrays.\n            `y` can be `None` (default) if feeding from\n            framework-native tensors (e.g. TensorFlow data tensors).\n        batch_size: Integer or `None`.\n            Number of samples per evaluation step.\n            If unspecified, `batch_size` will default to 32.\n        verbose: 0 or 1. Verbosity mode.\n            0 = silent, 1 = progress bar.\n        sample_weight: Optional Numpy array of weights for\n            the test samples, used for weighting the loss function.\n            You can either pass a flat (1D)\n            Numpy array with the same length as the input samples\n            (1:1 mapping between weights and samples),\n            or in the case of temporal data,\n            you can pass a 2D array with shape\n            `(samples, sequence_length)`,\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            `sample_weight_mode=\"temporal\"` in `compile()`.\n        steps: Integer or `None`.\n            Total number of steps (batches of samples)\n            before declaring the evaluation round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    # Backwards compatibility.\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and y is None and steps is None:\n        raise ValueError('If evaluating from data tensors, '\n                         'you should specify the `steps` '\n                         'argument.')\n    # Validate user data.\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight,\n        batch_size=batch_size)\n    # Prepare inputs, delegate logic to `_test_loop`.\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [0.]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    f = self.test_function\n    return self._test_loop(f, ins,\n                           batch_size=batch_size,\n                           verbose=verbose,\n                           steps=steps)",
                "def predict(self, x,\n            batch_size=None,\n            verbose=0,\n            steps=None):\n    \"\"\"Generates output predictions for the input samples.\n\n    Computation is done in batches.\n\n    # Arguments\n        x: The input data, as a Numpy array\n            (or list of Numpy arrays if the model has multiple outputs).\n        batch_size: Integer. If unspecified, it will default to 32.\n        verbose: Verbosity mode, 0 or 1.\n        steps: Total number of steps (batches of samples)\n            before declaring the prediction round finished.\n            Ignored with the default value of `None`.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case of mismatch between the provided\n            input data and the model's expectations,\n            or in case a stateful model receives a number of samples\n            that is not a multiple of the batch size.\n    \"\"\"\n    # Backwards compatibility.\n    if batch_size is None and steps is None:\n        batch_size = 32\n    if x is None and steps is None:\n        raise ValueError('If predicting from data tensors, '\n                         'you should specify the `steps` '\n                         'argument.')\n    # Validate user data.\n    x = _standardize_input_data(x, self._feed_input_names,\n                                self._feed_input_shapes,\n                                check_batch_axis=False)\n    if self.stateful:\n        if x[0].shape[0] > batch_size and x[0].shape[0] % batch_size != 0:\n            raise ValueError('In a stateful network, '\n                             'you should only pass inputs with '\n                             'a number of samples that can be '\n                             'divided by the batch size. Found: ' +\n                             str(x[0].shape[0]) + ' samples. '\n                             'Batch size: ' + str(batch_size) + '.')\n\n    # Prepare inputs, delegate logic to `_predict_loop`.\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + [0.]\n    else:\n        ins = x\n    self._make_predict_function()\n    f = self.predict_function\n    return self._predict_loop(f, ins, batch_size=batch_size,\n                              verbose=verbose, steps=steps)",
                "def train_on_batch(self, x, y,\n                   sample_weight=None,\n                   class_weight=None):\n    \"\"\"Runs a single gradient update on a single batch of data.\n\n    # Arguments\n        x: Numpy array of training data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n        class_weight: Optional dictionary mapping\n            class indices (integers) to\n            a weight (float) to apply to the model's loss for the samples\n            from this class during training.\n            This can be useful to tell the model to \"pay more attention\" to\n            samples from an under-represented class.\n\n    # Returns\n        Scalar training loss\n        (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight,\n        class_weight=class_weight)\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [1.]\n    else:\n        ins = x + y + sample_weights\n    self._make_train_function()\n    outputs = self.train_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                "def test_on_batch(self, x, y, sample_weight=None):\n    \"\"\"Test the model on a single batch of samples.\n\n    # Arguments\n        x: Numpy array of test data,\n            or list of Numpy arrays if the model has multiple inputs.\n            If all inputs in the model are named,\n            you can also pass a dictionary\n            mapping input names to Numpy arrays.\n        y: Numpy array of target data,\n            or list of Numpy arrays if the model has multiple outputs.\n            If all outputs in the model are named,\n            you can also pass a dictionary\n            mapping output names to Numpy arrays.\n        sample_weight: Optional array of the same length as x, containing\n            weights to apply to the model's loss for each sample.\n            In the case of temporal data, you can pass a 2D array\n            with shape (samples, sequence_length),\n            to apply a different weight to every timestep of every sample.\n            In this case you should make sure to specify\n            sample_weight_mode=\"temporal\" in compile().\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n    \"\"\"\n    x, y, sample_weights = self._standardize_user_data(\n        x, y,\n        sample_weight=sample_weight)\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + y + sample_weights + [0.]\n    else:\n        ins = x + y + sample_weights\n    self._make_test_function()\n    outputs = self.test_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                "def predict_on_batch(self, x):\n    \"\"\"Returns predictions for a single batch of samples.\n\n    # Arguments\n        x: Input samples, as a Numpy array.\n\n    # Returns\n        Numpy array(s) of predictions.\n    \"\"\"\n    x = _standardize_input_data(x, self._feed_input_names,\n                                self._feed_input_shapes)\n    if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n        ins = x + [0.]\n    else:\n        ins = x\n    self._make_predict_function()\n    outputs = self.predict_function(ins)\n    if len(outputs) == 1:\n        return outputs[0]\n    return outputs",
                "@interfaces.legacy_generator_methods_support\ndef fit_generator(self,\n                  generator,\n                  steps_per_epoch=None,\n                  epochs=1,\n                  verbose=1,\n                  callbacks=None,\n                  validation_data=None,\n                  validation_steps=None,\n                  class_weight=None,\n                  max_queue_size=10,\n                  workers=1,\n                  use_multiprocessing=False,\n                  shuffle=True,\n                  initial_epoch=0):\n    \"\"\"Trains the model on data generated batch-by-batch by a Python generator or an instance of `Sequence`.\n\n    The generator is run in parallel to the model, for efficiency.\n    For instance, this allows you to do real-time data augmentation\n    on images on CPU in parallel to training your model on GPU.\n\n    The use of `keras.utils.Sequence` guarantees the ordering\n    and guarantees the single use of every input per epoch when\n    using `use_multiprocessing=True`.\n\n    # Arguments\n        generator: A generator or an instance of `Sequence`\n            (`keras.utils.Sequence`) object in order to avoid\n            duplicate data when using multiprocessing.\n            The output of the generator must be either\n            - a tuple `(inputs, targets)`\n            - a tuple `(inputs, targets, sample_weights)`.\n            This tuple (a single output of the generator) makes a single\n            batch. Therefore, all arrays in this tuple must have the same\n            length (equal to the size of this batch). Different batches may\n            have different sizes. For example, the last batch of the epoch\n            is commonly smaller than the others, if the size of the dataset\n            is not divisible by the batch size.\n            The generator is expected to loop over its data\n            indefinitely. An epoch finishes when `steps_per_epoch`\n            batches have been seen by the model.\n        steps_per_epoch: Integer.\n            Total number of steps (batches of samples)\n            to yield from `generator` before declaring one epoch\n            finished and starting the next epoch. It should typically\n            be equal to the number of samples of your dataset\n            divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        epochs: Integer. Number of epochs to train the model.\n            An epoch is an iteration over the entire data provided,\n            as defined by `steps_per_epoch`.\n            Note that in conjunction with `initial_epoch`,\n            `epochs` is to be understood as \"final epoch\".\n            The model is not trained for a number of iterations\n            given by `epochs`, but merely until the epoch\n            of index `epochs` is reached.\n        verbose: Integer. 0, 1, or 2. Verbosity mode.\n            0 = silent, 1 = progress bar, 2 = one line per epoch.\n        callbacks: List of `keras.callbacks.Callback` instances.\n            List of callbacks to apply during training.\n            See [callbacks](/callbacks).\n        validation_data: This can be either\n            - a generator for the validation data\n            - tuple `(x_val, y_val)`\n            - tuple `(x_val, y_val, val_sample_weights)`\n            on which to evaluate\n            the loss and any model metrics at the end of each epoch.\n            The model will not be trained on this data.\n        validation_steps: Only relevant if `validation_data`\n            is a generator. Total number of steps (batches of samples)\n            to yield from `validation_data` generator before stopping\n            at the end of every epoch. It should typically\n            be equal to the number of samples of your\n            validation dataset divided by the batch size.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(validation_data)` as a number of steps.\n        class_weight: Optional dictionary mapping class indices (integers)\n            to a weight (float) value, used for weighting the loss function\n            (during training only). This can be useful to tell the model to\n            \"pay more attention\" to samples from an under-represented class.\n        max_queue_size: Integer. Maximum size for the generator queue.\n            If unspecified, `max_queue_size` will default to 10.\n        workers: Integer. Maximum number of processes to spin up\n            when using process-based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: Boolean.\n            If `True`, use process-based threading.\n            If unspecified, `use_multiprocessing` will default to `False`.\n            Note that because this implementation relies on multiprocessing,\n            you should not pass non-picklable arguments to the generator\n            as they can't be passed easily to children processes.\n        shuffle: Boolean. Whether to shuffle the order of the batches at\n            the beginning of each epoch. Only used with instances\n            of `Sequence` (`keras.utils.Sequence`).\n            Has no effect when `steps_per_epoch` is not `None`.\n        initial_epoch: Integer.\n            Epoch at which to start training\n            (useful for resuming a previous training run).\n\n    # Returns\n        A `History` object. Its `History.history` attribute is\n        a record of training loss values and metrics values\n        at successive epochs, as well as validation loss values\n        and validation metrics values (if applicable).\n\n    # Raises\n        ValueError: In case the generator yields data in an invalid format.\n\n    # Example\n\n    ```python\n        def generate_arrays_from_file(path):\n            while True:\n                with open(path) as f:\n                    for line in f:\n                        # create numpy arrays of input data\n                        # and labels, from each line in the file\n                        x1, x2, y = process_line(line)\n                        yield ({'input_1': x1, 'input_2': x2}, {'output': y})\n\n        model.fit_generator(generate_arrays_from_file('/my_file.txt'),\n                            steps_per_epoch=10000, epochs=10)\n    ```\n    \"\"\"\n    wait_time = 0.01  # in seconds\n    epoch = initial_epoch\n\n    do_validation = bool(validation_data)\n    self._make_train_function()\n    if do_validation:\n        self._make_test_function()\n\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps_per_epoch is None:\n        if is_sequence:\n            steps_per_epoch = len(generator)\n        else:\n            raise ValueError('`steps_per_epoch=None` is only valid for a'\n                             ' generator based on the `keras.utils.Sequence`'\n                             ' class. Please specify `steps_per_epoch` or use'\n                             ' the `keras.utils.Sequence` class.')\n\n    # python 2 has 'next', 3 has '__next__'\n    # avoid any explicit version checks\n    val_gen = (hasattr(validation_data, 'next') or\n               hasattr(validation_data, '__next__') or\n               isinstance(validation_data, Sequence))\n    if (val_gen and not isinstance(validation_data, Sequence) and\n            not validation_steps):\n        raise ValueError('`validation_steps=None` is only valid for a'\n                         ' generator based on the `keras.utils.Sequence`'\n                         ' class. Please specify `validation_steps` or use'\n                         ' the `keras.utils.Sequence` class.')\n\n    # Prepare display labels.\n    out_labels = self.metrics_names\n    callback_metrics = out_labels + ['val_' + n for n in out_labels]\n\n    # prepare callbacks\n    self.history = cbks.History()\n    _callbacks = [cbks.BaseLogger(\n        stateful_metrics=self.stateful_metric_names)]\n    if verbose:\n        _callbacks.append(\n            cbks.ProgbarLogger(\n                count_mode='steps',\n                stateful_metrics=self.stateful_metric_names))\n    _callbacks += (callbacks or []) + [self.history]\n    callbacks = cbks.CallbackList(_callbacks)\n\n    # it's possible to callback a different model than self:\n    if hasattr(self, 'callback_model') and self.callback_model:\n        callback_model = self.callback_model\n    else:\n        callback_model = self\n    callbacks.set_model(callback_model)\n    callbacks.set_params({\n        'epochs': epochs,\n        'steps': steps_per_epoch,\n        'verbose': verbose,\n        'do_validation': do_validation,\n        'metrics': callback_metrics,\n    })\n    callbacks.on_train_begin()\n\n    enqueuer = None\n    val_enqueuer = None\n\n    try:\n        if do_validation and not val_gen:\n            # Prepare data for validation\n            if len(validation_data) == 2:\n                val_x, val_y = validation_data\n                val_sample_weight = None\n            elif len(validation_data) == 3:\n                val_x, val_y, val_sample_weight = validation_data\n            else:\n                raise ValueError('`validation_data` should be a tuple '\n                                 '`(val_x, val_y, val_sample_weight)` '\n                                 'or `(val_x, val_y)`. Found: ' +\n                                 str(validation_data))\n            val_x, val_y, val_sample_weights = self._standardize_user_data(\n                val_x, val_y, val_sample_weight)\n            val_data = val_x + val_y + val_sample_weights\n            if self.uses_learning_phase and not isinstance(K.learning_phase(), int):\n                val_data += [0.]\n            for cbk in callbacks:\n                cbk.validation_data = val_data\n\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator,\n                                           use_multiprocessing=use_multiprocessing,\n                                           shuffle=shuffle)\n            else:\n                enqueuer = GeneratorEnqueuer(generator,\n                                             use_multiprocessing=use_multiprocessing,\n                                             wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter(generator)\n            else:\n                output_generator = generator\n\n        callback_model.stop_training = False\n        # Construct epoch logs.\n        epoch_logs = {}\n        while epoch < epochs:\n            for m in self.metrics:\n                if isinstance(m, Layer) and m.stateful:\n                    m.reset_states()\n            callbacks.on_epoch_begin(epoch)\n            steps_done = 0\n            batch_index = 0\n            while steps_done < steps_per_epoch:\n                generator_output = next(output_generator)\n\n                if not hasattr(generator_output, '__len__'):\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n\n                if len(generator_output) == 2:\n                    x, y = generator_output\n                    sample_weight = None\n                elif len(generator_output) == 3:\n                    x, y, sample_weight = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n                # build batch logs\n                batch_logs = {}\n                if x is None or len(x) == 0:\n                    # Handle data tensors support when no input given\n                    # step-size = 1 for data tensors\n                    batch_size = 1\n                elif isinstance(x, list):\n                    batch_size = x[0].shape[0]\n                elif isinstance(x, dict):\n                    batch_size = list(x.values())[0].shape[0]\n                else:\n                    batch_size = x.shape[0]\n                batch_logs['batch'] = batch_index\n                batch_logs['size'] = batch_size\n                callbacks.on_batch_begin(batch_index, batch_logs)\n\n                outs = self.train_on_batch(x, y,\n                                           sample_weight=sample_weight,\n                                           class_weight=class_weight)\n\n                if not isinstance(outs, list):\n                    outs = [outs]\n                for l, o in zip(out_labels, outs):\n                    batch_logs[l] = o\n\n                callbacks.on_batch_end(batch_index, batch_logs)\n\n                batch_index += 1\n                steps_done += 1\n\n                # Epoch finished.\n                if steps_done >= steps_per_epoch and do_validation:\n                    if val_gen:\n                        val_outs = self.evaluate_generator(\n                            validation_data,\n                            validation_steps,\n                            workers=workers,\n                            use_multiprocessing=use_multiprocessing,\n                            max_queue_size=max_queue_size)\n                    else:\n                        # No need for try/except because\n                        # data has already been validated.\n                        val_outs = self.evaluate(\n                            val_x, val_y,\n                            batch_size=batch_size,\n                            sample_weight=val_sample_weights,\n                            verbose=0)\n                    if not isinstance(val_outs, list):\n                        val_outs = [val_outs]\n                    # Same labels assumed.\n                    for l, o in zip(out_labels, val_outs):\n                        epoch_logs['val_' + l] = o\n\n                if callback_model.stop_training:\n                    break\n\n            callbacks.on_epoch_end(epoch, epoch_logs)\n            epoch += 1\n            if callback_model.stop_training:\n                break\n\n    finally:\n        try:\n            if enqueuer is not None:\n                enqueuer.stop()\n        finally:\n            if val_enqueuer is not None:\n                val_enqueuer.stop()\n\n    callbacks.on_train_end()\n    return self.history",
                "@interfaces.legacy_generator_methods_support\ndef evaluate_generator(self, generator, steps=None,\n                       max_queue_size=10,\n                       workers=1,\n                       use_multiprocessing=False,\n                       verbose=0):\n    \"\"\"Evaluates the model on a data generator.\n\n    The generator should return the same kind of data\n    as accepted by `test_on_batch`.\n\n    # Arguments\n        generator: Generator yielding tuples (inputs, targets)\n            or (inputs, targets, sample_weights)\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: maximum size for the generator queue\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: if True, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Scalar test loss (if the model has a single output and no metrics)\n        or list of scalars (if the model has multiple outputs\n        and/or metrics). The attribute `model.metrics_names` will give you\n        the display labels for the scalar outputs.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_test_function()\n\n    stateful_metric_indices = []\n    if hasattr(self, 'metrics'):\n        for i, m in enumerate(self.metrics):\n            if isinstance(m, Layer) and m.stateful:\n                m.reset_states()\n        stateful_metric_indices = [\n            i for i, name in enumerate(self.metrics_names)\n            if str(name) in self.stateful_metric_names]\n    else:\n        stateful_metric_indices = []\n\n    steps_done = 0\n    wait_time = 0.01\n    outs_per_batch = []\n    batch_sizes = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator,\n                                           use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator,\n                                             use_multiprocessing=use_multiprocessing,\n                                             wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter(generator)\n            else:\n                output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if not hasattr(generator_output, '__len__'):\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            if len(generator_output) == 2:\n                x, y = generator_output\n                sample_weight = None\n            elif len(generator_output) == 3:\n                x, y, sample_weight = generator_output\n            else:\n                raise ValueError('Output of generator should be a tuple '\n                                 '(x, y, sample_weight) '\n                                 'or (x, y). Found: ' +\n                                 str(generator_output))\n            outs = self.test_on_batch(x, y, sample_weight=sample_weight)\n            if not isinstance(outs, list):\n                outs = [outs]\n            outs_per_batch.append(outs)\n\n            if x is None or len(x) == 0:\n                # Handle data tensors support when no input given\n                # step-size = 1 for data tensors\n                batch_size = 1\n            elif isinstance(x, list):\n                batch_size = x[0].shape[0]\n            elif isinstance(x, dict):\n                batch_size = list(x.values())[0].shape[0]\n            else:\n                batch_size = x.shape[0]\n            if batch_size == 0:\n                raise ValueError('Received an empty batch. '\n                                 'Batches should at least contain one item.')\n\n            steps_done += 1\n            batch_sizes.append(batch_size)\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    averages = []\n    for i in range(len(outs)):\n        if i not in stateful_metric_indices:\n            averages.append(np.average([out[i] for out in outs_per_batch],\n                                       weights=batch_sizes))\n        else:\n            averages.append(float(outs_per_batch[-1][i]))\n    if len(averages) == 1:\n        return averages[0]\n    return averages",
                "@interfaces.legacy_generator_methods_support\ndef predict_generator(self, generator, steps=None,\n                      max_queue_size=10,\n                      workers=1,\n                      use_multiprocessing=False,\n                      verbose=0):\n    \"\"\"Generates predictions for the input samples from a data generator.\n\n    The generator should return the same kind of data as accepted by\n    `predict_on_batch`.\n\n    # Arguments\n        generator: Generator yielding batches of input samples\n            or an instance of Sequence (keras.utils.Sequence)\n            object in order to avoid duplicate data\n            when using multiprocessing.\n        steps: Total number of steps (batches of samples)\n            to yield from `generator` before stopping.\n            Optional for `Sequence`: if unspecified, will use\n            the `len(generator)` as a number of steps.\n        max_queue_size: Maximum size for the generator queue.\n        workers: Integer. Maximum number of processes to spin up\n            when using process based threading.\n            If unspecified, `workers` will default to 1. If 0, will\n            execute the generator on the main thread.\n        use_multiprocessing: If `True`, use process based threading.\n            Note that because\n            this implementation relies on multiprocessing,\n            you should not pass\n            non picklable arguments to the generator\n            as they can't be passed\n            easily to children processes.\n        verbose: verbosity mode, 0 or 1.\n\n    # Returns\n        Numpy array(s) of predictions.\n\n    # Raises\n        ValueError: In case the generator yields\n            data in an invalid format.\n    \"\"\"\n    self._make_predict_function()\n\n    steps_done = 0\n    wait_time = 0.01\n    all_outs = []\n    is_sequence = isinstance(generator, Sequence)\n    if not is_sequence and use_multiprocessing and workers > 1:\n        warnings.warn(\n            UserWarning('Using a generator with `use_multiprocessing=True`'\n                        ' and multiple workers may duplicate your data.'\n                        ' Please consider using the`keras.utils.Sequence'\n                        ' class.'))\n    if steps is None:\n        if is_sequence:\n            steps = len(generator)\n        else:\n            raise ValueError('`steps=None` is only valid for a generator'\n                             ' based on the `keras.utils.Sequence` class.'\n                             ' Please specify `steps` or use the'\n                             ' `keras.utils.Sequence` class.')\n    enqueuer = None\n\n    try:\n        if workers > 0:\n            if is_sequence:\n                enqueuer = OrderedEnqueuer(generator,\n                                           use_multiprocessing=use_multiprocessing)\n            else:\n                enqueuer = GeneratorEnqueuer(generator,\n                                             use_multiprocessing=use_multiprocessing,\n                                             wait_time=wait_time)\n            enqueuer.start(workers=workers, max_queue_size=max_queue_size)\n            output_generator = enqueuer.get()\n        else:\n            if is_sequence:\n                output_generator = iter(generator)\n            else:\n                output_generator = generator\n\n        if verbose == 1:\n            progbar = Progbar(target=steps)\n\n        while steps_done < steps:\n            generator_output = next(output_generator)\n            if isinstance(generator_output, tuple):\n                # Compatibility with the generators\n                # used for training.\n                if len(generator_output) == 2:\n                    x, _ = generator_output\n                elif len(generator_output) == 3:\n                    x, _, _ = generator_output\n                else:\n                    raise ValueError('Output of generator should be '\n                                     'a tuple `(x, y, sample_weight)` '\n                                     'or `(x, y)`. Found: ' +\n                                     str(generator_output))\n            else:\n                # Assumes a generator that only\n                # yields inputs (not targets and sample weights).\n                x = generator_output\n\n            outs = self.predict_on_batch(x)\n            if not isinstance(outs, list):\n                outs = [outs]\n\n            if not all_outs:\n                for out in outs:\n                    all_outs.append([])\n\n            for i, out in enumerate(outs):\n                all_outs[i].append(out)\n            steps_done += 1\n            if verbose == 1:\n                progbar.update(steps_done)\n\n    finally:\n        if enqueuer is not None:\n            enqueuer.stop()\n\n    if len(all_outs) == 1:\n        if steps_done == 1:\n            return all_outs[0][0]\n        else:\n            return np.concatenate(all_outs[0])\n    if steps_done == 1:\n        return [out[0] for out in all_outs]\n    else:\n        return [np.concatenate(out) for out in all_outs]",
                "def handle_metrics(metrics, weights=None):\n    metric_name_prefix = 'weighted_' if weights is not None else ''\n\n    for metric in metrics:\n        if metric in ('accuracy', 'acc', 'crossentropy', 'ce'):\n            # custom handling of accuracy/crossentropy\n            # (because of class mode duality)\n            output_shape = self._internal_output_shapes[i]\n            if (output_shape[-1] == 1 or\n               self.loss_functions[i] == losses.binary_crossentropy):\n                # case: binary accuracy/crossentropy\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.binary_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.binary_crossentropy\n            elif self.loss_functions[i] == losses.sparse_categorical_crossentropy:\n                # case: categorical accuracy/crossentropy with sparse targets\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.sparse_categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.sparse_categorical_crossentropy\n            else:\n                # case: categorical accuracy/crossentropy\n                if metric in ('accuracy', 'acc'):\n                    metric_fn = metrics_module.categorical_accuracy\n                elif metric in ('crossentropy', 'ce'):\n                    metric_fn = metrics_module.categorical_crossentropy\n            if metric in ('accuracy', 'acc'):\n                    suffix = 'acc'\n            elif metric in ('crossentropy', 'ce'):\n                    suffix = 'ce'\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            metric_name = metric_name_prefix + suffix\n        else:\n            metric_fn = metrics_module.get(metric)\n            weighted_metric_fn = _weighted_masked_objective(metric_fn)\n            # Get metric name as string\n            if hasattr(metric_fn, 'name'):\n                metric_name = metric_fn.name\n            else:\n                metric_name = metric_fn.__name__\n            metric_name = metric_name_prefix + metric_name\n\n        with K.name_scope(metric_name):\n            metric_result = weighted_metric_fn(y_true, y_pred,\n                                               weights=weights,\n                                               mask=masks[i])\n\n        # Append to self.metrics_names, self.metric_tensors,\n        # self.stateful_metric_names\n        if len(self.output_names) > 1:\n            metric_name = self.output_names[i] + '_' + metric_name\n        # Dedupe name\n        j = 1\n        base_metric_name = metric_name\n        while metric_name in self.metrics_names:\n            metric_name = base_metric_name + '_' + str(j)\n            j += 1\n        self.metrics_names.append(metric_name)\n        self.metrics_tensors.append(metric_result)\n\n        # Keep track of state updates created by\n        # stateful metrics (i.e. metrics layers).\n        if isinstance(metric_fn, Layer) and metric_fn.stateful:\n            self.stateful_metric_names.append(metric_name)\n            self.metrics_updates += metric_fn.updates"
            ],
            "inscope_function_signatures": [
                "_standardize_input_data(data, names, shapes=None, check_batch_axis=True, exception_prefix='')",
                "_standardize_sample_or_class_weights(x_weight, output_names, weight_type)",
                "_standardize_class_weights(class_weight, output_names)",
                "_standardize_sample_weights(sample_weight, output_names)",
                "_check_array_lengths(inputs, targets, weights=None)",
                "_check_loss_and_target_compatibility(targets, loss_fns, output_shapes)",
                "_collect_metrics(metrics, output_names)",
                "_batch_shuffle(index_array, batch_size)",
                "_make_batches(size, batch_size)",
                "_slice_arrays(arrays, start=None, stop=None)",
                "_weighted_masked_objective(fn)",
                "_standardize_weights(y, sample_weight=None, class_weight=None, sample_weight_mode=None)",
                "set_of_lengths(x)",
                "weighted(y_true, y_pred, weights, mask=None)",
                "compile(self, optimizer, loss=None, metrics=None, loss_weights=None, sample_weight_mode=None, weighted_metrics=None, target_tensors=None, **kwargs)",
                "_check_trainable_weights_consistency(self)",
                "_make_train_function(self)",
                "_make_test_function(self)",
                "_make_predict_function(self)",
                "_check_num_samples(self, ins, batch_size=None, steps=None, steps_name='steps')",
                "_fit_loop(self, f, ins, out_labels=None, batch_size=None, epochs=100, verbose=1, callbacks=None, val_f=None, val_ins=None, shuffle=True, callback_metrics=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None)",
                "_predict_loop(self, f, ins, batch_size=32, verbose=0, steps=None)",
                "_test_loop(self, f, ins, batch_size=None, verbose=0, steps=None)",
                "_standardize_user_data(self, x, y, sample_weight=None, class_weight=None, check_array_lengths=True, batch_size=None)",
                "fit(self, x=None, y=None, batch_size=None, epochs=1, verbose=1, callbacks=None, validation_split=0.0, validation_data=None, shuffle=True, class_weight=None, sample_weight=None, initial_epoch=0, steps_per_epoch=None, validation_steps=None, **kwargs)",
                "evaluate(self, x=None, y=None, batch_size=None, verbose=1, sample_weight=None, steps=None)",
                "predict(self, x, batch_size=None, verbose=0, steps=None)",
                "train_on_batch(self, x, y, sample_weight=None, class_weight=None)",
                "test_on_batch(self, x, y, sample_weight=None)",
                "predict_on_batch(self, x)",
                "fit_generator(self, generator, steps_per_epoch=None, epochs=1, verbose=1, callbacks=None, validation_data=None, validation_steps=None, class_weight=None, max_queue_size=10, workers=1, use_multiprocessing=False, shuffle=True, initial_epoch=0)",
                "evaluate_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                "predict_generator(self, generator, steps=None, max_queue_size=10, workers=1, use_multiprocessing=False, verbose=0)",
                "handle_metrics(metrics, weights=None)"
            ],
            "variables_in_file": {
                "names": [
                    67,
                    99,
                    69,
                    104,
                    91,
                    78,
                    111,
                    52,
                    84,
                    87,
                    121,
                    59,
                    63
                ],
                "data": [
                    53,
                    56,
                    58,
                    61,
                    63,
                    68,
                    69,
                    70,
                    72,
                    74,
                    75,
                    76,
                    78,
                    79,
                    86,
                    93,
                    94,
                    98,
                    100,
                    106,
                    108,
                    124
                ],
                "hasattr": [
                    389,
                    390,
                    904,
                    393,
                    2197,
                    2333,
                    1065,
                    1453,
                    53,
                    1462,
                    2102,
                    2103,
                    967,
                    79,
                    2129,
                    978,
                    2386,
                    1365,
                    1113,
                    94,
                    1000,
                    1015,
                    1658,
                    1148,
                    381,
                    383
                ],
                "len": [
                    2560,
                    516,
                    529,
                    2093,
                    53,
                    59,
                    69,
                    78,
                    84,
                    86,
                    87,
                    91,
                    94,
                    99,
                    1635,
                    2149,
                    1638,
                    104,
                    2152,
                    108,
                    1645,
                    112,
                    628,
                    631,
                    1661,
                    637,
                    646,
                    142,
                    144,
                    145,
                    1171,
                    660,
                    152,
                    154,
                    2203,
                    156,
                    2206,
                    672,
                    675,
                    2215,
                    689,
                    693,
                    710,
                    1230,
                    208,
                    722,
                    212,
                    221,
                    1245,
                    765,
                    768,
                    772,
                    1288,
                    1311,
                    1314,
                    806,
                    819,
                    2356,
                    1342,
                    831,
                    332,
                    2391,
                    857,
                    2394,
                    1884,
                    2406,
                    1388,
                    2430,
                    1410,
                    2436,
                    1925,
                    917,
                    1946,
                    1435,
                    1439,
                    1443,
                    1446,
                    941,
                    2495,
                    970,
                    971,
                    478,
                    2528,
                    2530,
                    486,
                    492,
                    503,
                    507
                ],
                "ValueError": [
                    517,
                    510,
                    766,
                    273,
                    1811,
                    533,
                    2198,
                    664,
                    153,
                    1820,
                    673,
                    2209,
                    1063,
                    1068,
                    2095,
                    690,
                    54,
                    2358,
                    699,
                    2107,
                    65,
                    2497,
                    840,
                    80,
                    209,
                    2387,
                    213,
                    1622,
                    88,
                    217,
                    1496,
                    475,
                    2397,
                    222,
                    479,
                    1119,
                    1761,
                    226,
                    613,
                    741,
                    487,
                    2533,
                    1641,
                    2155,
                    109,
                    493,
                    752,
                    2417,
                    629,
                    119,
                    504,
                    254
                ],
                "exception_prefix": [
                    96,
                    110,
                    81,
                    55,
                    120,
                    89
                ],
                "_": [
                    2529,
                    2531,
                    301,
                    654,
                    143,
                    304,
                    660,
                    1397,
                    59,
                    637
                ],
                "range": [
                    1410,
                    772,
                    646,
                    1288,
                    1171,
                    660,
                    1300,
                    1175,
                    1183,
                    1314,
                    1443,
                    806,
                    941,
                    819,
                    59,
                    444,
                    710,
                    857,
                    355,
                    104,
                    1388,
                    1393,
                    637,
                    2430
                ],
                "isinstance": [
                    515,
                    764,
                    1667,
                    1418,
                    1674,
                    2189,
                    1678,
                    655,
                    145,
                    147,
                    1427,
                    661,
                    1302,
                    151,
                    1940,
                    1178,
                    671,
                    160,
                    2335,
                    930,
                    1828,
                    2084,
                    1190,
                    1322,
                    2219,
                    2347,
                    2221,
                    302,
                    688,
                    305,
                    1331,
                    1204,
                    309,
                    2486,
                    696,
                    2104,
                    2105,
                    2233,
                    61,
                    1219,
                    68,
                    69,
                    1236,
                    2260,
                    1878,
                    983,
                    1367,
                    2525,
                    610,
                    738,
                    1250,
                    2402,
                    1770,
                    2410,
                    1004,
                    2412,
                    2543,
                    2162,
                    627,
                    1395,
                    1651,
                    1018,
                    380,
                    1919
                ],
                "dict": [
                    160,
                    610,
                    515,
                    738,
                    2412,
                    2221,
                    305,
                    147,
                    661,
                    696,
                    61
                ],
                "__class__.__name__": [
                    63
                ],
                "__class__": [
                    63
                ],
                "x": [
                    1920,
                    385,
                    1922,
                    387,
                    1679,
                    1681,
                    1810,
                    1938,
                    1941,
                    1815,
                    1943,
                    1819,
                    2204,
                    2207,
                    1824,
                    1829,
                    1831,
                    2215,
                    2219,
                    2220,
                    1917,
                    2221,
                    2222,
                    2224,
                    2229,
                    63,
                    1473,
                    72,
                    200,
                    203,
                    76,
                    1490,
                    211,
                    1874,
                    1621,
                    1875,
                    1495,
                    1879,
                    1881,
                    1626,
                    1627,
                    1500,
                    1501,
                    2392,
                    2395,
                    1760,
                    2401,
                    2529,
                    2531,
                    1765,
                    1766,
                    2406,
                    2410,
                    1771,
                    2411,
                    1773,
                    2412,
                    2413,
                    2415,
                    2540,
                    2542,
                    1658,
                    1659,
                    1916,
                    1661,
                    1662
                ],
                "values": [
                    63
                ],
                "KeyError": [
                    64
                ],
                "e.args": [
                    66
                ],
                "e": [
                    66
                ],
                "str": [
                    512,
                    768,
                    771,
                    511,
                    274,
                    275,
                    2201,
                    154,
                    667,
                    156,
                    923,
                    1824,
                    1825,
                    675,
                    2212,
                    677,
                    2339,
                    681,
                    171,
                    693,
                    695,
                    316,
                    702,
                    67,
                    211,
                    84,
                    1620,
                    86,
                    215,
                    2390,
                    219,
                    220,
                    91,
                    93,
                    477,
                    224,
                    481,
                    98,
                    1371,
                    228,
                    229,
                    2400,
                    631,
                    488,
                    616,
                    745,
                    1500,
                    2536,
                    494,
                    2158,
                    112,
                    113,
                    633,
                    507,
                    505,
                    122,
                    123,
                    255
                ],
                "list": [
                    655,
                    145,
                    1427,
                    1302,
                    151,
                    671,
                    1190,
                    2219,
                    302,
                    2222,
                    688,
                    1331,
                    1204,
                    309,
                    2233,
                    444,
                    68,
                    1236,
                    2260,
                    216,
                    219,
                    220,
                    225,
                    1250,
                    2402,
                    228,
                    229,
                    2410,
                    2413,
                    2543,
                    627,
                    1395,
                    380,
                    764
                ],
                "float": [
                    1219,
                    2435,
                    69,
                    1322,
                    1418,
                    1401
                ],
                "int": [
                    1667,
                    1828,
                    69,
                    1674,
                    1770,
                    1004,
                    332,
                    1678,
                    2162,
                    1651,
                    1940,
                    1878,
                    983,
                    1018,
                    1659,
                    1661,
                    1919
                ],
                "np.asarray": [
                    100,
                    70,
                    526
                ],
                "np": [
                    2432,
                    2564,
                    1415,
                    520,
                    2568,
                    522,
                    526,
                    540,
                    542,
                    1312,
                    1313,
                    1319,
                    1337,
                    1213,
                    70,
                    76,
                    338,
                    340,
                    100,
                    1128
                ],
                "x.__class__.__name__": [
                    72
                ],
                "x.__class__": [
                    72
                ],
                "x.values": [
                    72,
                    2413,
                    2222
                ],
                "data.__class__.__name__": [
                    74
                ],
                "data.__class__": [
                    74
                ],
                "data.values": [
                    74
                ],
                "x.ndim": [
                    76
                ],
                "np.expand_dims": [
                    76
                ],
                "TypeError": [
                    708,
                    166,
                    680,
                    1224,
                    1225,
                    1620,
                    314,
                    95
                ],
                "shapes": [
                    105,
                    107,
                    103
                ],
                "i": [
                    104,
                    105,
                    106,
                    107,
                    108,
                    111,
                    121,
                    646,
                    647,
                    648,
                    649,
                    1171,
                    1172,
                    1173,
                    710,
                    711,
                    714,
                    715,
                    717,
                    1232,
                    1233,
                    724,
                    725,
                    727,
                    730,
                    732,
                    746,
                    747,
                    772,
                    773,
                    1288,
                    777,
                    778,
                    1289,
                    1290,
                    789,
                    790,
                    1307,
                    1308,
                    2334,
                    1313,
                    1314,
                    2338,
                    806,
                    807,
                    808,
                    1327,
                    1328,
                    819,
                    820,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    1338,
                    1339,
                    833,
                    857,
                    858,
                    1370,
                    861,
                    862,
                    863,
                    864,
                    865,
                    354,
                    355,
                    874,
                    876,
                    1388,
                    1389,
                    1390,
                    882,
                    1399,
                    1400,
                    1401,
                    1403,
                    2430,
                    2431,
                    2432,
                    1410,
                    1411,
                    1412,
                    2435,
                    1423,
                    1424,
                    913,
                    918,
                    1431,
                    1432,
                    1433,
                    1435,
                    1443,
                    1444,
                    1445,
                    941,
                    942,
                    943,
                    2550,
                    2551
                ],
                "data_shape": [
                    106,
                    113,
                    115,
                    117,
                    123
                ],
                "shape": [
                    271,
                    275,
                    1819,
                    1824,
                    1066,
                    2220,
                    2222,
                    1336,
                    1337,
                    714,
                    722,
                    1495,
                    729,
                    1115,
                    1500,
                    106,
                    107,
                    108,
                    2411,
                    2413,
                    112,
                    116,
                    117,
                    249,
                    122,
                    1659
                ],
                "ndim": [
                    442,
                    444,
                    108
                ],
                "check_batch_axis": [
                    114
                ],
                "dim": [
                    117,
                    118
                ],
                "ref_dim": [
                    117,
                    118
                ],
                "zip": [
                    1253,
                    1192,
                    271,
                    1487,
                    1459,
                    117,
                    1238,
                    1207,
                    249,
                    2263,
                    2235
                ],
                "x_weight": [
                    160,
                    163,
                    171,
                    142,
                    145,
                    146,
                    147,
                    148,
                    150,
                    151,
                    152,
                    154,
                    159
                ],
                "output_names": [
                    162,
                    301,
                    143,
                    144,
                    176,
                    304,
                    147,
                    148,
                    307,
                    182,
                    152,
                    156
                ],
                "weight_type": [
                    153,
                    169,
                    157,
                    167
                ],
                "x_weights": [
                    161,
                    163,
                    164
                ],
                "name": [
                    778,
                    781,
                    785,
                    789,
                    662,
                    663,
                    665,
                    669,
                    670,
                    797,
                    162,
                    163,
                    802,
                    2338,
                    2339,
                    307,
                    308,
                    697,
                    698,
                    700,
                    704,
                    705,
                    715,
                    723,
                    728,
                    1370,
                    1371,
                    611,
                    612,
                    739,
                    614,
                    740,
                    743,
                    618,
                    619,
                    620,
                    746,
                    751,
                    624,
                    752,
                    626,
                    755,
                    757,
                    761
                ],
                "x_weights.append": [
                    163
                ],
                "x_weight.get": [
                    163
                ],
                "_standardize_sample_or_class_weights": [
                    181,
                    175
                ],
                "class_weight": [
                    515,
                    1483,
                    526,
                    527,
                    175,
                    532,
                    1877,
                    2231,
                    1629
                ],
                "sample_weight": [
                    514,
                    2205,
                    2207,
                    181,
                    2230,
                    825,
                    830,
                    1481,
                    1876,
                    2393,
                    2395,
                    1628,
                    2401,
                    486,
                    1767,
                    488,
                    492,
                    494,
                    502,
                    503,
                    505,
                    509,
                    1918,
                    511
                ],
                "set": [
                    531,
                    203,
                    532
                ],
                "y": [
                    512,
                    1920,
                    1922,
                    516,
                    519,
                    520,
                    521,
                    522,
                    524,
                    271,
                    1679,
                    1681,
                    274,
                    540,
                    2204,
                    542,
                    2207,
                    1917,
                    1663,
                    2229,
                    1477,
                    203,
                    1487,
                    1490,
                    1491,
                    1874,
                    1621,
                    1875,
                    215,
                    1879,
                    1881,
                    1626,
                    1627,
                    2392,
                    1501,
                    253,
                    478,
                    1760,
                    481,
                    2395,
                    2401,
                    1765,
                    1766,
                    1771,
                    1773,
                    503,
                    249,
                    250,
                    507,
                    1916,
                    509,
                    255
                ],
                "y.shape": [
                    512,
                    481,
                    509,
                    503,
                    516,
                    519,
                    542,
                    521,
                    522,
                    203,
                    271,
                    274,
                    215,
                    507,
                    540,
                    253,
                    478,
                    255
                ],
                "set_x": [
                    208,
                    219,
                    205,
                    216
                ],
                "set_of_lengths": [
                    205,
                    206,
                    207
                ],
                "inputs": [
                    993,
                    1025,
                    1003,
                    205,
                    1005,
                    1008,
                    211,
                    982,
                    984,
                    1019,
                    1021
                ],
                "set_y": [
                    225,
                    228,
                    206,
                    212,
                    216,
                    220
                ],
                "targets": [
                    249,
                    206,
                    215
                ],
                "set_w": [
                    225,
                    221,
                    229,
                    207
                ],
                "weights": [
                    224,
                    868,
                    935,
                    526,
                    207,
                    912,
                    529,
                    440,
                    537,
                    443,
                    445,
                    446,
                    863
                ],
                "x.shape": [
                    2224,
                    211,
                    2415
                ],
                "w.shape": [
                    224
                ],
                "w": [
                    224
                ],
                "key_losses": [
                    246,
                    270
                ],
                "losses.mean_squared_error": [
                    246
                ],
                "losses": [
                    636,
                    1463,
                    876,
                    626,
                    882,
                    1460,
                    246,
                    247,
                    248,
                    634,
                    252
                ],
                "losses.binary_crossentropy": [
                    876,
                    247
                ],
                "losses.categorical_crossentropy": [
                    248,
                    252
                ],
                "loss": [
                    636,
                    610,
                    611,
                    619,
                    270,
                    633,
                    626,
                    627,
                    276,
                    628,
                    634,
                    249,
                    250,
                    603,
                    252,
                    605
                ],
                "loss_fns": [
                    249
                ],
                "output_shapes": [
                    1478,
                    1458,
                    1461,
                    249,
                    1468,
                    1470
                ],
                "target_dim": [
                    272,
                    271
                ],
                "out_dim": [
                    272,
                    271
                ],
                "loss.__name__": [
                    276
                ],
                "metrics": [
                    870,
                    811,
                    300,
                    302,
                    304,
                    305,
                    308,
                    852,
                    316
                ],
                "copy.copy": [
                    304,
                    1691,
                    1693
                ],
                "copy": [
                    304,
                    1691,
                    1693
                ],
                "nested_metrics": [
                    864,
                    306,
                    852,
                    311,
                    312
                ],
                "output_metrics": [
                    864,
                    934,
                    308,
                    309,
                    310,
                    311
                ],
                "metrics.get": [
                    308
                ],
                "nested_metrics.append": [
                    311
                ],
                "batch_count": [
                    336,
                    337,
                    332,
                    335
                ],
                "index_array": [
                    1217,
                    1319,
                    1128,
                    1321,
                    1415,
                    1417,
                    332,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    1211,
                    1213
                ],
                "batch_size": [
                    1155,
                    1414,
                    1808,
                    1809,
                    1819,
                    1825,
                    1699,
                    1062,
                    1318,
                    1834,
                    2218,
                    2220,
                    2222,
                    2224,
                    1201,
                    2226,
                    1211,
                    1215,
                    332,
                    1612,
                    1613,
                    335,
                    336,
                    337,
                    2257,
                    1494,
                    1495,
                    1630,
                    1375,
                    1248,
                    353,
                    354,
                    1758,
                    1124,
                    1759,
                    1768,
                    2409,
                    2411,
                    2413,
                    2415,
                    2416,
                    1777,
                    1650,
                    2421,
                    1278
                ],
                "last_batch": [
                    340,
                    335
                ],
                "index_array.reshape": [
                    337
                ],
                "np.random.shuffle": [
                    338,
                    1213
                ],
                "np.random": [
                    338,
                    1213
                ],
                "index_array.flatten": [
                    339
                ],
                "np.append": [
                    340
                ],
                "num_batches": [
                    353,
                    355
                ],
                "size": [
                    353,
                    354
                ],
                "min": [
                    354
                ],
                "arrays": [
                    385,
                    387,
                    392,
                    394,
                    378,
                    380
                ],
                "start": [
                    384,
                    385,
                    387,
                    389,
                    390,
                    391,
                    392,
                    393,
                    394,
                    381,
                    383
                ],
                "start.tolist": [
                    384,
                    391
                ],
                "stop": [
                    394,
                    387
                ],
                "fn": [
                    639,
                    413,
                    429
                ],
                "score_array": [
                    429,
                    434,
                    437,
                    442,
                    444,
                    445,
                    446,
                    447
                ],
                "y_true": [
                    861,
                    429,
                    911,
                    822,
                    829
                ],
                "y_pred": [
                    429,
                    911,
                    823,
                    829,
                    862
                ],
                "mask": [
                    430,
                    432,
                    434,
                    437,
                    826,
                    830
                ],
                "K.cast": [
                    432,
                    446
                ],
                "K": [
                    1025,
                    1667,
                    1289,
                    1674,
                    780,
                    910,
                    1678,
                    784,
                    1172,
                    1940,
                    796,
                    540,
                    542,
                    801,
                    1828,
                    432,
                    818,
                    437,
                    442,
                    443,
                    444,
                    828,
                    446,
                    447,
                    720,
                    722,
                    724,
                    725,
                    1878,
                    983,
                    856,
                    984,
                    986,
                    987,
                    993,
                    1770,
                    1004,
                    1005,
                    1389,
                    1008,
                    2162,
                    1651,
                    756,
                    760,
                    1018,
                    1019,
                    1919
                ],
                "K.floatx": [
                    432,
                    540,
                    446,
                    542
                ],
                "K.mean": [
                    444,
                    437,
                    446,
                    447
                ],
                "K.ndim": [
                    442,
                    443
                ],
                "weight_ndim": [
                    443,
                    444
                ],
                "K.not_equal": [
                    446
                ],
                "weighted": [
                    448
                ],
                "sample_weight_mode": [
                    738,
                    739,
                    771,
                    794,
                    765,
                    777,
                    751,
                    755,
                    473,
                    474,
                    539,
                    764,
                    477,
                    607
                ],
                "sample_weight.shape": [
                    486,
                    488,
                    492,
                    494,
                    503,
                    505,
                    509,
                    511
                ],
                "sample_weight.ndim": [
                    509
                ],
                "y_classes": [
                    520,
                    522,
                    524,
                    526,
                    529,
                    531
                ],
                "np.argmax": [
                    520
                ],
                "np.reshape": [
                    522
                ],
                "cls": [
                    526,
                    527
                ],
                "existing_classes": [
                    536,
                    531
                ],
                "existing_class_weight": [
                    536,
                    532
                ],
                "class_weight.keys": [
                    532
                ],
                "np.ones": [
                    540,
                    542
                ],
                "Container": [
                    545
                ],
                "self.optimizer": [
                    988,
                    987,
                    604
                ],
                "self": [
                    1024,
                    1025,
                    1026,
                    1027,
                    2080,
                    2082,
                    2113,
                    2117,
                    2119,
                    2124,
                    2125,
                    2129,
                    2130,
                    2132,
                    1626,
                    604,
                    605,
                    606,
                    607,
                    612,
                    1124,
                    616,
                    618,
                    1130,
                    1132,
                    1647,
                    2159,
                    2162,
                    1651,
                    628,
                    1141,
                    1142,
                    631,
                    1148,
                    637,
                    638,
                    1149,
                    1151,
                    642,
                    643,
                    644,
                    645,
                    1667,
                    1674,
                    652,
                    2188,
                    654,
                    1678,
                    1169,
                    1682,
                    1683,
                    660,
                    1686,
                    663,
                    1177,
                    1689,
                    667,
                    1690,
                    669,
                    672,
                    1698,
                    675,
                    685,
                    686,
                    1200,
                    689,
                    693,
                    2229,
                    698,
                    702,
                    704,
                    710,
                    2246,
                    712,
                    714,
                    715,
                    2255,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    730,
                    733,
                    1247,
                    740,
                    1765,
                    745,
                    746,
                    1259,
                    1770,
                    1878,
                    1774,
                    1775,
                    1776,
                    2283,
                    765,
                    1278,
                    768,
                    772,
                    1288,
                    1289,
                    778,
                    789,
                    1815,
                    1816,
                    1818,
                    2330,
                    2333,
                    2334,
                    2338,
                    2339,
                    804,
                    805,
                    806,
                    1828,
                    808,
                    1832,
                    1833,
                    811,
                    812,
                    813,
                    814,
                    1834,
                    819,
                    822,
                    823,
                    828,
                    831,
                    832,
                    833,
                    839,
                    847,
                    1874,
                    852,
                    853,
                    854,
                    855,
                    1365,
                    857,
                    1366,
                    1370,
                    1371,
                    861,
                    862,
                    1375,
                    1882,
                    1883,
                    2401,
                    874,
                    1386,
                    876,
                    882,
                    1916,
                    1919,
                    1923,
                    1924,
                    1938,
                    1939,
                    1940,
                    917,
                    918,
                    1944,
                    1945,
                    922,
                    925,
                    926,
                    931,
                    932,
                    938,
                    939,
                    940,
                    941,
                    1453,
                    943,
                    2481,
                    1459,
                    948,
                    950,
                    951,
                    952,
                    955,
                    956,
                    1473,
                    1474,
                    1477,
                    967,
                    970,
                    971,
                    1482,
                    1484,
                    1487,
                    978,
                    980,
                    981,
                    982,
                    983,
                    1492,
                    1493,
                    1494,
                    987,
                    988,
                    989,
                    990,
                    991,
                    993,
                    994,
                    997,
                    1000,
                    1002,
                    1003,
                    1004,
                    2542,
                    1008,
                    1009,
                    1010,
                    1012,
                    1015,
                    1016,
                    1017,
                    1018,
                    1019,
                    1021
                ],
                "optimizers.get": [
                    604
                ],
                "optimizers": [
                    604
                ],
                "optimizer": [
                    604
                ],
                "self.loss": [
                    605
                ],
                "self.loss_weights": [
                    606
                ],
                "loss_weights": [
                    672,
                    677,
                    678,
                    606,
                    681,
                    659,
                    661,
                    662,
                    670,
                    671
                ],
                "self.sample_weight_mode": [
                    607
                ],
                "self.output_names": [
                    772,
                    778,
                    789,
                    917,
                    663,
                    918,
                    667,
                    669,
                    698,
                    828,
                    702,
                    704,
                    833,
                    715,
                    852,
                    853,
                    612,
                    740,
                    616,
                    745,
                    618,
                    746
                ],
                "loss_functions": [
                    617,
                    626,
                    634,
                    637,
                    638,
                    639
                ],
                "warnings.warn": [
                    2086,
                    972,
                    620,
                    2349,
                    1616,
                    2488
                ],
                "warnings": [
                    2086,
                    972,
                    620,
                    2349,
                    1616,
                    2488
                ],
                "loss_functions.append": [
                    626
                ],
                "losses.get": [
                    626,
                    636,
                    634
                ],
                "loss.get": [
                    626
                ],
                "self.outputs": [
                    768,
                    1026,
                    637,
                    654,
                    660,
                    672,
                    675,
                    806,
                    689,
                    819,
                    693,
                    823,
                    831,
                    710,
                    724,
                    725,
                    727,
                    857,
                    862,
                    628,
                    631,
                    765
                ],
                "l": [
                    1239,
                    1253,
                    1254,
                    2263,
                    1192,
                    1193,
                    1238,
                    1207,
                    1208,
                    634,
                    2235,
                    2236,
                    2264
                ],
                "loss_function": [
                    636,
                    637
                ],
                "self.loss_functions": [
                    730,
                    876,
                    638,
                    882
                ],
                "weighted_losses": [
                    647,
                    824,
                    646,
                    639
                ],
                "_weighted_masked_objective": [
                    898,
                    902,
                    639
                ],
                "skip_target_indices": [
                    640,
                    711,
                    648,
                    820,
                    858
                ],
                "skip_target_weighing_indices": [
                    641,
                    773,
                    807,
                    649,
                    747,
                    942,
                    790,
                    732
                ],
                "self._feed_outputs": [
                    642,
                    727
                ],
                "self._feed_output_names": [
                    643,
                    1477,
                    1482,
                    1484,
                    728
                ],
                "self._feed_output_shapes": [
                    729,
                    1459,
                    644,
                    1493
                ],
                "self._feed_loss_fns": [
                    730,
                    1459,
                    1492,
                    645
                ],
                "skip_target_indices.append": [
                    648
                ],
                "skip_target_weighing_indices.append": [
                    649,
                    732
                ],
                "masks": [
                    652,
                    653,
                    654,
                    655,
                    656,
                    913,
                    826
                ],
                "self.compute_mask": [
                    652
                ],
                "self.inputs": [
                    652
                ],
                "loss_weights_list": [
                    678,
                    660,
                    827,
                    668,
                    670
                ],
                "loss_weights_list.append": [
                    670
                ],
                "loss_weights.get": [
                    670
                ],
                "self.targets": [
                    712,
                    861,
                    685,
                    822,
                    733
                ],
                "self._feed_targets": [
                    1386,
                    1003,
                    686,
                    1169,
                    982,
                    726
                ],
                "target_tensors": [
                    705,
                    706,
                    709,
                    716,
                    717,
                    687,
                    688,
                    689,
                    695,
                    696,
                    697
                ],
                "tmp_target_tensors": [
                    705,
                    706,
                    703
                ],
                "tmp_target_tensors.append": [
                    705
                ],
                "target_tensors.get": [
                    705
                ],
                "self.targets.append": [
                    712,
                    733
                ],
                "self._internal_output_shapes": [
                    714,
                    874
                ],
                "target": [
                    717,
                    719,
                    720,
                    721,
                    722,
                    726,
                    733
                ],
                "K.is_placeholder": [
                    720
                ],
                "K.placeholder": [
                    801,
                    780,
                    784,
                    722,
                    756,
                    760,
                    796
                ],
                "K.is_sparse": [
                    1172,
                    724,
                    1389,
                    1289
                ],
                "K.dtype": [
                    725
                ],
                "self._feed_targets.append": [
                    726
                ],
                "self._feed_outputs.append": [
                    727
                ],
                "self._feed_output_names.append": [
                    728
                ],
                "self._feed_output_shapes.append": [
                    729
                ],
                "self._feed_loss_fns.append": [
                    730
                ],
                "sample_weights": [
                    1664,
                    1665,
                    1666,
                    1920,
                    1922,
                    1679,
                    1681,
                    787,
                    792,
                    795,
                    800,
                    939,
                    943,
                    825,
                    1481,
                    1485,
                    1487,
                    1490,
                    1874,
                    1879,
                    1881,
                    1626,
                    1501,
                    863,
                    736,
                    1765,
                    1771,
                    1773,
                    763,
                    1916
                ],
                "sample_weight_modes": [
                    737,
                    803,
                    804,
                    775,
                    749,
                    782,
                    786,
                    758,
                    791,
                    762,
                    798
                ],
                "enumerate": [
                    1216,
                    1431,
                    2338,
                    1320,
                    1416,
                    746,
                    1370,
                    789,
                    1397,
                    1399,
                    1429,
                    2550,
                    1338,
                    1307,
                    2334
                ],
                "weight": [
                    774,
                    748,
                    780,
                    784,
                    787,
                    756,
                    760,
                    763
                ],
                "sample_weight_modes.append": [
                    803,
                    775,
                    749,
                    782,
                    786,
                    758,
                    791,
                    762,
                    798
                ],
                "sample_weight_mode.get": [
                    755
                ],
                "sample_weights.append": [
                    800,
                    795,
                    787,
                    792,
                    763
                ],
                "mode": [
                    777,
                    779,
                    1485,
                    1486
                ],
                "self.sample_weight_modes": [
                    808,
                    804
                ],
                "self._feed_sample_weight_modes": [
                    808,
                    805,
                    1487
                ],
                "self._feed_sample_weight_modes.append": [
                    808
                ],
                "self.metrics": [
                    811,
                    2188,
                    1366,
                    1177,
                    2334
                ],
                "self.weighted_metrics": [
                    812
                ],
                "weighted_metrics": [
                    812,
                    853
                ],
                "self.metrics_names": [
                    833,
                    2113,
                    2338,
                    1370,
                    813,
                    1686,
                    922,
                    925
                ],
                "self.metrics_tensors": [
                    832,
                    994,
                    814,
                    1009,
                    926
                ],
                "total_loss": [
                    834,
                    835,
                    837,
                    838,
                    938,
                    843,
                    848,
                    817
                ],
                "K.name_scope": [
                    910,
                    818,
                    856,
                    986,
                    987,
                    828
                ],
                "weighted_loss": [
                    824,
                    829
                ],
                "loss_weight": [
                    835,
                    827,
                    837
                ],
                "output_loss": [
                    832,
                    835,
                    837,
                    829
                ],
                "self.metrics_tensors.append": [
                    832,
                    926
                ],
                "self.metrics_names.append": [
                    833,
                    925
                ],
                "self.losses": [
                    847,
                    839
                ],
                "loss_tensor": [
                    848,
                    847
                ],
                "_collect_metrics": [
                    852,
                    853
                ],
                "nested_weighted_metrics": [
                    865,
                    853
                ],
                "self.metrics_updates": [
                    1010,
                    932,
                    854,
                    991
                ],
                "self.stateful_metric_names": [
                    931,
                    2339,
                    2119,
                    1132,
                    2124,
                    1141,
                    855,
                    1371
                ],
                "output_weighted_metrics": [
                    865,
                    935
                ],
                "metric_name_prefix": [
                    908,
                    899,
                    868
                ],
                "metric": [
                    896,
                    901,
                    870,
                    871,
                    878,
                    880,
                    884,
                    886,
                    890,
                    892,
                    894
                ],
                "output_shape": [
                    874,
                    875,
                    1459,
                    1461,
                    1470
                ],
                "metric_fn": [
                    898,
                    930,
                    932,
                    901,
                    902,
                    904,
                    905,
                    907,
                    879,
                    881,
                    885,
                    887,
                    891,
                    893
                ],
                "metrics_module.binary_accuracy": [
                    879
                ],
                "metrics_module": [
                    901,
                    879,
                    881,
                    885,
                    887,
                    891,
                    893
                ],
                "metrics_module.binary_crossentropy": [
                    881
                ],
                "losses.sparse_categorical_crossentropy": [
                    882,
                    1460
                ],
                "metrics_module.sparse_categorical_accuracy": [
                    885
                ],
                "metrics_module.sparse_categorical_crossentropy": [
                    887
                ],
                "metrics_module.categorical_accuracy": [
                    891
                ],
                "metrics_module.categorical_crossentropy": [
                    893
                ],
                "suffix": [
                    897,
                    899,
                    895
                ],
                "weighted_metric_fn": [
                    898,
                    902,
                    911
                ],
                "metric_name": [
                    899,
                    931,
                    905,
                    907,
                    908,
                    910,
                    918,
                    921,
                    922,
                    923,
                    925
                ],
                "metrics_module.get": [
                    901
                ],
                "metric_fn.name": [
                    905
                ],
                "metric_fn.__name__": [
                    907
                ],
                "metric_result": [
                    926,
                    911
                ],
                "j": [
                    920,
                    923,
                    924
                ],
                "base_metric_name": [
                    921,
                    923
                ],
                "Layer": [
                    930,
                    2189,
                    1367,
                    1178,
                    2335
                ],
                "metric_fn.stateful": [
                    930
                ],
                "self.stateful_metric_names.append": [
                    931
                ],
                "metric_fn.updates": [
                    932
                ],
                "handle_metrics": [
                    934,
                    935
                ],
                "self.total_loss": [
                    1009,
                    938,
                    994,
                    990
                ],
                "self.sample_weights": [
                    939,
                    941
                ],
                "self._feed_sample_weights": [
                    1386,
                    1003,
                    940,
                    943,
                    1169,
                    982
                ],
                "self._feed_sample_weights.append": [
                    943
                ],
                "self._function_kwargs": [
                    1012,
                    948,
                    997
                ],
                "kwargs": [
                    1024,
                    1029,
                    1615,
                    1618,
                    1619,
                    948,
                    1620
                ],
                "self.train_function": [
                    993,
                    1683,
                    981,
                    950,
                    1883
                ],
                "self.test_function": [
                    1924,
                    1002,
                    1775,
                    1008,
                    951,
                    1690
                ],
                "self.predict_function": [
                    1025,
                    1833,
                    952,
                    1016,
                    1945,
                    1017
                ],
                "trainable_weights": [
                    955,
                    956
                ],
                "self.trainable_weights": [
                    970,
                    955
                ],
                "self._collected_trainable_weights": [
                    971,
                    956,
                    989
                ],
                "UserWarning": [
                    2489,
                    972,
                    2350,
                    2087
                ],
                "RuntimeError": [
                    1001,
                    979,
                    1454
                ],
                "self._check_trainable_weights_consistency": [
                    980
                ],
                "self._feed_inputs": [
                    1288,
                    1289,
                    1386,
                    1003,
                    1169,
                    982,
                    1019,
                    1021
                ],
                "self.uses_learning_phase": [
                    1667,
                    1828,
                    1674,
                    1770,
                    1004,
                    1678,
                    2162,
                    1651,
                    1940,
                    1878,
                    983,
                    1018,
                    1919
                ],
                "K.learning_phase": [
                    1667,
                    1828,
                    1674,
                    1770,
                    1004,
                    1005,
                    1678,
                    2162,
                    1651,
                    1940,
                    1878,
                    983,
                    984,
                    1018,
                    1019,
                    1919
                ],
                "self.optimizer.__class__.__name__": [
                    987
                ],
                "self.optimizer.__class__": [
                    987
                ],
                "training_updates": [
                    988,
                    991
                ],
                "self.optimizer.get_updates": [
                    988
                ],
                "updates": [
                    995,
                    991
                ],
                "self.updates": [
                    991
                ],
                "K.function": [
                    1008,
                    993,
                    1025
                ],
                "self.state_updates": [
                    1010,
                    1027
                ],
                "getattr": [
                    1024,
                    1463
                ],
                "steps": [
                    1282,
                    1283,
                    1412,
                    1292,
                    1808,
                    1810,
                    1300,
                    1060,
                    1835,
                    2354,
                    2356,
                    2493,
                    2495,
                    2382,
                    2384,
                    2521,
                    2523,
                    1758,
                    1376,
                    1760,
                    1380,
                    1381,
                    1392,
                    1393,
                    1779,
                    1279
                ],
                "num_samples": [
                    1285,
                    1061,
                    1318,
                    1319,
                    1383,
                    1066,
                    1414,
                    1415,
                    1445,
                    1071,
                    1336,
                    1278,
                    1375
                ],
                "steps_name": [
                    1069,
                    1063
                ],
                "ins": [
                    1920,
                    1922,
                    1924,
                    1289,
                    1418,
                    1420,
                    1422,
                    1679,
                    1681,
                    1172,
                    1301,
                    1941,
                    1943,
                    1945,
                    1698,
                    1188,
                    1829,
                    1831,
                    1065,
                    1066,
                    1322,
                    1324,
                    1834,
                    1326,
                    1219,
                    1221,
                    1223,
                    1879,
                    1113,
                    1881,
                    1115,
                    1883,
                    1375,
                    1124,
                    1771,
                    1389,
                    1773,
                    1776,
                    1394,
                    1278
                ],
                "do_validation": [
                    1632,
                    2081,
                    1634,
                    2147,
                    2244,
                    1160,
                    1673,
                    1688,
                    1199,
                    1110,
                    1112,
                    1657,
                    2138,
                    1117,
                    1246,
                    2079
                ],
                "val_f": [
                    1701,
                    1200,
                    1111,
                    1690,
                    1694,
                    1247
                ],
                "val_ins": [
                    1668,
                    1701,
                    1670,
                    1675,
                    1166,
                    1200,
                    1695,
                    1652,
                    1654,
                    1111,
                    1113,
                    1115,
                    1247
                ],
                "verbose": [
                    1408,
                    1281,
                    1441,
                    1379,
                    1700,
                    2137,
                    1159,
                    2120,
                    1835,
                    1133,
                    2381,
                    2553,
                    1778,
                    2422,
                    2520,
                    1113,
                    1340,
                    1309
                ],
                "print": [
                    1114
                ],
                "validation_steps": [
                    1672,
                    1705,
                    2248,
                    1202,
                    2106,
                    1116
                ],
                "steps_per_epoch": [
                    2244,
                    1157,
                    1125,
                    1704,
                    2091,
                    1612,
                    2093,
                    1134,
                    2194,
                    1621,
                    2136,
                    1118,
                    1182,
                    1183
                ],
                "num_train_samples": [
                    1124,
                    1158,
                    1127,
                    1128,
                    1215
                ],
                "self._check_num_samples": [
                    1124,
                    1278,
                    1375
                ],
                "np.arange": [
                    1128,
                    1415,
                    1319
                ],
                "self.history": [
                    2117,
                    1130,
                    1259,
                    2283,
                    2125,
                    1142
                ],
                "cbks.History": [
                    1130,
                    2117
                ],
                "cbks": [
                    2117,
                    2118,
                    1130,
                    1131,
                    2122,
                    2126,
                    1139,
                    1143
                ],
                "_callbacks": [
                    2118,
                    2121,
                    1131,
                    2125,
                    2126,
                    1138,
                    1142,
                    1143
                ],
                "cbks.BaseLogger": [
                    1131,
                    2118
                ],
                "count_mode": [
                    1137,
                    1140,
                    1135
                ],
                "_callbacks.append": [
                    2121,
                    1138
                ],
                "cbks.ProgbarLogger": [
                    2122,
                    1139
                ],
                "callbacks": [
                    1153,
                    1154,
                    1163,
                    1165,
                    2191,
                    1180,
                    1187,
                    1700,
                    1195,
                    2227,
                    2238,
                    2125,
                    2126,
                    1231,
                    2133,
                    2134,
                    1241,
                    2141,
                    2269,
                    1255,
                    1258,
                    2282,
                    2164,
                    1142,
                    1143
                ],
                "cbks.CallbackList": [
                    2126,
                    1143
                ],
                "out_labels": [
                    2113,
                    1698,
                    2114,
                    1253,
                    1192,
                    2235,
                    1238,
                    1207,
                    1144,
                    1686,
                    2263,
                    1691,
                    1693
                ],
                "self.callback_model": [
                    2129,
                    2130,
                    1148,
                    1149
                ],
                "callback_model": [
                    1153,
                    2271,
                    1256,
                    2184,
                    2266,
                    1196,
                    1164,
                    2130,
                    2132,
                    2133,
                    1242,
                    1149,
                    1151
                ],
                "callbacks.set_model": [
                    1153,
                    2133
                ],
                "callbacks.set_params": [
                    1154,
                    2134
                ],
                "epochs": [
                    1699,
                    1156,
                    2187,
                    1618,
                    2135,
                    1175
                ],
                "callback_metrics": [
                    2114,
                    1702,
                    1161,
                    2139,
                    1691,
                    1693
                ],
                "callbacks.on_train_begin": [
                    1163,
                    2141
                ],
                "callback_model.stop_training": [
                    1256,
                    2184,
                    2266,
                    1196,
                    1164,
                    1242,
                    2271
                ],
                "cbk": [
                    2165,
                    2164,
                    1165,
                    1166
                ],
                "cbk.validation_data": [
                    2165,
                    1166
                ],
                "feed": [
                    1386,
                    1388,
                    1389,
                    1169,
                    1171,
                    1172
                ],
                "indices_for_conversion_to_dense": [
                    1287,
                    1290,
                    1387,
                    1390,
                    1327,
                    1232,
                    1423,
                    1170,
                    1173
                ],
                "issparse": [
                    1289,
                    1172,
                    1389
                ],
                "indices_for_conversion_to_dense.append": [
                    1290,
                    1173,
                    1390
                ],
                "epoch": [
                    1255,
                    2187,
                    2191,
                    1175,
                    2269,
                    1180,
                    2077,
                    2270
                ],
                "initial_epoch": [
                    1703,
                    2077,
                    1175
                ],
                "m": [
                    2336,
                    2188,
                    2189,
                    2190,
                    1366,
                    1367,
                    1368,
                    1177,
                    1178,
                    1179,
                    2334,
                    2335
                ],
                "m.stateful": [
                    1178,
                    2335,
                    2189,
                    1367
                ],
                "m.reset_states": [
                    1368,
                    2336,
                    1179,
                    2190
                ],
                "callbacks.on_epoch_begin": [
                    1180,
                    2191
                ],
                "epoch_logs": [
                    1254,
                    1255,
                    2186,
                    1208,
                    2269,
                    1181,
                    2264
                ],
                "step_index": [
                    1185,
                    1187,
                    1195,
                    1183
                ],
                "batch_logs": [
                    1184,
                    1185,
                    1186,
                    1187,
                    2214,
                    1193,
                    1195,
                    1228,
                    1229,
                    1230,
                    1231,
                    2225,
                    2226,
                    2227,
                    1239,
                    1241,
                    2236,
                    2238
                ],
                "callbacks.on_batch_begin": [
                    1187,
                    2227,
                    1231
                ],
                "outs": [
                    1410,
                    1412,
                    1430,
                    1433,
                    1435,
                    1438,
                    1439,
                    1443,
                    1188,
                    1317,
                    1190,
                    1191,
                    1192,
                    1445,
                    1446,
                    1447,
                    1448,
                    2229,
                    1337,
                    2233,
                    1339,
                    2234,
                    2235,
                    1342,
                    1343,
                    1344,
                    2430,
                    1235,
                    1236,
                    1237,
                    1238,
                    2401,
                    1378,
                    2402,
                    2403,
                    2404,
                    2542,
                    2543,
                    2544,
                    2547,
                    1398,
                    2550,
                    1401,
                    1403,
                    1406,
                    1407
                ],
                "f": [
                    1698,
                    1188,
                    1833,
                    1834,
                    1775,
                    1776,
                    1330,
                    1235,
                    1394,
                    1301,
                    1426,
                    1683
                ],
                "o": [
                    1253,
                    1254,
                    2263,
                    1192,
                    1193,
                    1238,
                    1207,
                    1208,
                    1239,
                    2235,
                    2236,
                    2264
                ],
                "callbacks.on_batch_end": [
                    1241,
                    1195,
                    2238
                ],
                "val_outs": [
                    1250,
                    1251,
                    1253,
                    2246,
                    2255,
                    1200,
                    1204,
                    1205,
                    2260,
                    1207,
                    2261,
                    2263,
                    1247
                ],
                "self._test_loop": [
                    1200,
                    1776,
                    1247
                ],
                "shuffle": [
                    1210,
                    2171,
                    1212,
                    1701
                ],
                "_batch_shuffle": [
                    1211
                ],
                "batches": [
                    1216,
                    1318,
                    1414,
                    1320,
                    1416,
                    1245,
                    1215
                ],
                "_make_batches": [
                    1414,
                    1318,
                    1215
                ],
                "batch_index": [
                    1216,
                    2240,
                    1320,
                    1416,
                    1229,
                    1231,
                    2193,
                    2225,
                    2227,
                    1428,
                    1333,
                    1241,
                    2238,
                    1245,
                    1437
                ],
                "batch_start": [
                    1216,
                    1217,
                    1320,
                    1321,
                    1416,
                    1417,
                    1339
                ],
                "batch_end": [
                    1216,
                    1217,
                    1442,
                    1320,
                    1321,
                    1416,
                    1417,
                    1339,
                    1341
                ],
                "batch_ids": [
                    1217,
                    1221,
                    1223,
                    1321,
                    1417,
                    1324,
                    1420,
                    1230,
                    1326,
                    1422,
                    1435,
                    1439
                ],
                "ins_batch": [
                    1221,
                    1223,
                    1324,
                    1420,
                    1326,
                    1422,
                    1328,
                    1233,
                    1330,
                    1235,
                    1424,
                    1426
                ],
                "_slice_arrays": [
                    1665,
                    1666,
                    1221,
                    1223,
                    1420,
                    1324,
                    1326,
                    1422,
                    1662,
                    1663
                ],
                "toarray": [
                    1328,
                    1233,
                    1424
                ],
                "callbacks.on_epoch_end": [
                    2269,
                    1255
                ],
                "callbacks.on_train_end": [
                    1258,
                    2282
                ],
                "progbar": [
                    1409,
                    1442,
                    1283,
                    1381,
                    1285,
                    1383,
                    2382,
                    2423,
                    2521,
                    2554,
                    1341,
                    1310
                ],
                "Progbar": [
                    1283,
                    1381,
                    1285,
                    1383,
                    2382,
                    2521
                ],
                "unconcatenated_outs": [
                    1312,
                    1313,
                    1314,
                    1299,
                    1306,
                    1308,
                    1311
                ],
                "step": [
                    1409,
                    1393,
                    1396,
                    1300,
                    1304,
                    1405,
                    1310
                ],
                "batch_outs": [
                    1426,
                    1427,
                    1429,
                    1301,
                    1431,
                    1302,
                    1303,
                    1305,
                    1307,
                    1439,
                    1330,
                    1331,
                    1332,
                    1335,
                    1338,
                    1394,
                    1395,
                    1397,
                    1399,
                    1407
                ],
                "batch_out": [
                    1431,
                    1337,
                    1401,
                    1433,
                    1339,
                    1403,
                    1435,
                    1429,
                    1335,
                    1336,
                    1305,
                    1338,
                    1307,
                    1308,
                    1399
                ],
                "unconcatenated_outs.append": [
                    1306
                ],
                "append": [
                    1308,
                    2551
                ],
                "progbar.update": [
                    1409,
                    1442,
                    2423,
                    2554,
                    1341,
                    1310
                ],
                "np.concatenate": [
                    1312,
                    1313,
                    2564,
                    2568
                ],
                "batch_out.shape": [
                    1336
                ],
                "outs.append": [
                    1438,
                    1430,
                    1398,
                    1337,
                    1406
                ],
                "np.zeros": [
                    1337
                ],
                "batch_out.dtype": [
                    1337
                ],
                "stateful_metric_indices": [
                    2337,
                    1411,
                    1444,
                    1432,
                    2341,
                    1400,
                    1369,
                    2332,
                    1373,
                    2431
                ],
                "loss_fn": [
                    1459,
                    1460,
                    1462,
                    1463
                ],
                "output_shapes.append": [
                    1468,
                    1461,
                    1470
                ],
                "loss_fn.__name__": [
                    1463
                ],
                "_standardize_input_data": [
                    1473,
                    1938,
                    1477,
                    1815
                ],
                "self._feed_input_names": [
                    1473,
                    1938,
                    1815
                ],
                "self._feed_input_shapes": [
                    1816,
                    1474,
                    1939
                ],
                "_standardize_sample_weights": [
                    1481
                ],
                "class_weights": [
                    1483,
                    1487
                ],
                "_standardize_class_weights": [
                    1483
                ],
                "_standardize_weights": [
                    1485
                ],
                "ref": [
                    1485,
                    1486
                ],
                "sw": [
                    1485,
                    1486
                ],
                "cw": [
                    1485,
                    1486
                ],
                "check_array_lengths": [
                    1489
                ],
                "_check_array_lengths": [
                    1490
                ],
                "_check_loss_and_target_compatibility": [
                    1491
                ],
                "self.stateful": [
                    1818,
                    1494
                ],
                "kwargs.pop": [
                    1618
                ],
                "self._standardize_user_data": [
                    1765,
                    1647,
                    2159,
                    1874,
                    1626,
                    1916
                ],
                "validation_data": [
                    1633,
                    1635,
                    1636,
                    2149,
                    1638,
                    1639,
                    2150,
                    2152,
                    2153,
                    2247,
                    1645,
                    2158,
                    2102,
                    2103,
                    2104,
                    2105,
                    2079
                ],
                "val_x": [
                    1636,
                    1668,
                    1670,
                    1639,
                    2150,
                    2153,
                    1647,
                    1648,
                    2159,
                    2160,
                    2161,
                    1652,
                    2256,
                    1654,
                    1662
                ],
                "val_y": [
                    1636,
                    1668,
                    1670,
                    1639,
                    2150,
                    2153,
                    1647,
                    1648,
                    2159,
                    2160,
                    2161,
                    1652,
                    2256,
                    1654,
                    1663
                ],
                "val_sample_weight": [
                    1637,
                    2151,
                    1639,
                    2153,
                    2160,
                    1649
                ],
                "val_sample_weights": [
                    1664,
                    1668,
                    1670,
                    1647,
                    2159,
                    2161,
                    2258,
                    1652,
                    1654
                ],
                "validation_split": [
                    1656,
                    1659,
                    1661
                ],
                "split_at": [
                    1665,
                    1666,
                    1659,
                    1661,
                    1662,
                    1663
                ],
                "self._make_train_function": [
                    2080,
                    1682,
                    1882
                ],
                "self._make_test_function": [
                    2082,
                    1923,
                    1774,
                    1689,
                    2330
                ],
                "n": [
                    2114,
                    1691
                ],
                "self._fit_loop": [
                    1698
                ],
                "self._make_predict_function": [
                    1832,
                    2481,
                    1944
                ],
                "self._predict_loop": [
                    1834
                ],
                "outputs": [
                    1924,
                    1925,
                    1926,
                    1927,
                    1947,
                    1948,
                    1945,
                    1946,
                    1883,
                    1884,
                    1885,
                    1886
                ],
                "wait_time": [
                    2372,
                    2344,
                    2511,
                    2484,
                    2076,
                    2175
                ],
                "bool": [
                    2079
                ],
                "is_sequence": [
                    2179,
                    2084,
                    2085,
                    2494,
                    2376,
                    2505,
                    2347,
                    2092,
                    2348,
                    2355,
                    2515,
                    2486,
                    2487,
                    2168,
                    2366
                ],
                "generator": [
                    2370,
                    2180,
                    2084,
                    2182,
                    2377,
                    2495,
                    2347,
                    2379,
                    2093,
                    2506,
                    2509,
                    2356,
                    2516,
                    2486,
                    2518,
                    2169,
                    2173,
                    2367
                ],
                "Sequence": [
                    2084,
                    2347,
                    2486,
                    2104,
                    2105
                ],
                "use_multiprocessing": [
                    2368,
                    2371,
                    2085,
                    2250,
                    2507,
                    2348,
                    2510,
                    2487,
                    2170,
                    2174
                ],
                "workers": [
                    2176,
                    2487,
                    2085,
                    2373,
                    2504,
                    2249,
                    2348,
                    2512,
                    2167,
                    2365
                ],
                "val_gen": [
                    2105,
                    2147,
                    2245,
                    2102
                ],
                "enqueuer": [
                    2176,
                    2177,
                    2362,
                    2367,
                    2557,
                    2370,
                    2373,
                    2374,
                    2501,
                    2506,
                    2509,
                    2512,
                    2513,
                    2143,
                    2276,
                    2277,
                    2169,
                    2426,
                    2427,
                    2173,
                    2558
                ],
                "val_enqueuer": [
                    2144,
                    2280,
                    2279
                ],
                "val_data": [
                    2161,
                    2163,
                    2165
                ],
                "OrderedEnqueuer": [
                    2169,
                    2506,
                    2367
                ],
                "GeneratorEnqueuer": [
                    2509,
                    2370,
                    2173
                ],
                "enqueuer.start": [
                    2176,
                    2373,
                    2512
                ],
                "max_queue_size": [
                    2176,
                    2251,
                    2373,
                    2512
                ],
                "output_generator": [
                    2177,
                    2180,
                    2374,
                    2182,
                    2377,
                    2379,
                    2385,
                    2513,
                    2195,
                    2516,
                    2518,
                    2524
                ],
                "enqueuer.get": [
                    2177,
                    2513,
                    2374
                ],
                "iter": [
                    2377,
                    2516,
                    2180
                ],
                "steps_done": [
                    2241,
                    2561,
                    2244,
                    2565,
                    2343,
                    2192,
                    2384,
                    2194,
                    2483,
                    2420,
                    2423,
                    2552,
                    2554,
                    2523
                ],
                "generator_output": [
                    2195,
                    2197,
                    2201,
                    2203,
                    2204,
                    2206,
                    2207,
                    2212,
                    2385,
                    2386,
                    2390,
                    2391,
                    2392,
                    2394,
                    2395,
                    2524,
                    2525,
                    2400,
                    2528,
                    2529,
                    2530,
                    2531,
                    2536,
                    2540
                ],
                "next": [
                    2385,
                    2195,
                    2524
                ],
                "self.train_on_batch": [
                    2229
                ],
                "self.evaluate_generator": [
                    2246
                ],
                "self.evaluate": [
                    2255
                ],
                "enqueuer.stop": [
                    2427,
                    2277,
                    2558
                ],
                "val_enqueuer.stop": [
                    2280
                ],
                "interfaces.legacy_generator_methods_support": [
                    2440,
                    2285,
                    1950
                ],
                "interfaces": [
                    2440,
                    2285,
                    1950
                ],
                "outs_per_batch": [
                    2432,
                    2345,
                    2435,
                    2404
                ],
                "batch_sizes": [
                    2433,
                    2346,
                    2421
                ],
                "self.test_on_batch": [
                    2401
                ],
                "outs_per_batch.append": [
                    2404
                ],
                "batch_sizes.append": [
                    2421
                ],
                "averages": [
                    2432,
                    2435,
                    2436,
                    2437,
                    2438,
                    2429
                ],
                "averages.append": [
                    2432,
                    2435
                ],
                "np.average": [
                    2432
                ],
                "out": [
                    2432,
                    2566,
                    2568,
                    2547,
                    2550,
                    2551
                ],
                "all_outs": [
                    2560,
                    2562,
                    2564,
                    2566,
                    2568,
                    2546,
                    2548,
                    2485,
                    2551
                ],
                "tuple": [
                    2525
                ],
                "self.predict_on_batch": [
                    2542
                ],
                "all_outs.append": [
                    2548
                ]
            },
            "filtered_variables_in_file": {
                "names": [
                    67,
                    99,
                    69,
                    104,
                    91,
                    78,
                    111,
                    52,
                    84,
                    87,
                    121,
                    59,
                    63
                ],
                "data": [
                    53,
                    56,
                    58,
                    61,
                    63,
                    68,
                    69,
                    70,
                    72,
                    74,
                    75,
                    76,
                    78,
                    79,
                    86,
                    93,
                    94,
                    98,
                    100,
                    106,
                    108,
                    124
                ],
                "exception_prefix": [
                    96,
                    110,
                    81,
                    55,
                    120,
                    89
                ],
                "_": [
                    2529,
                    2531,
                    301,
                    654,
                    143,
                    304,
                    660,
                    1397,
                    59,
                    637
                ],
                "__class__.__name__": [
                    63
                ],
                "__class__": [
                    63
                ],
                "x": [
                    1920,
                    385,
                    1922,
                    387,
                    1679,
                    1681,
                    1810,
                    1938,
                    1941,
                    1815,
                    1943,
                    1819,
                    2204,
                    2207,
                    1824,
                    1829,
                    1831,
                    2215,
                    2219,
                    2220,
                    1917,
                    2221,
                    2222,
                    2224,
                    2229,
                    63,
                    1473,
                    72,
                    200,
                    203,
                    76,
                    1490,
                    211,
                    1874,
                    1621,
                    1875,
                    1495,
                    1879,
                    1881,
                    1626,
                    1627,
                    1500,
                    1501,
                    2392,
                    2395,
                    1760,
                    2401,
                    2529,
                    2531,
                    1765,
                    1766,
                    2406,
                    2410,
                    1771,
                    2411,
                    1773,
                    2412,
                    2413,
                    2415,
                    2540,
                    2542,
                    1658,
                    1659,
                    1916,
                    1661,
                    1662
                ],
                "values": [
                    63
                ],
                "e.args": [
                    66
                ],
                "e": [
                    66
                ],
                "np.asarray": [
                    100,
                    70,
                    526
                ],
                "np": [
                    2432,
                    2564,
                    1415,
                    520,
                    2568,
                    522,
                    526,
                    540,
                    542,
                    1312,
                    1313,
                    1319,
                    1337,
                    1213,
                    70,
                    76,
                    338,
                    340,
                    100,
                    1128
                ],
                "x.__class__.__name__": [
                    72
                ],
                "x.__class__": [
                    72
                ],
                "x.values": [
                    72,
                    2413,
                    2222
                ],
                "data.__class__.__name__": [
                    74
                ],
                "data.__class__": [
                    74
                ],
                "data.values": [
                    74
                ],
                "x.ndim": [
                    76
                ],
                "np.expand_dims": [
                    76
                ],
                "shapes": [
                    105,
                    107,
                    103
                ],
                "i": [
                    104,
                    105,
                    106,
                    107,
                    108,
                    111,
                    121,
                    646,
                    647,
                    648,
                    649,
                    1171,
                    1172,
                    1173,
                    710,
                    711,
                    714,
                    715,
                    717,
                    1232,
                    1233,
                    724,
                    725,
                    727,
                    730,
                    732,
                    746,
                    747,
                    772,
                    773,
                    1288,
                    777,
                    778,
                    1289,
                    1290,
                    789,
                    790,
                    1307,
                    1308,
                    2334,
                    1313,
                    1314,
                    2338,
                    806,
                    807,
                    808,
                    1327,
                    1328,
                    819,
                    820,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    1338,
                    1339,
                    833,
                    857,
                    858,
                    1370,
                    861,
                    862,
                    863,
                    864,
                    865,
                    354,
                    355,
                    874,
                    876,
                    1388,
                    1389,
                    1390,
                    882,
                    1399,
                    1400,
                    1401,
                    1403,
                    2430,
                    2431,
                    2432,
                    1410,
                    1411,
                    1412,
                    2435,
                    1423,
                    1424,
                    913,
                    918,
                    1431,
                    1432,
                    1433,
                    1435,
                    1443,
                    1444,
                    1445,
                    941,
                    942,
                    943,
                    2550,
                    2551
                ],
                "data_shape": [
                    106,
                    113,
                    115,
                    117,
                    123
                ],
                "shape": [
                    271,
                    275,
                    1819,
                    1824,
                    1066,
                    2220,
                    2222,
                    1336,
                    1337,
                    714,
                    722,
                    1495,
                    729,
                    1115,
                    1500,
                    106,
                    107,
                    108,
                    2411,
                    2413,
                    112,
                    116,
                    117,
                    249,
                    122,
                    1659
                ],
                "ndim": [
                    442,
                    444,
                    108
                ],
                "check_batch_axis": [
                    114
                ],
                "dim": [
                    117,
                    118
                ],
                "ref_dim": [
                    117,
                    118
                ],
                "x_weight": [
                    160,
                    163,
                    171,
                    142,
                    145,
                    146,
                    147,
                    148,
                    150,
                    151,
                    152,
                    154,
                    159
                ],
                "output_names": [
                    162,
                    301,
                    143,
                    144,
                    176,
                    304,
                    147,
                    148,
                    307,
                    182,
                    152,
                    156
                ],
                "weight_type": [
                    153,
                    169,
                    157,
                    167
                ],
                "x_weights": [
                    161,
                    163,
                    164
                ],
                "name": [
                    778,
                    781,
                    785,
                    789,
                    662,
                    663,
                    665,
                    669,
                    670,
                    797,
                    162,
                    163,
                    802,
                    2338,
                    2339,
                    307,
                    308,
                    697,
                    698,
                    700,
                    704,
                    705,
                    715,
                    723,
                    728,
                    1370,
                    1371,
                    611,
                    612,
                    739,
                    614,
                    740,
                    743,
                    618,
                    619,
                    620,
                    746,
                    751,
                    624,
                    752,
                    626,
                    755,
                    757,
                    761
                ],
                "x_weights.append": [
                    163
                ],
                "x_weight.get": [
                    163
                ],
                "_standardize_sample_or_class_weights": [
                    181,
                    175
                ],
                "class_weight": [
                    515,
                    1483,
                    526,
                    527,
                    175,
                    532,
                    1877,
                    2231,
                    1629
                ],
                "sample_weight": [
                    514,
                    2205,
                    2207,
                    181,
                    2230,
                    825,
                    830,
                    1481,
                    1876,
                    2393,
                    2395,
                    1628,
                    2401,
                    486,
                    1767,
                    488,
                    492,
                    494,
                    502,
                    503,
                    505,
                    509,
                    1918,
                    511
                ],
                "y": [
                    512,
                    1920,
                    1922,
                    516,
                    519,
                    520,
                    521,
                    522,
                    524,
                    271,
                    1679,
                    1681,
                    274,
                    540,
                    2204,
                    542,
                    2207,
                    1917,
                    1663,
                    2229,
                    1477,
                    203,
                    1487,
                    1490,
                    1491,
                    1874,
                    1621,
                    1875,
                    215,
                    1879,
                    1881,
                    1626,
                    1627,
                    2392,
                    1501,
                    253,
                    478,
                    1760,
                    481,
                    2395,
                    2401,
                    1765,
                    1766,
                    1771,
                    1773,
                    503,
                    249,
                    250,
                    507,
                    1916,
                    509,
                    255
                ],
                "y.shape": [
                    512,
                    481,
                    509,
                    503,
                    516,
                    519,
                    542,
                    521,
                    522,
                    203,
                    271,
                    274,
                    215,
                    507,
                    540,
                    253,
                    478,
                    255
                ],
                "set_x": [
                    208,
                    219,
                    205,
                    216
                ],
                "set_of_lengths": [
                    205,
                    206,
                    207
                ],
                "inputs": [
                    993,
                    1025,
                    1003,
                    205,
                    1005,
                    1008,
                    211,
                    982,
                    984,
                    1019,
                    1021
                ],
                "set_y": [
                    225,
                    228,
                    206,
                    212,
                    216,
                    220
                ],
                "targets": [
                    249,
                    206,
                    215
                ],
                "set_w": [
                    225,
                    221,
                    229,
                    207
                ],
                "weights": [
                    224,
                    868,
                    935,
                    526,
                    207,
                    912,
                    529,
                    440,
                    537,
                    443,
                    445,
                    446,
                    863
                ],
                "x.shape": [
                    2224,
                    211,
                    2415
                ],
                "w.shape": [
                    224
                ],
                "w": [
                    224
                ],
                "key_losses": [
                    246,
                    270
                ],
                "losses.mean_squared_error": [
                    246
                ],
                "losses": [
                    636,
                    1463,
                    876,
                    626,
                    882,
                    1460,
                    246,
                    247,
                    248,
                    634,
                    252
                ],
                "losses.binary_crossentropy": [
                    876,
                    247
                ],
                "losses.categorical_crossentropy": [
                    248,
                    252
                ],
                "loss": [
                    636,
                    610,
                    611,
                    619,
                    270,
                    633,
                    626,
                    627,
                    276,
                    628,
                    634,
                    249,
                    250,
                    603,
                    252,
                    605
                ],
                "loss_fns": [
                    249
                ],
                "output_shapes": [
                    1478,
                    1458,
                    1461,
                    249,
                    1468,
                    1470
                ],
                "target_dim": [
                    272,
                    271
                ],
                "out_dim": [
                    272,
                    271
                ],
                "loss.__name__": [
                    276
                ],
                "metrics": [
                    870,
                    811,
                    300,
                    302,
                    304,
                    305,
                    308,
                    852,
                    316
                ],
                "copy.copy": [
                    304,
                    1691,
                    1693
                ],
                "copy": [
                    304,
                    1691,
                    1693
                ],
                "nested_metrics": [
                    864,
                    306,
                    852,
                    311,
                    312
                ],
                "output_metrics": [
                    864,
                    934,
                    308,
                    309,
                    310,
                    311
                ],
                "metrics.get": [
                    308
                ],
                "nested_metrics.append": [
                    311
                ],
                "batch_count": [
                    336,
                    337,
                    332,
                    335
                ],
                "index_array": [
                    1217,
                    1319,
                    1128,
                    1321,
                    1415,
                    1417,
                    332,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    1211,
                    1213
                ],
                "batch_size": [
                    1155,
                    1414,
                    1808,
                    1809,
                    1819,
                    1825,
                    1699,
                    1062,
                    1318,
                    1834,
                    2218,
                    2220,
                    2222,
                    2224,
                    1201,
                    2226,
                    1211,
                    1215,
                    332,
                    1612,
                    1613,
                    335,
                    336,
                    337,
                    2257,
                    1494,
                    1495,
                    1630,
                    1375,
                    1248,
                    353,
                    354,
                    1758,
                    1124,
                    1759,
                    1768,
                    2409,
                    2411,
                    2413,
                    2415,
                    2416,
                    1777,
                    1650,
                    2421,
                    1278
                ],
                "last_batch": [
                    340,
                    335
                ],
                "index_array.reshape": [
                    337
                ],
                "np.random.shuffle": [
                    338,
                    1213
                ],
                "np.random": [
                    338,
                    1213
                ],
                "index_array.flatten": [
                    339
                ],
                "np.append": [
                    340
                ],
                "num_batches": [
                    353,
                    355
                ],
                "size": [
                    353,
                    354
                ],
                "arrays": [
                    385,
                    387,
                    392,
                    394,
                    378,
                    380
                ],
                "start": [
                    384,
                    385,
                    387,
                    389,
                    390,
                    391,
                    392,
                    393,
                    394,
                    381,
                    383
                ],
                "start.tolist": [
                    384,
                    391
                ],
                "stop": [
                    394,
                    387
                ],
                "fn": [
                    639,
                    413,
                    429
                ],
                "score_array": [
                    429,
                    434,
                    437,
                    442,
                    444,
                    445,
                    446,
                    447
                ],
                "y_true": [
                    861,
                    429,
                    911,
                    822,
                    829
                ],
                "y_pred": [
                    429,
                    911,
                    823,
                    829,
                    862
                ],
                "mask": [
                    430,
                    432,
                    434,
                    437,
                    826,
                    830
                ],
                "K.cast": [
                    432,
                    446
                ],
                "K": [
                    1025,
                    1667,
                    1289,
                    1674,
                    780,
                    910,
                    1678,
                    784,
                    1172,
                    1940,
                    796,
                    540,
                    542,
                    801,
                    1828,
                    432,
                    818,
                    437,
                    442,
                    443,
                    444,
                    828,
                    446,
                    447,
                    720,
                    722,
                    724,
                    725,
                    1878,
                    983,
                    856,
                    984,
                    986,
                    987,
                    993,
                    1770,
                    1004,
                    1005,
                    1389,
                    1008,
                    2162,
                    1651,
                    756,
                    760,
                    1018,
                    1019,
                    1919
                ],
                "K.floatx": [
                    432,
                    540,
                    446,
                    542
                ],
                "K.mean": [
                    444,
                    437,
                    446,
                    447
                ],
                "K.ndim": [
                    442,
                    443
                ],
                "weight_ndim": [
                    443,
                    444
                ],
                "K.not_equal": [
                    446
                ],
                "weighted": [
                    448
                ],
                "sample_weight_mode": [
                    738,
                    739,
                    771,
                    794,
                    765,
                    777,
                    751,
                    755,
                    473,
                    474,
                    539,
                    764,
                    477,
                    607
                ],
                "sample_weight.shape": [
                    486,
                    488,
                    492,
                    494,
                    503,
                    505,
                    509,
                    511
                ],
                "sample_weight.ndim": [
                    509
                ],
                "y_classes": [
                    520,
                    522,
                    524,
                    526,
                    529,
                    531
                ],
                "np.argmax": [
                    520
                ],
                "np.reshape": [
                    522
                ],
                "cls": [
                    526,
                    527
                ],
                "existing_classes": [
                    536,
                    531
                ],
                "existing_class_weight": [
                    536,
                    532
                ],
                "class_weight.keys": [
                    532
                ],
                "np.ones": [
                    540,
                    542
                ],
                "Container": [
                    545
                ],
                "self.optimizer": [
                    988,
                    987,
                    604
                ],
                "self": [
                    1024,
                    1025,
                    1026,
                    1027,
                    2080,
                    2082,
                    2113,
                    2117,
                    2119,
                    2124,
                    2125,
                    2129,
                    2130,
                    2132,
                    1626,
                    604,
                    605,
                    606,
                    607,
                    612,
                    1124,
                    616,
                    618,
                    1130,
                    1132,
                    1647,
                    2159,
                    2162,
                    1651,
                    628,
                    1141,
                    1142,
                    631,
                    1148,
                    637,
                    638,
                    1149,
                    1151,
                    642,
                    643,
                    644,
                    645,
                    1667,
                    1674,
                    652,
                    2188,
                    654,
                    1678,
                    1169,
                    1682,
                    1683,
                    660,
                    1686,
                    663,
                    1177,
                    1689,
                    667,
                    1690,
                    669,
                    672,
                    1698,
                    675,
                    685,
                    686,
                    1200,
                    689,
                    693,
                    2229,
                    698,
                    702,
                    704,
                    710,
                    2246,
                    712,
                    714,
                    715,
                    2255,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    730,
                    733,
                    1247,
                    740,
                    1765,
                    745,
                    746,
                    1259,
                    1770,
                    1878,
                    1774,
                    1775,
                    1776,
                    2283,
                    765,
                    1278,
                    768,
                    772,
                    1288,
                    1289,
                    778,
                    789,
                    1815,
                    1816,
                    1818,
                    2330,
                    2333,
                    2334,
                    2338,
                    2339,
                    804,
                    805,
                    806,
                    1828,
                    808,
                    1832,
                    1833,
                    811,
                    812,
                    813,
                    814,
                    1834,
                    819,
                    822,
                    823,
                    828,
                    831,
                    832,
                    833,
                    839,
                    847,
                    1874,
                    852,
                    853,
                    854,
                    855,
                    1365,
                    857,
                    1366,
                    1370,
                    1371,
                    861,
                    862,
                    1375,
                    1882,
                    1883,
                    2401,
                    874,
                    1386,
                    876,
                    882,
                    1916,
                    1919,
                    1923,
                    1924,
                    1938,
                    1939,
                    1940,
                    917,
                    918,
                    1944,
                    1945,
                    922,
                    925,
                    926,
                    931,
                    932,
                    938,
                    939,
                    940,
                    941,
                    1453,
                    943,
                    2481,
                    1459,
                    948,
                    950,
                    951,
                    952,
                    955,
                    956,
                    1473,
                    1474,
                    1477,
                    967,
                    970,
                    971,
                    1482,
                    1484,
                    1487,
                    978,
                    980,
                    981,
                    982,
                    983,
                    1492,
                    1493,
                    1494,
                    987,
                    988,
                    989,
                    990,
                    991,
                    993,
                    994,
                    997,
                    1000,
                    1002,
                    1003,
                    1004,
                    2542,
                    1008,
                    1009,
                    1010,
                    1012,
                    1015,
                    1016,
                    1017,
                    1018,
                    1019,
                    1021
                ],
                "optimizers.get": [
                    604
                ],
                "optimizers": [
                    604
                ],
                "optimizer": [
                    604
                ],
                "self.loss": [
                    605
                ],
                "self.loss_weights": [
                    606
                ],
                "loss_weights": [
                    672,
                    677,
                    678,
                    606,
                    681,
                    659,
                    661,
                    662,
                    670,
                    671
                ],
                "self.sample_weight_mode": [
                    607
                ],
                "self.output_names": [
                    772,
                    778,
                    789,
                    917,
                    663,
                    918,
                    667,
                    669,
                    698,
                    828,
                    702,
                    704,
                    833,
                    715,
                    852,
                    853,
                    612,
                    740,
                    616,
                    745,
                    618,
                    746
                ],
                "loss_functions": [
                    617,
                    626,
                    634,
                    637,
                    638,
                    639
                ],
                "warnings.warn": [
                    2086,
                    972,
                    620,
                    2349,
                    1616,
                    2488
                ],
                "warnings": [
                    2086,
                    972,
                    620,
                    2349,
                    1616,
                    2488
                ],
                "loss_functions.append": [
                    626
                ],
                "losses.get": [
                    626,
                    636,
                    634
                ],
                "loss.get": [
                    626
                ],
                "self.outputs": [
                    768,
                    1026,
                    637,
                    654,
                    660,
                    672,
                    675,
                    806,
                    689,
                    819,
                    693,
                    823,
                    831,
                    710,
                    724,
                    725,
                    727,
                    857,
                    862,
                    628,
                    631,
                    765
                ],
                "l": [
                    1239,
                    1253,
                    1254,
                    2263,
                    1192,
                    1193,
                    1238,
                    1207,
                    1208,
                    634,
                    2235,
                    2236,
                    2264
                ],
                "loss_function": [
                    636,
                    637
                ],
                "self.loss_functions": [
                    730,
                    876,
                    638,
                    882
                ],
                "weighted_losses": [
                    647,
                    824,
                    646,
                    639
                ],
                "_weighted_masked_objective": [
                    898,
                    902,
                    639
                ],
                "skip_target_indices": [
                    640,
                    711,
                    648,
                    820,
                    858
                ],
                "skip_target_weighing_indices": [
                    641,
                    773,
                    807,
                    649,
                    747,
                    942,
                    790,
                    732
                ],
                "self._feed_outputs": [
                    642,
                    727
                ],
                "self._feed_output_names": [
                    643,
                    1477,
                    1482,
                    1484,
                    728
                ],
                "self._feed_output_shapes": [
                    729,
                    1459,
                    644,
                    1493
                ],
                "self._feed_loss_fns": [
                    730,
                    1459,
                    1492,
                    645
                ],
                "skip_target_indices.append": [
                    648
                ],
                "skip_target_weighing_indices.append": [
                    649,
                    732
                ],
                "masks": [
                    652,
                    653,
                    654,
                    655,
                    656,
                    913,
                    826
                ],
                "self.compute_mask": [
                    652
                ],
                "self.inputs": [
                    652
                ],
                "loss_weights_list": [
                    678,
                    660,
                    827,
                    668,
                    670
                ],
                "loss_weights_list.append": [
                    670
                ],
                "loss_weights.get": [
                    670
                ],
                "self.targets": [
                    712,
                    861,
                    685,
                    822,
                    733
                ],
                "self._feed_targets": [
                    1386,
                    1003,
                    686,
                    1169,
                    982,
                    726
                ],
                "target_tensors": [
                    705,
                    706,
                    709,
                    716,
                    717,
                    687,
                    688,
                    689,
                    695,
                    696,
                    697
                ],
                "tmp_target_tensors": [
                    705,
                    706,
                    703
                ],
                "tmp_target_tensors.append": [
                    705
                ],
                "target_tensors.get": [
                    705
                ],
                "self.targets.append": [
                    712,
                    733
                ],
                "self._internal_output_shapes": [
                    714,
                    874
                ],
                "target": [
                    717,
                    719,
                    720,
                    721,
                    722,
                    726,
                    733
                ],
                "K.is_placeholder": [
                    720
                ],
                "K.placeholder": [
                    801,
                    780,
                    784,
                    722,
                    756,
                    760,
                    796
                ],
                "K.is_sparse": [
                    1172,
                    724,
                    1389,
                    1289
                ],
                "K.dtype": [
                    725
                ],
                "self._feed_targets.append": [
                    726
                ],
                "self._feed_outputs.append": [
                    727
                ],
                "self._feed_output_names.append": [
                    728
                ],
                "self._feed_output_shapes.append": [
                    729
                ],
                "self._feed_loss_fns.append": [
                    730
                ],
                "sample_weights": [
                    1664,
                    1665,
                    1666,
                    1920,
                    1922,
                    1679,
                    1681,
                    787,
                    792,
                    795,
                    800,
                    939,
                    943,
                    825,
                    1481,
                    1485,
                    1487,
                    1490,
                    1874,
                    1879,
                    1881,
                    1626,
                    1501,
                    863,
                    736,
                    1765,
                    1771,
                    1773,
                    763,
                    1916
                ],
                "sample_weight_modes": [
                    737,
                    803,
                    804,
                    775,
                    749,
                    782,
                    786,
                    758,
                    791,
                    762,
                    798
                ],
                "weight": [
                    774,
                    748,
                    780,
                    784,
                    787,
                    756,
                    760,
                    763
                ],
                "sample_weight_modes.append": [
                    803,
                    775,
                    749,
                    782,
                    786,
                    758,
                    791,
                    762,
                    798
                ],
                "sample_weight_mode.get": [
                    755
                ],
                "sample_weights.append": [
                    800,
                    795,
                    787,
                    792,
                    763
                ],
                "mode": [
                    777,
                    779,
                    1485,
                    1486
                ],
                "self.sample_weight_modes": [
                    808,
                    804
                ],
                "self._feed_sample_weight_modes": [
                    808,
                    805,
                    1487
                ],
                "self._feed_sample_weight_modes.append": [
                    808
                ],
                "self.metrics": [
                    811,
                    2188,
                    1366,
                    1177,
                    2334
                ],
                "self.weighted_metrics": [
                    812
                ],
                "weighted_metrics": [
                    812,
                    853
                ],
                "self.metrics_names": [
                    833,
                    2113,
                    2338,
                    1370,
                    813,
                    1686,
                    922,
                    925
                ],
                "self.metrics_tensors": [
                    832,
                    994,
                    814,
                    1009,
                    926
                ],
                "total_loss": [
                    834,
                    835,
                    837,
                    838,
                    938,
                    843,
                    848,
                    817
                ],
                "K.name_scope": [
                    910,
                    818,
                    856,
                    986,
                    987,
                    828
                ],
                "weighted_loss": [
                    824,
                    829
                ],
                "loss_weight": [
                    835,
                    827,
                    837
                ],
                "output_loss": [
                    832,
                    835,
                    837,
                    829
                ],
                "self.metrics_tensors.append": [
                    832,
                    926
                ],
                "self.metrics_names.append": [
                    833,
                    925
                ],
                "self.losses": [
                    847,
                    839
                ],
                "loss_tensor": [
                    848,
                    847
                ],
                "_collect_metrics": [
                    852,
                    853
                ],
                "nested_weighted_metrics": [
                    865,
                    853
                ],
                "self.metrics_updates": [
                    1010,
                    932,
                    854,
                    991
                ],
                "self.stateful_metric_names": [
                    931,
                    2339,
                    2119,
                    1132,
                    2124,
                    1141,
                    855,
                    1371
                ],
                "output_weighted_metrics": [
                    865,
                    935
                ],
                "metric_name_prefix": [
                    908,
                    899,
                    868
                ],
                "metric": [
                    896,
                    901,
                    870,
                    871,
                    878,
                    880,
                    884,
                    886,
                    890,
                    892,
                    894
                ],
                "output_shape": [
                    874,
                    875,
                    1459,
                    1461,
                    1470
                ],
                "metric_fn": [
                    898,
                    930,
                    932,
                    901,
                    902,
                    904,
                    905,
                    907,
                    879,
                    881,
                    885,
                    887,
                    891,
                    893
                ],
                "metrics_module.binary_accuracy": [
                    879
                ],
                "metrics_module": [
                    901,
                    879,
                    881,
                    885,
                    887,
                    891,
                    893
                ],
                "metrics_module.binary_crossentropy": [
                    881
                ],
                "losses.sparse_categorical_crossentropy": [
                    882,
                    1460
                ],
                "metrics_module.sparse_categorical_accuracy": [
                    885
                ],
                "metrics_module.sparse_categorical_crossentropy": [
                    887
                ],
                "metrics_module.categorical_accuracy": [
                    891
                ],
                "metrics_module.categorical_crossentropy": [
                    893
                ],
                "suffix": [
                    897,
                    899,
                    895
                ],
                "weighted_metric_fn": [
                    898,
                    902,
                    911
                ],
                "metric_name": [
                    899,
                    931,
                    905,
                    907,
                    908,
                    910,
                    918,
                    921,
                    922,
                    923,
                    925
                ],
                "metrics_module.get": [
                    901
                ],
                "metric_fn.name": [
                    905
                ],
                "metric_fn.__name__": [
                    907
                ],
                "metric_result": [
                    926,
                    911
                ],
                "j": [
                    920,
                    923,
                    924
                ],
                "base_metric_name": [
                    921,
                    923
                ],
                "Layer": [
                    930,
                    2189,
                    1367,
                    1178,
                    2335
                ],
                "metric_fn.stateful": [
                    930
                ],
                "self.stateful_metric_names.append": [
                    931
                ],
                "metric_fn.updates": [
                    932
                ],
                "handle_metrics": [
                    934,
                    935
                ],
                "self.total_loss": [
                    1009,
                    938,
                    994,
                    990
                ],
                "self.sample_weights": [
                    939,
                    941
                ],
                "self._feed_sample_weights": [
                    1386,
                    1003,
                    940,
                    943,
                    1169,
                    982
                ],
                "self._feed_sample_weights.append": [
                    943
                ],
                "self._function_kwargs": [
                    1012,
                    948,
                    997
                ],
                "kwargs": [
                    1024,
                    1029,
                    1615,
                    1618,
                    1619,
                    948,
                    1620
                ],
                "self.train_function": [
                    993,
                    1683,
                    981,
                    950,
                    1883
                ],
                "self.test_function": [
                    1924,
                    1002,
                    1775,
                    1008,
                    951,
                    1690
                ],
                "self.predict_function": [
                    1025,
                    1833,
                    952,
                    1016,
                    1945,
                    1017
                ],
                "trainable_weights": [
                    955,
                    956
                ],
                "self.trainable_weights": [
                    970,
                    955
                ],
                "self._collected_trainable_weights": [
                    971,
                    956,
                    989
                ],
                "self._check_trainable_weights_consistency": [
                    980
                ],
                "self._feed_inputs": [
                    1288,
                    1289,
                    1386,
                    1003,
                    1169,
                    982,
                    1019,
                    1021
                ],
                "self.uses_learning_phase": [
                    1667,
                    1828,
                    1674,
                    1770,
                    1004,
                    1678,
                    2162,
                    1651,
                    1940,
                    1878,
                    983,
                    1018,
                    1919
                ],
                "K.learning_phase": [
                    1667,
                    1828,
                    1674,
                    1770,
                    1004,
                    1005,
                    1678,
                    2162,
                    1651,
                    1940,
                    1878,
                    983,
                    984,
                    1018,
                    1019,
                    1919
                ],
                "self.optimizer.__class__.__name__": [
                    987
                ],
                "self.optimizer.__class__": [
                    987
                ],
                "training_updates": [
                    988,
                    991
                ],
                "self.optimizer.get_updates": [
                    988
                ],
                "updates": [
                    995,
                    991
                ],
                "self.updates": [
                    991
                ],
                "K.function": [
                    1008,
                    993,
                    1025
                ],
                "self.state_updates": [
                    1010,
                    1027
                ],
                "steps": [
                    1282,
                    1283,
                    1412,
                    1292,
                    1808,
                    1810,
                    1300,
                    1060,
                    1835,
                    2354,
                    2356,
                    2493,
                    2495,
                    2382,
                    2384,
                    2521,
                    2523,
                    1758,
                    1376,
                    1760,
                    1380,
                    1381,
                    1392,
                    1393,
                    1779,
                    1279
                ],
                "num_samples": [
                    1285,
                    1061,
                    1318,
                    1319,
                    1383,
                    1066,
                    1414,
                    1415,
                    1445,
                    1071,
                    1336,
                    1278,
                    1375
                ],
                "steps_name": [
                    1069,
                    1063
                ],
                "ins": [
                    1920,
                    1922,
                    1924,
                    1289,
                    1418,
                    1420,
                    1422,
                    1679,
                    1681,
                    1172,
                    1301,
                    1941,
                    1943,
                    1945,
                    1698,
                    1188,
                    1829,
                    1831,
                    1065,
                    1066,
                    1322,
                    1324,
                    1834,
                    1326,
                    1219,
                    1221,
                    1223,
                    1879,
                    1113,
                    1881,
                    1115,
                    1883,
                    1375,
                    1124,
                    1771,
                    1389,
                    1773,
                    1776,
                    1394,
                    1278
                ],
                "do_validation": [
                    1632,
                    2081,
                    1634,
                    2147,
                    2244,
                    1160,
                    1673,
                    1688,
                    1199,
                    1110,
                    1112,
                    1657,
                    2138,
                    1117,
                    1246,
                    2079
                ],
                "val_f": [
                    1701,
                    1200,
                    1111,
                    1690,
                    1694,
                    1247
                ],
                "val_ins": [
                    1668,
                    1701,
                    1670,
                    1675,
                    1166,
                    1200,
                    1695,
                    1652,
                    1654,
                    1111,
                    1113,
                    1115,
                    1247
                ],
                "verbose": [
                    1408,
                    1281,
                    1441,
                    1379,
                    1700,
                    2137,
                    1159,
                    2120,
                    1835,
                    1133,
                    2381,
                    2553,
                    1778,
                    2422,
                    2520,
                    1113,
                    1340,
                    1309
                ],
                "validation_steps": [
                    1672,
                    1705,
                    2248,
                    1202,
                    2106,
                    1116
                ],
                "steps_per_epoch": [
                    2244,
                    1157,
                    1125,
                    1704,
                    2091,
                    1612,
                    2093,
                    1134,
                    2194,
                    1621,
                    2136,
                    1118,
                    1182,
                    1183
                ],
                "num_train_samples": [
                    1124,
                    1158,
                    1127,
                    1128,
                    1215
                ],
                "self._check_num_samples": [
                    1124,
                    1278,
                    1375
                ],
                "np.arange": [
                    1128,
                    1415,
                    1319
                ],
                "self.history": [
                    2117,
                    1130,
                    1259,
                    2283,
                    2125,
                    1142
                ],
                "cbks.History": [
                    1130,
                    2117
                ],
                "cbks": [
                    2117,
                    2118,
                    1130,
                    1131,
                    2122,
                    2126,
                    1139,
                    1143
                ],
                "_callbacks": [
                    2118,
                    2121,
                    1131,
                    2125,
                    2126,
                    1138,
                    1142,
                    1143
                ],
                "cbks.BaseLogger": [
                    1131,
                    2118
                ],
                "count_mode": [
                    1137,
                    1140,
                    1135
                ],
                "_callbacks.append": [
                    2121,
                    1138
                ],
                "cbks.ProgbarLogger": [
                    2122,
                    1139
                ],
                "callbacks": [
                    1153,
                    1154,
                    1163,
                    1165,
                    2191,
                    1180,
                    1187,
                    1700,
                    1195,
                    2227,
                    2238,
                    2125,
                    2126,
                    1231,
                    2133,
                    2134,
                    1241,
                    2141,
                    2269,
                    1255,
                    1258,
                    2282,
                    2164,
                    1142,
                    1143
                ],
                "cbks.CallbackList": [
                    2126,
                    1143
                ],
                "out_labels": [
                    2113,
                    1698,
                    2114,
                    1253,
                    1192,
                    2235,
                    1238,
                    1207,
                    1144,
                    1686,
                    2263,
                    1691,
                    1693
                ],
                "self.callback_model": [
                    2129,
                    2130,
                    1148,
                    1149
                ],
                "callback_model": [
                    1153,
                    2271,
                    1256,
                    2184,
                    2266,
                    1196,
                    1164,
                    2130,
                    2132,
                    2133,
                    1242,
                    1149,
                    1151
                ],
                "callbacks.set_model": [
                    1153,
                    2133
                ],
                "callbacks.set_params": [
                    1154,
                    2134
                ],
                "epochs": [
                    1699,
                    1156,
                    2187,
                    1618,
                    2135,
                    1175
                ],
                "callback_metrics": [
                    2114,
                    1702,
                    1161,
                    2139,
                    1691,
                    1693
                ],
                "callbacks.on_train_begin": [
                    1163,
                    2141
                ],
                "callback_model.stop_training": [
                    1256,
                    2184,
                    2266,
                    1196,
                    1164,
                    1242,
                    2271
                ],
                "cbk": [
                    2165,
                    2164,
                    1165,
                    1166
                ],
                "cbk.validation_data": [
                    2165,
                    1166
                ],
                "feed": [
                    1386,
                    1388,
                    1389,
                    1169,
                    1171,
                    1172
                ],
                "indices_for_conversion_to_dense": [
                    1287,
                    1290,
                    1387,
                    1390,
                    1327,
                    1232,
                    1423,
                    1170,
                    1173
                ],
                "issparse": [
                    1289,
                    1172,
                    1389
                ],
                "indices_for_conversion_to_dense.append": [
                    1290,
                    1173,
                    1390
                ],
                "epoch": [
                    1255,
                    2187,
                    2191,
                    1175,
                    2269,
                    1180,
                    2077,
                    2270
                ],
                "initial_epoch": [
                    1703,
                    2077,
                    1175
                ],
                "m": [
                    2336,
                    2188,
                    2189,
                    2190,
                    1366,
                    1367,
                    1368,
                    1177,
                    1178,
                    1179,
                    2334,
                    2335
                ],
                "m.stateful": [
                    1178,
                    2335,
                    2189,
                    1367
                ],
                "m.reset_states": [
                    1368,
                    2336,
                    1179,
                    2190
                ],
                "callbacks.on_epoch_begin": [
                    1180,
                    2191
                ],
                "epoch_logs": [
                    1254,
                    1255,
                    2186,
                    1208,
                    2269,
                    1181,
                    2264
                ],
                "step_index": [
                    1185,
                    1187,
                    1195,
                    1183
                ],
                "batch_logs": [
                    1184,
                    1185,
                    1186,
                    1187,
                    2214,
                    1193,
                    1195,
                    1228,
                    1229,
                    1230,
                    1231,
                    2225,
                    2226,
                    2227,
                    1239,
                    1241,
                    2236,
                    2238
                ],
                "callbacks.on_batch_begin": [
                    1187,
                    2227,
                    1231
                ],
                "outs": [
                    1410,
                    1412,
                    1430,
                    1433,
                    1435,
                    1438,
                    1439,
                    1443,
                    1188,
                    1317,
                    1190,
                    1191,
                    1192,
                    1445,
                    1446,
                    1447,
                    1448,
                    2229,
                    1337,
                    2233,
                    1339,
                    2234,
                    2235,
                    1342,
                    1343,
                    1344,
                    2430,
                    1235,
                    1236,
                    1237,
                    1238,
                    2401,
                    1378,
                    2402,
                    2403,
                    2404,
                    2542,
                    2543,
                    2544,
                    2547,
                    1398,
                    2550,
                    1401,
                    1403,
                    1406,
                    1407
                ],
                "f": [
                    1698,
                    1188,
                    1833,
                    1834,
                    1775,
                    1776,
                    1330,
                    1235,
                    1394,
                    1301,
                    1426,
                    1683
                ],
                "o": [
                    1253,
                    1254,
                    2263,
                    1192,
                    1193,
                    1238,
                    1207,
                    1208,
                    1239,
                    2235,
                    2236,
                    2264
                ],
                "callbacks.on_batch_end": [
                    1241,
                    1195,
                    2238
                ],
                "val_outs": [
                    1250,
                    1251,
                    1253,
                    2246,
                    2255,
                    1200,
                    1204,
                    1205,
                    2260,
                    1207,
                    2261,
                    2263,
                    1247
                ],
                "self._test_loop": [
                    1200,
                    1776,
                    1247
                ],
                "shuffle": [
                    1210,
                    2171,
                    1212,
                    1701
                ],
                "_batch_shuffle": [
                    1211
                ],
                "batches": [
                    1216,
                    1318,
                    1414,
                    1320,
                    1416,
                    1245,
                    1215
                ],
                "_make_batches": [
                    1414,
                    1318,
                    1215
                ],
                "batch_index": [
                    1216,
                    2240,
                    1320,
                    1416,
                    1229,
                    1231,
                    2193,
                    2225,
                    2227,
                    1428,
                    1333,
                    1241,
                    2238,
                    1245,
                    1437
                ],
                "batch_start": [
                    1216,
                    1217,
                    1320,
                    1321,
                    1416,
                    1417,
                    1339
                ],
                "batch_end": [
                    1216,
                    1217,
                    1442,
                    1320,
                    1321,
                    1416,
                    1417,
                    1339,
                    1341
                ],
                "batch_ids": [
                    1217,
                    1221,
                    1223,
                    1321,
                    1417,
                    1324,
                    1420,
                    1230,
                    1326,
                    1422,
                    1435,
                    1439
                ],
                "ins_batch": [
                    1221,
                    1223,
                    1324,
                    1420,
                    1326,
                    1422,
                    1328,
                    1233,
                    1330,
                    1235,
                    1424,
                    1426
                ],
                "_slice_arrays": [
                    1665,
                    1666,
                    1221,
                    1223,
                    1420,
                    1324,
                    1326,
                    1422,
                    1662,
                    1663
                ],
                "toarray": [
                    1328,
                    1233,
                    1424
                ],
                "callbacks.on_epoch_end": [
                    2269,
                    1255
                ],
                "callbacks.on_train_end": [
                    1258,
                    2282
                ],
                "progbar": [
                    1409,
                    1442,
                    1283,
                    1381,
                    1285,
                    1383,
                    2382,
                    2423,
                    2521,
                    2554,
                    1341,
                    1310
                ],
                "Progbar": [
                    1283,
                    1381,
                    1285,
                    1383,
                    2382,
                    2521
                ],
                "unconcatenated_outs": [
                    1312,
                    1313,
                    1314,
                    1299,
                    1306,
                    1308,
                    1311
                ],
                "step": [
                    1409,
                    1393,
                    1396,
                    1300,
                    1304,
                    1405,
                    1310
                ],
                "batch_outs": [
                    1426,
                    1427,
                    1429,
                    1301,
                    1431,
                    1302,
                    1303,
                    1305,
                    1307,
                    1439,
                    1330,
                    1331,
                    1332,
                    1335,
                    1338,
                    1394,
                    1395,
                    1397,
                    1399,
                    1407
                ],
                "batch_out": [
                    1431,
                    1337,
                    1401,
                    1433,
                    1339,
                    1403,
                    1435,
                    1429,
                    1335,
                    1336,
                    1305,
                    1338,
                    1307,
                    1308,
                    1399
                ],
                "unconcatenated_outs.append": [
                    1306
                ],
                "append": [
                    1308,
                    2551
                ],
                "progbar.update": [
                    1409,
                    1442,
                    2423,
                    2554,
                    1341,
                    1310
                ],
                "np.concatenate": [
                    1312,
                    1313,
                    2564,
                    2568
                ],
                "batch_out.shape": [
                    1336
                ],
                "outs.append": [
                    1438,
                    1430,
                    1398,
                    1337,
                    1406
                ],
                "np.zeros": [
                    1337
                ],
                "batch_out.dtype": [
                    1337
                ],
                "stateful_metric_indices": [
                    2337,
                    1411,
                    1444,
                    1432,
                    2341,
                    1400,
                    1369,
                    2332,
                    1373,
                    2431
                ],
                "loss_fn": [
                    1459,
                    1460,
                    1462,
                    1463
                ],
                "output_shapes.append": [
                    1468,
                    1461,
                    1470
                ],
                "loss_fn.__name__": [
                    1463
                ],
                "_standardize_input_data": [
                    1473,
                    1938,
                    1477,
                    1815
                ],
                "self._feed_input_names": [
                    1473,
                    1938,
                    1815
                ],
                "self._feed_input_shapes": [
                    1816,
                    1474,
                    1939
                ],
                "_standardize_sample_weights": [
                    1481
                ],
                "class_weights": [
                    1483,
                    1487
                ],
                "_standardize_class_weights": [
                    1483
                ],
                "_standardize_weights": [
                    1485
                ],
                "ref": [
                    1485,
                    1486
                ],
                "sw": [
                    1485,
                    1486
                ],
                "cw": [
                    1485,
                    1486
                ],
                "check_array_lengths": [
                    1489
                ],
                "_check_array_lengths": [
                    1490
                ],
                "_check_loss_and_target_compatibility": [
                    1491
                ],
                "self.stateful": [
                    1818,
                    1494
                ],
                "kwargs.pop": [
                    1618
                ],
                "self._standardize_user_data": [
                    1765,
                    1647,
                    2159,
                    1874,
                    1626,
                    1916
                ],
                "validation_data": [
                    1633,
                    1635,
                    1636,
                    2149,
                    1638,
                    1639,
                    2150,
                    2152,
                    2153,
                    2247,
                    1645,
                    2158,
                    2102,
                    2103,
                    2104,
                    2105,
                    2079
                ],
                "val_x": [
                    1636,
                    1668,
                    1670,
                    1639,
                    2150,
                    2153,
                    1647,
                    1648,
                    2159,
                    2160,
                    2161,
                    1652,
                    2256,
                    1654,
                    1662
                ],
                "val_y": [
                    1636,
                    1668,
                    1670,
                    1639,
                    2150,
                    2153,
                    1647,
                    1648,
                    2159,
                    2160,
                    2161,
                    1652,
                    2256,
                    1654,
                    1663
                ],
                "val_sample_weight": [
                    1637,
                    2151,
                    1639,
                    2153,
                    2160,
                    1649
                ],
                "val_sample_weights": [
                    1664,
                    1668,
                    1670,
                    1647,
                    2159,
                    2161,
                    2258,
                    1652,
                    1654
                ],
                "validation_split": [
                    1656,
                    1659,
                    1661
                ],
                "split_at": [
                    1665,
                    1666,
                    1659,
                    1661,
                    1662,
                    1663
                ],
                "self._make_train_function": [
                    2080,
                    1682,
                    1882
                ],
                "self._make_test_function": [
                    2082,
                    1923,
                    1774,
                    1689,
                    2330
                ],
                "n": [
                    2114,
                    1691
                ],
                "self._fit_loop": [
                    1698
                ],
                "self._make_predict_function": [
                    1832,
                    2481,
                    1944
                ],
                "self._predict_loop": [
                    1834
                ],
                "outputs": [
                    1924,
                    1925,
                    1926,
                    1927,
                    1947,
                    1948,
                    1945,
                    1946,
                    1883,
                    1884,
                    1885,
                    1886
                ],
                "wait_time": [
                    2372,
                    2344,
                    2511,
                    2484,
                    2076,
                    2175
                ],
                "is_sequence": [
                    2179,
                    2084,
                    2085,
                    2494,
                    2376,
                    2505,
                    2347,
                    2092,
                    2348,
                    2355,
                    2515,
                    2486,
                    2487,
                    2168,
                    2366
                ],
                "generator": [
                    2370,
                    2180,
                    2084,
                    2182,
                    2377,
                    2495,
                    2347,
                    2379,
                    2093,
                    2506,
                    2509,
                    2356,
                    2516,
                    2486,
                    2518,
                    2169,
                    2173,
                    2367
                ],
                "Sequence": [
                    2084,
                    2347,
                    2486,
                    2104,
                    2105
                ],
                "use_multiprocessing": [
                    2368,
                    2371,
                    2085,
                    2250,
                    2507,
                    2348,
                    2510,
                    2487,
                    2170,
                    2174
                ],
                "workers": [
                    2176,
                    2487,
                    2085,
                    2373,
                    2504,
                    2249,
                    2348,
                    2512,
                    2167,
                    2365
                ],
                "val_gen": [
                    2105,
                    2147,
                    2245,
                    2102
                ],
                "enqueuer": [
                    2176,
                    2177,
                    2362,
                    2367,
                    2557,
                    2370,
                    2373,
                    2374,
                    2501,
                    2506,
                    2509,
                    2512,
                    2513,
                    2143,
                    2276,
                    2277,
                    2169,
                    2426,
                    2427,
                    2173,
                    2558
                ],
                "val_enqueuer": [
                    2144,
                    2280,
                    2279
                ],
                "val_data": [
                    2161,
                    2163,
                    2165
                ],
                "OrderedEnqueuer": [
                    2169,
                    2506,
                    2367
                ],
                "GeneratorEnqueuer": [
                    2509,
                    2370,
                    2173
                ],
                "enqueuer.start": [
                    2176,
                    2373,
                    2512
                ],
                "max_queue_size": [
                    2176,
                    2251,
                    2373,
                    2512
                ],
                "output_generator": [
                    2177,
                    2180,
                    2374,
                    2182,
                    2377,
                    2379,
                    2385,
                    2513,
                    2195,
                    2516,
                    2518,
                    2524
                ],
                "enqueuer.get": [
                    2177,
                    2513,
                    2374
                ],
                "steps_done": [
                    2241,
                    2561,
                    2244,
                    2565,
                    2343,
                    2192,
                    2384,
                    2194,
                    2483,
                    2420,
                    2423,
                    2552,
                    2554,
                    2523
                ],
                "generator_output": [
                    2195,
                    2197,
                    2201,
                    2203,
                    2204,
                    2206,
                    2207,
                    2212,
                    2385,
                    2386,
                    2390,
                    2391,
                    2392,
                    2394,
                    2395,
                    2524,
                    2525,
                    2400,
                    2528,
                    2529,
                    2530,
                    2531,
                    2536,
                    2540
                ],
                "self.train_on_batch": [
                    2229
                ],
                "self.evaluate_generator": [
                    2246
                ],
                "self.evaluate": [
                    2255
                ],
                "enqueuer.stop": [
                    2427,
                    2277,
                    2558
                ],
                "val_enqueuer.stop": [
                    2280
                ],
                "interfaces.legacy_generator_methods_support": [
                    2440,
                    2285,
                    1950
                ],
                "interfaces": [
                    2440,
                    2285,
                    1950
                ],
                "outs_per_batch": [
                    2432,
                    2345,
                    2435,
                    2404
                ],
                "batch_sizes": [
                    2433,
                    2346,
                    2421
                ],
                "self.test_on_batch": [
                    2401
                ],
                "outs_per_batch.append": [
                    2404
                ],
                "batch_sizes.append": [
                    2421
                ],
                "averages": [
                    2432,
                    2435,
                    2436,
                    2437,
                    2438,
                    2429
                ],
                "averages.append": [
                    2432,
                    2435
                ],
                "np.average": [
                    2432
                ],
                "out": [
                    2432,
                    2566,
                    2568,
                    2547,
                    2550,
                    2551
                ],
                "all_outs": [
                    2560,
                    2562,
                    2564,
                    2566,
                    2568,
                    2546,
                    2548,
                    2485,
                    2551
                ],
                "self.predict_on_batch": [
                    2542
                ],
                "all_outs.append": [
                    2548
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/keras_29/tests/keras/metrics_test.py",
                "test_function": "test_stateful_metrics",
                "test_function_code": "@keras_test\n@pytest.mark.parametrize('metrics_mode', ['list', 'dict'])\ndef test_stateful_metrics(metrics_mode):\n    np.random.seed(1334)\n\n    class BinaryTruePositives(keras.layers.Layer):\n        \"\"\"Stateful Metric to count the total true positives over all batches.\n\n        Assumes predictions and targets of shape `(samples, 1)`.\n\n        # Arguments\n            name: String, name for the metric.\n        \"\"\"\n\n        def __init__(self, name='true_positives', **kwargs):\n            super(BinaryTruePositives, self).__init__(name=name, **kwargs)\n            self.stateful = True\n            self.true_positives = K.variable(value=0, dtype='int32')\n\n        def reset_states(self):\n            K.set_value(self.true_positives, 0)\n\n        def __call__(self, y_true, y_pred):\n            \"\"\"Computes the number of true positives in a batch.\n\n            # Arguments\n                y_true: Tensor, batch_wise labels\n                y_pred: Tensor, batch_wise predictions\n\n            # Returns\n                The total number of true positives seen this epoch at the\n                    completion of the batch.\n            \"\"\"\n            y_true = K.cast(y_true, 'int32')\n            y_pred = K.cast(K.round(y_pred), 'int32')\n            correct_preds = K.cast(K.equal(y_pred, y_true), 'int32')\n            true_pos = K.cast(K.sum(correct_preds * y_true), 'int32')\n            current_true_pos = self.true_positives * 1\n            self.add_update(K.update_add(self.true_positives,\n                                         true_pos),\n                            inputs=[y_true, y_pred])\n            return current_true_pos + true_pos\n\n    metric_fn = BinaryTruePositives()\n    config = metrics.serialize(metric_fn)\n    metric_fn = metrics.deserialize(\n        config, custom_objects={'BinaryTruePositives': BinaryTruePositives})\n\n    # Test on simple model\n    inputs = keras.Input(shape=(2,))\n    outputs = keras.layers.Dense(1, activation='sigmoid', name='out')(inputs)\n    model = keras.Model(inputs, outputs)\n\n    if metrics_mode == 'list':\n        model.compile(optimizer='sgd',\n                      loss='binary_crossentropy',\n                      metrics=['acc', metric_fn])\n    elif metrics_mode == 'dict':\n        model.compile(optimizer='sgd',\n                      loss='binary_crossentropy',\n                      metrics={'out': ['acc', metric_fn]})\n\n    samples = 1000\n    x = np.random.random((samples, 2))\n    y = np.random.randint(2, size=(samples, 1))\n\n    val_samples = 10\n    val_x = np.random.random((val_samples, 2))\n    val_y = np.random.randint(2, size=(val_samples, 1))\n\n    # Test fit and evaluate\n    history = model.fit(x, y, validation_data=(val_x, val_y), epochs=1, batch_size=10)\n    outs = model.evaluate(x, y, batch_size=10)\n    preds = model.predict(x)\n\n    def ref_true_pos(y_true, y_pred):\n        return np.sum(np.logical_and(y_pred > 0.5, y_true == 1))\n\n    # Test correctness (e.g. updates should have been run)\n    np.testing.assert_allclose(outs[2], ref_true_pos(y, preds), atol=1e-5)\n\n    # Test correctness of the validation metric computation\n    val_preds = model.predict(val_x)\n    val_outs = model.evaluate(val_x, val_y, batch_size=10)\n    np.testing.assert_allclose(val_outs[2], ref_true_pos(val_y, val_preds), atol=1e-5)\n    np.testing.assert_allclose(val_outs[2], history.history['val_true_positives'][-1], atol=1e-5)\n\n    # Test with generators\n    gen = [(np.array([x0]), np.array([y0])) for x0, y0 in zip(x, y)]\n    val_gen = [(np.array([x0]), np.array([y0])) for x0, y0 in zip(val_x, val_y)]\n    history = model.fit_generator(iter(gen), epochs=1, steps_per_epoch=samples,\n                                  validation_data=iter(val_gen), validation_steps=val_samples)\n    outs = model.evaluate_generator(iter(gen), steps=samples)\n    preds = model.predict_generator(iter(gen), steps=samples)\n\n    # Test correctness of the metric re ref_true_pos()\n    np.testing.assert_allclose(outs[2], ref_true_pos(y, preds), atol=1e-5)\n\n    # Test correctness of the validation metric computation\n    val_preds = model.predict_generator(iter(val_gen), steps=val_samples)\n    val_outs = model.evaluate_generator(iter(val_gen), steps=val_samples)\n    np.testing.assert_allclose(val_outs[2], ref_true_pos(val_y, val_preds), atol=1e-5)\n    np.testing.assert_allclose(val_outs[2], history.history['val_true_positives'][-1], atol=1e-5)",
                "test_error": "AssertionError:  Not equal to tolerance rtol=1e-07, atol=1e-05  Mismatched elements: 1 / 1 (100%) Max absolute difference: 491 Max relative difference: 1.0293501  x: array(968, dtype=int32)  y: array(477)",
                "full_test_error": "metrics_mode = 'dict'\n\n    @keras_test\n    @pytest.mark.parametrize('metrics_mode', ['list', 'dict'])\n    def test_stateful_metrics(metrics_mode):\n        np.random.seed(1334)\n    \n        class BinaryTruePositives(keras.layers.Layer):\n            \"\"\"Stateful Metric to count the total true positives over all batches.\n    \n            Assumes predictions and targets of shape `(samples, 1)`.\n    \n            # Arguments\n                name: String, name for the metric.\n            \"\"\"\n    \n            def __init__(self, name='true_positives', **kwargs):\n                super(BinaryTruePositives, self).__init__(name=name, **kwargs)\n                self.stateful = True\n                self.true_positives = K.variable(value=0, dtype='int32')\n    \n            def reset_states(self):\n                K.set_value(self.true_positives, 0)\n    \n            def __call__(self, y_true, y_pred):\n                \"\"\"Computes the number of true positives in a batch.\n    \n                # Arguments\n                    y_true: Tensor, batch_wise labels\n                    y_pred: Tensor, batch_wise predictions\n    \n                # Returns\n                    The total number of true positives seen this epoch at the\n                        completion of the batch.\n                \"\"\"\n                y_true = K.cast(y_true, 'int32')\n                y_pred = K.cast(K.round(y_pred), 'int32')\n                correct_preds = K.cast(K.equal(y_pred, y_true), 'int32')\n                true_pos = K.cast(K.sum(correct_preds * y_true), 'int32')\n                current_true_pos = self.true_positives * 1\n                self.add_update(K.update_add(self.true_positives,\n                                             true_pos),\n                                inputs=[y_true, y_pred])\n                return current_true_pos + true_pos\n    \n        metric_fn = BinaryTruePositives()\n        config = metrics.serialize(metric_fn)\n        metric_fn = metrics.deserialize(\n            config, custom_objects={'BinaryTruePositives': BinaryTruePositives})\n    \n        # Test on simple model\n        inputs = keras.Input(shape=(2,))\n        outputs = keras.layers.Dense(1, activation='sigmoid', name='out')(inputs)\n        model = keras.Model(inputs, outputs)\n    \n        if metrics_mode == 'list':\n            model.compile(optimizer='sgd',\n                          loss='binary_crossentropy',\n                          metrics=['acc', metric_fn])\n        elif metrics_mode == 'dict':\n            model.compile(optimizer='sgd',\n                          loss='binary_crossentropy',\n                          metrics={'out': ['acc', metric_fn]})\n    \n        samples = 1000\n        x = np.random.random((samples, 2))\n        y = np.random.randint(2, size=(samples, 1))\n    \n        val_samples = 10\n        val_x = np.random.random((val_samples, 2))\n        val_y = np.random.randint(2, size=(val_samples, 1))\n    \n        # Test fit and evaluate\n        history = model.fit(x, y, validation_data=(val_x, val_y), epochs=1, batch_size=10)\n        outs = model.evaluate(x, y, batch_size=10)\n        preds = model.predict(x)\n    \n        def ref_true_pos(y_true, y_pred):\n            return np.sum(np.logical_and(y_pred > 0.5, y_true == 1))\n    \n        # Test correctness (e.g. updates should have been run)\n>       np.testing.assert_allclose(outs[2], ref_true_pos(y, preds), atol=1e-5)\nE       AssertionError: \nE       Not equal to tolerance rtol=1e-07, atol=1e-05\nE       \nE       Mismatched elements: 1 / 1 (100%)\nE       Max absolute difference: 491\nE       Max relative difference: 1.0293501\nE        x: array(968, dtype=int32)\nE        y: array(477)\n\ntests/keras/metrics_test.py:188: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "keras_test",
                    "pytest.mark.parametrize('metrics_mode', ['list', 'dict'])"
                ]
            }
        ]
    }
}