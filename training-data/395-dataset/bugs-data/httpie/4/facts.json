{
    "1.1.1": "@property\ndef headers(self):\n    url = urlsplit(self._orig.url)\n\n    request_line = '{method} {path}{query} HTTP/1.1'.format(\n        method=self._orig.method,\n        path=url.path or '/',\n        query='?' + url.query if url.query else ''\n    )\n\n    headers = dict(self._orig.headers)\n\n    if 'Host' not in headers:\n        headers['Host'] = url.netloc.split('@')[-1]\n\n    headers = ['%s: %s' % (name, value)\n               for name, value in headers.items()]\n\n    headers.insert(0, request_line)\n    headers = '\\r\\n'.join(headers).strip()\n\n    if isinstance(headers, bytes):\n        # Python < 3\n        headers = headers.decode('utf8')\n    return headers\n",
    "1.1.2": null,
    "1.2.1": "class HTTPRequest(HTTPMessage)",
    "1.2.2": "A :class:`requests.models.Request` wrapper.",
    "1.2.3": [
        "headers(self)"
    ],
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/httpie_4/httpie/models.py",
    "1.3.2": [
        "headers(self)",
        "headers(self)",
        "headers(self)"
    ],
    "1.4.1": [
        "def test_Host_header_overwrite():\n    \"\"\"\n    https://github.com/jakubroztocil/httpie/issues/235\n\n    \"\"\"\n    host = 'httpbin.org'\n    url = 'http://{httpbin_ip}/get'.format(\n        httpbin_ip=socket.gethostbyname(host))\n    r = http('--print=hH', url, 'host:{}'.format(host))\n    assert HTTP_OK in r\n    assert r.lower().count('host:') == 1"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/httpie_4/tests/test_regressions.py"
    ],
    "2.1.1": [
        [
            "E       assert 2 == 1\nE         +2\nE         -1"
        ]
    ],
    "2.1.2": [
        [
            "def test_Host_header_overwrite():\n        \"\"\"\n        https://github.com/jakubroztocil/httpie/issues/235\n    \n        \"\"\"\n        host = 'httpbin.org'\n        url = 'http://{httpbin_ip}/get'.format(\n            httpbin_ip=socket.gethostbyname(host))\n        r = http('--print=hH', url, 'host:{}'.format(host))\n        assert HTTP_OK in r\n>       assert r.lower().count('host:') == 1",
            "\ntests/test_regressions.py:17: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self._orig": "<PreparedRequest [GET]>",
                "self": "<httpie.models.HTTPRequest object at 0x10e12ed50>"
            },
            {
                "url": "SplitResult(scheme='http', netloc='3.218.223.42', path='/get', query='', fragment='')",
                "request_line": "'GET /get HTTP/1.1'",
                "url.path": "'/get'",
                "url.query": "''",
                "headers": "\"GET /get HTTP/1.1\\r\\nUser-Agent: b'HTTPie/0.9.0-dev'\\r\\nAccept-Encoding: gzip, deflate, compress\\r\\nAccept: */*\\r\\nhost: b'httpbin.org'\\r\\nHost: 3.218.223.42\"",
                "url.netloc": "'3.218.223.42'"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self._orig": "PreparedRequest",
                "self": "HTTPRequest"
            },
            {
                "url": "SplitResult",
                "request_line": "str",
                "url.path": "str",
                "url.query": "str",
                "headers": "str",
                "url.netloc": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self._orig": "<PreparedRequest [GET]>",
                "self": "<httpie.models.HTTPRequest object at 0x105b43e10>"
            },
            {
                "url": "SplitResult(scheme='http', netloc='3.218.223.42', path='/get', query='', fragment='')",
                "request_line": "'GET /get HTTP/1.1'",
                "url.path": "'/get'",
                "url.query": "''",
                "headers": "\"GET /get HTTP/1.1\\r\\nUser-Agent: b'HTTPie/0.9.0-dev'\\r\\nAccept-Encoding: gzip, deflate, compress\\r\\nAccept: */*\\r\\nhost: b'httpbin.org'\"",
                "url.netloc": "'3.218.223.42'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self._orig": "PreparedRequest",
                "self": "HTTPRequest"
            },
            {
                "url": "SplitResult",
                "request_line": "str",
                "url.path": "str",
                "url.query": "str",
                "headers": "str",
                "url.netloc": "str"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}