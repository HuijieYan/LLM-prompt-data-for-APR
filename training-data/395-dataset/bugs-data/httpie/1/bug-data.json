{
    "httpie:1": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py": {
            "buggy_functions": [
                {
                    "function_name": "get_unique_filename",
                    "function_code": "def get_unique_filename(filename, exists=os.path.exists):\n    attempt = 0\n    while True:\n        suffix = '-' + str(attempt) if attempt > 0 else ''\n        if not exists(filename + suffix):\n            return filename + suffix\n        attempt += 1\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 138,
                    "end_line": 144,
                    "variables": {
                        "os.path.exists": [
                            138
                        ],
                        "os.path": [
                            138
                        ],
                        "os": [
                            138
                        ],
                        "attempt": [
                            144,
                            139,
                            141
                        ],
                        "suffix": [
                            141,
                            142,
                            143
                        ],
                        "str": [
                            141
                        ],
                        "exists": [
                            142
                        ],
                        "filename": [
                            142,
                            143
                        ]
                    },
                    "filtered_variables": {
                        "os.path.exists": [
                            138
                        ],
                        "os.path": [
                            138
                        ],
                        "os": [
                            138
                        ],
                        "attempt": [
                            144,
                            139,
                            141
                        ],
                        "suffix": [
                            141,
                            142,
                            143
                        ],
                        "exists": [
                            142
                        ],
                        "filename": [
                            142,
                            143
                        ]
                    },
                    "diff_line_number": 138,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "import sys\nimport mimetypes",
                    "start_line": 9,
                    "end_line": 10
                }
            ],
            "inscope_functions": [
                "def parse_content_range(content_range, resumed_from):\n    \"\"\"\n    Parse and validate Content-Range header.\n\n    <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>\n\n    :param content_range: the value of a Content-Range response header\n                          eg. \"bytes 21010-47021/47022\"\n    :param resumed_from: first byte pos. from the Range request header\n    :return: total size of the response body when fully downloaded.\n\n    \"\"\"\n    if content_range is None:\n        raise ContentRangeError('Missing Content-Range')\n\n    pattern = (\n        '^bytes (?P<first_byte_pos>\\d+)-(?P<last_byte_pos>\\d+)'\n        '/(\\*|(?P<instance_length>\\d+))$'\n    )\n    match = re.match(pattern, content_range)\n\n    if not match:\n        raise ContentRangeError(\n            'Invalid Content-Range format %r' % content_range)\n\n    content_range_dict = match.groupdict()\n    first_byte_pos = int(content_range_dict['first_byte_pos'])\n    last_byte_pos = int(content_range_dict['last_byte_pos'])\n    instance_length = (\n        int(content_range_dict['instance_length'])\n        if content_range_dict['instance_length']\n        else None\n    )\n\n    # \"A byte-content-range-spec with a byte-range-resp-spec whose\n    # last- byte-pos value is less than its first-byte-pos value,\n    # or whose instance-length value is less than or equal to its\n    # last-byte-pos value, is invalid. The recipient of an invalid\n    # byte-content-range- spec MUST ignore it and any content\n    # transferred along with it.\"\n    if (first_byte_pos >= last_byte_pos\n            or (instance_length is not None\n                and instance_length <= last_byte_pos)):\n        raise ContentRangeError(\n            'Invalid Content-Range returned: %r' % content_range)\n\n    if (first_byte_pos != resumed_from\n        or (instance_length is not None\n            and last_byte_pos + 1 != instance_length)):\n        # Not what we asked for.\n        raise ContentRangeError(\n            'Unexpected Content-Range returned (%r)'\n            ' for the requested Range (\"bytes=%d-\")'\n            % (content_range, resumed_from)\n        )\n\n    return last_byte_pos + 1",
                "def filename_from_content_disposition(content_disposition):\n    \"\"\"\n    Extract and validate filename from a Content-Disposition header.\n\n    :param content_disposition: Content-Disposition value\n    :return: the filename if present and valid, otherwise `None`\n\n    \"\"\"\n    # attachment; filename=jkbrzt-httpie-0.4.1-20-g40bd8f6.tar.gz\n\n    msg = Message('Content-Disposition: %s' % content_disposition)\n    filename = msg.get_filename()\n    if filename:\n        # Basic sanitation.\n        filename = os.path.basename(filename).lstrip('.').strip()\n        if filename:\n            return filename",
                "def filename_from_url(url, content_type):\n    fn = urlsplit(url).path.rstrip('/')\n    fn = os.path.basename(fn) if fn else 'index'\n    if '.' not in fn and content_type:\n        content_type = content_type.split(';')[0]\n        if content_type == 'text/plain':\n            # mimetypes returns '.ksh'\n            ext = '.txt'\n        else:\n            ext = mimetypes.guess_extension(content_type)\n\n        if ext == '.htm':  # Python 3\n            ext = '.html'\n\n        if ext:\n            fn += ext\n\n    return fn",
                "def get_unique_filename(filename, exists=os.path.exists):\n    attempt = 0\n    while True:\n        suffix = '-' + str(attempt) if attempt > 0 else ''\n        if not exists(filename + suffix):\n            return filename + suffix\n        attempt += 1",
                "def __init__(self, output_file=None,\n             resume=False, progress_file=sys.stderr):\n    \"\"\"\n    :param resume: Should the download resume if partial download\n                   already exists.\n    :type resume: bool\n\n    :param output_file: The file to store response body in. If not\n                        provided, it will be guessed from the response.\n\n    :param progress_file: Where to report download progress.\n\n    \"\"\"\n    self._output_file = output_file\n    self._resume = resume\n    self._resumed_from = 0\n    self.finished = False\n\n    self.status = Status()\n    self._progress_reporter = ProgressReporterThread(\n        status=self.status,\n        output=progress_file\n    )",
                "def pre_request(self, request_headers):\n    \"\"\"Called just before the HTTP request is sent.\n\n    Might alter `request_headers`.\n\n    :type request_headers: dict\n\n    \"\"\"\n    # Ask the server not to encode the content so that we can resume, etc.\n    request_headers['Accept-Encoding'] = 'identity'\n    if self._resume:\n        bytes_have = os.path.getsize(self._output_file.name)\n        if bytes_have:\n            # Set ``Range`` header to resume the download\n            # TODO: Use \"If-Range: mtime\" to make sure it's fresh?\n            request_headers['Range'] = 'bytes=%d-' % bytes_have\n            self._resumed_from = bytes_have",
                "def start(self, response):\n    \"\"\"\n    Initiate and return a stream for `response` body  with progress\n    callback attached. Can be called only once.\n\n    :param response: Initiated response object with headers already fetched\n    :type response: requests.models.Response\n\n    :return: RawStream, output_file\n\n    \"\"\"\n    assert not self.status.time_started\n\n    # FIXME: some servers still might sent Content-Encoding: gzip\n    # <https://github.com/jkbrzt/httpie/issues/423>\n    try:\n        total_size = int(response.headers['Content-Length'])\n    except (KeyError, ValueError, TypeError):\n        total_size = None\n\n    if self._output_file:\n        if self._resume and response.status_code == PARTIAL_CONTENT:\n            total_size = parse_content_range(\n                response.headers.get('Content-Range'),\n                self._resumed_from\n            )\n\n        else:\n            self._resumed_from = 0\n            try:\n                self._output_file.seek(0)\n                self._output_file.truncate()\n            except IOError:\n                pass  # stdout\n    else:\n        # TODO: Should the filename be taken from response.history[0].url?\n        # Output file not specified. Pick a name that doesn't exist yet.\n        filename = None\n        if 'Content-Disposition' in response.headers:\n            filename = filename_from_content_disposition(\n                response.headers['Content-Disposition'])\n        if not filename:\n            filename = filename_from_url(\n                url=response.url,\n                content_type=response.headers.get('Content-Type'),\n            )\n        self._output_file = open(get_unique_filename(filename), mode='a+b')\n\n    self.status.started(\n        resumed_from=self._resumed_from,\n        total_size=total_size\n    )\n\n    stream = RawStream(\n        msg=HTTPResponse(response),\n        with_headers=False,\n        with_body=True,\n        on_body_chunk_downloaded=self.chunk_downloaded,\n        chunk_size=1024 * 8\n    )\n\n    self._progress_reporter.output.write(\n        'Downloading %sto \"%s\"\\n' % (\n            (humanize_bytes(total_size) + ' '\n             if total_size is not None\n             else ''),\n            self._output_file.name\n        )\n    )\n    self._progress_reporter.start()\n\n    return stream, self._output_file",
                "def finish(self):\n    assert not self.finished\n    self.finished = True\n    self.status.finished()",
                "def failed(self):\n    self._progress_reporter.stop()",
                "@property\ndef interrupted(self):\n    return (\n        self.finished\n        and self.status.total_size\n        and self.status.total_size != self.status.downloaded\n    )",
                "def chunk_downloaded(self, chunk):\n    \"\"\"\n    A download progress callback.\n\n    :param chunk: A chunk of response body data that has just\n                  been downloaded and written to the output.\n    :type chunk: bytes\n\n    \"\"\"\n    self.status.chunk_downloaded(len(chunk))",
                "def __init__(self):\n    self.downloaded = 0\n    self.total_size = None\n    self.resumed_from = 0\n    self.time_started = None\n    self.time_finished = None",
                "def started(self, resumed_from=0, total_size=None):\n    assert self.time_started is None\n    self.total_size = total_size\n    self.downloaded = self.resumed_from = resumed_from\n    self.time_started = time()",
                "def chunk_downloaded(self, size):\n    assert self.time_finished is None\n    self.downloaded += size",
                "@property\ndef has_finished(self):\n    return self.time_finished is not None",
                "def finished(self):\n    assert self.time_started is not None\n    assert self.time_finished is None\n    self.time_finished = time()",
                "def __init__(self, status, output, tick=.1, update_interval=1):\n    \"\"\"\n\n    :type status: Status\n    :type output: file\n    \"\"\"\n    super(ProgressReporterThread, self).__init__()\n    self.status = status\n    self.output = output\n    self._tick = tick\n    self._update_interval = update_interval\n    self._spinner_pos = 0\n    self._status_line = ''\n    self._prev_bytes = 0\n    self._prev_time = time()\n    self._should_stop = threading.Event()",
                "def stop(self):\n    \"\"\"Stop reporting on next tick.\"\"\"\n    self._should_stop.set()",
                "def run(self):\n    while not self._should_stop.is_set():\n        if self.status.has_finished:\n            self.sum_up()\n            break\n\n        self.report_speed()\n        sleep(self._tick)",
                "def report_speed(self):\n\n    now = time()\n\n    if now - self._prev_time >= self._update_interval:\n        downloaded = self.status.downloaded\n        try:\n            speed = ((downloaded - self._prev_bytes)\n                     / (now - self._prev_time))\n        except ZeroDivisionError:\n            speed = 0\n\n        if not self.status.total_size:\n            self._status_line = PROGRESS_NO_CONTENT_LENGTH.format(\n                downloaded=humanize_bytes(downloaded),\n                speed=humanize_bytes(speed),\n            )\n        else:\n            try:\n                percentage = downloaded / self.status.total_size * 100\n            except ZeroDivisionError:\n                percentage = 0\n\n            if not speed:\n                eta = '-:--:--'\n            else:\n                s = int((self.status.total_size - downloaded) / speed)\n                h, s = divmod(s, 60 * 60)\n                m, s = divmod(s, 60)\n                eta = '{0}:{1:0>2}:{2:0>2}'.format(h, m, s)\n\n            self._status_line = PROGRESS.format(\n                percentage=percentage,\n                downloaded=humanize_bytes(downloaded),\n                speed=humanize_bytes(speed),\n                eta=eta,\n            )\n\n        self._prev_time = now\n        self._prev_bytes = downloaded\n\n    self.output.write(\n        CLEAR_LINE\n        + ' '\n        + SPINNER[self._spinner_pos]\n        + ' '\n        + self._status_line\n    )\n    self.output.flush()\n\n    self._spinner_pos = (self._spinner_pos + 1\n                         if self._spinner_pos + 1 != len(SPINNER)\n                         else 0)",
                "def sum_up(self):\n    actually_downloaded = (self.status.downloaded\n                           - self.status.resumed_from)\n    time_taken = self.status.time_finished - self.status.time_started\n\n    self.output.write(CLEAR_LINE)\n\n    try:\n        speed = actually_downloaded / time_taken\n    except ZeroDivisionError:\n        # Either time is 0 (not all systems provide `time.time`\n        # with a better precision than 1 second), and/or nothing\n        # has been downloaded.\n        speed = actually_downloaded\n\n    self.output.write(SUMMARY.format(\n        downloaded=humanize_bytes(actually_downloaded),\n        total=(self.status.total_size\n               and humanize_bytes(self.status.total_size)),\n        speed=humanize_bytes(speed),\n        time=time_taken,\n    ))\n    self.output.flush()"
            ],
            "inscope_function_signatures": [
                "parse_content_range(content_range, resumed_from)",
                "filename_from_content_disposition(content_disposition)",
                "filename_from_url(url, content_type)",
                "get_unique_filename(filename, exists=os.path.exists)",
                "__init__(self, output_file=None, resume=False, progress_file=sys.stderr)",
                "pre_request(self, request_headers)",
                "start(self, response)",
                "finish(self)",
                "failed(self)",
                "interrupted(self)",
                "chunk_downloaded(self, chunk)",
                "__init__(self)",
                "started(self, resumed_from=0, total_size=None)",
                "chunk_downloaded(self, size)",
                "has_finished(self)",
                "finished(self)",
                "__init__(self, status, output, tick=0.1, update_interval=1)",
                "stop(self)",
                "run(self)",
                "report_speed(self)",
                "sum_up(self)"
            ],
            "variables_in_file": {
                "PARTIAL_CONTENT": [
                    212,
                    21
                ],
                "CLEAR_LINE": [
                    24,
                    401,
                    418
                ],
                "PROGRESS": [
                    25,
                    390
                ],
                "PROGRESS_NO_CONTENT_LENGTH": [
                    372,
                    31
                ],
                "SUMMARY": [
                    32,
                    428
                ],
                "SPINNER": [
                    33,
                    410,
                    403
                ],
                "ValueError": [
                    208,
                    36
                ],
                "content_range": [
                    52,
                    84,
                    59,
                    93,
                    63
                ],
                "ContentRangeError": [
                    90,
                    83,
                    53,
                    62
                ],
                "pattern": [
                    59,
                    55
                ],
                "match": [
                    65,
                    59,
                    61
                ],
                "re.match": [
                    59
                ],
                "re": [
                    59
                ],
                "content_range_dict": [
                    65,
                    66,
                    67,
                    69,
                    70
                ],
                "match.groupdict": [
                    65
                ],
                "first_byte_pos": [
                    80,
                    66,
                    86
                ],
                "int": [
                    385,
                    66,
                    67,
                    69,
                    207
                ],
                "last_byte_pos": [
                    96,
                    67,
                    80,
                    82,
                    88
                ],
                "instance_length": [
                    68,
                    81,
                    82,
                    87,
                    88
                ],
                "resumed_from": [
                    305,
                    93,
                    86
                ],
                "msg": [
                    109,
                    110
                ],
                "Message": [
                    109
                ],
                "content_disposition": [
                    109
                ],
                "filename": [
                    228,
                    230,
                    232,
                    233,
                    237,
                    110,
                    111,
                    142,
                    113,
                    114,
                    115,
                    143
                ],
                "msg.get_filename": [
                    110
                ],
                "strip": [
                    113
                ],
                "lstrip": [
                    113
                ],
                "os.path.basename": [
                    120,
                    113
                ],
                "os.path": [
                    120,
                    113,
                    138,
                    184
                ],
                "os": [
                    120,
                    113,
                    138,
                    184
                ],
                "fn": [
                    133,
                    135,
                    119,
                    120,
                    121
                ],
                "path.rstrip": [
                    119
                ],
                "path": [
                    119
                ],
                "urlsplit": [
                    119
                ],
                "url": [
                    119
                ],
                "content_type": [
                    121,
                    122,
                    123,
                    127
                ],
                "content_type.split": [
                    122
                ],
                "ext": [
                    129,
                    130,
                    132,
                    133,
                    125,
                    127
                ],
                "mimetypes.guess_extension": [
                    127
                ],
                "mimetypes": [
                    127
                ],
                "os.path.exists": [
                    138
                ],
                "attempt": [
                    144,
                    139,
                    141
                ],
                "suffix": [
                    141,
                    142,
                    143
                ],
                "str": [
                    141
                ],
                "exists": [
                    142
                ],
                "object": [
                    147,
                    292
                ],
                "sys.stderr": [
                    150
                ],
                "sys": [
                    150
                ],
                "self._output_file": [
                    257,
                    162,
                    262,
                    237,
                    211,
                    184,
                    221,
                    222
                ],
                "self": [
                    162,
                    163,
                    164,
                    165,
                    167,
                    168,
                    169,
                    183,
                    184,
                    189,
                    202,
                    211,
                    212,
                    215,
                    219,
                    221,
                    222,
                    237,
                    239,
                    240,
                    248,
                    252,
                    257,
                    260,
                    262,
                    265,
                    266,
                    267,
                    270,
                    275,
                    276,
                    277,
                    289,
                    296,
                    297,
                    298,
                    299,
                    300,
                    303,
                    304,
                    305,
                    306,
                    309,
                    310,
                    314,
                    317,
                    318,
                    319,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    344,
                    348,
                    351,
                    352,
                    353,
                    356,
                    357,
                    363,
                    364,
                    366,
                    367,
                    371,
                    372,
                    378,
                    385,
                    390,
                    397,
                    398,
                    400,
                    403,
                    405,
                    407,
                    409,
                    410,
                    414,
                    415,
                    416,
                    418,
                    428,
                    430,
                    431,
                    435
                ],
                "output_file": [
                    162
                ],
                "self._resume": [
                    163,
                    212,
                    183
                ],
                "resume": [
                    163
                ],
                "self._resumed_from": [
                    164,
                    240,
                    215,
                    219,
                    189
                ],
                "self.finished": [
                    265,
                    266,
                    275,
                    165
                ],
                "self.status": [
                    385,
                    267,
                    276,
                    277,
                    414,
                    415,
                    416,
                    289,
                    167,
                    169,
                    430,
                    431,
                    202,
                    336,
                    352,
                    364,
                    239,
                    371,
                    378
                ],
                "Status": [
                    167
                ],
                "self._progress_reporter": [
                    168,
                    252,
                    260,
                    270
                ],
                "ProgressReporterThread": [
                    168,
                    335
                ],
                "progress_file": [
                    170
                ],
                "request_headers": [
                    188,
                    182
                ],
                "bytes_have": [
                    184,
                    185,
                    188,
                    189
                ],
                "os.path.getsize": [
                    184
                ],
                "self._output_file.name": [
                    184,
                    257
                ],
                "self.status.time_started": [
                    416,
                    202
                ],
                "total_size": [
                    207,
                    304,
                    209,
                    241,
                    213,
                    254,
                    255
                ],
                "response.headers": [
                    229,
                    231,
                    235,
                    207,
                    214
                ],
                "response": [
                    229,
                    231,
                    234,
                    235,
                    207,
                    212,
                    245,
                    214
                ],
                "KeyError": [
                    208
                ],
                "TypeError": [
                    208
                ],
                "response.status_code": [
                    212
                ],
                "parse_content_range": [
                    213
                ],
                "response.headers.get": [
                    235,
                    214
                ],
                "self._output_file.seek": [
                    221
                ],
                "self._output_file.truncate": [
                    222
                ],
                "IOError": [
                    223
                ],
                "filename_from_content_disposition": [
                    230
                ],
                "filename_from_url": [
                    233
                ],
                "response.url": [
                    234
                ],
                "open": [
                    237
                ],
                "get_unique_filename": [
                    237
                ],
                "self.status.started": [
                    239
                ],
                "stream": [
                    244,
                    262
                ],
                "RawStream": [
                    244
                ],
                "HTTPResponse": [
                    245
                ],
                "self.chunk_downloaded": [
                    248
                ],
                "self._progress_reporter.output.write": [
                    252
                ],
                "self._progress_reporter.output": [
                    252
                ],
                "humanize_bytes": [
                    392,
                    393,
                    429,
                    431,
                    432,
                    373,
                    374,
                    254
                ],
                "self._progress_reporter.start": [
                    260
                ],
                "self.status.finished": [
                    267
                ],
                "self._progress_reporter.stop": [
                    270
                ],
                "self.status.total_size": [
                    385,
                    430,
                    431,
                    371,
                    276,
                    277,
                    378
                ],
                "self.status.downloaded": [
                    364,
                    277,
                    414
                ],
                "property": [
                    272,
                    312
                ],
                "self.status.chunk_downloaded": [
                    289
                ],
                "len": [
                    289,
                    410
                ],
                "chunk": [
                    289
                ],
                "self.downloaded": [
                    296,
                    305,
                    310
                ],
                "self.total_size": [
                    304,
                    297
                ],
                "self.resumed_from": [
                    305,
                    298
                ],
                "self.time_started": [
                    306,
                    299,
                    317,
                    303
                ],
                "self.time_finished": [
                    300,
                    309,
                    314,
                    318,
                    319
                ],
                "time": [
                    361,
                    306,
                    343,
                    319
                ],
                "size": [
                    310
                ],
                "threading.Thread": [
                    322
                ],
                "threading": [
                    344,
                    322
                ],
                "__init__": [
                    335
                ],
                "super": [
                    335
                ],
                "status": [
                    336
                ],
                "self.output": [
                    418,
                    428,
                    400,
                    337,
                    435,
                    407
                ],
                "output": [
                    337
                ],
                "self._tick": [
                    338,
                    357
                ],
                "tick": [
                    338
                ],
                "self._update_interval": [
                    363,
                    339
                ],
                "update_interval": [
                    339
                ],
                "self._spinner_pos": [
                    409,
                    410,
                    403,
                    340
                ],
                "self._status_line": [
                    372,
                    341,
                    390,
                    405
                ],
                "self._prev_bytes": [
                    366,
                    398,
                    342
                ],
                "self._prev_time": [
                    363,
                    367,
                    397,
                    343
                ],
                "self._should_stop": [
                    344,
                    348,
                    351
                ],
                "threading.Event": [
                    344
                ],
                "self._should_stop.set": [
                    348
                ],
                "self._should_stop.is_set": [
                    351
                ],
                "self.status.has_finished": [
                    352
                ],
                "self.sum_up": [
                    353
                ],
                "self.report_speed": [
                    356
                ],
                "sleep": [
                    357
                ],
                "now": [
                    361,
                    363,
                    397,
                    367
                ],
                "downloaded": [
                    385,
                    392,
                    364,
                    366,
                    398,
                    373,
                    378
                ],
                "speed": [
                    385,
                    421,
                    393,
                    426,
                    366,
                    432,
                    369,
                    374,
                    382
                ],
                "ZeroDivisionError": [
                    368,
                    379,
                    422
                ],
                "PROGRESS_NO_CONTENT_LENGTH.format": [
                    372
                ],
                "percentage": [
                    378,
                    380,
                    391
                ],
                "eta": [
                    394,
                    388,
                    383
                ],
                "s": [
                    385,
                    386,
                    387,
                    388
                ],
                "h": [
                    386,
                    388
                ],
                "divmod": [
                    386,
                    387
                ],
                "m": [
                    387,
                    388
                ],
                "format": [
                    388
                ],
                "PROGRESS.format": [
                    390
                ],
                "self.output.write": [
                    400,
                    418,
                    428
                ],
                "self.output.flush": [
                    435,
                    407
                ],
                "actually_downloaded": [
                    426,
                    421,
                    414,
                    429
                ],
                "self.status.resumed_from": [
                    415
                ],
                "time_taken": [
                    416,
                    433,
                    421
                ],
                "self.status.time_finished": [
                    416
                ],
                "SUMMARY.format": [
                    428
                ]
            },
            "filtered_variables_in_file": {
                "PARTIAL_CONTENT": [
                    212,
                    21
                ],
                "CLEAR_LINE": [
                    24,
                    401,
                    418
                ],
                "PROGRESS": [
                    25,
                    390
                ],
                "PROGRESS_NO_CONTENT_LENGTH": [
                    372,
                    31
                ],
                "SUMMARY": [
                    32,
                    428
                ],
                "SPINNER": [
                    33,
                    410,
                    403
                ],
                "content_range": [
                    52,
                    84,
                    59,
                    93,
                    63
                ],
                "ContentRangeError": [
                    90,
                    83,
                    53,
                    62
                ],
                "pattern": [
                    59,
                    55
                ],
                "match": [
                    65,
                    59,
                    61
                ],
                "re.match": [
                    59
                ],
                "re": [
                    59
                ],
                "content_range_dict": [
                    65,
                    66,
                    67,
                    69,
                    70
                ],
                "match.groupdict": [
                    65
                ],
                "first_byte_pos": [
                    80,
                    66,
                    86
                ],
                "last_byte_pos": [
                    96,
                    67,
                    80,
                    82,
                    88
                ],
                "instance_length": [
                    68,
                    81,
                    82,
                    87,
                    88
                ],
                "resumed_from": [
                    305,
                    93,
                    86
                ],
                "msg": [
                    109,
                    110
                ],
                "Message": [
                    109
                ],
                "content_disposition": [
                    109
                ],
                "filename": [
                    228,
                    230,
                    232,
                    233,
                    237,
                    110,
                    111,
                    142,
                    113,
                    114,
                    115,
                    143
                ],
                "msg.get_filename": [
                    110
                ],
                "strip": [
                    113
                ],
                "lstrip": [
                    113
                ],
                "os.path.basename": [
                    120,
                    113
                ],
                "os.path": [
                    120,
                    113,
                    138,
                    184
                ],
                "os": [
                    120,
                    113,
                    138,
                    184
                ],
                "fn": [
                    133,
                    135,
                    119,
                    120,
                    121
                ],
                "path.rstrip": [
                    119
                ],
                "path": [
                    119
                ],
                "urlsplit": [
                    119
                ],
                "url": [
                    119
                ],
                "content_type": [
                    121,
                    122,
                    123,
                    127
                ],
                "content_type.split": [
                    122
                ],
                "ext": [
                    129,
                    130,
                    132,
                    133,
                    125,
                    127
                ],
                "mimetypes.guess_extension": [
                    127
                ],
                "mimetypes": [
                    127
                ],
                "os.path.exists": [
                    138
                ],
                "attempt": [
                    144,
                    139,
                    141
                ],
                "suffix": [
                    141,
                    142,
                    143
                ],
                "exists": [
                    142
                ],
                "sys.stderr": [
                    150
                ],
                "sys": [
                    150
                ],
                "self._output_file": [
                    257,
                    162,
                    262,
                    237,
                    211,
                    184,
                    221,
                    222
                ],
                "self": [
                    162,
                    163,
                    164,
                    165,
                    167,
                    168,
                    169,
                    183,
                    184,
                    189,
                    202,
                    211,
                    212,
                    215,
                    219,
                    221,
                    222,
                    237,
                    239,
                    240,
                    248,
                    252,
                    257,
                    260,
                    262,
                    265,
                    266,
                    267,
                    270,
                    275,
                    276,
                    277,
                    289,
                    296,
                    297,
                    298,
                    299,
                    300,
                    303,
                    304,
                    305,
                    306,
                    309,
                    310,
                    314,
                    317,
                    318,
                    319,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    344,
                    348,
                    351,
                    352,
                    353,
                    356,
                    357,
                    363,
                    364,
                    366,
                    367,
                    371,
                    372,
                    378,
                    385,
                    390,
                    397,
                    398,
                    400,
                    403,
                    405,
                    407,
                    409,
                    410,
                    414,
                    415,
                    416,
                    418,
                    428,
                    430,
                    431,
                    435
                ],
                "output_file": [
                    162
                ],
                "self._resume": [
                    163,
                    212,
                    183
                ],
                "resume": [
                    163
                ],
                "self._resumed_from": [
                    164,
                    240,
                    215,
                    219,
                    189
                ],
                "self.finished": [
                    265,
                    266,
                    275,
                    165
                ],
                "self.status": [
                    385,
                    267,
                    276,
                    277,
                    414,
                    415,
                    416,
                    289,
                    167,
                    169,
                    430,
                    431,
                    202,
                    336,
                    352,
                    364,
                    239,
                    371,
                    378
                ],
                "Status": [
                    167
                ],
                "self._progress_reporter": [
                    168,
                    252,
                    260,
                    270
                ],
                "ProgressReporterThread": [
                    168,
                    335
                ],
                "progress_file": [
                    170
                ],
                "request_headers": [
                    188,
                    182
                ],
                "bytes_have": [
                    184,
                    185,
                    188,
                    189
                ],
                "os.path.getsize": [
                    184
                ],
                "self._output_file.name": [
                    184,
                    257
                ],
                "self.status.time_started": [
                    416,
                    202
                ],
                "total_size": [
                    207,
                    304,
                    209,
                    241,
                    213,
                    254,
                    255
                ],
                "response.headers": [
                    229,
                    231,
                    235,
                    207,
                    214
                ],
                "response": [
                    229,
                    231,
                    234,
                    235,
                    207,
                    212,
                    245,
                    214
                ],
                "response.status_code": [
                    212
                ],
                "parse_content_range": [
                    213
                ],
                "response.headers.get": [
                    235,
                    214
                ],
                "self._output_file.seek": [
                    221
                ],
                "self._output_file.truncate": [
                    222
                ],
                "filename_from_content_disposition": [
                    230
                ],
                "filename_from_url": [
                    233
                ],
                "response.url": [
                    234
                ],
                "get_unique_filename": [
                    237
                ],
                "self.status.started": [
                    239
                ],
                "stream": [
                    244,
                    262
                ],
                "RawStream": [
                    244
                ],
                "HTTPResponse": [
                    245
                ],
                "self.chunk_downloaded": [
                    248
                ],
                "self._progress_reporter.output.write": [
                    252
                ],
                "self._progress_reporter.output": [
                    252
                ],
                "humanize_bytes": [
                    392,
                    393,
                    429,
                    431,
                    432,
                    373,
                    374,
                    254
                ],
                "self._progress_reporter.start": [
                    260
                ],
                "self.status.finished": [
                    267
                ],
                "self._progress_reporter.stop": [
                    270
                ],
                "self.status.total_size": [
                    385,
                    430,
                    431,
                    371,
                    276,
                    277,
                    378
                ],
                "self.status.downloaded": [
                    364,
                    277,
                    414
                ],
                "self.status.chunk_downloaded": [
                    289
                ],
                "chunk": [
                    289
                ],
                "self.downloaded": [
                    296,
                    305,
                    310
                ],
                "self.total_size": [
                    304,
                    297
                ],
                "self.resumed_from": [
                    305,
                    298
                ],
                "self.time_started": [
                    306,
                    299,
                    317,
                    303
                ],
                "self.time_finished": [
                    300,
                    309,
                    314,
                    318,
                    319
                ],
                "time": [
                    361,
                    306,
                    343,
                    319
                ],
                "size": [
                    310
                ],
                "threading.Thread": [
                    322
                ],
                "threading": [
                    344,
                    322
                ],
                "__init__": [
                    335
                ],
                "status": [
                    336
                ],
                "self.output": [
                    418,
                    428,
                    400,
                    337,
                    435,
                    407
                ],
                "output": [
                    337
                ],
                "self._tick": [
                    338,
                    357
                ],
                "tick": [
                    338
                ],
                "self._update_interval": [
                    363,
                    339
                ],
                "update_interval": [
                    339
                ],
                "self._spinner_pos": [
                    409,
                    410,
                    403,
                    340
                ],
                "self._status_line": [
                    372,
                    341,
                    390,
                    405
                ],
                "self._prev_bytes": [
                    366,
                    398,
                    342
                ],
                "self._prev_time": [
                    363,
                    367,
                    397,
                    343
                ],
                "self._should_stop": [
                    344,
                    348,
                    351
                ],
                "threading.Event": [
                    344
                ],
                "self._should_stop.set": [
                    348
                ],
                "self._should_stop.is_set": [
                    351
                ],
                "self.status.has_finished": [
                    352
                ],
                "self.sum_up": [
                    353
                ],
                "self.report_speed": [
                    356
                ],
                "sleep": [
                    357
                ],
                "now": [
                    361,
                    363,
                    397,
                    367
                ],
                "downloaded": [
                    385,
                    392,
                    364,
                    366,
                    398,
                    373,
                    378
                ],
                "speed": [
                    385,
                    421,
                    393,
                    426,
                    366,
                    432,
                    369,
                    374,
                    382
                ],
                "PROGRESS_NO_CONTENT_LENGTH.format": [
                    372
                ],
                "percentage": [
                    378,
                    380,
                    391
                ],
                "eta": [
                    394,
                    388,
                    383
                ],
                "s": [
                    385,
                    386,
                    387,
                    388
                ],
                "h": [
                    386,
                    388
                ],
                "m": [
                    387,
                    388
                ],
                "PROGRESS.format": [
                    390
                ],
                "self.output.write": [
                    400,
                    418,
                    428
                ],
                "self.output.flush": [
                    435,
                    407
                ],
                "actually_downloaded": [
                    426,
                    421,
                    414,
                    429
                ],
                "self.status.resumed_from": [
                    415
                ],
                "time_taken": [
                    416,
                    433,
                    421
                ],
                "self.status.time_finished": [
                    416
                ],
                "SUMMARY.format": [
                    428
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/tests/test_downloads.py",
                "test_function": "test_unique_filename",
                "test_function_code": "    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual",
                "test_error": "AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'",
                "full_test_error": "args = (<test_downloads.TestDownloadUtils object at 0x10d138b90>,)\nkeywargs = {'expected': 'foo.bar', 'orig_name': 'foo.bar', 'unique_on_attempt': 0}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        with self.decoration_helper(patched,\n                                    args,\n>                                   keywargs) as (newargs, newkeywargs):\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "traceback": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('orig_name, unique_on_attempt, expected', [('foo.bar', 0, 'foo.bar'), ('foo.bar', 1, 'foo.bar-1'), ('foo.bar', 10, 'foo.bar-10'), ('A' * 20, 0, 'A' * 10), ('A' * 20, 1, 'A' * 8 + '-1'), ('A' * 20, 10, 'A' * 7 + '-10'), ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'), ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'), ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6), ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'), ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10')])",
                    "mock.patch('httpie.downloads.get_filename_max_length')"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/tests/test_downloads.py",
                "test_function": "test_unique_filename",
                "test_function_code": "    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual",
                "test_error": "AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'",
                "full_test_error": "args = (<test_downloads.TestDownloadUtils object at 0x10d11e4d0>,)\nkeywargs = {'expected': 'foo.bar-1', 'orig_name': 'foo.bar', 'unique_on_attempt': 1}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        with self.decoration_helper(patched,\n                                    args,\n>                                   keywargs) as (newargs, newkeywargs):\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "traceback": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('orig_name, unique_on_attempt, expected', [('foo.bar', 0, 'foo.bar'), ('foo.bar', 1, 'foo.bar-1'), ('foo.bar', 10, 'foo.bar-10'), ('A' * 20, 0, 'A' * 10), ('A' * 20, 1, 'A' * 8 + '-1'), ('A' * 20, 10, 'A' * 7 + '-10'), ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'), ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'), ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6), ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'), ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10')])",
                    "mock.patch('httpie.downloads.get_filename_max_length')"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/tests/test_downloads.py",
                "test_function": "test_unique_filename",
                "test_function_code": "    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual",
                "test_error": "AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'",
                "full_test_error": "args = (<test_downloads.TestDownloadUtils object at 0x10cd8a7d0>,)\nkeywargs = {'expected': 'foo.bar-10', 'orig_name': 'foo.bar', 'unique_on_attempt': 10}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        with self.decoration_helper(patched,\n                                    args,\n>                                   keywargs) as (newargs, newkeywargs):\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "traceback": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('orig_name, unique_on_attempt, expected', [('foo.bar', 0, 'foo.bar'), ('foo.bar', 1, 'foo.bar-1'), ('foo.bar', 10, 'foo.bar-10'), ('A' * 20, 0, 'A' * 10), ('A' * 20, 1, 'A' * 8 + '-1'), ('A' * 20, 10, 'A' * 7 + '-10'), ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'), ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'), ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6), ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'), ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10')])",
                    "mock.patch('httpie.downloads.get_filename_max_length')"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/tests/test_downloads.py",
                "test_function": "test_unique_filename",
                "test_function_code": "    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual",
                "test_error": "AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'",
                "full_test_error": "args = (<test_downloads.TestDownloadUtils object at 0x10d1d4250>,)\nkeywargs = {'expected': 'AAAAAAAAAA', 'orig_name': 'AAAAAAAAAAAAAAAAAAAA', 'unique_on_attempt': 0}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        with self.decoration_helper(patched,\n                                    args,\n>                                   keywargs) as (newargs, newkeywargs):\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "traceback": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('orig_name, unique_on_attempt, expected', [('foo.bar', 0, 'foo.bar'), ('foo.bar', 1, 'foo.bar-1'), ('foo.bar', 10, 'foo.bar-10'), ('A' * 20, 0, 'A' * 10), ('A' * 20, 1, 'A' * 8 + '-1'), ('A' * 20, 10, 'A' * 7 + '-10'), ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'), ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'), ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6), ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'), ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10')])",
                    "mock.patch('httpie.downloads.get_filename_max_length')"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/tests/test_downloads.py",
                "test_function": "test_unique_filename",
                "test_function_code": "    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual",
                "test_error": "AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'",
                "full_test_error": "args = (<test_downloads.TestDownloadUtils object at 0x10d23a850>,)\nkeywargs = {'expected': 'AAAAAAAA-1', 'orig_name': 'AAAAAAAAAAAAAAAAAAAA', 'unique_on_attempt': 1}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        with self.decoration_helper(patched,\n                                    args,\n>                                   keywargs) as (newargs, newkeywargs):\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "traceback": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('orig_name, unique_on_attempt, expected', [('foo.bar', 0, 'foo.bar'), ('foo.bar', 1, 'foo.bar-1'), ('foo.bar', 10, 'foo.bar-10'), ('A' * 20, 0, 'A' * 10), ('A' * 20, 1, 'A' * 8 + '-1'), ('A' * 20, 10, 'A' * 7 + '-10'), ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'), ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'), ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6), ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'), ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10')])",
                    "mock.patch('httpie.downloads.get_filename_max_length')"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/tests/test_downloads.py",
                "test_function": "test_unique_filename",
                "test_function_code": "    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual",
                "test_error": "AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'",
                "full_test_error": "args = (<test_downloads.TestDownloadUtils object at 0x10d36eb10>,)\nkeywargs = {'expected': 'AAAAAAA-10', 'orig_name': 'AAAAAAAAAAAAAAAAAAAA', 'unique_on_attempt': 10}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        with self.decoration_helper(patched,\n                                    args,\n>                                   keywargs) as (newargs, newkeywargs):\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "traceback": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('orig_name, unique_on_attempt, expected', [('foo.bar', 0, 'foo.bar'), ('foo.bar', 1, 'foo.bar-1'), ('foo.bar', 10, 'foo.bar-10'), ('A' * 20, 0, 'A' * 10), ('A' * 20, 1, 'A' * 8 + '-1'), ('A' * 20, 10, 'A' * 7 + '-10'), ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'), ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'), ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6), ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'), ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10')])",
                    "mock.patch('httpie.downloads.get_filename_max_length')"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/tests/test_downloads.py",
                "test_function": "test_unique_filename",
                "test_function_code": "    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual",
                "test_error": "AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'",
                "full_test_error": "args = (<test_downloads.TestDownloadUtils object at 0x10d138c10>,)\nkeywargs = {'expected': 'AAAAAA.txt', 'orig_name': 'AAAAAAAAAAAAAAAAAAAA.txt', 'unique_on_attempt': 0}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        with self.decoration_helper(patched,\n                                    args,\n>                                   keywargs) as (newargs, newkeywargs):\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "traceback": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('orig_name, unique_on_attempt, expected', [('foo.bar', 0, 'foo.bar'), ('foo.bar', 1, 'foo.bar-1'), ('foo.bar', 10, 'foo.bar-10'), ('A' * 20, 0, 'A' * 10), ('A' * 20, 1, 'A' * 8 + '-1'), ('A' * 20, 10, 'A' * 7 + '-10'), ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'), ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'), ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6), ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'), ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10')])",
                    "mock.patch('httpie.downloads.get_filename_max_length')"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/tests/test_downloads.py",
                "test_function": "test_unique_filename",
                "test_function_code": "    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual",
                "test_error": "AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'",
                "full_test_error": "args = (<test_downloads.TestDownloadUtils object at 0x10cd8ae10>,)\nkeywargs = {'expected': 'AAAA.txt-1', 'orig_name': 'AAAAAAAAAAAAAAAAAAAA.txt', 'unique_on_attempt': 1}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        with self.decoration_helper(patched,\n                                    args,\n>                                   keywargs) as (newargs, newkeywargs):\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "traceback": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('orig_name, unique_on_attempt, expected', [('foo.bar', 0, 'foo.bar'), ('foo.bar', 1, 'foo.bar-1'), ('foo.bar', 10, 'foo.bar-10'), ('A' * 20, 0, 'A' * 10), ('A' * 20, 1, 'A' * 8 + '-1'), ('A' * 20, 10, 'A' * 7 + '-10'), ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'), ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'), ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6), ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'), ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10')])",
                    "mock.patch('httpie.downloads.get_filename_max_length')"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/tests/test_downloads.py",
                "test_function": "test_unique_filename",
                "test_function_code": "    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual",
                "test_error": "AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'",
                "full_test_error": "args = (<test_downloads.TestDownloadUtils object at 0x10d36e790>,)\nkeywargs = {'expected': 'foo.AAAAAA', 'orig_name': 'foo.AAAAAAAAAAAAAAAAAAAA', 'unique_on_attempt': 0}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        with self.decoration_helper(patched,\n                                    args,\n>                                   keywargs) as (newargs, newkeywargs):\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "traceback": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('orig_name, unique_on_attempt, expected', [('foo.bar', 0, 'foo.bar'), ('foo.bar', 1, 'foo.bar-1'), ('foo.bar', 10, 'foo.bar-10'), ('A' * 20, 0, 'A' * 10), ('A' * 20, 1, 'A' * 8 + '-1'), ('A' * 20, 10, 'A' * 7 + '-10'), ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'), ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'), ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6), ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'), ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10')])",
                    "mock.patch('httpie.downloads.get_filename_max_length')"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/tests/test_downloads.py",
                "test_function": "test_unique_filename",
                "test_function_code": "    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual",
                "test_error": "AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'",
                "full_test_error": "args = (<test_downloads.TestDownloadUtils object at 0x10d21e150>,)\nkeywargs = {'expected': 'foo.AAAA-1', 'orig_name': 'foo.AAAAAAAAAAAAAAAAAAAA', 'unique_on_attempt': 1}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        with self.decoration_helper(patched,\n                                    args,\n>                                   keywargs) as (newargs, newkeywargs):\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "traceback": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('orig_name, unique_on_attempt, expected', [('foo.bar', 0, 'foo.bar'), ('foo.bar', 1, 'foo.bar-1'), ('foo.bar', 10, 'foo.bar-10'), ('A' * 20, 0, 'A' * 10), ('A' * 20, 1, 'A' * 8 + '-1'), ('A' * 20, 10, 'A' * 7 + '-10'), ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'), ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'), ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6), ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'), ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10')])",
                    "mock.patch('httpie.downloads.get_filename_max_length')"
                ]
            },
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/tests/test_downloads.py",
                "test_function": "test_unique_filename",
                "test_function_code": "    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual",
                "test_error": "AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'",
                "full_test_error": "args = (<test_downloads.TestDownloadUtils object at 0x10d40a210>,)\nkeywargs = {'expected': 'foo.AAA-10', 'orig_name': 'foo.AAAAAAAAAAAAAAAAAAAA', 'unique_on_attempt': 10}\n\n    @wraps(func)\n    def patched(*args, **keywargs):\n        with self.decoration_helper(patched,\n                                    args,\n>                                   keywargs) as (newargs, newkeywargs):\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "traceback": "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/contextlib.py:112: in __enter__\n    return next(self.gen)\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1334: in decoration_helper\n    arg = patching.__enter__()\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1437: in __enter__\n    original, local = self.get_original()",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <mock.mock._patch object at 0x10d105110>\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n    \n        original = DEFAULT\n        local = False\n    \n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n    \n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n    \n        if not self.create and original is DEFAULT:\n            raise AttributeError(\n>               \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: <module 'httpie.downloads' from '/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_1/httpie/downloads.py'> does not have the attribute 'get_filename_max_length'\n\n../../envs/httpie_1/lib/python3.7/site-packages/mock/mock.py:1411: AttributeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('orig_name, unique_on_attempt, expected', [('foo.bar', 0, 'foo.bar'), ('foo.bar', 1, 'foo.bar-1'), ('foo.bar', 10, 'foo.bar-10'), ('A' * 20, 0, 'A' * 10), ('A' * 20, 1, 'A' * 8 + '-1'), ('A' * 20, 10, 'A' * 7 + '-10'), ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'), ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'), ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6), ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'), ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10')])",
                    "mock.patch('httpie.downloads.get_filename_max_length')"
                ]
            }
        ]
    }
}