{
    "httpie:5": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_5/httpie/cli.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self, *separators):\n    self.separators = separators\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 37,
                    "end_line": 38,
                    "variables": {
                        "self.separators": [
                            38
                        ],
                        "self": [
                            38
                        ],
                        "separators": [
                            38
                        ]
                    },
                    "filtered_variables": {
                        "self.separators": [
                            38
                        ],
                        "self": [
                            38
                        ],
                        "separators": [
                            38
                        ]
                    },
                    "diff_line_number": 38,
                    "class_data": {
                        "signature": "class KeyValueType(object)",
                        "docstring": "A type used with `argparse`.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *separators):\n    self.separators = separators",
                            "def __call__(self, string):\n    found = {}\n    for sep in self.separators:\n        regex = '[^\\\\\\\\]' + sep\n        match = re.search(regex, string)\n        if match:\n            found[match.start() + 1] = sep\n    if not found:\n        raise argparse.ArgumentTypeError('\"%s\" is not a valid value' % string)\n    seploc = min(found.keys())\n    sep = found[seploc]\n    key = string[:seploc]\n    value = string[seploc + len(sep):]\n    for sepstr in self.separators:\n        key = key.replace('\\\\' + sepstr, sepstr)\n        value = value.replace('\\\\' + sepstr, sepstr)\n    return KeyValue(key=key, value=value, sep=sep, orig=string)"
                        ],
                        "constructor_variables": [
                            "separators"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, *separators)",
                            "__call__(self, string)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "self.separators": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<httpie.cli.KeyValueType object at 0x102ffd5d0>",
                                    "variable_type": "KeyValueType",
                                    "variable_shape": null
                                },
                                "separators": {
                                    "variable_value": "(':', '=', ':=', '@')",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self.separators": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<httpie.cli.KeyValueType object at 0x1053ad4d0>",
                                    "variable_type": "KeyValueType",
                                    "variable_shape": null
                                },
                                "separators": {
                                    "variable_value": "(':', '=', ':=', '@')",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "self.escapes": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "sep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "__call__",
                    "function_code": "def __call__(self, string):\n    found = {}\n    for sep in self.separators:\n        regex = '[^\\\\\\\\]' + sep\n        match = re.search(regex, string)\n        if match:\n            found[match.start() + 1] = sep\n\n    if not found:\n        #noinspection PyExceptionInherit\n        raise argparse.ArgumentTypeError(\n            '\"%s\" is not a valid value' % string)\n\n    # split the string at the earliest non-escaped separator.\n    seploc = min(found.keys())\n    sep = found[seploc]\n    key = string[:seploc]\n    value = string[seploc + len(sep):]\n\n    # remove escape chars\n    for sepstr in self.separators:\n        key = key.replace('\\\\' + sepstr, sepstr)\n        value = value.replace('\\\\' + sepstr, sepstr)\n    return KeyValue(key=key, value=value, sep=sep, orig=string)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 40,
                    "end_line": 63,
                    "variables": {
                        "found": [
                            41,
                            46,
                            48,
                            54,
                            55
                        ],
                        "sep": [
                            42,
                            43,
                            46,
                            55,
                            57,
                            63
                        ],
                        "self.separators": [
                            42,
                            60
                        ],
                        "self": [
                            42,
                            60
                        ],
                        "regex": [
                            43,
                            44
                        ],
                        "match": [
                            44,
                            45,
                            46
                        ],
                        "re.search": [
                            44
                        ],
                        "re": [
                            44
                        ],
                        "string": [
                            44,
                            51,
                            56,
                            57,
                            63
                        ],
                        "match.start": [
                            46
                        ],
                        "argparse.ArgumentTypeError": [
                            50
                        ],
                        "argparse": [
                            50
                        ],
                        "seploc": [
                            56,
                            57,
                            54,
                            55
                        ],
                        "min": [
                            54
                        ],
                        "found.keys": [
                            54
                        ],
                        "key": [
                            56,
                            61,
                            63
                        ],
                        "value": [
                            57,
                            62,
                            63
                        ],
                        "len": [
                            57
                        ],
                        "sepstr": [
                            60,
                            61,
                            62
                        ],
                        "key.replace": [
                            61
                        ],
                        "value.replace": [
                            62
                        ],
                        "KeyValue": [
                            63
                        ]
                    },
                    "filtered_variables": {
                        "found": [
                            41,
                            46,
                            48,
                            54,
                            55
                        ],
                        "sep": [
                            42,
                            43,
                            46,
                            55,
                            57,
                            63
                        ],
                        "self.separators": [
                            42,
                            60
                        ],
                        "self": [
                            42,
                            60
                        ],
                        "regex": [
                            43,
                            44
                        ],
                        "match": [
                            44,
                            45,
                            46
                        ],
                        "re.search": [
                            44
                        ],
                        "re": [
                            44
                        ],
                        "string": [
                            44,
                            51,
                            56,
                            57,
                            63
                        ],
                        "match.start": [
                            46
                        ],
                        "argparse.ArgumentTypeError": [
                            50
                        ],
                        "argparse": [
                            50
                        ],
                        "seploc": [
                            56,
                            57,
                            54,
                            55
                        ],
                        "found.keys": [
                            54
                        ],
                        "key": [
                            56,
                            61,
                            63
                        ],
                        "value": [
                            57,
                            62,
                            63
                        ],
                        "sepstr": [
                            60,
                            61,
                            62
                        ],
                        "key.replace": [
                            61
                        ],
                        "value.replace": [
                            62
                        ],
                        "KeyValue": [
                            63
                        ]
                    },
                    "diff_line_number": 41,
                    "class_data": {
                        "signature": "class KeyValueType(object)",
                        "docstring": "A type used with `argparse`.",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, *separators):\n    self.separators = separators",
                            "def __call__(self, string):\n    found = {}\n    for sep in self.separators:\n        regex = '[^\\\\\\\\]' + sep\n        match = re.search(regex, string)\n        if match:\n            found[match.start() + 1] = sep\n    if not found:\n        raise argparse.ArgumentTypeError('\"%s\" is not a valid value' % string)\n    seploc = min(found.keys())\n    sep = found[seploc]\n    key = string[:seploc]\n    value = string[seploc + len(sep):]\n    for sepstr in self.separators:\n        key = key.replace('\\\\' + sepstr, sepstr)\n        value = value.replace('\\\\' + sepstr, sepstr)\n    return KeyValue(key=key, value=value, sep=sep, orig=string)"
                        ],
                        "constructor_variables": [
                            "separators"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, *separators)",
                            "__call__(self, string)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "found": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.separators": {
                                    "variable_value": "(':', '=', ':=', '@')",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<httpie.cli.KeyValueType object at 0x1113d48d0>",
                                    "variable_type": "KeyValueType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": "'bob\\\\:==foo'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "match.start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "argparse.ArgumentTypeError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "argparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "seploc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "found.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sepstr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "KeyValue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "found": {
                                    "variable_value": "{5: '='}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "sep": {
                                    "variable_value": "'='",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.separators": {
                                    "variable_value": "(':', '=', ':=', '@')",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<httpie.cli.KeyValueType object at 0x1113d48d0>",
                                    "variable_type": "KeyValueType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "'[^\\\\\\\\]@'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "match": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "re.search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": "'bob\\\\:==foo'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "match.start": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "argparse.ArgumentTypeError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "argparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "seploc": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "found.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x1113e6140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'bob:'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "value": {
                                    "variable_value": "'=foo'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "sepstr": {
                                    "variable_value": "'@'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "key.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x1113e8170>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x1113e8130>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "KeyValue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "found": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "found_escapes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "esc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.escapes": {
                                    "variable_value": "['\\\\\\\\:', '\\\\\\\\=', '\\\\\\\\:=', '\\\\\\\\@']",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<httpie.cli.KeyValueType object at 0x1110c5a90>",
                                    "variable_type": "KeyValueType",
                                    "variable_shape": null
                                },
                                "m.span": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.finditer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": "'bob\\\\:==foo'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "sep": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.separators": {
                                    "variable_value": "(':', '=', ':=', '@')",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "matches": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.span": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "inside_escape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "estart": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "eend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "argparse.ArgumentTypeError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "argparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "seploc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "found.keys": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "sepstr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.replace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "KeyValue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "found": {
                                    "variable_value": "{6: '='}",
                                    "variable_type": "dict",
                                    "variable_shape": "1"
                                },
                                "found_escapes": {
                                    "variable_value": "[(3, 5), (3, 6)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "esc": {
                                    "variable_value": "'\\\\\\\\@'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.escapes": {
                                    "variable_value": "['\\\\\\\\:', '\\\\\\\\=', '\\\\\\\\:=', '\\\\\\\\@']",
                                    "variable_type": "list",
                                    "variable_shape": "4"
                                },
                                "self": {
                                    "variable_value": "<httpie.cli.KeyValueType object at 0x1110c5a90>",
                                    "variable_type": "KeyValueType",
                                    "variable_shape": null
                                },
                                "m.span": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.finditer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "string": {
                                    "variable_value": "'bob\\\\:==foo'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "sep": {
                                    "variable_value": "'='",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "self.separators": {
                                    "variable_value": "(':', '=', ':=', '@')",
                                    "variable_type": "tuple",
                                    "variable_shape": "4"
                                },
                                "matches": {
                                    "variable_value": "<callable_iterator object at 0x11120a4d0>",
                                    "variable_type": "callable_iterator",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": "<re.Match object; span=(4, 6), match=':='>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": "4",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "end": {
                                    "variable_value": "6",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "match.span": {
                                    "variable_value": "<built-in method span of re.Match object at 0x1111eeb90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "inside_escape": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "estart": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "eend": {
                                    "variable_value": "6",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "argparse.ArgumentTypeError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "argparse": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "seploc": {
                                    "variable_value": "6",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "found.keys": {
                                    "variable_value": "<built-in method keys of dict object at 0x111208320>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "'bob:='",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "value": {
                                    "variable_value": "'foo'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "sepstr": {
                                    "variable_value": "'@'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "key.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x11120a5f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x11120a470>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "KeyValue": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def parse_items(items, data=None, headers=None, files=None):\n    \"\"\"Parse `KeyValueType` `items` into `data`, `headers` and `files`.\"\"\"\n    if headers is None:\n        headers = {}\n    if data is None:\n        data = {}\n    if files is None:\n        files = {}\n    for item in items:\n        value = item.value\n        key = item.key\n        if item.sep == SEP_HEADERS:\n            target = headers\n        elif item.sep == SEP_FILES:\n            try:\n                value = open(os.path.expanduser(item.value), 'r')\n            except IOError as e:\n                raise ParseError(\n                    'Invalid argument %r. %s' % (item.orig, e))\n            if not key:\n                key = os.path.basename(value.name)\n            target = files\n        elif item.sep in [SEP_DATA, SEP_DATA_RAW_JSON]:\n            if item.sep == SEP_DATA_RAW_JSON:\n                try:\n                    value = json.loads(item.value)\n                except ValueError:\n                    raise ParseError('%s is not valid JSON' % item.orig)\n            target = data\n        else:\n            raise ParseError('%s is not valid item' % item.orig)\n\n        if key in target:\n            ParseError('duplicate item %s (%s)' % (item.key, item.orig))\n\n        target[key] = value\n\n    return headers, data, files",
                "def _(text):\n    \"\"\"Normalize white space.\"\"\"\n    return ' '.join(text.strip().split())",
                "def __init__(self, *separators):\n    self.separators = separators",
                "def __call__(self, string):\n    found = {}\n    for sep in self.separators:\n        regex = '[^\\\\\\\\]' + sep\n        match = re.search(regex, string)\n        if match:\n            found[match.start() + 1] = sep\n\n    if not found:\n        #noinspection PyExceptionInherit\n        raise argparse.ArgumentTypeError(\n            '\"%s\" is not a valid value' % string)\n\n    # split the string at the earliest non-escaped separator.\n    seploc = min(found.keys())\n    sep = found[seploc]\n    key = string[:seploc]\n    value = string[seploc + len(sep):]\n\n    # remove escape chars\n    for sepstr in self.separators:\n        key = key.replace('\\\\' + sepstr, sepstr)\n        value = value.replace('\\\\' + sepstr, sepstr)\n    return KeyValue(key=key, value=value, sep=sep, orig=string)",
                "def parse_args(self, args=None, namespace=None):\n    args = super(HTTPieArgumentParser, self).parse_args(args, namespace)\n    self._validate_output_options(args)\n    self._validate_auth_options(args)\n    return args",
                "def _validate_output_options(self, args):\n    unknown_output_options = set(args.output_options) - set(OUTPUT_OPTIONS)\n    if unknown_output_options:\n        self.error('Unknown output options: %s' % ','.join(unknown_output_options))",
                "def _validate_auth_options(self, args):\n    if args.auth_type and not args.auth:\n        self.error('--auth-type can only be used with --auth')"
            ],
            "inscope_function_signatures": [
                "parse_items(items, data=None, headers=None, files=None)",
                "_(text)",
                "__init__(self, *separators)",
                "__call__(self, string)",
                "parse_args(self, args=None, namespace=None)",
                "_validate_output_options(self, args)",
                "_validate_auth_options(self, args)"
            ],
            "variables_in_file": {
                "SEP_COMMON": [
                    295,
                    234,
                    11,
                    12,
                    254
                ],
                "SEP_HEADERS": [
                    12,
                    77
                ],
                "SEP_DATA": [
                    88,
                    13,
                    295
                ],
                "SEP_DATA_RAW_JSON": [
                    88,
                    89,
                    14,
                    295
                ],
                "SEP_FILES": [
                    295,
                    79,
                    15
                ],
                "PRETTIFY_STDOUT_TTY_ONLY": [
                    16,
                    166
                ],
                "object": [
                    16,
                    35
                ],
                "OUT_REQUEST_HEADERS": [
                    192,
                    18,
                    23
                ],
                "OUT_REQUEST_BODY": [
                    24,
                    193,
                    19
                ],
                "OUT_RESPONSE_HEADERS": [
                    194,
                    208,
                    20,
                    212,
                    182,
                    25
                ],
                "OUT_RESPONSE_BODY": [
                    195,
                    21,
                    182,
                    216,
                    26,
                    220
                ],
                "OUTPUT_OPTIONS": [
                    200,
                    204,
                    119,
                    23
                ],
                "Exception": [
                    29
                ],
                "KeyValue": [
                    33,
                    63
                ],
                "namedtuple": [
                    33
                ],
                "self.separators": [
                    42,
                    60,
                    38
                ],
                "self": [
                    38,
                    42,
                    113,
                    114,
                    115,
                    121,
                    60,
                    125
                ],
                "separators": [
                    38
                ],
                "found": [
                    41,
                    46,
                    48,
                    54,
                    55
                ],
                "sep": [
                    42,
                    43,
                    46,
                    55,
                    57,
                    63
                ],
                "regex": [
                    43,
                    44
                ],
                "match": [
                    44,
                    45,
                    46
                ],
                "re.search": [
                    44
                ],
                "re": [
                    44
                ],
                "string": [
                    44,
                    51,
                    56,
                    57,
                    63
                ],
                "match.start": [
                    46
                ],
                "argparse.ArgumentTypeError": [
                    50
                ],
                "argparse": [
                    50,
                    111
                ],
                "seploc": [
                    56,
                    57,
                    54,
                    55
                ],
                "min": [
                    54
                ],
                "found.keys": [
                    54
                ],
                "key": [
                    98,
                    101,
                    76,
                    85,
                    86,
                    56,
                    61,
                    63
                ],
                "value": [
                    101,
                    75,
                    81,
                    86,
                    57,
                    91,
                    62,
                    63
                ],
                "len": [
                    57
                ],
                "sepstr": [
                    60,
                    61,
                    62
                ],
                "key.replace": [
                    61
                ],
                "value.replace": [
                    62
                ],
                "headers": [
                    68,
                    69,
                    78,
                    103
                ],
                "data": [
                    94,
                    103,
                    70,
                    71
                ],
                "files": [
                    72,
                    73,
                    103,
                    87
                ],
                "item": [
                    96,
                    99,
                    74,
                    75,
                    76,
                    77,
                    79,
                    81,
                    84,
                    88,
                    89,
                    91,
                    93
                ],
                "items": [
                    74
                ],
                "item.value": [
                    81,
                    91,
                    75
                ],
                "item.key": [
                    99,
                    76
                ],
                "item.sep": [
                    88,
                    89,
                    77,
                    79
                ],
                "target": [
                    98,
                    101,
                    78,
                    87,
                    94
                ],
                "open": [
                    81
                ],
                "os.path.expanduser": [
                    81
                ],
                "os.path": [
                    81,
                    86
                ],
                "os": [
                    81,
                    86
                ],
                "IOError": [
                    82
                ],
                "ParseError": [
                    96,
                    99,
                    83,
                    93
                ],
                "item.orig": [
                    96,
                    99,
                    84,
                    93
                ],
                "e": [
                    84
                ],
                "os.path.basename": [
                    86
                ],
                "value.name": [
                    86
                ],
                "json.loads": [
                    91
                ],
                "json": [
                    91
                ],
                "ValueError": [
                    92
                ],
                "join": [
                    228,
                    200,
                    204,
                    108,
                    121
                ],
                "split": [
                    108
                ],
                "text.strip": [
                    108
                ],
                "text": [
                    108
                ],
                "argparse.ArgumentParser": [
                    111
                ],
                "args": [
                    113,
                    114,
                    115,
                    116,
                    119,
                    124
                ],
                "parse_args": [
                    113
                ],
                "super": [
                    113
                ],
                "HTTPieArgumentParser": [
                    113,
                    129
                ],
                "namespace": [
                    113
                ],
                "self._validate_output_options": [
                    114
                ],
                "self._validate_auth_options": [
                    115
                ],
                "unknown_output_options": [
                    120,
                    121,
                    119
                ],
                "set": [
                    119
                ],
                "args.output_options": [
                    119
                ],
                "self.error": [
                    121,
                    125
                ],
                "args.auth_type": [
                    124
                ],
                "args.auth": [
                    124
                ],
                "parser": [
                    129,
                    130,
                    163,
                    260,
                    293,
                    135,
                    232,
                    267,
                    237,
                    242,
                    180,
                    252,
                    279,
                    156,
                    286,
                    223
                ],
                "doc.strip": [
                    129
                ],
                "doc": [
                    129
                ],
                "parser.add_argument": [
                    130,
                    260,
                    293,
                    232,
                    267,
                    237,
                    242,
                    252,
                    279,
                    156,
                    286,
                    223
                ],
                "version": [
                    130
                ],
                "group_type": [
                    136,
                    143,
                    135
                ],
                "parser.add_mutually_exclusive_group": [
                    163,
                    180,
                    135
                ],
                "group_type.add_argument": [
                    136,
                    143
                ],
                "_": [
                    288,
                    226,
                    262,
                    167,
                    281,
                    201,
                    138,
                    296,
                    269,
                    175,
                    239,
                    145,
                    209,
                    244,
                    183,
                    217,
                    158,
                    255
                ],
                "prettify": [
                    163,
                    164,
                    173
                ],
                "prettify.add_argument": [
                    164,
                    173
                ],
                "output_options": [
                    198,
                    206,
                    180,
                    181,
                    214
                ],
                "output_options.add_argument": [
                    206,
                    214,
                    181,
                    198
                ],
                "format": [
                    201,
                    209,
                    217,
                    183
                ],
                "pretty.AVAILABLE_STYLES": [
                    225,
                    228
                ],
                "pretty": [
                    225,
                    228
                ],
                "sorted": [
                    228
                ],
                "KeyValueType": [
                    234,
                    254,
                    295
                ],
                "float": [
                    268
                ]
            },
            "filtered_variables_in_file": {
                "SEP_COMMON": [
                    295,
                    234,
                    11,
                    12,
                    254
                ],
                "SEP_HEADERS": [
                    12,
                    77
                ],
                "SEP_DATA": [
                    88,
                    13,
                    295
                ],
                "SEP_DATA_RAW_JSON": [
                    88,
                    89,
                    14,
                    295
                ],
                "SEP_FILES": [
                    295,
                    79,
                    15
                ],
                "PRETTIFY_STDOUT_TTY_ONLY": [
                    16,
                    166
                ],
                "OUT_REQUEST_HEADERS": [
                    192,
                    18,
                    23
                ],
                "OUT_REQUEST_BODY": [
                    24,
                    193,
                    19
                ],
                "OUT_RESPONSE_HEADERS": [
                    194,
                    208,
                    20,
                    212,
                    182,
                    25
                ],
                "OUT_RESPONSE_BODY": [
                    195,
                    21,
                    182,
                    216,
                    26,
                    220
                ],
                "OUTPUT_OPTIONS": [
                    200,
                    204,
                    119,
                    23
                ],
                "KeyValue": [
                    33,
                    63
                ],
                "namedtuple": [
                    33
                ],
                "self.separators": [
                    42,
                    60,
                    38
                ],
                "self": [
                    38,
                    42,
                    113,
                    114,
                    115,
                    121,
                    60,
                    125
                ],
                "separators": [
                    38
                ],
                "found": [
                    41,
                    46,
                    48,
                    54,
                    55
                ],
                "sep": [
                    42,
                    43,
                    46,
                    55,
                    57,
                    63
                ],
                "regex": [
                    43,
                    44
                ],
                "match": [
                    44,
                    45,
                    46
                ],
                "re.search": [
                    44
                ],
                "re": [
                    44
                ],
                "string": [
                    44,
                    51,
                    56,
                    57,
                    63
                ],
                "match.start": [
                    46
                ],
                "argparse.ArgumentTypeError": [
                    50
                ],
                "argparse": [
                    50,
                    111
                ],
                "seploc": [
                    56,
                    57,
                    54,
                    55
                ],
                "found.keys": [
                    54
                ],
                "key": [
                    98,
                    101,
                    76,
                    85,
                    86,
                    56,
                    61,
                    63
                ],
                "value": [
                    101,
                    75,
                    81,
                    86,
                    57,
                    91,
                    62,
                    63
                ],
                "sepstr": [
                    60,
                    61,
                    62
                ],
                "key.replace": [
                    61
                ],
                "value.replace": [
                    62
                ],
                "headers": [
                    68,
                    69,
                    78,
                    103
                ],
                "data": [
                    94,
                    103,
                    70,
                    71
                ],
                "files": [
                    72,
                    73,
                    103,
                    87
                ],
                "item": [
                    96,
                    99,
                    74,
                    75,
                    76,
                    77,
                    79,
                    81,
                    84,
                    88,
                    89,
                    91,
                    93
                ],
                "items": [
                    74
                ],
                "item.value": [
                    81,
                    91,
                    75
                ],
                "item.key": [
                    99,
                    76
                ],
                "item.sep": [
                    88,
                    89,
                    77,
                    79
                ],
                "target": [
                    98,
                    101,
                    78,
                    87,
                    94
                ],
                "os.path.expanduser": [
                    81
                ],
                "os.path": [
                    81,
                    86
                ],
                "os": [
                    81,
                    86
                ],
                "ParseError": [
                    96,
                    99,
                    83,
                    93
                ],
                "item.orig": [
                    96,
                    99,
                    84,
                    93
                ],
                "e": [
                    84
                ],
                "os.path.basename": [
                    86
                ],
                "value.name": [
                    86
                ],
                "json.loads": [
                    91
                ],
                "json": [
                    91
                ],
                "join": [
                    228,
                    200,
                    204,
                    108,
                    121
                ],
                "split": [
                    108
                ],
                "text.strip": [
                    108
                ],
                "text": [
                    108
                ],
                "argparse.ArgumentParser": [
                    111
                ],
                "args": [
                    113,
                    114,
                    115,
                    116,
                    119,
                    124
                ],
                "parse_args": [
                    113
                ],
                "HTTPieArgumentParser": [
                    113,
                    129
                ],
                "namespace": [
                    113
                ],
                "self._validate_output_options": [
                    114
                ],
                "self._validate_auth_options": [
                    115
                ],
                "unknown_output_options": [
                    120,
                    121,
                    119
                ],
                "args.output_options": [
                    119
                ],
                "self.error": [
                    121,
                    125
                ],
                "args.auth_type": [
                    124
                ],
                "args.auth": [
                    124
                ],
                "parser": [
                    129,
                    130,
                    163,
                    260,
                    293,
                    135,
                    232,
                    267,
                    237,
                    242,
                    180,
                    252,
                    279,
                    156,
                    286,
                    223
                ],
                "doc.strip": [
                    129
                ],
                "doc": [
                    129
                ],
                "parser.add_argument": [
                    130,
                    260,
                    293,
                    232,
                    267,
                    237,
                    242,
                    252,
                    279,
                    156,
                    286,
                    223
                ],
                "version": [
                    130
                ],
                "group_type": [
                    136,
                    143,
                    135
                ],
                "parser.add_mutually_exclusive_group": [
                    163,
                    180,
                    135
                ],
                "group_type.add_argument": [
                    136,
                    143
                ],
                "_": [
                    288,
                    226,
                    262,
                    167,
                    281,
                    201,
                    138,
                    296,
                    269,
                    175,
                    239,
                    145,
                    209,
                    244,
                    183,
                    217,
                    158,
                    255
                ],
                "prettify": [
                    163,
                    164,
                    173
                ],
                "prettify.add_argument": [
                    164,
                    173
                ],
                "output_options": [
                    198,
                    206,
                    180,
                    181,
                    214
                ],
                "output_options.add_argument": [
                    206,
                    214,
                    181,
                    198
                ],
                "pretty.AVAILABLE_STYLES": [
                    225,
                    228
                ],
                "pretty": [
                    225,
                    228
                ],
                "KeyValueType": [
                    234,
                    254,
                    295
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/httpie_5/tests/tests.py",
                "test_function": "test_escape_longsep",
                "test_function_code": "    def test_escape_longsep(self):\n        headers, data, files = cli.parse_items([\n            self.kv('bob\\\\:==foo'),\n        ])\n        self.assertDictEqual(data, {\n            'bob:=': 'foo',\n        })",
                "test_error": "AssertionError: {'bob:': '=foo'} != {'bob:=': 'foo'} - {'bob:': '=foo'} ?           -  + {'bob:=': 'foo'} ?       +",
                "full_test_error": "self = <tests.TestItemParsing testMethod=test_escape_longsep>\n\n    def test_escape_longsep(self):\n        headers, data, files = cli.parse_items([\n            self.kv('bob\\\\:==foo'),\n        ])\n        self.assertDictEqual(data, {\n>           'bob:=': 'foo',\n        })\nE       AssertionError: {'bob:': '=foo'} != {'bob:=': 'foo'}\nE       - {'bob:': '=foo'}\nE       ?           -\nE       \nE       + {'bob:=': 'foo'}\nE       ?       +\n\ntests/tests.py:84: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}