{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import operator\n    import re\n    comparison_operators = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    # Parse filter parts using regular expressions\n    operator_rex = re.compile(r'''\n        (?:\\s*(?P<key>[a-z_]+)\\s*)?\n        (?P<op>[<>=!]+)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)|\n        (?P<strval>(?![0-9.])[a-z0-9A-Z]*)\n        \\s*$\n    ''', re.X)\n    m = operator_rex.search(filter_part)\n    \n    # Extract values from the parsed filter parts\n    key = m.group('key')\n    op = m.group('op')\n    none_inclusive = m.group('none_inclusive')\n    intval = m.group('intval')\n    strval = m.group('strval')\n    \n    if key is not None and len(key) > 0:\n        actual_value = dct.get(key)\n    else:\n        actual_value = None\n    \n    if intval is not None:\n        if strval is not None:\n            raise ValueError('Operator %s does not support string values!' % op)\n        comparison_value = int(intval)\n    elif strval is not None:\n        comparison_value = strval\n    else:\n        raise ValueError('Invalid filter part %r' % filter_part)\n    \n    if actual_value is None:\n        return none_inclusive\n    \n    if isinstance(comparison_value, int) or isinstance(actual_value, int):\n        comparison_value = parse_filesize(comparison_value) if isinstance(comparison_value, str) else comparison_value\n        actual_value = parse_filesize(actual_value) if isinstance(actual_value, str) else actual_value\n    \n    return comparison_operators[op](actual_value, comparison_value)"
        }
    ]
}