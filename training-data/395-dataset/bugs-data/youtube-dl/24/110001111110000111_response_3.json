{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import operator\n    import re\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    \n    # ... (other code remains unchanged) ...\n    \n    f = re.match(r'([^=!><]*)\\s*([=!><]*)([^?]*)\\??$', filter_part)\n    if f:\n        key = f.group(1).strip()\n        op = f.group(2).strip()\n        value = f.group(3).strip()\n    \n        if op not in COMPARISON_OPERATORS:\n            raise ValueError('Invalid comparison operator: %s' % op)\n    \n        if key not in dct:\n            return False\n        actual_value = dct[key]\n    \n        if op in ('=', '!='):\n            return COMPARISON_OPERATORS[op](actual_value, value)\n        else:\n            try:\n                comparison_value = int(value)\n            except ValueError:\n                comparison_value = parse_filesize(value)\n                if comparison_value is None:\n                    comparison_value = parse_filesize(value + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (value, filter_part))\n            return COMPARISON_OPERATORS[op](actual_value, comparison_value)"
        }
    ]
}