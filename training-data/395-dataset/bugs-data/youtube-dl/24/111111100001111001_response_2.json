{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n    import operator\n    import re\n    comparison_op = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': lambda x, y: x == y,\n        '!=': lambda x, y: x != y\n    }\n    \n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>[a-z_]+)\n        \\s*(?P<op><=|>=|<|>|=?|!=)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?P<value>(?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)|\n        (?P<strval>(?![0-9.])[a-z0-9A-Z]*))\n        \\s*$''')\n    m = operator_rex.search(filter_part)\n    if m:\n        op = m.group('op')\n        key = m.group('key')\n        none_inclusive = m.group('none_inclusive')\n        value = m.group('value')\n    \n        if m.group('strval') is not None:\n            if op not in ('=', '!='):\n                raise ValueError(f'Operator {op} does not support string values!')\n    \n            comparison_value = m.group('strval')\n            actual_value = dct.get(key)\n            if actual_value is None:\n                return none_inclusive\n            return comparison_op[op](len(actual_value), len(comparison_value))\n        else:\n            if op in ('=', '!='):\n                comparison_value = float(value)\n            else:\n                comparison_value = parse_filesize(value)\n                if comparison_value is None:\n                    comparison_value = parse_filesize(value + 'B')\n                if comparison_value is None:\n                    raise ValueError(f'Invalid integer value {value} in filter part {filter_part}')\n    \n            actual_value = dct.get(key)\n            if actual_value is None:\n                return none_inclusive\n            return comparison_op[op](actual_value, comparison_value)\n    \n    unary_op = {'': lambda v: v is not None, '!': lambda v: v is None}\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<op>!?)\\s*(?P<key>[a-z_]+)\n        \\s*$''')\n    m = operator_rex.search(filter_part)\n    if m:\n        op = m.group('op')\n        key = m.group('key')\n        if op == '' and key not in dct:\n            return False\n        elif op == '!' and key in dct:\n            return False\n        return True\n    raise ValueError(f'Invalid filter part {filter_part}')"
        }
    ]
}