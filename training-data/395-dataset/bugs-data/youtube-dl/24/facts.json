{
    "1.1.1": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = COMPARISON_OPERATORS[m.group('op')]\n        if m.group('strval') is not None:\n            if m.group('op') not in ('=', '!='):\n                raise ValueError(\n                    'Operator %s does not support string values!' % m.group('op'))\n            comparison_value = m.group('strval')\n        else:\n            try:\n                comparison_value = int(m.group('intval'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('intval'))\n                if comparison_value is None:\n                    comparison_value = parse_filesize(m.group('intval') + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (\n                            m.group('intval'), filter_part))\n        actual_value = dct.get(m.group('key'))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    operator_rex = re.compile(r % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        return op(actual_value)\n\n    raise ValueError('Invalid filter part %r' % filter_part)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_24/youtube_dl/utils.py",
    "1.3.2": [
        "parse_filesize(s)"
    ],
    "1.4.1": [
        "    def test_match_filter(self):\n        class FilterYDL(YDL):\n            def __init__(self, *args, **kwargs):\n                super(FilterYDL, self).__init__(*args, **kwargs)\n                self.params['simulate'] = True\n\n            def process_info(self, info_dict):\n                super(YDL, self).process_info(info_dict)\n\n            def _match_entry(self, info_dict, incomplete):\n                res = super(FilterYDL, self)._match_entry(info_dict, incomplete)\n                if res is None:\n                    self.downloaded_info_dicts.append(info_dict)\n                return res\n\n        first = {\n            'id': '1',\n            'url': TEST_URL,\n            'title': 'one',\n            'extractor': 'TEST',\n            'duration': 30,\n            'filesize': 10 * 1024,\n            'playlist_id': '42',\n        }\n        second = {\n            'id': '2',\n            'url': TEST_URL,\n            'title': 'two',\n            'extractor': 'TEST',\n            'duration': 10,\n            'description': 'foo',\n            'filesize': 5 * 1024,\n            'playlist_id': '43',\n        }\n        videos = [first, second]\n\n        def get_videos(filter_=None):\n            ydl = FilterYDL({'match_filter': filter_})\n            for v in videos:\n                ydl.process_ie_result(v, download=True)\n            return [v['id'] for v in ydl.downloaded_info_dicts]\n\n        res = get_videos()\n        self.assertEqual(res, ['1', '2'])\n\n        def f(v):\n            if v['id'] == '1':\n                return None\n            else:\n                return 'Video id is not 1'\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('duration < 30')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('description = foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('description =? foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['1', '2'])\n\n        f = match_filter_func('filesize > 5KiB')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('playlist_id = 42')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_24/test/test_YoutubeDL.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Lists differ: [] != ['1']\nE       \nE       Second list contains 1 additional elements.\nE       First extra element 0:\nE       '1'\nE       \nE       - []\nE       + ['1']"
        ]
    ],
    "2.1.2": [
        [
            "self = <test.test_YoutubeDL.TestYoutubeDL testMethod=test_match_filter>\n\n    def test_match_filter(self):\n        class FilterYDL(YDL):\n            def __init__(self, *args, **kwargs):\n                super(FilterYDL, self).__init__(*args, **kwargs)\n                self.params['simulate'] = True\n    \n            def process_info(self, info_dict):\n                super(YDL, self).process_info(info_dict)\n    \n            def _match_entry(self, info_dict, incomplete):\n                res = super(FilterYDL, self)._match_entry(info_dict, incomplete)\n                if res is None:\n                    self.downloaded_info_dicts.append(info_dict)\n                return res\n    \n        first = {\n            'id': '1',\n            'url': TEST_URL,\n            'title': 'one',\n            'extractor': 'TEST',\n            'duration': 30,\n            'filesize': 10 * 1024,\n            'playlist_id': '42',\n        }\n        second = {\n            'id': '2',\n            'url': TEST_URL,\n            'title': 'two',\n            'extractor': 'TEST',\n            'duration': 10,\n            'description': 'foo',\n            'filesize': 5 * 1024,\n            'playlist_id': '43',\n        }\n        videos = [first, second]\n    \n        def get_videos(filter_=None):\n            ydl = FilterYDL({'match_filter': filter_})\n            for v in videos:\n                ydl.process_ie_result(v, download=True)\n            return [v['id'] for v in ydl.downloaded_info_dicts]\n    \n        res = get_videos()\n        self.assertEqual(res, ['1', '2'])\n    \n        def f(v):\n            if v['id'] == '1':\n                return None\n            else:\n                return 'Video id is not 1'\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n    \n        f = match_filter_func('duration < 30')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n    \n        f = match_filter_func('description = foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n    \n        f = match_filter_func('description =? foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['1', '2'])\n    \n        f = match_filter_func('filesize > 5KiB')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n    \n        f = match_filter_func('playlist_id = 42')\n        res = get_videos(f)\n>       self.assertEqual(res, ['1'])",
            "\ntest/test_YoutubeDL.py:657: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "filter_part": "'duration < 30'",
                "dct": "array of shape 17"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 13), match='duration < 30'>",
                "op": "<built-in function lt>",
                "comparison_value": "30",
                "actual_value": "30"
            }
        ],
        [
            {
                "filter_part": "'duration < 30'",
                "dct": "array of shape 18"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 13), match='duration < 30'>",
                "op": "<built-in function lt>",
                "comparison_value": "30",
                "actual_value": "10"
            }
        ],
        [
            {
                "filter_part": "'description = foo'",
                "dct": "array of shape 17"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='description = foo'>",
                "op": "<built-in function eq>",
                "comparison_value": "'foo'"
            }
        ],
        [
            {
                "filter_part": "'description = foo'",
                "dct": "array of shape 18"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='description = foo'>",
                "op": "<built-in function eq>",
                "comparison_value": "'foo'",
                "actual_value": "'foo'"
            }
        ],
        [
            {
                "filter_part": "'description =? foo'",
                "dct": "array of shape 17"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 18), match='description =? foo'>",
                "op": "<built-in function eq>",
                "comparison_value": "'foo'"
            }
        ],
        [
            {
                "filter_part": "'description =? foo'",
                "dct": "array of shape 18"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 18), match='description =? foo'>",
                "op": "<built-in function eq>",
                "comparison_value": "'foo'",
                "actual_value": "'foo'"
            }
        ],
        [
            {
                "filter_part": "'filesize > 5KiB'",
                "dct": "array of shape 17"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 15), match='filesize > 5KiB'>",
                "op": "<built-in function gt>",
                "comparison_value": "5120",
                "actual_value": "10240"
            }
        ],
        [
            {
                "filter_part": "'filesize > 5KiB'",
                "dct": "array of shape 18"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 15), match='filesize > 5KiB'>",
                "op": "<built-in function gt>",
                "comparison_value": "5120",
                "actual_value": "5120"
            }
        ],
        [
            {
                "filter_part": "'playlist_id = 42'",
                "dct": "array of shape 17"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 16), match='playlist_id = 42'>",
                "op": "<built-in function eq>",
                "comparison_value": "42",
                "actual_value": "'42'"
            }
        ],
        [
            {
                "filter_part": "'playlist_id = 42'",
                "dct": "array of shape 18"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 16), match='playlist_id = 42'>",
                "op": "<built-in function eq>",
                "comparison_value": "42",
                "actual_value": "'43'"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int",
                "actual_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int",
                "actual_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "str",
                "actual_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "str",
                "actual_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int",
                "actual_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int",
                "actual_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int",
                "actual_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int",
                "actual_value": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "filter_part": "'duration < 30'",
                "dct": "array of shape 17"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 13), match='duration < 30'>",
                "op": "<built-in function lt>",
                "actual_value": "30",
                "comparison_value": "30"
            }
        ],
        [
            {
                "filter_part": "'duration < 30'",
                "dct": "array of shape 18"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 13), match='duration < 30'>",
                "op": "<built-in function lt>",
                "actual_value": "10",
                "comparison_value": "30"
            }
        ],
        [
            {
                "filter_part": "'description = foo'",
                "dct": "array of shape 17"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='description = foo'>",
                "op": "<built-in function eq>",
                "comparison_value": "'foo'"
            }
        ],
        [
            {
                "filter_part": "'description = foo'",
                "dct": "array of shape 18"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='description = foo'>",
                "op": "<built-in function eq>",
                "actual_value": "'foo'",
                "comparison_value": "'foo'"
            }
        ],
        [
            {
                "filter_part": "'description =? foo'",
                "dct": "array of shape 17"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 18), match='description =? foo'>",
                "op": "<built-in function eq>",
                "comparison_value": "'foo'"
            }
        ],
        [
            {
                "filter_part": "'description =? foo'",
                "dct": "array of shape 18"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 18), match='description =? foo'>",
                "op": "<built-in function eq>",
                "actual_value": "'foo'",
                "comparison_value": "'foo'"
            }
        ],
        [
            {
                "filter_part": "'filesize > 5KiB'",
                "dct": "array of shape 17"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 15), match='filesize > 5KiB'>",
                "op": "<built-in function gt>",
                "actual_value": "10240",
                "comparison_value": "5120"
            }
        ],
        [
            {
                "filter_part": "'filesize > 5KiB'",
                "dct": "array of shape 18"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 15), match='filesize > 5KiB'>",
                "op": "<built-in function gt>",
                "actual_value": "5120",
                "comparison_value": "5120"
            }
        ],
        [
            {
                "filter_part": "'playlist_id = 42'",
                "dct": "array of shape 17"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 16), match='playlist_id = 42'>",
                "op": "<built-in function eq>",
                "actual_value": "'42'",
                "comparison_value": "'42'"
            }
        ],
        [
            {
                "filter_part": "'playlist_id = 42'",
                "dct": "array of shape 18"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 16), match='playlist_id = 42'>",
                "op": "<built-in function eq>",
                "actual_value": "'43'",
                "comparison_value": "'42'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}