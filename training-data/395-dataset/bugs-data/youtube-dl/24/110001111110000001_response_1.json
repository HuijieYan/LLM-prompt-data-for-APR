{
    "youtube-dl": [
        {
            "bugID": 24,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 2327,
            "file_name": "SD2T/bgp_envs/repos/youtube-dl_24/youtube_dl/utils.py",
            "replace_code": "def _match_one(filter_part, dct):\n\n    if isinstance(filter_part, str):\n        filter_part = filter_part.strip()\n    \n    # ... (other parts of the function)\n    query = filter_part\n    \n    # Unary operation\n    if query.startswith('!') and query[1:].strip():\n        key = query[1:].strip()\n        return key not in dct or dct[key] is None\n    \n    # Comparison operation\n    key_match = re.match(r'(?P<key>%s)(?P<comparison>.+)' % '|'.join(dct.keys()), query)\n    if key_match:\n        key = key_match.group('key')\n        comparison = key_match.group('comparison')\n        \n        if comparison.startswith('>='):\n            return dct.get(key, 0) >= parse_size(comparison[2:])\n        elif comparison.startswith('<='):\n            return dct.get(key, 0) <= parse_size(comparison[2:])\n        elif comparison.startswith('!='):\n            return dct.get(key) != parse_size(comparison[2:])\n        elif comparison.startswith('>') and comparison[1:].strip():\n            return dct.get(key, 0) > parse_size(comparison[1:])\n        elif comparison.startswith('<') and comparison[1:].strip():\n            return dct.get(key, 0) < parse_size(comparison[1:])\n        elif comparison.startswith('=') and comparison[1:].strip():\n            return dct.get(key, '') == comparison[1:].strip()\n    \n    raise ValueError('Invalid filter part %r' % filter_part)"
        }
    ]
}