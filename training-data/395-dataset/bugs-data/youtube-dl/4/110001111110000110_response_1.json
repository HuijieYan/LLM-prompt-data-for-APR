{
    "youtube-dl": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 58,
            "file_name": "youtube_dl/jsinterp.py",
            "replace_code": "def interpret_expression(self, expr, local_vars, allow_recursion):\n\n    expr = expr.strip()\n    \n    if expr == '':  # Empty expression\n        return None\n    \n    if expr.startswith('('):\n        parens_count = 0\n        for m in re.finditer(r'[()]', expr):\n            if m.group(0) == '(':\n                parens_count += 1\n            else:\n                parens_count -= 1\n                if parens_count == 0:\n                    sub_expr = expr[1:m.start()]\n                    sub_result = self.interpret_expression(\n                        sub_expr, local_vars, allow_recursion)\n                    remaining_expr = expr[m.end():].strip()\n                    if not remaining_expr:\n                        return sub_result\n                    else:\n                        expr = json.dumps(sub_result) + remaining_expr\n                    break\n        else:\n            raise ExtractorError('Premature end of parens in %r' % expr)\n    \n    for op, opfunc in _ASSIGN_OPERATORS:\n        m = re.match(r'''(?x)\n            (?P<out>%s)(?:\\[(?P<index>[^\\]]+?)\\])?\n            \\s*%s\n            (?P<expr>.*)$''' % (_NAME_RE, re.escape(op)), expr)\n        if not m:\n            continue\n        right_val = self.interpret_expression(\n            m.group('expr'), local_vars, allow_recursion - 1)\n    \n        if m.groupdict().get('index'):\n            lvar = local_vars[m.group('out')]\n            idx = self.interpret_expression(\n                m.group('index'), local_vars, allow_recursion)\n            assert isinstance(idx, int)\n            cur = lvar[idx]\n            val = opfunc(cur, right_val)\n            lvar[idx] = val\n            return val\n        else:\n            cur = local_vars.get(m.group('out'))\n            val = opfunc(cur, right_val)\n            local_vars[m.group('out')] = val\n            return val\n    \n    if exprisdigit():\n        return int(expr)"
        }
    ]
}