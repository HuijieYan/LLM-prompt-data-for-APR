{
    "youtube-dl": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 58,
            "file_name": "youtube_dl/jsinterp.py",
            "replace_code": "def interpret_expression(self, expr, local_vars, allow_recursion):\n\n    expr = expr.strip()\n    \n    if expr.isdigit():\n        return int(expr)\n    \n    try:\n        return json.loads(expr)\n    except ValueError:\n        pass\n    \n    m = re.match(\n        r'(?P<var>%s)\\((?P<args>.*)\\)$' % _NAME_RE, expr)\n    if m:\n        variable = m.group('var')\n        arg_str = m.group('args')\n    \n        if variable in self._functions:\n            if arg_str:\n                argvals = tuple([\n                    int(v) if v.isdigit() else local_vars[v]\n                    for v in arg_str.split(',')])\n                return self._functions[variable](argvals)\n            else:\n                return self._functions[variable]()\n        else:\n            raise ExtractorError('Function %r is not defined' % variable)\n    \n    # Handle other types of expressions or unsupported ones\n    raise ExtractorError('Unsupported JS expression %r' % expr)"
        }
    ]
}