{
    "youtube-dl": [
        {
            "bugID": 4,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 58,
            "file_name": "youtube_dl/jsinterp.py",
            "replace_code": "def interpret_expression(self, expr, local_vars, allow_recursion):\n    import re\n    import json\n    from collections import namedtuple\n    import re\n    import json\n    from collections import namedtuple\n    \n    _OPERATORS = [\n        ('*', 0, lambda x, y: x * y),\n        ('/', 0, lambda x, y: x / y),\n        ('%', 0, lambda x, y: x % y),\n        ('+', 0, lambda x, y: x + y),\n        ('-', 0, lambda x, y: x - y),\n        ('<<', 0, lambda x, y: x << y),\n        ('>>', 0, lambda x, y: x >> y),\n        ('>>>', 0, lambda x, y: x >> y if x >= 0 else (x + 0x100000000) >> y),  # note that '>>>>' does not have a valid meaning in JavaScript, just keeping its behaviour for the sake of the consistency of this function\n        ('<', 1, lambda x, y: x < y),\n        ('<=', 1, lambda x, y: x <= y),\n        ('>', 1, lambda x, y: x > y),\n        ('>=', 1, lambda x, y: x >= y),\n        ('in', 1, lambda x, y: x in y),\n        ('is', 1, lambda x, y: x is y),\n        ('==', 1, lambda x, y: x == y),\n        ('!=', 1, lambda x, y: x != y),\n        ('===', 1, lambda x, y: x is y),  # in JavaScript, '===' is value-comparison\n        ('!==', 1, lambda x, y: x is not y),\n        ('&', 2, lambda x, y: x & y),\n        ('^', 3, lambda x, y: x ^ y),\n        ('|', 4, lambda x, y: x | y),\n        ('&&', 5, lambda x, y: x and y),\n        ('||', 6, lambda x, y: x or y),\n    ]\n    \n    _ASSIGN_OPERATORS = [\n        ('=', lambda x, y: y),\n        ('+=', lambda x, y: x + y),\n        ('-=', lambda x, y: x - y),\n        ('*=', lambda x, y: x * y),\n        ('/=', lambda x, y: x / y),\n        ('%=', lambda x, y: x % y),\n        ('<<=', lambda x, y: x << y),\n        ('>>=', lambda x, y: x >> y),\n        ('>>>=', lambda x, y: x >> y if x >= 0 else (x + 0x100000000) >> y),  # note that '>>>>=' does not have a valid meaning in JavaScript, just keeping its behaviour for the sake of the consistency of this function\n        ('&=', lambda x, y: x & y),\n        ('^=', lambda x, y: x ^ y),\n        ('|=', lambda x, y: x | y),\n    ]\n    \n    ExtractorError = namedtuple('ExtractorError', ['message'])\n    \n    def extract_function(funcname):\n        return f'Extracted function: {funcname}()'\n    \n    def extract_object(objname):\n        return f'Extracted object: {objname}'\n    \n    def interpret_statement(stmt, local_vars, allow_recursion):\n        return f'Interpreting statement: {stmt}', False\n    \n    expr = expr.strip()"
        }
    ]
}