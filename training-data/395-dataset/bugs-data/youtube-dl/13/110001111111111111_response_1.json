{
    "youtube-dl": [
        {
            "bugID": 13,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 1866,
            "file_name": "/youtube_dl/utils.py",
            "replace_code": "def urljoin(base, path):\n    import re\n    from youtube_dl.utils import compat_str, compat_urlparse\n    if base is None or path is None:\n        return None\n    \n    # Convert bytes to str\n    base_str = base.decode('utf-8') if isinstance(base, bytes) else base\n    path_str = path.decode('utf-8') if isinstance(path, bytes) else path\n    \n    # Check if path is a valid URL\n    if re.match(r'^(?:https?:)?//', path_str):\n        return path_str\n    \n    # Check if base is a valid URL\n    if not re.match(r'^(?:https?:)?//', base_str):\n        return None\n    \n    # Join base and path to form a complete URL\n    return compat_urlparse.urljoin(base_str, path_str)"
        }
    ]
}