{
    "youtube-dl:7": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_7/youtube_dl/utils.py": {
            "buggy_functions": [
                {
                    "function_name": "js_to_json",
                    "function_code": "def js_to_json(code):\n    def fix_kv(m):\n        v = m.group(0)\n        if v in ('true', 'false', 'null'):\n            return v\n        if v.startswith('\"'):\n            return v\n        if v.startswith(\"'\"):\n            v = v[1:-1]\n            v = re.sub(r\"\\\\\\\\|\\\\'|\\\"\", lambda m: {\n                '\\\\\\\\': '\\\\\\\\',\n                \"\\\\'\": \"'\",\n                '\"': '\\\\\"',\n            }[m.group(0)], v)\n        return '\"%s\"' % v\n\n    res = re.sub(r'''(?x)\n        \"(?:[^\"\\\\]*(?:\\\\\\\\|\\\\['\"nu]))*[^\"\\\\]*\"|\n        '(?:[^'\\\\]*(?:\\\\\\\\|\\\\['\"nu]))*[^'\\\\]*'|\n        [a-zA-Z_][.a-zA-Z_0-9]*\n        ''', fix_kv, code)\n    res = re.sub(r',(\\s*[\\]}])', lambda m: m.group(1), res)\n    return res\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1698,
                    "end_line": 1720,
                    "variables": {
                        "v": [
                            1700,
                            1701,
                            1702,
                            1703,
                            1704,
                            1705,
                            1706,
                            1707,
                            1711,
                            1712
                        ],
                        "m.group": [
                            1719,
                            1700,
                            1711
                        ],
                        "m": [
                            1719,
                            1700,
                            1711
                        ],
                        "v.startswith": [
                            1705,
                            1703
                        ],
                        "re.sub": [
                            1714,
                            1707,
                            1719
                        ],
                        "re": [
                            1714,
                            1707,
                            1719
                        ],
                        "res": [
                            1720,
                            1714,
                            1719
                        ],
                        "fix_kv": [
                            1718
                        ],
                        "code": [
                            1718
                        ]
                    },
                    "filtered_variables": {
                        "v": [
                            1700,
                            1701,
                            1702,
                            1703,
                            1704,
                            1705,
                            1706,
                            1707,
                            1711,
                            1712
                        ],
                        "m.group": [
                            1719,
                            1700,
                            1711
                        ],
                        "m": [
                            1719,
                            1700,
                            1711
                        ],
                        "v.startswith": [
                            1705,
                            1703
                        ],
                        "re.sub": [
                            1714,
                            1707,
                            1719
                        ],
                        "re": [
                            1714,
                            1707,
                            1719
                        ],
                        "res": [
                            1720,
                            1714,
                            1719
                        ],
                        "fix_kv": [
                            1718
                        ],
                        "code": [
                            1718
                        ]
                    },
                    "diff_line_number": 1704,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'clip'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10708bf80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(14, 20), match=\"'clip'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1070b5df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070958c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'provider'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10708bf80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(22, 32), match=\"'provider'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1070b5830>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070958c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'pseudo'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10708bf80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(33, 41), match=\"'pseudo'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1070b5ef0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070958c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'{\\n            \"clip\":{\"provider\":\"pseudo\"}\\n        }'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070958c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'clip'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1070c0180>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(14, 20), match=\"'clip'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1070df7b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070de5f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'provider'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1070c0180>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(22, 32), match=\"'provider'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1070dfc30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070de5f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'pseudo'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1070c0180>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(33, 41), match=\"'pseudo'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1070e2070>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070de5f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'{\\n            \"clip\":{\"provider\":\"pseudo\"}\\n        }'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070de5f0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'playlist'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1070c0880>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(14, 24), match=\"'playlist'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1070e3a30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070e4560>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'controls'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1070c0880>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(27, 37), match=\"'controls'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1070e65b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070e4560>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'all'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1070c0880>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(39, 44), match=\"'all'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1070e3b70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070e4560>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'null'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1070c0880>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(45, 49), match='null'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1070e72b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070e4560>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'{\\n            \"playlist\":[{\"controls\":{\"all\":null}}]\\n        }'",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070e4560>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'",
                                    "variable_type": "str",
                                    "variable_shape": "35"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'",
                                    "variable_type": "str",
                                    "variable_shape": "35"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1070c0340>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 35), match='\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1067e8cf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070ed440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'",
                                    "variable_type": "str",
                                    "variable_shape": "35"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'",
                                    "variable_type": "str",
                                    "variable_shape": "35"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'",
                                    "variable_type": "str",
                                    "variable_shape": "35"
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1070ed440>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'",
                                    "variable_type": "str",
                                    "variable_shape": "35"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'clip'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10ad332d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(14, 20), match=\"'clip'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad40bf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad088c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'provider'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10ad332d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(22, 32), match=\"'provider'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad40ab0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad088c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'pseudo'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10ad332d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(33, 41), match=\"'pseudo'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad40cf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad088c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'{\\n            \"clip\":{\"provider\":\"pseudo\"}\\n        }'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad088c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'clip'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10ad335e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(14, 20), match=\"'clip'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad524f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad08c20>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'provider'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10ad335e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(22, 32), match=\"'provider'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad52eb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad08c20>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'pseudo'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10ad335e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(33, 41), match=\"'pseudo'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad500b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad08c20>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'{\\n            \"clip\":{\"provider\":\"pseudo\"}\\n        }'",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad08c20>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "52"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'playlist'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10ad338f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(14, 24), match=\"'playlist'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad55d30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad54e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'controls'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10ad338f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(27, 37), match=\"'controls'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad578b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad54e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'all'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10ad338f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(39, 44), match=\"'all'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad55d30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad54e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'null'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10ad338f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(45, 49), match='null'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad5b030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad54e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'{\\n            \"playlist\":[{\"controls\":{\"all\":null}}]\\n        }'",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad54e60>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n            'playlist':[{'controls':{'all':null}}]\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "62"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'",
                                    "variable_type": "str",
                                    "variable_shape": "35"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "\"The CW's 'Crazy Ex-Girlfriend'\"",
                                    "variable_type": "str",
                                    "variable_shape": "30"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10ad33570>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 35), match='\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad4b490>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad54680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'",
                                    "variable_type": "str",
                                    "variable_shape": "35"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'",
                                    "variable_type": "str",
                                    "variable_shape": "35"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'\"The CW\\'s \\'Crazy Ex-Girlfriend\\'\"'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad54680>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"'",
                                    "variable_type": "str",
                                    "variable_shape": "35"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"SAND Number: SAND 2013-7800P\\\\nPresenter: Tom Russo\\\\nHabanero Software Training - Xyce Software\\\\nXyce, Sandia\\\\u0027s\"'",
                                    "variable_type": "str",
                                    "variable_shape": "117"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": "'SAND Number: SAND 2013-7800P\\\\nPresenter: Tom Russo\\\\nHabanero Software Training - Xyce Software\\\\nXyce, Sandia\\\\u0027s'",
                                    "variable_type": "str",
                                    "variable_shape": "115"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10acfdf80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 117), match='\"SAND Number: SAND 2013-7800P\\\\nPresenter: Tom Ru>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10ad387c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad58560>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"SAND Number: SAND 2013-7800P\\\\nPresenter: Tom Russo\\\\nHabanero Software Training - Xyce Software\\\\nXyce, Sandia\\\\u0027s\"'",
                                    "variable_type": "str",
                                    "variable_shape": "117"
                                }
                            }
                        ],
                        [
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"SAND Number: SAND 2013-7800P\\\\nPresenter: Tom Russo\\\\nHabanero Software Training - Xyce Software\\\\nXyce, Sandia\\\\u0027s\"'",
                                    "variable_type": "str",
                                    "variable_shape": "117"
                                }
                            },
                            {
                                "v": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "v.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'\"SAND Number: SAND 2013-7800P\\\\nPresenter: Tom Russo\\\\nHabanero Software Training - Xyce Software\\\\nXyce, Sandia\\\\u0027s\"'",
                                    "variable_type": "str",
                                    "variable_shape": "117"
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10ad58560>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "'\"SAND Number: SAND 2013-7800P\\\\nPresenter: Tom Russo\\\\nHabanero Software Training - Xyce Software\\\\nXyce, Sandia\\\\u0027s\"'",
                                    "variable_type": "str",
                                    "variable_shape": "117"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def preferredencoding():\n    \"\"\"Get preferred encoding.\n\n    Returns the best encoding scheme for the system, based on\n    locale.getpreferredencoding() and some further tweaks.\n    \"\"\"\n    try:\n        pref = locale.getpreferredencoding()\n        'TEST'.encode(pref)\n    except Exception:\n        pref = 'UTF-8'\n\n    return pref",
                "def write_json_file(obj, fn):\n    \"\"\" Encode obj as JSON and write it to fn, atomically if possible \"\"\"\n\n    fn = encodeFilename(fn)\n    if sys.version_info < (3, 0) and sys.platform != 'win32':\n        encoding = get_filesystem_encoding()\n        # os.path.basename returns a bytes object, but NamedTemporaryFile\n        # will fail if the filename contains non ascii characters unless we\n        # use a unicode object\n        path_basename = lambda f: os.path.basename(fn).decode(encoding)\n        # the same for os.path.dirname\n        path_dirname = lambda f: os.path.dirname(fn).decode(encoding)\n    else:\n        path_basename = os.path.basename\n        path_dirname = os.path.dirname\n\n    args = {\n        'suffix': '.tmp',\n        'prefix': path_basename(fn) + '.',\n        'dir': path_dirname(fn),\n        'delete': False,\n    }\n\n    # In Python 2.x, json.dump expects a bytestream.\n    # In Python 3.x, it writes to a character stream\n    if sys.version_info < (3, 0):\n        args['mode'] = 'wb'\n    else:\n        args.update({\n            'mode': 'w',\n            'encoding': 'utf-8',\n        })\n\n    tf = tempfile.NamedTemporaryFile(**compat_kwargs(args))\n\n    try:\n        with tf:\n            json.dump(obj, tf)\n        if sys.platform == 'win32':\n            # Need to remove existing file on Windows, else os.rename raises\n            # WindowsError or FileExistsError.\n            try:\n                os.unlink(fn)\n            except OSError:\n                pass\n        os.rename(tf.name, fn)\n    except Exception:\n        try:\n            os.remove(tf.name)\n        except OSError:\n            pass\n        raise",
                "def xpath_with_ns(path, ns_map):\n    components = [c.split(':') for c in path.split('/')]\n    replaced = []\n    for c in components:\n        if len(c) == 1:\n            replaced.append(c[0])\n        else:\n            ns, tag = c\n            replaced.append('{%s}%s' % (ns_map[ns], tag))\n    return '/'.join(replaced)",
                "def xpath_element(node, xpath, name=None, fatal=False, default=NO_DEFAULT):\n    if sys.version_info < (2, 7):  # Crazy 2.6\n        xpath = xpath.encode('ascii')\n\n    n = node.find(xpath)\n    if n is None:\n        if default is not NO_DEFAULT:\n            return default\n        elif fatal:\n            name = xpath if name is None else name\n            raise ExtractorError('Could not find XML element %s' % name)\n        else:\n            return None\n    return n",
                "def xpath_text(node, xpath, name=None, fatal=False, default=NO_DEFAULT):\n    n = xpath_element(node, xpath, name, fatal=fatal, default=default)\n    if n is None or n == default:\n        return n\n    if n.text is None:\n        if default is not NO_DEFAULT:\n            return default\n        elif fatal:\n            name = xpath if name is None else name\n            raise ExtractorError('Could not find XML element\\'s text %s' % name)\n        else:\n            return None\n    return n.text",
                "def xpath_attr(node, xpath, key, name=None, fatal=False, default=NO_DEFAULT):\n    n = find_xpath_attr(node, xpath, key)\n    if n is None:\n        if default is not NO_DEFAULT:\n            return default\n        elif fatal:\n            name = '%s[@%s]' % (xpath, key) if name is None else name\n            raise ExtractorError('Could not find XML attribute %s' % name)\n        else:\n            return None\n    return n.attrib[key]",
                "def get_element_by_id(id, html):\n    \"\"\"Return the content of the tag with the specified ID in the passed HTML document\"\"\"\n    return get_element_by_attribute(\"id\", id, html)",
                "def get_element_by_attribute(attribute, value, html):\n    \"\"\"Return the content of the tag with the specified attribute in the passed HTML document\"\"\"\n\n    m = re.search(r'''(?xs)\n        <([a-zA-Z0-9:._-]+)\n         (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]+|=\"[^\"]+\"|='[^']+'))*?\n         \\s+%s=['\"]?%s['\"]?\n         (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]+|=\"[^\"]+\"|='[^']+'))*?\n        \\s*>\n        (?P<content>.*?)\n        </\\1>\n    ''' % (re.escape(attribute), re.escape(value)), html)\n\n    if not m:\n        return None\n    res = m.group('content')\n\n    if res.startswith('\"') or res.startswith(\"'\"):\n        res = res[1:-1]\n\n    return unescapeHTML(res)",
                "def clean_html(html):\n    \"\"\"Clean an HTML snippet into a readable string\"\"\"\n\n    if html is None:  # Convenience for sanitizing descriptions etc.\n        return html\n\n    # Newline vs <br />\n    html = html.replace('\\n', ' ')\n    html = re.sub(r'\\s*<\\s*br\\s*/?\\s*>\\s*', '\\n', html)\n    html = re.sub(r'<\\s*/\\s*p\\s*>\\s*<\\s*p[^>]*>', '\\n', html)\n    # Strip html tags\n    html = re.sub('<.*?>', '', html)\n    # Replace html entities\n    html = unescapeHTML(html)\n    return html.strip()",
                "def sanitize_open(filename, open_mode):\n    \"\"\"Try to open the given filename, and slightly tweak it if this fails.\n\n    Attempts to open the given filename. If this fails, it tries to change\n    the filename slightly, step by step, until it's either able to open it\n    or it fails and raises a final exception, like the standard open()\n    function.\n\n    It returns the tuple (stream, definitive_file_name).\n    \"\"\"\n    try:\n        if filename == '-':\n            if sys.platform == 'win32':\n                import msvcrt\n                msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)\n            return (sys.stdout.buffer if hasattr(sys.stdout, 'buffer') else sys.stdout, filename)\n        stream = open(encodeFilename(filename), open_mode)\n        return (stream, filename)\n    except (IOError, OSError) as err:\n        if err.errno in (errno.EACCES,):\n            raise\n\n        # In case of error, try to remove win32 forbidden chars\n        alt_filename = sanitize_path(filename)\n        if alt_filename == filename:\n            raise\n        else:\n            # An exception here should be caught in the caller\n            stream = open(encodeFilename(alt_filename), open_mode)\n            return (stream, alt_filename)",
                "def timeconvert(timestr):\n    \"\"\"Convert RFC 2822 defined time string into system timestamp\"\"\"\n    timestamp = None\n    timetuple = email.utils.parsedate_tz(timestr)\n    if timetuple is not None:\n        timestamp = email.utils.mktime_tz(timetuple)\n    return timestamp",
                "def sanitize_filename(s, restricted=False, is_id=False):\n    \"\"\"Sanitizes a string so it could be used as part of a filename.\n    If restricted is set, use a stricter subset of allowed characters.\n    Set is_id if this is not an arbitrary string, but an ID that should be kept if possible\n    \"\"\"\n    def replace_insane(char):\n        if char == '?' or ord(char) < 32 or ord(char) == 127:\n            return ''\n        elif char == '\"':\n            return '' if restricted else '\\''\n        elif char == ':':\n            return '_-' if restricted else ' -'\n        elif char in '\\\\/|*<>':\n            return '_'\n        if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n            return '_'\n        if restricted and ord(char) > 127:\n            return '_'\n        return char\n\n    # Handle timestamps\n    s = re.sub(r'[0-9]+(?::[0-9]+)+', lambda m: m.group(0).replace(':', '_'), s)\n    result = ''.join(map(replace_insane, s))\n    if not is_id:\n        while '__' in result:\n            result = result.replace('__', '_')\n        result = result.strip('_')\n        # Common case of \"Foreign band name - English song title\"\n        if restricted and result.startswith('-_'):\n            result = result[2:]\n        if result.startswith('-'):\n            result = '_' + result[len('-'):]\n        result = result.lstrip('.')\n        if not result:\n            result = '_'\n    return result",
                "def sanitize_path(s):\n    \"\"\"Sanitizes and normalizes path on Windows\"\"\"\n    if sys.platform != 'win32':\n        return s\n    drive_or_unc, _ = os.path.splitdrive(s)\n    if sys.version_info < (2, 7) and not drive_or_unc:\n        drive_or_unc, _ = os.path.splitunc(s)\n    norm_path = os.path.normpath(remove_start(s, drive_or_unc)).split(os.path.sep)\n    if drive_or_unc:\n        norm_path.pop(0)\n    sanitized_path = [\n        path_part if path_part in ['.', '..'] else re.sub('(?:[/<>:\"\\\\|\\\\\\\\?\\\\*]|\\.$)', '#', path_part)\n        for path_part in norm_path]\n    if drive_or_unc:\n        sanitized_path.insert(0, drive_or_unc + os.path.sep)\n    return os.path.join(*sanitized_path)",
                "def orderedSet(iterable):\n    \"\"\" Remove all duplicates from the input iterable \"\"\"\n    res = []\n    for el in iterable:\n        if el not in res:\n            res.append(el)\n    return res",
                "def _htmlentity_transform(entity):\n    \"\"\"Transforms an HTML entity to a character.\"\"\"\n    # Known non-numeric HTML entity\n    if entity in compat_html_entities.name2codepoint:\n        return compat_chr(compat_html_entities.name2codepoint[entity])\n\n    mobj = re.match(r'#(x[0-9a-fA-F]+|[0-9]+)', entity)\n    if mobj is not None:\n        numstr = mobj.group(1)\n        if numstr.startswith('x'):\n            base = 16\n            numstr = '0%s' % numstr\n        else:\n            base = 10\n        return compat_chr(int(numstr, base))\n\n    # Unknown entity in name, return its literal representation\n    return ('&%s;' % entity)",
                "def unescapeHTML(s):\n    if s is None:\n        return None\n    assert type(s) == compat_str\n\n    return re.sub(\n        r'&([^;]+);', lambda m: _htmlentity_transform(m.group(1)), s)",
                "def get_subprocess_encoding():\n    if sys.platform == 'win32' and sys.getwindowsversion()[0] >= 5:\n        # For subprocess calls, encode with locale encoding\n        # Refer to http://stackoverflow.com/a/9951851/35070\n        encoding = preferredencoding()\n    else:\n        encoding = sys.getfilesystemencoding()\n    if encoding is None:\n        encoding = 'utf-8'\n    return encoding",
                "def encodeFilename(s, for_subprocess=False):\n    \"\"\"\n    @param s The name of the file\n    \"\"\"\n\n    assert type(s) == compat_str\n\n    # Python 3 has a Unicode API\n    if sys.version_info >= (3, 0):\n        return s\n\n    # Pass '' directly to use Unicode APIs on Windows 2000 and up\n    # (Detecting Windows NT 4 is tricky because 'major >= 4' would\n    # match Windows 9x series as well. Besides, NT 4 is obsolete.)\n    if not for_subprocess and sys.platform == 'win32' and sys.getwindowsversion()[0] >= 5:\n        return s\n\n    return s.encode(get_subprocess_encoding(), 'ignore')",
                "def decodeFilename(b, for_subprocess=False):\n\n    if sys.version_info >= (3, 0):\n        return b\n\n    if not isinstance(b, bytes):\n        return b\n\n    return b.decode(get_subprocess_encoding(), 'ignore')",
                "def encodeArgument(s):\n    if not isinstance(s, compat_str):\n        # Legacy code that uses byte strings\n        # Uncomment the following line after fixing all post processors\n        # assert False, 'Internal error: %r should be of type %r, is %r' % (s, compat_str, type(s))\n        s = s.decode('ascii')\n    return encodeFilename(s, True)",
                "def decodeArgument(b):\n    return decodeFilename(b, True)",
                "def decodeOption(optval):\n    if optval is None:\n        return optval\n    if isinstance(optval, bytes):\n        optval = optval.decode(preferredencoding())\n\n    assert isinstance(optval, compat_str)\n    return optval",
                "def formatSeconds(secs):\n    if secs > 3600:\n        return '%d:%02d:%02d' % (secs // 3600, (secs % 3600) // 60, secs % 60)\n    elif secs > 60:\n        return '%d:%02d' % (secs // 60, secs % 60)\n    else:\n        return '%d' % secs",
                "def make_HTTPS_handler(params, **kwargs):\n    opts_no_check_certificate = params.get('nocheckcertificate', False)\n    if hasattr(ssl, 'create_default_context'):  # Python >= 3.4 or 2.7.9\n        context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\n        if opts_no_check_certificate:\n            context.check_hostname = False\n            context.verify_mode = ssl.CERT_NONE\n        try:\n            return YoutubeDLHTTPSHandler(params, context=context, **kwargs)\n        except TypeError:\n            # Python 2.7.8\n            # (create_default_context present but HTTPSHandler has no context=)\n            pass\n\n    if sys.version_info < (3, 2):\n        return YoutubeDLHTTPSHandler(params, **kwargs)\n    else:  # Python < 3.4\n        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)\n        context.verify_mode = (ssl.CERT_NONE\n                               if opts_no_check_certificate\n                               else ssl.CERT_REQUIRED)\n        context.set_default_verify_paths()\n        return YoutubeDLHTTPSHandler(params, context=context, **kwargs)",
                "def bug_reports_message():\n    if ytdl_is_updateable():\n        update_cmd = 'type  youtube-dl -U  to update'\n    else:\n        update_cmd = 'see  https://yt-dl.org/update  on how to update'\n    msg = '; please report this issue on https://yt-dl.org/bug .'\n    msg += ' Make sure you are using the latest version; %s.' % update_cmd\n    msg += ' Be sure to call youtube-dl with the --verbose flag and include its complete output.'\n    return msg",
                "def _create_http_connection(ydl_handler, http_class, is_https, *args, **kwargs):\n    # Working around python 2 bug (see http://bugs.python.org/issue17849) by limiting\n    # expected HTTP responses to meet HTTP/1.0 or later (see also\n    # https://github.com/rg3/youtube-dl/issues/6727)\n    if sys.version_info < (3, 0):\n        kwargs[b'strict'] = True\n    hc = http_class(*args, **kwargs)\n    source_address = ydl_handler._params.get('source_address')\n    if source_address is not None:\n        sa = (source_address, 0)\n        if hasattr(hc, 'source_address'):  # Python 2.7+\n            hc.source_address = sa\n        else:  # Python 2.6\n            def _hc_connect(self, *args, **kwargs):\n                sock = compat_socket_create_connection(\n                    (self.host, self.port), self.timeout, sa)\n                if is_https:\n                    self.sock = ssl.wrap_socket(\n                        sock, self.key_file, self.cert_file,\n                        ssl_version=ssl.PROTOCOL_TLSv1)\n                else:\n                    self.sock = sock\n            hc.connect = functools.partial(_hc_connect, hc)\n\n    return hc",
                "def parse_iso8601(date_str, delimiter='T', timezone=None):\n    \"\"\" Return a UNIX timestamp from the given date \"\"\"\n\n    if date_str is None:\n        return None\n\n    if timezone is None:\n        m = re.search(\n            r'(\\.[0-9]+)?(?:Z$| ?(?P<sign>\\+|-)(?P<hours>[0-9]{2}):?(?P<minutes>[0-9]{2})$)',\n            date_str)\n        if not m:\n            timezone = datetime.timedelta()\n        else:\n            date_str = date_str[:-len(m.group(0))]\n            if not m.group('sign'):\n                timezone = datetime.timedelta()\n            else:\n                sign = 1 if m.group('sign') == '+' else -1\n                timezone = datetime.timedelta(\n                    hours=sign * int(m.group('hours')),\n                    minutes=sign * int(m.group('minutes')))\n    date_format = '%Y-%m-%d{0}%H:%M:%S'.format(delimiter)\n    dt = datetime.datetime.strptime(date_str, date_format) - timezone\n    return calendar.timegm(dt.timetuple())",
                "def unified_strdate(date_str, day_first=True):\n    \"\"\"Return a string with the date in the format YYYYMMDD\"\"\"\n\n    if date_str is None:\n        return None\n    upload_date = None\n    # Replace commas\n    date_str = date_str.replace(',', ' ')\n    # %z (UTC offset) is only supported in python>=3.2\n    if not re.match(r'^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$', date_str):\n        date_str = re.sub(r' ?(\\+|-)[0-9]{2}:?[0-9]{2}$', '', date_str)\n    # Remove AM/PM + timezone\n    date_str = re.sub(r'(?i)\\s*(?:AM|PM)(?:\\s+[A-Z]+)?', '', date_str)\n\n    format_expressions = [\n        '%d %B %Y',\n        '%d %b %Y',\n        '%B %d %Y',\n        '%b %d %Y',\n        '%b %dst %Y %I:%M%p',\n        '%b %dnd %Y %I:%M%p',\n        '%b %dth %Y %I:%M%p',\n        '%Y %m %d',\n        '%Y-%m-%d',\n        '%Y/%m/%d',\n        '%Y/%m/%d %H:%M:%S',\n        '%Y-%m-%d %H:%M:%S',\n        '%Y-%m-%d %H:%M:%S.%f',\n        '%d.%m.%Y %H:%M',\n        '%d.%m.%Y %H.%M',\n        '%Y-%m-%dT%H:%M:%SZ',\n        '%Y-%m-%dT%H:%M:%S.%fZ',\n        '%Y-%m-%dT%H:%M:%S.%f0Z',\n        '%Y-%m-%dT%H:%M:%S',\n        '%Y-%m-%dT%H:%M:%S.%f',\n        '%Y-%m-%dT%H:%M',\n    ]\n    if day_first:\n        format_expressions.extend([\n            '%d-%m-%Y',\n            '%d.%m.%Y',\n            '%d/%m/%Y',\n            '%d/%m/%y',\n            '%d/%m/%Y %H:%M:%S',\n        ])\n    else:\n        format_expressions.extend([\n            '%m-%d-%Y',\n            '%m.%d.%Y',\n            '%m/%d/%Y',\n            '%m/%d/%y',\n            '%m/%d/%Y %H:%M:%S',\n        ])\n    for expression in format_expressions:\n        try:\n            upload_date = datetime.datetime.strptime(date_str, expression).strftime('%Y%m%d')\n        except ValueError:\n            pass\n    if upload_date is None:\n        timetuple = email.utils.parsedate_tz(date_str)\n        if timetuple:\n            upload_date = datetime.datetime(*timetuple[:6]).strftime('%Y%m%d')\n    return upload_date",
                "def determine_ext(url, default_ext='unknown_video'):\n    if url is None:\n        return default_ext\n    guess = url.partition('?')[0].rpartition('.')[2]\n    if re.match(r'^[A-Za-z0-9]+$', guess):\n        return guess\n    else:\n        return default_ext",
                "def subtitles_filename(filename, sub_lang, sub_format):\n    return filename.rsplit('.', 1)[0] + '.' + sub_lang + '.' + sub_format",
                "def date_from_str(date_str):\n    \"\"\"\n    Return a datetime object from a string in the format YYYYMMDD or\n    (now|today)[+-][0-9](day|week|month|year)(s)?\"\"\"\n    today = datetime.date.today()\n    if date_str in ('now', 'today'):\n        return today\n    if date_str == 'yesterday':\n        return today - datetime.timedelta(days=1)\n    match = re.match('(now|today)(?P<sign>[+-])(?P<time>\\d+)(?P<unit>day|week|month|year)(s)?', date_str)\n    if match is not None:\n        sign = match.group('sign')\n        time = int(match.group('time'))\n        if sign == '-':\n            time = -time\n        unit = match.group('unit')\n        # A bad aproximation?\n        if unit == 'month':\n            unit = 'day'\n            time *= 30\n        elif unit == 'year':\n            unit = 'day'\n            time *= 365\n        unit += 's'\n        delta = datetime.timedelta(**{unit: time})\n        return today + delta\n    return datetime.datetime.strptime(date_str, \"%Y%m%d\").date()",
                "def hyphenate_date(date_str):\n    \"\"\"\n    Convert a date in 'YYYYMMDD' format to 'YYYY-MM-DD' format\"\"\"\n    match = re.match(r'^(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)$', date_str)\n    if match is not None:\n        return '-'.join(match.groups())\n    else:\n        return date_str",
                "def platform_name():\n    \"\"\" Returns the platform name as a compat_str \"\"\"\n    res = platform.platform()\n    if isinstance(res, bytes):\n        res = res.decode(preferredencoding())\n\n    assert isinstance(res, compat_str)\n    return res",
                "def _windows_write_string(s, out):\n    \"\"\" Returns True if the string was written using special methods,\n    False if it has yet to be written out.\"\"\"\n    # Adapted from http://stackoverflow.com/a/3259271/35070\n\n    import ctypes\n    import ctypes.wintypes\n\n    WIN_OUTPUT_IDS = {\n        1: -11,\n        2: -12,\n    }\n\n    try:\n        fileno = out.fileno()\n    except AttributeError:\n        # If the output stream doesn't have a fileno, it's virtual\n        return False\n    except io.UnsupportedOperation:\n        # Some strange Windows pseudo files?\n        return False\n    if fileno not in WIN_OUTPUT_IDS:\n        return False\n\n    GetStdHandle = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.HANDLE, ctypes.wintypes.DWORD)(\n        (b\"GetStdHandle\", ctypes.windll.kernel32))\n    h = GetStdHandle(WIN_OUTPUT_IDS[fileno])\n\n    WriteConsoleW = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE, ctypes.wintypes.LPWSTR,\n        ctypes.wintypes.DWORD, ctypes.POINTER(ctypes.wintypes.DWORD),\n        ctypes.wintypes.LPVOID)((b\"WriteConsoleW\", ctypes.windll.kernel32))\n    written = ctypes.wintypes.DWORD(0)\n\n    GetFileType = ctypes.WINFUNCTYPE(ctypes.wintypes.DWORD, ctypes.wintypes.DWORD)((b\"GetFileType\", ctypes.windll.kernel32))\n    FILE_TYPE_CHAR = 0x0002\n    FILE_TYPE_REMOTE = 0x8000\n    GetConsoleMode = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE,\n        ctypes.POINTER(ctypes.wintypes.DWORD))(\n        (b\"GetConsoleMode\", ctypes.windll.kernel32))\n    INVALID_HANDLE_VALUE = ctypes.wintypes.DWORD(-1).value\n\n    def not_a_console(handle):\n        if handle == INVALID_HANDLE_VALUE or handle is None:\n            return True\n        return ((GetFileType(handle) & ~FILE_TYPE_REMOTE) != FILE_TYPE_CHAR or\n                GetConsoleMode(handle, ctypes.byref(ctypes.wintypes.DWORD())) == 0)\n\n    if not_a_console(h):\n        return False\n\n    def next_nonbmp_pos(s):\n        try:\n            return next(i for i, c in enumerate(s) if ord(c) > 0xffff)\n        except StopIteration:\n            return len(s)\n\n    while s:\n        count = min(next_nonbmp_pos(s), 1024)\n\n        ret = WriteConsoleW(\n            h, s, count if count else 2, ctypes.byref(written), None)\n        if ret == 0:\n            raise OSError('Failed to write string')\n        if not count:  # We just wrote a non-BMP character\n            assert written.value == 2\n            s = s[1:]\n        else:\n            assert written.value > 0\n            s = s[written.value:]\n    return True",
                "def write_string(s, out=None, encoding=None):\n    if out is None:\n        out = sys.stderr\n    assert type(s) == compat_str\n\n    if sys.platform == 'win32' and encoding is None and hasattr(out, 'fileno'):\n        if _windows_write_string(s, out):\n            return\n\n    if ('b' in getattr(out, 'mode', '') or\n            sys.version_info[0] < 3):  # Python 2 lies about mode of sys.stderr\n        byt = s.encode(encoding or preferredencoding(), 'ignore')\n        out.write(byt)\n    elif hasattr(out, 'buffer'):\n        enc = encoding or getattr(out, 'encoding', None) or preferredencoding()\n        byt = s.encode(enc, 'ignore')\n        out.buffer.write(byt)\n    else:\n        out.write(s)\n    out.flush()",
                "def bytes_to_intlist(bs):\n    if not bs:\n        return []\n    if isinstance(bs[0], int):  # Python 3\n        return list(bs)\n    else:\n        return [ord(c) for c in bs]",
                "def intlist_to_bytes(xs):\n    if not xs:\n        return b''\n    return struct_pack('%dB' % len(xs), *xs)",
                "def get_filesystem_encoding():\n    encoding = sys.getfilesystemencoding()\n    return encoding if encoding is not None else 'utf-8'",
                "def shell_quote(args):\n    quoted_args = []\n    encoding = get_filesystem_encoding()\n    for a in args:\n        if isinstance(a, bytes):\n            # We may get a filename encoded with 'encodeFilename'\n            a = a.decode(encoding)\n        quoted_args.append(pipes.quote(a))\n    return ' '.join(quoted_args)",
                "def smuggle_url(url, data):\n    \"\"\" Pass additional data in a URL for internal use. \"\"\"\n\n    sdata = compat_urllib_parse.urlencode(\n        {'__youtubedl_smuggle': json.dumps(data)})\n    return url + '#' + sdata",
                "def unsmuggle_url(smug_url, default=None):\n    if '#__youtubedl_smuggle' not in smug_url:\n        return smug_url, default\n    url, _, sdata = smug_url.rpartition('#')\n    jsond = compat_parse_qs(sdata)['__youtubedl_smuggle'][0]\n    data = json.loads(jsond)\n    return url, data",
                "def format_bytes(bytes):\n    if bytes is None:\n        return 'N/A'\n    if type(bytes) is str:\n        bytes = float(bytes)\n    if bytes == 0.0:\n        exponent = 0\n    else:\n        exponent = int(math.log(bytes, 1024.0))\n    suffix = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'][exponent]\n    converted = float(bytes) / float(1024 ** exponent)\n    return '%.2f%s' % (converted, suffix)",
                "def parse_filesize(s):\n    if s is None:\n        return None\n\n    # The lower-case forms are of course incorrect and inofficial,\n    # but we support those too\n    _UNIT_TABLE = {\n        'B': 1,\n        'b': 1,\n        'KiB': 1024,\n        'KB': 1000,\n        'kB': 1024,\n        'Kb': 1000,\n        'MiB': 1024 ** 2,\n        'MB': 1000 ** 2,\n        'mB': 1024 ** 2,\n        'Mb': 1000 ** 2,\n        'GiB': 1024 ** 3,\n        'GB': 1000 ** 3,\n        'gB': 1024 ** 3,\n        'Gb': 1000 ** 3,\n        'TiB': 1024 ** 4,\n        'TB': 1000 ** 4,\n        'tB': 1024 ** 4,\n        'Tb': 1000 ** 4,\n        'PiB': 1024 ** 5,\n        'PB': 1000 ** 5,\n        'pB': 1024 ** 5,\n        'Pb': 1000 ** 5,\n        'EiB': 1024 ** 6,\n        'EB': 1000 ** 6,\n        'eB': 1024 ** 6,\n        'Eb': 1000 ** 6,\n        'ZiB': 1024 ** 7,\n        'ZB': 1000 ** 7,\n        'zB': 1024 ** 7,\n        'Zb': 1000 ** 7,\n        'YiB': 1024 ** 8,\n        'YB': 1000 ** 8,\n        'yB': 1024 ** 8,\n        'Yb': 1000 ** 8,\n    }\n\n    units_re = '|'.join(re.escape(u) for u in _UNIT_TABLE)\n    m = re.match(\n        r'(?P<num>[0-9]+(?:[,.][0-9]*)?)\\s*(?P<unit>%s)' % units_re, s)\n    if not m:\n        return None\n\n    num_str = m.group('num').replace(',', '.')\n    mult = _UNIT_TABLE[m.group('unit')]\n    return int(float(num_str) * mult)",
                "def month_by_name(name):\n    \"\"\" Return the number of a month by (locale-independently) English name \"\"\"\n\n    try:\n        return ENGLISH_MONTH_NAMES.index(name) + 1\n    except ValueError:\n        return None",
                "def month_by_abbreviation(abbrev):\n    \"\"\" Return the number of a month by (locale-independently) English\n        abbreviations \"\"\"\n\n    try:\n        return [s[:3] for s in ENGLISH_MONTH_NAMES].index(abbrev) + 1\n    except ValueError:\n        return None",
                "def fix_xml_ampersands(xml_str):\n    \"\"\"Replace all the '&' by '&amp;' in XML\"\"\"\n    return re.sub(\n        r'&(?!amp;|lt;|gt;|apos;|quot;|#x[0-9a-fA-F]{,4};|#[0-9]{,4};)',\n        '&amp;',\n        xml_str)",
                "def setproctitle(title):\n    assert isinstance(title, compat_str)\n    try:\n        libc = ctypes.cdll.LoadLibrary(\"libc.so.6\")\n    except OSError:\n        return\n    title_bytes = title.encode('utf-8')\n    buf = ctypes.create_string_buffer(len(title_bytes))\n    buf.value = title_bytes\n    try:\n        libc.prctl(15, buf, 0, 0, 0)\n    except AttributeError:\n        return  # Strange libc, just skip this",
                "def remove_start(s, start):\n    if s.startswith(start):\n        return s[len(start):]\n    return s",
                "def remove_end(s, end):\n    if s.endswith(end):\n        return s[:-len(end)]\n    return s",
                "def url_basename(url):\n    path = compat_urlparse.urlparse(url).path\n    return path.strip('/').split('/')[-1]",
                "def int_or_none(v, scale=1, default=None, get_attr=None, invscale=1):\n    if get_attr:\n        if v is not None:\n            v = getattr(v, get_attr, None)\n    if v == '':\n        v = None\n    if v is None:\n        return default\n    try:\n        return int(v) * invscale // scale\n    except ValueError:\n        return default",
                "def str_or_none(v, default=None):\n    return default if v is None else compat_str(v)",
                "def str_to_int(int_str):\n    \"\"\" A more relaxed version of int_or_none \"\"\"\n    if int_str is None:\n        return None\n    int_str = re.sub(r'[,\\.\\+]', '', int_str)\n    return int(int_str)",
                "def float_or_none(v, scale=1, invscale=1, default=None):\n    if v is None:\n        return default\n    try:\n        return float(v) * invscale / scale\n    except ValueError:\n        return default",
                "def parse_duration(s):\n    if not isinstance(s, compat_basestring):\n        return None\n\n    s = s.strip()\n\n    m = re.match(\n        r'''(?ix)(?:P?T)?\n        (?:\n            (?P<only_mins>[0-9.]+)\\s*(?:mins?\\.?|minutes?)\\s*|\n            (?P<only_hours>[0-9.]+)\\s*(?:hours?)|\n\n            \\s*(?P<hours_reversed>[0-9]+)\\s*(?:[:h]|hours?)\\s*(?P<mins_reversed>[0-9]+)\\s*(?:[:m]|mins?\\.?|minutes?)\\s*|\n            (?:\n                (?:\n                    (?:(?P<days>[0-9]+)\\s*(?:[:d]|days?)\\s*)?\n                    (?P<hours>[0-9]+)\\s*(?:[:h]|hours?)\\s*\n                )?\n                (?P<mins>[0-9]+)\\s*(?:[:m]|mins?|minutes?)\\s*\n            )?\n            (?P<secs>[0-9]+)(?P<ms>\\.[0-9]+)?\\s*(?:s|secs?|seconds?)?\n        )$''', s)\n    if not m:\n        return None\n    res = 0\n    if m.group('only_mins'):\n        return float_or_none(m.group('only_mins'), invscale=60)\n    if m.group('only_hours'):\n        return float_or_none(m.group('only_hours'), invscale=60 * 60)\n    if m.group('secs'):\n        res += int(m.group('secs'))\n    if m.group('mins_reversed'):\n        res += int(m.group('mins_reversed')) * 60\n    if m.group('mins'):\n        res += int(m.group('mins')) * 60\n    if m.group('hours'):\n        res += int(m.group('hours')) * 60 * 60\n    if m.group('hours_reversed'):\n        res += int(m.group('hours_reversed')) * 60 * 60\n    if m.group('days'):\n        res += int(m.group('days')) * 24 * 60 * 60\n    if m.group('ms'):\n        res += float(m.group('ms'))\n    return res",
                "def prepend_extension(filename, ext, expected_real_ext=None):\n    name, real_ext = os.path.splitext(filename)\n    return (\n        '{0}.{1}{2}'.format(name, ext, real_ext)\n        if not expected_real_ext or real_ext[1:] == expected_real_ext\n        else '{0}.{1}'.format(filename, ext))",
                "def replace_extension(filename, ext, expected_real_ext=None):\n    name, real_ext = os.path.splitext(filename)\n    return '{0}.{1}'.format(\n        name if not expected_real_ext or real_ext[1:] == expected_real_ext else filename,\n        ext)",
                "def check_executable(exe, args=[]):\n    \"\"\" Checks if the given binary is installed somewhere in PATH, and returns its name.\n    args can be a list of arguments for a short output (like -version) \"\"\"\n    try:\n        subprocess.Popen([exe] + args, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n    except OSError:\n        return False\n    return exe",
                "def get_exe_version(exe, args=['--version'],\n                    version_re=None, unrecognized='present'):\n    \"\"\" Returns the version of the specified executable,\n    or False if the executable is not present \"\"\"\n    try:\n        out, _ = subprocess.Popen(\n            [encodeArgument(exe)] + args,\n            stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()\n    except OSError:\n        return False\n    if isinstance(out, bytes):  # Python 2.x\n        out = out.decode('ascii', 'ignore')\n    return detect_exe_version(out, version_re, unrecognized)",
                "def detect_exe_version(output, version_re=None, unrecognized='present'):\n    assert isinstance(output, compat_str)\n    if version_re is None:\n        version_re = r'version\\s+([-0-9._a-zA-Z]+)'\n    m = re.search(version_re, output)\n    if m:\n        return m.group(1)\n    else:\n        return unrecognized",
                "def uppercase_escape(s):\n    unicode_escape = codecs.getdecoder('unicode_escape')\n    return re.sub(\n        r'\\\\U[0-9a-fA-F]{8}',\n        lambda m: unicode_escape(m.group(0))[0],\n        s)",
                "def lowercase_escape(s):\n    unicode_escape = codecs.getdecoder('unicode_escape')\n    return re.sub(\n        r'\\\\u[0-9a-fA-F]{4}',\n        lambda m: unicode_escape(m.group(0))[0],\n        s)",
                "def escape_rfc3986(s):\n    \"\"\"Escape non-ASCII characters as suggested by RFC 3986\"\"\"\n    if sys.version_info < (3, 0) and isinstance(s, compat_str):\n        s = s.encode('utf-8')\n    return compat_urllib_parse.quote(s, b\"%/;:@&=+$,!~*'()?#[]\")",
                "def escape_url(url):\n    \"\"\"Escape URL as suggested by RFC 3986\"\"\"\n    url_parsed = compat_urllib_parse_urlparse(url)\n    return url_parsed._replace(\n        path=escape_rfc3986(url_parsed.path),\n        params=escape_rfc3986(url_parsed.params),\n        query=escape_rfc3986(url_parsed.query),\n        fragment=escape_rfc3986(url_parsed.fragment)\n    ).geturl()",
                "def read_batch_urls(batch_fd):\n    def fixup(url):\n        if not isinstance(url, compat_str):\n            url = url.decode('utf-8', 'replace')\n        BOM_UTF8 = '\\xef\\xbb\\xbf'\n        if url.startswith(BOM_UTF8):\n            url = url[len(BOM_UTF8):]\n        url = url.strip()\n        if url.startswith(('#', ';', ']')):\n            return False\n        return url\n\n    with contextlib.closing(batch_fd) as fd:\n        return [url for url in map(fixup, fd) if url]",
                "def urlencode_postdata(*args, **kargs):\n    return compat_urllib_parse.urlencode(*args, **kargs).encode('ascii')",
                "def encode_dict(d, encoding='utf-8'):\n    return dict((k.encode(encoding), v.encode(encoding)) for k, v in d.items())",
                "def parse_xml(s):\n    class TreeBuilder(xml.etree.ElementTree.TreeBuilder):\n        def doctype(self, name, pubid, system):\n            pass  # Ignore doctypes\n\n    parser = xml.etree.ElementTree.XMLParser(target=TreeBuilder())\n    kwargs = {'parser': parser} if sys.version_info >= (2, 7) else {}\n    tree = xml.etree.ElementTree.XML(s.encode('utf-8'), **kwargs)\n    # Fix up XML parser in Python 2.x\n    if sys.version_info < (3, 0):\n        for n in etree_iter(tree):\n            if n.text is not None:\n                if not isinstance(n.text, compat_str):\n                    n.text = n.text.decode('utf-8')\n    return tree",
                "def parse_age_limit(s):\n    if s is None:\n        return None\n    m = re.match(r'^(?P<age>\\d{1,2})\\+?$', s)\n    return int(m.group('age')) if m else US_RATINGS.get(s, None)",
                "def strip_jsonp(code):\n    return re.sub(\n        r'(?s)^[a-zA-Z0-9_]+\\s*\\(\\s*(.*)\\);?\\s*?(?://[^\\n]*)*$', r'\\1', code)",
                "def js_to_json(code):\n    def fix_kv(m):\n        v = m.group(0)\n        if v in ('true', 'false', 'null'):\n            return v\n        if v.startswith('\"'):\n            return v\n        if v.startswith(\"'\"):\n            v = v[1:-1]\n            v = re.sub(r\"\\\\\\\\|\\\\'|\\\"\", lambda m: {\n                '\\\\\\\\': '\\\\\\\\',\n                \"\\\\'\": \"'\",\n                '\"': '\\\\\"',\n            }[m.group(0)], v)\n        return '\"%s\"' % v\n\n    res = re.sub(r'''(?x)\n        \"(?:[^\"\\\\]*(?:\\\\\\\\|\\\\['\"nu]))*[^\"\\\\]*\"|\n        '(?:[^'\\\\]*(?:\\\\\\\\|\\\\['\"nu]))*[^'\\\\]*'|\n        [a-zA-Z_][.a-zA-Z_0-9]*\n        ''', fix_kv, code)\n    res = re.sub(r',(\\s*[\\]}])', lambda m: m.group(1), res)\n    return res",
                "def qualities(quality_ids):\n    \"\"\" Get a numeric quality value out of a list of possible values \"\"\"\n    def q(qid):\n        try:\n            return quality_ids.index(qid)\n        except ValueError:\n            return -1\n    return q",
                "def limit_length(s, length):\n    \"\"\" Add ellipses to overly long strings \"\"\"\n    if s is None:\n        return None\n    ELLIPSES = '...'\n    if len(s) > length:\n        return s[:length - len(ELLIPSES)] + ELLIPSES\n    return s",
                "def version_tuple(v):\n    return tuple(int(e) for e in re.split(r'[-.]', v))",
                "def is_outdated_version(version, limit, assume_new=True):\n    if not version:\n        return not assume_new\n    try:\n        return version_tuple(version) < version_tuple(limit)\n    except ValueError:\n        return not assume_new",
                "def ytdl_is_updateable():\n    \"\"\" Returns if youtube-dl can be updated with -U \"\"\"\n    from zipimport import zipimporter\n\n    return isinstance(globals().get('__loader__'), zipimporter) or hasattr(sys, 'frozen')",
                "def args_to_str(args):\n    # Get a short string representation for a subprocess command\n    return ' '.join(shlex_quote(a) for a in args)",
                "def mimetype2ext(mt):\n    _, _, res = mt.rpartition('/')\n\n    return {\n        'x-ms-wmv': 'wmv',\n        'x-mp4-fragmented': 'mp4',\n        'ttml+xml': 'ttml',\n    }.get(res, res)",
                "def urlhandle_detect_ext(url_handle):\n    try:\n        url_handle.headers\n        getheader = lambda h: url_handle.headers[h]\n    except AttributeError:  # Python < 3\n        getheader = url_handle.info().getheader\n\n    cd = getheader('Content-Disposition')\n    if cd:\n        m = re.match(r'attachment;\\s*filename=\"(?P<filename>[^\"]+)\"', cd)\n        if m:\n            e = determine_ext(m.group('filename'), default_ext=None)\n            if e:\n                return e\n\n    return mimetype2ext(getheader('Content-Type'))",
                "def encode_data_uri(data, mime_type):\n    return 'data:%s;base64,%s' % (mime_type, base64.b64encode(data).decode('ascii'))",
                "def age_restricted(content_limit, age_limit):\n    \"\"\" Returns True iff the content should be blocked \"\"\"\n\n    if age_limit is None:  # No limit set\n        return False\n    if content_limit is None:\n        return False  # Content available for everyone\n    return age_limit < content_limit",
                "def is_html(first_bytes):\n    \"\"\" Detect whether a file contains HTML by examining its first bytes. \"\"\"\n\n    BOMS = [\n        (b'\\xef\\xbb\\xbf', 'utf-8'),\n        (b'\\x00\\x00\\xfe\\xff', 'utf-32-be'),\n        (b'\\xff\\xfe\\x00\\x00', 'utf-32-le'),\n        (b'\\xff\\xfe', 'utf-16-le'),\n        (b'\\xfe\\xff', 'utf-16-be'),\n    ]\n    for bom, enc in BOMS:\n        if first_bytes.startswith(bom):\n            s = first_bytes[len(bom):].decode(enc, 'replace')\n            break\n    else:\n        s = first_bytes.decode('utf-8', 'replace')\n\n    return re.match(r'^\\s*<', s)",
                "def determine_protocol(info_dict):\n    protocol = info_dict.get('protocol')\n    if protocol is not None:\n        return protocol\n\n    url = info_dict['url']\n    if url.startswith('rtmp'):\n        return 'rtmp'\n    elif url.startswith('mms'):\n        return 'mms'\n    elif url.startswith('rtsp'):\n        return 'rtsp'\n\n    ext = determine_ext(url)\n    if ext == 'm3u8':\n        return 'm3u8'\n    elif ext == 'f4m':\n        return 'f4m'\n\n    return compat_urllib_parse_urlparse(url).scheme",
                "def render_table(header_row, data):\n    \"\"\" Render a list of rows, each as a list of values \"\"\"\n    table = [header_row] + data\n    max_lens = [max(len(compat_str(v)) for v in col) for col in zip(*table)]\n    format_str = ' '.join('%-' + compat_str(ml + 1) + 's' for ml in max_lens[:-1]) + '%s'\n    return '\\n'.join(format_str % tuple(row) for row in table)",
                "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<key>[a-z_]+)\n        \\s*(?P<op>%s)(?P<none_inclusive>\\s*\\?)?\\s*\n        (?:\n            (?P<intval>[0-9.]+(?:[kKmMgGtTpPeEzZyY]i?[Bb]?)?)|\n            (?P<strval>(?![0-9.])[a-z0-9A-Z]*)\n        )\n        \\s*$\n        ''' % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = COMPARISON_OPERATORS[m.group('op')]\n        if m.group('strval') is not None:\n            if m.group('op') not in ('=', '!='):\n                raise ValueError(\n                    'Operator %s does not support string values!' % m.group('op'))\n            comparison_value = m.group('strval')\n        else:\n            try:\n                comparison_value = int(m.group('intval'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('intval'))\n                if comparison_value is None:\n                    comparison_value = parse_filesize(m.group('intval') + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (\n                            m.group('intval'), filter_part))\n        actual_value = dct.get(m.group('key'))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    operator_rex = re.compile(r'''(?x)\\s*\n        (?P<op>%s)\\s*(?P<key>[a-z_]+)\n        \\s*$\n        ''' % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        return op(actual_value)\n\n    raise ValueError('Invalid filter part %r' % filter_part)",
                "def match_str(filter_str, dct):\n    \"\"\" Filter a dictionary with a simple string syntax. Returns True (=passes filter) or false \"\"\"\n\n    return all(\n        _match_one(filter_part, dct) for filter_part in filter_str.split('&'))",
                "def match_filter_func(filter_str):\n    def _match_func(info_dict):\n        if match_str(filter_str, info_dict):\n            return None\n        else:\n            video_title = info_dict.get('title', info_dict.get('id', 'video'))\n            return '%s does not pass filter %s, skipping ..' % (video_title, filter_str)\n    return _match_func",
                "def parse_dfxp_time_expr(time_expr):\n    if not time_expr:\n        return 0.0\n\n    mobj = re.match(r'^(?P<time_offset>\\d+(?:\\.\\d+)?)s?$', time_expr)\n    if mobj:\n        return float(mobj.group('time_offset'))\n\n    mobj = re.match(r'^(\\d+):(\\d\\d):(\\d\\d(?:\\.\\d+)?)$', time_expr)\n    if mobj:\n        return 3600 * int(mobj.group(1)) + 60 * int(mobj.group(2)) + float(mobj.group(3))",
                "def srt_subtitles_timecode(seconds):\n    return '%02d:%02d:%02d,%03d' % (seconds / 3600, (seconds % 3600) / 60, seconds % 60, (seconds % 1) * 1000)",
                "def dfxp2srt(dfxp_data):\n    _x = functools.partial(xpath_with_ns, ns_map={\n        'ttml': 'http://www.w3.org/ns/ttml',\n        'ttaf1': 'http://www.w3.org/2006/10/ttaf1',\n    })\n\n    def parse_node(node):\n        str_or_empty = functools.partial(str_or_none, default='')\n\n        out = str_or_empty(node.text)\n\n        for child in node:\n            if child.tag in (_x('ttml:br'), _x('ttaf1:br'), 'br'):\n                out += '\\n' + str_or_empty(child.tail)\n            elif child.tag in (_x('ttml:span'), _x('ttaf1:span'), 'span'):\n                out += str_or_empty(parse_node(child))\n            else:\n                out += str_or_empty(xml.etree.ElementTree.tostring(child))\n\n        return out\n\n    dfxp = xml.etree.ElementTree.fromstring(dfxp_data.encode('utf-8'))\n    out = []\n    paras = dfxp.findall(_x('.//ttml:p')) or dfxp.findall(_x('.//ttaf1:p')) or dfxp.findall('.//p')\n\n    if not paras:\n        raise ValueError('Invalid dfxp/TTML subtitle')\n\n    for para, index in zip(paras, itertools.count(1)):\n        begin_time = parse_dfxp_time_expr(para.attrib['begin'])\n        end_time = parse_dfxp_time_expr(para.attrib.get('end'))\n        if not end_time:\n            end_time = begin_time + parse_dfxp_time_expr(para.attrib['dur'])\n        out.append('%d\\n%s --> %s\\n%s\\n\\n' % (\n            index,\n            srt_subtitles_timecode(begin_time),\n            srt_subtitles_timecode(end_time),\n            parse_node(para)))\n\n    return ''.join(out)",
                "def cli_option(params, command_option, param):\n    param = params.get(param)\n    return [command_option, param] if param is not None else []",
                "def cli_bool_option(params, command_option, param, true_value='true', false_value='false', separator=None):\n    param = params.get(param)\n    assert isinstance(param, bool)\n    if separator:\n        return [command_option + separator + (true_value if param else false_value)]\n    return [command_option, true_value if param else false_value]",
                "def cli_valueless_option(params, command_option, param, expected_value=True):\n    param = params.get(param)\n    return [command_option] if param == expected_value else []",
                "def cli_configuration_args(params, param, default=[]):\n    ex_args = params.get(param)\n    if ex_args is None:\n        return default\n    assert isinstance(ex_args, list)\n    return ex_args",
                "def find_xpath_attr(node, xpath, key, val=None):\n    \"\"\" Find the xpath xpath[@key=val] \"\"\"\n    assert re.match(r'^[a-zA-Z_-]+$', key)\n    if val:\n        assert re.match(r'^[a-zA-Z0-9@\\s:._-]*$', val)\n    expr = xpath + ('[@%s]' % key if val is None else \"[@%s='%s']\" % (key, val))\n    return node.find(expr)",
                "def find_xpath_attr(node, xpath, key, val=None):\n    # Here comes the crazy part: In 2.6, if the xpath is a unicode,\n    # .//node does not match if a node is a direct child of . !\n    if isinstance(xpath, compat_str):\n        xpath = xpath.encode('ascii')\n\n    for f in node.findall(xpath):\n        if key not in f.attrib:\n            continue\n        if val is None or f.attrib.get(key) == val:\n            return f\n    return None",
                "def replace_insane(char):\n    if char == '?' or ord(char) < 32 or ord(char) == 127:\n        return ''\n    elif char == '\"':\n        return '' if restricted else '\\''\n    elif char == ':':\n        return '_-' if restricted else ' -'\n    elif char in '\\\\/|*<>':\n        return '_'\n    if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n        return '_'\n    if restricted and ord(char) > 127:\n        return '_'\n    return char",
                "def __init__(self, msg, tb=None, expected=False, cause=None, video_id=None):\n    \"\"\" tb, if given, is the original traceback (so that it can be printed out).\n    If expected is set, this is a normal error message and most likely not a bug in youtube-dl.\n    \"\"\"\n\n    if sys.exc_info()[0] in (compat_urllib_error.URLError, socket.timeout, UnavailableVideoError):\n        expected = True\n    if video_id is not None:\n        msg = video_id + ': ' + msg\n    if cause:\n        msg += ' (caused by %r)' % cause\n    if not expected:\n        msg += bug_reports_message()\n    super(ExtractorError, self).__init__(msg)\n\n    self.traceback = tb\n    self.exc_info = sys.exc_info()  # preserve original exception\n    self.cause = cause\n    self.video_id = video_id",
                "def format_traceback(self):\n    if self.traceback is None:\n        return None\n    return ''.join(traceback.format_tb(self.traceback))",
                "def __init__(self, url):\n    super(UnsupportedError, self).__init__(\n        'Unsupported URL: %s' % url, expected=True)\n    self.url = url",
                "def __init__(self, msg, exc_info=None):\n    \"\"\" exc_info, if given, is the original exception that caused the trouble (as returned by sys.exc_info()). \"\"\"\n    super(DownloadError, self).__init__(msg)\n    self.exc_info = exc_info",
                "def __init__(self, msg):\n    self.msg = msg",
                "def __init__(self, downloaded, expected):\n    # Both in bytes\n    self.downloaded = downloaded\n    self.expected = expected",
                "def __init__(self, params, *args, **kwargs):\n    compat_urllib_request.HTTPHandler.__init__(self, *args, **kwargs)\n    self._params = params",
                "def http_open(self, req):\n    return self.do_open(functools.partial(\n        _create_http_connection, self, compat_http_client.HTTPConnection, False),\n        req)",
                "@staticmethod\ndef deflate(data):\n    try:\n        return zlib.decompress(data, -zlib.MAX_WBITS)\n    except zlib.error:\n        return zlib.decompress(data)",
                "@staticmethod\ndef addinfourl_wrapper(stream, headers, url, code):\n    if hasattr(compat_urllib_request.addinfourl, 'getcode'):\n        return compat_urllib_request.addinfourl(stream, headers, url, code)\n    ret = compat_urllib_request.addinfourl(stream, headers, url)\n    ret.code = code\n    return ret",
                "def http_request(self, req):\n    # According to RFC 3986, URLs can not contain non-ASCII characters, however this is not\n    # always respected by websites, some tend to give out URLs with non percent-encoded\n    # non-ASCII characters (see telemb.py, ard.py [#3412])\n    # urllib chokes on URLs with non-ASCII characters (see http://bugs.python.org/issue3991)\n    # To work around aforementioned issue we will replace request's original URL with\n    # percent-encoded one\n    # Since redirects are also affected (e.g. http://www.southpark.de/alle-episoden/s18e09)\n    # the code of this workaround has been moved here from YoutubeDL.urlopen()\n    url = req.get_full_url()\n    url_escaped = escape_url(url)\n\n    # Substitute URL if any change after escaping\n    if url != url_escaped:\n        req_type = HEADRequest if req.get_method() == 'HEAD' else compat_urllib_request.Request\n        new_req = req_type(\n            url_escaped, data=req.data, headers=req.headers,\n            origin_req_host=req.origin_req_host, unverifiable=req.unverifiable)\n        new_req.timeout = req.timeout\n        req = new_req\n\n    for h, v in std_headers.items():\n        # Capitalize is needed because of Python bug 2275: http://bugs.python.org/issue2275\n        # The dict keys are capitalized because of this bug by urllib\n        if h.capitalize() not in req.headers:\n            req.add_header(h, v)\n    if 'Youtubedl-no-compression' in req.headers:\n        if 'Accept-encoding' in req.headers:\n            del req.headers['Accept-encoding']\n        del req.headers['Youtubedl-no-compression']\n\n    if sys.version_info < (2, 7) and '#' in req.get_full_url():\n        # Python 2.6 is brain-dead when it comes to fragments\n        req._Request__original = req._Request__original.partition('#')[0]\n        req._Request__r_type = req._Request__r_type.partition('#')[0]\n\n    return req",
                "def http_response(self, req, resp):\n    old_resp = resp\n    # gzip\n    if resp.headers.get('Content-encoding', '') == 'gzip':\n        content = resp.read()\n        gz = gzip.GzipFile(fileobj=io.BytesIO(content), mode='rb')\n        try:\n            uncompressed = io.BytesIO(gz.read())\n        except IOError as original_ioerror:\n            # There may be junk add the end of the file\n            # See http://stackoverflow.com/q/4928560/35070 for details\n            for i in range(1, 1024):\n                try:\n                    gz = gzip.GzipFile(fileobj=io.BytesIO(content[:-i]), mode='rb')\n                    uncompressed = io.BytesIO(gz.read())\n                except IOError:\n                    continue\n                break\n            else:\n                raise original_ioerror\n        resp = self.addinfourl_wrapper(uncompressed, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    # deflate\n    if resp.headers.get('Content-encoding', '') == 'deflate':\n        gz = io.BytesIO(self.deflate(resp.read()))\n        resp = self.addinfourl_wrapper(gz, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    # Percent-encode redirect URL of Location HTTP header to satisfy RFC 3986 (see\n    # https://github.com/rg3/youtube-dl/issues/6457).\n    if 300 <= resp.code < 400:\n        location = resp.headers.get('Location')\n        if location:\n            # As of RFC 2616 default charset is iso-8859-1 that is respected by python 3\n            if sys.version_info >= (3, 0):\n                location = location.encode('iso-8859-1').decode('utf-8')\n            location_escaped = escape_url(location)\n            if location != location_escaped:\n                del resp.headers['Location']\n                resp.headers['Location'] = location_escaped\n    return resp",
                "def __init__(self, params, https_conn_class=None, *args, **kwargs):\n    compat_urllib_request.HTTPSHandler.__init__(self, *args, **kwargs)\n    self._https_conn_class = https_conn_class or compat_http_client.HTTPSConnection\n    self._params = params",
                "def https_open(self, req):\n    kwargs = {}\n    if hasattr(self, '_context'):  # python > 2.6\n        kwargs['context'] = self._context\n    if hasattr(self, '_check_hostname'):  # python 3.x\n        kwargs['check_hostname'] = self._check_hostname\n    return self.do_open(functools.partial(\n        _create_http_connection, self, self._https_conn_class, True),\n        req, **kwargs)",
                "def __init__(self, cookiejar=None):\n    compat_urllib_request.HTTPCookieProcessor.__init__(self, cookiejar)",
                "def http_response(self, request, response):\n    # Python 2 will choke on next HTTP request in row if there are non-ASCII\n    # characters in Set-Cookie HTTP header of last response (see\n    # https://github.com/rg3/youtube-dl/issues/6769).\n    # In order to at least prevent crashing we will percent encode Set-Cookie\n    # header before HTTPCookieProcessor starts processing it.\n    # if sys.version_info < (3, 0) and response.headers:\n    #     for set_cookie_header in ('Set-Cookie', 'Set-Cookie2'):\n    #         set_cookie = response.headers.get(set_cookie_header)\n    #         if set_cookie:\n    #             set_cookie_escaped = compat_urllib_parse.quote(set_cookie, b\"%/;:@&=+$,!~*'()?#[] \")\n    #             if set_cookie != set_cookie_escaped:\n    #                 del response.headers[set_cookie_header]\n    #                 response.headers[set_cookie_header] = set_cookie_escaped\n    return compat_urllib_request.HTTPCookieProcessor.http_response(self, request, response)",
                "def __init__(self, start=None, end=None):\n    \"\"\"start and end must be strings in the format accepted by date\"\"\"\n    if start is not None:\n        self.start = date_from_str(start)\n    else:\n        self.start = datetime.datetime.min.date()\n    if end is not None:\n        self.end = date_from_str(end)\n    else:\n        self.end = datetime.datetime.max.date()\n    if self.start > self.end:\n        raise ValueError('Date range: \"%s\" , the start date must be before the end date' % self)",
                "@classmethod\ndef day(cls, day):\n    \"\"\"Returns a range that only contains the given day\"\"\"\n    return cls(day, day)",
                "def __contains__(self, date):\n    \"\"\"Check if the date is in the range\"\"\"\n    if not isinstance(date, datetime.date):\n        date = date_from_str(date)\n    return self.start <= date <= self.end",
                "def __str__(self):\n    return '%s - %s' % (self.start.isoformat(), self.end.isoformat())",
                "def not_a_console(handle):\n    if handle == INVALID_HANDLE_VALUE or handle is None:\n        return True\n    return ((GetFileType(handle) & ~FILE_TYPE_REMOTE) != FILE_TYPE_CHAR or\n            GetConsoleMode(handle, ctypes.byref(ctypes.wintypes.DWORD())) == 0)",
                "def next_nonbmp_pos(s):\n    try:\n        return next(i for i, c in enumerate(s) if ord(c) > 0xffff)\n    except StopIteration:\n        return len(s)",
                "def _lock_file(f, exclusive):\n    overlapped = OVERLAPPED()\n    overlapped.Offset = 0\n    overlapped.OffsetHigh = 0\n    overlapped.hEvent = 0\n    f._lock_file_overlapped_p = ctypes.pointer(overlapped)\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not LockFileEx(handle, 0x2 if exclusive else 0x0, 0,\n                      whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Locking file failed: %r' % ctypes.FormatError())",
                "def _unlock_file(f):\n    assert f._lock_file_overlapped_p\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not UnlockFileEx(handle, 0,\n                        whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Unlocking file failed: %r' % ctypes.FormatError())",
                "def _lock_file(f, exclusive):\n    fcntl.flock(f, fcntl.LOCK_EX if exclusive else fcntl.LOCK_SH)",
                "def _unlock_file(f):\n    fcntl.flock(f, fcntl.LOCK_UN)",
                "def __init__(self, filename, mode, encoding=None):\n    assert mode in ['r', 'a', 'w']\n    self.f = io.open(filename, mode, encoding=encoding)\n    self.mode = mode",
                "def __enter__(self):\n    exclusive = self.mode != 'r'\n    try:\n        _lock_file(self.f, exclusive)\n    except IOError:\n        self.f.close()\n        raise\n    return self",
                "def __exit__(self, etype, value, traceback):\n    try:\n        _unlock_file(self.f)\n    finally:\n        self.f.close()",
                "def __iter__(self):\n    return iter(self.f)",
                "def write(self, *args):\n    return self.f.write(*args)",
                "def read(self, *args):\n    return self.f.read(*args)",
                "def get_method(self):\n    return \"HEAD\"",
                "def __len__(self):\n    # This is only useful for tests\n    return len(self.getslice())",
                "def __init__(self, pagefunc, pagesize):\n    self._pagefunc = pagefunc\n    self._pagesize = pagesize",
                "def getslice(self, start=0, end=None):\n    res = []\n    for pagenum in itertools.count(start // self._pagesize):\n        firstid = pagenum * self._pagesize\n        nextfirstid = pagenum * self._pagesize + self._pagesize\n        if start >= nextfirstid:\n            continue\n\n        page_results = list(self._pagefunc(pagenum))\n\n        startv = (\n            start % self._pagesize\n            if firstid <= start < nextfirstid\n            else 0)\n\n        endv = (\n            ((end - 1) % self._pagesize) + 1\n            if (end is not None and firstid <= end <= nextfirstid)\n            else None)\n\n        if startv != 0 or endv is not None:\n            page_results = page_results[startv:endv]\n        res.extend(page_results)\n\n        # A little optimization - if current page is not \"full\", ie. does\n        # not contain page_size videos then we can assume that this page\n        # is the last one - there are no more ids on further pages -\n        # i.e. no need to query again.\n        if len(page_results) + startv < self._pagesize:\n            break\n\n        # If we got the whole page, but the next page is not interesting,\n        # break out early as well\n        if end == nextfirstid:\n            break\n    return res",
                "def __init__(self, pagefunc, pagecount, pagesize):\n    self._pagefunc = pagefunc\n    self._pagecount = pagecount\n    self._pagesize = pagesize",
                "def getslice(self, start=0, end=None):\n    res = []\n    start_page = start // self._pagesize\n    end_page = (\n        self._pagecount if end is None else (end // self._pagesize + 1))\n    skip_elems = start - start_page * self._pagesize\n    only_more = None if end is None else end - start\n    for pagenum in range(start_page, end_page):\n        page = list(self._pagefunc(pagenum))\n        if skip_elems:\n            page = page[skip_elems:]\n            skip_elems = None\n        if only_more is not None:\n            if len(page) < only_more:\n                only_more -= len(page)\n            else:\n                page = page[:only_more]\n                res.extend(page)\n                break\n        res.extend(page)\n    return res",
                "def fixup(url):\n    if not isinstance(url, compat_str):\n        url = url.decode('utf-8', 'replace')\n    BOM_UTF8 = '\\xef\\xbb\\xbf'\n    if url.startswith(BOM_UTF8):\n        url = url[len(BOM_UTF8):]\n    url = url.strip()\n    if url.startswith(('#', ';', ']')):\n        return False\n    return url",
                "def fix_kv(m):\n    v = m.group(0)\n    if v in ('true', 'false', 'null'):\n        return v\n    if v.startswith('\"'):\n        return v\n    if v.startswith(\"'\"):\n        v = v[1:-1]\n        v = re.sub(r\"\\\\\\\\|\\\\'|\\\"\", lambda m: {\n            '\\\\\\\\': '\\\\\\\\',\n            \"\\\\'\": \"'\",\n            '\"': '\\\\\"',\n        }[m.group(0)], v)\n    return '\"%s\"' % v",
                "def q(qid):\n    try:\n        return quality_ids.index(qid)\n    except ValueError:\n        return -1",
                "def _match_func(info_dict):\n    if match_str(filter_str, info_dict):\n        return None\n    else:\n        video_title = info_dict.get('title', info_dict.get('id', 'video'))\n        return '%s does not pass filter %s, skipping ..' % (video_title, filter_str)",
                "def parse_node(node):\n    str_or_empty = functools.partial(str_or_none, default='')\n\n    out = str_or_empty(node.text)\n\n    for child in node:\n        if child.tag in (_x('ttml:br'), _x('ttaf1:br'), 'br'):\n            out += '\\n' + str_or_empty(child.tail)\n        elif child.tag in (_x('ttml:span'), _x('ttaf1:span'), 'span'):\n            out += str_or_empty(parse_node(child))\n        else:\n            out += str_or_empty(xml.etree.ElementTree.tostring(child))\n\n    return out",
                "@classmethod\ndef short2long(cls, code):\n    \"\"\"Convert language code from ISO 639-1 to ISO 639-2/T\"\"\"\n    return cls._lang_map.get(code[:2])",
                "@classmethod\ndef long2short(cls, code):\n    \"\"\"Convert language code from ISO 639-2/T to ISO 639-1\"\"\"\n    for short_name, long_name in cls._lang_map.items():\n        if long_name == code:\n            return short_name",
                "@classmethod\ndef short2full(cls, code):\n    \"\"\"Convert an ISO 3166-2 country code to the corresponding full name\"\"\"\n    return cls._country_map.get(code.upper())",
                "def __init__(self, proxies=None):\n    # Set default handlers\n    for type in ('http', 'https'):\n        setattr(self, '%s_open' % type,\n                lambda r, proxy='__noproxy__', type=type, meth=self.proxy_open:\n                    meth(r, proxy, type))\n    return compat_urllib_request.ProxyHandler.__init__(self, proxies)",
                "def proxy_open(self, req, proxy, type):\n    req_proxy = req.headers.get('Ytdl-request-proxy')\n    if req_proxy is not None:\n        proxy = req_proxy\n        del req.headers['Ytdl-request-proxy']\n\n    if proxy == '__noproxy__':\n        return None  # No Proxy\n    return compat_urllib_request.ProxyHandler.proxy_open(\n        self, req, proxy, type)",
                "def struct_pack(spec, *args):\n    if isinstance(spec, compat_str):\n        spec = spec.encode('ascii')\n    return struct.pack(spec, *args)",
                "def struct_unpack(spec, *args):\n    if isinstance(spec, compat_str):\n        spec = spec.encode('ascii')\n    return struct.unpack(spec, *args)",
                "def doctype(self, name, pubid, system):\n    pass  # Ignore doctypes",
                "def _hc_connect(self, *args, **kwargs):\n    sock = compat_socket_create_connection(\n        (self.host, self.port), self.timeout, sa)\n    if is_https:\n        self.sock = ssl.wrap_socket(\n            sock, self.key_file, self.cert_file,\n            ssl_version=ssl.PROTOCOL_TLSv1)\n    else:\n        self.sock = sock"
            ],
            "inscope_function_signatures": [
                "preferredencoding()",
                "write_json_file(obj, fn)",
                "xpath_with_ns(path, ns_map)",
                "xpath_element(node, xpath, name=None, fatal=False, default=NO_DEFAULT)",
                "xpath_text(node, xpath, name=None, fatal=False, default=NO_DEFAULT)",
                "xpath_attr(node, xpath, key, name=None, fatal=False, default=NO_DEFAULT)",
                "get_element_by_id(id, html)",
                "get_element_by_attribute(attribute, value, html)",
                "clean_html(html)",
                "sanitize_open(filename, open_mode)",
                "timeconvert(timestr)",
                "sanitize_filename(s, restricted=False, is_id=False)",
                "sanitize_path(s)",
                "orderedSet(iterable)",
                "_htmlentity_transform(entity)",
                "unescapeHTML(s)",
                "get_subprocess_encoding()",
                "encodeFilename(s, for_subprocess=False)",
                "decodeFilename(b, for_subprocess=False)",
                "encodeArgument(s)",
                "decodeArgument(b)",
                "decodeOption(optval)",
                "formatSeconds(secs)",
                "make_HTTPS_handler(params, **kwargs)",
                "bug_reports_message()",
                "_create_http_connection(ydl_handler, http_class, is_https, *args, **kwargs)",
                "parse_iso8601(date_str, delimiter='T', timezone=None)",
                "unified_strdate(date_str, day_first=True)",
                "determine_ext(url, default_ext='unknown_video')",
                "subtitles_filename(filename, sub_lang, sub_format)",
                "date_from_str(date_str)",
                "hyphenate_date(date_str)",
                "platform_name()",
                "_windows_write_string(s, out)",
                "write_string(s, out=None, encoding=None)",
                "bytes_to_intlist(bs)",
                "intlist_to_bytes(xs)",
                "get_filesystem_encoding()",
                "shell_quote(args)",
                "smuggle_url(url, data)",
                "unsmuggle_url(smug_url, default=None)",
                "format_bytes(bytes)",
                "parse_filesize(s)",
                "month_by_name(name)",
                "month_by_abbreviation(abbrev)",
                "fix_xml_ampersands(xml_str)",
                "setproctitle(title)",
                "remove_start(s, start)",
                "remove_end(s, end)",
                "url_basename(url)",
                "int_or_none(v, scale=1, default=None, get_attr=None, invscale=1)",
                "str_or_none(v, default=None)",
                "str_to_int(int_str)",
                "float_or_none(v, scale=1, invscale=1, default=None)",
                "parse_duration(s)",
                "prepend_extension(filename, ext, expected_real_ext=None)",
                "replace_extension(filename, ext, expected_real_ext=None)",
                "check_executable(exe, args=[])",
                "get_exe_version(exe, args=['--version'], version_re=None, unrecognized='present')",
                "detect_exe_version(output, version_re=None, unrecognized='present')",
                "uppercase_escape(s)",
                "lowercase_escape(s)",
                "escape_rfc3986(s)",
                "escape_url(url)",
                "read_batch_urls(batch_fd)",
                "urlencode_postdata(*args, **kargs)",
                "encode_dict(d, encoding='utf-8')",
                "parse_xml(s)",
                "parse_age_limit(s)",
                "strip_jsonp(code)",
                "js_to_json(code)",
                "qualities(quality_ids)",
                "limit_length(s, length)",
                "version_tuple(v)",
                "is_outdated_version(version, limit, assume_new=True)",
                "ytdl_is_updateable()",
                "args_to_str(args)",
                "mimetype2ext(mt)",
                "urlhandle_detect_ext(url_handle)",
                "encode_data_uri(data, mime_type)",
                "age_restricted(content_limit, age_limit)",
                "is_html(first_bytes)",
                "determine_protocol(info_dict)",
                "render_table(header_row, data)",
                "_match_one(filter_part, dct)",
                "match_str(filter_str, dct)",
                "match_filter_func(filter_str)",
                "parse_dfxp_time_expr(time_expr)",
                "srt_subtitles_timecode(seconds)",
                "dfxp2srt(dfxp_data)",
                "cli_option(params, command_option, param)",
                "cli_bool_option(params, command_option, param, true_value='true', false_value='false', separator=None)",
                "cli_valueless_option(params, command_option, param, expected_value=True)",
                "cli_configuration_args(params, param, default=[])",
                "find_xpath_attr(node, xpath, key, val=None)",
                "find_xpath_attr(node, xpath, key, val=None)",
                "replace_insane(char)",
                "__init__(self, msg, tb=None, expected=False, cause=None, video_id=None)",
                "format_traceback(self)",
                "__init__(self, url)",
                "__init__(self, msg, exc_info=None)",
                "__init__(self, msg)",
                "__init__(self, downloaded, expected)",
                "__init__(self, params, *args, **kwargs)",
                "http_open(self, req)",
                "deflate(data)",
                "addinfourl_wrapper(stream, headers, url, code)",
                "http_request(self, req)",
                "http_response(self, req, resp)",
                "__init__(self, params, https_conn_class=None, *args, **kwargs)",
                "https_open(self, req)",
                "__init__(self, cookiejar=None)",
                "http_response(self, request, response)",
                "__init__(self, start=None, end=None)",
                "day(cls, day)",
                "__contains__(self, date)",
                "__str__(self)",
                "not_a_console(handle)",
                "next_nonbmp_pos(s)",
                "_lock_file(f, exclusive)",
                "_unlock_file(f)",
                "_lock_file(f, exclusive)",
                "_unlock_file(f)",
                "__init__(self, filename, mode, encoding=None)",
                "__enter__(self)",
                "__exit__(self, etype, value, traceback)",
                "__iter__(self)",
                "write(self, *args)",
                "read(self, *args)",
                "get_method(self)",
                "__len__(self)",
                "__init__(self, pagefunc, pagesize)",
                "getslice(self, start=0, end=None)",
                "__init__(self, pagefunc, pagecount, pagesize)",
                "getslice(self, start=0, end=None)",
                "fixup(url)",
                "fix_kv(m)",
                "q(qid)",
                "_match_func(info_dict)",
                "parse_node(node)",
                "short2long(cls, code)",
                "long2short(cls, code)",
                "short2full(cls, code)",
                "__init__(self, proxies=None)",
                "proxy_open(self, req, proxy, type)",
                "struct_pack(spec, *args)",
                "struct_unpack(spec, *args)",
                "doctype(self, name, pubid, system)",
                "_hc_connect(self, *args, **kwargs)"
            ],
            "variables_in_file": {
                "compiled_regex_type": [
                    55
                ],
                "type": [
                    421,
                    2504,
                    398,
                    1074,
                    55,
                    1240,
                    2489,
                    2490,
                    2491,
                    2492
                ],
                "re.compile": [
                    1872,
                    1909,
                    55
                ],
                "re": [
                    1410,
                    260,
                    261,
                    263,
                    906,
                    1294,
                    1295,
                    400,
                    145,
                    147,
                    1943,
                    1689,
                    1947,
                    925,
                    1694,
                    1830,
                    1707,
                    1581,
                    1326,
                    818,
                    1714,
                    948,
                    1589,
                    55,
                    1719,
                    331,
                    846,
                    847,
                    1872,
                    849,
                    1747,
                    1494,
                    1880,
                    359,
                    232,
                    1391,
                    240,
                    1909,
                    1912,
                    381,
                    1790
                ],
                "std_headers": [
                    57,
                    708
                ],
                "NO_DEFAULT": [
                    66,
                    196,
                    201,
                    211,
                    180,
                    214,
                    186
                ],
                "object": [
                    66,
                    2024,
                    2226,
                    1173,
                    955,
                    1501
                ],
                "ENGLISH_MONTH_NAMES": [
                    68,
                    1309,
                    1319
                ],
                "pref": [
                    80,
                    81,
                    83,
                    85
                ],
                "locale.getpreferredencoding": [
                    80
                ],
                "locale": [
                    80
                ],
                "encode": [
                    81,
                    1647
                ],
                "Exception": [
                    515,
                    579,
                    134,
                    556,
                    590,
                    82,
                    595,
                    570,
                    604
                ],
                "fn": [
                    97,
                    130,
                    99,
                    133,
                    106,
                    107,
                    91
                ],
                "encodeFilename": [
                    453,
                    297,
                    91,
                    285
                ],
                "sys.version_info": [
                    353,
                    1666,
                    1669,
                    424,
                    493,
                    142,
                    622,
                    718,
                    113,
                    181,
                    438,
                    758,
                    1081,
                    92,
                    1597
                ],
                "sys": [
                    1666,
                    1669,
                    523,
                    142,
                    405,
                    534,
                    281,
                    410,
                    283,
                    284,
                    424,
                    430,
                    1073,
                    1076,
                    181,
                    438,
                    1205,
                    1081,
                    1597,
                    718,
                    1109,
                    92,
                    350,
                    353,
                    1763,
                    493,
                    622,
                    113,
                    758,
                    126
                ],
                "sys.platform": [
                    350,
                    430,
                    1076,
                    405,
                    1109,
                    281,
                    92,
                    126
                ],
                "encoding": [
                    97,
                    99,
                    1082,
                    1211,
                    1085,
                    1076,
                    1176,
                    1205,
                    1206,
                    408,
                    1651,
                    410,
                    411,
                    412,
                    93,
                    413,
                    1215
                ],
                "get_filesystem_encoding": [
                    1211,
                    93
                ],
                "path_basename": [
                    97,
                    106,
                    101
                ],
                "decode": [
                    97,
                    1825,
                    99,
                    1800,
                    759
                ],
                "os.path.basename": [
                    97,
                    101
                ],
                "os.path": [
                    352,
                    97,
                    354,
                    99,
                    355,
                    101,
                    102,
                    362,
                    363,
                    1451,
                    1459
                ],
                "os": [
                    352,
                    97,
                    130,
                    99,
                    354,
                    101,
                    102,
                    133,
                    136,
                    355,
                    362,
                    363,
                    1451,
                    1459,
                    283
                ],
                "path_dirname": [
                    107,
                    99,
                    102
                ],
                "os.path.dirname": [
                    99,
                    102
                ],
                "args": [
                    772,
                    104,
                    1481,
                    1768,
                    1624,
                    1198,
                    1647,
                    624,
                    1201,
                    114,
                    1619,
                    116,
                    664,
                    121,
                    1212,
                    1469
                ],
                "args.update": [
                    116
                ],
                "tf": [
                    133,
                    136,
                    121,
                    124,
                    125
                ],
                "tempfile.NamedTemporaryFile": [
                    121
                ],
                "tempfile": [
                    121
                ],
                "compat_kwargs": [
                    121
                ],
                "json.dump": [
                    125
                ],
                "json": [
                    1224,
                    1233,
                    125
                ],
                "obj": [
                    125
                ],
                "os.unlink": [
                    130
                ],
                "OSError": [
                    1154,
                    131,
                    1061,
                    137,
                    1161,
                    1483,
                    1336,
                    1470,
                    287
                ],
                "os.rename": [
                    133
                ],
                "tf.name": [
                    136,
                    133
                ],
                "os.remove": [
                    136
                ],
                "re.match": [
                    1410,
                    1830,
                    906,
                    846,
                    925,
                    1295,
                    145,
                    147,
                    948,
                    1943,
                    1689,
                    1947,
                    381,
                    1790
                ],
                "key": [
                    160,
                    145,
                    212,
                    148,
                    217,
                    221,
                    158
                ],
                "val": [
                    160,
                    146,
                    147,
                    148
                ],
                "expr": [
                    148,
                    149
                ],
                "xpath": [
                    197,
                    204,
                    148,
                    212,
                    182,
                    189,
                    184,
                    217,
                    154,
                    155,
                    157
                ],
                "node.find": [
                    184,
                    149
                ],
                "node": [
                    197,
                    1965,
                    1967,
                    212,
                    149,
                    184,
                    157
                ],
                "isinstance": [
                    1672,
                    154,
                    1333,
                    441,
                    1597,
                    1213,
                    448,
                    1096,
                    1485,
                    463,
                    1617,
                    466,
                    978,
                    1491,
                    2005,
                    1622,
                    989,
                    992,
                    1632,
                    1763,
                    2020,
                    1405
                ],
                "compat_str": [
                    448,
                    992,
                    1632,
                    1858,
                    1859,
                    421,
                    1384,
                    1672,
                    398,
                    1617,
                    466,
                    1074,
                    1491,
                    1333,
                    1622,
                    154,
                    1597
                ],
                "xpath.encode": [
                    155,
                    182
                ],
                "f": [
                    160,
                    161,
                    1153,
                    1157,
                    1158,
                    1160,
                    1167,
                    1170,
                    158,
                    157,
                    1150,
                    1151
                ],
                "node.findall": [
                    157
                ],
                "f.attrib": [
                    160,
                    158
                ],
                "f.attrib.get": [
                    160
                ],
                "components": [
                    169,
                    171
                ],
                "c.split": [
                    169
                ],
                "c": [
                    169,
                    171,
                    172,
                    173,
                    1099,
                    175,
                    1051
                ],
                "path.split": [
                    169
                ],
                "path": [
                    1360,
                    169,
                    1361
                ],
                "replaced": [
                    176,
                    177,
                    170,
                    173
                ],
                "len": [
                    1504,
                    1569,
                    1570,
                    1825,
                    1540,
                    1349,
                    1636,
                    1858,
                    1355,
                    172,
                    1741,
                    1742,
                    1105,
                    341,
                    824,
                    1339,
                    1053
                ],
                "replaced.append": [
                    176,
                    173
                ],
                "ns": [
                    176,
                    175
                ],
                "tag": [
                    176,
                    175
                ],
                "ns_map": [
                    176
                ],
                "join": [
                    1217,
                    1859,
                    1860,
                    1768,
                    1995,
                    332,
                    1294,
                    177,
                    1912,
                    950,
                    1880,
                    541
                ],
                "n": [
                    193,
                    197,
                    198,
                    199,
                    200,
                    1670,
                    1671,
                    1672,
                    1673,
                    208,
                    1657,
                    212,
                    213,
                    184,
                    185,
                    221
                ],
                "default": [
                    1376,
                    2019,
                    1380,
                    197,
                    198,
                    1384,
                    201,
                    202,
                    1230,
                    1397,
                    214,
                    215,
                    1401,
                    186,
                    187
                ],
                "fatal": [
                    216,
                    203,
                    188,
                    197
                ],
                "name": [
                    1309,
                    197,
                    1451,
                    204,
                    205,
                    1453,
                    1459,
                    1461,
                    217,
                    218,
                    189,
                    190
                ],
                "ExtractorError": [
                    544,
                    551,
                    205,
                    531,
                    218,
                    190
                ],
                "xpath_element": [
                    197
                ],
                "n.text": [
                    1671,
                    200,
                    1673,
                    1672,
                    208
                ],
                "find_xpath_attr": [
                    212
                ],
                "n.attrib": [
                    221
                ],
                "get_element_by_attribute": [
                    226
                ],
                "id": [
                    226
                ],
                "html": [
                    256,
                    226,
                    259,
                    260,
                    261,
                    263,
                    265,
                    266,
                    240,
                    255
                ],
                "m": [
                    1792,
                    1410,
                    1295,
                    401,
                    1297,
                    1426,
                    1300,
                    1301,
                    1429,
                    1430,
                    1431,
                    1432,
                    1433,
                    1434,
                    1435,
                    1436,
                    1437,
                    1438,
                    1439,
                    1440,
                    1441,
                    1442,
                    1443,
                    1444,
                    1445,
                    1446,
                    1700,
                    1583,
                    1711,
                    818,
                    1689,
                    821,
                    1591,
                    824,
                    825,
                    1690,
                    1719,
                    828,
                    830,
                    831,
                    331,
                    1494,
                    1495,
                    1496,
                    1881,
                    1882,
                    1883,
                    1884,
                    1885,
                    1887,
                    1888,
                    1891,
                    1893,
                    1895,
                    232,
                    1899,
                    1900,
                    1902,
                    242,
                    244,
                    1913,
                    1914,
                    1915,
                    1916,
                    1790,
                    1791
                ],
                "re.search": [
                    232,
                    818,
                    1494
                ],
                "re.escape": [
                    240,
                    1880,
                    1912,
                    1294
                ],
                "attribute": [
                    240
                ],
                "value": [
                    240,
                    1038
                ],
                "res": [
                    1547,
                    1428,
                    1557,
                    1434,
                    1436,
                    1438,
                    1440,
                    1442,
                    1444,
                    1573,
                    1446,
                    1447,
                    1575,
                    1576,
                    1714,
                    1719,
                    1720,
                    988,
                    989,
                    990,
                    992,
                    993,
                    1513,
                    1772,
                    368,
                    370,
                    371,
                    244,
                    372,
                    246,
                    247,
                    1778,
                    249,
                    1534
                ],
                "m.group": [
                    1792,
                    401,
                    1300,
                    1301,
                    1429,
                    1431,
                    1432,
                    1433,
                    1434,
                    1430,
                    1436,
                    1435,
                    1437,
                    1438,
                    1439,
                    1440,
                    1441,
                    1442,
                    1443,
                    1444,
                    1445,
                    1446,
                    1700,
                    1583,
                    1711,
                    1591,
                    824,
                    825,
                    1690,
                    1719,
                    828,
                    830,
                    831,
                    331,
                    1496,
                    1883,
                    1884,
                    1885,
                    1887,
                    1888,
                    1891,
                    1893,
                    1895,
                    1899,
                    1900,
                    1902,
                    244,
                    1915,
                    1916
                ],
                "res.startswith": [
                    246
                ],
                "unescapeHTML": [
                    249,
                    265
                ],
                "html.replace": [
                    259
                ],
                "re.sub": [
                    260,
                    261,
                    359,
                    263,
                    331,
                    1707,
                    1581,
                    1326,
                    847,
                    400,
                    849,
                    1391,
                    1714,
                    1589,
                    1719,
                    1694
                ],
                "html.strip": [
                    266
                ],
                "filename": [
                    292,
                    293,
                    1451,
                    1455,
                    913,
                    1176,
                    1459,
                    1461,
                    280,
                    284,
                    285,
                    286
                ],
                "msvcrt.setmode": [
                    283
                ],
                "msvcrt": [
                    283,
                    1158,
                    1151
                ],
                "sys.stdout.fileno": [
                    283
                ],
                "sys.stdout": [
                    283,
                    284
                ],
                "os.O_BINARY": [
                    283
                ],
                "hasattr": [
                    481,
                    1763,
                    681,
                    778,
                    780,
                    1084,
                    628,
                    1076,
                    284
                ],
                "sys.stdout.buffer": [
                    284
                ],
                "stream": [
                    297,
                    682,
                    298,
                    683,
                    285,
                    286
                ],
                "open": [
                    297,
                    285
                ],
                "open_mode": [
                    297,
                    285
                ],
                "IOError": [
                    1183,
                    740,
                    733,
                    287
                ],
                "err.errno": [
                    288
                ],
                "err": [
                    288
                ],
                "errno.EACCES": [
                    288
                ],
                "errno": [
                    288
                ],
                "alt_filename": [
                    297,
                    298,
                    292,
                    293
                ],
                "sanitize_path": [
                    292
                ],
                "timestamp": [
                    306,
                    307,
                    303
                ],
                "timetuple": [
                    896,
                    897,
                    898,
                    304,
                    305,
                    306
                ],
                "email.utils.parsedate_tz": [
                    304,
                    896
                ],
                "email.utils": [
                    304,
                    306,
                    896
                ],
                "email": [
                    304,
                    306,
                    896
                ],
                "timestr": [
                    304
                ],
                "email.utils.mktime_tz": [
                    306
                ],
                "char": [
                    320,
                    322,
                    324,
                    326,
                    328,
                    316,
                    318
                ],
                "ord": [
                    1099,
                    1051,
                    316,
                    326
                ],
                "restricted": [
                    321,
                    324,
                    326,
                    338,
                    319
                ],
                "char.isspace": [
                    324
                ],
                "s": [
                    1408,
                    1667,
                    396,
                    398,
                    1296,
                    401,
                    1425,
                    1687,
                    1689,
                    1690,
                    1051,
                    1053,
                    1055,
                    1056,
                    1825,
                    1059,
                    1828,
                    421,
                    1830,
                    1319,
                    1064,
                    425,
                    1067,
                    431,
                    1584,
                    433,
                    1074,
                    1077,
                    1592,
                    1082,
                    1597,
                    1086,
                    1598,
                    448,
                    1089,
                    1599,
                    452,
                    453,
                    1348,
                    1349,
                    1350,
                    1354,
                    331,
                    332,
                    1355,
                    1356,
                    1738,
                    1741,
                    1742,
                    1743,
                    351,
                    352,
                    354,
                    355,
                    1252,
                    1405
                ],
                "replace": [
                    331,
                    1300
                ],
                "result": [
                    332,
                    334,
                    335,
                    336,
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    344,
                    345
                ],
                "map": [
                    1880,
                    1643,
                    332,
                    1912
                ],
                "replace_insane": [
                    332
                ],
                "is_id": [
                    333
                ],
                "result.replace": [
                    335
                ],
                "result.strip": [
                    336
                ],
                "result.startswith": [
                    338,
                    340
                ],
                "result.lstrip": [
                    342
                ],
                "drive_or_unc": [
                    352,
                    353,
                    354,
                    355,
                    356,
                    361,
                    362
                ],
                "_": [
                    352,
                    354,
                    1480,
                    1772,
                    1231
                ],
                "os.path.splitdrive": [
                    352
                ],
                "os.path.splitunc": [
                    354
                ],
                "norm_path": [
                    360,
                    355,
                    357
                ],
                "split": [
                    1361,
                    355
                ],
                "os.path.normpath": [
                    355
                ],
                "remove_start": [
                    355
                ],
                "os.path.sep": [
                    362,
                    355
                ],
                "norm_path.pop": [
                    357
                ],
                "sanitized_path": [
                    362,
                    363,
                    358
                ],
                "path_part": [
                    360,
                    359
                ],
                "sanitized_path.insert": [
                    362
                ],
                "os.path.join": [
                    363
                ],
                "el": [
                    369,
                    370,
                    371
                ],
                "iterable": [
                    369
                ],
                "res.append": [
                    371
                ],
                "entity": [
                    392,
                    378,
                    379,
                    381
                ],
                "compat_html_entities.name2codepoint": [
                    378,
                    379
                ],
                "compat_html_entities": [
                    378,
                    379
                ],
                "compat_chr": [
                    379,
                    389
                ],
                "mobj": [
                    1949,
                    1943,
                    1944,
                    1945,
                    1947,
                    1948,
                    381,
                    382,
                    383
                ],
                "numstr": [
                    384,
                    386,
                    389,
                    383
                ],
                "mobj.group": [
                    1945,
                    1949,
                    383
                ],
                "numstr.startswith": [
                    384
                ],
                "base": [
                    385,
                    388,
                    389
                ],
                "int": [
                    389,
                    1302,
                    1690,
                    1434,
                    1436,
                    1949,
                    1438,
                    928,
                    1440,
                    1442,
                    1444,
                    830,
                    831,
                    1096,
                    1747,
                    1245,
                    1378,
                    1891,
                    1392
                ],
                "_htmlentity_transform": [
                    401
                ],
                "sys.getwindowsversion": [
                    405,
                    430
                ],
                "preferredencoding": [
                    464,
                    408,
                    1082,
                    1085,
                    990
                ],
                "sys.getfilesystemencoding": [
                    410,
                    1205
                ],
                "for_subprocess": [
                    430
                ],
                "s.encode": [
                    1667,
                    433,
                    1086,
                    1082,
                    1598
                ],
                "get_subprocess_encoding": [
                    433,
                    444
                ],
                "b": [
                    457,
                    439,
                    441,
                    442,
                    444
                ],
                "bytes": [
                    1245,
                    1241,
                    1485,
                    463,
                    989,
                    1238,
                    1240,
                    441,
                    1242,
                    1213,
                    1247
                ],
                "b.decode": [
                    444
                ],
                "s.decode": [
                    452
                ],
                "decodeFilename": [
                    457
                ],
                "optval": [
                    461,
                    462,
                    463,
                    464,
                    466,
                    467
                ],
                "optval.decode": [
                    464
                ],
                "secs": [
                    471,
                    472,
                    473,
                    474,
                    476
                ],
                "opts_no_check_certificate": [
                    480,
                    498,
                    483
                ],
                "params.get": [
                    480,
                    2017,
                    1999,
                    2004,
                    2012
                ],
                "params": [
                    480,
                    2017,
                    774,
                    487,
                    494,
                    1999,
                    2004,
                    501,
                    665,
                    2012
                ],
                "ssl": [
                    481,
                    482,
                    485,
                    496,
                    497,
                    499,
                    635,
                    637
                ],
                "context": [
                    482,
                    484,
                    485,
                    487,
                    496,
                    497,
                    500,
                    501
                ],
                "ssl.create_default_context": [
                    482
                ],
                "ssl.Purpose.SERVER_AUTH": [
                    482
                ],
                "ssl.Purpose": [
                    482
                ],
                "context.check_hostname": [
                    484
                ],
                "context.verify_mode": [
                    497,
                    485
                ],
                "ssl.CERT_NONE": [
                    497,
                    485
                ],
                "YoutubeDLHTTPSHandler": [
                    501,
                    494,
                    487
                ],
                "kwargs": [
                    1666,
                    1667,
                    772,
                    487,
                    777,
                    779,
                    781,
                    494,
                    623,
                    624,
                    784,
                    501,
                    664
                ],
                "TypeError": [
                    488,
                    1614
                ],
                "ssl.SSLContext": [
                    496
                ],
                "ssl.PROTOCOL_TLSv1": [
                    496,
                    637
                ],
                "ssl.CERT_REQUIRED": [
                    499
                ],
                "context.set_default_verify_paths": [
                    500
                ],
                "ytdl_is_updateable": [
                    505
                ],
                "update_cmd": [
                    506,
                    508,
                    510
                ],
                "msg": [
                    512,
                    587,
                    526,
                    528,
                    530,
                    531,
                    566,
                    509,
                    510,
                    511
                ],
                "sys.exc_info": [
                    523,
                    534
                ],
                "compat_urllib_error.URLError": [
                    523
                ],
                "compat_urllib_error": [
                    523
                ],
                "socket.timeout": [
                    523
                ],
                "socket": [
                    523
                ],
                "UnavailableVideoError": [
                    523
                ],
                "expected": [
                    529,
                    524,
                    615
                ],
                "video_id": [
                    536,
                    525,
                    526
                ],
                "cause": [
                    528,
                    535,
                    527
                ],
                "bug_reports_message": [
                    530
                ],
                "__init__": [
                    546,
                    531,
                    566
                ],
                "super": [
                    546,
                    531,
                    566
                ],
                "self": [
                    789,
                    772,
                    773,
                    774,
                    1540,
                    778,
                    779,
                    780,
                    781,
                    782,
                    783,
                    1552,
                    1553,
                    1554,
                    531,
                    1558,
                    533,
                    534,
                    535,
                    664,
                    536,
                    665,
                    539,
                    668,
                    541,
                    669,
                    1176,
                    1177,
                    1180,
                    546,
                    1182,
                    548,
                    805,
                    1184,
                    1186,
                    1190,
                    1192,
                    1560,
                    1195,
                    1198,
                    1561,
                    1201,
                    566,
                    567,
                    2490,
                    2491,
                    1564,
                    2493,
                    961,
                    963,
                    965,
                    967,
                    968,
                    969,
                    2504,
                    587,
                    980,
                    983,
                    1504,
                    1509,
                    614,
                    615,
                    1510,
                    745,
                    1514,
                    1515,
                    1516,
                    749,
                    750,
                    1520,
                    1523,
                    1528,
                    633,
                    635,
                    636,
                    639
                ],
                "self.traceback": [
                    541,
                    539,
                    533
                ],
                "tb": [
                    533
                ],
                "self.exc_info": [
                    534,
                    567
                ],
                "self.cause": [
                    535
                ],
                "self.video_id": [
                    536
                ],
                "traceback.format_tb": [
                    541
                ],
                "traceback": [
                    541
                ],
                "UnsupportedError": [
                    546
                ],
                "url": [
                    903,
                    905,
                    547,
                    548,
                    682,
                    683,
                    1838,
                    1839,
                    1841,
                    1843,
                    1846,
                    696,
                    697,
                    700,
                    1852,
                    1604,
                    1225,
                    1231,
                    1360,
                    1234,
                    1632,
                    1633,
                    1635,
                    1636,
                    1637,
                    1638,
                    1640,
                    1643
                ],
                "self.url": [
                    548
                ],
                "DownloadError": [
                    566
                ],
                "exc_info": [
                    567
                ],
                "self.msg": [
                    587
                ],
                "self.downloaded": [
                    614
                ],
                "downloaded": [
                    614
                ],
                "self.expected": [
                    615
                ],
                "hc": [
                    640,
                    642,
                    624,
                    628,
                    629
                ],
                "http_class": [
                    624
                ],
                "source_address": [
                    625,
                    626,
                    627
                ],
                "ydl_handler._params.get": [
                    625
                ],
                "ydl_handler._params": [
                    625
                ],
                "ydl_handler": [
                    625
                ],
                "sa": [
                    633,
                    627,
                    629
                ],
                "hc.source_address": [
                    629
                ],
                "sock": [
                    632,
                    636,
                    639
                ],
                "compat_socket_create_connection": [
                    632
                ],
                "self.host": [
                    633
                ],
                "self.port": [
                    633
                ],
                "self.timeout": [
                    633
                ],
                "is_https": [
                    634
                ],
                "self.sock": [
                    635,
                    639
                ],
                "ssl.wrap_socket": [
                    635
                ],
                "self.key_file": [
                    636
                ],
                "self.cert_file": [
                    636
                ],
                "hc.connect": [
                    640
                ],
                "functools.partial": [
                    640,
                    1957,
                    1963,
                    782,
                    668
                ],
                "functools": [
                    640,
                    1957,
                    1963,
                    782,
                    668
                ],
                "_hc_connect": [
                    640
                ],
                "compat_urllib_request.HTTPHandler": [
                    664,
                    645
                ],
                "compat_urllib_request": [
                    770,
                    772,
                    645,
                    805,
                    807,
                    2503,
                    681,
                    682,
                    683,
                    787,
                    1364,
                    789,
                    2486,
                    664,
                    701,
                    2493
                ],
                "compat_urllib_request.HTTPHandler.__init__": [
                    664
                ],
                "self._params": [
                    665,
                    774
                ],
                "self.do_open": [
                    668,
                    782
                ],
                "_create_http_connection": [
                    669,
                    783
                ],
                "compat_http_client.HTTPConnection": [
                    669
                ],
                "compat_http_client": [
                    773,
                    669
                ],
                "req": [
                    784,
                    670,
                    696,
                    701,
                    703,
                    704,
                    705,
                    706,
                    2496,
                    2499,
                    711,
                    712,
                    713,
                    714,
                    715,
                    716,
                    2504,
                    718,
                    720,
                    721,
                    723
                ],
                "zlib.decompress": [
                    675,
                    677
                ],
                "zlib": [
                    675,
                    676,
                    677
                ],
                "data": [
                    1857,
                    675,
                    677,
                    1224,
                    1800,
                    1233,
                    1234
                ],
                "zlib.MAX_WBITS": [
                    675
                ],
                "zlib.error": [
                    676
                ],
                "staticmethod": [
                    672,
                    679
                ],
                "compat_urllib_request.addinfourl": [
                    681,
                    682,
                    683
                ],
                "headers": [
                    682,
                    683
                ],
                "code": [
                    2216,
                    682,
                    684,
                    2222,
                    2483,
                    1718,
                    1695
                ],
                "ret": [
                    1058,
                    1060,
                    683,
                    684,
                    685
                ],
                "ret.code": [
                    684
                ],
                "req.get_full_url": [
                    696,
                    718
                ],
                "url_escaped": [
                    697,
                    700,
                    703
                ],
                "escape_url": [
                    760,
                    697
                ],
                "req_type": [
                    701,
                    702
                ],
                "req.get_method": [
                    701
                ],
                "HEADRequest": [
                    701
                ],
                "compat_urllib_request.Request": [
                    1364,
                    701
                ],
                "new_req": [
                    705,
                    706,
                    702
                ],
                "req.data": [
                    703
                ],
                "req.headers": [
                    2496,
                    2499,
                    711,
                    713,
                    714,
                    715,
                    716,
                    703
                ],
                "req.origin_req_host": [
                    704
                ],
                "req.unverifiable": [
                    704
                ],
                "new_req.timeout": [
                    705
                ],
                "req.timeout": [
                    705
                ],
                "h": [
                    1059,
                    708,
                    711,
                    712,
                    1046,
                    1784,
                    1023
                ],
                "v": [
                    1700,
                    1701,
                    1702,
                    1703,
                    1704,
                    1705,
                    1706,
                    1707,
                    1711,
                    1712,
                    1858,
                    708,
                    712,
                    1747,
                    1371,
                    1372,
                    1373,
                    1374,
                    1375,
                    1378,
                    1384,
                    1906,
                    1651,
                    1396,
                    1907,
                    1399
                ],
                "std_headers.items": [
                    708
                ],
                "h.capitalize": [
                    711
                ],
                "req.add_header": [
                    712
                ],
                "req._Request__original": [
                    720
                ],
                "req._Request__original.partition": [
                    720
                ],
                "req._Request__r_type": [
                    721
                ],
                "req._Request__r_type.partition": [
                    721
                ],
                "old_resp": [
                    745,
                    746,
                    750,
                    751,
                    726
                ],
                "resp": [
                    745,
                    746,
                    748,
                    749,
                    750,
                    751,
                    754,
                    755,
                    726,
                    728,
                    729,
                    762,
                    763,
                    764
                ],
                "resp.headers.get": [
                    728,
                    755,
                    748
                ],
                "resp.headers": [
                    748,
                    755,
                    728,
                    762,
                    763
                ],
                "content": [
                    729,
                    730,
                    738
                ],
                "resp.read": [
                    729,
                    749
                ],
                "gz": [
                    738,
                    739,
                    749,
                    750,
                    730,
                    732
                ],
                "gzip.GzipFile": [
                    730,
                    738
                ],
                "gzip": [
                    730,
                    738
                ],
                "io.BytesIO": [
                    738,
                    739,
                    749,
                    730,
                    732
                ],
                "io": [
                    738,
                    739,
                    749,
                    1014,
                    1176,
                    730,
                    732
                ],
                "uncompressed": [
                    745,
                    739,
                    732
                ],
                "gz.read": [
                    739,
                    732
                ],
                "i": [
                    736,
                    738,
                    1051
                ],
                "range": [
                    736,
                    1563
                ],
                "original_ioerror": [
                    744
                ],
                "self.addinfourl_wrapper": [
                    745,
                    750
                ],
                "old_resp.headers": [
                    745,
                    750
                ],
                "old_resp.url": [
                    745,
                    750
                ],
                "old_resp.code": [
                    745,
                    750
                ],
                "resp.msg": [
                    746,
                    751
                ],
                "old_resp.msg": [
                    746,
                    751
                ],
                "self.deflate": [
                    749
                ],
                "resp.code": [
                    754
                ],
                "location": [
                    755,
                    756,
                    759,
                    760,
                    761
                ],
                "location.encode": [
                    759
                ],
                "location_escaped": [
                    760,
                    761,
                    763
                ],
                "https_request": [
                    766,
                    807
                ],
                "http_request": [
                    766
                ],
                "https_response": [
                    808,
                    767
                ],
                "http_response": [
                    808,
                    767
                ],
                "compat_urllib_request.HTTPSHandler": [
                    770,
                    772
                ],
                "compat_urllib_request.HTTPSHandler.__init__": [
                    772
                ],
                "self._https_conn_class": [
                    773,
                    783
                ],
                "https_conn_class": [
                    773
                ],
                "compat_http_client.HTTPSConnection": [
                    773
                ],
                "self._context": [
                    779
                ],
                "self._check_hostname": [
                    781
                ],
                "compat_urllib_request.HTTPCookieProcessor": [
                    805,
                    787,
                    789,
                    807
                ],
                "compat_urllib_request.HTTPCookieProcessor.__init__": [
                    789
                ],
                "cookiejar": [
                    789
                ],
                "compat_urllib_request.HTTPCookieProcessor.http_response": [
                    805
                ],
                "request": [
                    805
                ],
                "response": [
                    805
                ],
                "compat_urllib_request.HTTPCookieProcessor.http_request": [
                    807
                ],
                "date_str": [
                    896,
                    833,
                    840,
                    844,
                    814,
                    846,
                    847,
                    849,
                    942,
                    820,
                    948,
                    952,
                    824,
                    921,
                    923,
                    892,
                    925
                ],
                "timezone": [
                    833,
                    817,
                    822,
                    826,
                    829
                ],
                "datetime.timedelta": [
                    940,
                    822,
                    826,
                    924,
                    829
                ],
                "datetime": [
                    833,
                    898,
                    963,
                    967,
                    924,
                    940,
                    942,
                    978,
                    822,
                    920,
                    826,
                    892,
                    829
                ],
                "sign": [
                    929,
                    831,
                    828,
                    830,
                    927
                ],
                "date_format": [
                    832,
                    833
                ],
                "format": [
                    832,
                    1460,
                    1453,
                    1455
                ],
                "delimiter": [
                    832
                ],
                "dt": [
                    833,
                    834
                ],
                "datetime.datetime.strptime": [
                    833,
                    892,
                    942
                ],
                "datetime.datetime": [
                    833,
                    898,
                    963,
                    967,
                    942,
                    892
                ],
                "calendar.timegm": [
                    834
                ],
                "calendar": [
                    834
                ],
                "dt.timetuple": [
                    834
                ],
                "upload_date": [
                    898,
                    899,
                    842,
                    892,
                    895
                ],
                "date_str.replace": [
                    844
                ],
                "format_expressions": [
                    875,
                    883,
                    890,
                    851
                ],
                "day_first": [
                    874
                ],
                "format_expressions.extend": [
                    883,
                    875
                ],
                "expression": [
                    890,
                    892
                ],
                "strftime": [
                    898,
                    892
                ],
                "ValueError": [
                    1728,
                    1379,
                    1892,
                    1320,
                    969,
                    1897,
                    1886,
                    1982,
                    1400,
                    1755,
                    893,
                    1310,
                    1919
                ],
                "default_ext": [
                    904,
                    909
                ],
                "guess": [
                    905,
                    906,
                    907
                ],
                "rpartition": [
                    905
                ],
                "url.partition": [
                    905
                ],
                "filename.rsplit": [
                    913
                ],
                "sub_lang": [
                    913
                ],
                "sub_format": [
                    913
                ],
                "today": [
                    920,
                    922,
                    924,
                    941
                ],
                "datetime.date.today": [
                    920
                ],
                "datetime.date": [
                    920,
                    978
                ],
                "match": [
                    928,
                    931,
                    948,
                    949,
                    950,
                    925,
                    926,
                    927
                ],
                "match.group": [
                    928,
                    931,
                    927
                ],
                "time": [
                    928,
                    930,
                    935,
                    938,
                    940
                ],
                "unit": [
                    931,
                    933,
                    934,
                    936,
                    937,
                    939,
                    940
                ],
                "delta": [
                    940,
                    941
                ],
                "date": [
                    978,
                    979,
                    980,
                    942
                ],
                "match.groups": [
                    950
                ],
                "start": [
                    960,
                    961,
                    1348,
                    1349,
                    1514,
                    1517,
                    1523,
                    1524,
                    1558,
                    1561,
                    1562
                ],
                "self.start": [
                    961,
                    963,
                    968,
                    980,
                    983
                ],
                "date_from_str": [
                    961,
                    979,
                    965
                ],
                "datetime.datetime.min.date": [
                    963
                ],
                "datetime.datetime.min": [
                    963
                ],
                "end": [
                    964,
                    965,
                    1545,
                    1354,
                    1355,
                    1560,
                    1528,
                    1529,
                    1562
                ],
                "self.end": [
                    965,
                    967,
                    968,
                    980,
                    983
                ],
                "datetime.datetime.max.date": [
                    967
                ],
                "datetime.datetime.max": [
                    967
                ],
                "cls": [
                    2216,
                    2483,
                    2221,
                    974
                ],
                "day": [
                    974
                ],
                "classmethod": [
                    2480,
                    2218,
                    971,
                    2213
                ],
                "self.start.isoformat": [
                    983
                ],
                "self.end.isoformat": [
                    983
                ],
                "platform.platform": [
                    988
                ],
                "platform": [
                    988
                ],
                "res.decode": [
                    990
                ],
                "WIN_OUTPUT_IDS": [
                    1017,
                    1004,
                    1023
                ],
                "fileno": [
                    1017,
                    1010,
                    1023
                ],
                "out.fileno": [
                    1010
                ],
                "out": [
                    1965,
                    1072,
                    1073,
                    1969,
                    1971,
                    1076,
                    1077,
                    1973,
                    1975,
                    1080,
                    1978,
                    1083,
                    1084,
                    1085,
                    1087,
                    1089,
                    1090,
                    1989,
                    1480,
                    1995,
                    1485,
                    1486,
                    1487,
                    1010
                ],
                "AttributeError": [
                    1656,
                    1785,
                    1011,
                    1343
                ],
                "io.UnsupportedOperation": [
                    1014
                ],
                "GetStdHandle": [
                    1020,
                    1023
                ],
                "ctypes.WINFUNCTYPE": [
                    1025,
                    1034,
                    1020,
                    1031
                ],
                "ctypes": [
                    1025,
                    1026,
                    1027,
                    1028,
                    1029,
                    1154,
                    1031,
                    1161,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    1044,
                    1150,
                    1059,
                    1335,
                    1339,
                    1113,
                    1115,
                    1116,
                    1117,
                    1118,
                    1119,
                    1122,
                    1125,
                    1126,
                    1127,
                    1128,
                    1129,
                    1130,
                    1132,
                    1135,
                    1136,
                    1137,
                    1138,
                    1139,
                    1141,
                    1020,
                    1021,
                    1022
                ],
                "ctypes.wintypes.HANDLE": [
                    1026,
                    1125,
                    1035,
                    1135,
                    1021,
                    1119
                ],
                "ctypes.wintypes": [
                    1026,
                    1027,
                    1028,
                    1029,
                    1031,
                    1035,
                    1036,
                    1038,
                    1044,
                    1115,
                    1116,
                    1117,
                    1118,
                    1119,
                    1125,
                    1126,
                    1127,
                    1128,
                    1129,
                    1132,
                    1135,
                    1136,
                    1137,
                    1138,
                    1141,
                    1021
                ],
                "ctypes.wintypes.DWORD": [
                    1027,
                    1029,
                    1126,
                    1031,
                    1127,
                    1128,
                    1129,
                    1036,
                    1038,
                    1136,
                    1137,
                    1138,
                    1044,
                    1117,
                    1021,
                    1118
                ],
                "ctypes.windll.kernel32": [
                    1122,
                    1028,
                    1031,
                    1037,
                    1022
                ],
                "ctypes.windll": [
                    1122,
                    1028,
                    1031,
                    1037,
                    1022
                ],
                "WriteConsoleW": [
                    1025,
                    1058
                ],
                "ctypes.wintypes.BOOL": [
                    1026,
                    1035,
                    1132,
                    1141
                ],
                "ctypes.wintypes.LPWSTR": [
                    1026
                ],
                "ctypes.POINTER": [
                    1139,
                    1130,
                    1027,
                    1036
                ],
                "ctypes.wintypes.LPVOID": [
                    1115,
                    1028,
                    1116
                ],
                "written": [
                    1059,
                    1029,
                    1063,
                    1066,
                    1067
                ],
                "GetFileType": [
                    1043,
                    1031
                ],
                "FILE_TYPE_CHAR": [
                    1032,
                    1043
                ],
                "FILE_TYPE_REMOTE": [
                    1033,
                    1043
                ],
                "GetConsoleMode": [
                    1034,
                    1044
                ],
                "INVALID_HANDLE_VALUE": [
                    1041,
                    1038
                ],
                "handle": [
                    1152,
                    1158,
                    1159,
                    1041,
                    1043,
                    1044,
                    1151
                ],
                "ctypes.byref": [
                    1059,
                    1044
                ],
                "not_a_console": [
                    1046
                ],
                "next": [
                    1051
                ],
                "enumerate": [
                    1051
                ],
                "StopIteration": [
                    1052
                ],
                "count": [
                    1056,
                    1059,
                    1062
                ],
                "min": [
                    1056
                ],
                "next_nonbmp_pos": [
                    1056
                ],
                "written.value": [
                    1066,
                    1067,
                    1063
                ],
                "sys.stderr": [
                    1073
                ],
                "_windows_write_string": [
                    1077
                ],
                "getattr": [
                    1080,
                    1372,
                    1085
                ],
                "byt": [
                    1082,
                    1083,
                    1086,
                    1087
                ],
                "out.write": [
                    1089,
                    1083
                ],
                "enc": [
                    1825,
                    1085,
                    1086,
                    1823
                ],
                "out.buffer.write": [
                    1087
                ],
                "out.buffer": [
                    1087
                ],
                "out.flush": [
                    1090
                ],
                "bs": [
                    1096,
                    1097,
                    1099,
                    1094
                ],
                "list": [
                    1520,
                    1097,
                    1564,
                    2020
                ],
                "xs": [
                    1105,
                    1103
                ],
                "struct_pack": [
                    1105,
                    1626
                ],
                "ctypes.Structure": [
                    1113
                ],
                "_fields_": [
                    1114
                ],
                "kernel32": [
                    1122,
                    1123,
                    1133
                ],
                "LockFileEx": [
                    1132,
                    1123,
                    1124,
                    1152
                ],
                "kernel32.LockFileEx": [
                    1123
                ],
                "LockFileEx.argtypes": [
                    1124
                ],
                "OVERLAPPED": [
                    1130,
                    1139,
                    1146
                ],
                "LockFileEx.restype": [
                    1132
                ],
                "UnlockFileEx": [
                    1141,
                    1133,
                    1134,
                    1159
                ],
                "kernel32.UnlockFileEx": [
                    1133
                ],
                "UnlockFileEx.argtypes": [
                    1134
                ],
                "UnlockFileEx.restype": [
                    1141
                ],
                "whole_low": [
                    1160,
                    1153,
                    1142
                ],
                "whole_high": [
                    1160,
                    1153,
                    1143
                ],
                "overlapped": [
                    1146,
                    1147,
                    1148,
                    1149,
                    1150
                ],
                "overlapped.Offset": [
                    1147
                ],
                "overlapped.OffsetHigh": [
                    1148
                ],
                "overlapped.hEvent": [
                    1149
                ],
                "f._lock_file_overlapped_p": [
                    1160,
                    1153,
                    1157,
                    1150
                ],
                "ctypes.pointer": [
                    1150
                ],
                "msvcrt.get_osfhandle": [
                    1158,
                    1151
                ],
                "f.fileno": [
                    1158,
                    1151
                ],
                "exclusive": [
                    1152,
                    1180,
                    1182,
                    1167
                ],
                "ctypes.FormatError": [
                    1161,
                    1154
                ],
                "fcntl.flock": [
                    1170,
                    1167
                ],
                "fcntl": [
                    1170,
                    1167
                ],
                "fcntl.LOCK_EX": [
                    1167
                ],
                "fcntl.LOCK_SH": [
                    1167
                ],
                "fcntl.LOCK_UN": [
                    1170
                ],
                "mode": [
                    1176,
                    1177,
                    1175
                ],
                "self.f": [
                    1184,
                    1190,
                    1192,
                    1195,
                    1198,
                    1201,
                    1176,
                    1182
                ],
                "io.open": [
                    1176
                ],
                "self.mode": [
                    1177,
                    1180
                ],
                "_lock_file": [
                    1182
                ],
                "self.f.close": [
                    1184,
                    1192
                ],
                "_unlock_file": [
                    1190
                ],
                "iter": [
                    1195
                ],
                "self.f.write": [
                    1198
                ],
                "self.f.read": [
                    1201
                ],
                "quoted_args": [
                    1216,
                    1217,
                    1210
                ],
                "a": [
                    1216,
                    1768,
                    1212,
                    1213,
                    1215
                ],
                "a.decode": [
                    1215
                ],
                "quoted_args.append": [
                    1216
                ],
                "pipes.quote": [
                    1216
                ],
                "pipes": [
                    1216
                ],
                "sdata": [
                    1232,
                    1225,
                    1231,
                    1223
                ],
                "compat_urllib_parse.urlencode": [
                    1647,
                    1223
                ],
                "compat_urllib_parse": [
                    1647,
                    1599,
                    1223
                ],
                "json.dumps": [
                    1224
                ],
                "smug_url": [
                    1229,
                    1230,
                    1231
                ],
                "smug_url.rpartition": [
                    1231
                ],
                "jsond": [
                    1232,
                    1233
                ],
                "compat_parse_qs": [
                    1232
                ],
                "json.loads": [
                    1233
                ],
                "str": [
                    1240
                ],
                "float": [
                    1446,
                    1302,
                    1399,
                    1241,
                    1945,
                    1949,
                    1247
                ],
                "exponent": [
                    1243,
                    1245,
                    1246,
                    1247
                ],
                "math.log": [
                    1245
                ],
                "math": [
                    1245
                ],
                "suffix": [
                    1248,
                    1246
                ],
                "converted": [
                    1248,
                    1247
                ],
                "_UNIT_TABLE": [
                    1257,
                    1301,
                    1294
                ],
                "units_re": [
                    1296,
                    1294
                ],
                "u": [
                    1294
                ],
                "num_str": [
                    1300,
                    1302
                ],
                "mult": [
                    1301,
                    1302
                ],
                "ENGLISH_MONTH_NAMES.index": [
                    1309
                ],
                "index": [
                    1984,
                    1990,
                    1319
                ],
                "abbrev": [
                    1319
                ],
                "xml_str": [
                    1329
                ],
                "title": [
                    1338,
                    1333
                ],
                "libc": [
                    1342,
                    1335
                ],
                "ctypes.cdll.LoadLibrary": [
                    1335
                ],
                "ctypes.cdll": [
                    1335
                ],
                "title_bytes": [
                    1338,
                    1339,
                    1340
                ],
                "title.encode": [
                    1338
                ],
                "buf": [
                    1339,
                    1340,
                    1342
                ],
                "ctypes.create_string_buffer": [
                    1339
                ],
                "buf.value": [
                    1340
                ],
                "libc.prctl": [
                    1342
                ],
                "s.startswith": [
                    1348
                ],
                "s.endswith": [
                    1354
                ],
                "compat_urlparse.urlparse": [
                    1360
                ],
                "compat_urlparse": [
                    1360
                ],
                "path.strip": [
                    1361
                ],
                "get_attr": [
                    1370,
                    1372
                ],
                "invscale": [
                    1378,
                    1399
                ],
                "scale": [
                    1378,
                    1399
                ],
                "int_str": [
                    1392,
                    1389,
                    1391
                ],
                "compat_basestring": [
                    1405
                ],
                "s.strip": [
                    1408
                ],
                "float_or_none": [
                    1432,
                    1430
                ],
                "real_ext": [
                    1451,
                    1453,
                    1454,
                    1459,
                    1461
                ],
                "os.path.splitext": [
                    1451,
                    1459
                ],
                "expected_real_ext": [
                    1461,
                    1454
                ],
                "ext": [
                    1453,
                    1455,
                    1846,
                    1847,
                    1462,
                    1849
                ],
                "communicate": [
                    1480,
                    1469
                ],
                "subprocess.Popen": [
                    1480,
                    1469
                ],
                "subprocess": [
                    1480,
                    1482,
                    1469
                ],
                "exe": [
                    1472,
                    1481,
                    1469
                ],
                "subprocess.PIPE": [
                    1482,
                    1469
                ],
                "encodeArgument": [
                    1481
                ],
                "subprocess.STDOUT": [
                    1482
                ],
                "out.decode": [
                    1486
                ],
                "detect_exe_version": [
                    1487
                ],
                "version_re": [
                    1492,
                    1493,
                    1494,
                    1487
                ],
                "unrecognized": [
                    1498,
                    1487
                ],
                "output": [
                    1491,
                    1494
                ],
                "self.getslice": [
                    1504
                ],
                "PagedList": [
                    1507,
                    1550
                ],
                "self._pagefunc": [
                    1520,
                    1552,
                    1564,
                    1509
                ],
                "pagefunc": [
                    1552,
                    1509
                ],
                "self._pagesize": [
                    1540,
                    1510,
                    1560,
                    1514,
                    1515,
                    1516,
                    1554,
                    1523,
                    1558,
                    1528,
                    1561
                ],
                "pagesize": [
                    1554,
                    1510
                ],
                "pagenum": [
                    1514,
                    1515,
                    1516,
                    1520,
                    1563,
                    1564
                ],
                "itertools.count": [
                    1984,
                    1514
                ],
                "itertools": [
                    1984,
                    1514
                ],
                "firstid": [
                    1529,
                    1515,
                    1524
                ],
                "nextfirstid": [
                    1545,
                    1516,
                    1517,
                    1524,
                    1529
                ],
                "page_results": [
                    1520,
                    1540,
                    1533,
                    1534
                ],
                "startv": [
                    1522,
                    1540,
                    1532,
                    1533
                ],
                "endv": [
                    1532,
                    1533,
                    1527
                ],
                "res.extend": [
                    1573,
                    1534,
                    1575
                ],
                "self._pagecount": [
                    1560,
                    1553
                ],
                "pagecount": [
                    1553
                ],
                "start_page": [
                    1561,
                    1563,
                    1558
                ],
                "end_page": [
                    1563,
                    1559
                ],
                "skip_elems": [
                    1561,
                    1565,
                    1566,
                    1567
                ],
                "only_more": [
                    1568,
                    1569,
                    1570,
                    1572,
                    1562
                ],
                "page": [
                    1569,
                    1570,
                    1572,
                    1573,
                    1575,
                    1564,
                    1566
                ],
                "unicode_escape": [
                    1580,
                    1591,
                    1588,
                    1583
                ],
                "codecs.getdecoder": [
                    1580,
                    1588
                ],
                "codecs": [
                    1580,
                    1588
                ],
                "compat_urllib_parse.quote": [
                    1599
                ],
                "url_parsed": [
                    1604,
                    1605,
                    1606,
                    1607,
                    1608,
                    1609
                ],
                "compat_urllib_parse_urlparse": [
                    1604,
                    1852
                ],
                "geturl": [
                    1605
                ],
                "url_parsed._replace": [
                    1605
                ],
                "escape_rfc3986": [
                    1608,
                    1609,
                    1606,
                    1607
                ],
                "url_parsed.path": [
                    1606
                ],
                "url_parsed.params": [
                    1607
                ],
                "url_parsed.query": [
                    1608
                ],
                "url_parsed.fragment": [
                    1609
                ],
                "struct.pack": [
                    1626,
                    1619,
                    1613
                ],
                "struct": [
                    1613,
                    1619,
                    1624,
                    1626,
                    1627
                ],
                "spec": [
                    1617,
                    1618,
                    1619,
                    1622,
                    1623,
                    1624
                ],
                "spec.encode": [
                    1618,
                    1623
                ],
                "struct.unpack": [
                    1624,
                    1627
                ],
                "struct_unpack": [
                    1627
                ],
                "url.decode": [
                    1633
                ],
                "BOM_UTF8": [
                    1634,
                    1635,
                    1636
                ],
                "url.startswith": [
                    1635,
                    1638,
                    1839,
                    1841,
                    1843
                ],
                "url.strip": [
                    1637
                ],
                "contextlib.closing": [
                    1642
                ],
                "contextlib": [
                    1642
                ],
                "batch_fd": [
                    1642
                ],
                "fd": [
                    1642,
                    1643
                ],
                "fixup": [
                    1643
                ],
                "kargs": [
                    1647
                ],
                "dict": [
                    1651
                ],
                "k.encode": [
                    1651
                ],
                "k": [
                    1651
                ],
                "v.encode": [
                    1651
                ],
                "d.items": [
                    1651
                ],
                "d": [
                    1651
                ],
                "etree_iter": [
                    1657,
                    1670,
                    1655
                ],
                "xml.etree.ElementTree.Element.iter": [
                    1655
                ],
                "xml.etree.ElementTree.Element": [
                    1655
                ],
                "xml.etree.ElementTree": [
                    1665,
                    1667,
                    1973,
                    1655,
                    1977,
                    1661
                ],
                "xml.etree": [
                    1665,
                    1667,
                    1973,
                    1655,
                    1977,
                    1661
                ],
                "xml": [
                    1665,
                    1667,
                    1973,
                    1655,
                    1977,
                    1661
                ],
                "n.findall": [
                    1657
                ],
                "xml.etree.ElementTree.TreeBuilder": [
                    1661
                ],
                "parser": [
                    1665,
                    1666
                ],
                "xml.etree.ElementTree.XMLParser": [
                    1665
                ],
                "TreeBuilder": [
                    1665
                ],
                "tree": [
                    1674,
                    1667,
                    1670
                ],
                "xml.etree.ElementTree.XML": [
                    1667
                ],
                "n.text.decode": [
                    1673
                ],
                "US_RATINGS": [
                    1690,
                    1677
                ],
                "US_RATINGS.get": [
                    1690
                ],
                "v.startswith": [
                    1705,
                    1703
                ],
                "fix_kv": [
                    1718
                ],
                "quality_ids.index": [
                    1727
                ],
                "quality_ids": [
                    1727
                ],
                "qid": [
                    1727
                ],
                "q": [
                    1730
                ],
                "DEFAULT_OUTTMPL": [
                    1733
                ],
                "ELLIPSES": [
                    1740,
                    1742
                ],
                "length": [
                    1741,
                    1742
                ],
                "tuple": [
                    1747,
                    1860
                ],
                "e": [
                    1792,
                    1793,
                    1794,
                    1747
                ],
                "re.split": [
                    1747
                ],
                "version": [
                    1754,
                    1751
                ],
                "assume_new": [
                    1752,
                    1756
                ],
                "version_tuple": [
                    1754
                ],
                "limit": [
                    1754
                ],
                "get": [
                    1763,
                    1774
                ],
                "globals": [
                    1763
                ],
                "zipimporter": [
                    1763
                ],
                "shlex_quote": [
                    1768
                ],
                "mt.rpartition": [
                    1772
                ],
                "mt": [
                    1772
                ],
                "url_handle.headers": [
                    1784,
                    1783
                ],
                "url_handle": [
                    1784,
                    1786,
                    1783
                ],
                "getheader": [
                    1784,
                    1786,
                    1788,
                    1796
                ],
                "url_handle.info": [
                    1786
                ],
                "cd": [
                    1788,
                    1789,
                    1790
                ],
                "determine_ext": [
                    1792,
                    1846
                ],
                "mimetype2ext": [
                    1796
                ],
                "mime_type": [
                    1800
                ],
                "base64.b64encode": [
                    1800
                ],
                "base64": [
                    1800
                ],
                "age_limit": [
                    1810,
                    1806
                ],
                "content_limit": [
                    1808,
                    1810
                ],
                "BOMS": [
                    1816,
                    1823
                ],
                "bom": [
                    1824,
                    1825,
                    1823
                ],
                "first_bytes.startswith": [
                    1824
                ],
                "first_bytes": [
                    1824,
                    1825,
                    1828
                ],
                "first_bytes.decode": [
                    1828
                ],
                "protocol": [
                    1834,
                    1835,
                    1836
                ],
                "info_dict.get": [
                    1834,
                    1934
                ],
                "info_dict": [
                    1934,
                    1834,
                    1931,
                    1838
                ],
                "scheme": [
                    1852
                ],
                "table": [
                    1857,
                    1858,
                    1860
                ],
                "header_row": [
                    1857
                ],
                "max_lens": [
                    1858,
                    1859
                ],
                "max": [
                    1858
                ],
                "col": [
                    1858
                ],
                "zip": [
                    1984,
                    1858
                ],
                "format_str": [
                    1859,
                    1860
                ],
                "ml": [
                    1859
                ],
                "row": [
                    1860
                ],
                "COMPARISON_OPERATORS": [
                    1864,
                    1883,
                    1880
                ],
                "operator.lt": [
                    1865
                ],
                "operator": [
                    1865,
                    1866,
                    1867,
                    1868,
                    1869,
                    1870
                ],
                "operator.le": [
                    1866
                ],
                "operator.gt": [
                    1867
                ],
                "operator.ge": [
                    1868
                ],
                "operator.eq": [
                    1869
                ],
                "operator.ne": [
                    1870
                ],
                "operator_rex": [
                    1872,
                    1881,
                    1909,
                    1913
                ],
                "COMPARISON_OPERATORS.keys": [
                    1880
                ],
                "operator_rex.search": [
                    1881,
                    1913
                ],
                "filter_part": [
                    1926,
                    1899,
                    1881,
                    1913,
                    1919
                ],
                "op": [
                    1915,
                    1883,
                    1917,
                    1903
                ],
                "comparison_value": [
                    1888,
                    1891,
                    1893,
                    1894,
                    1895,
                    1896,
                    1903
                ],
                "parse_filesize": [
                    1893,
                    1895
                ],
                "actual_value": [
                    1900,
                    1901,
                    1903,
                    1916,
                    1917
                ],
                "dct.get": [
                    1916,
                    1900
                ],
                "dct": [
                    1916,
                    1900,
                    1926
                ],
                "UNARY_OPERATORS": [
                    1912,
                    1905,
                    1915
                ],
                "UNARY_OPERATORS.keys": [
                    1912
                ],
                "all": [
                    1925
                ],
                "_match_one": [
                    1926
                ],
                "filter_str.split": [
                    1926
                ],
                "filter_str": [
                    1931,
                    1926,
                    1935
                ],
                "match_str": [
                    1931
                ],
                "video_title": [
                    1934,
                    1935
                ],
                "_match_func": [
                    1936
                ],
                "time_expr": [
                    1947,
                    1940,
                    1943
                ],
                "seconds": [
                    1953
                ],
                "_x": [
                    1968,
                    1970,
                    1979,
                    1957
                ],
                "xpath_with_ns": [
                    1957
                ],
                "str_or_empty": [
                    1963,
                    1965,
                    1969,
                    1971,
                    1973
                ],
                "str_or_none": [
                    1963
                ],
                "node.text": [
                    1965
                ],
                "child": [
                    1967,
                    1968,
                    1969,
                    1970,
                    1971,
                    1973
                ],
                "child.tag": [
                    1968,
                    1970
                ],
                "child.tail": [
                    1969
                ],
                "parse_node": [
                    1993,
                    1971
                ],
                "xml.etree.ElementTree.tostring": [
                    1973
                ],
                "dfxp": [
                    1977,
                    1979
                ],
                "xml.etree.ElementTree.fromstring": [
                    1977
                ],
                "dfxp_data.encode": [
                    1977
                ],
                "dfxp_data": [
                    1977
                ],
                "paras": [
                    1984,
                    1979,
                    1981
                ],
                "dfxp.findall": [
                    1979
                ],
                "para": [
                    1984,
                    1985,
                    1986,
                    1988,
                    1993
                ],
                "begin_time": [
                    1985,
                    1988,
                    1991
                ],
                "parse_dfxp_time_expr": [
                    1985,
                    1986,
                    1988
                ],
                "para.attrib": [
                    1985,
                    1986,
                    1988
                ],
                "end_time": [
                    1992,
                    1986,
                    1987,
                    1988
                ],
                "para.attrib.get": [
                    1986
                ],
                "out.append": [
                    1989
                ],
                "srt_subtitles_timecode": [
                    1992,
                    1991
                ],
                "param": [
                    2017,
                    1999,
                    2000,
                    2004,
                    2005,
                    2007,
                    2008,
                    2012,
                    2013
                ],
                "command_option": [
                    2000,
                    2013,
                    2008,
                    2007
                ],
                "bool": [
                    2005
                ],
                "separator": [
                    2006,
                    2007
                ],
                "true_value": [
                    2008,
                    2007
                ],
                "false_value": [
                    2008,
                    2007
                ],
                "expected_value": [
                    2013
                ],
                "ex_args": [
                    2017,
                    2018,
                    2020,
                    2021
                ],
                "_lang_map": [
                    2026
                ],
                "cls._lang_map.get": [
                    2216
                ],
                "cls._lang_map": [
                    2216,
                    2221
                ],
                "short_name": [
                    2221,
                    2223
                ],
                "long_name": [
                    2221,
                    2222
                ],
                "cls._lang_map.items": [
                    2221
                ],
                "_country_map": [
                    2228
                ],
                "cls._country_map.get": [
                    2483
                ],
                "cls._country_map": [
                    2483
                ],
                "code.upper": [
                    2483
                ],
                "compat_urllib_request.ProxyHandler": [
                    2493,
                    2486,
                    2503
                ],
                "setattr": [
                    2490
                ],
                "self.proxy_open": [
                    2491
                ],
                "meth": [
                    2492
                ],
                "r": [
                    2492
                ],
                "proxy": [
                    2504,
                    2498,
                    2492,
                    2501
                ],
                "compat_urllib_request.ProxyHandler.__init__": [
                    2493
                ],
                "proxies": [
                    2493
                ],
                "req_proxy": [
                    2496,
                    2497,
                    2498
                ],
                "req.headers.get": [
                    2496
                ],
                "compat_urllib_request.ProxyHandler.proxy_open": [
                    2503
                ]
            },
            "filtered_variables_in_file": {
                "compiled_regex_type": [
                    55
                ],
                "re.compile": [
                    1872,
                    1909,
                    55
                ],
                "re": [
                    1410,
                    260,
                    261,
                    263,
                    906,
                    1294,
                    1295,
                    400,
                    145,
                    147,
                    1943,
                    1689,
                    1947,
                    925,
                    1694,
                    1830,
                    1707,
                    1581,
                    1326,
                    818,
                    1714,
                    948,
                    1589,
                    55,
                    1719,
                    331,
                    846,
                    847,
                    1872,
                    849,
                    1747,
                    1494,
                    1880,
                    359,
                    232,
                    1391,
                    240,
                    1909,
                    1912,
                    381,
                    1790
                ],
                "std_headers": [
                    57,
                    708
                ],
                "NO_DEFAULT": [
                    66,
                    196,
                    201,
                    211,
                    180,
                    214,
                    186
                ],
                "ENGLISH_MONTH_NAMES": [
                    68,
                    1309,
                    1319
                ],
                "pref": [
                    80,
                    81,
                    83,
                    85
                ],
                "locale.getpreferredencoding": [
                    80
                ],
                "locale": [
                    80
                ],
                "encode": [
                    81,
                    1647
                ],
                "fn": [
                    97,
                    130,
                    99,
                    133,
                    106,
                    107,
                    91
                ],
                "encodeFilename": [
                    453,
                    297,
                    91,
                    285
                ],
                "sys.version_info": [
                    353,
                    1666,
                    1669,
                    424,
                    493,
                    142,
                    622,
                    718,
                    113,
                    181,
                    438,
                    758,
                    1081,
                    92,
                    1597
                ],
                "sys": [
                    1666,
                    1669,
                    523,
                    142,
                    405,
                    534,
                    281,
                    410,
                    283,
                    284,
                    424,
                    430,
                    1073,
                    1076,
                    181,
                    438,
                    1205,
                    1081,
                    1597,
                    718,
                    1109,
                    92,
                    350,
                    353,
                    1763,
                    493,
                    622,
                    113,
                    758,
                    126
                ],
                "sys.platform": [
                    350,
                    430,
                    1076,
                    405,
                    1109,
                    281,
                    92,
                    126
                ],
                "encoding": [
                    97,
                    99,
                    1082,
                    1211,
                    1085,
                    1076,
                    1176,
                    1205,
                    1206,
                    408,
                    1651,
                    410,
                    411,
                    412,
                    93,
                    413,
                    1215
                ],
                "get_filesystem_encoding": [
                    1211,
                    93
                ],
                "path_basename": [
                    97,
                    106,
                    101
                ],
                "decode": [
                    97,
                    1825,
                    99,
                    1800,
                    759
                ],
                "os.path.basename": [
                    97,
                    101
                ],
                "os.path": [
                    352,
                    97,
                    354,
                    99,
                    355,
                    101,
                    102,
                    362,
                    363,
                    1451,
                    1459
                ],
                "os": [
                    352,
                    97,
                    130,
                    99,
                    354,
                    101,
                    102,
                    133,
                    136,
                    355,
                    362,
                    363,
                    1451,
                    1459,
                    283
                ],
                "path_dirname": [
                    107,
                    99,
                    102
                ],
                "os.path.dirname": [
                    99,
                    102
                ],
                "args": [
                    772,
                    104,
                    1481,
                    1768,
                    1624,
                    1198,
                    1647,
                    624,
                    1201,
                    114,
                    1619,
                    116,
                    664,
                    121,
                    1212,
                    1469
                ],
                "args.update": [
                    116
                ],
                "tf": [
                    133,
                    136,
                    121,
                    124,
                    125
                ],
                "tempfile.NamedTemporaryFile": [
                    121
                ],
                "tempfile": [
                    121
                ],
                "compat_kwargs": [
                    121
                ],
                "json.dump": [
                    125
                ],
                "json": [
                    1224,
                    1233,
                    125
                ],
                "obj": [
                    125
                ],
                "os.unlink": [
                    130
                ],
                "os.rename": [
                    133
                ],
                "tf.name": [
                    136,
                    133
                ],
                "os.remove": [
                    136
                ],
                "re.match": [
                    1410,
                    1830,
                    906,
                    846,
                    925,
                    1295,
                    145,
                    147,
                    948,
                    1943,
                    1689,
                    1947,
                    381,
                    1790
                ],
                "key": [
                    160,
                    145,
                    212,
                    148,
                    217,
                    221,
                    158
                ],
                "val": [
                    160,
                    146,
                    147,
                    148
                ],
                "expr": [
                    148,
                    149
                ],
                "xpath": [
                    197,
                    204,
                    148,
                    212,
                    182,
                    189,
                    184,
                    217,
                    154,
                    155,
                    157
                ],
                "node.find": [
                    184,
                    149
                ],
                "node": [
                    197,
                    1965,
                    1967,
                    212,
                    149,
                    184,
                    157
                ],
                "compat_str": [
                    448,
                    992,
                    1632,
                    1858,
                    1859,
                    421,
                    1384,
                    1672,
                    398,
                    1617,
                    466,
                    1074,
                    1491,
                    1333,
                    1622,
                    154,
                    1597
                ],
                "xpath.encode": [
                    155,
                    182
                ],
                "f": [
                    160,
                    161,
                    1153,
                    1157,
                    1158,
                    1160,
                    1167,
                    1170,
                    158,
                    157,
                    1150,
                    1151
                ],
                "node.findall": [
                    157
                ],
                "f.attrib": [
                    160,
                    158
                ],
                "f.attrib.get": [
                    160
                ],
                "components": [
                    169,
                    171
                ],
                "c.split": [
                    169
                ],
                "c": [
                    169,
                    171,
                    172,
                    173,
                    1099,
                    175,
                    1051
                ],
                "path.split": [
                    169
                ],
                "path": [
                    1360,
                    169,
                    1361
                ],
                "replaced": [
                    176,
                    177,
                    170,
                    173
                ],
                "replaced.append": [
                    176,
                    173
                ],
                "ns": [
                    176,
                    175
                ],
                "tag": [
                    176,
                    175
                ],
                "ns_map": [
                    176
                ],
                "join": [
                    1217,
                    1859,
                    1860,
                    1768,
                    1995,
                    332,
                    1294,
                    177,
                    1912,
                    950,
                    1880,
                    541
                ],
                "n": [
                    193,
                    197,
                    198,
                    199,
                    200,
                    1670,
                    1671,
                    1672,
                    1673,
                    208,
                    1657,
                    212,
                    213,
                    184,
                    185,
                    221
                ],
                "default": [
                    1376,
                    2019,
                    1380,
                    197,
                    198,
                    1384,
                    201,
                    202,
                    1230,
                    1397,
                    214,
                    215,
                    1401,
                    186,
                    187
                ],
                "fatal": [
                    216,
                    203,
                    188,
                    197
                ],
                "name": [
                    1309,
                    197,
                    1451,
                    204,
                    205,
                    1453,
                    1459,
                    1461,
                    217,
                    218,
                    189,
                    190
                ],
                "ExtractorError": [
                    544,
                    551,
                    205,
                    531,
                    218,
                    190
                ],
                "xpath_element": [
                    197
                ],
                "n.text": [
                    1671,
                    200,
                    1673,
                    1672,
                    208
                ],
                "find_xpath_attr": [
                    212
                ],
                "n.attrib": [
                    221
                ],
                "get_element_by_attribute": [
                    226
                ],
                "html": [
                    256,
                    226,
                    259,
                    260,
                    261,
                    263,
                    265,
                    266,
                    240,
                    255
                ],
                "m": [
                    1792,
                    1410,
                    1295,
                    401,
                    1297,
                    1426,
                    1300,
                    1301,
                    1429,
                    1430,
                    1431,
                    1432,
                    1433,
                    1434,
                    1435,
                    1436,
                    1437,
                    1438,
                    1439,
                    1440,
                    1441,
                    1442,
                    1443,
                    1444,
                    1445,
                    1446,
                    1700,
                    1583,
                    1711,
                    818,
                    1689,
                    821,
                    1591,
                    824,
                    825,
                    1690,
                    1719,
                    828,
                    830,
                    831,
                    331,
                    1494,
                    1495,
                    1496,
                    1881,
                    1882,
                    1883,
                    1884,
                    1885,
                    1887,
                    1888,
                    1891,
                    1893,
                    1895,
                    232,
                    1899,
                    1900,
                    1902,
                    242,
                    244,
                    1913,
                    1914,
                    1915,
                    1916,
                    1790,
                    1791
                ],
                "re.search": [
                    232,
                    818,
                    1494
                ],
                "re.escape": [
                    240,
                    1880,
                    1912,
                    1294
                ],
                "attribute": [
                    240
                ],
                "value": [
                    240,
                    1038
                ],
                "res": [
                    1547,
                    1428,
                    1557,
                    1434,
                    1436,
                    1438,
                    1440,
                    1442,
                    1444,
                    1573,
                    1446,
                    1447,
                    1575,
                    1576,
                    1714,
                    1719,
                    1720,
                    988,
                    989,
                    990,
                    992,
                    993,
                    1513,
                    1772,
                    368,
                    370,
                    371,
                    244,
                    372,
                    246,
                    247,
                    1778,
                    249,
                    1534
                ],
                "m.group": [
                    1792,
                    401,
                    1300,
                    1301,
                    1429,
                    1431,
                    1432,
                    1433,
                    1434,
                    1430,
                    1436,
                    1435,
                    1437,
                    1438,
                    1439,
                    1440,
                    1441,
                    1442,
                    1443,
                    1444,
                    1445,
                    1446,
                    1700,
                    1583,
                    1711,
                    1591,
                    824,
                    825,
                    1690,
                    1719,
                    828,
                    830,
                    831,
                    331,
                    1496,
                    1883,
                    1884,
                    1885,
                    1887,
                    1888,
                    1891,
                    1893,
                    1895,
                    1899,
                    1900,
                    1902,
                    244,
                    1915,
                    1916
                ],
                "res.startswith": [
                    246
                ],
                "unescapeHTML": [
                    249,
                    265
                ],
                "html.replace": [
                    259
                ],
                "re.sub": [
                    260,
                    261,
                    359,
                    263,
                    331,
                    1707,
                    1581,
                    1326,
                    847,
                    400,
                    849,
                    1391,
                    1714,
                    1589,
                    1719,
                    1694
                ],
                "html.strip": [
                    266
                ],
                "filename": [
                    292,
                    293,
                    1451,
                    1455,
                    913,
                    1176,
                    1459,
                    1461,
                    280,
                    284,
                    285,
                    286
                ],
                "msvcrt.setmode": [
                    283
                ],
                "msvcrt": [
                    283,
                    1158,
                    1151
                ],
                "sys.stdout.fileno": [
                    283
                ],
                "sys.stdout": [
                    283,
                    284
                ],
                "os.O_BINARY": [
                    283
                ],
                "sys.stdout.buffer": [
                    284
                ],
                "stream": [
                    297,
                    682,
                    298,
                    683,
                    285,
                    286
                ],
                "open_mode": [
                    297,
                    285
                ],
                "err.errno": [
                    288
                ],
                "err": [
                    288
                ],
                "errno.EACCES": [
                    288
                ],
                "errno": [
                    288
                ],
                "alt_filename": [
                    297,
                    298,
                    292,
                    293
                ],
                "sanitize_path": [
                    292
                ],
                "timestamp": [
                    306,
                    307,
                    303
                ],
                "timetuple": [
                    896,
                    897,
                    898,
                    304,
                    305,
                    306
                ],
                "email.utils.parsedate_tz": [
                    304,
                    896
                ],
                "email.utils": [
                    304,
                    306,
                    896
                ],
                "email": [
                    304,
                    306,
                    896
                ],
                "timestr": [
                    304
                ],
                "email.utils.mktime_tz": [
                    306
                ],
                "char": [
                    320,
                    322,
                    324,
                    326,
                    328,
                    316,
                    318
                ],
                "restricted": [
                    321,
                    324,
                    326,
                    338,
                    319
                ],
                "char.isspace": [
                    324
                ],
                "s": [
                    1408,
                    1667,
                    396,
                    398,
                    1296,
                    401,
                    1425,
                    1687,
                    1689,
                    1690,
                    1051,
                    1053,
                    1055,
                    1056,
                    1825,
                    1059,
                    1828,
                    421,
                    1830,
                    1319,
                    1064,
                    425,
                    1067,
                    431,
                    1584,
                    433,
                    1074,
                    1077,
                    1592,
                    1082,
                    1597,
                    1086,
                    1598,
                    448,
                    1089,
                    1599,
                    452,
                    453,
                    1348,
                    1349,
                    1350,
                    1354,
                    331,
                    332,
                    1355,
                    1356,
                    1738,
                    1741,
                    1742,
                    1743,
                    351,
                    352,
                    354,
                    355,
                    1252,
                    1405
                ],
                "replace": [
                    331,
                    1300
                ],
                "result": [
                    332,
                    334,
                    335,
                    336,
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    344,
                    345
                ],
                "replace_insane": [
                    332
                ],
                "is_id": [
                    333
                ],
                "result.replace": [
                    335
                ],
                "result.strip": [
                    336
                ],
                "result.startswith": [
                    338,
                    340
                ],
                "result.lstrip": [
                    342
                ],
                "drive_or_unc": [
                    352,
                    353,
                    354,
                    355,
                    356,
                    361,
                    362
                ],
                "_": [
                    352,
                    354,
                    1480,
                    1772,
                    1231
                ],
                "os.path.splitdrive": [
                    352
                ],
                "os.path.splitunc": [
                    354
                ],
                "norm_path": [
                    360,
                    355,
                    357
                ],
                "split": [
                    1361,
                    355
                ],
                "os.path.normpath": [
                    355
                ],
                "remove_start": [
                    355
                ],
                "os.path.sep": [
                    362,
                    355
                ],
                "norm_path.pop": [
                    357
                ],
                "sanitized_path": [
                    362,
                    363,
                    358
                ],
                "path_part": [
                    360,
                    359
                ],
                "sanitized_path.insert": [
                    362
                ],
                "os.path.join": [
                    363
                ],
                "el": [
                    369,
                    370,
                    371
                ],
                "iterable": [
                    369
                ],
                "res.append": [
                    371
                ],
                "entity": [
                    392,
                    378,
                    379,
                    381
                ],
                "compat_html_entities.name2codepoint": [
                    378,
                    379
                ],
                "compat_html_entities": [
                    378,
                    379
                ],
                "compat_chr": [
                    379,
                    389
                ],
                "mobj": [
                    1949,
                    1943,
                    1944,
                    1945,
                    1947,
                    1948,
                    381,
                    382,
                    383
                ],
                "numstr": [
                    384,
                    386,
                    389,
                    383
                ],
                "mobj.group": [
                    1945,
                    1949,
                    383
                ],
                "numstr.startswith": [
                    384
                ],
                "base": [
                    385,
                    388,
                    389
                ],
                "_htmlentity_transform": [
                    401
                ],
                "sys.getwindowsversion": [
                    405,
                    430
                ],
                "preferredencoding": [
                    464,
                    408,
                    1082,
                    1085,
                    990
                ],
                "sys.getfilesystemencoding": [
                    410,
                    1205
                ],
                "for_subprocess": [
                    430
                ],
                "s.encode": [
                    1667,
                    433,
                    1086,
                    1082,
                    1598
                ],
                "get_subprocess_encoding": [
                    433,
                    444
                ],
                "b": [
                    457,
                    439,
                    441,
                    442,
                    444
                ],
                "b.decode": [
                    444
                ],
                "s.decode": [
                    452
                ],
                "decodeFilename": [
                    457
                ],
                "optval": [
                    461,
                    462,
                    463,
                    464,
                    466,
                    467
                ],
                "optval.decode": [
                    464
                ],
                "secs": [
                    471,
                    472,
                    473,
                    474,
                    476
                ],
                "opts_no_check_certificate": [
                    480,
                    498,
                    483
                ],
                "params.get": [
                    480,
                    2017,
                    1999,
                    2004,
                    2012
                ],
                "params": [
                    480,
                    2017,
                    774,
                    487,
                    494,
                    1999,
                    2004,
                    501,
                    665,
                    2012
                ],
                "ssl": [
                    481,
                    482,
                    485,
                    496,
                    497,
                    499,
                    635,
                    637
                ],
                "context": [
                    482,
                    484,
                    485,
                    487,
                    496,
                    497,
                    500,
                    501
                ],
                "ssl.create_default_context": [
                    482
                ],
                "ssl.Purpose.SERVER_AUTH": [
                    482
                ],
                "ssl.Purpose": [
                    482
                ],
                "context.check_hostname": [
                    484
                ],
                "context.verify_mode": [
                    497,
                    485
                ],
                "ssl.CERT_NONE": [
                    497,
                    485
                ],
                "YoutubeDLHTTPSHandler": [
                    501,
                    494,
                    487
                ],
                "kwargs": [
                    1666,
                    1667,
                    772,
                    487,
                    777,
                    779,
                    781,
                    494,
                    623,
                    624,
                    784,
                    501,
                    664
                ],
                "ssl.SSLContext": [
                    496
                ],
                "ssl.PROTOCOL_TLSv1": [
                    496,
                    637
                ],
                "ssl.CERT_REQUIRED": [
                    499
                ],
                "context.set_default_verify_paths": [
                    500
                ],
                "ytdl_is_updateable": [
                    505
                ],
                "update_cmd": [
                    506,
                    508,
                    510
                ],
                "msg": [
                    512,
                    587,
                    526,
                    528,
                    530,
                    531,
                    566,
                    509,
                    510,
                    511
                ],
                "sys.exc_info": [
                    523,
                    534
                ],
                "compat_urllib_error.URLError": [
                    523
                ],
                "compat_urllib_error": [
                    523
                ],
                "socket.timeout": [
                    523
                ],
                "socket": [
                    523
                ],
                "UnavailableVideoError": [
                    523
                ],
                "expected": [
                    529,
                    524,
                    615
                ],
                "video_id": [
                    536,
                    525,
                    526
                ],
                "cause": [
                    528,
                    535,
                    527
                ],
                "bug_reports_message": [
                    530
                ],
                "__init__": [
                    546,
                    531,
                    566
                ],
                "self": [
                    789,
                    772,
                    773,
                    774,
                    1540,
                    778,
                    779,
                    780,
                    781,
                    782,
                    783,
                    1552,
                    1553,
                    1554,
                    531,
                    1558,
                    533,
                    534,
                    535,
                    664,
                    536,
                    665,
                    539,
                    668,
                    541,
                    669,
                    1176,
                    1177,
                    1180,
                    546,
                    1182,
                    548,
                    805,
                    1184,
                    1186,
                    1190,
                    1192,
                    1560,
                    1195,
                    1198,
                    1561,
                    1201,
                    566,
                    567,
                    2490,
                    2491,
                    1564,
                    2493,
                    961,
                    963,
                    965,
                    967,
                    968,
                    969,
                    2504,
                    587,
                    980,
                    983,
                    1504,
                    1509,
                    614,
                    615,
                    1510,
                    745,
                    1514,
                    1515,
                    1516,
                    749,
                    750,
                    1520,
                    1523,
                    1528,
                    633,
                    635,
                    636,
                    639
                ],
                "self.traceback": [
                    541,
                    539,
                    533
                ],
                "tb": [
                    533
                ],
                "self.exc_info": [
                    534,
                    567
                ],
                "self.cause": [
                    535
                ],
                "self.video_id": [
                    536
                ],
                "traceback.format_tb": [
                    541
                ],
                "traceback": [
                    541
                ],
                "UnsupportedError": [
                    546
                ],
                "url": [
                    903,
                    905,
                    547,
                    548,
                    682,
                    683,
                    1838,
                    1839,
                    1841,
                    1843,
                    1846,
                    696,
                    697,
                    700,
                    1852,
                    1604,
                    1225,
                    1231,
                    1360,
                    1234,
                    1632,
                    1633,
                    1635,
                    1636,
                    1637,
                    1638,
                    1640,
                    1643
                ],
                "self.url": [
                    548
                ],
                "DownloadError": [
                    566
                ],
                "exc_info": [
                    567
                ],
                "self.msg": [
                    587
                ],
                "self.downloaded": [
                    614
                ],
                "downloaded": [
                    614
                ],
                "self.expected": [
                    615
                ],
                "hc": [
                    640,
                    642,
                    624,
                    628,
                    629
                ],
                "http_class": [
                    624
                ],
                "source_address": [
                    625,
                    626,
                    627
                ],
                "ydl_handler._params.get": [
                    625
                ],
                "ydl_handler._params": [
                    625
                ],
                "ydl_handler": [
                    625
                ],
                "sa": [
                    633,
                    627,
                    629
                ],
                "hc.source_address": [
                    629
                ],
                "sock": [
                    632,
                    636,
                    639
                ],
                "compat_socket_create_connection": [
                    632
                ],
                "self.host": [
                    633
                ],
                "self.port": [
                    633
                ],
                "self.timeout": [
                    633
                ],
                "is_https": [
                    634
                ],
                "self.sock": [
                    635,
                    639
                ],
                "ssl.wrap_socket": [
                    635
                ],
                "self.key_file": [
                    636
                ],
                "self.cert_file": [
                    636
                ],
                "hc.connect": [
                    640
                ],
                "functools.partial": [
                    640,
                    1957,
                    1963,
                    782,
                    668
                ],
                "functools": [
                    640,
                    1957,
                    1963,
                    782,
                    668
                ],
                "_hc_connect": [
                    640
                ],
                "compat_urllib_request.HTTPHandler": [
                    664,
                    645
                ],
                "compat_urllib_request": [
                    770,
                    772,
                    645,
                    805,
                    807,
                    2503,
                    681,
                    682,
                    683,
                    787,
                    1364,
                    789,
                    2486,
                    664,
                    701,
                    2493
                ],
                "compat_urllib_request.HTTPHandler.__init__": [
                    664
                ],
                "self._params": [
                    665,
                    774
                ],
                "self.do_open": [
                    668,
                    782
                ],
                "_create_http_connection": [
                    669,
                    783
                ],
                "compat_http_client.HTTPConnection": [
                    669
                ],
                "compat_http_client": [
                    773,
                    669
                ],
                "req": [
                    784,
                    670,
                    696,
                    701,
                    703,
                    704,
                    705,
                    706,
                    2496,
                    2499,
                    711,
                    712,
                    713,
                    714,
                    715,
                    716,
                    2504,
                    718,
                    720,
                    721,
                    723
                ],
                "zlib.decompress": [
                    675,
                    677
                ],
                "zlib": [
                    675,
                    676,
                    677
                ],
                "data": [
                    1857,
                    675,
                    677,
                    1224,
                    1800,
                    1233,
                    1234
                ],
                "zlib.MAX_WBITS": [
                    675
                ],
                "zlib.error": [
                    676
                ],
                "compat_urllib_request.addinfourl": [
                    681,
                    682,
                    683
                ],
                "headers": [
                    682,
                    683
                ],
                "code": [
                    2216,
                    682,
                    684,
                    2222,
                    2483,
                    1718,
                    1695
                ],
                "ret": [
                    1058,
                    1060,
                    683,
                    684,
                    685
                ],
                "ret.code": [
                    684
                ],
                "req.get_full_url": [
                    696,
                    718
                ],
                "url_escaped": [
                    697,
                    700,
                    703
                ],
                "escape_url": [
                    760,
                    697
                ],
                "req_type": [
                    701,
                    702
                ],
                "req.get_method": [
                    701
                ],
                "HEADRequest": [
                    701
                ],
                "compat_urllib_request.Request": [
                    1364,
                    701
                ],
                "new_req": [
                    705,
                    706,
                    702
                ],
                "req.data": [
                    703
                ],
                "req.headers": [
                    2496,
                    2499,
                    711,
                    713,
                    714,
                    715,
                    716,
                    703
                ],
                "req.origin_req_host": [
                    704
                ],
                "req.unverifiable": [
                    704
                ],
                "new_req.timeout": [
                    705
                ],
                "req.timeout": [
                    705
                ],
                "h": [
                    1059,
                    708,
                    711,
                    712,
                    1046,
                    1784,
                    1023
                ],
                "v": [
                    1700,
                    1701,
                    1702,
                    1703,
                    1704,
                    1705,
                    1706,
                    1707,
                    1711,
                    1712,
                    1858,
                    708,
                    712,
                    1747,
                    1371,
                    1372,
                    1373,
                    1374,
                    1375,
                    1378,
                    1384,
                    1906,
                    1651,
                    1396,
                    1907,
                    1399
                ],
                "std_headers.items": [
                    708
                ],
                "h.capitalize": [
                    711
                ],
                "req.add_header": [
                    712
                ],
                "req._Request__original": [
                    720
                ],
                "req._Request__original.partition": [
                    720
                ],
                "req._Request__r_type": [
                    721
                ],
                "req._Request__r_type.partition": [
                    721
                ],
                "old_resp": [
                    745,
                    746,
                    750,
                    751,
                    726
                ],
                "resp": [
                    745,
                    746,
                    748,
                    749,
                    750,
                    751,
                    754,
                    755,
                    726,
                    728,
                    729,
                    762,
                    763,
                    764
                ],
                "resp.headers.get": [
                    728,
                    755,
                    748
                ],
                "resp.headers": [
                    748,
                    755,
                    728,
                    762,
                    763
                ],
                "content": [
                    729,
                    730,
                    738
                ],
                "resp.read": [
                    729,
                    749
                ],
                "gz": [
                    738,
                    739,
                    749,
                    750,
                    730,
                    732
                ],
                "gzip.GzipFile": [
                    730,
                    738
                ],
                "gzip": [
                    730,
                    738
                ],
                "io.BytesIO": [
                    738,
                    739,
                    749,
                    730,
                    732
                ],
                "io": [
                    738,
                    739,
                    749,
                    1014,
                    1176,
                    730,
                    732
                ],
                "uncompressed": [
                    745,
                    739,
                    732
                ],
                "gz.read": [
                    739,
                    732
                ],
                "i": [
                    736,
                    738,
                    1051
                ],
                "original_ioerror": [
                    744
                ],
                "self.addinfourl_wrapper": [
                    745,
                    750
                ],
                "old_resp.headers": [
                    745,
                    750
                ],
                "old_resp.url": [
                    745,
                    750
                ],
                "old_resp.code": [
                    745,
                    750
                ],
                "resp.msg": [
                    746,
                    751
                ],
                "old_resp.msg": [
                    746,
                    751
                ],
                "self.deflate": [
                    749
                ],
                "resp.code": [
                    754
                ],
                "location": [
                    755,
                    756,
                    759,
                    760,
                    761
                ],
                "location.encode": [
                    759
                ],
                "location_escaped": [
                    760,
                    761,
                    763
                ],
                "https_request": [
                    766,
                    807
                ],
                "http_request": [
                    766
                ],
                "https_response": [
                    808,
                    767
                ],
                "http_response": [
                    808,
                    767
                ],
                "compat_urllib_request.HTTPSHandler": [
                    770,
                    772
                ],
                "compat_urllib_request.HTTPSHandler.__init__": [
                    772
                ],
                "self._https_conn_class": [
                    773,
                    783
                ],
                "https_conn_class": [
                    773
                ],
                "compat_http_client.HTTPSConnection": [
                    773
                ],
                "self._context": [
                    779
                ],
                "self._check_hostname": [
                    781
                ],
                "compat_urllib_request.HTTPCookieProcessor": [
                    805,
                    787,
                    789,
                    807
                ],
                "compat_urllib_request.HTTPCookieProcessor.__init__": [
                    789
                ],
                "cookiejar": [
                    789
                ],
                "compat_urllib_request.HTTPCookieProcessor.http_response": [
                    805
                ],
                "request": [
                    805
                ],
                "response": [
                    805
                ],
                "compat_urllib_request.HTTPCookieProcessor.http_request": [
                    807
                ],
                "date_str": [
                    896,
                    833,
                    840,
                    844,
                    814,
                    846,
                    847,
                    849,
                    942,
                    820,
                    948,
                    952,
                    824,
                    921,
                    923,
                    892,
                    925
                ],
                "timezone": [
                    833,
                    817,
                    822,
                    826,
                    829
                ],
                "datetime.timedelta": [
                    940,
                    822,
                    826,
                    924,
                    829
                ],
                "datetime": [
                    833,
                    898,
                    963,
                    967,
                    924,
                    940,
                    942,
                    978,
                    822,
                    920,
                    826,
                    892,
                    829
                ],
                "sign": [
                    929,
                    831,
                    828,
                    830,
                    927
                ],
                "date_format": [
                    832,
                    833
                ],
                "delimiter": [
                    832
                ],
                "dt": [
                    833,
                    834
                ],
                "datetime.datetime.strptime": [
                    833,
                    892,
                    942
                ],
                "datetime.datetime": [
                    833,
                    898,
                    963,
                    967,
                    942,
                    892
                ],
                "calendar.timegm": [
                    834
                ],
                "calendar": [
                    834
                ],
                "dt.timetuple": [
                    834
                ],
                "upload_date": [
                    898,
                    899,
                    842,
                    892,
                    895
                ],
                "date_str.replace": [
                    844
                ],
                "format_expressions": [
                    875,
                    883,
                    890,
                    851
                ],
                "day_first": [
                    874
                ],
                "format_expressions.extend": [
                    883,
                    875
                ],
                "expression": [
                    890,
                    892
                ],
                "strftime": [
                    898,
                    892
                ],
                "default_ext": [
                    904,
                    909
                ],
                "guess": [
                    905,
                    906,
                    907
                ],
                "rpartition": [
                    905
                ],
                "url.partition": [
                    905
                ],
                "filename.rsplit": [
                    913
                ],
                "sub_lang": [
                    913
                ],
                "sub_format": [
                    913
                ],
                "today": [
                    920,
                    922,
                    924,
                    941
                ],
                "datetime.date.today": [
                    920
                ],
                "datetime.date": [
                    920,
                    978
                ],
                "match": [
                    928,
                    931,
                    948,
                    949,
                    950,
                    925,
                    926,
                    927
                ],
                "match.group": [
                    928,
                    931,
                    927
                ],
                "time": [
                    928,
                    930,
                    935,
                    938,
                    940
                ],
                "unit": [
                    931,
                    933,
                    934,
                    936,
                    937,
                    939,
                    940
                ],
                "delta": [
                    940,
                    941
                ],
                "date": [
                    978,
                    979,
                    980,
                    942
                ],
                "match.groups": [
                    950
                ],
                "start": [
                    960,
                    961,
                    1348,
                    1349,
                    1514,
                    1517,
                    1523,
                    1524,
                    1558,
                    1561,
                    1562
                ],
                "self.start": [
                    961,
                    963,
                    968,
                    980,
                    983
                ],
                "date_from_str": [
                    961,
                    979,
                    965
                ],
                "datetime.datetime.min.date": [
                    963
                ],
                "datetime.datetime.min": [
                    963
                ],
                "end": [
                    964,
                    965,
                    1545,
                    1354,
                    1355,
                    1560,
                    1528,
                    1529,
                    1562
                ],
                "self.end": [
                    965,
                    967,
                    968,
                    980,
                    983
                ],
                "datetime.datetime.max.date": [
                    967
                ],
                "datetime.datetime.max": [
                    967
                ],
                "cls": [
                    2216,
                    2483,
                    2221,
                    974
                ],
                "day": [
                    974
                ],
                "self.start.isoformat": [
                    983
                ],
                "self.end.isoformat": [
                    983
                ],
                "platform.platform": [
                    988
                ],
                "platform": [
                    988
                ],
                "res.decode": [
                    990
                ],
                "WIN_OUTPUT_IDS": [
                    1017,
                    1004,
                    1023
                ],
                "fileno": [
                    1017,
                    1010,
                    1023
                ],
                "out.fileno": [
                    1010
                ],
                "out": [
                    1965,
                    1072,
                    1073,
                    1969,
                    1971,
                    1076,
                    1077,
                    1973,
                    1975,
                    1080,
                    1978,
                    1083,
                    1084,
                    1085,
                    1087,
                    1089,
                    1090,
                    1989,
                    1480,
                    1995,
                    1485,
                    1486,
                    1487,
                    1010
                ],
                "io.UnsupportedOperation": [
                    1014
                ],
                "GetStdHandle": [
                    1020,
                    1023
                ],
                "ctypes.WINFUNCTYPE": [
                    1025,
                    1034,
                    1020,
                    1031
                ],
                "ctypes": [
                    1025,
                    1026,
                    1027,
                    1028,
                    1029,
                    1154,
                    1031,
                    1161,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    1044,
                    1150,
                    1059,
                    1335,
                    1339,
                    1113,
                    1115,
                    1116,
                    1117,
                    1118,
                    1119,
                    1122,
                    1125,
                    1126,
                    1127,
                    1128,
                    1129,
                    1130,
                    1132,
                    1135,
                    1136,
                    1137,
                    1138,
                    1139,
                    1141,
                    1020,
                    1021,
                    1022
                ],
                "ctypes.wintypes.HANDLE": [
                    1026,
                    1125,
                    1035,
                    1135,
                    1021,
                    1119
                ],
                "ctypes.wintypes": [
                    1026,
                    1027,
                    1028,
                    1029,
                    1031,
                    1035,
                    1036,
                    1038,
                    1044,
                    1115,
                    1116,
                    1117,
                    1118,
                    1119,
                    1125,
                    1126,
                    1127,
                    1128,
                    1129,
                    1132,
                    1135,
                    1136,
                    1137,
                    1138,
                    1141,
                    1021
                ],
                "ctypes.wintypes.DWORD": [
                    1027,
                    1029,
                    1126,
                    1031,
                    1127,
                    1128,
                    1129,
                    1036,
                    1038,
                    1136,
                    1137,
                    1138,
                    1044,
                    1117,
                    1021,
                    1118
                ],
                "ctypes.windll.kernel32": [
                    1122,
                    1028,
                    1031,
                    1037,
                    1022
                ],
                "ctypes.windll": [
                    1122,
                    1028,
                    1031,
                    1037,
                    1022
                ],
                "WriteConsoleW": [
                    1025,
                    1058
                ],
                "ctypes.wintypes.BOOL": [
                    1026,
                    1035,
                    1132,
                    1141
                ],
                "ctypes.wintypes.LPWSTR": [
                    1026
                ],
                "ctypes.POINTER": [
                    1139,
                    1130,
                    1027,
                    1036
                ],
                "ctypes.wintypes.LPVOID": [
                    1115,
                    1028,
                    1116
                ],
                "written": [
                    1059,
                    1029,
                    1063,
                    1066,
                    1067
                ],
                "GetFileType": [
                    1043,
                    1031
                ],
                "FILE_TYPE_CHAR": [
                    1032,
                    1043
                ],
                "FILE_TYPE_REMOTE": [
                    1033,
                    1043
                ],
                "GetConsoleMode": [
                    1034,
                    1044
                ],
                "INVALID_HANDLE_VALUE": [
                    1041,
                    1038
                ],
                "handle": [
                    1152,
                    1158,
                    1159,
                    1041,
                    1043,
                    1044,
                    1151
                ],
                "ctypes.byref": [
                    1059,
                    1044
                ],
                "not_a_console": [
                    1046
                ],
                "count": [
                    1056,
                    1059,
                    1062
                ],
                "next_nonbmp_pos": [
                    1056
                ],
                "written.value": [
                    1066,
                    1067,
                    1063
                ],
                "sys.stderr": [
                    1073
                ],
                "_windows_write_string": [
                    1077
                ],
                "byt": [
                    1082,
                    1083,
                    1086,
                    1087
                ],
                "out.write": [
                    1089,
                    1083
                ],
                "enc": [
                    1825,
                    1085,
                    1086,
                    1823
                ],
                "out.buffer.write": [
                    1087
                ],
                "out.buffer": [
                    1087
                ],
                "out.flush": [
                    1090
                ],
                "bs": [
                    1096,
                    1097,
                    1099,
                    1094
                ],
                "xs": [
                    1105,
                    1103
                ],
                "struct_pack": [
                    1105,
                    1626
                ],
                "ctypes.Structure": [
                    1113
                ],
                "_fields_": [
                    1114
                ],
                "kernel32": [
                    1122,
                    1123,
                    1133
                ],
                "LockFileEx": [
                    1132,
                    1123,
                    1124,
                    1152
                ],
                "kernel32.LockFileEx": [
                    1123
                ],
                "LockFileEx.argtypes": [
                    1124
                ],
                "OVERLAPPED": [
                    1130,
                    1139,
                    1146
                ],
                "LockFileEx.restype": [
                    1132
                ],
                "UnlockFileEx": [
                    1141,
                    1133,
                    1134,
                    1159
                ],
                "kernel32.UnlockFileEx": [
                    1133
                ],
                "UnlockFileEx.argtypes": [
                    1134
                ],
                "UnlockFileEx.restype": [
                    1141
                ],
                "whole_low": [
                    1160,
                    1153,
                    1142
                ],
                "whole_high": [
                    1160,
                    1153,
                    1143
                ],
                "overlapped": [
                    1146,
                    1147,
                    1148,
                    1149,
                    1150
                ],
                "overlapped.Offset": [
                    1147
                ],
                "overlapped.OffsetHigh": [
                    1148
                ],
                "overlapped.hEvent": [
                    1149
                ],
                "f._lock_file_overlapped_p": [
                    1160,
                    1153,
                    1157,
                    1150
                ],
                "ctypes.pointer": [
                    1150
                ],
                "msvcrt.get_osfhandle": [
                    1158,
                    1151
                ],
                "f.fileno": [
                    1158,
                    1151
                ],
                "exclusive": [
                    1152,
                    1180,
                    1182,
                    1167
                ],
                "ctypes.FormatError": [
                    1161,
                    1154
                ],
                "fcntl.flock": [
                    1170,
                    1167
                ],
                "fcntl": [
                    1170,
                    1167
                ],
                "fcntl.LOCK_EX": [
                    1167
                ],
                "fcntl.LOCK_SH": [
                    1167
                ],
                "fcntl.LOCK_UN": [
                    1170
                ],
                "mode": [
                    1176,
                    1177,
                    1175
                ],
                "self.f": [
                    1184,
                    1190,
                    1192,
                    1195,
                    1198,
                    1201,
                    1176,
                    1182
                ],
                "io.open": [
                    1176
                ],
                "self.mode": [
                    1177,
                    1180
                ],
                "_lock_file": [
                    1182
                ],
                "self.f.close": [
                    1184,
                    1192
                ],
                "_unlock_file": [
                    1190
                ],
                "self.f.write": [
                    1198
                ],
                "self.f.read": [
                    1201
                ],
                "quoted_args": [
                    1216,
                    1217,
                    1210
                ],
                "a": [
                    1216,
                    1768,
                    1212,
                    1213,
                    1215
                ],
                "a.decode": [
                    1215
                ],
                "quoted_args.append": [
                    1216
                ],
                "pipes.quote": [
                    1216
                ],
                "pipes": [
                    1216
                ],
                "sdata": [
                    1232,
                    1225,
                    1231,
                    1223
                ],
                "compat_urllib_parse.urlencode": [
                    1647,
                    1223
                ],
                "compat_urllib_parse": [
                    1647,
                    1599,
                    1223
                ],
                "json.dumps": [
                    1224
                ],
                "smug_url": [
                    1229,
                    1230,
                    1231
                ],
                "smug_url.rpartition": [
                    1231
                ],
                "jsond": [
                    1232,
                    1233
                ],
                "compat_parse_qs": [
                    1232
                ],
                "json.loads": [
                    1233
                ],
                "exponent": [
                    1243,
                    1245,
                    1246,
                    1247
                ],
                "math.log": [
                    1245
                ],
                "math": [
                    1245
                ],
                "suffix": [
                    1248,
                    1246
                ],
                "converted": [
                    1248,
                    1247
                ],
                "_UNIT_TABLE": [
                    1257,
                    1301,
                    1294
                ],
                "units_re": [
                    1296,
                    1294
                ],
                "u": [
                    1294
                ],
                "num_str": [
                    1300,
                    1302
                ],
                "mult": [
                    1301,
                    1302
                ],
                "ENGLISH_MONTH_NAMES.index": [
                    1309
                ],
                "index": [
                    1984,
                    1990,
                    1319
                ],
                "abbrev": [
                    1319
                ],
                "xml_str": [
                    1329
                ],
                "title": [
                    1338,
                    1333
                ],
                "libc": [
                    1342,
                    1335
                ],
                "ctypes.cdll.LoadLibrary": [
                    1335
                ],
                "ctypes.cdll": [
                    1335
                ],
                "title_bytes": [
                    1338,
                    1339,
                    1340
                ],
                "title.encode": [
                    1338
                ],
                "buf": [
                    1339,
                    1340,
                    1342
                ],
                "ctypes.create_string_buffer": [
                    1339
                ],
                "buf.value": [
                    1340
                ],
                "libc.prctl": [
                    1342
                ],
                "s.startswith": [
                    1348
                ],
                "s.endswith": [
                    1354
                ],
                "compat_urlparse.urlparse": [
                    1360
                ],
                "compat_urlparse": [
                    1360
                ],
                "path.strip": [
                    1361
                ],
                "get_attr": [
                    1370,
                    1372
                ],
                "invscale": [
                    1378,
                    1399
                ],
                "scale": [
                    1378,
                    1399
                ],
                "int_str": [
                    1392,
                    1389,
                    1391
                ],
                "compat_basestring": [
                    1405
                ],
                "s.strip": [
                    1408
                ],
                "float_or_none": [
                    1432,
                    1430
                ],
                "real_ext": [
                    1451,
                    1453,
                    1454,
                    1459,
                    1461
                ],
                "os.path.splitext": [
                    1451,
                    1459
                ],
                "expected_real_ext": [
                    1461,
                    1454
                ],
                "ext": [
                    1453,
                    1455,
                    1846,
                    1847,
                    1462,
                    1849
                ],
                "communicate": [
                    1480,
                    1469
                ],
                "subprocess.Popen": [
                    1480,
                    1469
                ],
                "subprocess": [
                    1480,
                    1482,
                    1469
                ],
                "exe": [
                    1472,
                    1481,
                    1469
                ],
                "subprocess.PIPE": [
                    1482,
                    1469
                ],
                "encodeArgument": [
                    1481
                ],
                "subprocess.STDOUT": [
                    1482
                ],
                "out.decode": [
                    1486
                ],
                "detect_exe_version": [
                    1487
                ],
                "version_re": [
                    1492,
                    1493,
                    1494,
                    1487
                ],
                "unrecognized": [
                    1498,
                    1487
                ],
                "output": [
                    1491,
                    1494
                ],
                "self.getslice": [
                    1504
                ],
                "PagedList": [
                    1507,
                    1550
                ],
                "self._pagefunc": [
                    1520,
                    1552,
                    1564,
                    1509
                ],
                "pagefunc": [
                    1552,
                    1509
                ],
                "self._pagesize": [
                    1540,
                    1510,
                    1560,
                    1514,
                    1515,
                    1516,
                    1554,
                    1523,
                    1558,
                    1528,
                    1561
                ],
                "pagesize": [
                    1554,
                    1510
                ],
                "pagenum": [
                    1514,
                    1515,
                    1516,
                    1520,
                    1563,
                    1564
                ],
                "itertools.count": [
                    1984,
                    1514
                ],
                "itertools": [
                    1984,
                    1514
                ],
                "firstid": [
                    1529,
                    1515,
                    1524
                ],
                "nextfirstid": [
                    1545,
                    1516,
                    1517,
                    1524,
                    1529
                ],
                "page_results": [
                    1520,
                    1540,
                    1533,
                    1534
                ],
                "startv": [
                    1522,
                    1540,
                    1532,
                    1533
                ],
                "endv": [
                    1532,
                    1533,
                    1527
                ],
                "res.extend": [
                    1573,
                    1534,
                    1575
                ],
                "self._pagecount": [
                    1560,
                    1553
                ],
                "pagecount": [
                    1553
                ],
                "start_page": [
                    1561,
                    1563,
                    1558
                ],
                "end_page": [
                    1563,
                    1559
                ],
                "skip_elems": [
                    1561,
                    1565,
                    1566,
                    1567
                ],
                "only_more": [
                    1568,
                    1569,
                    1570,
                    1572,
                    1562
                ],
                "page": [
                    1569,
                    1570,
                    1572,
                    1573,
                    1575,
                    1564,
                    1566
                ],
                "unicode_escape": [
                    1580,
                    1591,
                    1588,
                    1583
                ],
                "codecs.getdecoder": [
                    1580,
                    1588
                ],
                "codecs": [
                    1580,
                    1588
                ],
                "compat_urllib_parse.quote": [
                    1599
                ],
                "url_parsed": [
                    1604,
                    1605,
                    1606,
                    1607,
                    1608,
                    1609
                ],
                "compat_urllib_parse_urlparse": [
                    1604,
                    1852
                ],
                "geturl": [
                    1605
                ],
                "url_parsed._replace": [
                    1605
                ],
                "escape_rfc3986": [
                    1608,
                    1609,
                    1606,
                    1607
                ],
                "url_parsed.path": [
                    1606
                ],
                "url_parsed.params": [
                    1607
                ],
                "url_parsed.query": [
                    1608
                ],
                "url_parsed.fragment": [
                    1609
                ],
                "struct.pack": [
                    1626,
                    1619,
                    1613
                ],
                "struct": [
                    1613,
                    1619,
                    1624,
                    1626,
                    1627
                ],
                "spec": [
                    1617,
                    1618,
                    1619,
                    1622,
                    1623,
                    1624
                ],
                "spec.encode": [
                    1618,
                    1623
                ],
                "struct.unpack": [
                    1624,
                    1627
                ],
                "struct_unpack": [
                    1627
                ],
                "url.decode": [
                    1633
                ],
                "BOM_UTF8": [
                    1634,
                    1635,
                    1636
                ],
                "url.startswith": [
                    1635,
                    1638,
                    1839,
                    1841,
                    1843
                ],
                "url.strip": [
                    1637
                ],
                "contextlib.closing": [
                    1642
                ],
                "contextlib": [
                    1642
                ],
                "batch_fd": [
                    1642
                ],
                "fd": [
                    1642,
                    1643
                ],
                "fixup": [
                    1643
                ],
                "kargs": [
                    1647
                ],
                "k.encode": [
                    1651
                ],
                "k": [
                    1651
                ],
                "v.encode": [
                    1651
                ],
                "d.items": [
                    1651
                ],
                "d": [
                    1651
                ],
                "etree_iter": [
                    1657,
                    1670,
                    1655
                ],
                "xml.etree.ElementTree.Element.iter": [
                    1655
                ],
                "xml.etree.ElementTree.Element": [
                    1655
                ],
                "xml.etree.ElementTree": [
                    1665,
                    1667,
                    1973,
                    1655,
                    1977,
                    1661
                ],
                "xml.etree": [
                    1665,
                    1667,
                    1973,
                    1655,
                    1977,
                    1661
                ],
                "xml": [
                    1665,
                    1667,
                    1973,
                    1655,
                    1977,
                    1661
                ],
                "n.findall": [
                    1657
                ],
                "xml.etree.ElementTree.TreeBuilder": [
                    1661
                ],
                "parser": [
                    1665,
                    1666
                ],
                "xml.etree.ElementTree.XMLParser": [
                    1665
                ],
                "TreeBuilder": [
                    1665
                ],
                "tree": [
                    1674,
                    1667,
                    1670
                ],
                "xml.etree.ElementTree.XML": [
                    1667
                ],
                "n.text.decode": [
                    1673
                ],
                "US_RATINGS": [
                    1690,
                    1677
                ],
                "US_RATINGS.get": [
                    1690
                ],
                "v.startswith": [
                    1705,
                    1703
                ],
                "fix_kv": [
                    1718
                ],
                "quality_ids.index": [
                    1727
                ],
                "quality_ids": [
                    1727
                ],
                "qid": [
                    1727
                ],
                "q": [
                    1730
                ],
                "DEFAULT_OUTTMPL": [
                    1733
                ],
                "ELLIPSES": [
                    1740,
                    1742
                ],
                "length": [
                    1741,
                    1742
                ],
                "e": [
                    1792,
                    1793,
                    1794,
                    1747
                ],
                "re.split": [
                    1747
                ],
                "version": [
                    1754,
                    1751
                ],
                "assume_new": [
                    1752,
                    1756
                ],
                "version_tuple": [
                    1754
                ],
                "limit": [
                    1754
                ],
                "get": [
                    1763,
                    1774
                ],
                "zipimporter": [
                    1763
                ],
                "shlex_quote": [
                    1768
                ],
                "mt.rpartition": [
                    1772
                ],
                "mt": [
                    1772
                ],
                "url_handle.headers": [
                    1784,
                    1783
                ],
                "url_handle": [
                    1784,
                    1786,
                    1783
                ],
                "getheader": [
                    1784,
                    1786,
                    1788,
                    1796
                ],
                "url_handle.info": [
                    1786
                ],
                "cd": [
                    1788,
                    1789,
                    1790
                ],
                "determine_ext": [
                    1792,
                    1846
                ],
                "mimetype2ext": [
                    1796
                ],
                "mime_type": [
                    1800
                ],
                "base64.b64encode": [
                    1800
                ],
                "base64": [
                    1800
                ],
                "age_limit": [
                    1810,
                    1806
                ],
                "content_limit": [
                    1808,
                    1810
                ],
                "BOMS": [
                    1816,
                    1823
                ],
                "bom": [
                    1824,
                    1825,
                    1823
                ],
                "first_bytes.startswith": [
                    1824
                ],
                "first_bytes": [
                    1824,
                    1825,
                    1828
                ],
                "first_bytes.decode": [
                    1828
                ],
                "protocol": [
                    1834,
                    1835,
                    1836
                ],
                "info_dict.get": [
                    1834,
                    1934
                ],
                "info_dict": [
                    1934,
                    1834,
                    1931,
                    1838
                ],
                "scheme": [
                    1852
                ],
                "table": [
                    1857,
                    1858,
                    1860
                ],
                "header_row": [
                    1857
                ],
                "max_lens": [
                    1858,
                    1859
                ],
                "col": [
                    1858
                ],
                "format_str": [
                    1859,
                    1860
                ],
                "ml": [
                    1859
                ],
                "row": [
                    1860
                ],
                "COMPARISON_OPERATORS": [
                    1864,
                    1883,
                    1880
                ],
                "operator.lt": [
                    1865
                ],
                "operator": [
                    1865,
                    1866,
                    1867,
                    1868,
                    1869,
                    1870
                ],
                "operator.le": [
                    1866
                ],
                "operator.gt": [
                    1867
                ],
                "operator.ge": [
                    1868
                ],
                "operator.eq": [
                    1869
                ],
                "operator.ne": [
                    1870
                ],
                "operator_rex": [
                    1872,
                    1881,
                    1909,
                    1913
                ],
                "COMPARISON_OPERATORS.keys": [
                    1880
                ],
                "operator_rex.search": [
                    1881,
                    1913
                ],
                "filter_part": [
                    1926,
                    1899,
                    1881,
                    1913,
                    1919
                ],
                "op": [
                    1915,
                    1883,
                    1917,
                    1903
                ],
                "comparison_value": [
                    1888,
                    1891,
                    1893,
                    1894,
                    1895,
                    1896,
                    1903
                ],
                "parse_filesize": [
                    1893,
                    1895
                ],
                "actual_value": [
                    1900,
                    1901,
                    1903,
                    1916,
                    1917
                ],
                "dct.get": [
                    1916,
                    1900
                ],
                "dct": [
                    1916,
                    1900,
                    1926
                ],
                "UNARY_OPERATORS": [
                    1912,
                    1905,
                    1915
                ],
                "UNARY_OPERATORS.keys": [
                    1912
                ],
                "_match_one": [
                    1926
                ],
                "filter_str.split": [
                    1926
                ],
                "filter_str": [
                    1931,
                    1926,
                    1935
                ],
                "match_str": [
                    1931
                ],
                "video_title": [
                    1934,
                    1935
                ],
                "_match_func": [
                    1936
                ],
                "time_expr": [
                    1947,
                    1940,
                    1943
                ],
                "seconds": [
                    1953
                ],
                "_x": [
                    1968,
                    1970,
                    1979,
                    1957
                ],
                "xpath_with_ns": [
                    1957
                ],
                "str_or_empty": [
                    1963,
                    1965,
                    1969,
                    1971,
                    1973
                ],
                "str_or_none": [
                    1963
                ],
                "node.text": [
                    1965
                ],
                "child": [
                    1967,
                    1968,
                    1969,
                    1970,
                    1971,
                    1973
                ],
                "child.tag": [
                    1968,
                    1970
                ],
                "child.tail": [
                    1969
                ],
                "parse_node": [
                    1993,
                    1971
                ],
                "xml.etree.ElementTree.tostring": [
                    1973
                ],
                "dfxp": [
                    1977,
                    1979
                ],
                "xml.etree.ElementTree.fromstring": [
                    1977
                ],
                "dfxp_data.encode": [
                    1977
                ],
                "dfxp_data": [
                    1977
                ],
                "paras": [
                    1984,
                    1979,
                    1981
                ],
                "dfxp.findall": [
                    1979
                ],
                "para": [
                    1984,
                    1985,
                    1986,
                    1988,
                    1993
                ],
                "begin_time": [
                    1985,
                    1988,
                    1991
                ],
                "parse_dfxp_time_expr": [
                    1985,
                    1986,
                    1988
                ],
                "para.attrib": [
                    1985,
                    1986,
                    1988
                ],
                "end_time": [
                    1992,
                    1986,
                    1987,
                    1988
                ],
                "para.attrib.get": [
                    1986
                ],
                "out.append": [
                    1989
                ],
                "srt_subtitles_timecode": [
                    1992,
                    1991
                ],
                "param": [
                    2017,
                    1999,
                    2000,
                    2004,
                    2005,
                    2007,
                    2008,
                    2012,
                    2013
                ],
                "command_option": [
                    2000,
                    2013,
                    2008,
                    2007
                ],
                "separator": [
                    2006,
                    2007
                ],
                "true_value": [
                    2008,
                    2007
                ],
                "false_value": [
                    2008,
                    2007
                ],
                "expected_value": [
                    2013
                ],
                "ex_args": [
                    2017,
                    2018,
                    2020,
                    2021
                ],
                "_lang_map": [
                    2026
                ],
                "cls._lang_map.get": [
                    2216
                ],
                "cls._lang_map": [
                    2216,
                    2221
                ],
                "short_name": [
                    2221,
                    2223
                ],
                "long_name": [
                    2221,
                    2222
                ],
                "cls._lang_map.items": [
                    2221
                ],
                "_country_map": [
                    2228
                ],
                "cls._country_map.get": [
                    2483
                ],
                "cls._country_map": [
                    2483
                ],
                "code.upper": [
                    2483
                ],
                "compat_urllib_request.ProxyHandler": [
                    2493,
                    2486,
                    2503
                ],
                "self.proxy_open": [
                    2491
                ],
                "meth": [
                    2492
                ],
                "r": [
                    2492
                ],
                "proxy": [
                    2504,
                    2498,
                    2492,
                    2501
                ],
                "compat_urllib_request.ProxyHandler.__init__": [
                    2493
                ],
                "proxies": [
                    2493
                ],
                "req_proxy": [
                    2496,
                    2497,
                    2498
                ],
                "req.headers.get": [
                    2496
                ],
                "compat_urllib_request.ProxyHandler.proxy_open": [
                    2503
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_7/test/test_utils.py",
                "test_function": "test_js_to_json_realworld",
                "test_function_code": "    def test_js_to_json_realworld(self):\n        inp = '''{\n            'clip':{'provider':'pseudo'}\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n            \"clip\":{\"provider\":\"pseudo\"}\n        }''')\n        json.loads(js_to_json(inp))\n\n        inp = '''{\n            'playlist':[{'controls':{'all':null}}]\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n            \"playlist\":[{\"controls\":{\"all\":null}}]\n        }''')\n\n        inp = '''\"The CW\\\\'s \\\\'Crazy Ex-Girlfriend\\\\'\"'''\n        self.assertEqual(js_to_json(inp), '''\"The CW's 'Crazy Ex-Girlfriend'\"''')\n\n        inp = '\"SAND Number: SAND 2013-7800P\\\\nPresenter: Tom Russo\\\\nHabanero Software Training - Xyce Software\\\\nXyce, Sandia\\\\u0027s\"'\n        json_code = js_to_json(inp)\n        self.assertEqual(json.loads(json_code), json.loads(inp))",
                "test_error": "AssertionError: '\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"' != '\"The CW\\'s \\'Crazy Ex-Girlfriend\\'\"'\n- \"The CW\\'s \\'Crazy Ex-Girlfriend\\'\"\n?        -   -                    -\n+ \"The CW's 'Crazy Ex-Girlfriend'\"",
                "full_test_error": "self = <test.test_utils.TestUtil testMethod=test_js_to_json_realworld>\n\n    def test_js_to_json_realworld(self):\n        inp = '''{\n            'clip':{'provider':'pseudo'}\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n            \"clip\":{\"provider\":\"pseudo\"}\n        }''')\n        json.loads(js_to_json(inp))\n    \n        inp = '''{\n            'playlist':[{'controls':{'all':null}}]\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n            \"playlist\":[{\"controls\":{\"all\":null}}]\n        }''')\n    \n        inp = '''\"The CW\\\\'s \\\\'Crazy Ex-Girlfriend\\\\'\"'''\n>       self.assertEqual(js_to_json(inp), '''\"The CW's 'Crazy Ex-Girlfriend'\"''')\nE       AssertionError: '\"The CW\\\\\\'s \\\\\\'Crazy Ex-Girlfriend\\\\\\'\"' != '\"The CW\\'s \\'Crazy Ex-Girlfriend\\'\"'\nE       - \"The CW\\'s \\'Crazy Ex-Girlfriend\\'\"\nE       ?        -   -                    -\nE       + \"The CW's 'Crazy Ex-Girlfriend'\"\n\ntest/test_utils.py:499: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}