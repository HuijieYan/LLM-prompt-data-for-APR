{
    "youtube-dl": [
        {
            "bugID": 29,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 852,
            "file_name": "youtube_dl/utils.py",
            "replace_code": "def unified_strdate(date_str, day_first=True):\n    import re\n    import datetime\n    import email.utils\n    \"\"\"Return a string with the date in the format YYYYMMDD\"\"\"\n    \n    if date_str is None:\n        return None\n    \n    upload_date = None\n    # parsing logic to extract the date from different formats\n    format_expressions = [\n        '%d %B %Y', '%d %b %Y', '%B %d %Y', '%b %d %Y', '%b %dst %Y %I:%M%p',\n        '%b %dnd %Y %I:%M%p', '%b %dth %Y %I:%M%p', '%Y %m %d', '%Y-%m-%d',\n        '%Y/%m/%d', '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f',\n        '%d.%m.%Y %H:%M', '%d.%m.%Y %H.%M', '%Y-%m-%dT%H:%M:%SZ', '%Y-%m-%dT%H:%M:%S.%fZ',\n        '%Y-%m-%dT%H:%M:%S.%f0Z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M:%S.%f', '%Y-%m-%dT%H:%M',\n        '%d-%m-%Y', '%d.%m.%Y', '%d/%m/%Y', '%d/%m/%y', '%d/%m/%Y %H:%M:%S'\n    ]\n    \n    if day_first:\n        format_expressions.extend([\n            '%d-%m-%Y', '%d.%m.%Y', '%d/%m/%Y', '%d/%m/%y', '%d/%m/%Y %H:%M:%S'\n        ])\n    else:\n        format_expressions.extend([\n            '%m-%d-%Y', '%m.%d.%Y', '%m/%d/%Y', '%m/%d/%y', '%m/%d/%Y %H:%M:%S'\n        ])\n    \n    # attempting to parse the date string using format expressions\n    for expression in format_expressions:\n        try:\n            upload_date = datetime.datetime.strptime(date_str, expression).strftime('%Y%m%d')\n            break  # if successfully parsed, break the loop\n        except ValueError:\n            pass\n    \n    # if parsing was unsuccessful, check if email.utils.parsedate_tz can get the date\n    if upload_date is None:\n        timetuple = email.utils.parsedate_tz(date_str)\n        if timetuple:\n            upload_date = datetime.datetime(*timetuple[:6]).strftime('%Y%m%d')\n    \n    return upload_date"
        }
    ]
}