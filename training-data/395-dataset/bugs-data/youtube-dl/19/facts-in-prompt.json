{
    "1": "    def prepare_filename(self, info_dict):\n        \"\"\"Generate the output filename.\"\"\"\n        try:\n            template_dict = dict(info_dict)\n    \n            template_dict['epoch'] = int(time.time())\n            autonumber_size = self.params.get('autonumber_size')\n            if autonumber_size is None:\n                autonumber_size = 5\n            template_dict['autonumber'] = self.params.get('autonumber_start', 1) - 1 + self._num_downloads\n            if template_dict.get('resolution') is None:\n                if template_dict.get('width') and template_dict.get('height'):\n                    template_dict['resolution'] = '%dx%d' % (template_dict['width'], template_dict['height'])\n                elif template_dict.get('height'):\n                    template_dict['resolution'] = '%sp' % template_dict['height']\n                elif template_dict.get('width'):\n                    template_dict['resolution'] = '%dx?' % template_dict['width']\n    \n            sanitize = lambda k, v: sanitize_filename(\n                compat_str(v),\n                restricted=self.params.get('restrictfilenames'),\n                is_id=(k == 'id' or k.endswith('_id')))\n            template_dict = dict((k, v if isinstance(v, compat_numeric_types) else sanitize(k, v))\n                                 for k, v in template_dict.items()\n                                 if v is not None and not isinstance(v, (list, tuple, dict)))\n            template_dict = collections.defaultdict(lambda: 'NA', template_dict)\n    \n            outtmpl = self.params.get('outtmpl', DEFAULT_OUTTMPL)\n    \n            # For fields playlist_index and autonumber convert all occurrences\n            # of %(field)s to %(field)0Nd for backward compatibility\n            field_size_compat_map = {\n                'playlist_index': len(str(template_dict['n_entries'])),\n                'autonumber': autonumber_size,\n            }\n            FIELD_SIZE_COMPAT_RE = r'(?<!%)%\\((?P<field>autonumber|playlist_index)\\)s'\n            mobj = re.search(FIELD_SIZE_COMPAT_RE, outtmpl)\n            if mobj:\n                outtmpl = re.sub(\n                    FIELD_SIZE_COMPAT_RE,\n                    r'%%(\\1)0%dd' % field_size_compat_map[mobj.group('field')],\n                    outtmpl)\n    \n            # Missing numeric fields used together with integer presentation types\n            # in format specification will break the argument substitution since\n            # string 'NA' is returned for missing fields. We will patch output\n            # template for missing fields to meet string presentation type.\n            for numeric_field in self._NUMERIC_FIELDS:\n                if numeric_field not in template_dict:\n                    # As of [1] format syntax is:\n                    #  %[mapping_key][conversion_flags][minimum_width][.precision][length_modifier]type\n                    # 1. https://docs.python.org/2/library/stdtypes.html#string-formatting\n                    FORMAT_RE = r'''(?x)\n                        (?<!%)\n                        %\n                        \\({0}\\)  # mapping key\n                        (?:[#0\\-+ ]+)?  # conversion flags (optional)\n                        (?:\\d+)?  # minimum field width (optional)\n                        (?:\\.\\d+)?  # precision (optional)\n                        [hlL]?  # length modifier (optional)\n                        [diouxXeEfFgGcrs%]  # conversion type\n                    '''\n                    outtmpl = re.sub(\n                        FORMAT_RE.format(numeric_field),\n                        r'%({0})s'.format(numeric_field), outtmpl)\n    \n            filename = expand_path(outtmpl % template_dict)\n            # Temporary fix for #4787\n            # 'Treat' all problem characters by passing filename through preferredencoding\n            # to workaround encoding issues with subprocess on python2 @ Windows\n            if sys.version_info < (3, 0) and sys.platform == 'win32':\n                filename = encodeFilename(filename, True).decode(preferredencoding())\n            return sanitize_path(filename)\n        except ValueError as err:\n            self.report_error('Error in output template: ' + str(err) + ' (encoding: ' + repr(preferredencoding()) + ')')\n            return None\n    \n",
    "2": "# class declaration containing the buggy function\nclass YoutubeDL(object):\n    \"\"\"\n    YoutubeDL class.\n    \n    YoutubeDL objects are the ones responsible of downloading the\n    actual video file and writing it to disk if the user has requested\n    it, among some other tasks. In most cases there should be one per\n    program. As, given a video URL, the downloader doesn't know how to\n    extract all the needed information, task that InfoExtractors do, it\n    has to pass the URL to one of them.\n    \n    For this, YoutubeDL objects have a method that allows\n    InfoExtractors to be registered in a given order. When it is passed\n    a URL, the YoutubeDL object handles it to the first InfoExtractor it\n    finds that reports being able to handle it. The InfoExtractor extracts\n    all the information about the video or videos the URL refers to, and\n    YoutubeDL process the extracted information, possibly using a File\n    Downloader to download the video.\n    \n    YoutubeDL objects accept a lot of parameters. In order not to saturate\n    the object constructor with arguments, it receives a dictionary of\n    options instead. These options are available through the params\n    attribute for the InfoExtractors to use. The YoutubeDL also\n    registers itself as the downloader in charge for the InfoExtractors\n    that are added to it, so this is a \"mutual registration\".\n    \n    Available options:\n    \n    username:          Username for authentication purposes.\n    password:          Password for authentication purposes.\n    videopassword:     Password for accessing a video.\n    ap_mso:            Adobe Pass multiple-system operator identifier.\n    ap_username:       Multiple-system operator account username.\n    ap_password:       Multiple-system operator account password.\n    usenetrc:          Use netrc for authentication instead.\n    verbose:           Print additional info to stdout.\n    quiet:             Do not print messages to stdout.\n    no_warnings:       Do not print out anything for warnings.\n    forceurl:          Force printing final URL.\n    forcetitle:        Force printing title.\n    forceid:           Force printing ID.\n    forcethumbnail:    Force printing thumbnail URL.\n    forcedescription:  Force printing description.\n    forcefilename:     Force printing final filename.\n    forceduration:     Force printing duration.\n    forcejson:         Force printing info_dict as JSON.\n    dump_single_json:  Force printing the info_dict of the whole playlist\n                       (or video) as a single JSON line.\n    simulate:          Do not download the video files.\n    format:            Video format code. See options.py for more information.\n    outtmpl:           Template for output names.\n    restrictfilenames: Do not allow \"&\" and spaces in file names\n    ignoreerrors:      Do not stop on download errors.\n    force_generic_extractor: Force downloader to use the generic extractor\n    nooverwrites:      Prevent overwriting files.\n    playliststart:     Playlist item to start at.\n    playlistend:       Playlist item to end at.\n    playlist_items:    Specific indices of playlist to download.\n    playlistreverse:   Download playlist items in reverse order.\n    playlistrandom:    Download playlist items in random order.\n    matchtitle:        Download only matching titles.\n    rejecttitle:       Reject downloads for matching titles.\n    logger:            Log messages to a logging.Logger instance.\n    logtostderr:       Log messages to stderr instead of stdout.\n    writedescription:  Write the video description to a .description file\n    writeinfojson:     Write the video description to a .info.json file\n    writeannotations:  Write the video annotations to a .annotations.xml file\n    writethumbnail:    Write the thumbnail image to a file\n    write_all_thumbnails:  Write all thumbnail formats to files\n    writesubtitles:    Write the video subtitles to a file\n    writeautomaticsub: Write the automatically generated subtitles to a file\n    allsubtitles:      Downloads all the subtitles of the video\n                       (requires writesubtitles or writeautomaticsub)\n    listsubtitles:     Lists all available subtitles for the video\n    subtitlesformat:   The format code for subtitles\n    subtitleslangs:    List of languages of the subtitles to download\n    keepvideo:         Keep the video file after post-processing\n    daterange:         A DateRange object, download only if the upload_date is in the range.\n    skip_download:     Skip the actual download of the video file\n    cachedir:          Location of the cache files in the filesystem.\n                       False to disable filesystem cache.\n    noplaylist:        Download single video instead of a playlist if in doubt.\n    age_limit:         An integer representing the user's age in years.\n                       Unsuitable videos for the given age are skipped.\n    min_views:         An integer representing the minimum view count the video\n                       must have in order to not be skipped.\n                       Videos without view count information are always\n                       downloaded. None for no limit.\n    max_views:         An integer representing the maximum view count.\n                       Videos that are more popular than that are not\n                       downloaded.\n                       Videos without view count information are always\n                       downloaded. None for no limit.\n    download_archive:  File name of a file where all downloads are recorded.\n                       Videos already present in the file are not downloaded\n                       again.\n    cookiefile:        File name where cookies should be read from and dumped to.\n    nocheckcertificate:Do not verify SSL certificates\n    prefer_insecure:   Use HTTP instead of HTTPS to retrieve information.\n                       At the moment, this is only supported by YouTube.\n    proxy:             URL of the proxy server to use\n    geo_verification_proxy:  URL of the proxy to use for IP address verification\n                       on geo-restricted sites. (Experimental)\n    socket_timeout:    Time to wait for unresponsive hosts, in seconds\n    bidi_workaround:   Work around buggy terminals without bidirectional text\n                       support, using fridibi\n    debug_printtraffic:Print out sent and received HTTP traffic\n    include_ads:       Download ads as well\n    default_search:    Prepend this string if an input url is not valid.\n                       'auto' for elaborate guessing\n    encoding:          Use this encoding instead of the system-specified.\n    extract_flat:      Do not resolve URLs, return the immediate result.\n                       Pass in 'in_playlist' to only show this behavior for\n                       playlist items.\n    postprocessors:    A list of dictionaries, each with an entry\n                       * key:  The name of the postprocessor. See\n                               youtube_dl/postprocessor/__init__.py for a list.\n                       as well as any further keyword arguments for the\n                       postprocessor.\n    progress_hooks:    A list of functions that get called on download\n                       progress, with a dictionary with the entries\n                       * status: One of \"downloading\", \"error\", or \"finished\".\n                                 Check this first and ignore unknown values.\n    \n                       If status is one of \"downloading\", or \"finished\", the\n                       following properties may also be present:\n                       * filename: The final filename (always present)\n                       * tmpfilename: The filename we're currently writing to\n                       * downloaded_bytes: Bytes on disk\n                       * total_bytes: Size of the whole file, None if unknown\n                       * total_bytes_estimate: Guess of the eventual file size,\n                                               None if unavailable.\n                       * elapsed: The number of seconds since download started.\n                       * eta: The estimated time in seconds, None if unknown\n                       * speed: The download speed in bytes/second, None if\n                                unknown\n                       * fragment_index: The counter of the currently\n                                         downloaded video fragment.\n                       * fragment_count: The number of fragments (= individual\n                                         files that will be merged)\n    \n                       Progress hooks are guaranteed to be called at least once\n                       (with status \"finished\") if the download is successful.\n    merge_output_format: Extension to use when merging formats.\n    fixup:             Automatically correct known faults of the file.\n                       One of:\n                       - \"never\": do nothing\n                       - \"warn\": only emit a warning\n                       - \"detect_or_warn\": check whether we can do anything\n                                           about it, warn otherwise (default)\n    source_address:    (Experimental) Client-side IP address to bind to.\n    call_home:         Boolean, true iff we are allowed to contact the\n                       youtube-dl servers for debugging.\n    sleep_interval:    Number of seconds to sleep before each download when\n                       used alone or a lower bound of a range for randomized\n                       sleep before each download (minimum possible number\n                       of seconds to sleep) when used along with\n                       max_sleep_interval.\n    max_sleep_interval:Upper bound of a range for randomized sleep before each\n                       download (maximum possible number of seconds to sleep).\n                       Must only be used along with sleep_interval.\n                       Actual sleep time will be a random float from range\n                       [sleep_interval; max_sleep_interval].\n    listformats:       Print an overview of available video formats and exit.\n    list_thumbnails:   Print a table of all thumbnails and exit.\n    match_filter:      A function that gets called with the info_dict of\n                       every video.\n                       If it returns a message, the video is ignored.\n                       If it returns None, the video is downloaded.\n                       match_filter_func in utils.py is one example for this.\n    no_color:          Do not emit color codes in output.\n    geo_bypass:        Bypass geographic restriction via faking X-Forwarded-For\n                       HTTP header (experimental)\n    geo_bypass_country:\n                       Two-letter ISO 3166-2 country code that will be used for\n                       explicit geographic restriction bypassing via faking\n                       X-Forwarded-For HTTP header (experimental)\n    \n    The following options determine which downloader is picked:\n    external_downloader: Executable of the external downloader to call.\n                       None or unset for standard (built-in) downloader.\n    hls_prefer_native: Use the native HLS downloader instead of ffmpeg/avconv\n                       if True, otherwise use ffmpeg/avconv if False, otherwise\n                       use downloader suggested by extractor if None.\n    \n    The following parameters are not used by YoutubeDL itself, they are used by\n    the downloader (see youtube_dl/downloader/common.py):\n    nopart, updatetime, buffersize, ratelimit, min_filesize, max_filesize, test,\n    noresizebuffer, retries, continuedl, noprogress, consoletitle,\n    xattr_set_filesize, external_downloader_args, hls_use_mpegts.\n    \n    The following options are used by the post processors:\n    prefer_ffmpeg:     If True, use ffmpeg instead of avconv if both are available,\n                       otherwise prefer avconv.\n    postprocessor_args: A list of additional command-line arguments for the\n                        postprocessor.\n    \"\"\"\n\n    # ... omitted code ...\n\n\n    # signature of a relative function in this class\n    def report_error(self, message, tb=None):\n        # ... omitted code ...\n        pass\n\n",
    "3": "# file name: /Volumes/SSD2T/bgp_envs/repos/youtube-dl_19/youtube_dl/YoutubeDL.py\n\n# relative function's signature in this file\ndef report_error(self, message, tb=None):\n    # ... omitted code ...\n    pass\n\n",
    "4": "# A test function for the buggy function\n```python\n# file name: /Volumes/SSD2T/bgp_envs/repos/youtube-dl_19/test/test_YoutubeDL.py\n\n    def test_prepare_filename(self):\n        info = {\n            'id': '1234',\n            'ext': 'mp4',\n            'width': None,\n            'height': 1080,\n            'title1': '$PATH',\n            'title2': '%PATH%',\n        }\n\n        def fname(templ):\n            ydl = YoutubeDL({'outtmpl': templ})\n            return ydl.prepare_filename(info)\n        self.assertEqual(fname('%(id)s.%(ext)s'), '1234.mp4')\n        self.assertEqual(fname('%(id)s-%(width)s.%(ext)s'), '1234-NA.mp4')\n        # Replace missing fields with 'NA'\n        self.assertEqual(fname('%(uploader_date)s-%(id)s.%(ext)s'), 'NA-1234.mp4')\n        self.assertEqual(fname('%(height)d.%(ext)s'), '1080.mp4')\n        self.assertEqual(fname('%(height)6d.%(ext)s'), '  1080.mp4')\n        self.assertEqual(fname('%(height)-6d.%(ext)s'), '1080  .mp4')\n        self.assertEqual(fname('%(height)06d.%(ext)s'), '001080.mp4')\n        self.assertEqual(fname('%(height) 06d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)   06d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)0 6d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)0   6d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)   0   6d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%%'), '%')\n        self.assertEqual(fname('%%%%'), '%%')\n        self.assertEqual(fname('%%(height)06d.%(ext)s'), '%(height)06d.mp4')\n        self.assertEqual(fname('%(width)06d.%(ext)s'), 'NA.mp4')\n        self.assertEqual(fname('%(width)06d.%%(ext)s'), 'NA.%(ext)s')\n        self.assertEqual(fname('%%(width)06d.%(ext)s'), '%(width)06d.mp4')\n        self.assertEqual(fname('Hello %(title1)s'), 'Hello $PATH')\n        self.assertEqual(fname('Hello %(title2)s'), 'Hello %PATH%')\n```\n\n## Error message from test function\n```text\nself = <test.test_YoutubeDL.TestYoutubeDL testMethod=test_prepare_filename>\n\n    def test_prepare_filename(self):\n        info = {\n            'id': '1234',\n            'ext': 'mp4',\n            'width': None,\n            'height': 1080,\n            'title1': '$PATH',\n            'title2': '%PATH%',\n        }\n    \n        def fname(templ):\n            ydl = YoutubeDL({'outtmpl': templ})\n            return ydl.prepare_filename(info)\n        self.assertEqual(fname('%(id)s.%(ext)s'), '1234.mp4')\n        self.assertEqual(fname('%(id)s-%(width)s.%(ext)s'), '1234-NA.mp4')\n        # Replace missing fields with 'NA'\n        self.assertEqual(fname('%(uploader_date)s-%(id)s.%(ext)s'), 'NA-1234.mp4')\n        self.assertEqual(fname('%(height)d.%(ext)s'), '1080.mp4')\n        self.assertEqual(fname('%(height)6d.%(ext)s'), '  1080.mp4')\n        self.assertEqual(fname('%(height)-6d.%(ext)s'), '1080  .mp4')\n        self.assertEqual(fname('%(height)06d.%(ext)s'), '001080.mp4')\n        self.assertEqual(fname('%(height) 06d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)   06d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)0 6d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)0   6d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)   0   6d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%%'), '%')\n        self.assertEqual(fname('%%%%'), '%%')\n        self.assertEqual(fname('%%(height)06d.%(ext)s'), '%(height)06d.mp4')\n        self.assertEqual(fname('%(width)06d.%(ext)s'), 'NA.mp4')\n        self.assertEqual(fname('%(width)06d.%%(ext)s'), 'NA.%(ext)s')\n        self.assertEqual(fname('%%(width)06d.%(ext)s'), '%(width)06d.mp4')\n>       self.assertEqual(fname('Hello %(title1)s'), 'Hello $PATH')\nE       AssertionError: 'Hello /Users/jerry/perl5/bin:/Users/jerry/anaco[1121 chars]ac64' != 'Hello $PATH'\nE       Diff is 1190 characters long. Set self.maxDiff to None to see it.\n\ntest/test_YoutubeDL.py:556: AssertionError\n\n```\n",
    "5": "# Variable runtime value and type inside buggy function\n## Buggy case 1\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(id)s.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x11145a710>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11099ea70>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11099e9e0>`, type: `function`\n\nouttmpl, value: `'%(id)s.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'pRzyHVXbiakBlLgvjFHlIkdVYPJVUVNb'`, type: `str`\n\nfilename, value: `'1234.mp4'`, type: `str`\n\n## Buggy case 2\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(id)s-%(width)s.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x11145b750>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1114a7290>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA', 'width': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1114a7200>`, type: `function`\n\nouttmpl, value: `'%(id)s-%(width)s.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'MngPFCooxtaCqhTBNspJwxNHdjFzrOth'`, type: `str`\n\nfilename, value: `'1234-NA.mp4'`, type: `str`\n\n## Buggy case 3\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(uploader_date)s-%(id)s.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x1114618d0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1114a7b00>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA', 'uploader_date': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1114a7a70>`, type: `function`\n\nouttmpl, value: `'%(uploader_date)s-%(id)s.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'LIKoaQwmrHACpuhcfjyYhcHYAPbhlRYO'`, type: `str`\n\nfilename, value: `'NA-1234.mp4'`, type: `str`\n\n## Buggy case 4\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x111473fd0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1114633b0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111463320>`, type: `function`\n\nouttmpl, value: `'%(height)d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'NlwLvYIxESLajPOuvXvgEugyYExlOMqg'`, type: `str`\n\nfilename, value: `'1080.mp4'`, type: `str`\n\n## Buggy case 5\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)6d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x111475a90>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111463b90>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111463b00>`, type: `function`\n\nouttmpl, value: `'%(height)6d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'INenHHjNVeHyCrwcTtVjPtYRTZvPaAPW'`, type: `str`\n\nfilename, value: `'  1080.mp4'`, type: `str`\n\n## Buggy case 6\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)-6d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x1114732d0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111468290>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111468320>`, type: `function`\n\nouttmpl, value: `'%(height)-6d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'GTqGCRlVCjPeOAYMHJYnmiiQIHNVHuCB'`, type: `str`\n\nfilename, value: `'1080  .mp4'`, type: `str`\n\n## Buggy case 7\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x111460dd0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111463560>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1114634d0>`, type: `function`\n\nouttmpl, value: `'%(height)06d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'ZzPCzitfrjYfNoeLdaDMBAqUiolndxcD'`, type: `str`\n\nfilename, value: `'001080.mp4'`, type: `str`\n\n## Buggy case 8\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height) 06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x111459e50>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11099e950>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11099e8c0>`, type: `function`\n\nouttmpl, value: `'%(height) 06d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'gIDiooYuocaLauuFKDdeldRhQvZCPdZr'`, type: `str`\n\nfilename, value: `' 01080.mp4'`, type: `str`\n\n## Buggy case 9\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)   06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x11000ac50>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1114647a0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111464710>`, type: `function`\n\nouttmpl, value: `'%(height)   06d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'XnMPbhJuukZBQszlqnMWStosdfLgWjYr'`, type: `str`\n\nfilename, value: `' 01080.mp4'`, type: `str`\n\n## Buggy case 10\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)0 6d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x111461950>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111464320>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1114643b0>`, type: `function`\n\nouttmpl, value: `'%(height)0 6d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'cgYtcsEQdayjkfbrnIhsuYOOyDACesXW'`, type: `str`\n\nfilename, value: `' 01080.mp4'`, type: `str`\n\n## Buggy case 11\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)0   6d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x111480d10>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11142c7a0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11142c710>`, type: `function`\n\nouttmpl, value: `'%(height)0   6d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'geXxwvCQwwbrCnWhBUuxybquCsGBxXzH'`, type: `str`\n\nfilename, value: `' 01080.mp4'`, type: `str`\n\n## Buggy case 12\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)   0   6d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x11145a250>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11142c320>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11142c3b0>`, type: `function`\n\nouttmpl, value: `'%(height)   0   6d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'bwxfUJnMDpfBcAFpWGVPziPCXRFnnAvO'`, type: `str`\n\nfilename, value: `' 01080.mp4'`, type: `str`\n\n## Buggy case 13\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%%'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x111475c50>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11143d7a0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11143d710>`, type: `function`\n\nouttmpl, value: `'%KViNdmpNjiYXWFJUwOtPtkSgPbrQhGoQ%'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'KViNdmpNjiYXWFJUwOtPtkSgPbrQhGoQ'`, type: `str`\n\nfilename, value: `'%'`, type: `str`\n\n## Buggy case 14\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%%%%'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x110999b10>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111464170>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111464200>`, type: `function`\n\nouttmpl, value: `'%HnzInGWZvkuEpuFgoWlEPsCJpjuYZmvB%%HnzInGWZvkuEpuFgoWlEPsCJpjuYZmvB%'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'HnzInGWZvkuEpuFgoWlEPsCJpjuYZmvB'`, type: `str`\n\nfilename, value: `'%%'`, type: `str`\n\n## Buggy case 15\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%%(height)06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x110999bd0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11144f170>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11144f0e0>`, type: `function`\n\nouttmpl, value: `'%XJRtVXYMFWplwkRiKkwnrMcEKBsbCvGe%(height)06d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'XJRtVXYMFWplwkRiKkwnrMcEKBsbCvGe'`, type: `str`\n\nfilename, value: `'%(height)06d.mp4'`, type: `str`\n\n## Buggy case 16\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(width)06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x111459e50>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1114645f0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA', 'width': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111464560>`, type: `function`\n\nouttmpl, value: `'%(width)s.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'JtFMeEbzttQtnrxWxLpXGGfRoVnWkIok'`, type: `str`\n\nfilename, value: `'NA.mp4'`, type: `str`\n\n## Buggy case 17\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(width)06d.%%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x11145a950>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11142e170>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA', 'width': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x11142e0e0>`, type: `function`\n\nouttmpl, value: `'%(width)s.%CUtRIRCsutPYzGSkBovckjpmfSYEGJIX%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'CUtRIRCsutPYzGSkBovckjpmfSYEGJIX'`, type: `str`\n\nfilename, value: `'NA.%(ext)s'`, type: `str`\n\n## Buggy case 18\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%%(width)06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x11145c610>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111463560>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111463200>`, type: `function`\n\nouttmpl, value: `'%ujMwdullplPahvFWXALFgBzKyTvWIeyo%(width)06d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'ujMwdullplPahvFWXALFgBzKyTvWIeyo'`, type: `str`\n\nfilename, value: `'%(width)06d.mp4'`, type: `str`\n\n## Buggy case 19\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': 'Hello %(title1)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x11147d1d0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111456170>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1114560e0>`, type: `function`\n\nouttmpl, value: `'Hello %(title1)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'BTzyGcavRuFJhqiOtfEFaGyeRgcteTuc'`, type: `str`\n\nfilename, value: `'Hello $PATH'`, type: `str`\n\n## Buggy case 20\n### input parameter runtime value and type for buggy function\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': 'Hello %(title2)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x110979bd0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'track_number', 'tbr', 'start_time', 'fps', 'duration', 'vbr', 'height', 'upload_day', 'average_rating', 'timestamp', 'dislike_count', 'view_count', 'comment_count', 'release_year', 'like_count', 'upload_year', 'repost_count', 'filesize', 'disc_number', 'abr', 'upload_month', 'episode_number', 'width', 'chapter_number', 'asr', 'age_limit', 'filesize_approx', 'end_time', 'season_number', 'playlist_index'}`, type: `set`\n\n### variable runtime value and type before buggy function return\ntemplate_dict, value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111464440>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318015, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, value: `5`, type: `int`\n\nsanitize, value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x111464200>`, type: `function`\n\nouttmpl, value: `'Hello %(title2)s'`, type: `str`\n\nfield_size_compat_map, value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nsep, value: `'SWEQoZqUNhTZgEkaCdaHEmJYYwvTAVKZ'`, type: `str`\n\nfilename, value: `'Hello %PATH%'`, type: `str`\n\n\n\n# Expected variable value and type in tests\n## Expected case 1\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(id)s.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x103345f90>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x10334e950>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x10334e8c0>`, type: `function`\n\nouttmpl, expected value: `'%(id)s.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'1234.mp4'`, type: `str`\n\n## Expected case 2\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(id)s-%(width)s.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x101b5f6d0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b30e0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA', 'width': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b3050>`, type: `function`\n\nouttmpl, expected value: `'%(id)s-%(width)s.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'1234-NA.mp4'`, type: `str`\n\n## Expected case 3\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(uploader_date)s-%(id)s.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x10334cf90>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b38c0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA', 'uploader_date': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b3830>`, type: `function`\n\nouttmpl, expected value: `'%(uploader_date)s-%(id)s.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'NA-1234.mp4'`, type: `str`\n\n## Expected case 4\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x10335b190>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b3c20>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b35f0>`, type: `function`\n\nouttmpl, expected value: `'%(height)d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'1080.mp4'`, type: `str`\n\n## Expected case 5\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)6d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x101999090>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x10334ed40>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b3290>`, type: `function`\n\nouttmpl, expected value: `'%(height)6d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'  1080.mp4'`, type: `str`\n\n## Expected case 6\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)-6d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x10335b210>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x10334e7a0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x10334e710>`, type: `function`\n\nouttmpl, expected value: `'%(height)-6d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'1080  .mp4'`, type: `str`\n\n## Expected case 7\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x103352710>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b4440>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b43b0>`, type: `function`\n\nouttmpl, expected value: `'%(height)06d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'001080.mp4'`, type: `str`\n\n## Expected case 8\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height) 06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x10335edd0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b40e0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b4440>`, type: `function`\n\nouttmpl, expected value: `'%(height) 06d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `' 01080.mp4'`, type: `str`\n\n## Expected case 9\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)   06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x10334a810>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029bc320>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029bc290>`, type: `function`\n\nouttmpl, expected value: `'%(height)   06d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `' 01080.mp4'`, type: `str`\n\n## Expected case 10\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)0 6d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x103352ad0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029bca70>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029bcb00>`, type: `function`\n\nouttmpl, expected value: `'%(height)0 6d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `' 01080.mp4'`, type: `str`\n\n## Expected case 11\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)0   6d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x1030f5210>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b4a70>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b44d0>`, type: `function`\n\nouttmpl, expected value: `'%(height)0   6d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `' 01080.mp4'`, type: `str`\n\n## Expected case 12\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(height)   0   6d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x10298d910>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029c3170>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029c30e0>`, type: `function`\n\nouttmpl, expected value: `'%(height)   0   6d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `' 01080.mp4'`, type: `str`\n\n## Expected case 13\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%%'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x1030f5b50>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029c38c0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029c3950>`, type: `function`\n\nouttmpl, expected value: `'%%'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'%'`, type: `str`\n\n## Expected case 14\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%%%%'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x102983dd0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029ad050>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029c3560>`, type: `function`\n\nouttmpl, expected value: `'%%%%'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'%%'`, type: `str`\n\n## Expected case 15\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%%(height)06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x101b5f6d0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029cb7a0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029cb710>`, type: `function`\n\nouttmpl, expected value: `'%%(height)06d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'%(height)06d.mp4'`, type: `str`\n\n## Expected case 16\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(width)06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x101b5fad0>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029cb440>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA', 'width': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029cb290>`, type: `function`\n\nouttmpl, expected value: `'%(width)s.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'NA.mp4'`, type: `str`\n\n## Expected case 17\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%(width)06d.%%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x10334c610>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x10334e9e0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA', 'width': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x10334ea70>`, type: `function`\n\nouttmpl, expected value: `'%(width)s.%%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'NA.%(ext)s'`, type: `str`\n\n## Expected case 18\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': '%%(width)06d.%(ext)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x10207ab90>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x10334e9e0>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x10334eb90>`, type: `function`\n\nouttmpl, expected value: `'%%(width)06d.%(ext)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `'%(width)06d.mp4'`, type: `str`\n\n## Expected case 19\n### Input parameter value and type\ninfo_dict, value: `{'id': '1234', 'ext': 'mp4', 'width': None, 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%'}`, type: `dict`\n\nself.params, value: `{'nocheckcertificate': False, 'outtmpl': 'Hello %(title1)s'}`, type: `dict`\n\nself, value: `<youtube_dl.YoutubeDL.YoutubeDL object at 0x10334c250>`, type: `YoutubeDL`\n\nself._num_downloads, value: `0`, type: `int`\n\nself._NUMERIC_FIELDS, value: `{'episode_number', 'comment_count', 'height', 'start_time', 'view_count', 'tbr', 'abr', 'vbr', 'upload_day', 'age_limit', 'duration', 'repost_count', 'dislike_count', 'season_number', 'filesize', 'fps', 'chapter_number', 'like_count', 'release_year', 'width', 'asr', 'track_number', 'timestamp', 'end_time', 'upload_year', 'filesize_approx', 'average_rating', 'disc_number', 'upload_month', 'playlist_index'}`, type: `set`\n\n### Expected variable value and type before function return\ntemplate_dict, expected value: `defaultdict(<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b4d40>, {'id': '1234', 'ext': 'mp4', 'height': 1080, 'title1': '$PATH', 'title2': '%PATH%', 'epoch': 1702318013, 'autonumber': 0, 'resolution': '1080p', 'n_entries': 'NA'})`, type: `defaultdict`\n\nautonumber_size, expected value: `5`, type: `int`\n\nsanitize, expected value: `<function YoutubeDL.prepare_filename.<locals>.<lambda> at 0x1029b48c0>`, type: `function`\n\nouttmpl, expected value: `'Hello %(title1)s'`, type: `str`\n\nfield_size_compat_map, expected value: `{'playlist_index': 2, 'autonumber': 5}`, type: `dict`\n\nFIELD_SIZE_COMPAT_RE, expected value: `'(?<!%)%\\\\((?P<field>autonumber`, type: `str`\n\nnumeric_field, expected value: `'playlist_index'`, type: `str`\n\nFORMAT_RE, expected value: `'(?x)\\n                        (?<!%)\\n                        %\\n                        \\\\({0}\\\\)  # mapping key\\n                        (?:[#0\\\\-+ ]+)?  # conversion flags (optional)\\n                        (?:\\\\d+)?  # minimum field width (optional)\\n                        (?:\\\\.\\\\d+)?  # precision (optional)\\n                        [hlL]?  # length modifier (optional)\\n                        [diouxXeEfFgGcrs%]  # conversion type\\n                    '`, type: `str`\n\nfilename, expected value: `array of shape 1172`, type: `str`\n\n\n\n",
    "6": "# A GitHub issue title for this bug\n```text\nBug when '$PATH' string contained in Video Title\n```\n\n## The associated detailed issue description\n```text\nPlease follow the guide below\nYou will be asked some questions and requested to provide some information, please read them carefully and answer honestly\nPut an x into all the boxes [ ] relevant to your issue (like that [x])\nUse Preview tab to see how your issue will actually look like\nMake sure you are using the latest version: run youtube-dl --version and ensure your version is 2017.07.09. If it's not read this FAQ entry and update. Issues with outdated version will be rejected.\n I've verified and I assure that I'm running youtube-dl 2017.07.09\nBefore submitting an issue make sure you have:\n At least skimmed through README and most notably FAQ and BUGS sections\n Searched the bugtracker for similar issues including closed ones\nWhat is the purpose of your issue?\n Bug report (encountered problems with youtube-dl)\n Site support request (request for adding support for a new site)\n Feature request (request for a new functionality)\n Question\n Other\nThe following sections concretize particular purposed issues, you can erase any section (the contents between triple ---) not applicable to your issue\nIf the purpose of this issue is a bug report, site support request or you are not completely sure provide the full verbose output as follows:\nAdd -v flag to your command line you run youtube-dl with, copy the whole output and insert it here. It should look similar to one below (replace it with your log inserted between triple ```\n\n",
    "7": "# Instructions\n\n1. Analyze the test case and its relationship with the error message, if applicable.\n2. Identify the potential error location within the problematic function.\n3. Explain the reasons behind the occurrence of the bug.\n4. Suggest possible approaches for fixing the bug.\n5. Present the corrected code for the problematic function."
}