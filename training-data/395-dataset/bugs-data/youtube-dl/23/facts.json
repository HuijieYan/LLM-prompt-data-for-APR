{
    "1.1.1": "def js_to_json(code):\n    def fix_kv(m):\n        v = m.group(0)\n        if v in ('true', 'false', 'null'):\n            return v\n        elif v.startswith('/*') or v == ',':\n            return \"\"\n\n        if v[0] in (\"'\", '\"'):\n            v = re.sub(r'(?s)\\\\.|\"', lambda m: {\n                '\"': '\\\\\"',\n                \"\\\\'\": \"'\",\n                '\\\\\\n': '',\n                '\\\\x': '\\\\u00',\n            }.get(m.group(0), m.group(0)), v[1:-1])\n\n        INTEGER_TABLE = (\n            (r'^(0[xX][0-9a-fA-F]+)\\s*:?$', 16),\n            (r'^(0+[0-7]+)\\s*:?$', 8),\n        )\n\n        for regex, base in INTEGER_TABLE:\n            im = re.match(regex, v)\n            if im:\n                i = int(im.group(1), base)\n                return '\"%d\":' % i if v.endswith(':') else '%d' % i\n\n        return '\"%s\"' % v\n\n    return re.sub(r, fix_kv, code)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs/repos/youtube-dl_23/youtube_dl/utils.py",
    "1.3.2": [
        "fix_kv(m)"
    ],
    "1.4.1": [
        "    def test_js_to_json_edgecases(self):\n        on = js_to_json(\"{abc_def:'1\\\\'\\\\\\\\2\\\\\\\\\\\\'3\\\"4'}\")\n        self.assertEqual(json.loads(on), {\"abc_def\": \"1'\\\\2\\\\'3\\\"4\"})\n\n        on = js_to_json('{\"abc\": true}')\n        self.assertEqual(json.loads(on), {'abc': True})\n\n        # Ignore JavaScript code as well\n        on = js_to_json('''{\n            \"x\": 1,\n            y: \"a\",\n            z: some.code\n        }''')\n        d = json.loads(on)\n        self.assertEqual(d['x'], 1)\n        self.assertEqual(d['y'], 'a')\n\n        on = js_to_json('[\"abc\", \"def\",]')\n        self.assertEqual(json.loads(on), ['abc', 'def'])\n\n        on = js_to_json('{\"abc\": \"def\",}')\n        self.assertEqual(json.loads(on), {'abc': 'def'})\n\n        on = js_to_json('{ 0: /* \" \\n */ \",]\" , }')\n        self.assertEqual(json.loads(on), {'0': ',]'})\n\n        on = js_to_json('{ 0: // comment\\n1 }')\n        self.assertEqual(json.loads(on), {'0': 1})\n\n        on = js_to_json(r'[\"<p>x<\\/p>\"]')\n        self.assertEqual(json.loads(on), ['<p>x</p>'])\n\n        on = js_to_json(r'[\"\\xaa\"]')\n        self.assertEqual(json.loads(on), ['\\u00aa'])\n\n        on = js_to_json(\"['a\\\\\\nb']\")\n        self.assertEqual(json.loads(on), ['ab'])\n\n        on = js_to_json('{0xff:0xff}')\n        self.assertEqual(json.loads(on), {'255': 255})\n\n        on = js_to_json('{077:077}')\n        self.assertEqual(json.loads(on), {'63': 63})\n\n        on = js_to_json('{42:42}')\n        self.assertEqual(json.loads(on), {'42': 42})"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs/repos/youtube-dl_23/test/test_utils.py"
    ],
    "2.1.1": [
        [
            "E           json.decoder.JSONDecodeError: Expecting value: line 1 column 8 (char 7)"
        ]
    ],
    "2.1.2": [
        [
            "self = <test.test_utils.TestUtil testMethod=test_js_to_json_edgecases>\n\n    def test_js_to_json_edgecases(self):\n        on = js_to_json(\"{abc_def:'1\\\\'\\\\\\\\2\\\\\\\\\\\\'3\\\"4'}\")\n        self.assertEqual(json.loads(on), {\"abc_def\": \"1'\\\\2\\\\'3\\\"4\"})\n    \n        on = js_to_json('{\"abc\": true}')\n        self.assertEqual(json.loads(on), {'abc': True})\n    \n        # Ignore JavaScript code as well\n        on = js_to_json('''{\n            \"x\": 1,\n            y: \"a\",\n            z: some.code\n        }''')\n        d = json.loads(on)\n        self.assertEqual(d['x'], 1)\n        self.assertEqual(d['y'], 'a')\n    \n        on = js_to_json('[\"abc\", \"def\",]')\n        self.assertEqual(json.loads(on), ['abc', 'def'])\n    \n        on = js_to_json('{\"abc\": \"def\",}')\n        self.assertEqual(json.loads(on), {'abc': 'def'})\n    \n        on = js_to_json('{ 0: /* \" \\n */ \",]\" , }')\n        self.assertEqual(json.loads(on), {'0': ',]'})\n    \n        on = js_to_json('{ 0: // comment\\n1 }')\n>       self.assertEqual(json.loads(on), {'0': 1})\n\ntest/test_utils.py:795: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py:348: in loads\n    return _default_decoder.decode(s)\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x1027e2290>\ns = '{ \"0\": // \"comment\"\\n1 }', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None",
            "\n/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py:355: JSONDecodeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "code": "'{abc_def:\\'1\\\\\\'\\\\\\\\2\\\\\\\\\\\\\\'3\"4\\'}'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x104d5f8c0>"
            }
        ],
        [
            {
                "code": "'{\"abc\": true}'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x104e025f0>"
            }
        ],
        [
            {
                "code": "'{\\n            \"x\": 1,\\n            y: \"a\",\\n            z: some.code\\n        }'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x104e02830>"
            }
        ],
        [
            {
                "code": "'[\"abc\", \"def\",]'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x104e13320>"
            }
        ],
        [
            {
                "code": "'{\"abc\": \"def\",}'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x104d5fa70>"
            }
        ],
        [
            {
                "code": "'{ 0: /* \" \\n */ \",]\" , }'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x104e24170>"
            }
        ],
        [
            {
                "code": "'{ 0: // comment\\n1 }'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x104e205f0>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "code": "'{abc_def:\\'1\\\\\\'\\\\\\\\2\\\\\\\\\\\\\\'3\"4\\'}'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10dde28c0>"
            }
        ],
        [
            {
                "code": "'{\"abc\": true}'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10de7c5f0>"
            }
        ],
        [
            {
                "code": "'{\\n            \"x\": 1,\\n            y: \"a\",\\n            z: some.code\\n        }'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10de86050>"
            }
        ],
        [
            {
                "code": "'[\"abc\", \"def\",]'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10de86b90>"
            }
        ],
        [
            {
                "code": "'{\"abc\": \"def\",}'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10de86a70>"
            }
        ],
        [
            {
                "code": "'{ 0: /* \" \\n */ \",]\" , }'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10de86e60>"
            }
        ],
        [
            {
                "code": "'{ 0: // comment\\n1 }'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10dde2680>"
            }
        ],
        [
            {
                "code": "'[\"<p>x<\\\\/p>\"]'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10de7e050>"
            }
        ],
        [
            {
                "code": "'[\"\\\\xaa\"]'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10de9bf80>"
            }
        ],
        [
            {
                "code": "\"['a\\\\\\nb']\""
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10de7eef0>"
            }
        ],
        [
            {
                "code": "'{0xff:0xff}'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10de8a0e0>"
            }
        ],
        [
            {
                "code": "'{077:077}'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10de9b8c0>"
            }
        ],
        [
            {
                "code": "'{42:42}'"
            },
            {
                "fix_kv": "<function js_to_json.<locals>.fix_kv at 0x10de7e710>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ],
        [
            {
                "code": "str"
            },
            {
                "fix_kv": "function"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}