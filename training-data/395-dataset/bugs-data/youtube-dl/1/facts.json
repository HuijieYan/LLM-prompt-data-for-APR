{
    "1.1.1": "def _match_one(filter_part, dct):\n    COMPARISON_OPERATORS = {\n        '<': operator.lt,\n        '<=': operator.le,\n        '>': operator.gt,\n        '>=': operator.ge,\n        '=': operator.eq,\n        '!=': operator.ne,\n    }\n    operator_rex = re.compile(r % '|'.join(map(re.escape, COMPARISON_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = COMPARISON_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        if (m.group('quotedstrval') is not None or\n            m.group('strval') is not None or\n            # If the original field is a string and matching comparisonvalue is\n            # a number we should respect the origin of the original field\n            # and process comparison value as a string (see\n            # https://github.com/rg3/youtube-dl/issues/11082).\n            actual_value is not None and m.group('intval') is not None and\n                isinstance(actual_value, compat_str)):\n            if m.group('op') not in ('=', '!='):\n                raise ValueError(\n                    'Operator %s does not support string values!' % m.group('op'))\n            comparison_value = m.group('quotedstrval') or m.group('strval') or m.group('intval')\n            quote = m.group('quote')\n            if quote is not None:\n                comparison_value = comparison_value.replace(r'\\%s' % quote, quote)\n        else:\n            try:\n                comparison_value = int(m.group('intval'))\n            except ValueError:\n                comparison_value = parse_filesize(m.group('intval'))\n                if comparison_value is None:\n                    comparison_value = parse_filesize(m.group('intval') + 'B')\n                if comparison_value is None:\n                    raise ValueError(\n                        'Invalid integer value %r in filter part %r' % (\n                            m.group('intval'), filter_part))\n        if actual_value is None:\n            return m.group('none_inclusive')\n        return op(actual_value, comparison_value)\n\n    UNARY_OPERATORS = {\n        '': lambda v: v is not None,\n        '!': lambda v: v is None,\n    }\n    operator_rex = re.compile(r % '|'.join(map(re.escape, UNARY_OPERATORS.keys())))\n    m = operator_rex.search(filter_part)\n    if m:\n        op = UNARY_OPERATORS[m.group('op')]\n        actual_value = dct.get(m.group('key'))\n        return op(actual_value)\n\n    raise ValueError('Invalid filter part %r' % filter_part)\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_1/youtube_dl/utils.py",
    "1.3.2": [
        "parse_filesize(s)"
    ],
    "1.4.1": [
        "    def test_match_str(self):\n        self.assertRaises(ValueError, match_str, 'xy>foobar', {})\n        self.assertFalse(match_str('xy', {'x': 1200}))\n        self.assertTrue(match_str('!xy', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 1200}))\n        self.assertFalse(match_str('!x', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 0}))\n        self.assertFalse(match_str('x>0', {'x': 0}))\n        self.assertFalse(match_str('x>0', {}))\n        self.assertTrue(match_str('x>?0', {}))\n        self.assertTrue(match_str('x>1K', {'x': 1200}))\n        self.assertFalse(match_str('x>2K', {'x': 1200}))\n        self.assertTrue(match_str('x>=1200 & x < 1300', {'x': 1200}))\n        self.assertFalse(match_str('x>=1100 & x < 1200', {'x': 1200}))\n        self.assertFalse(match_str('y=a212', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y=foobar42', {'y': 'foobar42'}))\n        self.assertFalse(match_str('y!=foobar42', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y!=foobar2', {'y': 'foobar42'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 90, 'description': 'foo'}))\n        self.assertTrue(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 60, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 10}))\n        self.assertTrue(match_str('is_live', {'is_live': True}))\n        self.assertFalse(match_str('is_live', {'is_live': False}))\n        self.assertFalse(match_str('is_live', {'is_live': None}))\n        self.assertFalse(match_str('is_live', {}))\n        self.assertFalse(match_str('!is_live', {'is_live': True}))\n        self.assertTrue(match_str('!is_live', {'is_live': False}))\n        self.assertTrue(match_str('!is_live', {'is_live': None}))\n        self.assertTrue(match_str('!is_live', {}))\n        self.assertTrue(match_str('title', {'title': 'abc'}))\n        self.assertTrue(match_str('title', {'title': ''}))\n        self.assertFalse(match_str('!title', {'title': 'abc'}))\n        self.assertFalse(match_str('!title', {'title': ''}))"
    ],
    "1.4.2": [
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_1/test/test_utils.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: True is not false"
        ]
    ],
    "2.1.2": [
        [
            "self = <test.test_utils.TestUtil testMethod=test_match_str>\n\n    def test_match_str(self):\n        self.assertRaises(ValueError, match_str, 'xy>foobar', {})\n        self.assertFalse(match_str('xy', {'x': 1200}))\n        self.assertTrue(match_str('!xy', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 1200}))\n        self.assertFalse(match_str('!x', {'x': 1200}))\n        self.assertTrue(match_str('x', {'x': 0}))\n        self.assertFalse(match_str('x>0', {'x': 0}))\n        self.assertFalse(match_str('x>0', {}))\n        self.assertTrue(match_str('x>?0', {}))\n        self.assertTrue(match_str('x>1K', {'x': 1200}))\n        self.assertFalse(match_str('x>2K', {'x': 1200}))\n        self.assertTrue(match_str('x>=1200 & x < 1300', {'x': 1200}))\n        self.assertFalse(match_str('x>=1100 & x < 1200', {'x': 1200}))\n        self.assertFalse(match_str('y=a212', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y=foobar42', {'y': 'foobar42'}))\n        self.assertFalse(match_str('y!=foobar42', {'y': 'foobar42'}))\n        self.assertTrue(match_str('y!=foobar2', {'y': 'foobar42'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 90, 'description': 'foo'}))\n        self.assertTrue(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 60, 'description': 'foo'}))\n        self.assertFalse(match_str(\n            'like_count > 100 & dislike_count <? 50 & description',\n            {'like_count': 190, 'dislike_count': 10}))\n        self.assertTrue(match_str('is_live', {'is_live': True}))\n>       self.assertFalse(match_str('is_live', {'is_live': False}))",
            "\ntest/test_utils.py:1076: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "filter_part": "'xy'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 2), match='xy'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x109fce3b0>",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x109fce3b0>, '!': <function _match_one.<locals>.<lambda> at 0x109fce440>}"
            }
        ],
        [
            {
                "filter_part": "'!xy'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 3), match='!xy'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x109fcec20>",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x109fceb90>, '!': <function _match_one.<locals>.<lambda> at 0x109fcec20>}"
            }
        ],
        [
            {
                "filter_part": "'x'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 1), match='x'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x109fce710>",
                "actual_value": "1200",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x109fce710>, '!': <function _match_one.<locals>.<lambda> at 0x109fce4d0>}"
            }
        ],
        [
            {
                "filter_part": "'!x'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 2), match='!x'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x109f2bef0>",
                "actual_value": "1200",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x109f2be60>, '!': <function _match_one.<locals>.<lambda> at 0x109f2bef0>}"
            }
        ],
        [
            {
                "filter_part": "'x'",
                "dct": "{'x': 0}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 1), match='x'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x109fda950>",
                "actual_value": "0",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x109fda950>, '!': <function _match_one.<locals>.<lambda> at 0x109fdac20>}"
            }
        ],
        [
            {
                "filter_part": "'x>0'",
                "dct": "{'x': 0}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 3), match='x>0'>",
                "op": "<built-in function gt>",
                "actual_value": "0",
                "comparison_value": "0"
            }
        ],
        [
            {
                "filter_part": "'x>0'",
                "dct": "{}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 3), match='x>0'>",
                "op": "<built-in function gt>",
                "comparison_value": "0"
            }
        ],
        [
            {
                "filter_part": "'x>?0'",
                "dct": "{}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 4), match='x>?0'>",
                "op": "<built-in function gt>",
                "comparison_value": "0"
            }
        ],
        [
            {
                "filter_part": "'x>1K'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 4), match='x>1K'>",
                "op": "<built-in function gt>",
                "actual_value": "1200",
                "comparison_value": "1000"
            }
        ],
        [
            {
                "filter_part": "'x>2K'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 4), match='x>2K'>",
                "op": "<built-in function gt>",
                "actual_value": "1200",
                "comparison_value": "2000"
            }
        ],
        [
            {
                "filter_part": "'x>=1200 '",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 8), match='x>=1200 '>",
                "op": "<built-in function ge>",
                "actual_value": "1200",
                "comparison_value": "1200"
            }
        ],
        [
            {
                "filter_part": "' x < 1300'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 9), match=' x < 1300'>",
                "op": "<built-in function lt>",
                "actual_value": "1200",
                "comparison_value": "1300"
            }
        ],
        [
            {
                "filter_part": "'x>=1100 '",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 8), match='x>=1100 '>",
                "op": "<built-in function ge>",
                "actual_value": "1200",
                "comparison_value": "1100"
            }
        ],
        [
            {
                "filter_part": "' x < 1200'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 9), match=' x < 1200'>",
                "op": "<built-in function lt>",
                "actual_value": "1200",
                "comparison_value": "1200"
            }
        ],
        [
            {
                "filter_part": "'y=a212'",
                "dct": "{'y': 'foobar42'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 6), match='y=a212'>",
                "op": "<built-in function eq>",
                "actual_value": "'foobar42'",
                "comparison_value": "'a212'"
            }
        ],
        [
            {
                "filter_part": "'y=foobar42'",
                "dct": "{'y': 'foobar42'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 10), match='y=foobar42'>",
                "op": "<built-in function eq>",
                "actual_value": "'foobar42'",
                "comparison_value": "'foobar42'"
            }
        ],
        [
            {
                "filter_part": "'y!=foobar42'",
                "dct": "{'y': 'foobar42'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 11), match='y!=foobar42'>",
                "op": "<built-in function ne>",
                "actual_value": "'foobar42'",
                "comparison_value": "'foobar42'"
            }
        ],
        [
            {
                "filter_part": "'y!=foobar2'",
                "dct": "{'y': 'foobar42'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 10), match='y!=foobar2'>",
                "op": "<built-in function ne>",
                "actual_value": "'foobar42'",
                "comparison_value": "'foobar2'"
            }
        ],
        [
            {
                "filter_part": "'like_count > 100 '",
                "dct": "{'like_count': 90, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                "op": "<built-in function gt>",
                "actual_value": "90",
                "comparison_value": "100"
            }
        ],
        [
            {
                "filter_part": "'like_count > 100 '",
                "dct": "{'like_count': 190, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                "op": "<built-in function gt>",
                "actual_value": "190",
                "comparison_value": "100"
            }
        ],
        [
            {
                "filter_part": "' dislike_count <? 50 '",
                "dct": "{'like_count': 190, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                "op": "<built-in function lt>",
                "comparison_value": "50"
            }
        ],
        [
            {
                "filter_part": "' description'",
                "dct": "{'like_count': 190, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 12), match=' description'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x109ff74d0>",
                "actual_value": "'foo'",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x109ff74d0>, '!': <function _match_one.<locals>.<lambda> at 0x109ff7560>}"
            }
        ],
        [
            {
                "filter_part": "'like_count > 100 '",
                "dct": "{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                "op": "<built-in function gt>",
                "actual_value": "190",
                "comparison_value": "100"
            }
        ],
        [
            {
                "filter_part": "' dislike_count <? 50 '",
                "dct": "{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                "op": "<built-in function lt>",
                "actual_value": "60",
                "comparison_value": "50"
            }
        ],
        [
            {
                "filter_part": "'like_count > 100 '",
                "dct": "{'like_count': 190, 'dislike_count': 10}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                "op": "<built-in function gt>",
                "actual_value": "190",
                "comparison_value": "100"
            }
        ],
        [
            {
                "filter_part": "' dislike_count <? 50 '",
                "dct": "{'like_count': 190, 'dislike_count': 10}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                "op": "<built-in function lt>",
                "actual_value": "10",
                "comparison_value": "50"
            }
        ],
        [
            {
                "filter_part": "' description'",
                "dct": "{'like_count': 190, 'dislike_count': 10}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 12), match=' description'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x10a0095f0>",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x10a0095f0>, '!': <function _match_one.<locals>.<lambda> at 0x10a009680>}"
            }
        ],
        [
            {
                "filter_part": "'is_live'",
                "dct": "{'is_live': True}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 7), match='is_live'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x10a009290>",
                "actual_value": "True",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x10a009290>, '!': <function _match_one.<locals>.<lambda> at 0x10a009200>}"
            }
        ],
        [
            {
                "filter_part": "'is_live'",
                "dct": "{'is_live': False}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 7), match='is_live'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x109ffb5f0>",
                "actual_value": "False",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x109ffb5f0>, '!': <function _match_one.<locals>.<lambda> at 0x109ffb680>}"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "filter_part": "'xy'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 2), match='xy'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063be3b0>",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063be3b0>, '!': <function _match_one.<locals>.<lambda> at 0x1063be440>}"
            }
        ],
        [
            {
                "filter_part": "'!xy'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 3), match='!xy'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063bec20>",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063beb90>, '!': <function _match_one.<locals>.<lambda> at 0x1063bec20>}"
            }
        ],
        [
            {
                "filter_part": "'x'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 1), match='x'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063c53b0>",
                "actual_value": "1200",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063c53b0>, '!': <function _match_one.<locals>.<lambda> at 0x1063c5440>}"
            }
        ],
        [
            {
                "filter_part": "'!x'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 2), match='!x'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063c50e0>",
                "actual_value": "1200",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063c54d0>, '!': <function _match_one.<locals>.<lambda> at 0x1063c50e0>}"
            }
        ],
        [
            {
                "filter_part": "'x'",
                "dct": "{'x': 0}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 1), match='x'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063cb3b0>",
                "actual_value": "0",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063cb3b0>, '!': <function _match_one.<locals>.<lambda> at 0x1063cb440>}"
            }
        ],
        [
            {
                "filter_part": "'x>0'",
                "dct": "{'x': 0}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 3), match='x>0'>",
                "op": "<built-in function gt>",
                "actual_value": "0",
                "comparison_value": "0"
            }
        ],
        [
            {
                "filter_part": "'x>0'",
                "dct": "{}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 3), match='x>0'>",
                "op": "<built-in function gt>",
                "comparison_value": "0"
            }
        ],
        [
            {
                "filter_part": "'x>?0'",
                "dct": "{}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 4), match='x>?0'>",
                "op": "<built-in function gt>",
                "comparison_value": "0"
            }
        ],
        [
            {
                "filter_part": "'x>1K'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 4), match='x>1K'>",
                "op": "<built-in function gt>",
                "actual_value": "1200",
                "comparison_value": "1000"
            }
        ],
        [
            {
                "filter_part": "'x>2K'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 4), match='x>2K'>",
                "op": "<built-in function gt>",
                "actual_value": "1200",
                "comparison_value": "2000"
            }
        ],
        [
            {
                "filter_part": "'x>=1200 '",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 8), match='x>=1200 '>",
                "op": "<built-in function ge>",
                "actual_value": "1200",
                "comparison_value": "1200"
            }
        ],
        [
            {
                "filter_part": "' x < 1300'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 9), match=' x < 1300'>",
                "op": "<built-in function lt>",
                "actual_value": "1200",
                "comparison_value": "1300"
            }
        ],
        [
            {
                "filter_part": "'x>=1100 '",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 8), match='x>=1100 '>",
                "op": "<built-in function ge>",
                "actual_value": "1200",
                "comparison_value": "1100"
            }
        ],
        [
            {
                "filter_part": "' x < 1200'",
                "dct": "{'x': 1200}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 9), match=' x < 1200'>",
                "op": "<built-in function lt>",
                "actual_value": "1200",
                "comparison_value": "1200"
            }
        ],
        [
            {
                "filter_part": "'y=a212'",
                "dct": "{'y': 'foobar42'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 6), match='y=a212'>",
                "op": "<built-in function eq>",
                "actual_value": "'foobar42'",
                "comparison_value": "'a212'"
            }
        ],
        [
            {
                "filter_part": "'y=foobar42'",
                "dct": "{'y': 'foobar42'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 10), match='y=foobar42'>",
                "op": "<built-in function eq>",
                "actual_value": "'foobar42'",
                "comparison_value": "'foobar42'"
            }
        ],
        [
            {
                "filter_part": "'y!=foobar42'",
                "dct": "{'y': 'foobar42'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 11), match='y!=foobar42'>",
                "op": "<built-in function ne>",
                "actual_value": "'foobar42'",
                "comparison_value": "'foobar42'"
            }
        ],
        [
            {
                "filter_part": "'y!=foobar2'",
                "dct": "{'y': 'foobar42'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 10), match='y!=foobar2'>",
                "op": "<built-in function ne>",
                "actual_value": "'foobar42'",
                "comparison_value": "'foobar2'"
            }
        ],
        [
            {
                "filter_part": "'like_count > 100 '",
                "dct": "{'like_count': 90, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                "op": "<built-in function gt>",
                "actual_value": "90",
                "comparison_value": "100"
            }
        ],
        [
            {
                "filter_part": "'like_count > 100 '",
                "dct": "{'like_count': 190, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                "op": "<built-in function gt>",
                "actual_value": "190",
                "comparison_value": "100"
            }
        ],
        [
            {
                "filter_part": "' dislike_count <? 50 '",
                "dct": "{'like_count': 190, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                "op": "<built-in function lt>",
                "comparison_value": "50"
            }
        ],
        [
            {
                "filter_part": "' description'",
                "dct": "{'like_count': 190, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 12), match=' description'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063cf710>",
                "actual_value": "'foo'",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063cf710>, '!': <function _match_one.<locals>.<lambda> at 0x1063cf7a0>}"
            }
        ],
        [
            {
                "filter_part": "'like_count > 100 '",
                "dct": "{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                "op": "<built-in function gt>",
                "actual_value": "190",
                "comparison_value": "100"
            }
        ],
        [
            {
                "filter_part": "' dislike_count <? 50 '",
                "dct": "{'like_count': 190, 'dislike_count': 60, 'description': 'foo'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                "op": "<built-in function lt>",
                "actual_value": "60",
                "comparison_value": "50"
            }
        ],
        [
            {
                "filter_part": "'like_count > 100 '",
                "dct": "{'like_count': 190, 'dislike_count': 10}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 17), match='like_count > 100 '>",
                "op": "<built-in function gt>",
                "actual_value": "190",
                "comparison_value": "100"
            }
        ],
        [
            {
                "filter_part": "' dislike_count <? 50 '",
                "dct": "{'like_count': 190, 'dislike_count': 10}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<key>[a-z_]+)\\n        \\\\s*(?P<op><",
                "m": "<re.Match object; span=(0, 21), match=' dislike_count <? 50 '>",
                "op": "<built-in function lt>",
                "actual_value": "10",
                "comparison_value": "50"
            }
        ],
        [
            {
                "filter_part": "' description'",
                "dct": "{'like_count': 190, 'dislike_count': 10}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 12), match=' description'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063f7830>",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063f7830>, '!': <function _match_one.<locals>.<lambda> at 0x1063f78c0>}"
            }
        ],
        [
            {
                "filter_part": "'is_live'",
                "dct": "{'is_live': True}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 7), match='is_live'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063fd050>",
                "actual_value": "True",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063fd050>, '!': <function _match_one.<locals>.<lambda> at 0x1063fd0e0>}"
            }
        ],
        [
            {
                "filter_part": "'is_live'",
                "dct": "{'is_live': False}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 7), match='is_live'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063ed830>",
                "actual_value": "False",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063ed830>, '!': <function _match_one.<locals>.<lambda> at 0x1063ed8c0>}"
            }
        ],
        [
            {
                "filter_part": "'is_live'",
                "dct": "{'is_live': None}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 7), match='is_live'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063e4050>",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063e4050>, '!': <function _match_one.<locals>.<lambda> at 0x1063e40e0>}"
            }
        ],
        [
            {
                "filter_part": "'is_live'",
                "dct": "{}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 7), match='is_live'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063f4830>",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063f4830>, '!': <function _match_one.<locals>.<lambda> at 0x1063f48c0>}"
            }
        ],
        [
            {
                "filter_part": "'!is_live'",
                "dct": "{'is_live': True}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 8), match='!is_live'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063dd0e0>",
                "actual_value": "True",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063dd050>, '!': <function _match_one.<locals>.<lambda> at 0x1063dd0e0>}"
            }
        ],
        [
            {
                "filter_part": "'!is_live'",
                "dct": "{'is_live': False}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 8), match='!is_live'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063ea8c0>",
                "actual_value": "False",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063ea830>, '!': <function _match_one.<locals>.<lambda> at 0x1063ea8c0>}"
            }
        ],
        [
            {
                "filter_part": "'!is_live'",
                "dct": "{'is_live': None}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 8), match='!is_live'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063f60e0>",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063f6050>, '!': <function _match_one.<locals>.<lambda> at 0x1063f60e0>}"
            }
        ],
        [
            {
                "filter_part": "'!is_live'",
                "dct": "{}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 8), match='!is_live'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063c98c0>",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063c9830>, '!': <function _match_one.<locals>.<lambda> at 0x1063c98c0>}"
            }
        ],
        [
            {
                "filter_part": "'title'",
                "dct": "{'title': 'abc'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 5), match='title'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063c4050>",
                "actual_value": "'abc'",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063c4050>, '!': <function _match_one.<locals>.<lambda> at 0x1063c40e0>}"
            }
        ],
        [
            {
                "filter_part": "'title'",
                "dct": "{'title': ''}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 5), match='title'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063e4830>",
                "actual_value": "''",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063e4830>, '!': <function _match_one.<locals>.<lambda> at 0x1063e48c0>}"
            }
        ],
        [
            {
                "filter_part": "'!title'",
                "dct": "{'title': 'abc'}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 6), match='!title'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063d5e60>",
                "actual_value": "'abc'",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063d5dd0>, '!': <function _match_one.<locals>.<lambda> at 0x1063d5e60>}"
            }
        ],
        [
            {
                "filter_part": "'!title'",
                "dct": "{'title': ''}"
            },
            {
                "COMPARISON_OPERATORS": "{'<': <built-in function lt>, '<=': <built-in function le>, '>': <built-in function gt>, '>=': <built-in function ge>, '=': <built-in function eq>, '!=': <built-in function ne>}",
                "operator_rex": "re.compile('(?x)\\\\s*\\n        (?P<op>",
                "m": "<re.Match object; span=(0, 6), match='!title'>",
                "op": "<function _match_one.<locals>.<lambda> at 0x1063ea680>",
                "actual_value": "''",
                "UNARY_OPERATORS": "{'': <function _match_one.<locals>.<lambda> at 0x1063ea5f0>, '!': <function _match_one.<locals>.<lambda> at 0x1063ea680>}"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "int",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "str",
                "comparison_value": "str"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "builtin_function_or_method",
                "actual_value": "int",
                "comparison_value": "int"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "bool",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ],
        [
            {
                "filter_part": "str",
                "dct": "dict"
            },
            {
                "COMPARISON_OPERATORS": "dict",
                "operator_rex": "Pattern",
                "m": "Match",
                "op": "function",
                "actual_value": "str",
                "UNARY_OPERATORS": "dict"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}