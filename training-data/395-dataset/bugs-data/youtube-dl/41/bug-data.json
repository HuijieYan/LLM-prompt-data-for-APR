{
    "youtube-dl:41": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_41/youtube_dl/utils.py": {
            "buggy_functions": [
                {
                    "function_name": "unified_strdate",
                    "function_code": "def unified_strdate(date_str):\n    \"\"\"Return a string with the date in the format YYYYMMDD\"\"\"\n    upload_date = None\n    #Replace commas\n    date_str = date_str.replace(',',' ')\n    # %z (UTC offset) is only supported in python>=3.2\n    date_str = re.sub(r' ?(\\+|-)[0-9:]*$', '', date_str)\n    format_expressions = [\n        '%d %B %Y',\n        '%B %d %Y',\n        '%b %d %Y',\n        '%Y-%m-%d',\n        '%d/%m/%Y',\n        '%Y/%m/%d %H:%M:%S',\n        '%Y-%m-%d %H:%M:%S',\n        '%d.%m.%Y %H:%M',\n        '%Y-%m-%dT%H:%M:%SZ',\n        '%Y-%m-%dT%H:%M:%S.%fZ',\n        '%Y-%m-%dT%H:%M:%S.%f0Z',\n        '%Y-%m-%dT%H:%M:%S',\n        '%Y-%m-%dT%H:%M',\n    ]\n    for expression in format_expressions:\n        try:\n            upload_date = datetime.datetime.strptime(date_str, expression).strftime('%Y%m%d')\n        except ValueError:\n            pass\n    if upload_date is None:\n        timetuple = email.utils.parsedate_tz(date_str)\n        if timetuple:\n            upload_date = datetime.datetime(*timetuple[:6]).strftime('%Y%m%d')\n    return upload_date\n",
                    "decorators": [],
                    "docstring": "Return a string with the date in the format YYYYMMDD",
                    "start_line": 755,
                    "end_line": 786,
                    "variables": {
                        "upload_date": [
                            779,
                            782,
                            785,
                            786,
                            757
                        ],
                        "date_str": [
                            761,
                            779,
                            783,
                            759
                        ],
                        "date_str.replace": [
                            759
                        ],
                        "re.sub": [
                            761
                        ],
                        "re": [
                            761
                        ],
                        "format_expressions": [
                            777,
                            762
                        ],
                        "expression": [
                            777,
                            779
                        ],
                        "strftime": [
                            785,
                            779
                        ],
                        "datetime.datetime.strptime": [
                            779
                        ],
                        "datetime.datetime": [
                            785,
                            779
                        ],
                        "datetime": [
                            785,
                            779
                        ],
                        "ValueError": [
                            780
                        ],
                        "timetuple": [
                            784,
                            785,
                            783
                        ],
                        "email.utils.parsedate_tz": [
                            783
                        ],
                        "email.utils": [
                            783
                        ],
                        "email": [
                            783
                        ]
                    },
                    "filtered_variables": {
                        "upload_date": [
                            779,
                            782,
                            785,
                            786,
                            757
                        ],
                        "date_str": [
                            761,
                            779,
                            783,
                            759
                        ],
                        "date_str.replace": [
                            759
                        ],
                        "re.sub": [
                            761
                        ],
                        "re": [
                            761
                        ],
                        "format_expressions": [
                            777,
                            762
                        ],
                        "expression": [
                            777,
                            779
                        ],
                        "strftime": [
                            785,
                            779
                        ],
                        "datetime.datetime.strptime": [
                            779
                        ],
                        "datetime.datetime": [
                            785,
                            779
                        ],
                        "datetime": [
                            785,
                            779
                        ],
                        "timetuple": [
                            784,
                            785,
                            783
                        ],
                        "email.utils.parsedate_tz": [
                            783
                        ],
                        "email.utils": [
                            783
                        ],
                        "email": [
                            783
                        ]
                    },
                    "diff_line_number": 759,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "upload_date": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "date_str": {
                                    "variable_value": "'December 21, 2010'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x106773b70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expression": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "upload_date": {
                                    "variable_value": "'20101221'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str": {
                                    "variable_value": "'December 21  2010'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x106b4ea30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": "['%d %B %Y', '%B %d %Y', '%b %d %Y', '%Y-%m-%d', '%d/%m/%Y', '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M', '%Y-%m-%dT%H:%M:%SZ', '%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%S.%f0Z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M']",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "expression": {
                                    "variable_value": "'%Y-%m-%dT%H:%M'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "upload_date": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "date_str": {
                                    "variable_value": "'8/7/2009'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x106776530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expression": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "upload_date": {
                                    "variable_value": "'20090708'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str": {
                                    "variable_value": "'8/7/2009'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x106776530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": "['%d %B %Y', '%B %d %Y', '%b %d %Y', '%Y-%m-%d', '%d/%m/%Y', '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M', '%Y-%m-%dT%H:%M:%SZ', '%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%S.%f0Z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M']",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "expression": {
                                    "variable_value": "'%Y-%m-%dT%H:%M'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "upload_date": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "date_str": {
                                    "variable_value": "'Dec 14, 2012'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x1067765b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expression": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "upload_date": {
                                    "variable_value": "'20121214'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str": {
                                    "variable_value": "'Dec 14  2012'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x106b70370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": "['%d %B %Y', '%B %d %Y', '%b %d %Y', '%Y-%m-%d', '%d/%m/%Y', '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M', '%Y-%m-%dT%H:%M:%SZ', '%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%S.%f0Z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M']",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "expression": {
                                    "variable_value": "'%Y-%m-%dT%H:%M'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "upload_date": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "date_str": {
                                    "variable_value": "'2012/10/11 01:56:38 +0000'",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x106773bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expression": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "upload_date": {
                                    "variable_value": "'20121011'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str": {
                                    "variable_value": "'2012/10/11 01:56:38'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x106b4e620>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": "['%d %B %Y', '%B %d %Y', '%b %d %Y', '%Y-%m-%d', '%d/%m/%Y', '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M', '%Y-%m-%dT%H:%M:%SZ', '%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%S.%f0Z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M']",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "expression": {
                                    "variable_value": "'%Y-%m-%dT%H:%M'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "upload_date": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "date_str": {
                                    "variable_value": "'1968-12-10'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x106776670>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expression": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "upload_date": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "date_str": {
                                    "variable_value": "'1968-12'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x106b755b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": "['%d %B %Y', '%B %d %Y', '%b %d %Y', '%Y-%m-%d', '%d/%m/%Y', '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M', '%Y-%m-%dT%H:%M:%SZ', '%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%S.%f0Z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M']",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "expression": {
                                    "variable_value": "'%Y-%m-%dT%H:%M'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "upload_date": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "date_str": {
                                    "variable_value": "'December 21, 2010'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d173990>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expression": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "upload_date": {
                                    "variable_value": "'20101221'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str": {
                                    "variable_value": "'December 21  2010'",
                                    "variable_type": "str",
                                    "variable_shape": "17"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d54eb20>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": "['%d %B %Y', '%B %d %Y', '%b %d %Y', '%Y-%m-%d', '%d/%m/%Y', '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M', '%Y-%m-%dT%H:%M:%SZ', '%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%S.%f0Z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M']",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "expression": {
                                    "variable_value": "'%Y-%m-%dT%H:%M'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "upload_date": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "date_str": {
                                    "variable_value": "'8/7/2009'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d2147b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expression": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "upload_date": {
                                    "variable_value": "'20090708'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str": {
                                    "variable_value": "'8/7/2009'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d2147b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": "['%d %B %Y', '%B %d %Y', '%b %d %Y', '%Y-%m-%d', '%d/%m/%Y', '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M', '%Y-%m-%dT%H:%M:%SZ', '%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%S.%f0Z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M']",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "expression": {
                                    "variable_value": "'%Y-%m-%dT%H:%M'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "upload_date": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "date_str": {
                                    "variable_value": "'Dec 14, 2012'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d214830>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expression": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "upload_date": {
                                    "variable_value": "'20121214'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str": {
                                    "variable_value": "'Dec 14  2012'",
                                    "variable_type": "str",
                                    "variable_shape": "12"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d56fdf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": "['%d %B %Y', '%B %d %Y', '%b %d %Y', '%Y-%m-%d', '%d/%m/%Y', '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M', '%Y-%m-%dT%H:%M:%SZ', '%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%S.%f0Z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M']",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "expression": {
                                    "variable_value": "'%Y-%m-%dT%H:%M'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "upload_date": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "date_str": {
                                    "variable_value": "'2012/10/11 01:56:38 +0000'",
                                    "variable_type": "str",
                                    "variable_shape": "25"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d1739e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expression": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "upload_date": {
                                    "variable_value": "'20121011'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str": {
                                    "variable_value": "'2012/10/11 01:56:38'",
                                    "variable_type": "str",
                                    "variable_shape": "19"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d54e710>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": "['%d %B %Y', '%B %d %Y', '%b %d %Y', '%Y-%m-%d', '%d/%m/%Y', '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M', '%Y-%m-%dT%H:%M:%SZ', '%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%S.%f0Z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M']",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "expression": {
                                    "variable_value": "'%Y-%m-%dT%H:%M'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "upload_date": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "date_str": {
                                    "variable_value": "'1968-12-10'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d2148f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "expression": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "upload_date": {
                                    "variable_value": "'19681210'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "date_str": {
                                    "variable_value": "'1968-12-10'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "date_str.replace": {
                                    "variable_value": "<built-in method replace of str object at 0x10d2148f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "format_expressions": {
                                    "variable_value": "['%d %B %Y', '%B %d %Y', '%b %d %Y', '%Y-%m-%d', '%d/%m/%Y', '%Y/%m/%d %H:%M:%S', '%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M', '%Y-%m-%dT%H:%M:%SZ', '%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%S.%f0Z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%dT%H:%M']",
                                    "variable_type": "list",
                                    "variable_shape": "13"
                                },
                                "expression": {
                                    "variable_value": "'%Y-%m-%dT%H:%M'",
                                    "variable_type": "str",
                                    "variable_shape": "14"
                                },
                                "strftime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime.strptime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime.datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "datetime": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timetuple": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils.parsedate_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email.utils": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "email": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def compat_ord(c):\n    if type(c) is int: return c\n    else: return ord(c)",
                "def preferredencoding():\n    \"\"\"Get preferred encoding.\n\n    Returns the best encoding scheme for the system, based on\n    locale.getpreferredencoding() and some further tweaks.\n    \"\"\"\n    try:\n        pref = locale.getpreferredencoding()\n        u'TEST'.encode(pref)\n    except:\n        pref = 'UTF-8'\n\n    return pref",
                "def xpath_with_ns(path, ns_map):\n    components = [c.split(':') for c in path.split('/')]\n    replaced = []\n    for c in components:\n        if len(c) == 1:\n            replaced.append(c[0])\n        else:\n            ns, tag = c\n            replaced.append('{%s}%s' % (ns_map[ns], tag))\n    return '/'.join(replaced)",
                "def htmlentity_transform(matchobj):\n    \"\"\"Transforms an HTML entity to a character.\n\n    This function receives a match object and is intended to be used with\n    the re.sub() function.\n    \"\"\"\n    entity = matchobj.group(1)\n\n    # Known non-numeric HTML entity\n    if entity in compat_html_entities.name2codepoint:\n        return compat_chr(compat_html_entities.name2codepoint[entity])\n\n    mobj = re.match(u'(?u)#(x?\\\\d+)', entity)\n    if mobj is not None:\n        numstr = mobj.group(1)\n        if numstr.startswith(u'x'):\n            base = 16\n            numstr = u'0%s' % numstr\n        else:\n            base = 10\n        return compat_chr(int(numstr, base))\n\n    # Unknown entity in name, return its literal representation\n    return (u'&%s;' % entity)",
                "def get_element_by_id(id, html):\n    \"\"\"Return the content of the tag with the specified ID in the passed HTML document\"\"\"\n    return get_element_by_attribute(\"id\", id, html)",
                "def get_element_by_attribute(attribute, value, html):\n    \"\"\"Return the content of the tag with the specified attribute in the passed HTML document\"\"\"\n    parser = AttrParser(attribute, value)\n    try:\n        parser.loads(html)\n    except compat_html_parser.HTMLParseError:\n        pass\n    return parser.get_result()",
                "def get_meta_content(name, html):\n    \"\"\"\n    Return the content attribute from the meta tag with the given name attribute.\n    \"\"\"\n    parser = MetaParser(name)\n    try:\n        parser.loads(html)\n    except compat_html_parser.HTMLParseError:\n        pass\n    return parser.get_result()",
                "def clean_html(html):\n    \"\"\"Clean an HTML snippet into a readable string\"\"\"\n    # Newline vs <br />\n    html = html.replace('\\n', ' ')\n    html = re.sub(r'\\s*<\\s*br\\s*/?\\s*>\\s*', '\\n', html)\n    html = re.sub(r'<\\s*/\\s*p\\s*>\\s*<\\s*p[^>]*>', '\\n', html)\n    # Strip html tags\n    html = re.sub('<.*?>', '', html)\n    # Replace html entities\n    html = unescapeHTML(html)\n    return html.strip()",
                "def sanitize_open(filename, open_mode):\n    \"\"\"Try to open the given filename, and slightly tweak it if this fails.\n\n    Attempts to open the given filename. If this fails, it tries to change\n    the filename slightly, step by step, until it's either able to open it\n    or it fails and raises a final exception, like the standard open()\n    function.\n\n    It returns the tuple (stream, definitive_file_name).\n    \"\"\"\n    try:\n        if filename == u'-':\n            if sys.platform == 'win32':\n                import msvcrt\n                msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)\n            return (sys.stdout.buffer if hasattr(sys.stdout, 'buffer') else sys.stdout, filename)\n        stream = open(encodeFilename(filename), open_mode)\n        return (stream, filename)\n    except (IOError, OSError) as err:\n        if err.errno in (errno.EACCES,):\n            raise\n\n        # In case of error, try to remove win32 forbidden chars\n        alt_filename = os.path.join(\n                        re.sub(u'[/<>:\"\\\\|\\\\\\\\?\\\\*]', u'#', path_part)\n                        for path_part in os.path.split(filename)\n                       )\n        if alt_filename == filename:\n            raise\n        else:\n            # An exception here should be caught in the caller\n            stream = open(encodeFilename(filename), open_mode)\n            return (stream, alt_filename)",
                "def timeconvert(timestr):\n    \"\"\"Convert RFC 2822 defined time string into system timestamp\"\"\"\n    timestamp = None\n    timetuple = email.utils.parsedate_tz(timestr)\n    if timetuple is not None:\n        timestamp = email.utils.mktime_tz(timetuple)\n    return timestamp",
                "def sanitize_filename(s, restricted=False, is_id=False):\n    \"\"\"Sanitizes a string so it could be used as part of a filename.\n    If restricted is set, use a stricter subset of allowed characters.\n    Set is_id if this is not an arbitrary string, but an ID that should be kept if possible\n    \"\"\"\n    def replace_insane(char):\n        if char == '?' or ord(char) < 32 or ord(char) == 127:\n            return ''\n        elif char == '\"':\n            return '' if restricted else '\\''\n        elif char == ':':\n            return '_-' if restricted else ' -'\n        elif char in '\\\\/|*<>':\n            return '_'\n        if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n            return '_'\n        if restricted and ord(char) > 127:\n            return '_'\n        return char\n\n    result = u''.join(map(replace_insane, s))\n    if not is_id:\n        while '__' in result:\n            result = result.replace('__', '_')\n        result = result.strip('_')\n        # Common case of \"Foreign band name - English song title\"\n        if restricted and result.startswith('-_'):\n            result = result[2:]\n        if not result:\n            result = '_'\n    return result",
                "def orderedSet(iterable):\n    \"\"\" Remove all duplicates from the input iterable \"\"\"\n    res = []\n    for el in iterable:\n        if el not in res:\n            res.append(el)\n    return res",
                "def unescapeHTML(s):\n    \"\"\"\n    @param s a string\n    \"\"\"\n    assert type(s) == type(u'')\n\n    result = re.sub(u'(?u)&(.+?);', htmlentity_transform, s)\n    return result",
                "def encodeFilename(s, for_subprocess=False):\n    \"\"\"\n    @param s The name of the file\n    \"\"\"\n\n    assert type(s) == compat_str\n\n    # Python 3 has a Unicode API\n    if sys.version_info >= (3, 0):\n        return s\n\n    if sys.platform == 'win32' and sys.getwindowsversion()[0] >= 5:\n        # Pass u'' directly to use Unicode APIs on Windows 2000 and up\n        # (Detecting Windows NT 4 is tricky because 'major >= 4' would\n        # match Windows 9x series as well. Besides, NT 4 is obsolete.)\n        if not for_subprocess:\n            return s\n        else:\n            # For subprocess calls, encode with locale encoding\n            # Refer to http://stackoverflow.com/a/9951851/35070\n            encoding = preferredencoding()\n    else:\n        encoding = sys.getfilesystemencoding()\n    if encoding is None:\n        encoding = 'utf-8'\n    return s.encode(encoding, 'ignore')",
                "def decodeOption(optval):\n    if optval is None:\n        return optval\n    if isinstance(optval, bytes):\n        optval = optval.decode(preferredencoding())\n\n    assert isinstance(optval, compat_str)\n    return optval",
                "def formatSeconds(secs):\n    if secs > 3600:\n        return '%d:%02d:%02d' % (secs // 3600, (secs % 3600) // 60, secs % 60)\n    elif secs > 60:\n        return '%d:%02d' % (secs // 60, secs % 60)\n    else:\n        return '%d' % secs",
                "def make_HTTPS_handler(opts_no_check_certificate, **kwargs):\n    if sys.version_info < (3, 2):\n        import httplib\n\n        class HTTPSConnectionV3(httplib.HTTPSConnection):\n            def __init__(self, *args, **kwargs):\n                httplib.HTTPSConnection.__init__(self, *args, **kwargs)\n\n            def connect(self):\n                sock = socket.create_connection((self.host, self.port), self.timeout)\n                if getattr(self, '_tunnel_host', False):\n                    self.sock = sock\n                    self._tunnel()\n                try:\n                    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv3)\n                except ssl.SSLError:\n                    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv23)\n\n        class HTTPSHandlerV3(compat_urllib_request.HTTPSHandler):\n            def https_open(self, req):\n                return self.do_open(HTTPSConnectionV3, req)\n        return HTTPSHandlerV3(**kwargs)\n    else:\n        context = ssl.SSLContext(ssl.PROTOCOL_SSLv3)\n        context.verify_mode = (ssl.CERT_NONE\n                               if opts_no_check_certificate\n                               else ssl.CERT_REQUIRED)\n        context.set_default_verify_paths()\n        try:\n            context.load_default_certs()\n        except AttributeError:\n            pass  # Python < 3.4\n        return compat_urllib_request.HTTPSHandler(context=context, **kwargs)",
                "def unified_strdate(date_str):\n    \"\"\"Return a string with the date in the format YYYYMMDD\"\"\"\n    upload_date = None\n    #Replace commas\n    date_str = date_str.replace(',',' ')\n    # %z (UTC offset) is only supported in python>=3.2\n    date_str = re.sub(r' ?(\\+|-)[0-9:]*$', '', date_str)\n    format_expressions = [\n        '%d %B %Y',\n        '%B %d %Y',\n        '%b %d %Y',\n        '%Y-%m-%d',\n        '%d/%m/%Y',\n        '%Y/%m/%d %H:%M:%S',\n        '%Y-%m-%d %H:%M:%S',\n        '%d.%m.%Y %H:%M',\n        '%Y-%m-%dT%H:%M:%SZ',\n        '%Y-%m-%dT%H:%M:%S.%fZ',\n        '%Y-%m-%dT%H:%M:%S.%f0Z',\n        '%Y-%m-%dT%H:%M:%S',\n        '%Y-%m-%dT%H:%M',\n    ]\n    for expression in format_expressions:\n        try:\n            upload_date = datetime.datetime.strptime(date_str, expression).strftime('%Y%m%d')\n        except ValueError:\n            pass\n    if upload_date is None:\n        timetuple = email.utils.parsedate_tz(date_str)\n        if timetuple:\n            upload_date = datetime.datetime(*timetuple[:6]).strftime('%Y%m%d')\n    return upload_date",
                "def determine_ext(url, default_ext=u'unknown_video'):\n    guess = url.partition(u'?')[0].rpartition(u'.')[2]\n    if re.match(r'^[A-Za-z0-9]+$', guess):\n        return guess\n    else:\n        return default_ext",
                "def subtitles_filename(filename, sub_lang, sub_format):\n    return filename.rsplit('.', 1)[0] + u'.' + sub_lang + u'.' + sub_format",
                "def date_from_str(date_str):\n    \"\"\"\n    Return a datetime object from a string in the format YYYYMMDD or\n    (now|today)[+-][0-9](day|week|month|year)(s)?\"\"\"\n    today = datetime.date.today()\n    if date_str == 'now'or date_str == 'today':\n        return today\n    match = re.match('(now|today)(?P<sign>[+-])(?P<time>\\d+)(?P<unit>day|week|month|year)(s)?', date_str)\n    if match is not None:\n        sign = match.group('sign')\n        time = int(match.group('time'))\n        if sign == '-':\n            time = -time\n        unit = match.group('unit')\n        #A bad aproximation?\n        if unit == 'month':\n            unit = 'day'\n            time *= 30\n        elif unit == 'year':\n            unit = 'day'\n            time *= 365\n        unit += 's'\n        delta = datetime.timedelta(**{unit: time})\n        return today + delta\n    return datetime.datetime.strptime(date_str, \"%Y%m%d\").date()",
                "def hyphenate_date(date_str):\n    \"\"\"\n    Convert a date in 'YYYYMMDD' format to 'YYYY-MM-DD' format\"\"\"\n    match = re.match(r'^(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)$', date_str)\n    if match is not None:\n        return '-'.join(match.groups())\n    else:\n        return date_str",
                "def platform_name():\n    \"\"\" Returns the platform name as a compat_str \"\"\"\n    res = platform.platform()\n    if isinstance(res, bytes):\n        res = res.decode(preferredencoding())\n\n    assert isinstance(res, compat_str)\n    return res",
                "def write_string(s, out=None):\n    if out is None:\n        out = sys.stderr\n    assert type(s) == compat_str\n\n    if ('b' in getattr(out, 'mode', '') or\n            sys.version_info[0] < 3):  # Python 2 lies about mode of sys.stderr\n        s = s.encode(preferredencoding(), 'ignore')\n    try:\n        out.write(s)\n    except UnicodeEncodeError:\n        # In Windows shells, this can fail even when the codec is just charmap!?\n        # See https://wiki.python.org/moin/PrintFails#Issue\n        if sys.platform == 'win32' and hasattr(out, 'encoding'):\n            s = s.encode(out.encoding, 'ignore').decode(out.encoding)\n            out.write(s)\n        else:\n            raise\n\n    out.flush()",
                "def bytes_to_intlist(bs):\n    if not bs:\n        return []\n    if isinstance(bs[0], int):  # Python 3\n        return list(bs)\n    else:\n        return [ord(c) for c in bs]",
                "def intlist_to_bytes(xs):\n    if not xs:\n        return b''\n    if isinstance(chr(0), bytes):  # Python 2\n        return ''.join([chr(x) for x in xs])\n    else:\n        return bytes(xs)",
                "def get_cachedir(params={}):\n    cache_root = os.environ.get('XDG_CACHE_HOME',\n                                os.path.expanduser('~/.cache'))\n    return params.get('cachedir', os.path.join(cache_root, 'youtube-dl'))",
                "def shell_quote(args):\n    quoted_args = []\n    encoding = sys.getfilesystemencoding()\n    if encoding is None:\n        encoding = 'utf-8'\n    for a in args:\n        if isinstance(a, bytes):\n            # We may get a filename encoded with 'encodeFilename'\n            a = a.decode(encoding)\n        quoted_args.append(pipes.quote(a))\n    return u' '.join(quoted_args)",
                "def takewhile_inclusive(pred, seq):\n    \"\"\" Like itertools.takewhile, but include the latest evaluated element\n        (the first element so that Not pred(e)) \"\"\"\n    for e in seq:\n        yield e\n        if not pred(e):\n            return",
                "def smuggle_url(url, data):\n    \"\"\" Pass additional data in a URL for internal use. \"\"\"\n\n    sdata = compat_urllib_parse.urlencode(\n        {u'__youtubedl_smuggle': json.dumps(data)})\n    return url + u'#' + sdata",
                "def unsmuggle_url(smug_url, default=None):\n    if not '#__youtubedl_smuggle' in smug_url:\n        return smug_url, default\n    url, _, sdata = smug_url.rpartition(u'#')\n    jsond = compat_parse_qs(sdata)[u'__youtubedl_smuggle'][0]\n    data = json.loads(jsond)\n    return url, data",
                "def format_bytes(bytes):\n    if bytes is None:\n        return u'N/A'\n    if type(bytes) is str:\n        bytes = float(bytes)\n    if bytes == 0.0:\n        exponent = 0\n    else:\n        exponent = int(math.log(bytes, 1024.0))\n    suffix = [u'B', u'KiB', u'MiB', u'GiB', u'TiB', u'PiB', u'EiB', u'ZiB', u'YiB'][exponent]\n    converted = float(bytes) / float(1024 ** exponent)\n    return u'%.2f%s' % (converted, suffix)",
                "def str_to_int(int_str):\n    int_str = re.sub(r'[,\\.]', u'', int_str)\n    return int(int_str)",
                "def get_term_width():\n    columns = os.environ.get('COLUMNS', None)\n    if columns:\n        return int(columns)\n\n    try:\n        sp = subprocess.Popen(\n            ['stty', 'size'],\n            stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        out, err = sp.communicate()\n        return int(out.split()[1])\n    except:\n        pass\n    return None",
                "def month_by_name(name):\n    \"\"\" Return the number of a month by (locale-independently) English name \"\"\"\n\n    ENGLISH_NAMES = [\n        u'January', u'February', u'March', u'April', u'May', u'June',\n        u'July', u'August', u'September', u'October', u'November', u'December']\n    try:\n        return ENGLISH_NAMES.index(name) + 1\n    except ValueError:\n        return None",
                "def fix_xml_ampersands(xml_str):\n    \"\"\"Replace all the '&' by '&amp;' in XML\"\"\"\n    return re.sub(\n        r'&(?!amp;|lt;|gt;|apos;|quot;|#x[0-9a-fA-F]{,4};|#[0-9]{,4};)',\n        u'&amp;',\n        xml_str)",
                "def setproctitle(title):\n    assert isinstance(title, compat_str)\n    try:\n        libc = ctypes.cdll.LoadLibrary(\"libc.so.6\")\n    except OSError:\n        return\n    title = title\n    buf = ctypes.create_string_buffer(len(title) + 1)\n    buf.value = title.encode('utf-8')\n    try:\n        libc.prctl(15, ctypes.byref(buf), 0, 0, 0)\n    except AttributeError:\n        return  # Strange libc, just skip this",
                "def remove_start(s, start):\n    if s.startswith(start):\n        return s[len(start):]\n    return s",
                "def url_basename(url):\n    path = compat_urlparse.urlparse(url).path\n    return path.strip(u'/').split(u'/')[-1]",
                "def int_or_none(v, scale=1):\n    return v if v is None else (int(v) // scale)",
                "def parse_duration(s):\n    if s is None:\n        return None\n\n    m = re.match(\n        r'(?:(?:(?P<hours>[0-9]+):)?(?P<mins>[0-9]+):)?(?P<secs>[0-9]+)$', s)\n    if not m:\n        return None\n    res = int(m.group('secs'))\n    if m.group('mins'):\n        res += int(m.group('mins')) * 60\n        if m.group('hours'):\n            res += int(m.group('hours')) * 60 * 60\n    return res",
                "def prepend_extension(filename, ext):\n    name, real_ext = os.path.splitext(filename) \n    return u'{0}.{1}{2}'.format(name, ext, real_ext)",
                "def check_executable(exe, args=[]):\n    \"\"\" Checks if the given binary is installed somewhere in PATH, and returns its name.\n    args can be a list of arguments for a short output (like -version) \"\"\"\n    try:\n        subprocess.Popen([exe] + args, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n    except OSError:\n        return False\n    return exe",
                "def uppercase_escape(s):\n    return re.sub(\n        r'\\\\U([0-9a-fA-F]{8})',\n        lambda m: compat_chr(int(m.group(1), base=16)), s)",
                "def compat_print(s):\n    print(s.encode(preferredencoding(), 'xmlcharrefreplace'))",
                "def compat_print(s):\n    assert type(s) == type(u'')\n    print(s)",
                "def write_json_file(obj, fn):\n    with open(fn, 'wb') as f:\n        json.dump(obj, f)",
                "def write_json_file(obj, fn):\n    with open(fn, 'w', encoding='utf-8') as f:\n        json.dump(obj, f)",
                "def find_xpath_attr(node, xpath, key, val):\n    \"\"\" Find the xpath xpath[@key=val] \"\"\"\n    assert re.match(r'^[a-zA-Z]+$', key)\n    assert re.match(r'^[a-zA-Z0-9@\\s:._]*$', val)\n    expr = xpath + u\"[@%s='%s']\" % (key, val)\n    return node.find(expr)",
                "def find_xpath_attr(node, xpath, key, val):\n    for f in node.findall(xpath):\n        if f.attrib.get(key) == val:\n            return f\n    return None",
                "def __init(self):\n    compat_html_parser.HTMLParser.__init__(self)\n    self.html = None",
                "def loads(self, html):\n    self.html = html\n    self.feed(html)\n    self.close()",
                "def __init__(self, attribute, value):\n    self.attribute = attribute\n    self.value = value\n    self.result = None\n    self.started = False\n    self.depth = {}\n    self.watch_startpos = False\n    self.error_count = 0\n    BaseHTMLParser.__init__(self)",
                "def error(self, message):\n    if self.error_count > 10 or self.started:\n        raise compat_html_parser.HTMLParseError(message, self.getpos())\n    self.rawdata = '\\n'.join(self.html.split('\\n')[self.getpos()[0]:]) # skip one line\n    self.error_count += 1\n    self.goahead(1)",
                "def handle_starttag(self, tag, attrs):\n    attrs = dict(attrs)\n    if self.started:\n        self.find_startpos(None)\n    if self.attribute in attrs and attrs[self.attribute] == self.value:\n        self.result = [tag]\n        self.started = True\n        self.watch_startpos = True\n    if self.started:\n        if not tag in self.depth: self.depth[tag] = 0\n        self.depth[tag] += 1",
                "def handle_endtag(self, tag):\n    if self.started:\n        if tag in self.depth: self.depth[tag] -= 1\n        if self.depth[self.result[0]] == 0:\n            self.started = False\n            self.result.append(self.getpos())",
                "def find_startpos(self, x):\n    \"\"\"Needed to put the start position of the result (self.result[1])\n    after the opening tag with the requested id\"\"\"\n    if self.watch_startpos:\n        self.watch_startpos = False\n        self.result.append(self.getpos())",
                "def get_result(self):\n    if self.result is None:\n        return None\n    if len(self.result) != 3:\n        return None\n    lines = self.html.split('\\n')\n    lines = lines[self.result[1][0]-1:self.result[2][0]]\n    lines[0] = lines[0][self.result[1][1]:]\n    if len(lines) == 1:\n        lines[-1] = lines[-1][:self.result[2][1]-self.result[1][1]]\n    lines[-1] = lines[-1][:self.result[2][1]]\n    return '\\n'.join(lines).strip()",
                "def __init__(self, name):\n    BaseHTMLParser.__init__(self)\n    self.name = name\n    self.content = None\n    self.result = None",
                "def handle_starttag(self, tag, attrs):\n    if tag != 'meta':\n        return\n    attrs = dict(attrs)\n    if attrs.get('name') == self.name:\n        self.result = attrs.get('content')",
                "def get_result(self):\n    return self.result",
                "def replace_insane(char):\n    if char == '?' or ord(char) < 32 or ord(char) == 127:\n        return ''\n    elif char == '\"':\n        return '' if restricted else '\\''\n    elif char == ':':\n        return '_-' if restricted else ' -'\n    elif char in '\\\\/|*<>':\n        return '_'\n    if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n        return '_'\n    if restricted and ord(char) > 127:\n        return '_'\n    return char",
                "def __init__(self, msg, tb=None, expected=False, cause=None):\n    \"\"\" tb, if given, is the original traceback (so that it can be printed out).\n    If expected is set, this is a normal error message and most likely not a bug in youtube-dl.\n    \"\"\"\n\n    if sys.exc_info()[0] in (compat_urllib_error.URLError, socket.timeout, UnavailableVideoError):\n        expected = True\n    if not expected:\n        msg = msg + u'; please report this issue on https://yt-dl.org/bug . Be sure to call youtube-dl with the --verbose flag and include its complete output. Make sure you are using the latest version; type  youtube-dl -U  to update.'\n    super(ExtractorError, self).__init__(msg)\n\n    self.traceback = tb\n    self.exc_info = sys.exc_info()  # preserve original exception\n    self.cause = cause",
                "def format_traceback(self):\n    if self.traceback is None:\n        return None\n    return u''.join(traceback.format_tb(self.traceback))",
                "def __init__(self, msg, exc_info=None):\n    \"\"\" exc_info, if given, is the original exception that caused the trouble (as returned by sys.exc_info()). \"\"\"\n    super(DownloadError, self).__init__(msg)\n    self.exc_info = exc_info",
                "def __init__(self, msg):\n    self.msg = msg",
                "def __init__(self, downloaded, expected):\n    self.downloaded = downloaded\n    self.expected = expected",
                "@staticmethod\ndef deflate(data):\n    try:\n        return zlib.decompress(data, -zlib.MAX_WBITS)\n    except zlib.error:\n        return zlib.decompress(data)",
                "@staticmethod\ndef addinfourl_wrapper(stream, headers, url, code):\n    if hasattr(compat_urllib_request.addinfourl, 'getcode'):\n        return compat_urllib_request.addinfourl(stream, headers, url, code)\n    ret = compat_urllib_request.addinfourl(stream, headers, url)\n    ret.code = code\n    return ret",
                "def http_request(self, req):\n    for h,v in std_headers.items():\n        if h in req.headers:\n            del req.headers[h]\n        req.add_header(h, v)\n    if 'Youtubedl-no-compression' in req.headers:\n        if 'Accept-encoding' in req.headers:\n            del req.headers['Accept-encoding']\n        del req.headers['Youtubedl-no-compression']\n    if 'Youtubedl-user-agent' in req.headers:\n        if 'User-agent' in req.headers:\n            del req.headers['User-agent']\n        req.headers['User-agent'] = req.headers['Youtubedl-user-agent']\n        del req.headers['Youtubedl-user-agent']\n    return req",
                "def http_response(self, req, resp):\n    old_resp = resp\n    # gzip\n    if resp.headers.get('Content-encoding', '') == 'gzip':\n        content = resp.read()\n        gz = gzip.GzipFile(fileobj=io.BytesIO(content), mode='rb')\n        try:\n            uncompressed = io.BytesIO(gz.read())\n        except IOError as original_ioerror:\n            # There may be junk add the end of the file\n            # See http://stackoverflow.com/q/4928560/35070 for details\n            for i in range(1, 1024):\n                try:\n                    gz = gzip.GzipFile(fileobj=io.BytesIO(content[:-i]), mode='rb')\n                    uncompressed = io.BytesIO(gz.read())\n                except IOError:\n                    continue\n                break\n            else:\n                raise original_ioerror\n        resp = self.addinfourl_wrapper(uncompressed, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    # deflate\n    if resp.headers.get('Content-encoding', '') == 'deflate':\n        gz = io.BytesIO(self.deflate(resp.read()))\n        resp = self.addinfourl_wrapper(gz, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    return resp",
                "def __init__(self, start=None, end=None):\n    \"\"\"start and end must be strings in the format accepted by date\"\"\"\n    if start is not None:\n        self.start = date_from_str(start)\n    else:\n        self.start = datetime.datetime.min.date()\n    if end is not None:\n        self.end = date_from_str(end)\n    else:\n        self.end = datetime.datetime.max.date()\n    if self.start > self.end:\n        raise ValueError('Date range: \"%s\" , the start date must be before the end date' % self)",
                "@classmethod\ndef day(cls, day):\n    \"\"\"Returns a range that only contains the given day\"\"\"\n    return cls(day,day)",
                "def __contains__(self, date):\n    \"\"\"Check if the date is in the range\"\"\"\n    if not isinstance(date, datetime.date):\n        date = date_from_str(date)\n    return self.start <= date <= self.end",
                "def __str__(self):\n    return '%s - %s' % ( self.start.isoformat(), self.end.isoformat())",
                "def _lock_file(f, exclusive):\n    overlapped = OVERLAPPED()\n    overlapped.Offset = 0\n    overlapped.OffsetHigh = 0\n    overlapped.hEvent = 0\n    f._lock_file_overlapped_p = ctypes.pointer(overlapped)\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not LockFileEx(handle, 0x2 if exclusive else 0x0, 0,\n                      whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Locking file failed: %r' % ctypes.FormatError())",
                "def _unlock_file(f):\n    assert f._lock_file_overlapped_p\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not UnlockFileEx(handle, 0,\n                        whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Unlocking file failed: %r' % ctypes.FormatError())",
                "def _lock_file(f, exclusive):\n    fcntl.lockf(f, fcntl.LOCK_EX if exclusive else fcntl.LOCK_SH)",
                "def _unlock_file(f):\n    fcntl.lockf(f, fcntl.LOCK_UN)",
                "def __init__(self, filename, mode, encoding=None):\n    assert mode in ['r', 'a', 'w']\n    self.f = io.open(filename, mode, encoding=encoding)\n    self.mode = mode",
                "def __enter__(self):\n    exclusive = self.mode != 'r'\n    try:\n        _lock_file(self.f, exclusive)\n    except IOError:\n        self.f.close()\n        raise\n    return self",
                "def __exit__(self, etype, value, traceback):\n    try:\n        _unlock_file(self.f)\n    finally:\n        self.f.close()",
                "def __iter__(self):\n    return iter(self.f)",
                "def write(self, *args):\n    return self.f.write(*args)",
                "def read(self, *args):\n    return self.f.read(*args)",
                "def get_method(self):\n    return \"HEAD\"",
                "def __init__(self, pagefunc, pagesize):\n    self._pagefunc = pagefunc\n    self._pagesize = pagesize",
                "def __len__(self):\n    # This is only useful for tests\n    return len(self.getslice())",
                "def getslice(self, start=0, end=None):\n    res = []\n    for pagenum in itertools.count(start // self._pagesize):\n        firstid = pagenum * self._pagesize\n        nextfirstid = pagenum * self._pagesize + self._pagesize\n        if start >= nextfirstid:\n            continue\n\n        page_results = list(self._pagefunc(pagenum))\n\n        startv = (\n            start % self._pagesize\n            if firstid <= start < nextfirstid\n            else 0)\n\n        endv = (\n            ((end - 1) % self._pagesize) + 1\n            if (end is not None and firstid <= end <= nextfirstid)\n            else None)\n\n        if startv != 0 or endv is not None:\n            page_results = page_results[startv:endv]\n        res.extend(page_results)\n\n        # A little optimization - if current page is not \"full\", ie. does\n        # not contain page_size videos then we can assume that this page\n        # is the last one - there are no more ids on further pages -\n        # i.e. no need to query again.\n        if len(page_results) + startv < self._pagesize:\n            break\n\n        # If we got the whole page, but the next page is not interesting,\n        # break out early as well\n        if end == nextfirstid:\n            break\n    return res",
                "def _unquote(string, encoding='utf-8', errors='replace'):\n    if string == '':\n        return string\n    res = string.split('%')\n    if len(res) == 1:\n        return string\n    if encoding is None:\n        encoding = 'utf-8'\n    if errors is None:\n        errors = 'replace'\n    # pct_sequence: contiguous sequence of percent-encoded bytes, decoded\n    pct_sequence = b''\n    string = res[0]\n    for item in res[1:]:\n        try:\n            if not item:\n                raise ValueError\n            pct_sequence += item[:2].decode('hex')\n            rest = item[2:]\n            if not rest:\n                # This segment was just a single percent-encoded character.\n                # May be part of a sequence of code units, so delay decoding.\n                # (Stored in pct_sequence).\n                continue\n        except ValueError:\n            rest = '%' + item\n        # Encountered non-percent-encoded characters. Flush the current\n        # pct_sequence.\n        string += pct_sequence.decode(encoding, errors) + rest\n        pct_sequence = b''\n    if pct_sequence:\n        # Flush the final pct_sequence\n        string += pct_sequence.decode(encoding, errors)\n    return string",
                "def _parse_qsl(qs, keep_blank_values=False, strict_parsing=False,\n            encoding='utf-8', errors='replace'):\n    qs, _coerce_result = qs, unicode\n    pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')]\n    r = []\n    for name_value in pairs:\n        if not name_value and not strict_parsing:\n            continue\n        nv = name_value.split('=', 1)\n        if len(nv) != 2:\n            if strict_parsing:\n                raise ValueError(\"bad query field: %r\" % (name_value,))\n            # Handle case of a control-name with no equal sign\n            if keep_blank_values:\n                nv.append('')\n            else:\n                continue\n        if len(nv[1]) or keep_blank_values:\n            name = nv[0].replace('+', ' ')\n            name = _unquote(name, encoding=encoding, errors=errors)\n            name = _coerce_result(name)\n            value = nv[1].replace('+', ' ')\n            value = _unquote(value, encoding=encoding, errors=errors)\n            value = _coerce_result(value)\n            r.append((name, value))\n    return r",
                "def compat_parse_qs(qs, keep_blank_values=False, strict_parsing=False,\n            encoding='utf-8', errors='replace'):\n    parsed_result = {}\n    pairs = _parse_qsl(qs, keep_blank_values, strict_parsing,\n                    encoding=encoding, errors=errors)\n    for name, value in pairs:\n        if name in parsed_result:\n            parsed_result[name].append(value)\n        else:\n            parsed_result[name] = [value]\n    return parsed_result",
                "def __init__(self, *args, **kwargs):\n    httplib.HTTPSConnection.__init__(self, *args, **kwargs)",
                "def connect(self):\n    sock = socket.create_connection((self.host, self.port), self.timeout)\n    if getattr(self, '_tunnel_host', False):\n        self.sock = sock\n        self._tunnel()\n    try:\n        self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv3)\n    except ssl.SSLError:\n        self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv23)",
                "def https_open(self, req):\n    return self.do_open(HTTPSConnectionV3, req)"
            ],
            "inscope_function_signatures": [
                "compat_ord(c)",
                "preferredencoding()",
                "xpath_with_ns(path, ns_map)",
                "htmlentity_transform(matchobj)",
                "get_element_by_id(id, html)",
                "get_element_by_attribute(attribute, value, html)",
                "get_meta_content(name, html)",
                "clean_html(html)",
                "sanitize_open(filename, open_mode)",
                "timeconvert(timestr)",
                "sanitize_filename(s, restricted=False, is_id=False)",
                "orderedSet(iterable)",
                "unescapeHTML(s)",
                "encodeFilename(s, for_subprocess=False)",
                "decodeOption(optval)",
                "formatSeconds(secs)",
                "make_HTTPS_handler(opts_no_check_certificate, **kwargs)",
                "unified_strdate(date_str)",
                "determine_ext(url, default_ext=u'unknown_video')",
                "subtitles_filename(filename, sub_lang, sub_format)",
                "date_from_str(date_str)",
                "hyphenate_date(date_str)",
                "platform_name()",
                "write_string(s, out=None)",
                "bytes_to_intlist(bs)",
                "intlist_to_bytes(xs)",
                "get_cachedir(params={})",
                "shell_quote(args)",
                "takewhile_inclusive(pred, seq)",
                "smuggle_url(url, data)",
                "unsmuggle_url(smug_url, default=None)",
                "format_bytes(bytes)",
                "str_to_int(int_str)",
                "get_term_width()",
                "month_by_name(name)",
                "fix_xml_ampersands(xml_str)",
                "setproctitle(title)",
                "remove_start(s, start)",
                "url_basename(url)",
                "int_or_none(v, scale=1)",
                "parse_duration(s)",
                "prepend_extension(filename, ext)",
                "check_executable(exe, args=[])",
                "uppercase_escape(s)",
                "compat_print(s)",
                "compat_print(s)",
                "write_json_file(obj, fn)",
                "write_json_file(obj, fn)",
                "find_xpath_attr(node, xpath, key, val)",
                "find_xpath_attr(node, xpath, key, val)",
                "__init(self)",
                "loads(self, html)",
                "__init__(self, attribute, value)",
                "error(self, message)",
                "handle_starttag(self, tag, attrs)",
                "handle_endtag(self, tag)",
                "find_startpos(self, x)",
                "get_result(self)",
                "__init__(self, name)",
                "handle_starttag(self, tag, attrs)",
                "get_result(self)",
                "replace_insane(char)",
                "__init__(self, msg, tb=None, expected=False, cause=None)",
                "format_traceback(self)",
                "__init__(self, msg, exc_info=None)",
                "__init__(self, msg)",
                "__init__(self, downloaded, expected)",
                "deflate(data)",
                "addinfourl_wrapper(stream, headers, url, code)",
                "http_request(self, req)",
                "http_response(self, req, resp)",
                "__init__(self, start=None, end=None)",
                "day(cls, day)",
                "__contains__(self, date)",
                "__str__(self)",
                "_lock_file(f, exclusive)",
                "_unlock_file(f)",
                "_lock_file(f, exclusive)",
                "_unlock_file(f)",
                "__init__(self, filename, mode, encoding=None)",
                "__enter__(self)",
                "__exit__(self, etype, value, traceback)",
                "__iter__(self)",
                "write(self, *args)",
                "read(self, *args)",
                "get_method(self)",
                "__init__(self, pagefunc, pagesize)",
                "__len__(self)",
                "getslice(self, start=0, end=None)",
                "_unquote(string, encoding='utf-8', errors='replace')",
                "_parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')",
                "compat_parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')",
                "__init__(self, *args, **kwargs)",
                "connect(self)",
                "https_open(self, req)"
            ],
            "variables_in_file": {
                "ImportError": [
                    32,
                    89,
                    67,
                    37,
                    72,
                    42,
                    77,
                    47,
                    52,
                    84,
                    57,
                    27,
                    62
                ],
                "compat_subprocess_get_DEVNULL": [
                    83,
                    85
                ],
                "DEVNULL": [
                    83
                ],
                "open": [
                    428,
                    85,
                    217,
                    443,
                    221
                ],
                "os.path.devnull": [
                    85
                ],
                "os.path": [
                    1158,
                    912,
                    913,
                    435,
                    85,
                    437
                ],
                "os": [
                    1158,
                    426,
                    911,
                    912,
                    913,
                    1071,
                    435,
                    85,
                    437
                ],
                "string": [
                    97,
                    104,
                    125,
                    120,
                    124,
                    93,
                    94,
                    95
                ],
                "res": [
                    1153,
                    1154,
                    1182,
                    1203,
                    1216,
                    862,
                    863,
                    96,
                    864,
                    866,
                    867,
                    95,
                    104,
                    105,
                    489,
                    491,
                    492,
                    493,
                    1149,
                    1151
                ],
                "string.split": [
                    95
                ],
                "len": [
                    96,
                    1123,
                    1209,
                    136,
                    144,
                    337,
                    244,
                    342,
                    1113,
                    1179,
                    349
                ],
                "encoding": [
                    98,
                    99,
                    1020,
                    525,
                    527,
                    528,
                    529,
                    146,
                    530,
                    1015,
                    149,
                    1014,
                    984,
                    120,
                    1016,
                    124,
                    158
                ],
                "errors": [
                    100,
                    101,
                    146,
                    149,
                    120,
                    124,
                    158
                ],
                "pct_sequence": [
                    103,
                    109,
                    120,
                    121,
                    122,
                    124
                ],
                "item": [
                    105,
                    107,
                    109,
                    110,
                    117
                ],
                "ValueError": [
                    1094,
                    138,
                    108,
                    780,
                    846,
                    116
                ],
                "decode": [
                    884,
                    109
                ],
                "rest": [
                    120,
                    117,
                    110,
                    111
                ],
                "pct_sequence.decode": [
                    120,
                    124
                ],
                "qs": [
                    129,
                    130,
                    157
                ],
                "_coerce_result": [
                    129,
                    147,
                    150
                ],
                "unicode": [
                    129,
                    167
                ],
                "pairs": [
                    130,
                    132,
                    157,
                    159
                ],
                "s2": [
                    130
                ],
                "s1": [
                    130
                ],
                "qs.split": [
                    130
                ],
                "s1.split": [
                    130
                ],
                "r": [
                    152,
                    131,
                    151
                ],
                "name_value": [
                    138,
                    132,
                    133,
                    135
                ],
                "strict_parsing": [
                    137,
                    133,
                    157
                ],
                "nv": [
                    135,
                    136,
                    141,
                    144,
                    145,
                    148
                ],
                "name_value.split": [
                    135
                ],
                "keep_blank_values": [
                    144,
                    140,
                    157
                ],
                "nv.append": [
                    141
                ],
                "name": [
                    160,
                    161,
                    163,
                    1093,
                    1158,
                    391,
                    1159,
                    145,
                    146,
                    147,
                    373,
                    151,
                    159
                ],
                "replace": [
                    145,
                    148
                ],
                "_unquote": [
                    146,
                    149
                ],
                "value": [
                    161,
                    163,
                    291,
                    359,
                    148,
                    149,
                    150,
                    151,
                    159
                ],
                "r.append": [
                    151
                ],
                "parsed_result": [
                    160,
                    161,
                    163,
                    164,
                    156
                ],
                "_parse_qsl": [
                    157
                ],
                "append": [
                    161
                ],
                "compat_str": [
                    866,
                    167,
                    169,
                    873,
                    1107,
                    539,
                    510
                ],
                "NameError": [
                    168,
                    173
                ],
                "str": [
                    169,
                    1054
                ],
                "compat_chr": [
                    261,
                    1222,
                    172,
                    174,
                    271
                ],
                "unichr": [
                    172
                ],
                "chr": [
                    904,
                    905,
                    174
                ],
                "type": [
                    873,
                    177,
                    210,
                    499,
                    181,
                    1054,
                    510
                ],
                "c": [
                    898,
                    177,
                    178,
                    243,
                    244,
                    241,
                    245,
                    247
                ],
                "int": [
                    1153,
                    1059,
                    1222,
                    808,
                    1067,
                    271,
                    177,
                    1073,
                    1138,
                    1151,
                    1080,
                    1149,
                    895
                ],
                "ord": [
                    178,
                    898,
                    461,
                    471
                ],
                "compiled_regex_type": [
                    181
                ],
                "re.compile": [
                    276,
                    181
                ],
                "re": [
                    827,
                    1145,
                    227,
                    228,
                    805,
                    1220,
                    263,
                    1066,
                    1100,
                    403,
                    276,
                    181,
                    404,
                    406,
                    436,
                    501,
                    761,
                    790
                ],
                "std_headers": [
                    707,
                    183
                ],
                "pref": [
                    201,
                    203,
                    198,
                    199
                ],
                "locale.getpreferredencoding": [
                    198
                ],
                "locale": [
                    198
                ],
                "encode": [
                    199
                ],
                "sys.version_info": [
                    224,
                    513,
                    552,
                    876,
                    205,
                    215,
                    347
                ],
                "sys": [
                    224,
                    513,
                    516,
                    599,
                    424,
                    552,
                    426,
                    427,
                    872,
                    205,
                    876,
                    527,
                    592,
                    883,
                    917,
                    1014,
                    215,
                    347
                ],
                "print": [
                    211,
                    207
                ],
                "s.encode": [
                    530,
                    884,
                    877,
                    207
                ],
                "s": [
                    514,
                    521,
                    530,
                    1222,
                    207,
                    210,
                    211,
                    475,
                    1122,
                    1123,
                    1124,
                    873,
                    877,
                    879,
                    499,
                    884,
                    501,
                    885,
                    1142,
                    1146,
                    510
                ],
                "preferredencoding": [
                    864,
                    877,
                    525,
                    207,
                    537
                ],
                "fn": [
                    217,
                    221
                ],
                "f": [
                    961,
                    965,
                    966,
                    968,
                    233,
                    234,
                    235,
                    975,
                    978,
                    958,
                    217,
                    218,
                    221,
                    222,
                    959
                ],
                "json.dump": [
                    218,
                    222
                ],
                "json": [
                    218,
                    1047,
                    222,
                    1038
                ],
                "obj": [
                    218,
                    222
                ],
                "re.match": [
                    227,
                    228,
                    805,
                    263,
                    790,
                    1145,
                    827
                ],
                "key": [
                    234,
                    227,
                    229
                ],
                "val": [
                    234,
                    228,
                    229
                ],
                "expr": [
                    229,
                    230
                ],
                "xpath": [
                    233,
                    229
                ],
                "node.find": [
                    230
                ],
                "node": [
                    233,
                    230
                ],
                "node.findall": [
                    233
                ],
                "f.attrib.get": [
                    234
                ],
                "f.attrib": [
                    234
                ],
                "components": [
                    241,
                    243
                ],
                "c.split": [
                    241
                ],
                "path.split": [
                    241
                ],
                "path": [
                    1128,
                    241,
                    1129
                ],
                "replaced": [
                    248,
                    249,
                    242,
                    245
                ],
                "replaced.append": [
                    248,
                    245
                ],
                "ns": [
                    248,
                    247
                ],
                "tag": [
                    320,
                    247,
                    311,
                    248,
                    378,
                    315,
                    316
                ],
                "ns_map": [
                    248
                ],
                "join": [
                    249,
                    905,
                    829,
                    302,
                    345,
                    475,
                    605,
                    1022
                ],
                "entity": [
                    257,
                    260,
                    261,
                    263,
                    274
                ],
                "matchobj.group": [
                    257
                ],
                "matchobj": [
                    257
                ],
                "compat_html_entities.name2codepoint": [
                    260,
                    261
                ],
                "compat_html_entities": [
                    260,
                    261
                ],
                "mobj": [
                    264,
                    265,
                    263
                ],
                "numstr": [
                    265,
                    266,
                    268,
                    271
                ],
                "mobj.group": [
                    265
                ],
                "numstr.startswith": [
                    266
                ],
                "base": [
                    267,
                    270,
                    271
                ],
                "compat_html_parser.locatestarttagend": [
                    276
                ],
                "compat_html_parser": [
                    362,
                    394,
                    301,
                    276,
                    277,
                    279,
                    351
                ],
                "re.VERBOSE": [
                    276
                ],
                "compat_html_parser.HTMLParser": [
                    277,
                    351,
                    279
                ],
                "compat_html_parser.HTMLParser.__init__": [
                    279
                ],
                "self": [
                    557,
                    560,
                    561,
                    562,
                    563,
                    565,
                    567,
                    571,
                    596,
                    598,
                    599,
                    600,
                    603,
                    605,
                    622,
                    623,
                    642,
                    1174,
                    1175,
                    1179,
                    670,
                    671,
                    1183,
                    1184,
                    1185,
                    1189,
                    1192,
                    1197,
                    1209,
                    742,
                    746,
                    747,
                    279,
                    280,
                    283,
                    284,
                    285,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    300,
                    301,
                    302,
                    303,
                    304,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    319,
                    320,
                    321,
                    322,
                    323,
                    838,
                    328,
                    329,
                    330,
                    840,
                    842,
                    844,
                    845,
                    335,
                    846,
                    337,
                    339,
                    340,
                    341,
                    343,
                    344,
                    855,
                    857,
                    350,
                    351,
                    372,
                    373,
                    374,
                    375,
                    381,
                    382,
                    385,
                    984,
                    985,
                    988,
                    990,
                    992,
                    994,
                    998,
                    1000,
                    1003,
                    1006,
                    1009
                ],
                "self.html": [
                    280,
                    339,
                    283,
                    302
                ],
                "html": [
                    355,
                    361,
                    393,
                    402,
                    403,
                    404,
                    406,
                    408,
                    409,
                    283,
                    284
                ],
                "self.feed": [
                    284
                ],
                "self.close": [
                    285
                ],
                "BaseHTMLParser": [
                    297,
                    372,
                    366,
                    287
                ],
                "self.attribute": [
                    290,
                    310
                ],
                "attribute": [
                    290,
                    359
                ],
                "self.value": [
                    291,
                    310
                ],
                "self.result": [
                    321,
                    382,
                    323,
                    292,
                    385,
                    330,
                    335,
                    337,
                    340,
                    341,
                    311,
                    344,
                    343,
                    375
                ],
                "self.started": [
                    322,
                    293,
                    300,
                    308,
                    312,
                    314,
                    319
                ],
                "self.depth": [
                    320,
                    321,
                    294,
                    315,
                    316
                ],
                "self.watch_startpos": [
                    328,
                    313,
                    329,
                    295
                ],
                "self.error_count": [
                    296,
                    300,
                    303
                ],
                "BaseHTMLParser.__init__": [
                    297,
                    372
                ],
                "compat_html_parser.HTMLParseError": [
                    362,
                    301,
                    394
                ],
                "message": [
                    301
                ],
                "self.getpos": [
                    330,
                    323,
                    301,
                    302
                ],
                "self.rawdata": [
                    350,
                    302
                ],
                "self.html.split": [
                    339,
                    302
                ],
                "self.goahead": [
                    304
                ],
                "attrs": [
                    307,
                    310,
                    380,
                    381,
                    382
                ],
                "dict": [
                    307,
                    380
                ],
                "self.find_startpos": [
                    309
                ],
                "self.result.append": [
                    330,
                    323
                ],
                "handle_entityref": [
                    331
                ],
                "handle_charref": [
                    331
                ],
                "handle_data": [
                    331
                ],
                "handle_comment": [
                    331
                ],
                "handle_decl": [
                    332
                ],
                "handle_pi": [
                    332
                ],
                "unknown_decl": [
                    332
                ],
                "find_startpos": [
                    332
                ],
                "lines": [
                    339,
                    340,
                    341,
                    342,
                    343,
                    344,
                    345
                ],
                "strip": [
                    345
                ],
                "AttrParser.parse_endtag": [
                    348
                ],
                "AttrParser": [
                    348,
                    359
                ],
                "startswith": [
                    350
                ],
                "i": [
                    351,
                    349,
                    733,
                    350,
                    735
                ],
                "compat_html_parser.HTMLParser.parse_endtag": [
                    351
                ],
                "get_element_by_attribute": [
                    355
                ],
                "id": [
                    355
                ],
                "parser": [
                    391,
                    359,
                    361,
                    393,
                    364,
                    396
                ],
                "parser.loads": [
                    361,
                    393
                ],
                "parser.get_result": [
                    396,
                    364
                ],
                "self.name": [
                    381,
                    373
                ],
                "self.content": [
                    374
                ],
                "attrs.get": [
                    381,
                    382
                ],
                "MetaParser": [
                    391
                ],
                "html.replace": [
                    402
                ],
                "re.sub": [
                    1220,
                    1066,
                    1100,
                    403,
                    436,
                    404,
                    501,
                    406,
                    761
                ],
                "unescapeHTML": [
                    408
                ],
                "html.strip": [
                    409
                ],
                "filename": [
                    1158,
                    423,
                    427,
                    428,
                    429,
                    437,
                    439,
                    984,
                    443,
                    796
                ],
                "sys.platform": [
                    424,
                    883,
                    516,
                    917
                ],
                "msvcrt.setmode": [
                    426
                ],
                "msvcrt": [
                    426,
                    966,
                    959
                ],
                "sys.stdout.fileno": [
                    426
                ],
                "sys.stdout": [
                    426,
                    427
                ],
                "os.O_BINARY": [
                    426
                ],
                "hasattr": [
                    883,
                    427,
                    700
                ],
                "sys.stdout.buffer": [
                    427
                ],
                "stream": [
                    428,
                    429,
                    443,
                    444,
                    701,
                    702
                ],
                "encodeFilename": [
                    443,
                    428
                ],
                "open_mode": [
                    443,
                    428
                ],
                "IOError": [
                    737,
                    730,
                    430,
                    991
                ],
                "OSError": [
                    962,
                    969,
                    430,
                    1167,
                    1110
                ],
                "err.errno": [
                    431
                ],
                "err": [
                    1079,
                    431
                ],
                "errno.EACCES": [
                    431
                ],
                "errno": [
                    431
                ],
                "alt_filename": [
                    435,
                    444,
                    439
                ],
                "os.path.join": [
                    913,
                    435
                ],
                "path_part": [
                    436,
                    437
                ],
                "os.path.split": [
                    437
                ],
                "timestamp": [
                    449,
                    452,
                    453
                ],
                "timetuple": [
                    450,
                    451,
                    452,
                    783,
                    784,
                    785
                ],
                "email.utils.parsedate_tz": [
                    450,
                    783
                ],
                "email.utils": [
                    450,
                    452,
                    783
                ],
                "email": [
                    450,
                    452,
                    783
                ],
                "timestr": [
                    450
                ],
                "email.utils.mktime_tz": [
                    452
                ],
                "char": [
                    461,
                    463,
                    465,
                    467,
                    469,
                    471,
                    473
                ],
                "restricted": [
                    481,
                    464,
                    466,
                    469,
                    471
                ],
                "char.isspace": [
                    469
                ],
                "result": [
                    481,
                    482,
                    483,
                    484,
                    485,
                    501,
                    502,
                    475,
                    477,
                    478,
                    479
                ],
                "map": [
                    475
                ],
                "replace_insane": [
                    475
                ],
                "is_id": [
                    476
                ],
                "result.replace": [
                    478
                ],
                "result.strip": [
                    479
                ],
                "result.startswith": [
                    481
                ],
                "el": [
                    490,
                    491,
                    492
                ],
                "iterable": [
                    490
                ],
                "res.append": [
                    492
                ],
                "htmlentity_transform": [
                    501
                ],
                "sys.getwindowsversion": [
                    516
                ],
                "for_subprocess": [
                    520
                ],
                "sys.getfilesystemencoding": [
                    1014,
                    527
                ],
                "optval": [
                    534,
                    535,
                    536,
                    537,
                    539,
                    540
                ],
                "isinstance": [
                    866,
                    904,
                    1107,
                    853,
                    895,
                    536,
                    1018,
                    539,
                    863
                ],
                "bytes": [
                    1056,
                    1059,
                    1061,
                    904,
                    907,
                    1055,
                    536,
                    1018,
                    1052,
                    1054,
                    863
                ],
                "optval.decode": [
                    537
                ],
                "secs": [
                    544,
                    545,
                    546,
                    548,
                    543
                ],
                "httplib.HTTPSConnection": [
                    555,
                    557
                ],
                "httplib": [
                    555,
                    557
                ],
                "httplib.HTTPSConnection.__init__": [
                    557
                ],
                "args": [
                    557,
                    1166,
                    1006,
                    1009,
                    1017
                ],
                "kwargs": [
                    572,
                    557,
                    583
                ],
                "sock": [
                    560,
                    562,
                    565,
                    567
                ],
                "socket.create_connection": [
                    560
                ],
                "socket": [
                    560,
                    592
                ],
                "self.host": [
                    560
                ],
                "self.port": [
                    560
                ],
                "self.timeout": [
                    560
                ],
                "getattr": [
                    561,
                    875
                ],
                "self.sock": [
                    562,
                    565,
                    567
                ],
                "self._tunnel": [
                    563
                ],
                "ssl.wrap_socket": [
                    565,
                    567
                ],
                "ssl": [
                    577,
                    565,
                    566,
                    567,
                    574,
                    575
                ],
                "self.key_file": [
                    565,
                    567
                ],
                "self.cert_file": [
                    565,
                    567
                ],
                "ssl.PROTOCOL_SSLv3": [
                    565,
                    574
                ],
                "ssl.SSLError": [
                    566
                ],
                "ssl.PROTOCOL_SSLv23": [
                    567
                ],
                "compat_urllib_request.HTTPSHandler": [
                    569,
                    583
                ],
                "compat_urllib_request": [
                    673,
                    583,
                    1132,
                    569,
                    700,
                    701,
                    702
                ],
                "self.do_open": [
                    571
                ],
                "HTTPSConnectionV3": [
                    571
                ],
                "req": [
                    708,
                    709,
                    710,
                    711,
                    712,
                    713,
                    714,
                    715,
                    716,
                    717,
                    718,
                    719,
                    720,
                    571
                ],
                "HTTPSHandlerV3": [
                    572
                ],
                "context": [
                    578,
                    580,
                    583,
                    574,
                    575
                ],
                "ssl.SSLContext": [
                    574
                ],
                "context.verify_mode": [
                    575
                ],
                "opts_no_check_certificate": [
                    576
                ],
                "ssl.CERT_NONE": [
                    575
                ],
                "ssl.CERT_REQUIRED": [
                    577
                ],
                "context.set_default_verify_paths": [
                    578
                ],
                "context.load_default_certs": [
                    580
                ],
                "AttributeError": [
                    1117,
                    581
                ],
                "Exception": [
                    644,
                    613,
                    585,
                    649,
                    626,
                    658,
                    635
                ],
                "sys.exc_info": [
                    592,
                    599
                ],
                "compat_urllib_error.URLError": [
                    592
                ],
                "compat_urllib_error": [
                    592
                ],
                "socket.timeout": [
                    592
                ],
                "UnavailableVideoError": [
                    592
                ],
                "expected": [
                    593,
                    594,
                    667,
                    671
                ],
                "msg": [
                    642,
                    595,
                    596,
                    622
                ],
                "__init__": [
                    596,
                    622
                ],
                "super": [
                    596,
                    622
                ],
                "ExtractorError": [
                    608,
                    596
                ],
                "self.traceback": [
                    603,
                    605,
                    598
                ],
                "tb": [
                    598
                ],
                "self.exc_info": [
                    623,
                    599
                ],
                "self.cause": [
                    600
                ],
                "cause": [
                    600
                ],
                "traceback.format_tb": [
                    605
                ],
                "traceback": [
                    605
                ],
                "DownloadError": [
                    622
                ],
                "exc_info": [
                    623
                ],
                "self.msg": [
                    642
                ],
                "downloaded": [
                    666,
                    670
                ],
                "self.downloaded": [
                    670
                ],
                "self.expected": [
                    671
                ],
                "compat_urllib_request.HTTPHandler": [
                    673
                ],
                "zlib.decompress": [
                    696,
                    694
                ],
                "zlib": [
                    696,
                    694,
                    695
                ],
                "data": [
                    1038,
                    694,
                    1047,
                    696,
                    1048
                ],
                "zlib.MAX_WBITS": [
                    694
                ],
                "zlib.error": [
                    695
                ],
                "staticmethod": [
                    698,
                    691
                ],
                "compat_urllib_request.addinfourl": [
                    700,
                    701,
                    702
                ],
                "headers": [
                    701,
                    702
                ],
                "url": [
                    1128,
                    1039,
                    789,
                    1045,
                    1048,
                    701,
                    702
                ],
                "code": [
                    701,
                    703
                ],
                "ret": [
                    704,
                    702,
                    703
                ],
                "ret.code": [
                    703
                ],
                "h": [
                    707,
                    708,
                    709,
                    710
                ],
                "v": [
                    1138,
                    707,
                    710
                ],
                "std_headers.items": [
                    707
                ],
                "req.headers": [
                    708,
                    709,
                    711,
                    712,
                    713,
                    714,
                    715,
                    716,
                    717,
                    718,
                    719
                ],
                "req.add_header": [
                    710
                ],
                "old_resp": [
                    742,
                    743,
                    747,
                    748,
                    723
                ],
                "resp": [
                    742,
                    743,
                    745,
                    746,
                    747,
                    748,
                    749,
                    723,
                    725,
                    726
                ],
                "resp.headers.get": [
                    745,
                    725
                ],
                "resp.headers": [
                    745,
                    725
                ],
                "content": [
                    735,
                    726,
                    727
                ],
                "resp.read": [
                    746,
                    726
                ],
                "gz": [
                    736,
                    746,
                    747,
                    727,
                    729,
                    735
                ],
                "gzip.GzipFile": [
                    735,
                    727
                ],
                "gzip": [
                    735,
                    727
                ],
                "io.BytesIO": [
                    736,
                    746,
                    727,
                    729,
                    735
                ],
                "io": [
                    736,
                    746,
                    727,
                    984,
                    729,
                    735
                ],
                "uncompressed": [
                    736,
                    729,
                    742
                ],
                "gz.read": [
                    736,
                    729
                ],
                "range": [
                    733
                ],
                "original_ioerror": [
                    741
                ],
                "self.addinfourl_wrapper": [
                    747,
                    742
                ],
                "old_resp.headers": [
                    747,
                    742
                ],
                "old_resp.url": [
                    747,
                    742
                ],
                "old_resp.code": [
                    747,
                    742
                ],
                "resp.msg": [
                    748,
                    743
                ],
                "old_resp.msg": [
                    748,
                    743
                ],
                "self.deflate": [
                    746
                ],
                "https_request": [
                    751
                ],
                "http_request": [
                    751
                ],
                "https_response": [
                    752
                ],
                "http_response": [
                    752
                ],
                "upload_date": [
                    779,
                    782,
                    785,
                    786,
                    757
                ],
                "date_str": [
                    803,
                    805,
                    779,
                    783,
                    822,
                    759,
                    761,
                    827,
                    831
                ],
                "date_str.replace": [
                    759
                ],
                "format_expressions": [
                    777,
                    762
                ],
                "expression": [
                    777,
                    779
                ],
                "strftime": [
                    785,
                    779
                ],
                "datetime.datetime.strptime": [
                    779,
                    822
                ],
                "datetime.datetime": [
                    840,
                    779,
                    844,
                    785,
                    822
                ],
                "datetime": [
                    802,
                    840,
                    779,
                    844,
                    785,
                    820,
                    853,
                    822
                ],
                "guess": [
                    789,
                    790,
                    791
                ],
                "rpartition": [
                    789
                ],
                "url.partition": [
                    789
                ],
                "default_ext": [
                    793
                ],
                "filename.rsplit": [
                    796
                ],
                "sub_lang": [
                    796
                ],
                "sub_format": [
                    796
                ],
                "today": [
                    802,
                    804,
                    821
                ],
                "datetime.date.today": [
                    802
                ],
                "datetime.date": [
                    802,
                    853
                ],
                "match": [
                    805,
                    806,
                    807,
                    808,
                    811,
                    827,
                    828,
                    829
                ],
                "sign": [
                    809,
                    807
                ],
                "match.group": [
                    808,
                    811,
                    807
                ],
                "time": [
                    808,
                    810,
                    815,
                    818,
                    820
                ],
                "unit": [
                    811,
                    813,
                    814,
                    816,
                    817,
                    819,
                    820
                ],
                "delta": [
                    820,
                    821
                ],
                "datetime.timedelta": [
                    820
                ],
                "date": [
                    854,
                    853,
                    822,
                    855
                ],
                "match.groups": [
                    829
                ],
                "object": [
                    833,
                    1172,
                    981
                ],
                "start": [
                    1122,
                    1123,
                    1186,
                    837,
                    838,
                    1192,
                    1193,
                    1183
                ],
                "self.start": [
                    838,
                    840,
                    845,
                    855,
                    857
                ],
                "date_from_str": [
                    854,
                    842,
                    838
                ],
                "datetime.datetime.min.date": [
                    840
                ],
                "datetime.datetime.min": [
                    840
                ],
                "end": [
                    841,
                    842,
                    1197,
                    1198,
                    1214
                ],
                "self.end": [
                    842,
                    844,
                    845,
                    855,
                    857
                ],
                "datetime.datetime.max.date": [
                    844
                ],
                "datetime.datetime.max": [
                    844
                ],
                "cls": [
                    850
                ],
                "day": [
                    850
                ],
                "classmethod": [
                    847
                ],
                "self.start.isoformat": [
                    857
                ],
                "self.end.isoformat": [
                    857
                ],
                "platform.platform": [
                    862
                ],
                "platform": [
                    862
                ],
                "res.decode": [
                    864
                ],
                "out": [
                    871,
                    872,
                    875,
                    879,
                    883,
                    884,
                    885,
                    1079,
                    1080,
                    889
                ],
                "sys.stderr": [
                    872
                ],
                "out.write": [
                    885,
                    879
                ],
                "UnicodeEncodeError": [
                    880
                ],
                "out.encoding": [
                    884
                ],
                "out.flush": [
                    889
                ],
                "bs": [
                    896,
                    898,
                    893,
                    895
                ],
                "list": [
                    896,
                    1189
                ],
                "xs": [
                    905,
                    907,
                    902
                ],
                "x": [
                    905
                ],
                "cache_root": [
                    913,
                    911
                ],
                "os.environ.get": [
                    1071,
                    911
                ],
                "os.environ": [
                    1071,
                    911
                ],
                "os.path.expanduser": [
                    912
                ],
                "params.get": [
                    913
                ],
                "params": [
                    913
                ],
                "ctypes.Structure": [
                    921
                ],
                "ctypes": [
                    921,
                    923,
                    924,
                    925,
                    926,
                    927,
                    930,
                    933,
                    934,
                    935,
                    936,
                    937,
                    938,
                    940,
                    943,
                    944,
                    945,
                    946,
                    947,
                    949,
                    958,
                    962,
                    969,
                    1109,
                    1113,
                    1116
                ],
                "_fields_": [
                    922
                ],
                "ctypes.wintypes.LPVOID": [
                    923,
                    924
                ],
                "ctypes.wintypes": [
                    933,
                    934,
                    935,
                    936,
                    937,
                    940,
                    943,
                    944,
                    945,
                    946,
                    949,
                    923,
                    924,
                    925,
                    926,
                    927
                ],
                "ctypes.wintypes.DWORD": [
                    934,
                    935,
                    936,
                    937,
                    944,
                    945,
                    946,
                    925,
                    926
                ],
                "ctypes.wintypes.HANDLE": [
                    943,
                    933,
                    927
                ],
                "kernel32": [
                    930,
                    931,
                    941
                ],
                "ctypes.windll.kernel32": [
                    930
                ],
                "ctypes.windll": [
                    930
                ],
                "LockFileEx": [
                    960,
                    940,
                    931,
                    932
                ],
                "kernel32.LockFileEx": [
                    931
                ],
                "LockFileEx.argtypes": [
                    932
                ],
                "ctypes.POINTER": [
                    938,
                    947
                ],
                "OVERLAPPED": [
                    954,
                    938,
                    947
                ],
                "LockFileEx.restype": [
                    940
                ],
                "ctypes.wintypes.BOOL": [
                    940,
                    949
                ],
                "UnlockFileEx": [
                    967,
                    941,
                    942,
                    949
                ],
                "kernel32.UnlockFileEx": [
                    941
                ],
                "UnlockFileEx.argtypes": [
                    942
                ],
                "UnlockFileEx.restype": [
                    949
                ],
                "whole_low": [
                    968,
                    961,
                    950
                ],
                "whole_high": [
                    968,
                    961,
                    951
                ],
                "overlapped": [
                    954,
                    955,
                    956,
                    957,
                    958
                ],
                "overlapped.Offset": [
                    955
                ],
                "overlapped.OffsetHigh": [
                    956
                ],
                "overlapped.hEvent": [
                    957
                ],
                "f._lock_file_overlapped_p": [
                    968,
                    961,
                    965,
                    958
                ],
                "ctypes.pointer": [
                    958
                ],
                "handle": [
                    960,
                    967,
                    966,
                    959
                ],
                "msvcrt.get_osfhandle": [
                    966,
                    959
                ],
                "f.fileno": [
                    966,
                    959
                ],
                "exclusive": [
                    960,
                    988,
                    990,
                    975
                ],
                "ctypes.FormatError": [
                    969,
                    962
                ],
                "fcntl.lockf": [
                    978,
                    975
                ],
                "fcntl": [
                    978,
                    975
                ],
                "fcntl.LOCK_EX": [
                    975
                ],
                "fcntl.LOCK_SH": [
                    975
                ],
                "fcntl.LOCK_UN": [
                    978
                ],
                "mode": [
                    984,
                    985,
                    983
                ],
                "self.f": [
                    992,
                    998,
                    1000,
                    1003,
                    1006,
                    1009,
                    984,
                    990
                ],
                "io.open": [
                    984
                ],
                "self.mode": [
                    985,
                    988
                ],
                "_lock_file": [
                    990
                ],
                "self.f.close": [
                    992,
                    1000
                ],
                "_unlock_file": [
                    998
                ],
                "iter": [
                    1003
                ],
                "self.f.write": [
                    1006
                ],
                "self.f.read": [
                    1009
                ],
                "quoted_args": [
                    1021,
                    1013,
                    1022
                ],
                "a": [
                    1017,
                    1018,
                    1020,
                    1021
                ],
                "a.decode": [
                    1020
                ],
                "quoted_args.append": [
                    1021
                ],
                "pipes.quote": [
                    1021
                ],
                "pipes": [
                    1021
                ],
                "e": [
                    1028,
                    1029,
                    1030
                ],
                "seq": [
                    1028
                ],
                "pred": [
                    1030
                ],
                "sdata": [
                    1045,
                    1037,
                    1046,
                    1039
                ],
                "compat_urllib_parse.urlencode": [
                    1037
                ],
                "compat_urllib_parse": [
                    1037
                ],
                "json.dumps": [
                    1038
                ],
                "smug_url": [
                    1043,
                    1044,
                    1045
                ],
                "default": [
                    1044
                ],
                "_": [
                    1045
                ],
                "smug_url.rpartition": [
                    1045
                ],
                "jsond": [
                    1046,
                    1047
                ],
                "compat_parse_qs": [
                    1046
                ],
                "json.loads": [
                    1047
                ],
                "float": [
                    1061,
                    1055
                ],
                "exponent": [
                    1057,
                    1059,
                    1060,
                    1061
                ],
                "math.log": [
                    1059
                ],
                "math": [
                    1059
                ],
                "suffix": [
                    1060,
                    1062
                ],
                "converted": [
                    1061,
                    1062
                ],
                "int_str": [
                    1066,
                    1067
                ],
                "columns": [
                    1072,
                    1073,
                    1071
                ],
                "sp": [
                    1076,
                    1079
                ],
                "subprocess.Popen": [
                    1076,
                    1166
                ],
                "subprocess": [
                    1166,
                    1076,
                    1078
                ],
                "subprocess.PIPE": [
                    1166,
                    1078
                ],
                "sp.communicate": [
                    1079
                ],
                "out.split": [
                    1080
                ],
                "ENGLISH_NAMES": [
                    1089,
                    1093
                ],
                "ENGLISH_NAMES.index": [
                    1093
                ],
                "xml_str": [
                    1103
                ],
                "title": [
                    1112,
                    1113,
                    1114,
                    1107
                ],
                "libc": [
                    1116,
                    1109
                ],
                "ctypes.cdll.LoadLibrary": [
                    1109
                ],
                "ctypes.cdll": [
                    1109
                ],
                "buf": [
                    1113,
                    1114,
                    1116
                ],
                "ctypes.create_string_buffer": [
                    1113
                ],
                "buf.value": [
                    1114
                ],
                "title.encode": [
                    1114
                ],
                "libc.prctl": [
                    1116
                ],
                "ctypes.byref": [
                    1116
                ],
                "s.startswith": [
                    1122
                ],
                "compat_urlparse.urlparse": [
                    1128
                ],
                "compat_urlparse": [
                    1128
                ],
                "split": [
                    1129
                ],
                "path.strip": [
                    1129
                ],
                "compat_urllib_request.Request": [
                    1132
                ],
                "scale": [
                    1138
                ],
                "m": [
                    1152,
                    1153,
                    1222,
                    1145,
                    1147,
                    1149,
                    1150,
                    1151
                ],
                "m.group": [
                    1152,
                    1153,
                    1222,
                    1149,
                    1150,
                    1151
                ],
                "real_ext": [
                    1158,
                    1159
                ],
                "os.path.splitext": [
                    1158
                ],
                "format": [
                    1159
                ],
                "ext": [
                    1159
                ],
                "communicate": [
                    1166
                ],
                "exe": [
                    1169,
                    1166
                ],
                "self._pagefunc": [
                    1189,
                    1174
                ],
                "pagefunc": [
                    1174
                ],
                "self._pagesize": [
                    1184,
                    1185,
                    1192,
                    1197,
                    1175,
                    1209,
                    1183
                ],
                "pagesize": [
                    1175
                ],
                "self.getslice": [
                    1179
                ],
                "pagenum": [
                    1184,
                    1185,
                    1189,
                    1183
                ],
                "itertools.count": [
                    1183
                ],
                "itertools": [
                    1183
                ],
                "firstid": [
                    1184,
                    1193,
                    1198
                ],
                "nextfirstid": [
                    1185,
                    1186,
                    1193,
                    1198,
                    1214
                ],
                "page_results": [
                    1209,
                    1202,
                    1203,
                    1189
                ],
                "startv": [
                    1201,
                    1202,
                    1209,
                    1191
                ],
                "endv": [
                    1201,
                    1202,
                    1196
                ],
                "res.extend": [
                    1203
                ]
            },
            "filtered_variables_in_file": {
                "compat_subprocess_get_DEVNULL": [
                    83,
                    85
                ],
                "DEVNULL": [
                    83
                ],
                "os.path.devnull": [
                    85
                ],
                "os.path": [
                    1158,
                    912,
                    913,
                    435,
                    85,
                    437
                ],
                "os": [
                    1158,
                    426,
                    911,
                    912,
                    913,
                    1071,
                    435,
                    85,
                    437
                ],
                "string": [
                    97,
                    104,
                    125,
                    120,
                    124,
                    93,
                    94,
                    95
                ],
                "res": [
                    1153,
                    1154,
                    1182,
                    1203,
                    1216,
                    862,
                    863,
                    96,
                    864,
                    866,
                    867,
                    95,
                    104,
                    105,
                    489,
                    491,
                    492,
                    493,
                    1149,
                    1151
                ],
                "string.split": [
                    95
                ],
                "encoding": [
                    98,
                    99,
                    1020,
                    525,
                    527,
                    528,
                    529,
                    146,
                    530,
                    1015,
                    149,
                    1014,
                    984,
                    120,
                    1016,
                    124,
                    158
                ],
                "errors": [
                    100,
                    101,
                    146,
                    149,
                    120,
                    124,
                    158
                ],
                "pct_sequence": [
                    103,
                    109,
                    120,
                    121,
                    122,
                    124
                ],
                "item": [
                    105,
                    107,
                    109,
                    110,
                    117
                ],
                "decode": [
                    884,
                    109
                ],
                "rest": [
                    120,
                    117,
                    110,
                    111
                ],
                "pct_sequence.decode": [
                    120,
                    124
                ],
                "qs": [
                    129,
                    130,
                    157
                ],
                "_coerce_result": [
                    129,
                    147,
                    150
                ],
                "unicode": [
                    129,
                    167
                ],
                "pairs": [
                    130,
                    132,
                    157,
                    159
                ],
                "s2": [
                    130
                ],
                "s1": [
                    130
                ],
                "qs.split": [
                    130
                ],
                "s1.split": [
                    130
                ],
                "r": [
                    152,
                    131,
                    151
                ],
                "name_value": [
                    138,
                    132,
                    133,
                    135
                ],
                "strict_parsing": [
                    137,
                    133,
                    157
                ],
                "nv": [
                    135,
                    136,
                    141,
                    144,
                    145,
                    148
                ],
                "name_value.split": [
                    135
                ],
                "keep_blank_values": [
                    144,
                    140,
                    157
                ],
                "nv.append": [
                    141
                ],
                "name": [
                    160,
                    161,
                    163,
                    1093,
                    1158,
                    391,
                    1159,
                    145,
                    146,
                    147,
                    373,
                    151,
                    159
                ],
                "replace": [
                    145,
                    148
                ],
                "_unquote": [
                    146,
                    149
                ],
                "value": [
                    161,
                    163,
                    291,
                    359,
                    148,
                    149,
                    150,
                    151,
                    159
                ],
                "r.append": [
                    151
                ],
                "parsed_result": [
                    160,
                    161,
                    163,
                    164,
                    156
                ],
                "_parse_qsl": [
                    157
                ],
                "append": [
                    161
                ],
                "compat_str": [
                    866,
                    167,
                    169,
                    873,
                    1107,
                    539,
                    510
                ],
                "compat_chr": [
                    261,
                    1222,
                    172,
                    174,
                    271
                ],
                "unichr": [
                    172
                ],
                "c": [
                    898,
                    177,
                    178,
                    243,
                    244,
                    241,
                    245,
                    247
                ],
                "compiled_regex_type": [
                    181
                ],
                "re.compile": [
                    276,
                    181
                ],
                "re": [
                    827,
                    1145,
                    227,
                    228,
                    805,
                    1220,
                    263,
                    1066,
                    1100,
                    403,
                    276,
                    181,
                    404,
                    406,
                    436,
                    501,
                    761,
                    790
                ],
                "std_headers": [
                    707,
                    183
                ],
                "pref": [
                    201,
                    203,
                    198,
                    199
                ],
                "locale.getpreferredencoding": [
                    198
                ],
                "locale": [
                    198
                ],
                "encode": [
                    199
                ],
                "sys.version_info": [
                    224,
                    513,
                    552,
                    876,
                    205,
                    215,
                    347
                ],
                "sys": [
                    224,
                    513,
                    516,
                    599,
                    424,
                    552,
                    426,
                    427,
                    872,
                    205,
                    876,
                    527,
                    592,
                    883,
                    917,
                    1014,
                    215,
                    347
                ],
                "s.encode": [
                    530,
                    884,
                    877,
                    207
                ],
                "s": [
                    514,
                    521,
                    530,
                    1222,
                    207,
                    210,
                    211,
                    475,
                    1122,
                    1123,
                    1124,
                    873,
                    877,
                    879,
                    499,
                    884,
                    501,
                    885,
                    1142,
                    1146,
                    510
                ],
                "preferredencoding": [
                    864,
                    877,
                    525,
                    207,
                    537
                ],
                "fn": [
                    217,
                    221
                ],
                "f": [
                    961,
                    965,
                    966,
                    968,
                    233,
                    234,
                    235,
                    975,
                    978,
                    958,
                    217,
                    218,
                    221,
                    222,
                    959
                ],
                "json.dump": [
                    218,
                    222
                ],
                "json": [
                    218,
                    1047,
                    222,
                    1038
                ],
                "obj": [
                    218,
                    222
                ],
                "re.match": [
                    227,
                    228,
                    805,
                    263,
                    790,
                    1145,
                    827
                ],
                "key": [
                    234,
                    227,
                    229
                ],
                "val": [
                    234,
                    228,
                    229
                ],
                "expr": [
                    229,
                    230
                ],
                "xpath": [
                    233,
                    229
                ],
                "node.find": [
                    230
                ],
                "node": [
                    233,
                    230
                ],
                "node.findall": [
                    233
                ],
                "f.attrib.get": [
                    234
                ],
                "f.attrib": [
                    234
                ],
                "components": [
                    241,
                    243
                ],
                "c.split": [
                    241
                ],
                "path.split": [
                    241
                ],
                "path": [
                    1128,
                    241,
                    1129
                ],
                "replaced": [
                    248,
                    249,
                    242,
                    245
                ],
                "replaced.append": [
                    248,
                    245
                ],
                "ns": [
                    248,
                    247
                ],
                "tag": [
                    320,
                    247,
                    311,
                    248,
                    378,
                    315,
                    316
                ],
                "ns_map": [
                    248
                ],
                "join": [
                    249,
                    905,
                    829,
                    302,
                    345,
                    475,
                    605,
                    1022
                ],
                "entity": [
                    257,
                    260,
                    261,
                    263,
                    274
                ],
                "matchobj.group": [
                    257
                ],
                "matchobj": [
                    257
                ],
                "compat_html_entities.name2codepoint": [
                    260,
                    261
                ],
                "compat_html_entities": [
                    260,
                    261
                ],
                "mobj": [
                    264,
                    265,
                    263
                ],
                "numstr": [
                    265,
                    266,
                    268,
                    271
                ],
                "mobj.group": [
                    265
                ],
                "numstr.startswith": [
                    266
                ],
                "base": [
                    267,
                    270,
                    271
                ],
                "compat_html_parser.locatestarttagend": [
                    276
                ],
                "compat_html_parser": [
                    362,
                    394,
                    301,
                    276,
                    277,
                    279,
                    351
                ],
                "re.VERBOSE": [
                    276
                ],
                "compat_html_parser.HTMLParser": [
                    277,
                    351,
                    279
                ],
                "compat_html_parser.HTMLParser.__init__": [
                    279
                ],
                "self": [
                    557,
                    560,
                    561,
                    562,
                    563,
                    565,
                    567,
                    571,
                    596,
                    598,
                    599,
                    600,
                    603,
                    605,
                    622,
                    623,
                    642,
                    1174,
                    1175,
                    1179,
                    670,
                    671,
                    1183,
                    1184,
                    1185,
                    1189,
                    1192,
                    1197,
                    1209,
                    742,
                    746,
                    747,
                    279,
                    280,
                    283,
                    284,
                    285,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    300,
                    301,
                    302,
                    303,
                    304,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    319,
                    320,
                    321,
                    322,
                    323,
                    838,
                    328,
                    329,
                    330,
                    840,
                    842,
                    844,
                    845,
                    335,
                    846,
                    337,
                    339,
                    340,
                    341,
                    343,
                    344,
                    855,
                    857,
                    350,
                    351,
                    372,
                    373,
                    374,
                    375,
                    381,
                    382,
                    385,
                    984,
                    985,
                    988,
                    990,
                    992,
                    994,
                    998,
                    1000,
                    1003,
                    1006,
                    1009
                ],
                "self.html": [
                    280,
                    339,
                    283,
                    302
                ],
                "html": [
                    355,
                    361,
                    393,
                    402,
                    403,
                    404,
                    406,
                    408,
                    409,
                    283,
                    284
                ],
                "self.feed": [
                    284
                ],
                "self.close": [
                    285
                ],
                "BaseHTMLParser": [
                    297,
                    372,
                    366,
                    287
                ],
                "self.attribute": [
                    290,
                    310
                ],
                "attribute": [
                    290,
                    359
                ],
                "self.value": [
                    291,
                    310
                ],
                "self.result": [
                    321,
                    382,
                    323,
                    292,
                    385,
                    330,
                    335,
                    337,
                    340,
                    341,
                    311,
                    344,
                    343,
                    375
                ],
                "self.started": [
                    322,
                    293,
                    300,
                    308,
                    312,
                    314,
                    319
                ],
                "self.depth": [
                    320,
                    321,
                    294,
                    315,
                    316
                ],
                "self.watch_startpos": [
                    328,
                    313,
                    329,
                    295
                ],
                "self.error_count": [
                    296,
                    300,
                    303
                ],
                "BaseHTMLParser.__init__": [
                    297,
                    372
                ],
                "compat_html_parser.HTMLParseError": [
                    362,
                    301,
                    394
                ],
                "message": [
                    301
                ],
                "self.getpos": [
                    330,
                    323,
                    301,
                    302
                ],
                "self.rawdata": [
                    350,
                    302
                ],
                "self.html.split": [
                    339,
                    302
                ],
                "self.goahead": [
                    304
                ],
                "attrs": [
                    307,
                    310,
                    380,
                    381,
                    382
                ],
                "self.find_startpos": [
                    309
                ],
                "self.result.append": [
                    330,
                    323
                ],
                "handle_entityref": [
                    331
                ],
                "handle_charref": [
                    331
                ],
                "handle_data": [
                    331
                ],
                "handle_comment": [
                    331
                ],
                "handle_decl": [
                    332
                ],
                "handle_pi": [
                    332
                ],
                "unknown_decl": [
                    332
                ],
                "find_startpos": [
                    332
                ],
                "lines": [
                    339,
                    340,
                    341,
                    342,
                    343,
                    344,
                    345
                ],
                "strip": [
                    345
                ],
                "AttrParser.parse_endtag": [
                    348
                ],
                "AttrParser": [
                    348,
                    359
                ],
                "startswith": [
                    350
                ],
                "i": [
                    351,
                    349,
                    733,
                    350,
                    735
                ],
                "compat_html_parser.HTMLParser.parse_endtag": [
                    351
                ],
                "get_element_by_attribute": [
                    355
                ],
                "parser": [
                    391,
                    359,
                    361,
                    393,
                    364,
                    396
                ],
                "parser.loads": [
                    361,
                    393
                ],
                "parser.get_result": [
                    396,
                    364
                ],
                "self.name": [
                    381,
                    373
                ],
                "self.content": [
                    374
                ],
                "attrs.get": [
                    381,
                    382
                ],
                "MetaParser": [
                    391
                ],
                "html.replace": [
                    402
                ],
                "re.sub": [
                    1220,
                    1066,
                    1100,
                    403,
                    436,
                    404,
                    501,
                    406,
                    761
                ],
                "unescapeHTML": [
                    408
                ],
                "html.strip": [
                    409
                ],
                "filename": [
                    1158,
                    423,
                    427,
                    428,
                    429,
                    437,
                    439,
                    984,
                    443,
                    796
                ],
                "sys.platform": [
                    424,
                    883,
                    516,
                    917
                ],
                "msvcrt.setmode": [
                    426
                ],
                "msvcrt": [
                    426,
                    966,
                    959
                ],
                "sys.stdout.fileno": [
                    426
                ],
                "sys.stdout": [
                    426,
                    427
                ],
                "os.O_BINARY": [
                    426
                ],
                "sys.stdout.buffer": [
                    427
                ],
                "stream": [
                    428,
                    429,
                    443,
                    444,
                    701,
                    702
                ],
                "encodeFilename": [
                    443,
                    428
                ],
                "open_mode": [
                    443,
                    428
                ],
                "err.errno": [
                    431
                ],
                "err": [
                    1079,
                    431
                ],
                "errno.EACCES": [
                    431
                ],
                "errno": [
                    431
                ],
                "alt_filename": [
                    435,
                    444,
                    439
                ],
                "os.path.join": [
                    913,
                    435
                ],
                "path_part": [
                    436,
                    437
                ],
                "os.path.split": [
                    437
                ],
                "timestamp": [
                    449,
                    452,
                    453
                ],
                "timetuple": [
                    450,
                    451,
                    452,
                    783,
                    784,
                    785
                ],
                "email.utils.parsedate_tz": [
                    450,
                    783
                ],
                "email.utils": [
                    450,
                    452,
                    783
                ],
                "email": [
                    450,
                    452,
                    783
                ],
                "timestr": [
                    450
                ],
                "email.utils.mktime_tz": [
                    452
                ],
                "char": [
                    461,
                    463,
                    465,
                    467,
                    469,
                    471,
                    473
                ],
                "restricted": [
                    481,
                    464,
                    466,
                    469,
                    471
                ],
                "char.isspace": [
                    469
                ],
                "result": [
                    481,
                    482,
                    483,
                    484,
                    485,
                    501,
                    502,
                    475,
                    477,
                    478,
                    479
                ],
                "replace_insane": [
                    475
                ],
                "is_id": [
                    476
                ],
                "result.replace": [
                    478
                ],
                "result.strip": [
                    479
                ],
                "result.startswith": [
                    481
                ],
                "el": [
                    490,
                    491,
                    492
                ],
                "iterable": [
                    490
                ],
                "res.append": [
                    492
                ],
                "htmlentity_transform": [
                    501
                ],
                "sys.getwindowsversion": [
                    516
                ],
                "for_subprocess": [
                    520
                ],
                "sys.getfilesystemencoding": [
                    1014,
                    527
                ],
                "optval": [
                    534,
                    535,
                    536,
                    537,
                    539,
                    540
                ],
                "optval.decode": [
                    537
                ],
                "secs": [
                    544,
                    545,
                    546,
                    548,
                    543
                ],
                "httplib.HTTPSConnection": [
                    555,
                    557
                ],
                "httplib": [
                    555,
                    557
                ],
                "httplib.HTTPSConnection.__init__": [
                    557
                ],
                "args": [
                    557,
                    1166,
                    1006,
                    1009,
                    1017
                ],
                "kwargs": [
                    572,
                    557,
                    583
                ],
                "sock": [
                    560,
                    562,
                    565,
                    567
                ],
                "socket.create_connection": [
                    560
                ],
                "socket": [
                    560,
                    592
                ],
                "self.host": [
                    560
                ],
                "self.port": [
                    560
                ],
                "self.timeout": [
                    560
                ],
                "self.sock": [
                    562,
                    565,
                    567
                ],
                "self._tunnel": [
                    563
                ],
                "ssl.wrap_socket": [
                    565,
                    567
                ],
                "ssl": [
                    577,
                    565,
                    566,
                    567,
                    574,
                    575
                ],
                "self.key_file": [
                    565,
                    567
                ],
                "self.cert_file": [
                    565,
                    567
                ],
                "ssl.PROTOCOL_SSLv3": [
                    565,
                    574
                ],
                "ssl.SSLError": [
                    566
                ],
                "ssl.PROTOCOL_SSLv23": [
                    567
                ],
                "compat_urllib_request.HTTPSHandler": [
                    569,
                    583
                ],
                "compat_urllib_request": [
                    673,
                    583,
                    1132,
                    569,
                    700,
                    701,
                    702
                ],
                "self.do_open": [
                    571
                ],
                "HTTPSConnectionV3": [
                    571
                ],
                "req": [
                    708,
                    709,
                    710,
                    711,
                    712,
                    713,
                    714,
                    715,
                    716,
                    717,
                    718,
                    719,
                    720,
                    571
                ],
                "HTTPSHandlerV3": [
                    572
                ],
                "context": [
                    578,
                    580,
                    583,
                    574,
                    575
                ],
                "ssl.SSLContext": [
                    574
                ],
                "context.verify_mode": [
                    575
                ],
                "opts_no_check_certificate": [
                    576
                ],
                "ssl.CERT_NONE": [
                    575
                ],
                "ssl.CERT_REQUIRED": [
                    577
                ],
                "context.set_default_verify_paths": [
                    578
                ],
                "context.load_default_certs": [
                    580
                ],
                "sys.exc_info": [
                    592,
                    599
                ],
                "compat_urllib_error.URLError": [
                    592
                ],
                "compat_urllib_error": [
                    592
                ],
                "socket.timeout": [
                    592
                ],
                "UnavailableVideoError": [
                    592
                ],
                "expected": [
                    593,
                    594,
                    667,
                    671
                ],
                "msg": [
                    642,
                    595,
                    596,
                    622
                ],
                "__init__": [
                    596,
                    622
                ],
                "ExtractorError": [
                    608,
                    596
                ],
                "self.traceback": [
                    603,
                    605,
                    598
                ],
                "tb": [
                    598
                ],
                "self.exc_info": [
                    623,
                    599
                ],
                "self.cause": [
                    600
                ],
                "cause": [
                    600
                ],
                "traceback.format_tb": [
                    605
                ],
                "traceback": [
                    605
                ],
                "DownloadError": [
                    622
                ],
                "exc_info": [
                    623
                ],
                "self.msg": [
                    642
                ],
                "downloaded": [
                    666,
                    670
                ],
                "self.downloaded": [
                    670
                ],
                "self.expected": [
                    671
                ],
                "compat_urllib_request.HTTPHandler": [
                    673
                ],
                "zlib.decompress": [
                    696,
                    694
                ],
                "zlib": [
                    696,
                    694,
                    695
                ],
                "data": [
                    1038,
                    694,
                    1047,
                    696,
                    1048
                ],
                "zlib.MAX_WBITS": [
                    694
                ],
                "zlib.error": [
                    695
                ],
                "compat_urllib_request.addinfourl": [
                    700,
                    701,
                    702
                ],
                "headers": [
                    701,
                    702
                ],
                "url": [
                    1128,
                    1039,
                    789,
                    1045,
                    1048,
                    701,
                    702
                ],
                "code": [
                    701,
                    703
                ],
                "ret": [
                    704,
                    702,
                    703
                ],
                "ret.code": [
                    703
                ],
                "h": [
                    707,
                    708,
                    709,
                    710
                ],
                "v": [
                    1138,
                    707,
                    710
                ],
                "std_headers.items": [
                    707
                ],
                "req.headers": [
                    708,
                    709,
                    711,
                    712,
                    713,
                    714,
                    715,
                    716,
                    717,
                    718,
                    719
                ],
                "req.add_header": [
                    710
                ],
                "old_resp": [
                    742,
                    743,
                    747,
                    748,
                    723
                ],
                "resp": [
                    742,
                    743,
                    745,
                    746,
                    747,
                    748,
                    749,
                    723,
                    725,
                    726
                ],
                "resp.headers.get": [
                    745,
                    725
                ],
                "resp.headers": [
                    745,
                    725
                ],
                "content": [
                    735,
                    726,
                    727
                ],
                "resp.read": [
                    746,
                    726
                ],
                "gz": [
                    736,
                    746,
                    747,
                    727,
                    729,
                    735
                ],
                "gzip.GzipFile": [
                    735,
                    727
                ],
                "gzip": [
                    735,
                    727
                ],
                "io.BytesIO": [
                    736,
                    746,
                    727,
                    729,
                    735
                ],
                "io": [
                    736,
                    746,
                    727,
                    984,
                    729,
                    735
                ],
                "uncompressed": [
                    736,
                    729,
                    742
                ],
                "gz.read": [
                    736,
                    729
                ],
                "original_ioerror": [
                    741
                ],
                "self.addinfourl_wrapper": [
                    747,
                    742
                ],
                "old_resp.headers": [
                    747,
                    742
                ],
                "old_resp.url": [
                    747,
                    742
                ],
                "old_resp.code": [
                    747,
                    742
                ],
                "resp.msg": [
                    748,
                    743
                ],
                "old_resp.msg": [
                    748,
                    743
                ],
                "self.deflate": [
                    746
                ],
                "https_request": [
                    751
                ],
                "http_request": [
                    751
                ],
                "https_response": [
                    752
                ],
                "http_response": [
                    752
                ],
                "upload_date": [
                    779,
                    782,
                    785,
                    786,
                    757
                ],
                "date_str": [
                    803,
                    805,
                    779,
                    783,
                    822,
                    759,
                    761,
                    827,
                    831
                ],
                "date_str.replace": [
                    759
                ],
                "format_expressions": [
                    777,
                    762
                ],
                "expression": [
                    777,
                    779
                ],
                "strftime": [
                    785,
                    779
                ],
                "datetime.datetime.strptime": [
                    779,
                    822
                ],
                "datetime.datetime": [
                    840,
                    779,
                    844,
                    785,
                    822
                ],
                "datetime": [
                    802,
                    840,
                    779,
                    844,
                    785,
                    820,
                    853,
                    822
                ],
                "guess": [
                    789,
                    790,
                    791
                ],
                "rpartition": [
                    789
                ],
                "url.partition": [
                    789
                ],
                "default_ext": [
                    793
                ],
                "filename.rsplit": [
                    796
                ],
                "sub_lang": [
                    796
                ],
                "sub_format": [
                    796
                ],
                "today": [
                    802,
                    804,
                    821
                ],
                "datetime.date.today": [
                    802
                ],
                "datetime.date": [
                    802,
                    853
                ],
                "match": [
                    805,
                    806,
                    807,
                    808,
                    811,
                    827,
                    828,
                    829
                ],
                "sign": [
                    809,
                    807
                ],
                "match.group": [
                    808,
                    811,
                    807
                ],
                "time": [
                    808,
                    810,
                    815,
                    818,
                    820
                ],
                "unit": [
                    811,
                    813,
                    814,
                    816,
                    817,
                    819,
                    820
                ],
                "delta": [
                    820,
                    821
                ],
                "datetime.timedelta": [
                    820
                ],
                "date": [
                    854,
                    853,
                    822,
                    855
                ],
                "match.groups": [
                    829
                ],
                "start": [
                    1122,
                    1123,
                    1186,
                    837,
                    838,
                    1192,
                    1193,
                    1183
                ],
                "self.start": [
                    838,
                    840,
                    845,
                    855,
                    857
                ],
                "date_from_str": [
                    854,
                    842,
                    838
                ],
                "datetime.datetime.min.date": [
                    840
                ],
                "datetime.datetime.min": [
                    840
                ],
                "end": [
                    841,
                    842,
                    1197,
                    1198,
                    1214
                ],
                "self.end": [
                    842,
                    844,
                    845,
                    855,
                    857
                ],
                "datetime.datetime.max.date": [
                    844
                ],
                "datetime.datetime.max": [
                    844
                ],
                "cls": [
                    850
                ],
                "day": [
                    850
                ],
                "self.start.isoformat": [
                    857
                ],
                "self.end.isoformat": [
                    857
                ],
                "platform.platform": [
                    862
                ],
                "platform": [
                    862
                ],
                "res.decode": [
                    864
                ],
                "out": [
                    871,
                    872,
                    875,
                    879,
                    883,
                    884,
                    885,
                    1079,
                    1080,
                    889
                ],
                "sys.stderr": [
                    872
                ],
                "out.write": [
                    885,
                    879
                ],
                "out.encoding": [
                    884
                ],
                "out.flush": [
                    889
                ],
                "bs": [
                    896,
                    898,
                    893,
                    895
                ],
                "xs": [
                    905,
                    907,
                    902
                ],
                "x": [
                    905
                ],
                "cache_root": [
                    913,
                    911
                ],
                "os.environ.get": [
                    1071,
                    911
                ],
                "os.environ": [
                    1071,
                    911
                ],
                "os.path.expanduser": [
                    912
                ],
                "params.get": [
                    913
                ],
                "params": [
                    913
                ],
                "ctypes.Structure": [
                    921
                ],
                "ctypes": [
                    921,
                    923,
                    924,
                    925,
                    926,
                    927,
                    930,
                    933,
                    934,
                    935,
                    936,
                    937,
                    938,
                    940,
                    943,
                    944,
                    945,
                    946,
                    947,
                    949,
                    958,
                    962,
                    969,
                    1109,
                    1113,
                    1116
                ],
                "_fields_": [
                    922
                ],
                "ctypes.wintypes.LPVOID": [
                    923,
                    924
                ],
                "ctypes.wintypes": [
                    933,
                    934,
                    935,
                    936,
                    937,
                    940,
                    943,
                    944,
                    945,
                    946,
                    949,
                    923,
                    924,
                    925,
                    926,
                    927
                ],
                "ctypes.wintypes.DWORD": [
                    934,
                    935,
                    936,
                    937,
                    944,
                    945,
                    946,
                    925,
                    926
                ],
                "ctypes.wintypes.HANDLE": [
                    943,
                    933,
                    927
                ],
                "kernel32": [
                    930,
                    931,
                    941
                ],
                "ctypes.windll.kernel32": [
                    930
                ],
                "ctypes.windll": [
                    930
                ],
                "LockFileEx": [
                    960,
                    940,
                    931,
                    932
                ],
                "kernel32.LockFileEx": [
                    931
                ],
                "LockFileEx.argtypes": [
                    932
                ],
                "ctypes.POINTER": [
                    938,
                    947
                ],
                "OVERLAPPED": [
                    954,
                    938,
                    947
                ],
                "LockFileEx.restype": [
                    940
                ],
                "ctypes.wintypes.BOOL": [
                    940,
                    949
                ],
                "UnlockFileEx": [
                    967,
                    941,
                    942,
                    949
                ],
                "kernel32.UnlockFileEx": [
                    941
                ],
                "UnlockFileEx.argtypes": [
                    942
                ],
                "UnlockFileEx.restype": [
                    949
                ],
                "whole_low": [
                    968,
                    961,
                    950
                ],
                "whole_high": [
                    968,
                    961,
                    951
                ],
                "overlapped": [
                    954,
                    955,
                    956,
                    957,
                    958
                ],
                "overlapped.Offset": [
                    955
                ],
                "overlapped.OffsetHigh": [
                    956
                ],
                "overlapped.hEvent": [
                    957
                ],
                "f._lock_file_overlapped_p": [
                    968,
                    961,
                    965,
                    958
                ],
                "ctypes.pointer": [
                    958
                ],
                "handle": [
                    960,
                    967,
                    966,
                    959
                ],
                "msvcrt.get_osfhandle": [
                    966,
                    959
                ],
                "f.fileno": [
                    966,
                    959
                ],
                "exclusive": [
                    960,
                    988,
                    990,
                    975
                ],
                "ctypes.FormatError": [
                    969,
                    962
                ],
                "fcntl.lockf": [
                    978,
                    975
                ],
                "fcntl": [
                    978,
                    975
                ],
                "fcntl.LOCK_EX": [
                    975
                ],
                "fcntl.LOCK_SH": [
                    975
                ],
                "fcntl.LOCK_UN": [
                    978
                ],
                "mode": [
                    984,
                    985,
                    983
                ],
                "self.f": [
                    992,
                    998,
                    1000,
                    1003,
                    1006,
                    1009,
                    984,
                    990
                ],
                "io.open": [
                    984
                ],
                "self.mode": [
                    985,
                    988
                ],
                "_lock_file": [
                    990
                ],
                "self.f.close": [
                    992,
                    1000
                ],
                "_unlock_file": [
                    998
                ],
                "self.f.write": [
                    1006
                ],
                "self.f.read": [
                    1009
                ],
                "quoted_args": [
                    1021,
                    1013,
                    1022
                ],
                "a": [
                    1017,
                    1018,
                    1020,
                    1021
                ],
                "a.decode": [
                    1020
                ],
                "quoted_args.append": [
                    1021
                ],
                "pipes.quote": [
                    1021
                ],
                "pipes": [
                    1021
                ],
                "e": [
                    1028,
                    1029,
                    1030
                ],
                "seq": [
                    1028
                ],
                "pred": [
                    1030
                ],
                "sdata": [
                    1045,
                    1037,
                    1046,
                    1039
                ],
                "compat_urllib_parse.urlencode": [
                    1037
                ],
                "compat_urllib_parse": [
                    1037
                ],
                "json.dumps": [
                    1038
                ],
                "smug_url": [
                    1043,
                    1044,
                    1045
                ],
                "default": [
                    1044
                ],
                "_": [
                    1045
                ],
                "smug_url.rpartition": [
                    1045
                ],
                "jsond": [
                    1046,
                    1047
                ],
                "compat_parse_qs": [
                    1046
                ],
                "json.loads": [
                    1047
                ],
                "exponent": [
                    1057,
                    1059,
                    1060,
                    1061
                ],
                "math.log": [
                    1059
                ],
                "math": [
                    1059
                ],
                "suffix": [
                    1060,
                    1062
                ],
                "converted": [
                    1061,
                    1062
                ],
                "int_str": [
                    1066,
                    1067
                ],
                "columns": [
                    1072,
                    1073,
                    1071
                ],
                "sp": [
                    1076,
                    1079
                ],
                "subprocess.Popen": [
                    1076,
                    1166
                ],
                "subprocess": [
                    1166,
                    1076,
                    1078
                ],
                "subprocess.PIPE": [
                    1166,
                    1078
                ],
                "sp.communicate": [
                    1079
                ],
                "out.split": [
                    1080
                ],
                "ENGLISH_NAMES": [
                    1089,
                    1093
                ],
                "ENGLISH_NAMES.index": [
                    1093
                ],
                "xml_str": [
                    1103
                ],
                "title": [
                    1112,
                    1113,
                    1114,
                    1107
                ],
                "libc": [
                    1116,
                    1109
                ],
                "ctypes.cdll.LoadLibrary": [
                    1109
                ],
                "ctypes.cdll": [
                    1109
                ],
                "buf": [
                    1113,
                    1114,
                    1116
                ],
                "ctypes.create_string_buffer": [
                    1113
                ],
                "buf.value": [
                    1114
                ],
                "title.encode": [
                    1114
                ],
                "libc.prctl": [
                    1116
                ],
                "ctypes.byref": [
                    1116
                ],
                "s.startswith": [
                    1122
                ],
                "compat_urlparse.urlparse": [
                    1128
                ],
                "compat_urlparse": [
                    1128
                ],
                "split": [
                    1129
                ],
                "path.strip": [
                    1129
                ],
                "compat_urllib_request.Request": [
                    1132
                ],
                "scale": [
                    1138
                ],
                "m": [
                    1152,
                    1153,
                    1222,
                    1145,
                    1147,
                    1149,
                    1150,
                    1151
                ],
                "m.group": [
                    1152,
                    1153,
                    1222,
                    1149,
                    1150,
                    1151
                ],
                "real_ext": [
                    1158,
                    1159
                ],
                "os.path.splitext": [
                    1158
                ],
                "ext": [
                    1159
                ],
                "communicate": [
                    1166
                ],
                "exe": [
                    1169,
                    1166
                ],
                "self._pagefunc": [
                    1189,
                    1174
                ],
                "pagefunc": [
                    1174
                ],
                "self._pagesize": [
                    1184,
                    1185,
                    1192,
                    1197,
                    1175,
                    1209,
                    1183
                ],
                "pagesize": [
                    1175
                ],
                "self.getslice": [
                    1179
                ],
                "pagenum": [
                    1184,
                    1185,
                    1189,
                    1183
                ],
                "itertools.count": [
                    1183
                ],
                "itertools": [
                    1183
                ],
                "firstid": [
                    1184,
                    1193,
                    1198
                ],
                "nextfirstid": [
                    1185,
                    1186,
                    1193,
                    1198,
                    1214
                ],
                "page_results": [
                    1209,
                    1202,
                    1203,
                    1189
                ],
                "startv": [
                    1201,
                    1202,
                    1209,
                    1191
                ],
                "endv": [
                    1201,
                    1202,
                    1196
                ],
                "res.extend": [
                    1203
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_41/test/test_utils.py",
                "test_function": "test_unified_dates",
                "test_function_code": "    def test_unified_dates(self):\n        self.assertEqual(unified_strdate('December 21, 2010'), '20101221')\n        self.assertEqual(unified_strdate('8/7/2009'), '20090708')\n        self.assertEqual(unified_strdate('Dec 14, 2012'), '20121214')\n        self.assertEqual(unified_strdate('2012/10/11 01:56:38 +0000'), '20121011')\n        self.assertEqual(unified_strdate('1968-12-10'), '19681210')",
                "test_error": "AssertionError: None != '19681210'",
                "full_test_error": "self = <test.test_utils.TestUtil testMethod=test_unified_dates>\n\n    def test_unified_dates(self):\n        self.assertEqual(unified_strdate('December 21, 2010'), '20101221')\n        self.assertEqual(unified_strdate('8/7/2009'), '20090708')\n        self.assertEqual(unified_strdate('Dec 14, 2012'), '20121214')\n        self.assertEqual(unified_strdate('2012/10/11 01:56:38 +0000'), '20121011')\n>       self.assertEqual(unified_strdate('1968-12-10'), '19681210')\nE       AssertionError: None != '19681210'\n\ntest/test_utils.py:130: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}