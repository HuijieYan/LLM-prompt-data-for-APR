{
    "youtube-dl": [
        {
            "bugID": 18,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 820,
            "file_name": "youtube_dl/YoutubeDL.py",
            "replace_code": "def process_ie_result(self, ie_result, download=True, extra_info={}):\n\n    result_type = ie_result.get('_type', 'video')\n    \n    if result_type in ('url', 'url_transparent'):\n        if 'url' in ie_result:\n            ie_result['url'] = sanitize_url(ie_result['url'])\n    \n    if result_type in ('url_transparent', 'url'):\n        if 'playlist' in extra_info and self.params.get('extract_flat') in (True, 'in_playlist'):\n            if not download and self.params.get('forcejson', False):\n                self.to_stdout(json.dumps(ie_result))\n            return ie_result\n    \n    if result_type == 'video':\n        self.add_extra_info(ie_result, extra_info)\n        return self.process_video_result(ie_result, download=download)\n    \n    if result_type in ('url', 'url_transparent'):\n        if '_type' in ie_result:\n            del ie_result['_type']\n        return self.extract_info(ie_result['url'], download, ie_key=ie_result.get('ie_key'), extra_info=extra_info)\n    \n    if result_type in ('playlist', 'multi_video'):\n        # Handling of playlist entries\n        return self.handle_playlist_entries(ie_result, extra_info, download)\n    \n    if result_type == 'compat_list':\n        self.report_warning(\n            'Extractor %s returned a compat_list result. '\n            'It needs to be updated.' % ie_result.get('extractor'))\n        return self.process_compat_list(ie_result, download, extra_info)\n    \n    raise Exception('Invalid result type: %s' % result_type)"
        }
    ]
}