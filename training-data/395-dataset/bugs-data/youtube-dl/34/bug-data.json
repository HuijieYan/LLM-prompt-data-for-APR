{
    "youtube-dl:34": {
        "/Volumes/SSD2T/bgp_envs/repos/youtube-dl_34/youtube_dl/utils.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self, msg, tb=None, expected=False, cause=None, video_id=None):\n    \"\"\" tb, if given, is the original traceback (so that it can be printed out).\n    If expected is set, this is a normal error message and most likely not a bug in youtube-dl.\n    \"\"\"\n\n    if sys.exc_info()[0] in (compat_urllib_error.URLError, socket.timeout, UnavailableVideoError):\n        expected = True\n    if video_id is not None:\n        msg = video_id + ': ' + msg\n    if not expected:\n        msg = msg + u'; please report this issue on https://yt-dl.org/bug . Be sure to call youtube-dl with the --verbose flag and include its complete output. Make sure you are using the latest version; type  youtube-dl -U  to update.'\n    super(ExtractorError, self).__init__(msg)\n\n    self.traceback = tb\n    self.exc_info = sys.exc_info()  # preserve original exception\n    self.cause = cause\n    self.video_id = video_id\n",
                    "decorators": [],
                    "docstring": "tb, if given, is the original traceback (so that it can be printed out).\nIf expected is set, this is a normal error message and most likely not a bug in youtube-dl.",
                    "start_line": 667,
                    "end_line": 683,
                    "variables": {
                        "sys.exc_info": [
                            672,
                            681
                        ],
                        "sys": [
                            672,
                            681
                        ],
                        "compat_urllib_error.URLError": [
                            672
                        ],
                        "compat_urllib_error": [
                            672
                        ],
                        "socket.timeout": [
                            672
                        ],
                        "socket": [
                            672
                        ],
                        "UnavailableVideoError": [
                            672
                        ],
                        "expected": [
                            673,
                            676
                        ],
                        "video_id": [
                            674,
                            675,
                            683
                        ],
                        "msg": [
                            675,
                            677,
                            678
                        ],
                        "__init__": [
                            678
                        ],
                        "super": [
                            678
                        ],
                        "ExtractorError": [
                            678
                        ],
                        "self": [
                            678,
                            680,
                            681,
                            682,
                            683
                        ],
                        "self.traceback": [
                            680
                        ],
                        "tb": [
                            680
                        ],
                        "self.exc_info": [
                            681
                        ],
                        "self.cause": [
                            682
                        ],
                        "cause": [
                            682
                        ],
                        "self.video_id": [
                            683
                        ]
                    },
                    "filtered_variables": {
                        "sys.exc_info": [
                            672,
                            681
                        ],
                        "sys": [
                            672,
                            681
                        ],
                        "compat_urllib_error.URLError": [
                            672
                        ],
                        "compat_urllib_error": [
                            672
                        ],
                        "socket.timeout": [
                            672
                        ],
                        "socket": [
                            672
                        ],
                        "UnavailableVideoError": [
                            672
                        ],
                        "expected": [
                            673,
                            676
                        ],
                        "video_id": [
                            674,
                            675,
                            683
                        ],
                        "msg": [
                            675,
                            677,
                            678
                        ],
                        "__init__": [
                            678
                        ],
                        "ExtractorError": [
                            678
                        ],
                        "self": [
                            678,
                            680,
                            681,
                            682,
                            683
                        ],
                        "self.traceback": [
                            680
                        ],
                        "tb": [
                            680
                        ],
                        "self.exc_info": [
                            681
                        ],
                        "self.cause": [
                            682
                        ],
                        "cause": [
                            682
                        ],
                        "self.video_id": [
                            683
                        ]
                    },
                    "diff_line_number": 675,
                    "class_data": {
                        "signature": "class ExtractorError(Exception)",
                        "docstring": "Error during info extraction.",
                        "constructor_docstring": "tb, if given, is the original traceback (so that it can be printed out).\nIf expected is set, this is a normal error message and most likely not a bug in youtube-dl.",
                        "functions": [
                            "def __init__(self, msg, tb=None, expected=False, cause=None, video_id=None):\n    \"\"\" tb, if given, is the original traceback (so that it can be printed out).\n    If expected is set, this is a normal error message and most likely not a bug in youtube-dl.\n    \"\"\"\n    if sys.exc_info()[0] in (compat_urllib_error.URLError, socket.timeout, UnavailableVideoError):\n        expected = True\n    if video_id is not None:\n        msg = video_id + ': ' + msg\n    if not expected:\n        msg = msg + u'; please report this issue on https://yt-dl.org/bug . Be sure to call youtube-dl with the --verbose flag and include its complete output. Make sure you are using the latest version; type  youtube-dl -U  to update.'\n    super(ExtractorError, self).__init__(msg)\n    self.traceback = tb\n    self.exc_info = sys.exc_info()\n    self.cause = cause\n    self.video_id = video_id",
                            "def format_traceback(self):\n    if self.traceback is None:\n        return None\n    return u''.join(traceback.format_tb(self.traceback))"
                        ],
                        "constructor_variables": [
                            "exc_info",
                            "video_id",
                            "expected",
                            "cause",
                            "msg",
                            "traceback"
                        ],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, msg, tb=None, expected=False, cause=None, video_id=None)",
                            "format_traceback(self)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "js_to_json",
                    "function_code": "def js_to_json(code):\n    def fix_kv(m):\n        key = m.group(2)\n        if key.startswith(\"'\"):\n            assert key.endswith(\"'\")\n            assert '\"' not in key\n            key = '\"%s\"' % key[1:-1]\n        elif not key.startswith('\"'):\n            key = '\"%s\"' % key\n\n        value = m.group(4)\n        if value.startswith(\"'\"):\n            assert value.endswith(\"'\")\n            assert '\"' not in value\n            value = '\"%s\"' % value[1:-1]\n\n        return m.group(1) + key + m.group(3) + value\n\n    res = re.sub(r'''(?x)\n            ([{,]\\s*)\n            (\"[^\"]*\"|\\'[^\\']*\\'|[a-z0-9A-Z]+)\n            (:\\s*)\n            ([0-9.]+|true|false|\"[^\"]*\"|\\'[^\\']*\\'|\\[|\\{)\n        ''', fix_kv, code)\n    res = re.sub(r',(\\s*\\])', lambda m: m.group(1), res)\n    return res\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1579,
                    "end_line": 1604,
                    "variables": {
                        "key": [
                            1581,
                            1582,
                            1583,
                            1584,
                            1585,
                            1586,
                            1587,
                            1595
                        ],
                        "m.group": [
                            1595,
                            1603,
                            1589,
                            1581
                        ],
                        "m": [
                            1595,
                            1603,
                            1589,
                            1581
                        ],
                        "key.startswith": [
                            1586,
                            1582
                        ],
                        "key.endswith": [
                            1583
                        ],
                        "value": [
                            1589,
                            1590,
                            1591,
                            1592,
                            1593,
                            1595
                        ],
                        "value.startswith": [
                            1590
                        ],
                        "value.endswith": [
                            1591
                        ],
                        "res": [
                            1603,
                            1604,
                            1597
                        ],
                        "re.sub": [
                            1603,
                            1597
                        ],
                        "re": [
                            1603,
                            1597
                        ],
                        "fix_kv": [
                            1602
                        ],
                        "code": [
                            1602
                        ]
                    },
                    "filtered_variables": {
                        "key": [
                            1581,
                            1582,
                            1583,
                            1584,
                            1585,
                            1586,
                            1587,
                            1595
                        ],
                        "m.group": [
                            1595,
                            1603,
                            1589,
                            1581
                        ],
                        "m": [
                            1595,
                            1603,
                            1589,
                            1581
                        ],
                        "key.startswith": [
                            1586,
                            1582
                        ],
                        "key.endswith": [
                            1583
                        ],
                        "value": [
                            1589,
                            1590,
                            1591,
                            1592,
                            1593,
                            1595
                        ],
                        "value.startswith": [
                            1590
                        ],
                        "value.endswith": [
                            1591
                        ],
                        "res": [
                            1603,
                            1604,
                            1597
                        ],
                        "re.sub": [
                            1603,
                            1597
                        ],
                        "re": [
                            1603,
                            1597
                        ],
                        "fix_kv": [
                            1602
                        ],
                        "code": [
                            1602
                        ]
                    },
                    "diff_line_number": 1601,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            },
                            {
                                "key": {
                                    "variable_value": "'\"clip\"'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x105c992f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 26), match=\"{\\n                'clip':{\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1071a9130>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1071a9130>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "'{'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10510e1b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x10510e1b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10721bdd0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            }
                        ],
                        [
                            {
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            },
                            {
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'{\\n                \"clip\":{\\'provider\\':\\'pseudo\\'}\\n        }'",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x10721bdd0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            },
                            {
                                "key": {
                                    "variable_value": "'\"clip\"'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x104d352f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 25), match=\"{\\n                'clip':\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1062a97b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1062a97b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "value.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10409e3b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x10409e3b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1062c7d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            }
                        ],
                        [
                            {
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            },
                            {
                                "key": {
                                    "variable_value": "'\"provider\"'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x104d352f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(25, 45), match=\"{'provider':'pseudo'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1062beef0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1062beef0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "'\"pseudo\"'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "value.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1062becb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1062becb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1062c7d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            }
                        ],
                        [
                            {
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            },
                            {
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'{\\n                \"clip\":{\"provider\":\"pseudo\"}\\n        }'",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1062c7d40>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            }
                        ],
                        [
                            {
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            },
                            {
                                "key": {
                                    "variable_value": "'\"clip\"'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x104d352f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 25), match=\"{\\n                'clip':\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1062f83f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1062f83f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "''",
                                    "variable_type": "str",
                                    "variable_shape": "0"
                                },
                                "value.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x10409e3b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x10409e3b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1062f4cb0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            }
                        ],
                        [
                            {
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            },
                            {
                                "key": {
                                    "variable_value": "'\"provider\"'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x104d352f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(25, 45), match=\"{'provider':'pseudo'\">",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1062f8370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1062f8370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "'\"pseudo\"'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "value.startswith": {
                                    "variable_value": "<built-in method startswith of str object at 0x1062f8c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": "<built-in method endswith of str object at 0x1062f8c30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1062f4cb0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            }
                        ],
                        [
                            {
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            },
                            {
                                "key": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.startswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "value.endswith": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "'{\\n                \"clip\":{\"provider\":\"pseudo\"}\\n        }'",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                },
                                "re.sub": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "fix_kv": {
                                    "variable_value": "<function js_to_json.<locals>.fix_kv at 0x1062f4cb0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "code": {
                                    "variable_value": "\"{\\n                'clip':{'provider':'pseudo'}\\n        }\"",
                                    "variable_type": "str",
                                    "variable_shape": "56"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def compat_ord(c):\n    if type(c) is int: return c\n    else: return ord(c)",
                "def preferredencoding():\n    \"\"\"Get preferred encoding.\n\n    Returns the best encoding scheme for the system, based on\n    locale.getpreferredencoding() and some further tweaks.\n    \"\"\"\n    try:\n        pref = locale.getpreferredencoding()\n        u'TEST'.encode(pref)\n    except:\n        pref = 'UTF-8'\n\n    return pref",
                "def write_json_file(obj, fn):\n    \"\"\" Encode obj as JSON and write it to fn, atomically \"\"\"\n\n    args = {\n        'suffix': '.tmp',\n        'prefix': os.path.basename(fn) + '.',\n        'dir': os.path.dirname(fn),\n        'delete': False,\n    }\n\n    # In Python 2.x, json.dump expects a bytestream.\n    # In Python 3.x, it writes to a character stream\n    if sys.version_info < (3, 0):\n        args['mode'] = 'wb'\n    else:\n        args.update({\n            'mode': 'w',\n            'encoding': 'utf-8',\n        })\n\n    tf = tempfile.NamedTemporaryFile(**args)\n\n    try:\n        with tf:\n            json.dump(obj, tf)\n        os.rename(tf.name, fn)\n    except:\n        try:\n            os.remove(tf.name)\n        except OSError:\n            pass\n        raise",
                "def xpath_with_ns(path, ns_map):\n    components = [c.split(':') for c in path.split('/')]\n    replaced = []\n    for c in components:\n        if len(c) == 1:\n            replaced.append(c[0])\n        else:\n            ns, tag = c\n            replaced.append('{%s}%s' % (ns_map[ns], tag))\n    return '/'.join(replaced)",
                "def xpath_text(node, xpath, name=None, fatal=False):\n    if sys.version_info < (2, 7):  # Crazy 2.6\n        xpath = xpath.encode('ascii')\n\n    n = node.find(xpath)\n    if n is None:\n        if fatal:\n            name = xpath if name is None else name\n            raise ExtractorError('Could not find XML element %s' % name)\n        else:\n            return None\n    return n.text",
                "def get_element_by_id(id, html):\n    \"\"\"Return the content of the tag with the specified ID in the passed HTML document\"\"\"\n    return get_element_by_attribute(\"id\", id, html)",
                "def get_element_by_attribute(attribute, value, html):\n    \"\"\"Return the content of the tag with the specified attribute in the passed HTML document\"\"\"\n    parser = AttrParser(attribute, value)\n    try:\n        parser.loads(html)\n    except compat_html_parser.HTMLParseError:\n        pass\n    return parser.get_result()",
                "def get_meta_content(name, html):\n    \"\"\"\n    Return the content attribute from the meta tag with the given name attribute.\n    \"\"\"\n    parser = MetaParser(name)\n    try:\n        parser.loads(html)\n    except compat_html_parser.HTMLParseError:\n        pass\n    return parser.get_result()",
                "def clean_html(html):\n    \"\"\"Clean an HTML snippet into a readable string\"\"\"\n    # Newline vs <br />\n    html = html.replace('\\n', ' ')\n    html = re.sub(r'\\s*<\\s*br\\s*/?\\s*>\\s*', '\\n', html)\n    html = re.sub(r'<\\s*/\\s*p\\s*>\\s*<\\s*p[^>]*>', '\\n', html)\n    # Strip html tags\n    html = re.sub('<.*?>', '', html)\n    # Replace html entities\n    html = unescapeHTML(html)\n    return html.strip()",
                "def sanitize_open(filename, open_mode):\n    \"\"\"Try to open the given filename, and slightly tweak it if this fails.\n\n    Attempts to open the given filename. If this fails, it tries to change\n    the filename slightly, step by step, until it's either able to open it\n    or it fails and raises a final exception, like the standard open()\n    function.\n\n    It returns the tuple (stream, definitive_file_name).\n    \"\"\"\n    try:\n        if filename == u'-':\n            if sys.platform == 'win32':\n                import msvcrt\n                msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)\n            return (sys.stdout.buffer if hasattr(sys.stdout, 'buffer') else sys.stdout, filename)\n        stream = open(encodeFilename(filename), open_mode)\n        return (stream, filename)\n    except (IOError, OSError) as err:\n        if err.errno in (errno.EACCES,):\n            raise\n\n        # In case of error, try to remove win32 forbidden chars\n        alt_filename = os.path.join(\n                        re.sub(u'[/<>:\"\\\\|\\\\\\\\?\\\\*]', u'#', path_part)\n                        for path_part in os.path.split(filename)\n                       )\n        if alt_filename == filename:\n            raise\n        else:\n            # An exception here should be caught in the caller\n            stream = open(encodeFilename(filename), open_mode)\n            return (stream, alt_filename)",
                "def timeconvert(timestr):\n    \"\"\"Convert RFC 2822 defined time string into system timestamp\"\"\"\n    timestamp = None\n    timetuple = email.utils.parsedate_tz(timestr)\n    if timetuple is not None:\n        timestamp = email.utils.mktime_tz(timetuple)\n    return timestamp",
                "def sanitize_filename(s, restricted=False, is_id=False):\n    \"\"\"Sanitizes a string so it could be used as part of a filename.\n    If restricted is set, use a stricter subset of allowed characters.\n    Set is_id if this is not an arbitrary string, but an ID that should be kept if possible\n    \"\"\"\n    def replace_insane(char):\n        if char == '?' or ord(char) < 32 or ord(char) == 127:\n            return ''\n        elif char == '\"':\n            return '' if restricted else '\\''\n        elif char == ':':\n            return '_-' if restricted else ' -'\n        elif char in '\\\\/|*<>':\n            return '_'\n        if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n            return '_'\n        if restricted and ord(char) > 127:\n            return '_'\n        return char\n\n    result = u''.join(map(replace_insane, s))\n    if not is_id:\n        while '__' in result:\n            result = result.replace('__', '_')\n        result = result.strip('_')\n        # Common case of \"Foreign band name - English song title\"\n        if restricted and result.startswith('-_'):\n            result = result[2:]\n        if not result:\n            result = '_'\n    return result",
                "def orderedSet(iterable):\n    \"\"\" Remove all duplicates from the input iterable \"\"\"\n    res = []\n    for el in iterable:\n        if el not in res:\n            res.append(el)\n    return res",
                "def _htmlentity_transform(entity):\n    \"\"\"Transforms an HTML entity to a character.\"\"\"\n    # Known non-numeric HTML entity\n    if entity in compat_html_entities.name2codepoint:\n        return compat_chr(compat_html_entities.name2codepoint[entity])\n\n    mobj = re.match(r'#(x?[0-9]+)', entity)\n    if mobj is not None:\n        numstr = mobj.group(1)\n        if numstr.startswith(u'x'):\n            base = 16\n            numstr = u'0%s' % numstr\n        else:\n            base = 10\n        return compat_chr(int(numstr, base))\n\n    # Unknown entity in name, return its literal representation\n    return (u'&%s;' % entity)",
                "def unescapeHTML(s):\n    if s is None:\n        return None\n    assert type(s) == compat_str\n\n    return re.sub(\n        r'&([^;]+);', lambda m: _htmlentity_transform(m.group(1)), s)",
                "def encodeFilename(s, for_subprocess=False):\n    \"\"\"\n    @param s The name of the file\n    \"\"\"\n\n    assert type(s) == compat_str\n\n    # Python 3 has a Unicode API\n    if sys.version_info >= (3, 0):\n        return s\n\n    if sys.platform == 'win32' and sys.getwindowsversion()[0] >= 5:\n        # Pass u'' directly to use Unicode APIs on Windows 2000 and up\n        # (Detecting Windows NT 4 is tricky because 'major >= 4' would\n        # match Windows 9x series as well. Besides, NT 4 is obsolete.)\n        if not for_subprocess:\n            return s\n        else:\n            # For subprocess calls, encode with locale encoding\n            # Refer to http://stackoverflow.com/a/9951851/35070\n            encoding = preferredencoding()\n    else:\n        encoding = sys.getfilesystemencoding()\n    if encoding is None:\n        encoding = 'utf-8'\n    return s.encode(encoding, 'ignore')",
                "def encodeArgument(s):\n    if not isinstance(s, compat_str):\n        # Legacy code that uses byte strings\n        # Uncomment the following line after fixing all post processors\n        #assert False, 'Internal error: %r should be of type %r, is %r' % (s, compat_str, type(s))\n        s = s.decode('ascii')\n    return encodeFilename(s, True)",
                "def decodeOption(optval):\n    if optval is None:\n        return optval\n    if isinstance(optval, bytes):\n        optval = optval.decode(preferredencoding())\n\n    assert isinstance(optval, compat_str)\n    return optval",
                "def formatSeconds(secs):\n    if secs > 3600:\n        return '%d:%02d:%02d' % (secs // 3600, (secs % 3600) // 60, secs % 60)\n    elif secs > 60:\n        return '%d:%02d' % (secs // 60, secs % 60)\n    else:\n        return '%d' % secs",
                "def make_HTTPS_handler(opts_no_check_certificate, **kwargs):\n    if sys.version_info < (3, 2):\n        import httplib\n\n        class HTTPSConnectionV3(httplib.HTTPSConnection):\n            def __init__(self, *args, **kwargs):\n                httplib.HTTPSConnection.__init__(self, *args, **kwargs)\n\n            def connect(self):\n                sock = socket.create_connection((self.host, self.port), self.timeout)\n                if getattr(self, '_tunnel_host', False):\n                    self.sock = sock\n                    self._tunnel()\n                try:\n                    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_TLSv1)\n                except ssl.SSLError:\n                    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv23)\n\n        class HTTPSHandlerV3(compat_urllib_request.HTTPSHandler):\n            def https_open(self, req):\n                return self.do_open(HTTPSConnectionV3, req)\n        return HTTPSHandlerV3(**kwargs)\n    elif hasattr(ssl, 'create_default_context'):  # Python >= 3.4\n        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        context.options &= ~ssl.OP_NO_SSLv3  # Allow older, not-as-secure SSLv3\n        if opts_no_check_certificate:\n            context.verify_mode = ssl.CERT_NONE\n        return compat_urllib_request.HTTPSHandler(context=context, **kwargs)\n    else:  # Python < 3.4\n        context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\n        context.verify_mode = (ssl.CERT_NONE\n                               if opts_no_check_certificate\n                               else ssl.CERT_REQUIRED)\n        context.set_default_verify_paths()\n        try:\n            context.load_default_certs()\n        except AttributeError:\n            pass  # Python < 3.4\n        return compat_urllib_request.HTTPSHandler(context=context, **kwargs)",
                "def parse_iso8601(date_str, delimiter='T'):\n    \"\"\" Return a UNIX timestamp from the given date \"\"\"\n\n    if date_str is None:\n        return None\n\n    m = re.search(\n        r'Z$| ?(?P<sign>\\+|-)(?P<hours>[0-9]{2}):?(?P<minutes>[0-9]{2})$',\n        date_str)\n    if not m:\n        timezone = datetime.timedelta()\n    else:\n        date_str = date_str[:-len(m.group(0))]\n        if not m.group('sign'):\n            timezone = datetime.timedelta()\n        else:\n            sign = 1 if m.group('sign') == '+' else -1\n            timezone = datetime.timedelta(\n                hours=sign * int(m.group('hours')),\n                minutes=sign * int(m.group('minutes')))\n    date_format =  '%Y-%m-%d{0}%H:%M:%S'.format(delimiter)\n    dt = datetime.datetime.strptime(date_str, date_format) - timezone\n    return calendar.timegm(dt.timetuple())",
                "def unified_strdate(date_str):\n    \"\"\"Return a string with the date in the format YYYYMMDD\"\"\"\n\n    if date_str is None:\n        return None\n\n    upload_date = None\n    #Replace commas\n    date_str = date_str.replace(',', ' ')\n    # %z (UTC offset) is only supported in python>=3.2\n    date_str = re.sub(r' ?(\\+|-)[0-9]{2}:?[0-9]{2}$', '', date_str)\n    format_expressions = [\n        '%d %B %Y',\n        '%d %b %Y',\n        '%B %d %Y',\n        '%b %d %Y',\n        '%b %dst %Y %I:%M%p',\n        '%b %dnd %Y %I:%M%p',\n        '%b %dth %Y %I:%M%p',\n        '%Y-%m-%d',\n        '%Y/%m/%d',\n        '%d.%m.%Y',\n        '%d/%m/%Y',\n        '%d/%m/%y',\n        '%Y/%m/%d %H:%M:%S',\n        '%d/%m/%Y %H:%M:%S',\n        '%Y-%m-%d %H:%M:%S',\n        '%d.%m.%Y %H:%M',\n        '%d.%m.%Y %H.%M',\n        '%Y-%m-%dT%H:%M:%SZ',\n        '%Y-%m-%dT%H:%M:%S.%fZ',\n        '%Y-%m-%dT%H:%M:%S.%f0Z',\n        '%Y-%m-%dT%H:%M:%S',\n        '%Y-%m-%dT%H:%M:%S.%f',\n        '%Y-%m-%dT%H:%M',\n    ]\n    for expression in format_expressions:\n        try:\n            upload_date = datetime.datetime.strptime(date_str, expression).strftime('%Y%m%d')\n        except ValueError:\n            pass\n    if upload_date is None:\n        timetuple = email.utils.parsedate_tz(date_str)\n        if timetuple:\n            upload_date = datetime.datetime(*timetuple[:6]).strftime('%Y%m%d')\n    return upload_date",
                "def determine_ext(url, default_ext=u'unknown_video'):\n    if url is None:\n        return default_ext\n    guess = url.partition(u'?')[0].rpartition(u'.')[2]\n    if re.match(r'^[A-Za-z0-9]+$', guess):\n        return guess\n    else:\n        return default_ext",
                "def subtitles_filename(filename, sub_lang, sub_format):\n    return filename.rsplit('.', 1)[0] + u'.' + sub_lang + u'.' + sub_format",
                "def date_from_str(date_str):\n    \"\"\"\n    Return a datetime object from a string in the format YYYYMMDD or\n    (now|today)[+-][0-9](day|week|month|year)(s)?\"\"\"\n    today = datetime.date.today()\n    if date_str == 'now'or date_str == 'today':\n        return today\n    match = re.match('(now|today)(?P<sign>[+-])(?P<time>\\d+)(?P<unit>day|week|month|year)(s)?', date_str)\n    if match is not None:\n        sign = match.group('sign')\n        time = int(match.group('time'))\n        if sign == '-':\n            time = -time\n        unit = match.group('unit')\n        #A bad aproximation?\n        if unit == 'month':\n            unit = 'day'\n            time *= 30\n        elif unit == 'year':\n            unit = 'day'\n            time *= 365\n        unit += 's'\n        delta = datetime.timedelta(**{unit: time})\n        return today + delta\n    return datetime.datetime.strptime(date_str, \"%Y%m%d\").date()",
                "def hyphenate_date(date_str):\n    \"\"\"\n    Convert a date in 'YYYYMMDD' format to 'YYYY-MM-DD' format\"\"\"\n    match = re.match(r'^(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)$', date_str)\n    if match is not None:\n        return '-'.join(match.groups())\n    else:\n        return date_str",
                "def platform_name():\n    \"\"\" Returns the platform name as a compat_str \"\"\"\n    res = platform.platform()\n    if isinstance(res, bytes):\n        res = res.decode(preferredencoding())\n\n    assert isinstance(res, compat_str)\n    return res",
                "def _windows_write_string(s, out):\n    \"\"\" Returns True if the string was written using special methods,\n    False if it has yet to be written out.\"\"\"\n    # Adapted from http://stackoverflow.com/a/3259271/35070\n\n    import ctypes\n    import ctypes.wintypes\n\n    WIN_OUTPUT_IDS = {\n        1: -11,\n        2: -12,\n    }\n\n    try:\n        fileno = out.fileno()\n    except AttributeError:\n        # If the output stream doesn't have a fileno, it's virtual\n        return False\n    if fileno not in WIN_OUTPUT_IDS:\n        return False\n\n    GetStdHandle = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.HANDLE, ctypes.wintypes.DWORD)(\n        (\"GetStdHandle\", ctypes.windll.kernel32))\n    h = GetStdHandle(WIN_OUTPUT_IDS[fileno])\n\n    WriteConsoleW = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE, ctypes.wintypes.LPWSTR,\n        ctypes.wintypes.DWORD, ctypes.POINTER(ctypes.wintypes.DWORD),\n        ctypes.wintypes.LPVOID)((\"WriteConsoleW\", ctypes.windll.kernel32))\n    written = ctypes.wintypes.DWORD(0)\n\n    GetFileType = ctypes.WINFUNCTYPE(ctypes.wintypes.DWORD, ctypes.wintypes.DWORD)((\"GetFileType\", ctypes.windll.kernel32))\n    FILE_TYPE_CHAR = 0x0002\n    FILE_TYPE_REMOTE = 0x8000\n    GetConsoleMode = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE,\n        ctypes.POINTER(ctypes.wintypes.DWORD))(\n        (\"GetConsoleMode\", ctypes.windll.kernel32))\n    INVALID_HANDLE_VALUE = ctypes.wintypes.DWORD(-1).value\n\n    def not_a_console(handle):\n        if handle == INVALID_HANDLE_VALUE or handle is None:\n            return True\n        return ((GetFileType(handle) & ~FILE_TYPE_REMOTE) != FILE_TYPE_CHAR\n                or GetConsoleMode(handle, ctypes.byref(ctypes.wintypes.DWORD())) == 0)\n\n    if not_a_console(h):\n        return False\n\n    def next_nonbmp_pos(s):\n        try:\n            return next(i for i, c in enumerate(s) if ord(c) > 0xffff)\n        except StopIteration:\n            return len(s)\n\n    while s:\n        count = min(next_nonbmp_pos(s), 1024)\n\n        ret = WriteConsoleW(\n            h, s, count if count else 2, ctypes.byref(written), None)\n        if ret == 0:\n            raise OSError('Failed to write string')\n        if not count:  # We just wrote a non-BMP character\n            assert written.value == 2\n            s = s[1:]\n        else:\n            assert written.value > 0\n            s = s[written.value:]\n    return True",
                "def write_string(s, out=None, encoding=None):\n    if out is None:\n        out = sys.stderr\n    assert type(s) == compat_str\n\n    if sys.platform == 'win32' and encoding is None and hasattr(out, 'fileno'):\n        if _windows_write_string(s, out):\n            return\n\n    if ('b' in getattr(out, 'mode', '') or\n            sys.version_info[0] < 3):  # Python 2 lies about mode of sys.stderr\n        byt = s.encode(encoding or preferredencoding(), 'ignore')\n        out.write(byt)\n    elif hasattr(out, 'buffer'):\n        enc = encoding or getattr(out, 'encoding', None) or preferredencoding()\n        byt = s.encode(enc, 'ignore')\n        out.buffer.write(byt)\n    else:\n        out.write(s)\n    out.flush()",
                "def bytes_to_intlist(bs):\n    if not bs:\n        return []\n    if isinstance(bs[0], int):  # Python 3\n        return list(bs)\n    else:\n        return [ord(c) for c in bs]",
                "def intlist_to_bytes(xs):\n    if not xs:\n        return b''\n    if isinstance(chr(0), bytes):  # Python 2\n        return ''.join([chr(x) for x in xs])\n    else:\n        return bytes(xs)",
                "def shell_quote(args):\n    quoted_args = []\n    encoding = sys.getfilesystemencoding()\n    if encoding is None:\n        encoding = 'utf-8'\n    for a in args:\n        if isinstance(a, bytes):\n            # We may get a filename encoded with 'encodeFilename'\n            a = a.decode(encoding)\n        quoted_args.append(pipes.quote(a))\n    return u' '.join(quoted_args)",
                "def takewhile_inclusive(pred, seq):\n    \"\"\" Like itertools.takewhile, but include the latest evaluated element\n        (the first element so that Not pred(e)) \"\"\"\n    for e in seq:\n        yield e\n        if not pred(e):\n            return",
                "def smuggle_url(url, data):\n    \"\"\" Pass additional data in a URL for internal use. \"\"\"\n\n    sdata = compat_urllib_parse.urlencode(\n        {u'__youtubedl_smuggle': json.dumps(data)})\n    return url + u'#' + sdata",
                "def unsmuggle_url(smug_url, default=None):\n    if not '#__youtubedl_smuggle' in smug_url:\n        return smug_url, default\n    url, _, sdata = smug_url.rpartition(u'#')\n    jsond = compat_parse_qs(sdata)[u'__youtubedl_smuggle'][0]\n    data = json.loads(jsond)\n    return url, data",
                "def format_bytes(bytes):\n    if bytes is None:\n        return u'N/A'\n    if type(bytes) is str:\n        bytes = float(bytes)\n    if bytes == 0.0:\n        exponent = 0\n    else:\n        exponent = int(math.log(bytes, 1024.0))\n    suffix = [u'B', u'KiB', u'MiB', u'GiB', u'TiB', u'PiB', u'EiB', u'ZiB', u'YiB'][exponent]\n    converted = float(bytes) / float(1024 ** exponent)\n    return u'%.2f%s' % (converted, suffix)",
                "def get_term_width():\n    columns = os.environ.get('COLUMNS', None)\n    if columns:\n        return int(columns)\n\n    try:\n        sp = subprocess.Popen(\n            ['stty', 'size'],\n            stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        out, err = sp.communicate()\n        return int(out.split()[1])\n    except:\n        pass\n    return None",
                "def month_by_name(name):\n    \"\"\" Return the number of a month by (locale-independently) English name \"\"\"\n\n    ENGLISH_NAMES = [\n        u'January', u'February', u'March', u'April', u'May', u'June',\n        u'July', u'August', u'September', u'October', u'November', u'December']\n    try:\n        return ENGLISH_NAMES.index(name) + 1\n    except ValueError:\n        return None",
                "def fix_xml_ampersands(xml_str):\n    \"\"\"Replace all the '&' by '&amp;' in XML\"\"\"\n    return re.sub(\n        r'&(?!amp;|lt;|gt;|apos;|quot;|#x[0-9a-fA-F]{,4};|#[0-9]{,4};)',\n        u'&amp;',\n        xml_str)",
                "def setproctitle(title):\n    assert isinstance(title, compat_str)\n    try:\n        libc = ctypes.cdll.LoadLibrary(\"libc.so.6\")\n    except OSError:\n        return\n    title_bytes = title.encode('utf-8')\n    buf = ctypes.create_string_buffer(len(title_bytes))\n    buf.value = title_bytes\n    try:\n        libc.prctl(15, buf, 0, 0, 0)\n    except AttributeError:\n        return  # Strange libc, just skip this",
                "def remove_start(s, start):\n    if s.startswith(start):\n        return s[len(start):]\n    return s",
                "def remove_end(s, end):\n    if s.endswith(end):\n        return s[:-len(end)]\n    return s",
                "def url_basename(url):\n    path = compat_urlparse.urlparse(url).path\n    return path.strip(u'/').split(u'/')[-1]",
                "def int_or_none(v, scale=1, default=None, get_attr=None, invscale=1):\n    if get_attr:\n        if v is not None:\n            v = getattr(v, get_attr, None)\n    if v == '':\n        v = None\n    return default if v is None else (int(v) * invscale // scale)",
                "def str_or_none(v, default=None):\n    return default if v is None else compat_str(v)",
                "def str_to_int(int_str):\n    \"\"\" A more relaxed version of int_or_none \"\"\"\n    if int_str is None:\n        return None\n    int_str = re.sub(r'[,\\.\\+]', u'', int_str)\n    return int(int_str)",
                "def float_or_none(v, scale=1, invscale=1, default=None):\n    return default if v is None else (float(v) * invscale / scale)",
                "def parse_duration(s):\n    if s is None:\n        return None\n\n    s = s.strip()\n\n    m = re.match(\n        r'(?i)(?:(?:(?P<hours>[0-9]+)\\s*(?:[:h]|hours?)\\s*)?(?P<mins>[0-9]+)\\s*(?:[:m]|mins?|minutes?)\\s*)?(?P<secs>[0-9]+)(?P<ms>\\.[0-9]+)?\\s*(?:s|secs?|seconds?)?$', s)\n    if not m:\n        return None\n    res = int(m.group('secs'))\n    if m.group('mins'):\n        res += int(m.group('mins')) * 60\n        if m.group('hours'):\n            res += int(m.group('hours')) * 60 * 60\n    if m.group('ms'):\n        res += float(m.group('ms'))\n    return res",
                "def prepend_extension(filename, ext):\n    name, real_ext = os.path.splitext(filename) \n    return u'{0}.{1}{2}'.format(name, ext, real_ext)",
                "def check_executable(exe, args=[]):\n    \"\"\" Checks if the given binary is installed somewhere in PATH, and returns its name.\n    args can be a list of arguments for a short output (like -version) \"\"\"\n    try:\n        subprocess.Popen([exe] + args, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n    except OSError:\n        return False\n    return exe",
                "def uppercase_escape(s):\n    unicode_escape = codecs.getdecoder('unicode_escape')\n    return re.sub(\n        r'\\\\U[0-9a-fA-F]{8}',\n        lambda m: unicode_escape(m.group(0))[0],\n        s)",
                "def escape_rfc3986(s):\n    \"\"\"Escape non-ASCII characters as suggested by RFC 3986\"\"\"\n    if sys.version_info < (3, 0) and isinstance(s, unicode):\n        s = s.encode('utf-8')\n    return compat_urllib_parse.quote(s, \"%/;:@&=+$,!~*'()?#[]\")",
                "def escape_url(url):\n    \"\"\"Escape URL as suggested by RFC 3986\"\"\"\n    url_parsed = compat_urllib_parse_urlparse(url)\n    return url_parsed._replace(\n        path=escape_rfc3986(url_parsed.path),\n        params=escape_rfc3986(url_parsed.params),\n        query=escape_rfc3986(url_parsed.query),\n        fragment=escape_rfc3986(url_parsed.fragment)\n    ).geturl()",
                "def read_batch_urls(batch_fd):\n    def fixup(url):\n        if not isinstance(url, compat_str):\n            url = url.decode('utf-8', 'replace')\n        BOM_UTF8 = u'\\xef\\xbb\\xbf'\n        if url.startswith(BOM_UTF8):\n            url = url[len(BOM_UTF8):]\n        url = url.strip()\n        if url.startswith(('#', ';', ']')):\n            return False\n        return url\n\n    with contextlib.closing(batch_fd) as fd:\n        return [url for url in map(fixup, fd) if url]",
                "def urlencode_postdata(*args, **kargs):\n    return compat_urllib_parse.urlencode(*args, **kargs).encode('ascii')",
                "def parse_xml(s):\n    class TreeBuilder(xml.etree.ElementTree.TreeBuilder):\n        def doctype(self, name, pubid, system):\n            pass  # Ignore doctypes\n\n    parser = xml.etree.ElementTree.XMLParser(target=TreeBuilder())\n    kwargs = {'parser': parser} if sys.version_info >= (2, 7) else {}\n    tree = xml.etree.ElementTree.XML(s.encode('utf-8'), **kwargs)\n    # Fix up XML parser in Python 2.x\n    if sys.version_info < (3, 0):\n        for n in etree_iter(tree):\n            if n.text is not None:\n                if not isinstance(n.text, compat_str):\n                    n.text = n.text.decode('utf-8')\n    return tree",
                "def strip_jsonp(code):\n    return re.sub(r'(?s)^[a-zA-Z0-9_]+\\s*\\(\\s*(.*)\\);?\\s*?\\s*$', r'\\1', code)",
                "def js_to_json(code):\n    def fix_kv(m):\n        key = m.group(2)\n        if key.startswith(\"'\"):\n            assert key.endswith(\"'\")\n            assert '\"' not in key\n            key = '\"%s\"' % key[1:-1]\n        elif not key.startswith('\"'):\n            key = '\"%s\"' % key\n\n        value = m.group(4)\n        if value.startswith(\"'\"):\n            assert value.endswith(\"'\")\n            assert '\"' not in value\n            value = '\"%s\"' % value[1:-1]\n\n        return m.group(1) + key + m.group(3) + value\n\n    res = re.sub(r'''(?x)\n            ([{,]\\s*)\n            (\"[^\"]*\"|\\'[^\\']*\\'|[a-z0-9A-Z]+)\n            (:\\s*)\n            ([0-9.]+|true|false|\"[^\"]*\"|\\'[^\\']*\\'|\\[|\\{)\n        ''', fix_kv, code)\n    res = re.sub(r',(\\s*\\])', lambda m: m.group(1), res)\n    return res",
                "def qualities(quality_ids):\n    \"\"\" Get a numeric quality value out of a list of possible values \"\"\"\n    def q(qid):\n        try:\n            return quality_ids.index(qid)\n        except ValueError:\n            return -1\n    return q",
                "def limit_length(s, length):\n    \"\"\" Add ellipses to overly long strings \"\"\"\n    if s is None:\n        return None\n    ELLIPSES = '...'\n    if len(s) > length:\n        return s[:length - len(ELLIPSES)] + ELLIPSES\n    return s",
                "def compat_print(s):\n    print(s.encode(preferredencoding(), 'xmlcharrefreplace'))",
                "def compat_print(s):\n    assert type(s) == type(u'')\n    print(s)",
                "def find_xpath_attr(node, xpath, key, val):\n    \"\"\" Find the xpath xpath[@key=val] \"\"\"\n    assert re.match(r'^[a-zA-Z-]+$', key)\n    assert re.match(r'^[a-zA-Z0-9@\\s:._-]*$', val)\n    expr = xpath + u\"[@%s='%s']\" % (key, val)\n    return node.find(expr)",
                "def find_xpath_attr(node, xpath, key, val):\n    # Here comes the crazy part: In 2.6, if the xpath is a unicode,\n    # .//node does not match if a node is a direct child of . !\n    if isinstance(xpath, unicode):\n        xpath = xpath.encode('ascii')\n\n    for f in node.findall(xpath):\n        if f.attrib.get(key) == val:\n            return f\n    return None",
                "def __init(self):\n    compat_html_parser.HTMLParser.__init__(self)\n    self.html = None",
                "def loads(self, html):\n    self.html = html\n    self.feed(html)\n    self.close()",
                "def __init__(self, attribute, value):\n    self.attribute = attribute\n    self.value = value\n    self.result = None\n    self.started = False\n    self.depth = {}\n    self.watch_startpos = False\n    self.error_count = 0\n    BaseHTMLParser.__init__(self)",
                "def error(self, message):\n    if self.error_count > 10 or self.started:\n        raise compat_html_parser.HTMLParseError(message, self.getpos())\n    self.rawdata = '\\n'.join(self.html.split('\\n')[self.getpos()[0]:]) # skip one line\n    self.error_count += 1\n    self.goahead(1)",
                "def handle_starttag(self, tag, attrs):\n    attrs = dict(attrs)\n    if self.started:\n        self.find_startpos(None)\n    if self.attribute in attrs and attrs[self.attribute] == self.value:\n        self.result = [tag]\n        self.started = True\n        self.watch_startpos = True\n    if self.started:\n        if not tag in self.depth: self.depth[tag] = 0\n        self.depth[tag] += 1",
                "def handle_endtag(self, tag):\n    if self.started:\n        if tag in self.depth: self.depth[tag] -= 1\n        if self.depth[self.result[0]] == 0:\n            self.started = False\n            self.result.append(self.getpos())",
                "def find_startpos(self, x):\n    \"\"\"Needed to put the start position of the result (self.result[1])\n    after the opening tag with the requested id\"\"\"\n    if self.watch_startpos:\n        self.watch_startpos = False\n        self.result.append(self.getpos())",
                "def get_result(self):\n    if self.result is None:\n        return None\n    if len(self.result) != 3:\n        return None\n    lines = self.html.split('\\n')\n    lines = lines[self.result[1][0]-1:self.result[2][0]]\n    lines[0] = lines[0][self.result[1][1]:]\n    if len(lines) == 1:\n        lines[-1] = lines[-1][:self.result[2][1]-self.result[1][1]]\n    lines[-1] = lines[-1][:self.result[2][1]]\n    return '\\n'.join(lines).strip()",
                "def __init__(self, name):\n    BaseHTMLParser.__init__(self)\n    self.name = name\n    self.content = None\n    self.result = None",
                "def handle_starttag(self, tag, attrs):\n    if tag != 'meta':\n        return\n    attrs = dict(attrs)\n    if attrs.get('name') == self.name:\n        self.result = attrs.get('content')",
                "def get_result(self):\n    return self.result",
                "def replace_insane(char):\n    if char == '?' or ord(char) < 32 or ord(char) == 127:\n        return ''\n    elif char == '\"':\n        return '' if restricted else '\\''\n    elif char == ':':\n        return '_-' if restricted else ' -'\n    elif char in '\\\\/|*<>':\n        return '_'\n    if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n        return '_'\n    if restricted and ord(char) > 127:\n        return '_'\n    return char",
                "def __init__(self, msg, tb=None, expected=False, cause=None, video_id=None):\n    \"\"\" tb, if given, is the original traceback (so that it can be printed out).\n    If expected is set, this is a normal error message and most likely not a bug in youtube-dl.\n    \"\"\"\n\n    if sys.exc_info()[0] in (compat_urllib_error.URLError, socket.timeout, UnavailableVideoError):\n        expected = True\n    if video_id is not None:\n        msg = video_id + ': ' + msg\n    if not expected:\n        msg = msg + u'; please report this issue on https://yt-dl.org/bug . Be sure to call youtube-dl with the --verbose flag and include its complete output. Make sure you are using the latest version; type  youtube-dl -U  to update.'\n    super(ExtractorError, self).__init__(msg)\n\n    self.traceback = tb\n    self.exc_info = sys.exc_info()  # preserve original exception\n    self.cause = cause\n    self.video_id = video_id",
                "def format_traceback(self):\n    if self.traceback is None:\n        return None\n    return u''.join(traceback.format_tb(self.traceback))",
                "def __init__(self, msg, exc_info=None):\n    \"\"\" exc_info, if given, is the original exception that caused the trouble (as returned by sys.exc_info()). \"\"\"\n    super(DownloadError, self).__init__(msg)\n    self.exc_info = exc_info",
                "def __init__(self, msg):\n    self.msg = msg",
                "def __init__(self, downloaded, expected):\n    self.downloaded = downloaded\n    self.expected = expected",
                "@staticmethod\ndef deflate(data):\n    try:\n        return zlib.decompress(data, -zlib.MAX_WBITS)\n    except zlib.error:\n        return zlib.decompress(data)",
                "@staticmethod\ndef addinfourl_wrapper(stream, headers, url, code):\n    if hasattr(compat_urllib_request.addinfourl, 'getcode'):\n        return compat_urllib_request.addinfourl(stream, headers, url, code)\n    ret = compat_urllib_request.addinfourl(stream, headers, url)\n    ret.code = code\n    return ret",
                "def http_request(self, req):\n    for h, v in std_headers.items():\n        if h not in req.headers:\n            req.add_header(h, v)\n    if 'Youtubedl-no-compression' in req.headers:\n        if 'Accept-encoding' in req.headers:\n            del req.headers['Accept-encoding']\n        del req.headers['Youtubedl-no-compression']\n    if 'Youtubedl-user-agent' in req.headers:\n        if 'User-agent' in req.headers:\n            del req.headers['User-agent']\n        req.headers['User-agent'] = req.headers['Youtubedl-user-agent']\n        del req.headers['Youtubedl-user-agent']\n\n    if sys.version_info < (2, 7) and '#' in req.get_full_url():\n        # Python 2.6 is brain-dead when it comes to fragments\n        req._Request__original = req._Request__original.partition('#')[0]\n        req._Request__r_type = req._Request__r_type.partition('#')[0]\n\n    return req",
                "def http_response(self, req, resp):\n    old_resp = resp\n    # gzip\n    if resp.headers.get('Content-encoding', '') == 'gzip':\n        content = resp.read()\n        gz = gzip.GzipFile(fileobj=io.BytesIO(content), mode='rb')\n        try:\n            uncompressed = io.BytesIO(gz.read())\n        except IOError as original_ioerror:\n            # There may be junk add the end of the file\n            # See http://stackoverflow.com/q/4928560/35070 for details\n            for i in range(1, 1024):\n                try:\n                    gz = gzip.GzipFile(fileobj=io.BytesIO(content[:-i]), mode='rb')\n                    uncompressed = io.BytesIO(gz.read())\n                except IOError:\n                    continue\n                break\n            else:\n                raise original_ioerror\n        resp = self.addinfourl_wrapper(uncompressed, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    # deflate\n    if resp.headers.get('Content-encoding', '') == 'deflate':\n        gz = io.BytesIO(self.deflate(resp.read()))\n        resp = self.addinfourl_wrapper(gz, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    return resp",
                "def __init__(self, start=None, end=None):\n    \"\"\"start and end must be strings in the format accepted by date\"\"\"\n    if start is not None:\n        self.start = date_from_str(start)\n    else:\n        self.start = datetime.datetime.min.date()\n    if end is not None:\n        self.end = date_from_str(end)\n    else:\n        self.end = datetime.datetime.max.date()\n    if self.start > self.end:\n        raise ValueError('Date range: \"%s\" , the start date must be before the end date' % self)",
                "@classmethod\ndef day(cls, day):\n    \"\"\"Returns a range that only contains the given day\"\"\"\n    return cls(day,day)",
                "def __contains__(self, date):\n    \"\"\"Check if the date is in the range\"\"\"\n    if not isinstance(date, datetime.date):\n        date = date_from_str(date)\n    return self.start <= date <= self.end",
                "def __str__(self):\n    return '%s - %s' % ( self.start.isoformat(), self.end.isoformat())",
                "def not_a_console(handle):\n    if handle == INVALID_HANDLE_VALUE or handle is None:\n        return True\n    return ((GetFileType(handle) & ~FILE_TYPE_REMOTE) != FILE_TYPE_CHAR\n            or GetConsoleMode(handle, ctypes.byref(ctypes.wintypes.DWORD())) == 0)",
                "def next_nonbmp_pos(s):\n    try:\n        return next(i for i, c in enumerate(s) if ord(c) > 0xffff)\n    except StopIteration:\n        return len(s)",
                "def _lock_file(f, exclusive):\n    overlapped = OVERLAPPED()\n    overlapped.Offset = 0\n    overlapped.OffsetHigh = 0\n    overlapped.hEvent = 0\n    f._lock_file_overlapped_p = ctypes.pointer(overlapped)\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not LockFileEx(handle, 0x2 if exclusive else 0x0, 0,\n                      whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Locking file failed: %r' % ctypes.FormatError())",
                "def _unlock_file(f):\n    assert f._lock_file_overlapped_p\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not UnlockFileEx(handle, 0,\n                        whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Unlocking file failed: %r' % ctypes.FormatError())",
                "def _lock_file(f, exclusive):\n    fcntl.flock(f, fcntl.LOCK_EX if exclusive else fcntl.LOCK_SH)",
                "def _unlock_file(f):\n    fcntl.flock(f, fcntl.LOCK_UN)",
                "def __init__(self, filename, mode, encoding=None):\n    assert mode in ['r', 'a', 'w']\n    self.f = io.open(filename, mode, encoding=encoding)\n    self.mode = mode",
                "def __enter__(self):\n    exclusive = self.mode != 'r'\n    try:\n        _lock_file(self.f, exclusive)\n    except IOError:\n        self.f.close()\n        raise\n    return self",
                "def __exit__(self, etype, value, traceback):\n    try:\n        _unlock_file(self.f)\n    finally:\n        self.f.close()",
                "def __iter__(self):\n    return iter(self.f)",
                "def write(self, *args):\n    return self.f.write(*args)",
                "def read(self, *args):\n    return self.f.read(*args)",
                "def get_method(self):\n    return \"HEAD\"",
                "def __len__(self):\n    # This is only useful for tests\n    return len(self.getslice())",
                "def __init__(self, pagefunc, pagesize):\n    self._pagefunc = pagefunc\n    self._pagesize = pagesize",
                "def getslice(self, start=0, end=None):\n    res = []\n    for pagenum in itertools.count(start // self._pagesize):\n        firstid = pagenum * self._pagesize\n        nextfirstid = pagenum * self._pagesize + self._pagesize\n        if start >= nextfirstid:\n            continue\n\n        page_results = list(self._pagefunc(pagenum))\n\n        startv = (\n            start % self._pagesize\n            if firstid <= start < nextfirstid\n            else 0)\n\n        endv = (\n            ((end - 1) % self._pagesize) + 1\n            if (end is not None and firstid <= end <= nextfirstid)\n            else None)\n\n        if startv != 0 or endv is not None:\n            page_results = page_results[startv:endv]\n        res.extend(page_results)\n\n        # A little optimization - if current page is not \"full\", ie. does\n        # not contain page_size videos then we can assume that this page\n        # is the last one - there are no more ids on further pages -\n        # i.e. no need to query again.\n        if len(page_results) + startv < self._pagesize:\n            break\n\n        # If we got the whole page, but the next page is not interesting,\n        # break out early as well\n        if end == nextfirstid:\n            break\n    return res",
                "def __init__(self, pagefunc, pagecount, pagesize):\n    self._pagefunc = pagefunc\n    self._pagecount = pagecount\n    self._pagesize = pagesize",
                "def getslice(self, start=0, end=None):\n    res = []\n    start_page = start // self._pagesize\n    end_page = (\n        self._pagecount if end is None else (end // self._pagesize + 1))\n    skip_elems = start - start_page * self._pagesize\n    only_more = None if end is None else end - start\n    for pagenum in range(start_page, end_page):\n        page = list(self._pagefunc(pagenum))\n        if skip_elems:\n            page = page[skip_elems:]\n            skip_elems = None\n        if only_more is not None:\n            if len(page) < only_more:\n                only_more -= len(page)\n            else:\n                page = page[:only_more]\n                res.extend(page)\n                break\n        res.extend(page)\n    return res",
                "def fixup(url):\n    if not isinstance(url, compat_str):\n        url = url.decode('utf-8', 'replace')\n    BOM_UTF8 = u'\\xef\\xbb\\xbf'\n    if url.startswith(BOM_UTF8):\n        url = url[len(BOM_UTF8):]\n    url = url.strip()\n    if url.startswith(('#', ';', ']')):\n        return False\n    return url",
                "def compat_getpass(prompt, *args, **kwargs):\n    if isinstance(prompt, compat_str):\n        prompt = prompt.encode(preferredencoding())\n    return getpass.getpass(prompt, *args, **kwargs)",
                "def fix_kv(m):\n    key = m.group(2)\n    if key.startswith(\"'\"):\n        assert key.endswith(\"'\")\n        assert '\"' not in key\n        key = '\"%s\"' % key[1:-1]\n    elif not key.startswith('\"'):\n        key = '\"%s\"' % key\n\n    value = m.group(4)\n    if value.startswith(\"'\"):\n        assert value.endswith(\"'\")\n        assert '\"' not in value\n        value = '\"%s\"' % value[1:-1]\n\n    return m.group(1) + key + m.group(3) + value",
                "def q(qid):\n    try:\n        return quality_ids.index(qid)\n    except ValueError:\n        return -1",
                "def compat_urllib_parse_unquote(string, encoding='utf-8', errors='replace'):\n    if string == '':\n        return string\n    res = string.split('%')\n    if len(res) == 1:\n        return string\n    if encoding is None:\n        encoding = 'utf-8'\n    if errors is None:\n        errors = 'replace'\n    # pct_sequence: contiguous sequence of percent-encoded bytes, decoded\n    pct_sequence = b''\n    string = res[0]\n    for item in res[1:]:\n        try:\n            if not item:\n                raise ValueError\n            pct_sequence += item[:2].decode('hex')\n            rest = item[2:]\n            if not rest:\n                # This segment was just a single percent-encoded character.\n                # May be part of a sequence of code units, so delay decoding.\n                # (Stored in pct_sequence).\n                continue\n        except ValueError:\n            rest = '%' + item\n        # Encountered non-percent-encoded characters. Flush the current\n        # pct_sequence.\n        string += pct_sequence.decode(encoding, errors) + rest\n        pct_sequence = b''\n    if pct_sequence:\n        # Flush the final pct_sequence\n        string += pct_sequence.decode(encoding, errors)\n    return string",
                "def _parse_qsl(qs, keep_blank_values=False, strict_parsing=False,\n            encoding='utf-8', errors='replace'):\n    qs, _coerce_result = qs, unicode\n    pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')]\n    r = []\n    for name_value in pairs:\n        if not name_value and not strict_parsing:\n            continue\n        nv = name_value.split('=', 1)\n        if len(nv) != 2:\n            if strict_parsing:\n                raise ValueError(\"bad query field: %r\" % (name_value,))\n            # Handle case of a control-name with no equal sign\n            if keep_blank_values:\n                nv.append('')\n            else:\n                continue\n        if len(nv[1]) or keep_blank_values:\n            name = nv[0].replace('+', ' ')\n            name = compat_urllib_parse_unquote(\n                name, encoding=encoding, errors=errors)\n            name = _coerce_result(name)\n            value = nv[1].replace('+', ' ')\n            value = compat_urllib_parse_unquote(\n                value, encoding=encoding, errors=errors)\n            value = _coerce_result(value)\n            r.append((name, value))\n    return r",
                "def compat_parse_qs(qs, keep_blank_values=False, strict_parsing=False,\n            encoding='utf-8', errors='replace'):\n    parsed_result = {}\n    pairs = _parse_qsl(qs, keep_blank_values, strict_parsing,\n                    encoding=encoding, errors=errors)\n    for name, value in pairs:\n        if name in parsed_result:\n            parsed_result[name].append(value)\n        else:\n            parsed_result[name] = [value]\n    return parsed_result",
                "def shlex_quote(s):\n    return \"'\" + s.replace(\"'\", \"'\\\"'\\\"'\") + \"'\"",
                "def struct_pack(spec, *args):\n    if isinstance(spec, compat_str):\n        spec = spec.encode('ascii')\n    return struct.pack(spec, *args)",
                "def struct_unpack(spec, *args):\n    if isinstance(spec, compat_str):\n        spec = spec.encode('ascii')\n    return struct.unpack(spec, *args)",
                "def doctype(self, name, pubid, system):\n    pass  # Ignore doctypes",
                "def subprocess_check_output(*args, **kwargs):\n    assert 'input' not in kwargs\n    p = subprocess.Popen(*args, stdout=subprocess.PIPE, **kwargs)\n    output, _ = p.communicate()\n    ret = p.poll()\n    if ret:\n        raise subprocess.CalledProcessError(ret, p.args, output=output)\n    return output",
                "def __init__(self, *args, **kwargs):\n    httplib.HTTPSConnection.__init__(self, *args, **kwargs)",
                "def connect(self):\n    sock = socket.create_connection((self.host, self.port), self.timeout)\n    if getattr(self, '_tunnel_host', False):\n        self.sock = sock\n        self._tunnel()\n    try:\n        self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_TLSv1)\n    except ssl.SSLError:\n        self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv23)",
                "def https_open(self, req):\n    return self.do_open(HTTPSConnectionV3, req)"
            ],
            "inscope_function_signatures": [
                "compat_ord(c)",
                "preferredencoding()",
                "write_json_file(obj, fn)",
                "xpath_with_ns(path, ns_map)",
                "xpath_text(node, xpath, name=None, fatal=False)",
                "get_element_by_id(id, html)",
                "get_element_by_attribute(attribute, value, html)",
                "get_meta_content(name, html)",
                "clean_html(html)",
                "sanitize_open(filename, open_mode)",
                "timeconvert(timestr)",
                "sanitize_filename(s, restricted=False, is_id=False)",
                "orderedSet(iterable)",
                "_htmlentity_transform(entity)",
                "unescapeHTML(s)",
                "encodeFilename(s, for_subprocess=False)",
                "encodeArgument(s)",
                "decodeOption(optval)",
                "formatSeconds(secs)",
                "make_HTTPS_handler(opts_no_check_certificate, **kwargs)",
                "parse_iso8601(date_str, delimiter='T')",
                "unified_strdate(date_str)",
                "determine_ext(url, default_ext=u'unknown_video')",
                "subtitles_filename(filename, sub_lang, sub_format)",
                "date_from_str(date_str)",
                "hyphenate_date(date_str)",
                "platform_name()",
                "_windows_write_string(s, out)",
                "write_string(s, out=None, encoding=None)",
                "bytes_to_intlist(bs)",
                "intlist_to_bytes(xs)",
                "shell_quote(args)",
                "takewhile_inclusive(pred, seq)",
                "smuggle_url(url, data)",
                "unsmuggle_url(smug_url, default=None)",
                "format_bytes(bytes)",
                "get_term_width()",
                "month_by_name(name)",
                "fix_xml_ampersands(xml_str)",
                "setproctitle(title)",
                "remove_start(s, start)",
                "remove_end(s, end)",
                "url_basename(url)",
                "int_or_none(v, scale=1, default=None, get_attr=None, invscale=1)",
                "str_or_none(v, default=None)",
                "str_to_int(int_str)",
                "float_or_none(v, scale=1, invscale=1, default=None)",
                "parse_duration(s)",
                "prepend_extension(filename, ext)",
                "check_executable(exe, args=[])",
                "uppercase_escape(s)",
                "escape_rfc3986(s)",
                "escape_url(url)",
                "read_batch_urls(batch_fd)",
                "urlencode_postdata(*args, **kargs)",
                "parse_xml(s)",
                "strip_jsonp(code)",
                "js_to_json(code)",
                "qualities(quality_ids)",
                "limit_length(s, length)",
                "compat_print(s)",
                "compat_print(s)",
                "find_xpath_attr(node, xpath, key, val)",
                "find_xpath_attr(node, xpath, key, val)",
                "__init(self)",
                "loads(self, html)",
                "__init__(self, attribute, value)",
                "error(self, message)",
                "handle_starttag(self, tag, attrs)",
                "handle_endtag(self, tag)",
                "find_startpos(self, x)",
                "get_result(self)",
                "__init__(self, name)",
                "handle_starttag(self, tag, attrs)",
                "get_result(self)",
                "replace_insane(char)",
                "__init__(self, msg, tb=None, expected=False, cause=None, video_id=None)",
                "format_traceback(self)",
                "__init__(self, msg, exc_info=None)",
                "__init__(self, msg)",
                "__init__(self, downloaded, expected)",
                "deflate(data)",
                "addinfourl_wrapper(stream, headers, url, code)",
                "http_request(self, req)",
                "http_response(self, req, resp)",
                "__init__(self, start=None, end=None)",
                "day(cls, day)",
                "__contains__(self, date)",
                "__str__(self)",
                "not_a_console(handle)",
                "next_nonbmp_pos(s)",
                "_lock_file(f, exclusive)",
                "_unlock_file(f)",
                "_lock_file(f, exclusive)",
                "_unlock_file(f)",
                "__init__(self, filename, mode, encoding=None)",
                "__enter__(self)",
                "__exit__(self, etype, value, traceback)",
                "__iter__(self)",
                "write(self, *args)",
                "read(self, *args)",
                "get_method(self)",
                "__len__(self)",
                "__init__(self, pagefunc, pagesize)",
                "getslice(self, start=0, end=None)",
                "__init__(self, pagefunc, pagecount, pagesize)",
                "getslice(self, start=0, end=None)",
                "fixup(url)",
                "compat_getpass(prompt, *args, **kwargs)",
                "fix_kv(m)",
                "q(qid)",
                "compat_urllib_parse_unquote(string, encoding='utf-8', errors='replace')",
                "_parse_qsl(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')",
                "compat_parse_qs(qs, keep_blank_values=False, strict_parsing=False, encoding='utf-8', errors='replace')",
                "shlex_quote(s)",
                "struct_pack(spec, *args)",
                "struct_unpack(spec, *args)",
                "doctype(self, name, pubid, system)",
                "subprocess_check_output(*args, **kwargs)",
                "__init__(self, *args, **kwargs)",
                "connect(self)",
                "https_open(self, req)"
            ],
            "variables_in_file": {
                "ImportError": [
                    64,
                    96,
                    34,
                    192,
                    69,
                    197,
                    39,
                    135,
                    74,
                    91,
                    44,
                    79,
                    49,
                    84,
                    54,
                    59
                ],
                "compat_subprocess_get_DEVNULL": [
                    90,
                    92
                ],
                "DEVNULL": [
                    90
                ],
                "open": [
                    488,
                    473,
                    92
                ],
                "os.path.devnull": [
                    92
                ],
                "os.path": [
                    480,
                    482,
                    1379,
                    245,
                    246,
                    92
                ],
                "os": [
                    480,
                    482,
                    1379,
                    265,
                    268,
                    1261,
                    245,
                    246,
                    471,
                    92
                ],
                "string": [
                    129,
                    98,
                    99,
                    100,
                    130,
                    102,
                    109,
                    125
                ],
                "res": [
                    1426,
                    534,
                    536,
                    537,
                    538,
                    1439,
                    1449,
                    1465,
                    1467,
                    1468,
                    1597,
                    1603,
                    1604,
                    1368,
                    1370,
                    1372,
                    1374,
                    1375,
                    992,
                    993,
                    991,
                    995,
                    100,
                    101,
                    996,
                    109,
                    110,
                    1405
                ],
                "string.split": [
                    100
                ],
                "len": [
                    387,
                    394,
                    148,
                    1303,
                    1432,
                    156,
                    1053,
                    1313,
                    1319,
                    299,
                    1461,
                    1462,
                    855,
                    101,
                    1637,
                    1638,
                    1520,
                    1396,
                    382
                ],
                "encoding": [
                    129,
                    1179,
                    159,
                    163,
                    172,
                    1076,
                    1209,
                    1210,
                    1211,
                    1082,
                    1085,
                    1215,
                    590,
                    592,
                    593,
                    594,
                    595,
                    103,
                    104,
                    125
                ],
                "errors": [
                    129,
                    163,
                    105,
                    106,
                    172,
                    125,
                    159
                ],
                "pct_sequence": [
                    129,
                    108,
                    114,
                    125,
                    126,
                    127
                ],
                "item": [
                    110,
                    112,
                    114,
                    115,
                    122
                ],
                "ValueError": [
                    1284,
                    907,
                    1612,
                    975,
                    113,
                    150,
                    121
                ],
                "decode": [
                    114
                ],
                "rest": [
                    122,
                    115,
                    116,
                    125
                ],
                "pct_sequence.decode": [
                    129,
                    125
                ],
                "qs": [
                    171,
                    141,
                    142
                ],
                "_coerce_result": [
                    160,
                    164,
                    141
                ],
                "unicode": [
                    1481,
                    285,
                    141,
                    181
                ],
                "pairs": [
                    144,
                    171,
                    173,
                    142
                ],
                "s2": [
                    142
                ],
                "s1": [
                    142
                ],
                "qs.split": [
                    142
                ],
                "s1.split": [
                    142
                ],
                "r": [
                    165,
                    166,
                    143
                ],
                "name_value": [
                    144,
                    145,
                    147,
                    150
                ],
                "strict_parsing": [
                    145,
                    171,
                    149
                ],
                "nv": [
                    161,
                    147,
                    148,
                    153,
                    156,
                    157
                ],
                "name_value.split": [
                    147
                ],
                "keep_blank_values": [
                    152,
                    171,
                    156
                ],
                "nv.append": [
                    153
                ],
                "name": [
                    160,
                    418,
                    1283,
                    1379,
                    165,
                    1380,
                    173,
                    174,
                    175,
                    177,
                    436,
                    314,
                    315,
                    157,
                    158,
                    159
                ],
                "replace": [
                    161,
                    157
                ],
                "compat_urllib_parse_unquote": [
                    162,
                    158
                ],
                "value": [
                    161,
                    162,
                    163,
                    164,
                    165,
                    173,
                    1038,
                    175,
                    336,
                    177,
                    404,
                    1589,
                    1590,
                    1591,
                    1592,
                    1593,
                    1595
                ],
                "r.append": [
                    165
                ],
                "parsed_result": [
                    170,
                    174,
                    175,
                    177,
                    178
                ],
                "_parse_qsl": [
                    171
                ],
                "append": [
                    175
                ],
                "compat_str": [
                    1506,
                    995,
                    1559,
                    613,
                    1343,
                    1516,
                    1552,
                    1297,
                    1074,
                    564,
                    181,
                    599,
                    183,
                    1501,
                    575
                ],
                "NameError": [
                    187,
                    182
                ],
                "str": [
                    1249,
                    183
                ],
                "compat_chr": [
                    545,
                    186,
                    555,
                    188
                ],
                "unichr": [
                    186
                ],
                "chr": [
                    1105,
                    1106,
                    188
                ],
                "s.replace": [
                    199
                ],
                "s": [
                    520,
                    1547,
                    1051,
                    1053,
                    1055,
                    1056,
                    1312,
                    1313,
                    1059,
                    1314,
                    1318,
                    1319,
                    1064,
                    1320,
                    1067,
                    562,
                    1074,
                    564,
                    1077,
                    567,
                    1082,
                    1086,
                    575,
                    1089,
                    579,
                    1476,
                    199,
                    1481,
                    586,
                    1482,
                    1483,
                    1359,
                    1362,
                    595,
                    1365,
                    599,
                    603,
                    604,
                    1634,
                    1637,
                    1638,
                    1639,
                    233,
                    236,
                    237
                ],
                "type": [
                    1249,
                    203,
                    236,
                    207,
                    1074,
                    564,
                    575
                ],
                "c": [
                    296,
                    298,
                    299,
                    203,
                    204,
                    300,
                    302,
                    1099,
                    1051
                ],
                "int": [
                    1254,
                    1351,
                    1096,
                    937,
                    555,
                    203,
                    1263,
                    1270,
                    1368,
                    1370,
                    1339,
                    1372,
                    861,
                    862
                ],
                "ord": [
                    516,
                    1099,
                    204,
                    506,
                    1051
                ],
                "compiled_regex_type": [
                    207
                ],
                "re.compile": [
                    321,
                    207
                ],
                "re": [
                    1290,
                    277,
                    278,
                    919,
                    547,
                    934,
                    1576,
                    566,
                    956,
                    1597,
                    448,
                    321,
                    449,
                    451,
                    1473,
                    1603,
                    1350,
                    207,
                    849,
                    1364,
                    481,
                    878
                ],
                "std_headers": [
                    209,
                    790
                ],
                "pref": [
                    224,
                    225,
                    227,
                    229
                ],
                "locale.getpreferredencoding": [
                    224
                ],
                "locale": [
                    224
                ],
                "encode": [
                    225,
                    1531
                ],
                "sys.version_info": [
                    578,
                    803,
                    231,
                    392,
                    1481,
                    1546,
                    1549,
                    274,
                    626,
                    308,
                    1557,
                    1081,
                    252
                ],
                "sys": [
                    392,
                    1546,
                    1549,
                    274,
                    1557,
                    672,
                    803,
                    681,
                    1073,
                    308,
                    1076,
                    1081,
                    1209,
                    578,
                    581,
                    1481,
                    592,
                    469,
                    471,
                    472,
                    1112,
                    231,
                    626,
                    252
                ],
                "print": [
                    233,
                    237
                ],
                "s.encode": [
                    233,
                    1482,
                    1547,
                    595,
                    1082,
                    1086
                ],
                "preferredencoding": [
                    993,
                    611,
                    233,
                    590,
                    1560,
                    1082,
                    1085
                ],
                "args": [
                    260,
                    1508,
                    1503,
                    1387,
                    1201,
                    243,
                    1204,
                    631,
                    1624,
                    1561,
                    1531,
                    1212,
                    253,
                    255
                ],
                "os.path.basename": [
                    245
                ],
                "fn": [
                    265,
                    245,
                    246
                ],
                "os.path.dirname": [
                    246
                ],
                "args.update": [
                    255
                ],
                "tf": [
                    260,
                    263,
                    264,
                    265,
                    268
                ],
                "tempfile.NamedTemporaryFile": [
                    260
                ],
                "tempfile": [
                    260
                ],
                "json.dump": [
                    264
                ],
                "json": [
                    264,
                    1233,
                    1242
                ],
                "obj": [
                    264
                ],
                "os.rename": [
                    265
                ],
                "tf.name": [
                    265,
                    268
                ],
                "os.remove": [
                    268
                ],
                "OSError": [
                    1061,
                    1157,
                    1164,
                    269,
                    1388,
                    1300,
                    475
                ],
                "re.match": [
                    547,
                    934,
                    1364,
                    277,
                    278,
                    919,
                    956
                ],
                "key": [
                    289,
                    1581,
                    1582,
                    1583,
                    1584,
                    1585,
                    1586,
                    1587,
                    277,
                    279,
                    1595
                ],
                "val": [
                    289,
                    278,
                    279
                ],
                "expr": [
                    280,
                    279
                ],
                "xpath": [
                    288,
                    311,
                    309,
                    279,
                    314,
                    285,
                    286
                ],
                "node.find": [
                    280,
                    311
                ],
                "node": [
                    280,
                    288,
                    311
                ],
                "isinstance": [
                    992,
                    1501,
                    610,
                    995,
                    1506,
                    613,
                    1559,
                    1096,
                    1481,
                    1516,
                    1552,
                    1105,
                    1297,
                    1213,
                    982,
                    599,
                    285
                ],
                "xpath.encode": [
                    309,
                    286
                ],
                "f": [
                    288,
                    289,
                    290,
                    1153,
                    1154,
                    1156,
                    1160,
                    1161,
                    1163,
                    1170,
                    1173
                ],
                "node.findall": [
                    288
                ],
                "f.attrib.get": [
                    289
                ],
                "f.attrib": [
                    289
                ],
                "components": [
                    296,
                    298
                ],
                "c.split": [
                    296
                ],
                "path.split": [
                    296
                ],
                "path": [
                    296,
                    1324,
                    1325
                ],
                "replaced": [
                    304,
                    297,
                    300,
                    303
                ],
                "replaced.append": [
                    300,
                    303
                ],
                "ns": [
                    302,
                    303
                ],
                "tag": [
                    356,
                    423,
                    360,
                    361,
                    365,
                    302,
                    303
                ],
                "ns_map": [
                    303
                ],
                "join": [
                    1217,
                    390,
                    520,
                    304,
                    688,
                    1106,
                    347,
                    958
                ],
                "n": [
                    1537,
                    1550,
                    1551,
                    1552,
                    1553,
                    311,
                    312,
                    318
                ],
                "fatal": [
                    313
                ],
                "ExtractorError": [
                    315,
                    691,
                    678
                ],
                "n.text": [
                    1552,
                    1553,
                    318,
                    1551
                ],
                "compat_html_parser.locatestarttagend": [
                    321
                ],
                "compat_html_parser": [
                    321,
                    322,
                    439,
                    324,
                    396,
                    407,
                    346
                ],
                "re.VERBOSE": [
                    321
                ],
                "compat_html_parser.HTMLParser": [
                    396,
                    322,
                    324
                ],
                "compat_html_parser.HTMLParser.__init__": [
                    324
                ],
                "self": [
                    631,
                    634,
                    635,
                    636,
                    637,
                    639,
                    641,
                    645,
                    1179,
                    1180,
                    1183,
                    1185,
                    1187,
                    1189,
                    678,
                    680,
                    681,
                    682,
                    683,
                    1193,
                    1195,
                    686,
                    1198,
                    688,
                    1201,
                    1204,
                    705,
                    706,
                    725,
                    753,
                    754,
                    830,
                    834,
                    835,
                    324,
                    325,
                    328,
                    329,
                    330,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    341,
                    342,
                    345,
                    346,
                    347,
                    348,
                    349,
                    353,
                    354,
                    355,
                    356,
                    357,
                    358,
                    359,
                    360,
                    361,
                    364,
                    365,
                    366,
                    367,
                    368,
                    1396,
                    373,
                    374,
                    375,
                    1401,
                    1402,
                    380,
                    382,
                    1406,
                    384,
                    385,
                    386,
                    1407,
                    388,
                    389,
                    1408,
                    1412,
                    1415,
                    395,
                    396,
                    1420,
                    1432,
                    417,
                    418,
                    419,
                    420,
                    1444,
                    1445,
                    1446,
                    426,
                    427,
                    1450,
                    1452,
                    430,
                    1453,
                    1456,
                    967,
                    969,
                    971,
                    973,
                    974,
                    975,
                    984,
                    986
                ],
                "self.html": [
                    328,
                    384,
                    347,
                    325
                ],
                "html": [
                    448,
                    449,
                    451,
                    453,
                    454,
                    328,
                    329,
                    400,
                    438,
                    406,
                    447
                ],
                "self.feed": [
                    329
                ],
                "self.close": [
                    330
                ],
                "BaseHTMLParser": [
                    417,
                    411,
                    332,
                    342
                ],
                "self.attribute": [
                    355,
                    335
                ],
                "attribute": [
                    404,
                    335
                ],
                "self.value": [
                    336,
                    355
                ],
                "self.result": [
                    385,
                    386,
                    356,
                    388,
                    389,
                    420,
                    427,
                    366,
                    430,
                    368,
                    337,
                    375,
                    380,
                    382
                ],
                "self.started": [
                    353,
                    357,
                    359,
                    364,
                    367,
                    338,
                    345
                ],
                "self.depth": [
                    360,
                    361,
                    365,
                    366,
                    339
                ],
                "self.watch_startpos": [
                    374,
                    340,
                    373,
                    358
                ],
                "self.error_count": [
                    345,
                    348,
                    341
                ],
                "BaseHTMLParser.__init__": [
                    417,
                    342
                ],
                "compat_html_parser.HTMLParseError": [
                    439,
                    346,
                    407
                ],
                "message": [
                    346
                ],
                "self.getpos": [
                    368,
                    346,
                    347,
                    375
                ],
                "self.rawdata": [
                    347,
                    395
                ],
                "self.html.split": [
                    384,
                    347
                ],
                "self.goahead": [
                    349
                ],
                "attrs": [
                    352,
                    355,
                    425,
                    426,
                    427
                ],
                "dict": [
                    352,
                    425
                ],
                "self.find_startpos": [
                    354
                ],
                "self.result.append": [
                    368,
                    375
                ],
                "handle_entityref": [
                    376
                ],
                "handle_charref": [
                    376
                ],
                "handle_data": [
                    376
                ],
                "handle_comment": [
                    376
                ],
                "handle_decl": [
                    377
                ],
                "handle_pi": [
                    377
                ],
                "unknown_decl": [
                    377
                ],
                "find_startpos": [
                    377
                ],
                "lines": [
                    384,
                    385,
                    386,
                    387,
                    388,
                    389,
                    390
                ],
                "strip": [
                    390
                ],
                "AttrParser.parse_endtag": [
                    393
                ],
                "AttrParser": [
                    393,
                    404
                ],
                "startswith": [
                    395
                ],
                "i": [
                    394,
                    395,
                    396,
                    821,
                    823,
                    1051
                ],
                "compat_html_parser.HTMLParser.parse_endtag": [
                    396
                ],
                "get_element_by_attribute": [
                    400
                ],
                "id": [
                    400
                ],
                "parser": [
                    1545,
                    1546,
                    441,
                    436,
                    404,
                    438,
                    406,
                    409
                ],
                "parser.loads": [
                    438,
                    406
                ],
                "parser.get_result": [
                    409,
                    441
                ],
                "self.name": [
                    426,
                    418
                ],
                "self.content": [
                    419
                ],
                "attrs.get": [
                    426,
                    427
                ],
                "MetaParser": [
                    436
                ],
                "html.replace": [
                    447
                ],
                "re.sub": [
                    448,
                    449,
                    481,
                    451,
                    1473,
                    1603,
                    1350,
                    1576,
                    1290,
                    878,
                    566,
                    1597
                ],
                "unescapeHTML": [
                    453
                ],
                "html.strip": [
                    454
                ],
                "filename": [
                    482,
                    1379,
                    484,
                    488,
                    468,
                    472,
                    473,
                    474,
                    1179,
                    925
                ],
                "sys.platform": [
                    581,
                    1076,
                    1557,
                    469,
                    1112
                ],
                "msvcrt.setmode": [
                    471
                ],
                "msvcrt": [
                    1161,
                    1154,
                    471
                ],
                "sys.stdout.fileno": [
                    471
                ],
                "sys.stdout": [
                    472,
                    471
                ],
                "os.O_BINARY": [
                    471
                ],
                "hasattr": [
                    647,
                    783,
                    1076,
                    472,
                    1084
                ],
                "sys.stdout.buffer": [
                    472
                ],
                "stream": [
                    488,
                    489,
                    784,
                    785,
                    473,
                    474
                ],
                "encodeFilename": [
                    488,
                    473,
                    604
                ],
                "open_mode": [
                    488,
                    473
                ],
                "IOError": [
                    1186,
                    825,
                    818,
                    475
                ],
                "err.errno": [
                    476
                ],
                "err": [
                    476,
                    1269
                ],
                "errno.EACCES": [
                    476
                ],
                "errno": [
                    476
                ],
                "alt_filename": [
                    480,
                    489,
                    484
                ],
                "os.path.join": [
                    480
                ],
                "path_part": [
                    481,
                    482
                ],
                "os.path.split": [
                    482
                ],
                "timestamp": [
                    497,
                    498,
                    494
                ],
                "timetuple": [
                    910,
                    911,
                    496,
                    497,
                    495,
                    912
                ],
                "email.utils.parsedate_tz": [
                    910,
                    495
                ],
                "email.utils": [
                    497,
                    910,
                    495
                ],
                "email": [
                    497,
                    910,
                    495
                ],
                "timestr": [
                    495
                ],
                "email.utils.mktime_tz": [
                    497
                ],
                "char": [
                    512,
                    514,
                    516,
                    518,
                    506,
                    508,
                    510
                ],
                "restricted": [
                    514,
                    516,
                    526,
                    509,
                    511
                ],
                "char.isspace": [
                    514
                ],
                "result": [
                    520,
                    522,
                    523,
                    524,
                    526,
                    527,
                    528,
                    529,
                    530
                ],
                "map": [
                    520,
                    1527
                ],
                "replace_insane": [
                    520
                ],
                "is_id": [
                    521
                ],
                "result.replace": [
                    523
                ],
                "result.strip": [
                    524
                ],
                "result.startswith": [
                    526
                ],
                "el": [
                    536,
                    537,
                    535
                ],
                "iterable": [
                    535
                ],
                "res.append": [
                    537
                ],
                "entity": [
                    544,
                    545,
                    547,
                    558
                ],
                "compat_html_entities.name2codepoint": [
                    544,
                    545
                ],
                "compat_html_entities": [
                    544,
                    545
                ],
                "mobj": [
                    547,
                    548,
                    549
                ],
                "numstr": [
                    552,
                    555,
                    549,
                    550
                ],
                "mobj.group": [
                    549
                ],
                "numstr.startswith": [
                    550
                ],
                "base": [
                    554,
                    555,
                    551
                ],
                "_htmlentity_transform": [
                    567
                ],
                "m.group": [
                    1374,
                    1368,
                    1475,
                    567,
                    1603,
                    1581,
                    1373,
                    1371,
                    1589,
                    855,
                    856,
                    1369,
                    1370,
                    859,
                    1372,
                    861,
                    862,
                    1595
                ],
                "m": [
                    1581,
                    1589,
                    567,
                    1595,
                    1475,
                    1603,
                    849,
                    852,
                    1364,
                    1366,
                    855,
                    1368,
                    856,
                    1369,
                    1371,
                    1370,
                    1373,
                    1374,
                    859,
                    1372,
                    861,
                    862
                ],
                "sys.getwindowsversion": [
                    581
                ],
                "for_subprocess": [
                    585
                ],
                "sys.getfilesystemencoding": [
                    592,
                    1209
                ],
                "s.decode": [
                    603
                ],
                "optval": [
                    608,
                    609,
                    610,
                    611,
                    613,
                    614
                ],
                "bytes": [
                    992,
                    1249,
                    610,
                    1250,
                    1251,
                    1254,
                    1256,
                    1105,
                    1108,
                    1213,
                    1247
                ],
                "optval.decode": [
                    611
                ],
                "secs": [
                    617,
                    618,
                    619,
                    620,
                    622
                ],
                "httplib.HTTPSConnection": [
                    629,
                    631
                ],
                "httplib": [
                    629,
                    631
                ],
                "httplib.HTTPSConnection.__init__": [
                    631
                ],
                "kwargs": [
                    646,
                    631,
                    1623,
                    1546,
                    1547,
                    652,
                    663,
                    1624,
                    1561
                ],
                "sock": [
                    641,
                    634,
                    636,
                    639
                ],
                "socket.create_connection": [
                    634
                ],
                "socket": [
                    672,
                    634
                ],
                "self.host": [
                    634
                ],
                "self.port": [
                    634
                ],
                "self.timeout": [
                    634
                ],
                "getattr": [
                    1080,
                    1336,
                    635,
                    1085
                ],
                "self.sock": [
                    641,
                    636,
                    639
                ],
                "self._tunnel": [
                    637
                ],
                "ssl.wrap_socket": [
                    641,
                    639
                ],
                "ssl": [
                    640,
                    641,
                    647,
                    648,
                    649,
                    651,
                    654,
                    655,
                    657,
                    639
                ],
                "self.key_file": [
                    641,
                    639
                ],
                "self.cert_file": [
                    641,
                    639
                ],
                "ssl.PROTOCOL_TLSv1": [
                    639
                ],
                "ssl.SSLError": [
                    640
                ],
                "ssl.PROTOCOL_SSLv23": [
                    641,
                    654
                ],
                "compat_urllib_request.HTTPSHandler": [
                    643,
                    652,
                    663
                ],
                "compat_urllib_request": [
                    643,
                    652,
                    783,
                    784,
                    785,
                    1328,
                    756,
                    663
                ],
                "self.do_open": [
                    645
                ],
                "HTTPSConnectionV3": [
                    645
                ],
                "req": [
                    800,
                    801,
                    803,
                    645,
                    805,
                    806,
                    808,
                    791,
                    792,
                    793,
                    794,
                    795,
                    796,
                    797,
                    798,
                    799
                ],
                "HTTPSHandlerV3": [
                    646
                ],
                "context": [
                    648,
                    649,
                    651,
                    652,
                    654,
                    655,
                    658,
                    660,
                    663
                ],
                "ssl.create_default_context": [
                    648
                ],
                "ssl.Purpose.CLIENT_AUTH": [
                    648
                ],
                "ssl.Purpose": [
                    648
                ],
                "context.options": [
                    649
                ],
                "ssl.OP_NO_SSLv3": [
                    649
                ],
                "opts_no_check_certificate": [
                    656,
                    650
                ],
                "context.verify_mode": [
                    651,
                    655
                ],
                "ssl.CERT_NONE": [
                    651,
                    655
                ],
                "ssl.SSLContext": [
                    654
                ],
                "ssl.CERT_REQUIRED": [
                    657
                ],
                "context.set_default_verify_paths": [
                    658
                ],
                "context.load_default_certs": [
                    660
                ],
                "AttributeError": [
                    1536,
                    1621,
                    661,
                    1014,
                    1307
                ],
                "Exception": [
                    709,
                    741,
                    718,
                    727,
                    696,
                    665,
                    732
                ],
                "sys.exc_info": [
                    672,
                    681
                ],
                "compat_urllib_error.URLError": [
                    672
                ],
                "compat_urllib_error": [
                    672
                ],
                "socket.timeout": [
                    672
                ],
                "UnavailableVideoError": [
                    672
                ],
                "expected": [
                    673,
                    754,
                    676,
                    750
                ],
                "video_id": [
                    674,
                    675,
                    683
                ],
                "msg": [
                    705,
                    675,
                    677,
                    678,
                    725
                ],
                "__init__": [
                    705,
                    678
                ],
                "super": [
                    705,
                    678
                ],
                "self.traceback": [
                    680,
                    686,
                    688
                ],
                "tb": [
                    680
                ],
                "self.exc_info": [
                    681,
                    706
                ],
                "self.cause": [
                    682
                ],
                "cause": [
                    682
                ],
                "self.video_id": [
                    683
                ],
                "traceback.format_tb": [
                    688
                ],
                "traceback": [
                    688
                ],
                "DownloadError": [
                    705
                ],
                "exc_info": [
                    706
                ],
                "self.msg": [
                    725
                ],
                "downloaded": [
                    753,
                    749
                ],
                "self.downloaded": [
                    753
                ],
                "self.expected": [
                    754
                ],
                "compat_urllib_request.HTTPHandler": [
                    756
                ],
                "zlib.decompress": [
                    777,
                    779
                ],
                "zlib": [
                    777,
                    778,
                    779
                ],
                "data": [
                    777,
                    779,
                    1233,
                    1242,
                    1243
                ],
                "zlib.MAX_WBITS": [
                    777
                ],
                "zlib.error": [
                    778
                ],
                "staticmethod": [
                    781,
                    774
                ],
                "compat_urllib_request.addinfourl": [
                    784,
                    785,
                    783
                ],
                "headers": [
                    784,
                    785
                ],
                "url": [
                    1527,
                    1324,
                    1516,
                    1517,
                    1519,
                    784,
                    785,
                    1234,
                    1488,
                    916,
                    1520,
                    918,
                    1521,
                    1240,
                    1522,
                    1524,
                    1243
                ],
                "code": [
                    784,
                    786,
                    1576,
                    1602
                ],
                "ret": [
                    1058,
                    1060,
                    785,
                    786,
                    787,
                    1626,
                    1627,
                    1628
                ],
                "ret.code": [
                    786
                ],
                "h": [
                    1059,
                    791,
                    1046,
                    790,
                    792,
                    1023
                ],
                "v": [
                    1336,
                    1355,
                    790,
                    1335,
                    792,
                    1337,
                    1338,
                    1339,
                    1343
                ],
                "std_headers.items": [
                    790
                ],
                "req.headers": [
                    800,
                    801,
                    791,
                    793,
                    794,
                    795,
                    796,
                    797,
                    798,
                    799
                ],
                "req.add_header": [
                    792
                ],
                "req.get_full_url": [
                    803
                ],
                "req._Request__original": [
                    805
                ],
                "req._Request__original.partition": [
                    805
                ],
                "req._Request__r_type": [
                    806
                ],
                "req._Request__r_type.partition": [
                    806
                ],
                "old_resp": [
                    835,
                    836,
                    811,
                    830,
                    831
                ],
                "resp": [
                    833,
                    834,
                    835,
                    836,
                    837,
                    811,
                    813,
                    814,
                    830,
                    831
                ],
                "resp.headers.get": [
                    833,
                    813
                ],
                "resp.headers": [
                    833,
                    813
                ],
                "content": [
                    823,
                    814,
                    815
                ],
                "resp.read": [
                    834,
                    814
                ],
                "gz": [
                    834,
                    835,
                    815,
                    817,
                    823,
                    824
                ],
                "gzip.GzipFile": [
                    823,
                    815
                ],
                "gzip": [
                    823,
                    815
                ],
                "io.BytesIO": [
                    834,
                    815,
                    817,
                    823,
                    824
                ],
                "io": [
                    834,
                    815,
                    817,
                    823,
                    824,
                    1179
                ],
                "uncompressed": [
                    824,
                    817,
                    830
                ],
                "gz.read": [
                    824,
                    817
                ],
                "range": [
                    821,
                    1455
                ],
                "original_ioerror": [
                    829
                ],
                "self.addinfourl_wrapper": [
                    835,
                    830
                ],
                "old_resp.headers": [
                    835,
                    830
                ],
                "old_resp.url": [
                    835,
                    830
                ],
                "old_resp.code": [
                    835,
                    830
                ],
                "resp.msg": [
                    836,
                    831
                ],
                "old_resp.msg": [
                    836,
                    831
                ],
                "self.deflate": [
                    834
                ],
                "https_request": [
                    839
                ],
                "http_request": [
                    839
                ],
                "https_response": [
                    840
                ],
                "http_response": [
                    840
                ],
                "date_str": [
                    864,
                    960,
                    932,
                    934,
                    871,
                    906,
                    876,
                    846,
                    878,
                    910,
                    951,
                    851,
                    855,
                    956
                ],
                "re.search": [
                    849
                ],
                "timezone": [
                    864,
                    857,
                    860,
                    853
                ],
                "datetime.timedelta": [
                    857,
                    860,
                    853,
                    949
                ],
                "datetime": [
                    864,
                    931,
                    969,
                    906,
                    973,
                    912,
                    853,
                    949,
                    951,
                    982,
                    857,
                    860
                ],
                "sign": [
                    936,
                    938,
                    859,
                    861,
                    862
                ],
                "date_format": [
                    864,
                    863
                ],
                "format": [
                    1380,
                    863
                ],
                "delimiter": [
                    863
                ],
                "dt": [
                    864,
                    865
                ],
                "datetime.datetime.strptime": [
                    864,
                    906,
                    951
                ],
                "datetime.datetime": [
                    864,
                    969,
                    906,
                    973,
                    912,
                    951
                ],
                "calendar.timegm": [
                    865
                ],
                "calendar": [
                    865
                ],
                "dt.timetuple": [
                    865
                ],
                "upload_date": [
                    874,
                    906,
                    909,
                    912,
                    913
                ],
                "date_str.replace": [
                    876
                ],
                "format_expressions": [
                    904,
                    879
                ],
                "expression": [
                    904,
                    906
                ],
                "strftime": [
                    912,
                    906
                ],
                "default_ext": [
                    922,
                    917
                ],
                "guess": [
                    920,
                    918,
                    919
                ],
                "rpartition": [
                    918
                ],
                "url.partition": [
                    918
                ],
                "filename.rsplit": [
                    925
                ],
                "sub_lang": [
                    925
                ],
                "sub_format": [
                    925
                ],
                "today": [
                    931,
                    933,
                    950
                ],
                "datetime.date.today": [
                    931
                ],
                "datetime.date": [
                    931,
                    982
                ],
                "match": [
                    934,
                    935,
                    936,
                    937,
                    940,
                    956,
                    957,
                    958
                ],
                "match.group": [
                    936,
                    937,
                    940
                ],
                "time": [
                    937,
                    939,
                    944,
                    947,
                    949
                ],
                "unit": [
                    940,
                    942,
                    943,
                    945,
                    946,
                    948,
                    949
                ],
                "delta": [
                    949,
                    950
                ],
                "date": [
                    984,
                    983,
                    982,
                    951
                ],
                "match.groups": [
                    958
                ],
                "object": [
                    1176,
                    1393,
                    962
                ],
                "start": [
                    1312,
                    1313,
                    1409,
                    966,
                    967,
                    1416,
                    1415,
                    1450,
                    1453,
                    1454,
                    1406
                ],
                "self.start": [
                    967,
                    969,
                    974,
                    984,
                    986
                ],
                "date_from_str": [
                    983,
                    971,
                    967
                ],
                "datetime.datetime.min.date": [
                    969
                ],
                "datetime.datetime.min": [
                    969
                ],
                "end": [
                    1318,
                    1319,
                    970,
                    971,
                    1420,
                    1421,
                    1452,
                    1454,
                    1437
                ],
                "self.end": [
                    971,
                    973,
                    974,
                    984,
                    986
                ],
                "datetime.datetime.max.date": [
                    973
                ],
                "datetime.datetime.max": [
                    973
                ],
                "cls": [
                    979
                ],
                "day": [
                    979
                ],
                "classmethod": [
                    976
                ],
                "self.start.isoformat": [
                    986
                ],
                "self.end.isoformat": [
                    986
                ],
                "platform.platform": [
                    991
                ],
                "platform": [
                    991
                ],
                "res.decode": [
                    993
                ],
                "WIN_OUTPUT_IDS": [
                    1017,
                    1023,
                    1007
                ],
                "fileno": [
                    1017,
                    1013,
                    1023
                ],
                "out.fileno": [
                    1013
                ],
                "out": [
                    1089,
                    1090,
                    1072,
                    1073,
                    1076,
                    1077,
                    1013,
                    1269,
                    1080,
                    1270,
                    1083,
                    1084,
                    1085,
                    1087
                ],
                "GetStdHandle": [
                    1020,
                    1023
                ],
                "ctypes.WINFUNCTYPE": [
                    1025,
                    1034,
                    1020,
                    1031
                ],
                "ctypes": [
                    1025,
                    1026,
                    1027,
                    1028,
                    1029,
                    1153,
                    1031,
                    1157,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    1164,
                    1299,
                    1044,
                    1303,
                    1059,
                    1116,
                    1118,
                    1119,
                    1120,
                    1121,
                    1122,
                    1125,
                    1128,
                    1129,
                    1130,
                    1131,
                    1132,
                    1133,
                    1135,
                    1138,
                    1139,
                    1140,
                    1141,
                    1142,
                    1144,
                    1020,
                    1021,
                    1022
                ],
                "ctypes.wintypes.HANDLE": [
                    1026,
                    1122,
                    1128,
                    1035,
                    1138,
                    1021
                ],
                "ctypes.wintypes": [
                    1026,
                    1027,
                    1028,
                    1029,
                    1031,
                    1035,
                    1036,
                    1038,
                    1044,
                    1118,
                    1119,
                    1120,
                    1121,
                    1122,
                    1128,
                    1129,
                    1130,
                    1131,
                    1132,
                    1135,
                    1138,
                    1139,
                    1140,
                    1141,
                    1144,
                    1021
                ],
                "ctypes.wintypes.DWORD": [
                    1120,
                    1121,
                    1027,
                    1029,
                    1031,
                    1129,
                    1130,
                    1131,
                    1036,
                    1132,
                    1038,
                    1139,
                    1044,
                    1140,
                    1141,
                    1021
                ],
                "ctypes.windll.kernel32": [
                    1028,
                    1125,
                    1031,
                    1037,
                    1022
                ],
                "ctypes.windll": [
                    1028,
                    1125,
                    1031,
                    1037,
                    1022
                ],
                "WriteConsoleW": [
                    1025,
                    1058
                ],
                "ctypes.wintypes.BOOL": [
                    1144,
                    1026,
                    1035,
                    1135
                ],
                "ctypes.wintypes.LPWSTR": [
                    1026
                ],
                "ctypes.POINTER": [
                    1027,
                    1036,
                    1133,
                    1142
                ],
                "ctypes.wintypes.LPVOID": [
                    1028,
                    1118,
                    1119
                ],
                "written": [
                    1059,
                    1029,
                    1063,
                    1066,
                    1067
                ],
                "GetFileType": [
                    1043,
                    1031
                ],
                "FILE_TYPE_CHAR": [
                    1032,
                    1043
                ],
                "FILE_TYPE_REMOTE": [
                    1033,
                    1043
                ],
                "GetConsoleMode": [
                    1034,
                    1044
                ],
                "INVALID_HANDLE_VALUE": [
                    1041,
                    1038
                ],
                "handle": [
                    1154,
                    1155,
                    1161,
                    1162,
                    1041,
                    1043,
                    1044
                ],
                "ctypes.byref": [
                    1059,
                    1044
                ],
                "not_a_console": [
                    1046
                ],
                "next": [
                    1051
                ],
                "enumerate": [
                    1051
                ],
                "StopIteration": [
                    1052
                ],
                "count": [
                    1056,
                    1059,
                    1062
                ],
                "min": [
                    1056
                ],
                "next_nonbmp_pos": [
                    1056
                ],
                "written.value": [
                    1066,
                    1067,
                    1063
                ],
                "sys.stderr": [
                    1073
                ],
                "_windows_write_string": [
                    1077
                ],
                "byt": [
                    1082,
                    1083,
                    1086,
                    1087
                ],
                "out.write": [
                    1089,
                    1083
                ],
                "enc": [
                    1085,
                    1086
                ],
                "out.buffer.write": [
                    1087
                ],
                "out.buffer": [
                    1087
                ],
                "out.flush": [
                    1090
                ],
                "bs": [
                    1096,
                    1097,
                    1099,
                    1094
                ],
                "list": [
                    1456,
                    1097,
                    1412
                ],
                "xs": [
                    1106,
                    1108,
                    1103
                ],
                "x": [
                    1106
                ],
                "ctypes.Structure": [
                    1116
                ],
                "_fields_": [
                    1117
                ],
                "kernel32": [
                    1136,
                    1125,
                    1126
                ],
                "LockFileEx": [
                    1155,
                    1135,
                    1126,
                    1127
                ],
                "kernel32.LockFileEx": [
                    1126
                ],
                "LockFileEx.argtypes": [
                    1127
                ],
                "OVERLAPPED": [
                    1149,
                    1133,
                    1142
                ],
                "LockFileEx.restype": [
                    1135
                ],
                "UnlockFileEx": [
                    1136,
                    1137,
                    1162,
                    1144
                ],
                "kernel32.UnlockFileEx": [
                    1136
                ],
                "UnlockFileEx.argtypes": [
                    1137
                ],
                "UnlockFileEx.restype": [
                    1144
                ],
                "whole_low": [
                    1145,
                    1163,
                    1156
                ],
                "whole_high": [
                    1146,
                    1163,
                    1156
                ],
                "overlapped": [
                    1152,
                    1153,
                    1149,
                    1150,
                    1151
                ],
                "overlapped.Offset": [
                    1150
                ],
                "overlapped.OffsetHigh": [
                    1151
                ],
                "overlapped.hEvent": [
                    1152
                ],
                "f._lock_file_overlapped_p": [
                    1160,
                    1153,
                    1163,
                    1156
                ],
                "ctypes.pointer": [
                    1153
                ],
                "msvcrt.get_osfhandle": [
                    1161,
                    1154
                ],
                "f.fileno": [
                    1161,
                    1154
                ],
                "exclusive": [
                    1185,
                    1170,
                    1155,
                    1183
                ],
                "ctypes.FormatError": [
                    1164,
                    1157
                ],
                "fcntl.flock": [
                    1170,
                    1173
                ],
                "fcntl": [
                    1170,
                    1173
                ],
                "fcntl.LOCK_EX": [
                    1170
                ],
                "fcntl.LOCK_SH": [
                    1170
                ],
                "fcntl.LOCK_UN": [
                    1173
                ],
                "mode": [
                    1178,
                    1179,
                    1180
                ],
                "self.f": [
                    1185,
                    1187,
                    1193,
                    1195,
                    1198,
                    1201,
                    1204,
                    1179
                ],
                "io.open": [
                    1179
                ],
                "self.mode": [
                    1180,
                    1183
                ],
                "_lock_file": [
                    1185
                ],
                "self.f.close": [
                    1187,
                    1195
                ],
                "_unlock_file": [
                    1193
                ],
                "iter": [
                    1198
                ],
                "self.f.write": [
                    1201
                ],
                "self.f.read": [
                    1204
                ],
                "quoted_args": [
                    1208,
                    1217,
                    1216
                ],
                "a": [
                    1216,
                    1212,
                    1213,
                    1215
                ],
                "a.decode": [
                    1215
                ],
                "quoted_args.append": [
                    1216
                ],
                "pipes.quote": [
                    1216
                ],
                "pipes": [
                    1216
                ],
                "e": [
                    1224,
                    1225,
                    1223
                ],
                "seq": [
                    1223
                ],
                "pred": [
                    1225
                ],
                "sdata": [
                    1232,
                    1241,
                    1234,
                    1240
                ],
                "compat_urllib_parse.urlencode": [
                    1232,
                    1531
                ],
                "compat_urllib_parse": [
                    1232,
                    1483,
                    1531
                ],
                "json.dumps": [
                    1233
                ],
                "smug_url": [
                    1240,
                    1238,
                    1239
                ],
                "default": [
                    1355,
                    1339,
                    1343,
                    1239
                ],
                "_": [
                    1240,
                    1625
                ],
                "smug_url.rpartition": [
                    1240
                ],
                "jsond": [
                    1241,
                    1242
                ],
                "compat_parse_qs": [
                    1241
                ],
                "json.loads": [
                    1242
                ],
                "float": [
                    1256,
                    1250,
                    1355,
                    1374
                ],
                "exponent": [
                    1256,
                    1252,
                    1254,
                    1255
                ],
                "math.log": [
                    1254
                ],
                "math": [
                    1254
                ],
                "suffix": [
                    1257,
                    1255
                ],
                "converted": [
                    1256,
                    1257
                ],
                "columns": [
                    1261,
                    1262,
                    1263
                ],
                "os.environ.get": [
                    1261
                ],
                "os.environ": [
                    1261
                ],
                "sp": [
                    1266,
                    1269
                ],
                "subprocess.Popen": [
                    1624,
                    1266,
                    1387
                ],
                "subprocess": [
                    1387,
                    1266,
                    1268,
                    1620,
                    1624,
                    1628
                ],
                "subprocess.PIPE": [
                    1624,
                    1387,
                    1268
                ],
                "sp.communicate": [
                    1269
                ],
                "out.split": [
                    1270
                ],
                "ENGLISH_NAMES": [
                    1283,
                    1279
                ],
                "ENGLISH_NAMES.index": [
                    1283
                ],
                "xml_str": [
                    1293
                ],
                "title": [
                    1297,
                    1302
                ],
                "libc": [
                    1306,
                    1299
                ],
                "ctypes.cdll.LoadLibrary": [
                    1299
                ],
                "ctypes.cdll": [
                    1299
                ],
                "title_bytes": [
                    1304,
                    1302,
                    1303
                ],
                "title.encode": [
                    1302
                ],
                "buf": [
                    1304,
                    1306,
                    1303
                ],
                "ctypes.create_string_buffer": [
                    1303
                ],
                "buf.value": [
                    1304
                ],
                "libc.prctl": [
                    1306
                ],
                "s.startswith": [
                    1312
                ],
                "s.endswith": [
                    1318
                ],
                "compat_urlparse.urlparse": [
                    1324
                ],
                "compat_urlparse": [
                    1324
                ],
                "split": [
                    1325
                ],
                "path.strip": [
                    1325
                ],
                "compat_urllib_request.Request": [
                    1328
                ],
                "get_attr": [
                    1336,
                    1334
                ],
                "invscale": [
                    1355,
                    1339
                ],
                "scale": [
                    1355,
                    1339
                ],
                "int_str": [
                    1348,
                    1350,
                    1351
                ],
                "s.strip": [
                    1362
                ],
                "real_ext": [
                    1379,
                    1380
                ],
                "os.path.splitext": [
                    1379
                ],
                "ext": [
                    1380
                ],
                "communicate": [
                    1387
                ],
                "exe": [
                    1387,
                    1390
                ],
                "self.getslice": [
                    1396
                ],
                "PagedList": [
                    1442,
                    1399
                ],
                "self._pagefunc": [
                    1456,
                    1401,
                    1444,
                    1412
                ],
                "pagefunc": [
                    1401,
                    1444
                ],
                "self._pagesize": [
                    1408,
                    1446,
                    1415,
                    1450,
                    1420,
                    1452,
                    1453,
                    1432,
                    1402,
                    1406,
                    1407
                ],
                "pagesize": [
                    1402,
                    1446
                ],
                "pagenum": [
                    1408,
                    1412,
                    1455,
                    1456,
                    1406,
                    1407
                ],
                "itertools.count": [
                    1406
                ],
                "itertools": [
                    1406
                ],
                "firstid": [
                    1416,
                    1421,
                    1407
                ],
                "nextfirstid": [
                    1408,
                    1409,
                    1416,
                    1421,
                    1437
                ],
                "page_results": [
                    1432,
                    1425,
                    1426,
                    1412
                ],
                "startv": [
                    1424,
                    1425,
                    1432,
                    1414
                ],
                "endv": [
                    1424,
                    1425,
                    1419
                ],
                "res.extend": [
                    1465,
                    1426,
                    1467
                ],
                "self._pagecount": [
                    1452,
                    1445
                ],
                "pagecount": [
                    1445
                ],
                "start_page": [
                    1450,
                    1453,
                    1455
                ],
                "end_page": [
                    1451,
                    1455
                ],
                "skip_elems": [
                    1457,
                    1458,
                    1459,
                    1453
                ],
                "only_more": [
                    1454,
                    1460,
                    1461,
                    1462,
                    1464
                ],
                "page": [
                    1456,
                    1458,
                    1461,
                    1462,
                    1464,
                    1465,
                    1467
                ],
                "unicode_escape": [
                    1472,
                    1475
                ],
                "codecs.getdecoder": [
                    1472
                ],
                "codecs": [
                    1472
                ],
                "compat_urllib_parse.quote": [
                    1483
                ],
                "url_parsed": [
                    1488,
                    1489,
                    1490,
                    1491,
                    1492,
                    1493
                ],
                "compat_urllib_parse_urlparse": [
                    1488
                ],
                "geturl": [
                    1489
                ],
                "url_parsed._replace": [
                    1489
                ],
                "escape_rfc3986": [
                    1490,
                    1491,
                    1492,
                    1493
                ],
                "url_parsed.path": [
                    1490
                ],
                "url_parsed.params": [
                    1491
                ],
                "url_parsed.query": [
                    1492
                ],
                "url_parsed.fragment": [
                    1493
                ],
                "struct.pack": [
                    1497,
                    1510,
                    1503
                ],
                "struct": [
                    1508,
                    1510,
                    1511,
                    1497,
                    1503
                ],
                "TypeError": [
                    1498
                ],
                "spec": [
                    1506,
                    1507,
                    1508,
                    1501,
                    1502,
                    1503
                ],
                "spec.encode": [
                    1507,
                    1502
                ],
                "struct.unpack": [
                    1508,
                    1511
                ],
                "struct_pack": [
                    1510
                ],
                "struct_unpack": [
                    1511
                ],
                "url.decode": [
                    1517
                ],
                "BOM_UTF8": [
                    1520,
                    1518,
                    1519
                ],
                "url.startswith": [
                    1522,
                    1519
                ],
                "url.strip": [
                    1521
                ],
                "contextlib.closing": [
                    1526
                ],
                "contextlib": [
                    1526
                ],
                "batch_fd": [
                    1526
                ],
                "fd": [
                    1526,
                    1527
                ],
                "fixup": [
                    1527
                ],
                "kargs": [
                    1531
                ],
                "etree_iter": [
                    1537,
                    1550,
                    1535
                ],
                "xml.etree.ElementTree.Element.iter": [
                    1535
                ],
                "xml.etree.ElementTree.Element": [
                    1535
                ],
                "xml.etree.ElementTree": [
                    1545,
                    1547,
                    1541,
                    1535
                ],
                "xml.etree": [
                    1545,
                    1547,
                    1541,
                    1535
                ],
                "xml": [
                    1545,
                    1547,
                    1541,
                    1535
                ],
                "n.findall": [
                    1537
                ],
                "xml.etree.ElementTree.TreeBuilder": [
                    1541
                ],
                "xml.etree.ElementTree.XMLParser": [
                    1545
                ],
                "TreeBuilder": [
                    1545
                ],
                "tree": [
                    1554,
                    1547,
                    1550
                ],
                "xml.etree.ElementTree.XML": [
                    1547
                ],
                "n.text.decode": [
                    1553
                ],
                "prompt": [
                    1560,
                    1561,
                    1559
                ],
                "prompt.encode": [
                    1560
                ],
                "getpass.getpass": [
                    1561,
                    1563
                ],
                "getpass": [
                    1561,
                    1563
                ],
                "compat_getpass": [
                    1563
                ],
                "US_RATINGS": [
                    1566
                ],
                "key.startswith": [
                    1586,
                    1582
                ],
                "key.endswith": [
                    1583
                ],
                "value.startswith": [
                    1590
                ],
                "value.endswith": [
                    1591
                ],
                "fix_kv": [
                    1602
                ],
                "quality_ids.index": [
                    1611
                ],
                "quality_ids": [
                    1611
                ],
                "qid": [
                    1611
                ],
                "q": [
                    1614
                ],
                "DEFAULT_OUTTMPL": [
                    1617
                ],
                "subprocess_check_output": [
                    1620
                ],
                "subprocess.check_output": [
                    1620
                ],
                "p": [
                    1624,
                    1625,
                    1626,
                    1628
                ],
                "output": [
                    1625,
                    1628,
                    1629
                ],
                "p.communicate": [
                    1625
                ],
                "p.poll": [
                    1626
                ],
                "subprocess.CalledProcessError": [
                    1628
                ],
                "p.args": [
                    1628
                ],
                "ELLIPSES": [
                    1636,
                    1638
                ],
                "length": [
                    1637,
                    1638
                ]
            },
            "filtered_variables_in_file": {
                "compat_subprocess_get_DEVNULL": [
                    90,
                    92
                ],
                "DEVNULL": [
                    90
                ],
                "os.path.devnull": [
                    92
                ],
                "os.path": [
                    480,
                    482,
                    1379,
                    245,
                    246,
                    92
                ],
                "os": [
                    480,
                    482,
                    1379,
                    265,
                    268,
                    1261,
                    245,
                    246,
                    471,
                    92
                ],
                "string": [
                    129,
                    98,
                    99,
                    100,
                    130,
                    102,
                    109,
                    125
                ],
                "res": [
                    1426,
                    534,
                    536,
                    537,
                    538,
                    1439,
                    1449,
                    1465,
                    1467,
                    1468,
                    1597,
                    1603,
                    1604,
                    1368,
                    1370,
                    1372,
                    1374,
                    1375,
                    992,
                    993,
                    991,
                    995,
                    100,
                    101,
                    996,
                    109,
                    110,
                    1405
                ],
                "string.split": [
                    100
                ],
                "encoding": [
                    129,
                    1179,
                    159,
                    163,
                    172,
                    1076,
                    1209,
                    1210,
                    1211,
                    1082,
                    1085,
                    1215,
                    590,
                    592,
                    593,
                    594,
                    595,
                    103,
                    104,
                    125
                ],
                "errors": [
                    129,
                    163,
                    105,
                    106,
                    172,
                    125,
                    159
                ],
                "pct_sequence": [
                    129,
                    108,
                    114,
                    125,
                    126,
                    127
                ],
                "item": [
                    110,
                    112,
                    114,
                    115,
                    122
                ],
                "decode": [
                    114
                ],
                "rest": [
                    122,
                    115,
                    116,
                    125
                ],
                "pct_sequence.decode": [
                    129,
                    125
                ],
                "qs": [
                    171,
                    141,
                    142
                ],
                "_coerce_result": [
                    160,
                    164,
                    141
                ],
                "unicode": [
                    1481,
                    285,
                    141,
                    181
                ],
                "pairs": [
                    144,
                    171,
                    173,
                    142
                ],
                "s2": [
                    142
                ],
                "s1": [
                    142
                ],
                "qs.split": [
                    142
                ],
                "s1.split": [
                    142
                ],
                "r": [
                    165,
                    166,
                    143
                ],
                "name_value": [
                    144,
                    145,
                    147,
                    150
                ],
                "strict_parsing": [
                    145,
                    171,
                    149
                ],
                "nv": [
                    161,
                    147,
                    148,
                    153,
                    156,
                    157
                ],
                "name_value.split": [
                    147
                ],
                "keep_blank_values": [
                    152,
                    171,
                    156
                ],
                "nv.append": [
                    153
                ],
                "name": [
                    160,
                    418,
                    1283,
                    1379,
                    165,
                    1380,
                    173,
                    174,
                    175,
                    177,
                    436,
                    314,
                    315,
                    157,
                    158,
                    159
                ],
                "replace": [
                    161,
                    157
                ],
                "compat_urllib_parse_unquote": [
                    162,
                    158
                ],
                "value": [
                    161,
                    162,
                    163,
                    164,
                    165,
                    173,
                    1038,
                    175,
                    336,
                    177,
                    404,
                    1589,
                    1590,
                    1591,
                    1592,
                    1593,
                    1595
                ],
                "r.append": [
                    165
                ],
                "parsed_result": [
                    170,
                    174,
                    175,
                    177,
                    178
                ],
                "_parse_qsl": [
                    171
                ],
                "append": [
                    175
                ],
                "compat_str": [
                    1506,
                    995,
                    1559,
                    613,
                    1343,
                    1516,
                    1552,
                    1297,
                    1074,
                    564,
                    181,
                    599,
                    183,
                    1501,
                    575
                ],
                "compat_chr": [
                    545,
                    186,
                    555,
                    188
                ],
                "unichr": [
                    186
                ],
                "s.replace": [
                    199
                ],
                "s": [
                    520,
                    1547,
                    1051,
                    1053,
                    1055,
                    1056,
                    1312,
                    1313,
                    1059,
                    1314,
                    1318,
                    1319,
                    1064,
                    1320,
                    1067,
                    562,
                    1074,
                    564,
                    1077,
                    567,
                    1082,
                    1086,
                    575,
                    1089,
                    579,
                    1476,
                    199,
                    1481,
                    586,
                    1482,
                    1483,
                    1359,
                    1362,
                    595,
                    1365,
                    599,
                    603,
                    604,
                    1634,
                    1637,
                    1638,
                    1639,
                    233,
                    236,
                    237
                ],
                "c": [
                    296,
                    298,
                    299,
                    203,
                    204,
                    300,
                    302,
                    1099,
                    1051
                ],
                "compiled_regex_type": [
                    207
                ],
                "re.compile": [
                    321,
                    207
                ],
                "re": [
                    1290,
                    277,
                    278,
                    919,
                    547,
                    934,
                    1576,
                    566,
                    956,
                    1597,
                    448,
                    321,
                    449,
                    451,
                    1473,
                    1603,
                    1350,
                    207,
                    849,
                    1364,
                    481,
                    878
                ],
                "std_headers": [
                    209,
                    790
                ],
                "pref": [
                    224,
                    225,
                    227,
                    229
                ],
                "locale.getpreferredencoding": [
                    224
                ],
                "locale": [
                    224
                ],
                "encode": [
                    225,
                    1531
                ],
                "sys.version_info": [
                    578,
                    803,
                    231,
                    392,
                    1481,
                    1546,
                    1549,
                    274,
                    626,
                    308,
                    1557,
                    1081,
                    252
                ],
                "sys": [
                    392,
                    1546,
                    1549,
                    274,
                    1557,
                    672,
                    803,
                    681,
                    1073,
                    308,
                    1076,
                    1081,
                    1209,
                    578,
                    581,
                    1481,
                    592,
                    469,
                    471,
                    472,
                    1112,
                    231,
                    626,
                    252
                ],
                "s.encode": [
                    233,
                    1482,
                    1547,
                    595,
                    1082,
                    1086
                ],
                "preferredencoding": [
                    993,
                    611,
                    233,
                    590,
                    1560,
                    1082,
                    1085
                ],
                "args": [
                    260,
                    1508,
                    1503,
                    1387,
                    1201,
                    243,
                    1204,
                    631,
                    1624,
                    1561,
                    1531,
                    1212,
                    253,
                    255
                ],
                "os.path.basename": [
                    245
                ],
                "fn": [
                    265,
                    245,
                    246
                ],
                "os.path.dirname": [
                    246
                ],
                "args.update": [
                    255
                ],
                "tf": [
                    260,
                    263,
                    264,
                    265,
                    268
                ],
                "tempfile.NamedTemporaryFile": [
                    260
                ],
                "tempfile": [
                    260
                ],
                "json.dump": [
                    264
                ],
                "json": [
                    264,
                    1233,
                    1242
                ],
                "obj": [
                    264
                ],
                "os.rename": [
                    265
                ],
                "tf.name": [
                    265,
                    268
                ],
                "os.remove": [
                    268
                ],
                "re.match": [
                    547,
                    934,
                    1364,
                    277,
                    278,
                    919,
                    956
                ],
                "key": [
                    289,
                    1581,
                    1582,
                    1583,
                    1584,
                    1585,
                    1586,
                    1587,
                    277,
                    279,
                    1595
                ],
                "val": [
                    289,
                    278,
                    279
                ],
                "expr": [
                    280,
                    279
                ],
                "xpath": [
                    288,
                    311,
                    309,
                    279,
                    314,
                    285,
                    286
                ],
                "node.find": [
                    280,
                    311
                ],
                "node": [
                    280,
                    288,
                    311
                ],
                "xpath.encode": [
                    309,
                    286
                ],
                "f": [
                    288,
                    289,
                    290,
                    1153,
                    1154,
                    1156,
                    1160,
                    1161,
                    1163,
                    1170,
                    1173
                ],
                "node.findall": [
                    288
                ],
                "f.attrib.get": [
                    289
                ],
                "f.attrib": [
                    289
                ],
                "components": [
                    296,
                    298
                ],
                "c.split": [
                    296
                ],
                "path.split": [
                    296
                ],
                "path": [
                    296,
                    1324,
                    1325
                ],
                "replaced": [
                    304,
                    297,
                    300,
                    303
                ],
                "replaced.append": [
                    300,
                    303
                ],
                "ns": [
                    302,
                    303
                ],
                "tag": [
                    356,
                    423,
                    360,
                    361,
                    365,
                    302,
                    303
                ],
                "ns_map": [
                    303
                ],
                "join": [
                    1217,
                    390,
                    520,
                    304,
                    688,
                    1106,
                    347,
                    958
                ],
                "n": [
                    1537,
                    1550,
                    1551,
                    1552,
                    1553,
                    311,
                    312,
                    318
                ],
                "fatal": [
                    313
                ],
                "ExtractorError": [
                    315,
                    691,
                    678
                ],
                "n.text": [
                    1552,
                    1553,
                    318,
                    1551
                ],
                "compat_html_parser.locatestarttagend": [
                    321
                ],
                "compat_html_parser": [
                    321,
                    322,
                    439,
                    324,
                    396,
                    407,
                    346
                ],
                "re.VERBOSE": [
                    321
                ],
                "compat_html_parser.HTMLParser": [
                    396,
                    322,
                    324
                ],
                "compat_html_parser.HTMLParser.__init__": [
                    324
                ],
                "self": [
                    631,
                    634,
                    635,
                    636,
                    637,
                    639,
                    641,
                    645,
                    1179,
                    1180,
                    1183,
                    1185,
                    1187,
                    1189,
                    678,
                    680,
                    681,
                    682,
                    683,
                    1193,
                    1195,
                    686,
                    1198,
                    688,
                    1201,
                    1204,
                    705,
                    706,
                    725,
                    753,
                    754,
                    830,
                    834,
                    835,
                    324,
                    325,
                    328,
                    329,
                    330,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    341,
                    342,
                    345,
                    346,
                    347,
                    348,
                    349,
                    353,
                    354,
                    355,
                    356,
                    357,
                    358,
                    359,
                    360,
                    361,
                    364,
                    365,
                    366,
                    367,
                    368,
                    1396,
                    373,
                    374,
                    375,
                    1401,
                    1402,
                    380,
                    382,
                    1406,
                    384,
                    385,
                    386,
                    1407,
                    388,
                    389,
                    1408,
                    1412,
                    1415,
                    395,
                    396,
                    1420,
                    1432,
                    417,
                    418,
                    419,
                    420,
                    1444,
                    1445,
                    1446,
                    426,
                    427,
                    1450,
                    1452,
                    430,
                    1453,
                    1456,
                    967,
                    969,
                    971,
                    973,
                    974,
                    975,
                    984,
                    986
                ],
                "self.html": [
                    328,
                    384,
                    347,
                    325
                ],
                "html": [
                    448,
                    449,
                    451,
                    453,
                    454,
                    328,
                    329,
                    400,
                    438,
                    406,
                    447
                ],
                "self.feed": [
                    329
                ],
                "self.close": [
                    330
                ],
                "BaseHTMLParser": [
                    417,
                    411,
                    332,
                    342
                ],
                "self.attribute": [
                    355,
                    335
                ],
                "attribute": [
                    404,
                    335
                ],
                "self.value": [
                    336,
                    355
                ],
                "self.result": [
                    385,
                    386,
                    356,
                    388,
                    389,
                    420,
                    427,
                    366,
                    430,
                    368,
                    337,
                    375,
                    380,
                    382
                ],
                "self.started": [
                    353,
                    357,
                    359,
                    364,
                    367,
                    338,
                    345
                ],
                "self.depth": [
                    360,
                    361,
                    365,
                    366,
                    339
                ],
                "self.watch_startpos": [
                    374,
                    340,
                    373,
                    358
                ],
                "self.error_count": [
                    345,
                    348,
                    341
                ],
                "BaseHTMLParser.__init__": [
                    417,
                    342
                ],
                "compat_html_parser.HTMLParseError": [
                    439,
                    346,
                    407
                ],
                "message": [
                    346
                ],
                "self.getpos": [
                    368,
                    346,
                    347,
                    375
                ],
                "self.rawdata": [
                    347,
                    395
                ],
                "self.html.split": [
                    384,
                    347
                ],
                "self.goahead": [
                    349
                ],
                "attrs": [
                    352,
                    355,
                    425,
                    426,
                    427
                ],
                "self.find_startpos": [
                    354
                ],
                "self.result.append": [
                    368,
                    375
                ],
                "handle_entityref": [
                    376
                ],
                "handle_charref": [
                    376
                ],
                "handle_data": [
                    376
                ],
                "handle_comment": [
                    376
                ],
                "handle_decl": [
                    377
                ],
                "handle_pi": [
                    377
                ],
                "unknown_decl": [
                    377
                ],
                "find_startpos": [
                    377
                ],
                "lines": [
                    384,
                    385,
                    386,
                    387,
                    388,
                    389,
                    390
                ],
                "strip": [
                    390
                ],
                "AttrParser.parse_endtag": [
                    393
                ],
                "AttrParser": [
                    393,
                    404
                ],
                "startswith": [
                    395
                ],
                "i": [
                    394,
                    395,
                    396,
                    821,
                    823,
                    1051
                ],
                "compat_html_parser.HTMLParser.parse_endtag": [
                    396
                ],
                "get_element_by_attribute": [
                    400
                ],
                "parser": [
                    1545,
                    1546,
                    441,
                    436,
                    404,
                    438,
                    406,
                    409
                ],
                "parser.loads": [
                    438,
                    406
                ],
                "parser.get_result": [
                    409,
                    441
                ],
                "self.name": [
                    426,
                    418
                ],
                "self.content": [
                    419
                ],
                "attrs.get": [
                    426,
                    427
                ],
                "MetaParser": [
                    436
                ],
                "html.replace": [
                    447
                ],
                "re.sub": [
                    448,
                    449,
                    481,
                    451,
                    1473,
                    1603,
                    1350,
                    1576,
                    1290,
                    878,
                    566,
                    1597
                ],
                "unescapeHTML": [
                    453
                ],
                "html.strip": [
                    454
                ],
                "filename": [
                    482,
                    1379,
                    484,
                    488,
                    468,
                    472,
                    473,
                    474,
                    1179,
                    925
                ],
                "sys.platform": [
                    581,
                    1076,
                    1557,
                    469,
                    1112
                ],
                "msvcrt.setmode": [
                    471
                ],
                "msvcrt": [
                    1161,
                    1154,
                    471
                ],
                "sys.stdout.fileno": [
                    471
                ],
                "sys.stdout": [
                    472,
                    471
                ],
                "os.O_BINARY": [
                    471
                ],
                "sys.stdout.buffer": [
                    472
                ],
                "stream": [
                    488,
                    489,
                    784,
                    785,
                    473,
                    474
                ],
                "encodeFilename": [
                    488,
                    473,
                    604
                ],
                "open_mode": [
                    488,
                    473
                ],
                "err.errno": [
                    476
                ],
                "err": [
                    476,
                    1269
                ],
                "errno.EACCES": [
                    476
                ],
                "errno": [
                    476
                ],
                "alt_filename": [
                    480,
                    489,
                    484
                ],
                "os.path.join": [
                    480
                ],
                "path_part": [
                    481,
                    482
                ],
                "os.path.split": [
                    482
                ],
                "timestamp": [
                    497,
                    498,
                    494
                ],
                "timetuple": [
                    910,
                    911,
                    496,
                    497,
                    495,
                    912
                ],
                "email.utils.parsedate_tz": [
                    910,
                    495
                ],
                "email.utils": [
                    497,
                    910,
                    495
                ],
                "email": [
                    497,
                    910,
                    495
                ],
                "timestr": [
                    495
                ],
                "email.utils.mktime_tz": [
                    497
                ],
                "char": [
                    512,
                    514,
                    516,
                    518,
                    506,
                    508,
                    510
                ],
                "restricted": [
                    514,
                    516,
                    526,
                    509,
                    511
                ],
                "char.isspace": [
                    514
                ],
                "result": [
                    520,
                    522,
                    523,
                    524,
                    526,
                    527,
                    528,
                    529,
                    530
                ],
                "replace_insane": [
                    520
                ],
                "is_id": [
                    521
                ],
                "result.replace": [
                    523
                ],
                "result.strip": [
                    524
                ],
                "result.startswith": [
                    526
                ],
                "el": [
                    536,
                    537,
                    535
                ],
                "iterable": [
                    535
                ],
                "res.append": [
                    537
                ],
                "entity": [
                    544,
                    545,
                    547,
                    558
                ],
                "compat_html_entities.name2codepoint": [
                    544,
                    545
                ],
                "compat_html_entities": [
                    544,
                    545
                ],
                "mobj": [
                    547,
                    548,
                    549
                ],
                "numstr": [
                    552,
                    555,
                    549,
                    550
                ],
                "mobj.group": [
                    549
                ],
                "numstr.startswith": [
                    550
                ],
                "base": [
                    554,
                    555,
                    551
                ],
                "_htmlentity_transform": [
                    567
                ],
                "m.group": [
                    1374,
                    1368,
                    1475,
                    567,
                    1603,
                    1581,
                    1373,
                    1371,
                    1589,
                    855,
                    856,
                    1369,
                    1370,
                    859,
                    1372,
                    861,
                    862,
                    1595
                ],
                "m": [
                    1581,
                    1589,
                    567,
                    1595,
                    1475,
                    1603,
                    849,
                    852,
                    1364,
                    1366,
                    855,
                    1368,
                    856,
                    1369,
                    1371,
                    1370,
                    1373,
                    1374,
                    859,
                    1372,
                    861,
                    862
                ],
                "sys.getwindowsversion": [
                    581
                ],
                "for_subprocess": [
                    585
                ],
                "sys.getfilesystemencoding": [
                    592,
                    1209
                ],
                "s.decode": [
                    603
                ],
                "optval": [
                    608,
                    609,
                    610,
                    611,
                    613,
                    614
                ],
                "optval.decode": [
                    611
                ],
                "secs": [
                    617,
                    618,
                    619,
                    620,
                    622
                ],
                "httplib.HTTPSConnection": [
                    629,
                    631
                ],
                "httplib": [
                    629,
                    631
                ],
                "httplib.HTTPSConnection.__init__": [
                    631
                ],
                "kwargs": [
                    646,
                    631,
                    1623,
                    1546,
                    1547,
                    652,
                    663,
                    1624,
                    1561
                ],
                "sock": [
                    641,
                    634,
                    636,
                    639
                ],
                "socket.create_connection": [
                    634
                ],
                "socket": [
                    672,
                    634
                ],
                "self.host": [
                    634
                ],
                "self.port": [
                    634
                ],
                "self.timeout": [
                    634
                ],
                "self.sock": [
                    641,
                    636,
                    639
                ],
                "self._tunnel": [
                    637
                ],
                "ssl.wrap_socket": [
                    641,
                    639
                ],
                "ssl": [
                    640,
                    641,
                    647,
                    648,
                    649,
                    651,
                    654,
                    655,
                    657,
                    639
                ],
                "self.key_file": [
                    641,
                    639
                ],
                "self.cert_file": [
                    641,
                    639
                ],
                "ssl.PROTOCOL_TLSv1": [
                    639
                ],
                "ssl.SSLError": [
                    640
                ],
                "ssl.PROTOCOL_SSLv23": [
                    641,
                    654
                ],
                "compat_urllib_request.HTTPSHandler": [
                    643,
                    652,
                    663
                ],
                "compat_urllib_request": [
                    643,
                    652,
                    783,
                    784,
                    785,
                    1328,
                    756,
                    663
                ],
                "self.do_open": [
                    645
                ],
                "HTTPSConnectionV3": [
                    645
                ],
                "req": [
                    800,
                    801,
                    803,
                    645,
                    805,
                    806,
                    808,
                    791,
                    792,
                    793,
                    794,
                    795,
                    796,
                    797,
                    798,
                    799
                ],
                "HTTPSHandlerV3": [
                    646
                ],
                "context": [
                    648,
                    649,
                    651,
                    652,
                    654,
                    655,
                    658,
                    660,
                    663
                ],
                "ssl.create_default_context": [
                    648
                ],
                "ssl.Purpose.CLIENT_AUTH": [
                    648
                ],
                "ssl.Purpose": [
                    648
                ],
                "context.options": [
                    649
                ],
                "ssl.OP_NO_SSLv3": [
                    649
                ],
                "opts_no_check_certificate": [
                    656,
                    650
                ],
                "context.verify_mode": [
                    651,
                    655
                ],
                "ssl.CERT_NONE": [
                    651,
                    655
                ],
                "ssl.SSLContext": [
                    654
                ],
                "ssl.CERT_REQUIRED": [
                    657
                ],
                "context.set_default_verify_paths": [
                    658
                ],
                "context.load_default_certs": [
                    660
                ],
                "sys.exc_info": [
                    672,
                    681
                ],
                "compat_urllib_error.URLError": [
                    672
                ],
                "compat_urllib_error": [
                    672
                ],
                "socket.timeout": [
                    672
                ],
                "UnavailableVideoError": [
                    672
                ],
                "expected": [
                    673,
                    754,
                    676,
                    750
                ],
                "video_id": [
                    674,
                    675,
                    683
                ],
                "msg": [
                    705,
                    675,
                    677,
                    678,
                    725
                ],
                "__init__": [
                    705,
                    678
                ],
                "self.traceback": [
                    680,
                    686,
                    688
                ],
                "tb": [
                    680
                ],
                "self.exc_info": [
                    681,
                    706
                ],
                "self.cause": [
                    682
                ],
                "cause": [
                    682
                ],
                "self.video_id": [
                    683
                ],
                "traceback.format_tb": [
                    688
                ],
                "traceback": [
                    688
                ],
                "DownloadError": [
                    705
                ],
                "exc_info": [
                    706
                ],
                "self.msg": [
                    725
                ],
                "downloaded": [
                    753,
                    749
                ],
                "self.downloaded": [
                    753
                ],
                "self.expected": [
                    754
                ],
                "compat_urllib_request.HTTPHandler": [
                    756
                ],
                "zlib.decompress": [
                    777,
                    779
                ],
                "zlib": [
                    777,
                    778,
                    779
                ],
                "data": [
                    777,
                    779,
                    1233,
                    1242,
                    1243
                ],
                "zlib.MAX_WBITS": [
                    777
                ],
                "zlib.error": [
                    778
                ],
                "compat_urllib_request.addinfourl": [
                    784,
                    785,
                    783
                ],
                "headers": [
                    784,
                    785
                ],
                "url": [
                    1527,
                    1324,
                    1516,
                    1517,
                    1519,
                    784,
                    785,
                    1234,
                    1488,
                    916,
                    1520,
                    918,
                    1521,
                    1240,
                    1522,
                    1524,
                    1243
                ],
                "code": [
                    784,
                    786,
                    1576,
                    1602
                ],
                "ret": [
                    1058,
                    1060,
                    785,
                    786,
                    787,
                    1626,
                    1627,
                    1628
                ],
                "ret.code": [
                    786
                ],
                "h": [
                    1059,
                    791,
                    1046,
                    790,
                    792,
                    1023
                ],
                "v": [
                    1336,
                    1355,
                    790,
                    1335,
                    792,
                    1337,
                    1338,
                    1339,
                    1343
                ],
                "std_headers.items": [
                    790
                ],
                "req.headers": [
                    800,
                    801,
                    791,
                    793,
                    794,
                    795,
                    796,
                    797,
                    798,
                    799
                ],
                "req.add_header": [
                    792
                ],
                "req.get_full_url": [
                    803
                ],
                "req._Request__original": [
                    805
                ],
                "req._Request__original.partition": [
                    805
                ],
                "req._Request__r_type": [
                    806
                ],
                "req._Request__r_type.partition": [
                    806
                ],
                "old_resp": [
                    835,
                    836,
                    811,
                    830,
                    831
                ],
                "resp": [
                    833,
                    834,
                    835,
                    836,
                    837,
                    811,
                    813,
                    814,
                    830,
                    831
                ],
                "resp.headers.get": [
                    833,
                    813
                ],
                "resp.headers": [
                    833,
                    813
                ],
                "content": [
                    823,
                    814,
                    815
                ],
                "resp.read": [
                    834,
                    814
                ],
                "gz": [
                    834,
                    835,
                    815,
                    817,
                    823,
                    824
                ],
                "gzip.GzipFile": [
                    823,
                    815
                ],
                "gzip": [
                    823,
                    815
                ],
                "io.BytesIO": [
                    834,
                    815,
                    817,
                    823,
                    824
                ],
                "io": [
                    834,
                    815,
                    817,
                    823,
                    824,
                    1179
                ],
                "uncompressed": [
                    824,
                    817,
                    830
                ],
                "gz.read": [
                    824,
                    817
                ],
                "original_ioerror": [
                    829
                ],
                "self.addinfourl_wrapper": [
                    835,
                    830
                ],
                "old_resp.headers": [
                    835,
                    830
                ],
                "old_resp.url": [
                    835,
                    830
                ],
                "old_resp.code": [
                    835,
                    830
                ],
                "resp.msg": [
                    836,
                    831
                ],
                "old_resp.msg": [
                    836,
                    831
                ],
                "self.deflate": [
                    834
                ],
                "https_request": [
                    839
                ],
                "http_request": [
                    839
                ],
                "https_response": [
                    840
                ],
                "http_response": [
                    840
                ],
                "date_str": [
                    864,
                    960,
                    932,
                    934,
                    871,
                    906,
                    876,
                    846,
                    878,
                    910,
                    951,
                    851,
                    855,
                    956
                ],
                "re.search": [
                    849
                ],
                "timezone": [
                    864,
                    857,
                    860,
                    853
                ],
                "datetime.timedelta": [
                    857,
                    860,
                    853,
                    949
                ],
                "datetime": [
                    864,
                    931,
                    969,
                    906,
                    973,
                    912,
                    853,
                    949,
                    951,
                    982,
                    857,
                    860
                ],
                "sign": [
                    936,
                    938,
                    859,
                    861,
                    862
                ],
                "date_format": [
                    864,
                    863
                ],
                "delimiter": [
                    863
                ],
                "dt": [
                    864,
                    865
                ],
                "datetime.datetime.strptime": [
                    864,
                    906,
                    951
                ],
                "datetime.datetime": [
                    864,
                    969,
                    906,
                    973,
                    912,
                    951
                ],
                "calendar.timegm": [
                    865
                ],
                "calendar": [
                    865
                ],
                "dt.timetuple": [
                    865
                ],
                "upload_date": [
                    874,
                    906,
                    909,
                    912,
                    913
                ],
                "date_str.replace": [
                    876
                ],
                "format_expressions": [
                    904,
                    879
                ],
                "expression": [
                    904,
                    906
                ],
                "strftime": [
                    912,
                    906
                ],
                "default_ext": [
                    922,
                    917
                ],
                "guess": [
                    920,
                    918,
                    919
                ],
                "rpartition": [
                    918
                ],
                "url.partition": [
                    918
                ],
                "filename.rsplit": [
                    925
                ],
                "sub_lang": [
                    925
                ],
                "sub_format": [
                    925
                ],
                "today": [
                    931,
                    933,
                    950
                ],
                "datetime.date.today": [
                    931
                ],
                "datetime.date": [
                    931,
                    982
                ],
                "match": [
                    934,
                    935,
                    936,
                    937,
                    940,
                    956,
                    957,
                    958
                ],
                "match.group": [
                    936,
                    937,
                    940
                ],
                "time": [
                    937,
                    939,
                    944,
                    947,
                    949
                ],
                "unit": [
                    940,
                    942,
                    943,
                    945,
                    946,
                    948,
                    949
                ],
                "delta": [
                    949,
                    950
                ],
                "date": [
                    984,
                    983,
                    982,
                    951
                ],
                "match.groups": [
                    958
                ],
                "start": [
                    1312,
                    1313,
                    1409,
                    966,
                    967,
                    1416,
                    1415,
                    1450,
                    1453,
                    1454,
                    1406
                ],
                "self.start": [
                    967,
                    969,
                    974,
                    984,
                    986
                ],
                "date_from_str": [
                    983,
                    971,
                    967
                ],
                "datetime.datetime.min.date": [
                    969
                ],
                "datetime.datetime.min": [
                    969
                ],
                "end": [
                    1318,
                    1319,
                    970,
                    971,
                    1420,
                    1421,
                    1452,
                    1454,
                    1437
                ],
                "self.end": [
                    971,
                    973,
                    974,
                    984,
                    986
                ],
                "datetime.datetime.max.date": [
                    973
                ],
                "datetime.datetime.max": [
                    973
                ],
                "cls": [
                    979
                ],
                "day": [
                    979
                ],
                "self.start.isoformat": [
                    986
                ],
                "self.end.isoformat": [
                    986
                ],
                "platform.platform": [
                    991
                ],
                "platform": [
                    991
                ],
                "res.decode": [
                    993
                ],
                "WIN_OUTPUT_IDS": [
                    1017,
                    1023,
                    1007
                ],
                "fileno": [
                    1017,
                    1013,
                    1023
                ],
                "out.fileno": [
                    1013
                ],
                "out": [
                    1089,
                    1090,
                    1072,
                    1073,
                    1076,
                    1077,
                    1013,
                    1269,
                    1080,
                    1270,
                    1083,
                    1084,
                    1085,
                    1087
                ],
                "GetStdHandle": [
                    1020,
                    1023
                ],
                "ctypes.WINFUNCTYPE": [
                    1025,
                    1034,
                    1020,
                    1031
                ],
                "ctypes": [
                    1025,
                    1026,
                    1027,
                    1028,
                    1029,
                    1153,
                    1031,
                    1157,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    1164,
                    1299,
                    1044,
                    1303,
                    1059,
                    1116,
                    1118,
                    1119,
                    1120,
                    1121,
                    1122,
                    1125,
                    1128,
                    1129,
                    1130,
                    1131,
                    1132,
                    1133,
                    1135,
                    1138,
                    1139,
                    1140,
                    1141,
                    1142,
                    1144,
                    1020,
                    1021,
                    1022
                ],
                "ctypes.wintypes.HANDLE": [
                    1026,
                    1122,
                    1128,
                    1035,
                    1138,
                    1021
                ],
                "ctypes.wintypes": [
                    1026,
                    1027,
                    1028,
                    1029,
                    1031,
                    1035,
                    1036,
                    1038,
                    1044,
                    1118,
                    1119,
                    1120,
                    1121,
                    1122,
                    1128,
                    1129,
                    1130,
                    1131,
                    1132,
                    1135,
                    1138,
                    1139,
                    1140,
                    1141,
                    1144,
                    1021
                ],
                "ctypes.wintypes.DWORD": [
                    1120,
                    1121,
                    1027,
                    1029,
                    1031,
                    1129,
                    1130,
                    1131,
                    1036,
                    1132,
                    1038,
                    1139,
                    1044,
                    1140,
                    1141,
                    1021
                ],
                "ctypes.windll.kernel32": [
                    1028,
                    1125,
                    1031,
                    1037,
                    1022
                ],
                "ctypes.windll": [
                    1028,
                    1125,
                    1031,
                    1037,
                    1022
                ],
                "WriteConsoleW": [
                    1025,
                    1058
                ],
                "ctypes.wintypes.BOOL": [
                    1144,
                    1026,
                    1035,
                    1135
                ],
                "ctypes.wintypes.LPWSTR": [
                    1026
                ],
                "ctypes.POINTER": [
                    1027,
                    1036,
                    1133,
                    1142
                ],
                "ctypes.wintypes.LPVOID": [
                    1028,
                    1118,
                    1119
                ],
                "written": [
                    1059,
                    1029,
                    1063,
                    1066,
                    1067
                ],
                "GetFileType": [
                    1043,
                    1031
                ],
                "FILE_TYPE_CHAR": [
                    1032,
                    1043
                ],
                "FILE_TYPE_REMOTE": [
                    1033,
                    1043
                ],
                "GetConsoleMode": [
                    1034,
                    1044
                ],
                "INVALID_HANDLE_VALUE": [
                    1041,
                    1038
                ],
                "handle": [
                    1154,
                    1155,
                    1161,
                    1162,
                    1041,
                    1043,
                    1044
                ],
                "ctypes.byref": [
                    1059,
                    1044
                ],
                "not_a_console": [
                    1046
                ],
                "count": [
                    1056,
                    1059,
                    1062
                ],
                "next_nonbmp_pos": [
                    1056
                ],
                "written.value": [
                    1066,
                    1067,
                    1063
                ],
                "sys.stderr": [
                    1073
                ],
                "_windows_write_string": [
                    1077
                ],
                "byt": [
                    1082,
                    1083,
                    1086,
                    1087
                ],
                "out.write": [
                    1089,
                    1083
                ],
                "enc": [
                    1085,
                    1086
                ],
                "out.buffer.write": [
                    1087
                ],
                "out.buffer": [
                    1087
                ],
                "out.flush": [
                    1090
                ],
                "bs": [
                    1096,
                    1097,
                    1099,
                    1094
                ],
                "xs": [
                    1106,
                    1108,
                    1103
                ],
                "x": [
                    1106
                ],
                "ctypes.Structure": [
                    1116
                ],
                "_fields_": [
                    1117
                ],
                "kernel32": [
                    1136,
                    1125,
                    1126
                ],
                "LockFileEx": [
                    1155,
                    1135,
                    1126,
                    1127
                ],
                "kernel32.LockFileEx": [
                    1126
                ],
                "LockFileEx.argtypes": [
                    1127
                ],
                "OVERLAPPED": [
                    1149,
                    1133,
                    1142
                ],
                "LockFileEx.restype": [
                    1135
                ],
                "UnlockFileEx": [
                    1136,
                    1137,
                    1162,
                    1144
                ],
                "kernel32.UnlockFileEx": [
                    1136
                ],
                "UnlockFileEx.argtypes": [
                    1137
                ],
                "UnlockFileEx.restype": [
                    1144
                ],
                "whole_low": [
                    1145,
                    1163,
                    1156
                ],
                "whole_high": [
                    1146,
                    1163,
                    1156
                ],
                "overlapped": [
                    1152,
                    1153,
                    1149,
                    1150,
                    1151
                ],
                "overlapped.Offset": [
                    1150
                ],
                "overlapped.OffsetHigh": [
                    1151
                ],
                "overlapped.hEvent": [
                    1152
                ],
                "f._lock_file_overlapped_p": [
                    1160,
                    1153,
                    1163,
                    1156
                ],
                "ctypes.pointer": [
                    1153
                ],
                "msvcrt.get_osfhandle": [
                    1161,
                    1154
                ],
                "f.fileno": [
                    1161,
                    1154
                ],
                "exclusive": [
                    1185,
                    1170,
                    1155,
                    1183
                ],
                "ctypes.FormatError": [
                    1164,
                    1157
                ],
                "fcntl.flock": [
                    1170,
                    1173
                ],
                "fcntl": [
                    1170,
                    1173
                ],
                "fcntl.LOCK_EX": [
                    1170
                ],
                "fcntl.LOCK_SH": [
                    1170
                ],
                "fcntl.LOCK_UN": [
                    1173
                ],
                "mode": [
                    1178,
                    1179,
                    1180
                ],
                "self.f": [
                    1185,
                    1187,
                    1193,
                    1195,
                    1198,
                    1201,
                    1204,
                    1179
                ],
                "io.open": [
                    1179
                ],
                "self.mode": [
                    1180,
                    1183
                ],
                "_lock_file": [
                    1185
                ],
                "self.f.close": [
                    1187,
                    1195
                ],
                "_unlock_file": [
                    1193
                ],
                "self.f.write": [
                    1201
                ],
                "self.f.read": [
                    1204
                ],
                "quoted_args": [
                    1208,
                    1217,
                    1216
                ],
                "a": [
                    1216,
                    1212,
                    1213,
                    1215
                ],
                "a.decode": [
                    1215
                ],
                "quoted_args.append": [
                    1216
                ],
                "pipes.quote": [
                    1216
                ],
                "pipes": [
                    1216
                ],
                "e": [
                    1224,
                    1225,
                    1223
                ],
                "seq": [
                    1223
                ],
                "pred": [
                    1225
                ],
                "sdata": [
                    1232,
                    1241,
                    1234,
                    1240
                ],
                "compat_urllib_parse.urlencode": [
                    1232,
                    1531
                ],
                "compat_urllib_parse": [
                    1232,
                    1483,
                    1531
                ],
                "json.dumps": [
                    1233
                ],
                "smug_url": [
                    1240,
                    1238,
                    1239
                ],
                "default": [
                    1355,
                    1339,
                    1343,
                    1239
                ],
                "_": [
                    1240,
                    1625
                ],
                "smug_url.rpartition": [
                    1240
                ],
                "jsond": [
                    1241,
                    1242
                ],
                "compat_parse_qs": [
                    1241
                ],
                "json.loads": [
                    1242
                ],
                "exponent": [
                    1256,
                    1252,
                    1254,
                    1255
                ],
                "math.log": [
                    1254
                ],
                "math": [
                    1254
                ],
                "suffix": [
                    1257,
                    1255
                ],
                "converted": [
                    1256,
                    1257
                ],
                "columns": [
                    1261,
                    1262,
                    1263
                ],
                "os.environ.get": [
                    1261
                ],
                "os.environ": [
                    1261
                ],
                "sp": [
                    1266,
                    1269
                ],
                "subprocess.Popen": [
                    1624,
                    1266,
                    1387
                ],
                "subprocess": [
                    1387,
                    1266,
                    1268,
                    1620,
                    1624,
                    1628
                ],
                "subprocess.PIPE": [
                    1624,
                    1387,
                    1268
                ],
                "sp.communicate": [
                    1269
                ],
                "out.split": [
                    1270
                ],
                "ENGLISH_NAMES": [
                    1283,
                    1279
                ],
                "ENGLISH_NAMES.index": [
                    1283
                ],
                "xml_str": [
                    1293
                ],
                "title": [
                    1297,
                    1302
                ],
                "libc": [
                    1306,
                    1299
                ],
                "ctypes.cdll.LoadLibrary": [
                    1299
                ],
                "ctypes.cdll": [
                    1299
                ],
                "title_bytes": [
                    1304,
                    1302,
                    1303
                ],
                "title.encode": [
                    1302
                ],
                "buf": [
                    1304,
                    1306,
                    1303
                ],
                "ctypes.create_string_buffer": [
                    1303
                ],
                "buf.value": [
                    1304
                ],
                "libc.prctl": [
                    1306
                ],
                "s.startswith": [
                    1312
                ],
                "s.endswith": [
                    1318
                ],
                "compat_urlparse.urlparse": [
                    1324
                ],
                "compat_urlparse": [
                    1324
                ],
                "split": [
                    1325
                ],
                "path.strip": [
                    1325
                ],
                "compat_urllib_request.Request": [
                    1328
                ],
                "get_attr": [
                    1336,
                    1334
                ],
                "invscale": [
                    1355,
                    1339
                ],
                "scale": [
                    1355,
                    1339
                ],
                "int_str": [
                    1348,
                    1350,
                    1351
                ],
                "s.strip": [
                    1362
                ],
                "real_ext": [
                    1379,
                    1380
                ],
                "os.path.splitext": [
                    1379
                ],
                "ext": [
                    1380
                ],
                "communicate": [
                    1387
                ],
                "exe": [
                    1387,
                    1390
                ],
                "self.getslice": [
                    1396
                ],
                "PagedList": [
                    1442,
                    1399
                ],
                "self._pagefunc": [
                    1456,
                    1401,
                    1444,
                    1412
                ],
                "pagefunc": [
                    1401,
                    1444
                ],
                "self._pagesize": [
                    1408,
                    1446,
                    1415,
                    1450,
                    1420,
                    1452,
                    1453,
                    1432,
                    1402,
                    1406,
                    1407
                ],
                "pagesize": [
                    1402,
                    1446
                ],
                "pagenum": [
                    1408,
                    1412,
                    1455,
                    1456,
                    1406,
                    1407
                ],
                "itertools.count": [
                    1406
                ],
                "itertools": [
                    1406
                ],
                "firstid": [
                    1416,
                    1421,
                    1407
                ],
                "nextfirstid": [
                    1408,
                    1409,
                    1416,
                    1421,
                    1437
                ],
                "page_results": [
                    1432,
                    1425,
                    1426,
                    1412
                ],
                "startv": [
                    1424,
                    1425,
                    1432,
                    1414
                ],
                "endv": [
                    1424,
                    1425,
                    1419
                ],
                "res.extend": [
                    1465,
                    1426,
                    1467
                ],
                "self._pagecount": [
                    1452,
                    1445
                ],
                "pagecount": [
                    1445
                ],
                "start_page": [
                    1450,
                    1453,
                    1455
                ],
                "end_page": [
                    1451,
                    1455
                ],
                "skip_elems": [
                    1457,
                    1458,
                    1459,
                    1453
                ],
                "only_more": [
                    1454,
                    1460,
                    1461,
                    1462,
                    1464
                ],
                "page": [
                    1456,
                    1458,
                    1461,
                    1462,
                    1464,
                    1465,
                    1467
                ],
                "unicode_escape": [
                    1472,
                    1475
                ],
                "codecs.getdecoder": [
                    1472
                ],
                "codecs": [
                    1472
                ],
                "compat_urllib_parse.quote": [
                    1483
                ],
                "url_parsed": [
                    1488,
                    1489,
                    1490,
                    1491,
                    1492,
                    1493
                ],
                "compat_urllib_parse_urlparse": [
                    1488
                ],
                "geturl": [
                    1489
                ],
                "url_parsed._replace": [
                    1489
                ],
                "escape_rfc3986": [
                    1490,
                    1491,
                    1492,
                    1493
                ],
                "url_parsed.path": [
                    1490
                ],
                "url_parsed.params": [
                    1491
                ],
                "url_parsed.query": [
                    1492
                ],
                "url_parsed.fragment": [
                    1493
                ],
                "struct.pack": [
                    1497,
                    1510,
                    1503
                ],
                "struct": [
                    1508,
                    1510,
                    1511,
                    1497,
                    1503
                ],
                "spec": [
                    1506,
                    1507,
                    1508,
                    1501,
                    1502,
                    1503
                ],
                "spec.encode": [
                    1507,
                    1502
                ],
                "struct.unpack": [
                    1508,
                    1511
                ],
                "struct_pack": [
                    1510
                ],
                "struct_unpack": [
                    1511
                ],
                "url.decode": [
                    1517
                ],
                "BOM_UTF8": [
                    1520,
                    1518,
                    1519
                ],
                "url.startswith": [
                    1522,
                    1519
                ],
                "url.strip": [
                    1521
                ],
                "contextlib.closing": [
                    1526
                ],
                "contextlib": [
                    1526
                ],
                "batch_fd": [
                    1526
                ],
                "fd": [
                    1526,
                    1527
                ],
                "fixup": [
                    1527
                ],
                "kargs": [
                    1531
                ],
                "etree_iter": [
                    1537,
                    1550,
                    1535
                ],
                "xml.etree.ElementTree.Element.iter": [
                    1535
                ],
                "xml.etree.ElementTree.Element": [
                    1535
                ],
                "xml.etree.ElementTree": [
                    1545,
                    1547,
                    1541,
                    1535
                ],
                "xml.etree": [
                    1545,
                    1547,
                    1541,
                    1535
                ],
                "xml": [
                    1545,
                    1547,
                    1541,
                    1535
                ],
                "n.findall": [
                    1537
                ],
                "xml.etree.ElementTree.TreeBuilder": [
                    1541
                ],
                "xml.etree.ElementTree.XMLParser": [
                    1545
                ],
                "TreeBuilder": [
                    1545
                ],
                "tree": [
                    1554,
                    1547,
                    1550
                ],
                "xml.etree.ElementTree.XML": [
                    1547
                ],
                "n.text.decode": [
                    1553
                ],
                "prompt": [
                    1560,
                    1561,
                    1559
                ],
                "prompt.encode": [
                    1560
                ],
                "getpass.getpass": [
                    1561,
                    1563
                ],
                "getpass": [
                    1561,
                    1563
                ],
                "compat_getpass": [
                    1563
                ],
                "US_RATINGS": [
                    1566
                ],
                "key.startswith": [
                    1586,
                    1582
                ],
                "key.endswith": [
                    1583
                ],
                "value.startswith": [
                    1590
                ],
                "value.endswith": [
                    1591
                ],
                "fix_kv": [
                    1602
                ],
                "quality_ids.index": [
                    1611
                ],
                "quality_ids": [
                    1611
                ],
                "qid": [
                    1611
                ],
                "q": [
                    1614
                ],
                "DEFAULT_OUTTMPL": [
                    1617
                ],
                "subprocess_check_output": [
                    1620
                ],
                "subprocess.check_output": [
                    1620
                ],
                "p": [
                    1624,
                    1625,
                    1626,
                    1628
                ],
                "output": [
                    1625,
                    1628,
                    1629
                ],
                "p.communicate": [
                    1625
                ],
                "p.poll": [
                    1626
                ],
                "subprocess.CalledProcessError": [
                    1628
                ],
                "p.args": [
                    1628
                ],
                "ELLIPSES": [
                    1636,
                    1638
                ],
                "length": [
                    1637,
                    1638
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs/repos/youtube-dl_34/test/test_utils.py",
                "test_function": "test_js_to_json",
                "test_function_code": "    def test_js_to_json(self):\n        inp = '''{\n                'clip':{'provider':'pseudo'}\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n                \"clip\":{\"provider\":\"pseudo\"}\n        }''')\n        json.loads(js_to_json(inp))",
                "test_error": "AssertionError: '{\\n                \"clip\":{\\'provider\\':\\'pseudo\\'}\\n        }' != '{\\n                \"clip\":{\"provider\":\"pseudo\"}\\n        }'\n  {\n-                 \"clip\":{'provider':'pseudo'}\n?                         ^        ^ ^      ^\n+                 \"clip\":{\"provider\":\"pseudo\"}\n?                         ^        ^ ^      ^\n          }",
                "full_test_error": "self = <test.test_utils.TestUtil testMethod=test_js_to_json>\n\n    def test_js_to_json(self):\n        inp = '''{\n                'clip':{'provider':'pseudo'}\n        }'''\n        self.assertEqual(js_to_json(inp), '''{\n                \"clip\":{\"provider\":\"pseudo\"}\n>       }''')\nE       AssertionError: '{\\n                \"clip\":{\\'provider\\':\\'pseudo\\'}\\n        }' != '{\\n                \"clip\":{\"provider\":\"pseudo\"}\\n        }'\nE         {\nE       -                 \"clip\":{'provider':'pseudo'}\nE       ?                         ^        ^ ^      ^\nE       +                 \"clip\":{\"provider\":\"pseudo\"}\nE       ?                         ^        ^ ^      ^\nE                 }\n\ntest/test_utils.py:341: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}