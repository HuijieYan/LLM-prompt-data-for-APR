{
    "youtube-dl:31": {
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_31/youtube_dl/extractor/minhateca.py": {
            "buggy_functions": [
                {
                    "function_name": "_real_extract",
                    "function_code": "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n\n    token = self._html_search_regex(\n        r'<input name=\"__RequestVerificationToken\".*?value=\"([^\"]+)\"',\n        webpage, 'request token')\n    token_data = [\n        ('fileId', video_id),\n        ('__RequestVerificationToken', token),\n    ]\n    req = compat_urllib_request.Request(\n        'http://minhateca.com.br/action/License/Download',\n        data=compat_urllib_parse.urlencode(token_data))\n    req.add_header('Content-Type', 'application/x-www-form-urlencoded')\n    data = self._download_json(\n        req, video_id, note='Downloading metadata')\n\n    video_url = data['redirectUrl']\n    title_str = self._html_search_regex(\n        r'<h1.*?>(.*?)</h1>', webpage, 'title')\n    title, _, ext = title_str.rpartition('.')\n    filesize_approx = parse_filesize(self._html_search_regex(\n        r'<p class=\"fileSize\">(.*?)</p>',\n        webpage, 'file size approximation', fatal=False))\n    duration = int_or_none(self._html_search_regex(\n        r'(?s)<p class=\"fileLeng[ht][th]\">.*?([0-9]+)\\s*s',\n        webpage, 'duration', fatal=False))\n    view_count = int_or_none(self._html_search_regex(\n        r'<p class=\"downloadsCounter\">([0-9]+)</p>',\n        webpage, 'view count', fatal=False))\n\n    return {\n        'id': video_id,\n        'url': video_url,\n        'title': title,\n        'ext': ext,\n        'filesize_approx': filesize_approx,\n        'duration': duration,\n        'view_count': view_count,\n        'thumbnail': self._og_search_thumbnail(webpage),\n    }\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 30,
                    "end_line": 71,
                    "variables": {
                        "video_id": [
                            32,
                            38,
                            46,
                            31,
                            63
                        ],
                        "self._match_id": [
                            31
                        ],
                        "self": [
                            32,
                            34,
                            70,
                            45,
                            49,
                            52,
                            55,
                            58,
                            31
                        ],
                        "url": [
                            32,
                            31
                        ],
                        "webpage": [
                            32,
                            36,
                            70,
                            50,
                            54,
                            57,
                            60
                        ],
                        "self._download_webpage": [
                            32
                        ],
                        "token": [
                            34,
                            39
                        ],
                        "self._html_search_regex": [
                            34,
                            49,
                            52,
                            55,
                            58
                        ],
                        "token_data": [
                            43,
                            37
                        ],
                        "req": [
                            41,
                            44,
                            46
                        ],
                        "compat_urllib_request.Request": [
                            41
                        ],
                        "compat_urllib_request": [
                            41
                        ],
                        "compat_urllib_parse.urlencode": [
                            43
                        ],
                        "compat_urllib_parse": [
                            43
                        ],
                        "req.add_header": [
                            44
                        ],
                        "data": [
                            48,
                            45
                        ],
                        "self._download_json": [
                            45
                        ],
                        "video_url": [
                            48,
                            64
                        ],
                        "title_str": [
                            49,
                            51
                        ],
                        "title": [
                            65,
                            51
                        ],
                        "_": [
                            51
                        ],
                        "ext": [
                            66,
                            51
                        ],
                        "title_str.rpartition": [
                            51
                        ],
                        "filesize_approx": [
                            67,
                            52
                        ],
                        "parse_filesize": [
                            52
                        ],
                        "duration": [
                            68,
                            55
                        ],
                        "int_or_none": [
                            58,
                            55
                        ],
                        "view_count": [
                            58,
                            69
                        ],
                        "self._og_search_thumbnail": [
                            70
                        ]
                    },
                    "filtered_variables": {
                        "video_id": [
                            32,
                            38,
                            46,
                            31,
                            63
                        ],
                        "self._match_id": [
                            31
                        ],
                        "self": [
                            32,
                            34,
                            70,
                            45,
                            49,
                            52,
                            55,
                            58,
                            31
                        ],
                        "url": [
                            32,
                            31
                        ],
                        "webpage": [
                            32,
                            36,
                            70,
                            50,
                            54,
                            57,
                            60
                        ],
                        "self._download_webpage": [
                            32
                        ],
                        "token": [
                            34,
                            39
                        ],
                        "self._html_search_regex": [
                            34,
                            49,
                            52,
                            55,
                            58
                        ],
                        "token_data": [
                            43,
                            37
                        ],
                        "req": [
                            41,
                            44,
                            46
                        ],
                        "compat_urllib_request.Request": [
                            41
                        ],
                        "compat_urllib_request": [
                            41
                        ],
                        "compat_urllib_parse.urlencode": [
                            43
                        ],
                        "compat_urllib_parse": [
                            43
                        ],
                        "req.add_header": [
                            44
                        ],
                        "data": [
                            48,
                            45
                        ],
                        "self._download_json": [
                            45
                        ],
                        "video_url": [
                            48,
                            64
                        ],
                        "title_str": [
                            49,
                            51
                        ],
                        "title": [
                            65,
                            51
                        ],
                        "_": [
                            51
                        ],
                        "ext": [
                            66,
                            51
                        ],
                        "title_str.rpartition": [
                            51
                        ],
                        "filesize_approx": [
                            67,
                            52
                        ],
                        "parse_filesize": [
                            52
                        ],
                        "duration": [
                            68,
                            55
                        ],
                        "int_or_none": [
                            58,
                            55
                        ],
                        "view_count": [
                            58,
                            69
                        ],
                        "self._og_search_thumbnail": [
                            70
                        ]
                    },
                    "diff_line_number": 55,
                    "class_data": {
                        "signature": "class MinhatecaIE(InfoExtractor)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    token = self._html_search_regex('<input name=\"__RequestVerificationToken\".*?value=\"([^\"]+)\"', webpage, 'request token')\n    token_data = [('fileId', video_id), ('__RequestVerificationToken', token)]\n    req = compat_urllib_request.Request('http://minhateca.com.br/action/License/Download', data=compat_urllib_parse.urlencode(token_data))\n    req.add_header('Content-Type', 'application/x-www-form-urlencoded')\n    data = self._download_json(req, video_id, note='Downloading metadata')\n    video_url = data['redirectUrl']\n    title_str = self._html_search_regex('<h1.*?>(.*?)</h1>', webpage, 'title')\n    title, _, ext = title_str.rpartition('.')\n    filesize_approx = parse_filesize(self._html_search_regex('<p class=\"fileSize\">(.*?)</p>', webpage, 'file size approximation', fatal=False))\n    duration = int_or_none(self._html_search_regex('(?s)<p class=\"fileLeng[ht][th]\">.*?([0-9]+)\\\\s*s', webpage, 'duration', fatal=False))\n    view_count = int_or_none(self._html_search_regex('<p class=\"downloadsCounter\">([0-9]+)</p>', webpage, 'view count', fatal=False))\n    return {'id': video_id, 'url': video_url, 'title': title, 'ext': ext, 'filesize_approx': filesize_approx, 'duration': duration, 'view_count': view_count, 'thumbnail': self._og_search_thumbnail(webpage)}"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_VALID_URL",
                            "_TEST"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "_real_extract(self, url)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from ..utils import (\n    int_or_none,\n    parse_filesize,\n)",
                    "start_line": 9,
                    "end_line": 12
                }
            ],
            "inscope_functions": [
                "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n\n    token = self._html_search_regex(\n        r'<input name=\"__RequestVerificationToken\".*?value=\"([^\"]+)\"',\n        webpage, 'request token')\n    token_data = [\n        ('fileId', video_id),\n        ('__RequestVerificationToken', token),\n    ]\n    req = compat_urllib_request.Request(\n        'http://minhateca.com.br/action/License/Download',\n        data=compat_urllib_parse.urlencode(token_data))\n    req.add_header('Content-Type', 'application/x-www-form-urlencoded')\n    data = self._download_json(\n        req, video_id, note='Downloading metadata')\n\n    video_url = data['redirectUrl']\n    title_str = self._html_search_regex(\n        r'<h1.*?>(.*?)</h1>', webpage, 'title')\n    title, _, ext = title_str.rpartition('.')\n    filesize_approx = parse_filesize(self._html_search_regex(\n        r'<p class=\"fileSize\">(.*?)</p>',\n        webpage, 'file size approximation', fatal=False))\n    duration = int_or_none(self._html_search_regex(\n        r'(?s)<p class=\"fileLeng[ht][th]\">.*?([0-9]+)\\s*s',\n        webpage, 'duration', fatal=False))\n    view_count = int_or_none(self._html_search_regex(\n        r'<p class=\"downloadsCounter\">([0-9]+)</p>',\n        webpage, 'view count', fatal=False))\n\n    return {\n        'id': video_id,\n        'url': video_url,\n        'title': title,\n        'ext': ext,\n        'filesize_approx': filesize_approx,\n        'duration': duration,\n        'view_count': view_count,\n        'thumbnail': self._og_search_thumbnail(webpage),\n    }"
            ],
            "inscope_function_signatures": [
                "_real_extract(self, url)"
            ],
            "variables_in_file": {
                "InfoExtractor": [
                    15
                ],
                "_VALID_URL": [
                    16
                ],
                "_TEST": [
                    17
                ],
                "int": [
                    26
                ],
                "video_id": [
                    32,
                    38,
                    46,
                    31,
                    63
                ],
                "self._match_id": [
                    31
                ],
                "self": [
                    32,
                    34,
                    70,
                    45,
                    49,
                    52,
                    55,
                    58,
                    31
                ],
                "url": [
                    32,
                    31
                ],
                "webpage": [
                    32,
                    36,
                    70,
                    50,
                    54,
                    57,
                    60
                ],
                "self._download_webpage": [
                    32
                ],
                "token": [
                    34,
                    39
                ],
                "self._html_search_regex": [
                    34,
                    49,
                    52,
                    55,
                    58
                ],
                "token_data": [
                    43,
                    37
                ],
                "req": [
                    41,
                    44,
                    46
                ],
                "compat_urllib_request.Request": [
                    41
                ],
                "compat_urllib_request": [
                    41
                ],
                "compat_urllib_parse.urlencode": [
                    43
                ],
                "compat_urllib_parse": [
                    43
                ],
                "req.add_header": [
                    44
                ],
                "data": [
                    48,
                    45
                ],
                "self._download_json": [
                    45
                ],
                "video_url": [
                    48,
                    64
                ],
                "title_str": [
                    49,
                    51
                ],
                "title": [
                    65,
                    51
                ],
                "_": [
                    51
                ],
                "ext": [
                    66,
                    51
                ],
                "title_str.rpartition": [
                    51
                ],
                "filesize_approx": [
                    67,
                    52
                ],
                "parse_filesize": [
                    52
                ],
                "duration": [
                    68,
                    55
                ],
                "int_or_none": [
                    58,
                    55
                ],
                "view_count": [
                    58,
                    69
                ],
                "self._og_search_thumbnail": [
                    70
                ]
            },
            "filtered_variables_in_file": {
                "InfoExtractor": [
                    15
                ],
                "_VALID_URL": [
                    16
                ],
                "_TEST": [
                    17
                ],
                "video_id": [
                    32,
                    38,
                    46,
                    31,
                    63
                ],
                "self._match_id": [
                    31
                ],
                "self": [
                    32,
                    34,
                    70,
                    45,
                    49,
                    52,
                    55,
                    58,
                    31
                ],
                "url": [
                    32,
                    31
                ],
                "webpage": [
                    32,
                    36,
                    70,
                    50,
                    54,
                    57,
                    60
                ],
                "self._download_webpage": [
                    32
                ],
                "token": [
                    34,
                    39
                ],
                "self._html_search_regex": [
                    34,
                    49,
                    52,
                    55,
                    58
                ],
                "token_data": [
                    43,
                    37
                ],
                "req": [
                    41,
                    44,
                    46
                ],
                "compat_urllib_request.Request": [
                    41
                ],
                "compat_urllib_request": [
                    41
                ],
                "compat_urllib_parse.urlencode": [
                    43
                ],
                "compat_urllib_parse": [
                    43
                ],
                "req.add_header": [
                    44
                ],
                "data": [
                    48,
                    45
                ],
                "self._download_json": [
                    45
                ],
                "video_url": [
                    48,
                    64
                ],
                "title_str": [
                    49,
                    51
                ],
                "title": [
                    65,
                    51
                ],
                "_": [
                    51
                ],
                "ext": [
                    66,
                    51
                ],
                "title_str.rpartition": [
                    51
                ],
                "filesize_approx": [
                    67,
                    52
                ],
                "parse_filesize": [
                    52
                ],
                "duration": [
                    68,
                    55
                ],
                "int_or_none": [
                    58,
                    55
                ],
                "view_count": [
                    58,
                    69
                ],
                "self._og_search_thumbnail": [
                    70
                ]
            }
        },
        "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_31/youtube_dl/utils.py": {
            "buggy_functions": [
                {
                    "function_name": "parse_duration",
                    "function_code": "def parse_duration(s):\n    if s is None:\n        return None\n\n    s = s.strip()\n\n    m = re.match(\n        r'''(?ix)T?\n            (?:\n                (?:(?P<hours>[0-9]+)\\s*(?:[:h]|hours?)\\s*)?\n                (?P<mins>[0-9]+)\\s*(?:[:m]|mins?|minutes?)\\s*\n            )?\n            (?P<secs>[0-9]+)(?P<ms>\\.[0-9]+)?\\s*(?:s|secs?|seconds?)?$''', s)\n    if not m:\n        return None\n    res = int(m.group('secs'))\n    if m.group('mins'):\n        res += int(m.group('mins')) * 60\n        if m.group('hours'):\n            res += int(m.group('hours')) * 60 * 60\n    if m.group('ms'):\n        res += float(m.group('ms'))\n    return res\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1201,
                    "end_line": 1223,
                    "variables": {
                        "s": [
                            1202,
                            1205,
                            1213
                        ],
                        "s.strip": [
                            1205
                        ],
                        "m": [
                            1216,
                            1217,
                            1218,
                            1219,
                            1220,
                            1221,
                            1222,
                            1207,
                            1214
                        ],
                        "re.match": [
                            1207
                        ],
                        "re": [
                            1207
                        ],
                        "res": [
                            1216,
                            1218,
                            1220,
                            1222,
                            1223
                        ],
                        "int": [
                            1216,
                            1218,
                            1220
                        ],
                        "m.group": [
                            1216,
                            1217,
                            1218,
                            1219,
                            1220,
                            1221,
                            1222
                        ],
                        "float": [
                            1222
                        ]
                    },
                    "filtered_variables": {
                        "s": [
                            1202,
                            1205,
                            1213
                        ],
                        "s.strip": [
                            1205
                        ],
                        "m": [
                            1216,
                            1217,
                            1218,
                            1219,
                            1220,
                            1221,
                            1222,
                            1207,
                            1214
                        ],
                        "re.match": [
                            1207
                        ],
                        "re": [
                            1207
                        ],
                        "res": [
                            1216,
                            1218,
                            1220,
                            1222,
                            1223
                        ],
                        "m.group": [
                            1216,
                            1217,
                            1218,
                            1219,
                            1220,
                            1221,
                            1222
                        ]
                    },
                    "diff_line_number": 1208,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "s.strip": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "s.strip": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'1'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1027f5370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'1'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1027f5370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 1), match='1'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'1337:12'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'1337:12'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 7), match='1337:12'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "80232",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'9:12:43'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225070>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'9:12:43'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225070>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 7), match='9:12:43'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "33163",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'12:00'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042250b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'12:00'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042250b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 5), match='12:00'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "720",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'00:01:01'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042250f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'00:01:01'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042250f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 8), match='00:01:01'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "61",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'x:y'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225130>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'x:y'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225130>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'3h11m53s'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225170>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'3h11m53s'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225170>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 8), match='3h11m53s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "11513",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'3h 11m 53s'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042251b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'3h 11m 53s'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042251b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 10), match='3h 11m 53s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "11513",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'3 hours 11 minutes 53 seconds'",
                                    "variable_type": "str",
                                    "variable_shape": "29"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104223580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'3 hours 11 minutes 53 seconds'",
                                    "variable_type": "str",
                                    "variable_shape": "29"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104223580>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 29), match='3 hours 11 minutes 53 seconds'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "11513",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'3 hours 11 mins 53 secs'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042235d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'3 hours 11 mins 53 secs'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042235d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 23), match='3 hours 11 mins 53 secs'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "11513",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'62m45s'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042251f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'62m45s'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042251f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 6), match='62m45s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "3765",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'6m59s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'6m59s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225230>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 5), match='6m59s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "419",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'49s'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225270>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'49s'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225270>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 3), match='49s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "49",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'0h0m0s'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042252b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'0h0m0s'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042252b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 6), match='0h0m0s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'0m0s'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042252f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'0m0s'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042252f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 4), match='0m0s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'0s'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'0s'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225330>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 2), match='0s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'01:02:03.05'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'01:02:03.05'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 11), match='01:02:03.05'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "3723.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'T30M38S'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042253b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'T30M38S'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042253b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 7), match='T30M38S'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "1838",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'5 s'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042253f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'5 s'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x1042253f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 3), match='5 s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x10482df50>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'3 min'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225430>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'3 min'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x104225430>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "s.strip": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "s.strip": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'1'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x10142a430>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'1'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x10142a430>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 1), match='1'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103426370>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'1337:12'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ab70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'1337:12'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ab70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 7), match='1337:12'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "80232",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103426440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'9:12:43'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4abb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'9:12:43'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4abb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 7), match='9:12:43'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "33163",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1034265e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'12:00'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4abf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'12:00'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4abf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 5), match='12:00'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "720",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1034265e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'00:01:01'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ac30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'00:01:01'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ac30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 8), match='00:01:01'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "61",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1034265e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'x:y'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ac70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'x:y'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ac70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'3h11m53s'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4acb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'3h11m53s'",
                                    "variable_type": "str",
                                    "variable_shape": "8"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4acb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 8), match='3h11m53s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "11513",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1034265e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'3h 11m 53s'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4acf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'3h 11m 53s'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4acf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 10), match='3h 11m 53s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "11513",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103426850>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'3 hours 11 minutes 53 seconds'",
                                    "variable_type": "str",
                                    "variable_shape": "29"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4b6c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'3 hours 11 minutes 53 seconds'",
                                    "variable_type": "str",
                                    "variable_shape": "29"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4b6c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 29), match='3 hours 11 minutes 53 seconds'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "11513",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1034269f0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'3 hours 11 mins 53 secs'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4b710>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'3 hours 11 mins 53 secs'",
                                    "variable_type": "str",
                                    "variable_shape": "23"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4b710>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 23), match='3 hours 11 mins 53 secs'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "11513",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103426b90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'62m45s'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ad30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'62m45s'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ad30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 6), match='62m45s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "3765",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103426d30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'6m59s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ad70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'6m59s'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ad70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 5), match='6m59s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "419",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103426ed0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'49s'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4adb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'49s'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4adb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 3), match='49s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "49",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103477100>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'0h0m0s'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4adf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'0h0m0s'",
                                    "variable_type": "str",
                                    "variable_shape": "6"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4adf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 6), match='0h0m0s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x1034772a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'0m0s'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ae30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'0m0s'",
                                    "variable_type": "str",
                                    "variable_shape": "4"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ae30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 4), match='0m0s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103477440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'0s'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ae70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'0s'",
                                    "variable_type": "str",
                                    "variable_shape": "2"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4ae70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 2), match='0s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103477440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'01:02:03.05'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4aeb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'01:02:03.05'",
                                    "variable_type": "str",
                                    "variable_shape": "11"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4aeb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 11), match='01:02:03.05'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "3723.05",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103477440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'T30M38S'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4aef0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'T30M38S'",
                                    "variable_type": "str",
                                    "variable_shape": "7"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4aef0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 7), match='T30M38S'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "1838",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103477440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'5 s'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4af30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'5 s'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4af30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 3), match='5 s'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103477440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'3 min'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4af70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'3 min'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4af70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 5), match='3 min'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103477440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "s": {
                                    "variable_value": "'2.5 hours'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4afb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "s": {
                                    "variable_value": "'2.5 hours'",
                                    "variable_type": "str",
                                    "variable_shape": "9"
                                },
                                "s.strip": {
                                    "variable_value": "<built-in method strip of str object at 0x102e4afb0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": "<re.Match object; span=(0, 9), match='2.5 hours'>",
                                    "variable_type": "Match",
                                    "variable_shape": null
                                },
                                "re.match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "re": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "res": {
                                    "variable_value": "0",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "m.group": {
                                    "variable_value": "<built-in method group of re.Match object at 0x103477440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "float_or_none": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def preferredencoding():\n    \"\"\"Get preferred encoding.\n\n    Returns the best encoding scheme for the system, based on\n    locale.getpreferredencoding() and some further tweaks.\n    \"\"\"\n    try:\n        pref = locale.getpreferredencoding()\n        'TEST'.encode(pref)\n    except:\n        pref = 'UTF-8'\n\n    return pref",
                "def write_json_file(obj, fn):\n    \"\"\" Encode obj as JSON and write it to fn, atomically if possible \"\"\"\n\n    fn = encodeFilename(fn)\n    if sys.version_info < (3, 0) and sys.platform != 'win32':\n        encoding = get_filesystem_encoding()\n        # os.path.basename returns a bytes object, but NamedTemporaryFile\n        # will fail if the filename contains non ascii characters unless we\n        # use a unicode object\n        path_basename = lambda f: os.path.basename(fn).decode(encoding)\n        # the same for os.path.dirname\n        path_dirname = lambda f: os.path.dirname(fn).decode(encoding)\n    else:\n        path_basename = os.path.basename\n        path_dirname = os.path.dirname\n\n    args = {\n        'suffix': '.tmp',\n        'prefix': path_basename(fn) + '.',\n        'dir': path_dirname(fn),\n        'delete': False,\n    }\n\n    # In Python 2.x, json.dump expects a bytestream.\n    # In Python 3.x, it writes to a character stream\n    if sys.version_info < (3, 0):\n        args['mode'] = 'wb'\n    else:\n        args.update({\n            'mode': 'w',\n            'encoding': 'utf-8',\n        })\n\n    tf = tempfile.NamedTemporaryFile(**args)\n\n    try:\n        with tf:\n            json.dump(obj, tf)\n        if sys.platform == 'win32':\n            # Need to remove existing file on Windows, else os.rename raises\n            # WindowsError or FileExistsError.\n            try:\n                os.unlink(fn)\n            except OSError:\n                pass\n        os.rename(tf.name, fn)\n    except:\n        try:\n            os.remove(tf.name)\n        except OSError:\n            pass\n        raise",
                "def xpath_with_ns(path, ns_map):\n    components = [c.split(':') for c in path.split('/')]\n    replaced = []\n    for c in components:\n        if len(c) == 1:\n            replaced.append(c[0])\n        else:\n            ns, tag = c\n            replaced.append('{%s}%s' % (ns_map[ns], tag))\n    return '/'.join(replaced)",
                "def xpath_text(node, xpath, name=None, fatal=False):\n    if sys.version_info < (2, 7):  # Crazy 2.6\n        xpath = xpath.encode('ascii')\n\n    n = node.find(xpath)\n    if n is None:\n        if fatal:\n            name = xpath if name is None else name\n            raise ExtractorError('Could not find XML element %s' % name)\n        else:\n            return None\n    return n.text",
                "def get_element_by_id(id, html):\n    \"\"\"Return the content of the tag with the specified ID in the passed HTML document\"\"\"\n    return get_element_by_attribute(\"id\", id, html)",
                "def get_element_by_attribute(attribute, value, html):\n    \"\"\"Return the content of the tag with the specified attribute in the passed HTML document\"\"\"\n\n    m = re.search(r'''(?xs)\n        <([a-zA-Z0-9:._-]+)\n         (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]+|=\"[^\"]+\"|='[^']+'))*?\n         \\s+%s=['\"]?%s['\"]?\n         (?:\\s+[a-zA-Z0-9:._-]+(?:=[a-zA-Z0-9:._-]+|=\"[^\"]+\"|='[^']+'))*?\n        \\s*>\n        (?P<content>.*?)\n        </\\1>\n    ''' % (re.escape(attribute), re.escape(value)), html)\n\n    if not m:\n        return None\n    res = m.group('content')\n\n    if res.startswith('\"') or res.startswith(\"'\"):\n        res = res[1:-1]\n\n    return unescapeHTML(res)",
                "def clean_html(html):\n    \"\"\"Clean an HTML snippet into a readable string\"\"\"\n    # Newline vs <br />\n    html = html.replace('\\n', ' ')\n    html = re.sub(r'\\s*<\\s*br\\s*/?\\s*>\\s*', '\\n', html)\n    html = re.sub(r'<\\s*/\\s*p\\s*>\\s*<\\s*p[^>]*>', '\\n', html)\n    # Strip html tags\n    html = re.sub('<.*?>', '', html)\n    # Replace html entities\n    html = unescapeHTML(html)\n    return html.strip()",
                "def sanitize_open(filename, open_mode):\n    \"\"\"Try to open the given filename, and slightly tweak it if this fails.\n\n    Attempts to open the given filename. If this fails, it tries to change\n    the filename slightly, step by step, until it's either able to open it\n    or it fails and raises a final exception, like the standard open()\n    function.\n\n    It returns the tuple (stream, definitive_file_name).\n    \"\"\"\n    try:\n        if filename == '-':\n            if sys.platform == 'win32':\n                import msvcrt\n                msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)\n            return (sys.stdout.buffer if hasattr(sys.stdout, 'buffer') else sys.stdout, filename)\n        stream = open(encodeFilename(filename), open_mode)\n        return (stream, filename)\n    except (IOError, OSError) as err:\n        if err.errno in (errno.EACCES,):\n            raise\n\n        # In case of error, try to remove win32 forbidden chars\n        alt_filename = os.path.join(\n            re.sub('[/<>:\"\\\\|\\\\\\\\?\\\\*]', '#', path_part)\n            for path_part in os.path.split(filename)\n        )\n        if alt_filename == filename:\n            raise\n        else:\n            # An exception here should be caught in the caller\n            stream = open(encodeFilename(filename), open_mode)\n            return (stream, alt_filename)",
                "def timeconvert(timestr):\n    \"\"\"Convert RFC 2822 defined time string into system timestamp\"\"\"\n    timestamp = None\n    timetuple = email.utils.parsedate_tz(timestr)\n    if timetuple is not None:\n        timestamp = email.utils.mktime_tz(timetuple)\n    return timestamp",
                "def sanitize_filename(s, restricted=False, is_id=False):\n    \"\"\"Sanitizes a string so it could be used as part of a filename.\n    If restricted is set, use a stricter subset of allowed characters.\n    Set is_id if this is not an arbitrary string, but an ID that should be kept if possible\n    \"\"\"\n    def replace_insane(char):\n        if char == '?' or ord(char) < 32 or ord(char) == 127:\n            return ''\n        elif char == '\"':\n            return '' if restricted else '\\''\n        elif char == ':':\n            return '_-' if restricted else ' -'\n        elif char in '\\\\/|*<>':\n            return '_'\n        if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n            return '_'\n        if restricted and ord(char) > 127:\n            return '_'\n        return char\n\n    result = ''.join(map(replace_insane, s))\n    if not is_id:\n        while '__' in result:\n            result = result.replace('__', '_')\n        result = result.strip('_')\n        # Common case of \"Foreign band name - English song title\"\n        if restricted and result.startswith('-_'):\n            result = result[2:]\n        if not result:\n            result = '_'\n    return result",
                "def orderedSet(iterable):\n    \"\"\" Remove all duplicates from the input iterable \"\"\"\n    res = []\n    for el in iterable:\n        if el not in res:\n            res.append(el)\n    return res",
                "def _htmlentity_transform(entity):\n    \"\"\"Transforms an HTML entity to a character.\"\"\"\n    # Known non-numeric HTML entity\n    if entity in compat_html_entities.name2codepoint:\n        return compat_chr(compat_html_entities.name2codepoint[entity])\n\n    mobj = re.match(r'#(x?[0-9]+)', entity)\n    if mobj is not None:\n        numstr = mobj.group(1)\n        if numstr.startswith('x'):\n            base = 16\n            numstr = '0%s' % numstr\n        else:\n            base = 10\n        return compat_chr(int(numstr, base))\n\n    # Unknown entity in name, return its literal representation\n    return ('&%s;' % entity)",
                "def unescapeHTML(s):\n    if s is None:\n        return None\n    assert type(s) == compat_str\n\n    return re.sub(\n        r'&([^;]+);', lambda m: _htmlentity_transform(m.group(1)), s)",
                "def encodeFilename(s, for_subprocess=False):\n    \"\"\"\n    @param s The name of the file\n    \"\"\"\n\n    assert type(s) == compat_str\n\n    # Python 3 has a Unicode API\n    if sys.version_info >= (3, 0):\n        return s\n\n    if sys.platform == 'win32' and sys.getwindowsversion()[0] >= 5:\n        # Pass '' directly to use Unicode APIs on Windows 2000 and up\n        # (Detecting Windows NT 4 is tricky because 'major >= 4' would\n        # match Windows 9x series as well. Besides, NT 4 is obsolete.)\n        if not for_subprocess:\n            return s\n        else:\n            # For subprocess calls, encode with locale encoding\n            # Refer to http://stackoverflow.com/a/9951851/35070\n            encoding = preferredencoding()\n    else:\n        encoding = sys.getfilesystemencoding()\n    if encoding is None:\n        encoding = 'utf-8'\n    return s.encode(encoding, 'ignore')",
                "def encodeArgument(s):\n    if not isinstance(s, compat_str):\n        # Legacy code that uses byte strings\n        # Uncomment the following line after fixing all post processors\n        #assert False, 'Internal error: %r should be of type %r, is %r' % (s, compat_str, type(s))\n        s = s.decode('ascii')\n    return encodeFilename(s, True)",
                "def decodeOption(optval):\n    if optval is None:\n        return optval\n    if isinstance(optval, bytes):\n        optval = optval.decode(preferredencoding())\n\n    assert isinstance(optval, compat_str)\n    return optval",
                "def formatSeconds(secs):\n    if secs > 3600:\n        return '%d:%02d:%02d' % (secs // 3600, (secs % 3600) // 60, secs % 60)\n    elif secs > 60:\n        return '%d:%02d' % (secs // 60, secs % 60)\n    else:\n        return '%d' % secs",
                "def make_HTTPS_handler(opts_no_check_certificate, **kwargs):\n    if sys.version_info < (3, 2):\n        import httplib\n\n        class HTTPSConnectionV3(httplib.HTTPSConnection):\n            def __init__(self, *args, **kwargs):\n                httplib.HTTPSConnection.__init__(self, *args, **kwargs)\n\n            def connect(self):\n                sock = socket.create_connection((self.host, self.port), self.timeout)\n                if getattr(self, '_tunnel_host', False):\n                    self.sock = sock\n                    self._tunnel()\n                try:\n                    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_TLSv1)\n                except ssl.SSLError:\n                    self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv23)\n\n        class HTTPSHandlerV3(compat_urllib_request.HTTPSHandler):\n            def https_open(self, req):\n                return self.do_open(HTTPSConnectionV3, req)\n        return HTTPSHandlerV3(**kwargs)\n    elif hasattr(ssl, 'create_default_context'):  # Python >= 3.4\n        context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        context.options &= ~ssl.OP_NO_SSLv3  # Allow older, not-as-secure SSLv3\n        if opts_no_check_certificate:\n            context.verify_mode = ssl.CERT_NONE\n        return compat_urllib_request.HTTPSHandler(context=context, **kwargs)\n    else:  # Python < 3.4\n        context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)\n        context.verify_mode = (ssl.CERT_NONE\n                               if opts_no_check_certificate\n                               else ssl.CERT_REQUIRED)\n        context.set_default_verify_paths()\n        try:\n            context.load_default_certs()\n        except AttributeError:\n            pass  # Python < 3.4\n        return compat_urllib_request.HTTPSHandler(context=context, **kwargs)",
                "def parse_iso8601(date_str, delimiter='T'):\n    \"\"\" Return a UNIX timestamp from the given date \"\"\"\n\n    if date_str is None:\n        return None\n\n    m = re.search(\n        r'(\\.[0-9]+)?(?:Z$| ?(?P<sign>\\+|-)(?P<hours>[0-9]{2}):?(?P<minutes>[0-9]{2})$)',\n        date_str)\n    if not m:\n        timezone = datetime.timedelta()\n    else:\n        date_str = date_str[:-len(m.group(0))]\n        if not m.group('sign'):\n            timezone = datetime.timedelta()\n        else:\n            sign = 1 if m.group('sign') == '+' else -1\n            timezone = datetime.timedelta(\n                hours=sign * int(m.group('hours')),\n                minutes=sign * int(m.group('minutes')))\n    date_format = '%Y-%m-%d{0}%H:%M:%S'.format(delimiter)\n    dt = datetime.datetime.strptime(date_str, date_format) - timezone\n    return calendar.timegm(dt.timetuple())",
                "def unified_strdate(date_str):\n    \"\"\"Return a string with the date in the format YYYYMMDD\"\"\"\n\n    if date_str is None:\n        return None\n\n    upload_date = None\n    # Replace commas\n    date_str = date_str.replace(',', ' ')\n    # %z (UTC offset) is only supported in python>=3.2\n    date_str = re.sub(r' ?(\\+|-)[0-9]{2}:?[0-9]{2}$', '', date_str)\n    format_expressions = [\n        '%d %B %Y',\n        '%d %b %Y',\n        '%B %d %Y',\n        '%b %d %Y',\n        '%b %dst %Y %I:%M%p',\n        '%b %dnd %Y %I:%M%p',\n        '%b %dth %Y %I:%M%p',\n        '%Y-%m-%d',\n        '%Y/%m/%d',\n        '%d.%m.%Y',\n        '%d/%m/%Y',\n        '%d/%m/%y',\n        '%Y/%m/%d %H:%M:%S',\n        '%d/%m/%Y %H:%M:%S',\n        '%Y-%m-%d %H:%M:%S',\n        '%Y-%m-%d %H:%M:%S.%f',\n        '%d.%m.%Y %H:%M',\n        '%d.%m.%Y %H.%M',\n        '%Y-%m-%dT%H:%M:%SZ',\n        '%Y-%m-%dT%H:%M:%S.%fZ',\n        '%Y-%m-%dT%H:%M:%S.%f0Z',\n        '%Y-%m-%dT%H:%M:%S',\n        '%Y-%m-%dT%H:%M:%S.%f',\n        '%Y-%m-%dT%H:%M',\n    ]\n    for expression in format_expressions:\n        try:\n            upload_date = datetime.datetime.strptime(date_str, expression).strftime('%Y%m%d')\n        except ValueError:\n            pass\n    if upload_date is None:\n        timetuple = email.utils.parsedate_tz(date_str)\n        if timetuple:\n            upload_date = datetime.datetime(*timetuple[:6]).strftime('%Y%m%d')\n    return upload_date",
                "def determine_ext(url, default_ext='unknown_video'):\n    if url is None:\n        return default_ext\n    guess = url.partition('?')[0].rpartition('.')[2]\n    if re.match(r'^[A-Za-z0-9]+$', guess):\n        return guess\n    else:\n        return default_ext",
                "def subtitles_filename(filename, sub_lang, sub_format):\n    return filename.rsplit('.', 1)[0] + '.' + sub_lang + '.' + sub_format",
                "def date_from_str(date_str):\n    \"\"\"\n    Return a datetime object from a string in the format YYYYMMDD or\n    (now|today)[+-][0-9](day|week|month|year)(s)?\"\"\"\n    today = datetime.date.today()\n    if date_str == 'now'or date_str == 'today':\n        return today\n    match = re.match('(now|today)(?P<sign>[+-])(?P<time>\\d+)(?P<unit>day|week|month|year)(s)?', date_str)\n    if match is not None:\n        sign = match.group('sign')\n        time = int(match.group('time'))\n        if sign == '-':\n            time = -time\n        unit = match.group('unit')\n        # A bad aproximation?\n        if unit == 'month':\n            unit = 'day'\n            time *= 30\n        elif unit == 'year':\n            unit = 'day'\n            time *= 365\n        unit += 's'\n        delta = datetime.timedelta(**{unit: time})\n        return today + delta\n    return datetime.datetime.strptime(date_str, \"%Y%m%d\").date()",
                "def hyphenate_date(date_str):\n    \"\"\"\n    Convert a date in 'YYYYMMDD' format to 'YYYY-MM-DD' format\"\"\"\n    match = re.match(r'^(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)$', date_str)\n    if match is not None:\n        return '-'.join(match.groups())\n    else:\n        return date_str",
                "def platform_name():\n    \"\"\" Returns the platform name as a compat_str \"\"\"\n    res = platform.platform()\n    if isinstance(res, bytes):\n        res = res.decode(preferredencoding())\n\n    assert isinstance(res, compat_str)\n    return res",
                "def _windows_write_string(s, out):\n    \"\"\" Returns True if the string was written using special methods,\n    False if it has yet to be written out.\"\"\"\n    # Adapted from http://stackoverflow.com/a/3259271/35070\n\n    import ctypes\n    import ctypes.wintypes\n\n    WIN_OUTPUT_IDS = {\n        1: -11,\n        2: -12,\n    }\n\n    try:\n        fileno = out.fileno()\n    except AttributeError:\n        # If the output stream doesn't have a fileno, it's virtual\n        return False\n    if fileno not in WIN_OUTPUT_IDS:\n        return False\n\n    GetStdHandle = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.HANDLE, ctypes.wintypes.DWORD)(\n        (\"GetStdHandle\", ctypes.windll.kernel32))\n    h = GetStdHandle(WIN_OUTPUT_IDS[fileno])\n\n    WriteConsoleW = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE, ctypes.wintypes.LPWSTR,\n        ctypes.wintypes.DWORD, ctypes.POINTER(ctypes.wintypes.DWORD),\n        ctypes.wintypes.LPVOID)((\"WriteConsoleW\", ctypes.windll.kernel32))\n    written = ctypes.wintypes.DWORD(0)\n\n    GetFileType = ctypes.WINFUNCTYPE(ctypes.wintypes.DWORD, ctypes.wintypes.DWORD)((\"GetFileType\", ctypes.windll.kernel32))\n    FILE_TYPE_CHAR = 0x0002\n    FILE_TYPE_REMOTE = 0x8000\n    GetConsoleMode = ctypes.WINFUNCTYPE(\n        ctypes.wintypes.BOOL, ctypes.wintypes.HANDLE,\n        ctypes.POINTER(ctypes.wintypes.DWORD))(\n        (\"GetConsoleMode\", ctypes.windll.kernel32))\n    INVALID_HANDLE_VALUE = ctypes.wintypes.DWORD(-1).value\n\n    def not_a_console(handle):\n        if handle == INVALID_HANDLE_VALUE or handle is None:\n            return True\n        return ((GetFileType(handle) & ~FILE_TYPE_REMOTE) != FILE_TYPE_CHAR\n                or GetConsoleMode(handle, ctypes.byref(ctypes.wintypes.DWORD())) == 0)\n\n    if not_a_console(h):\n        return False\n\n    def next_nonbmp_pos(s):\n        try:\n            return next(i for i, c in enumerate(s) if ord(c) > 0xffff)\n        except StopIteration:\n            return len(s)\n\n    while s:\n        count = min(next_nonbmp_pos(s), 1024)\n\n        ret = WriteConsoleW(\n            h, s, count if count else 2, ctypes.byref(written), None)\n        if ret == 0:\n            raise OSError('Failed to write string')\n        if not count:  # We just wrote a non-BMP character\n            assert written.value == 2\n            s = s[1:]\n        else:\n            assert written.value > 0\n            s = s[written.value:]\n    return True",
                "def write_string(s, out=None, encoding=None):\n    if out is None:\n        out = sys.stderr\n    assert type(s) == compat_str\n\n    if sys.platform == 'win32' and encoding is None and hasattr(out, 'fileno'):\n        if _windows_write_string(s, out):\n            return\n\n    if ('b' in getattr(out, 'mode', '') or\n            sys.version_info[0] < 3):  # Python 2 lies about mode of sys.stderr\n        byt = s.encode(encoding or preferredencoding(), 'ignore')\n        out.write(byt)\n    elif hasattr(out, 'buffer'):\n        enc = encoding or getattr(out, 'encoding', None) or preferredencoding()\n        byt = s.encode(enc, 'ignore')\n        out.buffer.write(byt)\n    else:\n        out.write(s)\n    out.flush()",
                "def bytes_to_intlist(bs):\n    if not bs:\n        return []\n    if isinstance(bs[0], int):  # Python 3\n        return list(bs)\n    else:\n        return [ord(c) for c in bs]",
                "def intlist_to_bytes(xs):\n    if not xs:\n        return b''\n    return struct_pack('%dB' % len(xs), *xs)",
                "def get_filesystem_encoding():\n    encoding = sys.getfilesystemencoding()\n    return encoding if encoding is not None else 'utf-8'",
                "def shell_quote(args):\n    quoted_args = []\n    encoding = get_filesystem_encoding()\n    for a in args:\n        if isinstance(a, bytes):\n            # We may get a filename encoded with 'encodeFilename'\n            a = a.decode(encoding)\n        quoted_args.append(pipes.quote(a))\n    return ' '.join(quoted_args)",
                "def takewhile_inclusive(pred, seq):\n    \"\"\" Like itertools.takewhile, but include the latest evaluated element\n        (the first element so that Not pred(e)) \"\"\"\n    for e in seq:\n        yield e\n        if not pred(e):\n            return",
                "def smuggle_url(url, data):\n    \"\"\" Pass additional data in a URL for internal use. \"\"\"\n\n    sdata = compat_urllib_parse.urlencode(\n        {'__youtubedl_smuggle': json.dumps(data)})\n    return url + '#' + sdata",
                "def unsmuggle_url(smug_url, default=None):\n    if not '#__youtubedl_smuggle' in smug_url:\n        return smug_url, default\n    url, _, sdata = smug_url.rpartition('#')\n    jsond = compat_parse_qs(sdata)['__youtubedl_smuggle'][0]\n    data = json.loads(jsond)\n    return url, data",
                "def format_bytes(bytes):\n    if bytes is None:\n        return 'N/A'\n    if type(bytes) is str:\n        bytes = float(bytes)\n    if bytes == 0.0:\n        exponent = 0\n    else:\n        exponent = int(math.log(bytes, 1024.0))\n    suffix = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'][exponent]\n    converted = float(bytes) / float(1024 ** exponent)\n    return '%.2f%s' % (converted, suffix)",
                "def parse_filesize(s):\n    if s is None:\n        return None\n\n    # The lower-case forms are of course incorrect and inofficial,\n    # but we support those too\n    _UNIT_TABLE = {\n        'B': 1,\n        'b': 1,\n        'KiB': 1024,\n        'KB': 1000,\n        'kB': 1024,\n        'Kb': 1000,\n        'MiB': 1024 ** 2,\n        'MB': 1000 ** 2,\n        'mB': 1024 ** 2,\n        'Mb': 1000 ** 2,\n        'GiB': 1024 ** 3,\n        'GB': 1000 ** 3,\n        'gB': 1024 ** 3,\n        'Gb': 1000 ** 3,\n        'TiB': 1024 ** 4,\n        'TB': 1000 ** 4,\n        'tB': 1024 ** 4,\n        'Tb': 1000 ** 4,\n        'PiB': 1024 ** 5,\n        'PB': 1000 ** 5,\n        'pB': 1024 ** 5,\n        'Pb': 1000 ** 5,\n        'EiB': 1024 ** 6,\n        'EB': 1000 ** 6,\n        'eB': 1024 ** 6,\n        'Eb': 1000 ** 6,\n        'ZiB': 1024 ** 7,\n        'ZB': 1000 ** 7,\n        'zB': 1024 ** 7,\n        'Zb': 1000 ** 7,\n        'YiB': 1024 ** 8,\n        'YB': 1000 ** 8,\n        'yB': 1024 ** 8,\n        'Yb': 1000 ** 8,\n    }\n\n    units_re = '|'.join(re.escape(u) for u in _UNIT_TABLE)\n    m = re.match(\n        r'(?P<num>[0-9]+(?:[,.][0-9]*)?)\\s*(?P<unit>%s)' % units_re, s)\n    if not m:\n        return None\n\n    num_str = m.group('num').replace(',', '.')\n    mult = _UNIT_TABLE[m.group('unit')]\n    return int(float(num_str) * mult)",
                "def get_term_width():\n    columns = compat_getenv('COLUMNS', None)\n    if columns:\n        return int(columns)\n\n    try:\n        sp = subprocess.Popen(\n            ['stty', 'size'],\n            stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        out, err = sp.communicate()\n        return int(out.split()[1])\n    except:\n        pass\n    return None",
                "def month_by_name(name):\n    \"\"\" Return the number of a month by (locale-independently) English name \"\"\"\n\n    ENGLISH_NAMES = [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December']\n    try:\n        return ENGLISH_NAMES.index(name) + 1\n    except ValueError:\n        return None",
                "def fix_xml_ampersands(xml_str):\n    \"\"\"Replace all the '&' by '&amp;' in XML\"\"\"\n    return re.sub(\n        r'&(?!amp;|lt;|gt;|apos;|quot;|#x[0-9a-fA-F]{,4};|#[0-9]{,4};)',\n        '&amp;',\n        xml_str)",
                "def setproctitle(title):\n    assert isinstance(title, compat_str)\n    try:\n        libc = ctypes.cdll.LoadLibrary(\"libc.so.6\")\n    except OSError:\n        return\n    title_bytes = title.encode('utf-8')\n    buf = ctypes.create_string_buffer(len(title_bytes))\n    buf.value = title_bytes\n    try:\n        libc.prctl(15, buf, 0, 0, 0)\n    except AttributeError:\n        return  # Strange libc, just skip this",
                "def remove_start(s, start):\n    if s.startswith(start):\n        return s[len(start):]\n    return s",
                "def remove_end(s, end):\n    if s.endswith(end):\n        return s[:-len(end)]\n    return s",
                "def url_basename(url):\n    path = compat_urlparse.urlparse(url).path\n    return path.strip('/').split('/')[-1]",
                "def int_or_none(v, scale=1, default=None, get_attr=None, invscale=1):\n    if get_attr:\n        if v is not None:\n            v = getattr(v, get_attr, None)\n    if v == '':\n        v = None\n    return default if v is None else (int(v) * invscale // scale)",
                "def str_or_none(v, default=None):\n    return default if v is None else compat_str(v)",
                "def str_to_int(int_str):\n    \"\"\" A more relaxed version of int_or_none \"\"\"\n    if int_str is None:\n        return None\n    int_str = re.sub(r'[,\\.\\+]', '', int_str)\n    return int(int_str)",
                "def float_or_none(v, scale=1, invscale=1, default=None):\n    return default if v is None else (float(v) * invscale / scale)",
                "def parse_duration(s):\n    if s is None:\n        return None\n\n    s = s.strip()\n\n    m = re.match(\n        r'''(?ix)T?\n            (?:\n                (?:(?P<hours>[0-9]+)\\s*(?:[:h]|hours?)\\s*)?\n                (?P<mins>[0-9]+)\\s*(?:[:m]|mins?|minutes?)\\s*\n            )?\n            (?P<secs>[0-9]+)(?P<ms>\\.[0-9]+)?\\s*(?:s|secs?|seconds?)?$''', s)\n    if not m:\n        return None\n    res = int(m.group('secs'))\n    if m.group('mins'):\n        res += int(m.group('mins')) * 60\n        if m.group('hours'):\n            res += int(m.group('hours')) * 60 * 60\n    if m.group('ms'):\n        res += float(m.group('ms'))\n    return res",
                "def prepend_extension(filename, ext):\n    name, real_ext = os.path.splitext(filename)\n    return '{0}.{1}{2}'.format(name, ext, real_ext)",
                "def check_executable(exe, args=[]):\n    \"\"\" Checks if the given binary is installed somewhere in PATH, and returns its name.\n    args can be a list of arguments for a short output (like -version) \"\"\"\n    try:\n        subprocess.Popen([exe] + args, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n    except OSError:\n        return False\n    return exe",
                "def get_exe_version(exe, args=['--version'],\n                    version_re=r'version\\s+([0-9._-a-zA-Z]+)',\n                    unrecognized='present'):\n    \"\"\" Returns the version of the specified executable,\n    or False if the executable is not present \"\"\"\n    try:\n        out, err = subprocess.Popen(\n            [exe] + args,\n            stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()\n    except OSError:\n        return False\n    firstline = out.partition(b'\\n')[0].decode('ascii', 'ignore')\n    m = re.search(version_re, firstline)\n    if m:\n        return m.group(1)\n    else:\n        return unrecognized",
                "def uppercase_escape(s):\n    unicode_escape = codecs.getdecoder('unicode_escape')\n    return re.sub(\n        r'\\\\U[0-9a-fA-F]{8}',\n        lambda m: unicode_escape(m.group(0))[0],\n        s)",
                "def escape_rfc3986(s):\n    \"\"\"Escape non-ASCII characters as suggested by RFC 3986\"\"\"\n    if sys.version_info < (3, 0) and isinstance(s, unicode):\n        s = s.encode('utf-8')\n    return compat_urllib_parse.quote(s, b\"%/;:@&=+$,!~*'()?#[]\")",
                "def escape_url(url):\n    \"\"\"Escape URL as suggested by RFC 3986\"\"\"\n    url_parsed = compat_urllib_parse_urlparse(url)\n    return url_parsed._replace(\n        path=escape_rfc3986(url_parsed.path),\n        params=escape_rfc3986(url_parsed.params),\n        query=escape_rfc3986(url_parsed.query),\n        fragment=escape_rfc3986(url_parsed.fragment)\n    ).geturl()",
                "def read_batch_urls(batch_fd):\n    def fixup(url):\n        if not isinstance(url, compat_str):\n            url = url.decode('utf-8', 'replace')\n        BOM_UTF8 = '\\xef\\xbb\\xbf'\n        if url.startswith(BOM_UTF8):\n            url = url[len(BOM_UTF8):]\n        url = url.strip()\n        if url.startswith(('#', ';', ']')):\n            return False\n        return url\n\n    with contextlib.closing(batch_fd) as fd:\n        return [url for url in map(fixup, fd) if url]",
                "def urlencode_postdata(*args, **kargs):\n    return compat_urllib_parse.urlencode(*args, **kargs).encode('ascii')",
                "def parse_xml(s):\n    class TreeBuilder(xml.etree.ElementTree.TreeBuilder):\n        def doctype(self, name, pubid, system):\n            pass  # Ignore doctypes\n\n    parser = xml.etree.ElementTree.XMLParser(target=TreeBuilder())\n    kwargs = {'parser': parser} if sys.version_info >= (2, 7) else {}\n    tree = xml.etree.ElementTree.XML(s.encode('utf-8'), **kwargs)\n    # Fix up XML parser in Python 2.x\n    if sys.version_info < (3, 0):\n        for n in etree_iter(tree):\n            if n.text is not None:\n                if not isinstance(n.text, compat_str):\n                    n.text = n.text.decode('utf-8')\n    return tree",
                "def parse_age_limit(s):\n    if s is None:\n        return None\n    m = re.match(r'^(?P<age>\\d{1,2})\\+?$', s)\n    return int(m.group('age')) if m else US_RATINGS.get(s, None)",
                "def strip_jsonp(code):\n    return re.sub(\n        r'(?s)^[a-zA-Z0-9_]+\\s*\\(\\s*(.*)\\);?\\s*?(?://[^\\n]*)*$', r'\\1', code)",
                "def js_to_json(code):\n    def fix_kv(m):\n        v = m.group(0)\n        if v in ('true', 'false', 'null'):\n            return v\n        if v.startswith('\"'):\n            return v\n        if v.startswith(\"'\"):\n            v = v[1:-1]\n            v = re.sub(r\"\\\\\\\\|\\\\'|\\\"\", lambda m: {\n                '\\\\\\\\': '\\\\\\\\',\n                \"\\\\'\": \"'\",\n                '\"': '\\\\\"',\n            }[m.group(0)], v)\n        return '\"%s\"' % v\n\n    res = re.sub(r'''(?x)\n        \"(?:[^\"\\\\]*(?:\\\\\\\\|\\\\\")?)*\"|\n        '(?:[^'\\\\]*(?:\\\\\\\\|\\\\')?)*'|\n        [a-zA-Z_][a-zA-Z_0-9]*\n        ''', fix_kv, code)\n    res = re.sub(r',(\\s*\\])', lambda m: m.group(1), res)\n    return res",
                "def qualities(quality_ids):\n    \"\"\" Get a numeric quality value out of a list of possible values \"\"\"\n    def q(qid):\n        try:\n            return quality_ids.index(qid)\n        except ValueError:\n            return -1\n    return q",
                "def limit_length(s, length):\n    \"\"\" Add ellipses to overly long strings \"\"\"\n    if s is None:\n        return None\n    ELLIPSES = '...'\n    if len(s) > length:\n        return s[:length - len(ELLIPSES)] + ELLIPSES\n    return s",
                "def version_tuple(v):\n    return [int(e) for e in v.split('.')]",
                "def is_outdated_version(version, limit, assume_new=True):\n    if not version:\n        return not assume_new\n    try:\n        return version_tuple(version) < version_tuple(limit)\n    except ValueError:\n        return not assume_new",
                "def ytdl_is_updateable():\n    \"\"\" Returns if youtube-dl can be updated with -U \"\"\"\n    from zipimport import zipimporter\n\n    return isinstance(globals().get('__loader__'), zipimporter) or hasattr(sys, 'frozen')",
                "def args_to_str(args):\n    # Get a short string representation for a subprocess command\n    return ' '.join(shlex_quote(a) for a in args)",
                "def find_xpath_attr(node, xpath, key, val):\n    \"\"\" Find the xpath xpath[@key=val] \"\"\"\n    assert re.match(r'^[a-zA-Z-]+$', key)\n    assert re.match(r'^[a-zA-Z0-9@\\s:._-]*$', val)\n    expr = xpath + \"[@%s='%s']\" % (key, val)\n    return node.find(expr)",
                "def find_xpath_attr(node, xpath, key, val):\n    # Here comes the crazy part: In 2.6, if the xpath is a unicode,\n    # .//node does not match if a node is a direct child of . !\n    if isinstance(xpath, unicode):\n        xpath = xpath.encode('ascii')\n\n    for f in node.findall(xpath):\n        if f.attrib.get(key) == val:\n            return f\n    return None",
                "def replace_insane(char):\n    if char == '?' or ord(char) < 32 or ord(char) == 127:\n        return ''\n    elif char == '\"':\n        return '' if restricted else '\\''\n    elif char == ':':\n        return '_-' if restricted else ' -'\n    elif char in '\\\\/|*<>':\n        return '_'\n    if restricted and (char in '!&\\'()[]{}$;`^,#' or char.isspace()):\n        return '_'\n    if restricted and ord(char) > 127:\n        return '_'\n    return char",
                "def __init__(self, msg, tb=None, expected=False, cause=None, video_id=None):\n    \"\"\" tb, if given, is the original traceback (so that it can be printed out).\n    If expected is set, this is a normal error message and most likely not a bug in youtube-dl.\n    \"\"\"\n\n    if sys.exc_info()[0] in (compat_urllib_error.URLError, socket.timeout, UnavailableVideoError):\n        expected = True\n    if video_id is not None:\n        msg = video_id + ': ' + msg\n    if cause:\n        msg += ' (caused by %r)' % cause\n    if not expected:\n        if ytdl_is_updateable():\n            update_cmd = 'type  youtube-dl -U  to update'\n        else:\n            update_cmd = 'see  https://yt-dl.org/update  on how to update'\n        msg += '; please report this issue on https://yt-dl.org/bug .'\n        msg += ' Make sure you are using the latest version; %s.' % update_cmd\n        msg += ' Be sure to call youtube-dl with the --verbose flag and include its complete output.'\n    super(ExtractorError, self).__init__(msg)\n\n    self.traceback = tb\n    self.exc_info = sys.exc_info()  # preserve original exception\n    self.cause = cause\n    self.video_id = video_id",
                "def format_traceback(self):\n    if self.traceback is None:\n        return None\n    return ''.join(traceback.format_tb(self.traceback))",
                "def __init__(self, msg, exc_info=None):\n    \"\"\" exc_info, if given, is the original exception that caused the trouble (as returned by sys.exc_info()). \"\"\"\n    super(DownloadError, self).__init__(msg)\n    self.exc_info = exc_info",
                "def __init__(self, msg):\n    self.msg = msg",
                "def __init__(self, downloaded, expected):\n    self.downloaded = downloaded\n    self.expected = expected",
                "@staticmethod\ndef deflate(data):\n    try:\n        return zlib.decompress(data, -zlib.MAX_WBITS)\n    except zlib.error:\n        return zlib.decompress(data)",
                "@staticmethod\ndef addinfourl_wrapper(stream, headers, url, code):\n    if hasattr(compat_urllib_request.addinfourl, 'getcode'):\n        return compat_urllib_request.addinfourl(stream, headers, url, code)\n    ret = compat_urllib_request.addinfourl(stream, headers, url)\n    ret.code = code\n    return ret",
                "def http_request(self, req):\n    for h, v in std_headers.items():\n        if h not in req.headers:\n            req.add_header(h, v)\n    if 'Youtubedl-no-compression' in req.headers:\n        if 'Accept-encoding' in req.headers:\n            del req.headers['Accept-encoding']\n        del req.headers['Youtubedl-no-compression']\n    if 'Youtubedl-user-agent' in req.headers:\n        if 'User-agent' in req.headers:\n            del req.headers['User-agent']\n        req.headers['User-agent'] = req.headers['Youtubedl-user-agent']\n        del req.headers['Youtubedl-user-agent']\n\n    if sys.version_info < (2, 7) and '#' in req.get_full_url():\n        # Python 2.6 is brain-dead when it comes to fragments\n        req._Request__original = req._Request__original.partition('#')[0]\n        req._Request__r_type = req._Request__r_type.partition('#')[0]\n\n    return req",
                "def http_response(self, req, resp):\n    old_resp = resp\n    # gzip\n    if resp.headers.get('Content-encoding', '') == 'gzip':\n        content = resp.read()\n        gz = gzip.GzipFile(fileobj=io.BytesIO(content), mode='rb')\n        try:\n            uncompressed = io.BytesIO(gz.read())\n        except IOError as original_ioerror:\n            # There may be junk add the end of the file\n            # See http://stackoverflow.com/q/4928560/35070 for details\n            for i in range(1, 1024):\n                try:\n                    gz = gzip.GzipFile(fileobj=io.BytesIO(content[:-i]), mode='rb')\n                    uncompressed = io.BytesIO(gz.read())\n                except IOError:\n                    continue\n                break\n            else:\n                raise original_ioerror\n        resp = self.addinfourl_wrapper(uncompressed, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    # deflate\n    if resp.headers.get('Content-encoding', '') == 'deflate':\n        gz = io.BytesIO(self.deflate(resp.read()))\n        resp = self.addinfourl_wrapper(gz, old_resp.headers, old_resp.url, old_resp.code)\n        resp.msg = old_resp.msg\n    return resp",
                "def __init__(self, start=None, end=None):\n    \"\"\"start and end must be strings in the format accepted by date\"\"\"\n    if start is not None:\n        self.start = date_from_str(start)\n    else:\n        self.start = datetime.datetime.min.date()\n    if end is not None:\n        self.end = date_from_str(end)\n    else:\n        self.end = datetime.datetime.max.date()\n    if self.start > self.end:\n        raise ValueError('Date range: \"%s\" , the start date must be before the end date' % self)",
                "@classmethod\ndef day(cls, day):\n    \"\"\"Returns a range that only contains the given day\"\"\"\n    return cls(day, day)",
                "def __contains__(self, date):\n    \"\"\"Check if the date is in the range\"\"\"\n    if not isinstance(date, datetime.date):\n        date = date_from_str(date)\n    return self.start <= date <= self.end",
                "def __str__(self):\n    return '%s - %s' % (self.start.isoformat(), self.end.isoformat())",
                "def not_a_console(handle):\n    if handle == INVALID_HANDLE_VALUE or handle is None:\n        return True\n    return ((GetFileType(handle) & ~FILE_TYPE_REMOTE) != FILE_TYPE_CHAR\n            or GetConsoleMode(handle, ctypes.byref(ctypes.wintypes.DWORD())) == 0)",
                "def next_nonbmp_pos(s):\n    try:\n        return next(i for i, c in enumerate(s) if ord(c) > 0xffff)\n    except StopIteration:\n        return len(s)",
                "def _lock_file(f, exclusive):\n    overlapped = OVERLAPPED()\n    overlapped.Offset = 0\n    overlapped.OffsetHigh = 0\n    overlapped.hEvent = 0\n    f._lock_file_overlapped_p = ctypes.pointer(overlapped)\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not LockFileEx(handle, 0x2 if exclusive else 0x0, 0,\n                      whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Locking file failed: %r' % ctypes.FormatError())",
                "def _unlock_file(f):\n    assert f._lock_file_overlapped_p\n    handle = msvcrt.get_osfhandle(f.fileno())\n    if not UnlockFileEx(handle, 0,\n                        whole_low, whole_high, f._lock_file_overlapped_p):\n        raise OSError('Unlocking file failed: %r' % ctypes.FormatError())",
                "def _lock_file(f, exclusive):\n    fcntl.flock(f, fcntl.LOCK_EX if exclusive else fcntl.LOCK_SH)",
                "def _unlock_file(f):\n    fcntl.flock(f, fcntl.LOCK_UN)",
                "def __init__(self, filename, mode, encoding=None):\n    assert mode in ['r', 'a', 'w']\n    self.f = io.open(filename, mode, encoding=encoding)\n    self.mode = mode",
                "def __enter__(self):\n    exclusive = self.mode != 'r'\n    try:\n        _lock_file(self.f, exclusive)\n    except IOError:\n        self.f.close()\n        raise\n    return self",
                "def __exit__(self, etype, value, traceback):\n    try:\n        _unlock_file(self.f)\n    finally:\n        self.f.close()",
                "def __iter__(self):\n    return iter(self.f)",
                "def write(self, *args):\n    return self.f.write(*args)",
                "def read(self, *args):\n    return self.f.read(*args)",
                "def get_method(self):\n    return \"HEAD\"",
                "def __len__(self):\n    # This is only useful for tests\n    return len(self.getslice())",
                "def __init__(self, pagefunc, pagesize):\n    self._pagefunc = pagefunc\n    self._pagesize = pagesize",
                "def getslice(self, start=0, end=None):\n    res = []\n    for pagenum in itertools.count(start // self._pagesize):\n        firstid = pagenum * self._pagesize\n        nextfirstid = pagenum * self._pagesize + self._pagesize\n        if start >= nextfirstid:\n            continue\n\n        page_results = list(self._pagefunc(pagenum))\n\n        startv = (\n            start % self._pagesize\n            if firstid <= start < nextfirstid\n            else 0)\n\n        endv = (\n            ((end - 1) % self._pagesize) + 1\n            if (end is not None and firstid <= end <= nextfirstid)\n            else None)\n\n        if startv != 0 or endv is not None:\n            page_results = page_results[startv:endv]\n        res.extend(page_results)\n\n        # A little optimization - if current page is not \"full\", ie. does\n        # not contain page_size videos then we can assume that this page\n        # is the last one - there are no more ids on further pages -\n        # i.e. no need to query again.\n        if len(page_results) + startv < self._pagesize:\n            break\n\n        # If we got the whole page, but the next page is not interesting,\n        # break out early as well\n        if end == nextfirstid:\n            break\n    return res",
                "def __init__(self, pagefunc, pagecount, pagesize):\n    self._pagefunc = pagefunc\n    self._pagecount = pagecount\n    self._pagesize = pagesize",
                "def getslice(self, start=0, end=None):\n    res = []\n    start_page = start // self._pagesize\n    end_page = (\n        self._pagecount if end is None else (end // self._pagesize + 1))\n    skip_elems = start - start_page * self._pagesize\n    only_more = None if end is None else end - start\n    for pagenum in range(start_page, end_page):\n        page = list(self._pagefunc(pagenum))\n        if skip_elems:\n            page = page[skip_elems:]\n            skip_elems = None\n        if only_more is not None:\n            if len(page) < only_more:\n                only_more -= len(page)\n            else:\n                page = page[:only_more]\n                res.extend(page)\n                break\n        res.extend(page)\n    return res",
                "def fixup(url):\n    if not isinstance(url, compat_str):\n        url = url.decode('utf-8', 'replace')\n    BOM_UTF8 = '\\xef\\xbb\\xbf'\n    if url.startswith(BOM_UTF8):\n        url = url[len(BOM_UTF8):]\n    url = url.strip()\n    if url.startswith(('#', ';', ']')):\n        return False\n    return url",
                "def fix_kv(m):\n    v = m.group(0)\n    if v in ('true', 'false', 'null'):\n        return v\n    if v.startswith('\"'):\n        return v\n    if v.startswith(\"'\"):\n        v = v[1:-1]\n        v = re.sub(r\"\\\\\\\\|\\\\'|\\\"\", lambda m: {\n            '\\\\\\\\': '\\\\\\\\',\n            \"\\\\'\": \"'\",\n            '\"': '\\\\\"',\n        }[m.group(0)], v)\n    return '\"%s\"' % v",
                "def q(qid):\n    try:\n        return quality_ids.index(qid)\n    except ValueError:\n        return -1",
                "def struct_pack(spec, *args):\n    if isinstance(spec, compat_str):\n        spec = spec.encode('ascii')\n    return struct.pack(spec, *args)",
                "def struct_unpack(spec, *args):\n    if isinstance(spec, compat_str):\n        spec = spec.encode('ascii')\n    return struct.unpack(spec, *args)",
                "def doctype(self, name, pubid, system):\n    pass  # Ignore doctypes",
                "def __init__(self, *args, **kwargs):\n    httplib.HTTPSConnection.__init__(self, *args, **kwargs)",
                "def connect(self):\n    sock = socket.create_connection((self.host, self.port), self.timeout)\n    if getattr(self, '_tunnel_host', False):\n        self.sock = sock\n        self._tunnel()\n    try:\n        self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_TLSv1)\n    except ssl.SSLError:\n        self.sock = ssl.wrap_socket(sock, self.key_file, self.cert_file, ssl_version=ssl.PROTOCOL_SSLv23)",
                "def https_open(self, req):\n    return self.do_open(HTTPSConnectionV3, req)"
            ],
            "inscope_function_signatures": [
                "preferredencoding()",
                "write_json_file(obj, fn)",
                "xpath_with_ns(path, ns_map)",
                "xpath_text(node, xpath, name=None, fatal=False)",
                "get_element_by_id(id, html)",
                "get_element_by_attribute(attribute, value, html)",
                "clean_html(html)",
                "sanitize_open(filename, open_mode)",
                "timeconvert(timestr)",
                "sanitize_filename(s, restricted=False, is_id=False)",
                "orderedSet(iterable)",
                "_htmlentity_transform(entity)",
                "unescapeHTML(s)",
                "encodeFilename(s, for_subprocess=False)",
                "encodeArgument(s)",
                "decodeOption(optval)",
                "formatSeconds(secs)",
                "make_HTTPS_handler(opts_no_check_certificate, **kwargs)",
                "parse_iso8601(date_str, delimiter='T')",
                "unified_strdate(date_str)",
                "determine_ext(url, default_ext='unknown_video')",
                "subtitles_filename(filename, sub_lang, sub_format)",
                "date_from_str(date_str)",
                "hyphenate_date(date_str)",
                "platform_name()",
                "_windows_write_string(s, out)",
                "write_string(s, out=None, encoding=None)",
                "bytes_to_intlist(bs)",
                "intlist_to_bytes(xs)",
                "get_filesystem_encoding()",
                "shell_quote(args)",
                "takewhile_inclusive(pred, seq)",
                "smuggle_url(url, data)",
                "unsmuggle_url(smug_url, default=None)",
                "format_bytes(bytes)",
                "parse_filesize(s)",
                "get_term_width()",
                "month_by_name(name)",
                "fix_xml_ampersands(xml_str)",
                "setproctitle(title)",
                "remove_start(s, start)",
                "remove_end(s, end)",
                "url_basename(url)",
                "int_or_none(v, scale=1, default=None, get_attr=None, invscale=1)",
                "str_or_none(v, default=None)",
                "str_to_int(int_str)",
                "float_or_none(v, scale=1, invscale=1, default=None)",
                "parse_duration(s)",
                "prepend_extension(filename, ext)",
                "check_executable(exe, args=[])",
                "get_exe_version(exe, args=['--version'], version_re='version\\\\s+([0-9._-a-zA-Z]+)', unrecognized='present')",
                "uppercase_escape(s)",
                "escape_rfc3986(s)",
                "escape_url(url)",
                "read_batch_urls(batch_fd)",
                "urlencode_postdata(*args, **kargs)",
                "parse_xml(s)",
                "parse_age_limit(s)",
                "strip_jsonp(code)",
                "js_to_json(code)",
                "qualities(quality_ids)",
                "limit_length(s, length)",
                "version_tuple(v)",
                "is_outdated_version(version, limit, assume_new=True)",
                "ytdl_is_updateable()",
                "args_to_str(args)",
                "find_xpath_attr(node, xpath, key, val)",
                "find_xpath_attr(node, xpath, key, val)",
                "replace_insane(char)",
                "__init__(self, msg, tb=None, expected=False, cause=None, video_id=None)",
                "format_traceback(self)",
                "__init__(self, msg, exc_info=None)",
                "__init__(self, msg)",
                "__init__(self, downloaded, expected)",
                "deflate(data)",
                "addinfourl_wrapper(stream, headers, url, code)",
                "http_request(self, req)",
                "http_response(self, req, resp)",
                "__init__(self, start=None, end=None)",
                "day(cls, day)",
                "__contains__(self, date)",
                "__str__(self)",
                "not_a_console(handle)",
                "next_nonbmp_pos(s)",
                "_lock_file(f, exclusive)",
                "_unlock_file(f)",
                "_lock_file(f, exclusive)",
                "_unlock_file(f)",
                "__init__(self, filename, mode, encoding=None)",
                "__enter__(self)",
                "__exit__(self, etype, value, traceback)",
                "__iter__(self)",
                "write(self, *args)",
                "read(self, *args)",
                "get_method(self)",
                "__len__(self)",
                "__init__(self, pagefunc, pagesize)",
                "getslice(self, start=0, end=None)",
                "__init__(self, pagefunc, pagecount, pagesize)",
                "getslice(self, start=0, end=None)",
                "fixup(url)",
                "fix_kv(m)",
                "q(qid)",
                "struct_pack(spec, *args)",
                "struct_unpack(spec, *args)",
                "doctype(self, name, pubid, system)",
                "__init__(self, *args, **kwargs)",
                "connect(self)",
                "https_open(self, req)"
            ],
            "variables_in_file": {
                "compiled_regex_type": [
                    49
                ],
                "type": [
                    328,
                    1038,
                    49,
                    339,
                    863
                ],
                "re.compile": [
                    49
                ],
                "re": [
                    132,
                    133,
                    657,
                    1436,
                    1441,
                    1193,
                    1454,
                    49,
                    1461,
                    311,
                    1207,
                    186,
                    1466,
                    700,
                    1340,
                    194,
                    1092,
                    1093,
                    330,
                    717,
                    210,
                    211,
                    213,
                    740,
                    1253,
                    1133,
                    243,
                    628
                ],
                "std_headers": [
                    569,
                    51
                ],
                "pref": [
                    72,
                    67,
                    68,
                    70
                ],
                "locale.getpreferredencoding": [
                    67
                ],
                "locale": [
                    67
                ],
                "encode": [
                    68,
                    1398
                ],
                "fn": [
                    78,
                    84,
                    117,
                    86,
                    120,
                    93,
                    94
                ],
                "encodeFilename": [
                    368,
                    250,
                    235,
                    78
                ],
                "sys.version_info": [
                    129,
                    100,
                    165,
                    582,
                    391,
                    870,
                    1348,
                    1413,
                    1416,
                    79,
                    342
                ],
                "sys": [
                    129,
                    898,
                    1413,
                    391,
                    1416,
                    165,
                    439,
                    1348,
                    582,
                    456,
                    79,
                    342,
                    345,
                    862,
                    865,
                    994,
                    100,
                    356,
                    870,
                    231,
                    1510,
                    233,
                    234,
                    113
                ],
                "sys.platform": [
                    865,
                    898,
                    231,
                    79,
                    113,
                    345
                ],
                "encoding": [
                    865,
                    354,
                    994,
                    356,
                    357,
                    358,
                    359,
                    871,
                    965,
                    874,
                    995,
                    1000,
                    1004,
                    80,
                    84,
                    86
                ],
                "get_filesystem_encoding": [
                    80,
                    1000
                ],
                "path_basename": [
                    88,
                    84,
                    93
                ],
                "decode": [
                    84,
                    86,
                    1252
                ],
                "os.path.basename": [
                    88,
                    84
                ],
                "os.path": [
                    1227,
                    242,
                    84,
                    244,
                    86,
                    88,
                    89
                ],
                "os": [
                    233,
                    1227,
                    242,
                    84,
                    117,
                    86,
                    244,
                    88,
                    89,
                    123,
                    120
                ],
                "path_dirname": [
                    89,
                    86,
                    94
                ],
                "os.path.dirname": [
                    89,
                    86
                ],
                "args": [
                    1248,
                    101,
                    987,
                    103,
                    1001,
                    1515,
                    396,
                    108,
                    1235,
                    1398,
                    1370,
                    91,
                    990,
                    1375
                ],
                "args.update": [
                    103
                ],
                "tf": [
                    108,
                    111,
                    112,
                    120,
                    123
                ],
                "tempfile.NamedTemporaryFile": [
                    108
                ],
                "tempfile": [
                    108
                ],
                "json.dump": [
                    112
                ],
                "json": [
                    112,
                    1022,
                    1031
                ],
                "obj": [
                    112
                ],
                "os.unlink": [
                    117
                ],
                "OSError": [
                    1250,
                    237,
                    943,
                    850,
                    1236,
                    1143,
                    118,
                    950,
                    124
                ],
                "os.rename": [
                    120
                ],
                "tf.name": [
                    120,
                    123
                ],
                "os.remove": [
                    123
                ],
                "re.match": [
                    132,
                    133,
                    740,
                    1093,
                    717,
                    311,
                    1207,
                    700,
                    1436
                ],
                "key": [
                    144,
                    132,
                    134
                ],
                "val": [
                    144,
                    133,
                    134
                ],
                "expr": [
                    134,
                    135
                ],
                "xpath": [
                    166,
                    134,
                    168,
                    171,
                    140,
                    141,
                    143
                ],
                "node.find": [
                    168,
                    135
                ],
                "node": [
                    143,
                    168,
                    135
                ],
                "isinstance": [
                    770,
                    1348,
                    1510,
                    1383,
                    1002,
                    363,
                    140,
                    781,
                    1419,
                    784,
                    1140,
                    885,
                    374,
                    1368,
                    377,
                    1373
                ],
                "unicode": [
                    140,
                    1348
                ],
                "xpath.encode": [
                    141,
                    166
                ],
                "f": [
                    939,
                    940,
                    942,
                    143,
                    144,
                    145,
                    946,
                    947,
                    949,
                    956,
                    959
                ],
                "node.findall": [
                    143
                ],
                "f.attrib.get": [
                    144
                ],
                "f.attrib": [
                    144
                ],
                "components": [
                    153,
                    155
                ],
                "c.split": [
                    153
                ],
                "c": [
                    840,
                    888,
                    153,
                    155,
                    156,
                    157,
                    159
                ],
                "path.split": [
                    153
                ],
                "path": [
                    1168,
                    153,
                    1167
                ],
                "replaced": [
                    160,
                    161,
                    154,
                    157
                ],
                "len": [
                    1156,
                    842,
                    1162,
                    1387,
                    1263,
                    1328,
                    1329,
                    1488,
                    1299,
                    1489,
                    634,
                    1146,
                    156,
                    894
                ],
                "replaced.append": [
                    160,
                    157
                ],
                "ns": [
                    160,
                    159
                ],
                "tag": [
                    160,
                    159
                ],
                "ns_map": [
                    160
                ],
                "join": [
                    161,
                    1092,
                    742,
                    1515,
                    1006,
                    463,
                    283
                ],
                "n": [
                    168,
                    169,
                    1417,
                    1418,
                    1419,
                    1420,
                    175,
                    1404
                ],
                "fatal": [
                    170
                ],
                "name": [
                    1126,
                    1227,
                    1228,
                    171,
                    172
                ],
                "ExtractorError": [
                    466,
                    172,
                    453
                ],
                "n.text": [
                    1418,
                    1419,
                    1420,
                    175
                ],
                "get_element_by_attribute": [
                    180
                ],
                "id": [
                    180
                ],
                "html": [
                    194,
                    209,
                    210,
                    211,
                    180,
                    213,
                    215,
                    216
                ],
                "m": [
                    640,
                    641,
                    1436,
                    1437,
                    1447,
                    1458,
                    1207,
                    186,
                    1466,
                    1214,
                    1342,
                    1216,
                    1217,
                    1218,
                    1219,
                    196,
                    1093,
                    198,
                    1095,
                    1220,
                    1221,
                    1098,
                    331,
                    1099,
                    1222,
                    1253,
                    1254,
                    1255,
                    628,
                    631,
                    634,
                    635,
                    638
                ],
                "re.search": [
                    186,
                    628,
                    1253
                ],
                "re.escape": [
                    194,
                    1092
                ],
                "attribute": [
                    194
                ],
                "value": [
                    194,
                    827
                ],
                "res": [
                    780,
                    781,
                    782,
                    1293,
                    784,
                    785,
                    1306,
                    1316,
                    298,
                    300,
                    301,
                    302,
                    1332,
                    1461,
                    1334,
                    1335,
                    1466,
                    1467,
                    1216,
                    1218,
                    1220,
                    198,
                    1222,
                    200,
                    201,
                    1223,
                    203,
                    1272
                ],
                "m.group": [
                    640,
                    641,
                    1437,
                    1447,
                    1458,
                    1466,
                    1342,
                    1216,
                    1217,
                    1218,
                    1219,
                    1220,
                    1221,
                    198,
                    1222,
                    1098,
                    331,
                    1099,
                    1255,
                    634,
                    635,
                    638
                ],
                "res.startswith": [
                    200
                ],
                "unescapeHTML": [
                    203,
                    215
                ],
                "html.replace": [
                    209
                ],
                "re.sub": [
                    1441,
                    1193,
                    330,
                    1133,
                    1454,
                    657,
                    210,
                    211,
                    243,
                    213,
                    1461,
                    1466,
                    1340
                ],
                "html.strip": [
                    216
                ],
                "filename": [
                    707,
                    965,
                    230,
                    234,
                    235,
                    236,
                    1227,
                    244,
                    246,
                    250
                ],
                "msvcrt.setmode": [
                    233
                ],
                "msvcrt": [
                    233,
                    947,
                    940
                ],
                "sys.stdout.fileno": [
                    233
                ],
                "sys.stdout": [
                    233,
                    234
                ],
                "os.O_BINARY": [
                    233
                ],
                "hasattr": [
                    865,
                    1510,
                    873,
                    234,
                    562,
                    412
                ],
                "sys.stdout.buffer": [
                    234
                ],
                "stream": [
                    235,
                    236,
                    563,
                    564,
                    250,
                    251
                ],
                "open": [
                    250,
                    235
                ],
                "open_mode": [
                    250,
                    235
                ],
                "IOError": [
                    972,
                    597,
                    237,
                    604
                ],
                "err.errno": [
                    238
                ],
                "err": [
                    1112,
                    238,
                    1247
                ],
                "errno.EACCES": [
                    238
                ],
                "errno": [
                    238
                ],
                "alt_filename": [
                    242,
                    251,
                    246
                ],
                "os.path.join": [
                    242
                ],
                "path_part": [
                    243,
                    244
                ],
                "os.path.split": [
                    244
                ],
                "timestamp": [
                    256,
                    259,
                    260
                ],
                "timetuple": [
                    257,
                    258,
                    259,
                    690,
                    691,
                    692
                ],
                "email.utils.parsedate_tz": [
                    257,
                    690
                ],
                "email.utils": [
                    257,
                    690,
                    259
                ],
                "email": [
                    257,
                    690,
                    259
                ],
                "timestr": [
                    257
                ],
                "email.utils.mktime_tz": [
                    259
                ],
                "char": [
                    269,
                    271,
                    273,
                    275,
                    277,
                    279,
                    281
                ],
                "ord": [
                    840,
                    888,
                    269,
                    279
                ],
                "restricted": [
                    289,
                    272,
                    274,
                    277,
                    279
                ],
                "char.isspace": [
                    277
                ],
                "result": [
                    289,
                    290,
                    291,
                    292,
                    293,
                    283,
                    285,
                    286,
                    287
                ],
                "map": [
                    1394,
                    283
                ],
                "replace_insane": [
                    283
                ],
                "s": [
                    1155,
                    1156,
                    1157,
                    1414,
                    1161,
                    1162,
                    1163,
                    1050,
                    283,
                    1434,
                    1436,
                    1437,
                    1202,
                    1205,
                    1213,
                    1343,
                    1348,
                    1349,
                    326,
                    1094,
                    328,
                    840,
                    842,
                    331,
                    844,
                    845,
                    1350,
                    1485,
                    848,
                    1488,
                    1489,
                    339,
                    1490,
                    853,
                    343,
                    856,
                    350,
                    863,
                    866,
                    359,
                    871,
                    363,
                    875,
                    878,
                    367,
                    368
                ],
                "is_id": [
                    284
                ],
                "result.replace": [
                    286
                ],
                "result.strip": [
                    287
                ],
                "result.startswith": [
                    289
                ],
                "el": [
                    299,
                    300,
                    301
                ],
                "iterable": [
                    299
                ],
                "res.append": [
                    301
                ],
                "entity": [
                    322,
                    308,
                    309,
                    311
                ],
                "compat_html_entities.name2codepoint": [
                    308,
                    309
                ],
                "compat_html_entities": [
                    308,
                    309
                ],
                "compat_chr": [
                    309,
                    319
                ],
                "mobj": [
                    312,
                    313,
                    311
                ],
                "numstr": [
                    313,
                    314,
                    316,
                    319
                ],
                "mobj.group": [
                    313
                ],
                "numstr.startswith": [
                    314
                ],
                "base": [
                    315,
                    318,
                    319
                ],
                "int": [
                    640,
                    641,
                    1216,
                    1218,
                    1220,
                    1194,
                    1100,
                    720,
                    1106,
                    1043,
                    885,
                    1494,
                    1113,
                    1437,
                    1182,
                    319
                ],
                "compat_str": [
                    1186,
                    1383,
                    328,
                    363,
                    1419,
                    784,
                    339,
                    1140,
                    1368,
                    377,
                    1373,
                    863
                ],
                "_htmlentity_transform": [
                    331
                ],
                "sys.getwindowsversion": [
                    345
                ],
                "for_subprocess": [
                    349
                ],
                "preferredencoding": [
                    354,
                    871,
                    874,
                    782,
                    375
                ],
                "sys.getfilesystemencoding": [
                    994,
                    356
                ],
                "s.encode": [
                    1349,
                    1414,
                    871,
                    359,
                    875
                ],
                "s.decode": [
                    367
                ],
                "optval": [
                    372,
                    373,
                    374,
                    375,
                    377,
                    378
                ],
                "bytes": [
                    1002,
                    1036,
                    781,
                    1038,
                    1039,
                    1040,
                    1043,
                    1045,
                    374
                ],
                "optval.decode": [
                    375
                ],
                "secs": [
                    384,
                    385,
                    387,
                    382,
                    383
                ],
                "httplib.HTTPSConnection": [
                    394,
                    396
                ],
                "httplib": [
                    394,
                    396
                ],
                "httplib.HTTPSConnection.__init__": [
                    396
                ],
                "self": [
                    1282,
                    772,
                    1273,
                    775,
                    1287,
                    1274,
                    396,
                    399,
                    400,
                    401,
                    402,
                    531,
                    404,
                    532,
                    406,
                    1299,
                    410,
                    1311,
                    1312,
                    1313,
                    1317,
                    1319,
                    1320,
                    1323,
                    453,
                    965,
                    455,
                    456,
                    457,
                    458,
                    966,
                    969,
                    461,
                    971,
                    463,
                    973,
                    975,
                    979,
                    981,
                    984,
                    987,
                    990,
                    481,
                    482,
                    609,
                    613,
                    614,
                    1263,
                    753,
                    755,
                    1268,
                    757,
                    502,
                    759,
                    760,
                    761,
                    1269,
                    1275,
                    1279
                ],
                "kwargs": [
                    417,
                    1413,
                    1414,
                    428,
                    396,
                    411
                ],
                "sock": [
                    401,
                    404,
                    406,
                    399
                ],
                "socket.create_connection": [
                    399
                ],
                "socket": [
                    439,
                    399
                ],
                "self.host": [
                    399
                ],
                "self.port": [
                    399
                ],
                "self.timeout": [
                    399
                ],
                "getattr": [
                    400,
                    874,
                    1179,
                    869
                ],
                "self.sock": [
                    401,
                    404,
                    406
                ],
                "self._tunnel": [
                    402
                ],
                "ssl.wrap_socket": [
                    404,
                    406
                ],
                "ssl": [
                    416,
                    419,
                    420,
                    422,
                    404,
                    405,
                    406,
                    412,
                    413,
                    414
                ],
                "self.key_file": [
                    404,
                    406
                ],
                "self.cert_file": [
                    404,
                    406
                ],
                "ssl.PROTOCOL_TLSv1": [
                    404
                ],
                "ssl.SSLError": [
                    405
                ],
                "ssl.PROTOCOL_SSLv23": [
                    419,
                    406
                ],
                "compat_urllib_request.HTTPSHandler": [
                    408,
                    417,
                    428
                ],
                "compat_urllib_request": [
                    417,
                    428,
                    562,
                    563,
                    564,
                    1171,
                    535,
                    408
                ],
                "self.do_open": [
                    410
                ],
                "HTTPSConnectionV3": [
                    410
                ],
                "req": [
                    576,
                    577,
                    578,
                    579,
                    580,
                    582,
                    584,
                    585,
                    587,
                    570,
                    410,
                    571,
                    572,
                    573,
                    574,
                    575
                ],
                "HTTPSHandlerV3": [
                    411
                ],
                "context": [
                    416,
                    417,
                    419,
                    420,
                    423,
                    425,
                    428,
                    413,
                    414
                ],
                "ssl.create_default_context": [
                    413
                ],
                "ssl.Purpose.CLIENT_AUTH": [
                    413
                ],
                "ssl.Purpose": [
                    413
                ],
                "context.options": [
                    414
                ],
                "ssl.OP_NO_SSLv3": [
                    414
                ],
                "opts_no_check_certificate": [
                    421,
                    415
                ],
                "context.verify_mode": [
                    416,
                    420
                ],
                "ssl.CERT_NONE": [
                    416,
                    420
                ],
                "ssl.SSLContext": [
                    419
                ],
                "ssl.CERT_REQUIRED": [
                    422
                ],
                "context.set_default_verify_paths": [
                    423
                ],
                "context.load_default_certs": [
                    425
                ],
                "AttributeError": [
                    1403,
                    426,
                    803,
                    1150
                ],
                "Exception": [
                    485,
                    519,
                    494,
                    431,
                    471,
                    505,
                    510
                ],
                "sys.exc_info": [
                    456,
                    439
                ],
                "compat_urllib_error.URLError": [
                    439
                ],
                "compat_urllib_error": [
                    439
                ],
                "socket.timeout": [
                    439
                ],
                "UnavailableVideoError": [
                    439
                ],
                "expected": [
                    440,
                    528,
                    532,
                    445
                ],
                "video_id": [
                    441,
                    442,
                    458
                ],
                "msg": [
                    481,
                    450,
                    451,
                    452,
                    453,
                    502,
                    442,
                    444
                ],
                "cause": [
                    457,
                    443,
                    444
                ],
                "ytdl_is_updateable": [
                    446
                ],
                "update_cmd": [
                    449,
                    451,
                    447
                ],
                "__init__": [
                    481,
                    453
                ],
                "super": [
                    481,
                    453
                ],
                "self.traceback": [
                    463,
                    461,
                    455
                ],
                "tb": [
                    455
                ],
                "self.exc_info": [
                    456,
                    482
                ],
                "self.cause": [
                    457
                ],
                "self.video_id": [
                    458
                ],
                "traceback.format_tb": [
                    463
                ],
                "traceback": [
                    463
                ],
                "DownloadError": [
                    481
                ],
                "exc_info": [
                    482
                ],
                "self.msg": [
                    502
                ],
                "downloaded": [
                    531,
                    527
                ],
                "self.downloaded": [
                    531
                ],
                "self.expected": [
                    532
                ],
                "compat_urllib_request.HTTPHandler": [
                    535
                ],
                "zlib.decompress": [
                    556,
                    558
                ],
                "zlib": [
                    556,
                    557,
                    558
                ],
                "data": [
                    1031,
                    1032,
                    556,
                    558,
                    1022
                ],
                "zlib.MAX_WBITS": [
                    556
                ],
                "zlib.error": [
                    557
                ],
                "staticmethod": [
                    560,
                    553
                ],
                "compat_urllib_request.addinfourl": [
                    562,
                    563,
                    564
                ],
                "headers": [
                    563,
                    564
                ],
                "url": [
                    1029,
                    1383,
                    1032,
                    1384,
                    1386,
                    1355,
                    1387,
                    1388,
                    1389,
                    1167,
                    1391,
                    1394,
                    563,
                    564,
                    697,
                    699,
                    1023
                ],
                "code": [
                    1465,
                    1442,
                    563,
                    565
                ],
                "ret": [
                    847,
                    849,
                    564,
                    565,
                    566
                ],
                "ret.code": [
                    565
                ],
                "h": [
                    835,
                    812,
                    848,
                    569,
                    570,
                    571
                ],
                "v": [
                    1178,
                    1179,
                    1180,
                    1181,
                    1182,
                    1186,
                    1447,
                    1448,
                    1449,
                    1450,
                    1451,
                    1452,
                    1453,
                    1198,
                    1454,
                    1458,
                    1459,
                    569,
                    571,
                    1494
                ],
                "std_headers.items": [
                    569
                ],
                "req.headers": [
                    576,
                    577,
                    578,
                    579,
                    580,
                    570,
                    572,
                    573,
                    574,
                    575
                ],
                "req.add_header": [
                    571
                ],
                "req.get_full_url": [
                    582
                ],
                "req._Request__original": [
                    584
                ],
                "req._Request__original.partition": [
                    584
                ],
                "req._Request__r_type": [
                    585
                ],
                "req._Request__r_type.partition": [
                    585
                ],
                "old_resp": [
                    609,
                    610,
                    614,
                    615,
                    590
                ],
                "resp": [
                    609,
                    610,
                    612,
                    613,
                    614,
                    615,
                    616,
                    590,
                    592,
                    593
                ],
                "resp.headers.get": [
                    592,
                    612
                ],
                "resp.headers": [
                    592,
                    612
                ],
                "content": [
                    593,
                    594,
                    602
                ],
                "resp.read": [
                    593,
                    613
                ],
                "gz": [
                    613,
                    614,
                    594,
                    596,
                    602,
                    603
                ],
                "gzip.GzipFile": [
                    594,
                    602
                ],
                "gzip": [
                    594,
                    602
                ],
                "io.BytesIO": [
                    613,
                    594,
                    596,
                    602,
                    603
                ],
                "io": [
                    613,
                    965,
                    594,
                    596,
                    602,
                    603
                ],
                "uncompressed": [
                    609,
                    603,
                    596
                ],
                "gz.read": [
                    603,
                    596
                ],
                "i": [
                    600,
                    602,
                    840
                ],
                "range": [
                    600,
                    1322
                ],
                "original_ioerror": [
                    608
                ],
                "self.addinfourl_wrapper": [
                    609,
                    614
                ],
                "old_resp.headers": [
                    609,
                    614
                ],
                "old_resp.url": [
                    609,
                    614
                ],
                "old_resp.code": [
                    609,
                    614
                ],
                "resp.msg": [
                    610,
                    615
                ],
                "old_resp.msg": [
                    610,
                    615
                ],
                "self.deflate": [
                    613
                ],
                "https_request": [
                    618
                ],
                "http_request": [
                    618
                ],
                "https_response": [
                    619
                ],
                "http_response": [
                    619
                ],
                "date_str": [
                    643,
                    740,
                    744,
                    650,
                    715,
                    717,
                    686,
                    655,
                    625,
                    657,
                    690,
                    630,
                    634,
                    734
                ],
                "timezone": [
                    632,
                    643,
                    636,
                    639
                ],
                "datetime.timedelta": [
                    632,
                    732,
                    636,
                    639
                ],
                "datetime": [
                    770,
                    643,
                    732,
                    714,
                    686,
                    755,
                    692,
                    759,
                    632,
                    636,
                    734,
                    639
                ],
                "sign": [
                    640,
                    641,
                    719,
                    721,
                    638
                ],
                "date_format": [
                    642,
                    643
                ],
                "format": [
                    642,
                    1228
                ],
                "delimiter": [
                    642
                ],
                "dt": [
                    643,
                    644
                ],
                "datetime.datetime.strptime": [
                    643,
                    734,
                    686
                ],
                "datetime.datetime": [
                    643,
                    686,
                    755,
                    692,
                    759,
                    734
                ],
                "calendar.timegm": [
                    644
                ],
                "calendar": [
                    644
                ],
                "dt.timetuple": [
                    644
                ],
                "upload_date": [
                    653,
                    686,
                    689,
                    692,
                    693
                ],
                "date_str.replace": [
                    655
                ],
                "format_expressions": [
                    658,
                    684
                ],
                "expression": [
                    684,
                    686
                ],
                "strftime": [
                    692,
                    686
                ],
                "ValueError": [
                    1475,
                    1127,
                    687,
                    761,
                    1502
                ],
                "default_ext": [
                    698,
                    703
                ],
                "guess": [
                    699,
                    700,
                    701
                ],
                "rpartition": [
                    699
                ],
                "url.partition": [
                    699
                ],
                "filename.rsplit": [
                    707
                ],
                "sub_lang": [
                    707
                ],
                "sub_format": [
                    707
                ],
                "today": [
                    714,
                    716,
                    733
                ],
                "datetime.date.today": [
                    714
                ],
                "datetime.date": [
                    714,
                    770
                ],
                "match": [
                    740,
                    741,
                    742,
                    717,
                    718,
                    719,
                    720,
                    723
                ],
                "match.group": [
                    720,
                    723,
                    719
                ],
                "time": [
                    720,
                    722,
                    727,
                    730,
                    732
                ],
                "unit": [
                    723,
                    725,
                    726,
                    728,
                    729,
                    731,
                    732
                ],
                "delta": [
                    732,
                    733
                ],
                "date": [
                    770,
                    771,
                    772,
                    734
                ],
                "match.groups": [
                    742
                ],
                "object": [
                    962,
                    747,
                    1260
                ],
                "start": [
                    1282,
                    1155,
                    1156,
                    1283,
                    1317,
                    1320,
                    1321,
                    752,
                    753,
                    1273,
                    1276
                ],
                "self.start": [
                    772,
                    775,
                    753,
                    755,
                    760
                ],
                "date_from_str": [
                    753,
                    771,
                    757
                ],
                "datetime.datetime.min.date": [
                    755
                ],
                "datetime.datetime.min": [
                    755
                ],
                "end": [
                    1287,
                    1288,
                    1161,
                    1162,
                    1319,
                    1321,
                    756,
                    757,
                    1304
                ],
                "self.end": [
                    772,
                    775,
                    757,
                    759,
                    760
                ],
                "datetime.datetime.max.date": [
                    759
                ],
                "datetime.datetime.max": [
                    759
                ],
                "cls": [
                    766
                ],
                "day": [
                    766
                ],
                "classmethod": [
                    763
                ],
                "self.start.isoformat": [
                    775
                ],
                "self.end.isoformat": [
                    775
                ],
                "platform.platform": [
                    780
                ],
                "platform": [
                    780
                ],
                "res.decode": [
                    782
                ],
                "WIN_OUTPUT_IDS": [
                    796,
                    806,
                    812
                ],
                "fileno": [
                    802,
                    812,
                    806
                ],
                "out.fileno": [
                    802
                ],
                "out": [
                    865,
                    802,
                    866,
                    1252,
                    869,
                    872,
                    873,
                    874,
                    876,
                    878,
                    879,
                    1112,
                    1113,
                    861,
                    862,
                    1247
                ],
                "GetStdHandle": [
                    809,
                    812
                ],
                "ctypes.WINFUNCTYPE": [
                    809,
                    820,
                    814,
                    823
                ],
                "ctypes": [
                    902,
                    904,
                    905,
                    906,
                    907,
                    908,
                    911,
                    914,
                    915,
                    916,
                    917,
                    918,
                    919,
                    921,
                    924,
                    925,
                    926,
                    927,
                    928,
                    930,
                    809,
                    810,
                    811,
                    939,
                    814,
                    815,
                    816,
                    817,
                    818,
                    943,
                    820,
                    950,
                    823,
                    824,
                    825,
                    826,
                    827,
                    833,
                    848,
                    1142,
                    1146
                ],
                "ctypes.wintypes.HANDLE": [
                    810,
                    908,
                    815,
                    914,
                    824,
                    924
                ],
                "ctypes.wintypes": [
                    904,
                    905,
                    906,
                    907,
                    908,
                    914,
                    915,
                    916,
                    917,
                    918,
                    921,
                    924,
                    925,
                    926,
                    927,
                    930,
                    810,
                    815,
                    816,
                    817,
                    818,
                    820,
                    824,
                    825,
                    827,
                    833
                ],
                "ctypes.wintypes.DWORD": [
                    833,
                    810,
                    906,
                    907,
                    816,
                    818,
                    915,
                    820,
                    916,
                    917,
                    918,
                    825,
                    827,
                    925,
                    926,
                    927
                ],
                "ctypes.windll.kernel32": [
                    811,
                    911,
                    817,
                    820,
                    826
                ],
                "ctypes.windll": [
                    811,
                    911,
                    817,
                    820,
                    826
                ],
                "WriteConsoleW": [
                    814,
                    847
                ],
                "ctypes.wintypes.BOOL": [
                    824,
                    921,
                    930,
                    815
                ],
                "ctypes.wintypes.LPWSTR": [
                    815
                ],
                "ctypes.POINTER": [
                    816,
                    825,
                    928,
                    919
                ],
                "ctypes.wintypes.LPVOID": [
                    904,
                    817,
                    905
                ],
                "written": [
                    848,
                    818,
                    852,
                    855,
                    856
                ],
                "GetFileType": [
                    832,
                    820
                ],
                "FILE_TYPE_CHAR": [
                    832,
                    821
                ],
                "FILE_TYPE_REMOTE": [
                    832,
                    822
                ],
                "GetConsoleMode": [
                    833,
                    823
                ],
                "INVALID_HANDLE_VALUE": [
                    827,
                    830
                ],
                "handle": [
                    832,
                    833,
                    940,
                    941,
                    947,
                    948,
                    830
                ],
                "ctypes.byref": [
                    848,
                    833
                ],
                "not_a_console": [
                    835
                ],
                "next": [
                    840
                ],
                "enumerate": [
                    840
                ],
                "StopIteration": [
                    841
                ],
                "count": [
                    848,
                    851,
                    845
                ],
                "min": [
                    845
                ],
                "next_nonbmp_pos": [
                    845
                ],
                "written.value": [
                    856,
                    852,
                    855
                ],
                "sys.stderr": [
                    862
                ],
                "_windows_write_string": [
                    866
                ],
                "byt": [
                    872,
                    875,
                    876,
                    871
                ],
                "out.write": [
                    872,
                    878
                ],
                "enc": [
                    874,
                    875
                ],
                "out.buffer.write": [
                    876
                ],
                "out.buffer": [
                    876
                ],
                "out.flush": [
                    879
                ],
                "bs": [
                    888,
                    883,
                    885,
                    886
                ],
                "list": [
                    1323,
                    886,
                    1279
                ],
                "xs": [
                    892,
                    894
                ],
                "struct_pack": [
                    1377,
                    894
                ],
                "ctypes.Structure": [
                    902
                ],
                "_fields_": [
                    903
                ],
                "kernel32": [
                    912,
                    922,
                    911
                ],
                "LockFileEx": [
                    912,
                    913,
                    921,
                    941
                ],
                "kernel32.LockFileEx": [
                    912
                ],
                "LockFileEx.argtypes": [
                    913
                ],
                "OVERLAPPED": [
                    928,
                    935,
                    919
                ],
                "LockFileEx.restype": [
                    921
                ],
                "UnlockFileEx": [
                    930,
                    922,
                    923,
                    948
                ],
                "kernel32.UnlockFileEx": [
                    922
                ],
                "UnlockFileEx.argtypes": [
                    923
                ],
                "UnlockFileEx.restype": [
                    930
                ],
                "whole_low": [
                    931,
                    949,
                    942
                ],
                "whole_high": [
                    932,
                    949,
                    942
                ],
                "overlapped": [
                    935,
                    936,
                    937,
                    938,
                    939
                ],
                "overlapped.Offset": [
                    936
                ],
                "overlapped.OffsetHigh": [
                    937
                ],
                "overlapped.hEvent": [
                    938
                ],
                "f._lock_file_overlapped_p": [
                    946,
                    939,
                    949,
                    942
                ],
                "ctypes.pointer": [
                    939
                ],
                "msvcrt.get_osfhandle": [
                    947,
                    940
                ],
                "f.fileno": [
                    947,
                    940
                ],
                "exclusive": [
                    969,
                    971,
                    956,
                    941
                ],
                "ctypes.FormatError": [
                    950,
                    943
                ],
                "fcntl.flock": [
                    956,
                    959
                ],
                "fcntl": [
                    956,
                    959
                ],
                "fcntl.LOCK_EX": [
                    956
                ],
                "fcntl.LOCK_SH": [
                    956
                ],
                "fcntl.LOCK_UN": [
                    959
                ],
                "mode": [
                    964,
                    965,
                    966
                ],
                "self.f": [
                    965,
                    971,
                    973,
                    979,
                    981,
                    984,
                    987,
                    990
                ],
                "io.open": [
                    965
                ],
                "self.mode": [
                    969,
                    966
                ],
                "_lock_file": [
                    971
                ],
                "self.f.close": [
                    981,
                    973
                ],
                "_unlock_file": [
                    979
                ],
                "iter": [
                    984
                ],
                "self.f.write": [
                    987
                ],
                "self.f.read": [
                    990
                ],
                "quoted_args": [
                    1005,
                    1006,
                    999
                ],
                "a": [
                    1001,
                    1002,
                    1515,
                    1004,
                    1005
                ],
                "a.decode": [
                    1004
                ],
                "quoted_args.append": [
                    1005
                ],
                "pipes.quote": [
                    1005
                ],
                "pipes": [
                    1005
                ],
                "e": [
                    1494,
                    1012,
                    1013,
                    1014
                ],
                "seq": [
                    1012
                ],
                "pred": [
                    1014
                ],
                "sdata": [
                    1029,
                    1021,
                    1030,
                    1023
                ],
                "compat_urllib_parse.urlencode": [
                    1021,
                    1398
                ],
                "compat_urllib_parse": [
                    1398,
                    1021,
                    1350
                ],
                "json.dumps": [
                    1022
                ],
                "smug_url": [
                    1027,
                    1028,
                    1029
                ],
                "default": [
                    1186,
                    1028,
                    1182,
                    1198
                ],
                "_": [
                    1029
                ],
                "smug_url.rpartition": [
                    1029
                ],
                "jsond": [
                    1030,
                    1031
                ],
                "compat_parse_qs": [
                    1030
                ],
                "json.loads": [
                    1031
                ],
                "str": [
                    1038
                ],
                "float": [
                    1222,
                    1100,
                    1198,
                    1039,
                    1045
                ],
                "exponent": [
                    1041,
                    1043,
                    1044,
                    1045
                ],
                "math.log": [
                    1043
                ],
                "math": [
                    1043
                ],
                "suffix": [
                    1044,
                    1046
                ],
                "converted": [
                    1045,
                    1046
                ],
                "_UNIT_TABLE": [
                    1099,
                    1092,
                    1055
                ],
                "units_re": [
                    1092,
                    1094
                ],
                "u": [
                    1092
                ],
                "num_str": [
                    1098,
                    1100
                ],
                "replace": [
                    1098
                ],
                "mult": [
                    1099,
                    1100
                ],
                "columns": [
                    1104,
                    1105,
                    1106
                ],
                "compat_getenv": [
                    1104
                ],
                "sp": [
                    1112,
                    1109
                ],
                "subprocess.Popen": [
                    1235,
                    1109,
                    1247
                ],
                "subprocess": [
                    1249,
                    1235,
                    1109,
                    1111,
                    1247
                ],
                "subprocess.PIPE": [
                    1249,
                    1235,
                    1111
                ],
                "sp.communicate": [
                    1112
                ],
                "out.split": [
                    1113
                ],
                "ENGLISH_NAMES": [
                    1122,
                    1126
                ],
                "ENGLISH_NAMES.index": [
                    1126
                ],
                "xml_str": [
                    1136
                ],
                "title": [
                    1145,
                    1140
                ],
                "libc": [
                    1149,
                    1142
                ],
                "ctypes.cdll.LoadLibrary": [
                    1142
                ],
                "ctypes.cdll": [
                    1142
                ],
                "title_bytes": [
                    1145,
                    1146,
                    1147
                ],
                "title.encode": [
                    1145
                ],
                "buf": [
                    1146,
                    1147,
                    1149
                ],
                "ctypes.create_string_buffer": [
                    1146
                ],
                "buf.value": [
                    1147
                ],
                "libc.prctl": [
                    1149
                ],
                "s.startswith": [
                    1155
                ],
                "s.endswith": [
                    1161
                ],
                "compat_urlparse.urlparse": [
                    1167
                ],
                "compat_urlparse": [
                    1167
                ],
                "split": [
                    1168
                ],
                "path.strip": [
                    1168
                ],
                "compat_urllib_request.Request": [
                    1171
                ],
                "get_attr": [
                    1177,
                    1179
                ],
                "invscale": [
                    1198,
                    1182
                ],
                "scale": [
                    1198,
                    1182
                ],
                "int_str": [
                    1193,
                    1194,
                    1191
                ],
                "s.strip": [
                    1205
                ],
                "real_ext": [
                    1227,
                    1228
                ],
                "os.path.splitext": [
                    1227
                ],
                "ext": [
                    1228
                ],
                "communicate": [
                    1235,
                    1247
                ],
                "exe": [
                    1248,
                    1235,
                    1238
                ],
                "subprocess.STDOUT": [
                    1249
                ],
                "firstline": [
                    1252,
                    1253
                ],
                "out.partition": [
                    1252
                ],
                "version_re": [
                    1253
                ],
                "unrecognized": [
                    1257
                ],
                "self.getslice": [
                    1263
                ],
                "PagedList": [
                    1266,
                    1309
                ],
                "self._pagefunc": [
                    1323,
                    1268,
                    1311,
                    1279
                ],
                "pagefunc": [
                    1268,
                    1311
                ],
                "self._pagesize": [
                    1313,
                    1282,
                    1317,
                    1287,
                    1319,
                    1320,
                    1299,
                    1269,
                    1273,
                    1274,
                    1275
                ],
                "pagesize": [
                    1313,
                    1269
                ],
                "pagenum": [
                    1322,
                    1323,
                    1273,
                    1274,
                    1275,
                    1279
                ],
                "itertools.count": [
                    1273
                ],
                "itertools": [
                    1273
                ],
                "firstid": [
                    1288,
                    1274,
                    1283
                ],
                "nextfirstid": [
                    1283,
                    1288,
                    1304,
                    1275,
                    1276
                ],
                "page_results": [
                    1299,
                    1292,
                    1293,
                    1279
                ],
                "startv": [
                    1299,
                    1281,
                    1291,
                    1292
                ],
                "endv": [
                    1291,
                    1292,
                    1286
                ],
                "res.extend": [
                    1332,
                    1293,
                    1334
                ],
                "self._pagecount": [
                    1312,
                    1319
                ],
                "pagecount": [
                    1312
                ],
                "start_page": [
                    1320,
                    1322,
                    1317
                ],
                "end_page": [
                    1322,
                    1318
                ],
                "skip_elems": [
                    1320,
                    1324,
                    1325,
                    1326
                ],
                "only_more": [
                    1321,
                    1327,
                    1328,
                    1329,
                    1331
                ],
                "page": [
                    1323,
                    1325,
                    1328,
                    1329,
                    1331,
                    1332,
                    1334
                ],
                "unicode_escape": [
                    1339,
                    1342
                ],
                "codecs.getdecoder": [
                    1339
                ],
                "codecs": [
                    1339
                ],
                "compat_urllib_parse.quote": [
                    1350
                ],
                "url_parsed": [
                    1355,
                    1356,
                    1357,
                    1358,
                    1359,
                    1360
                ],
                "compat_urllib_parse_urlparse": [
                    1355
                ],
                "geturl": [
                    1356
                ],
                "url_parsed._replace": [
                    1356
                ],
                "escape_rfc3986": [
                    1360,
                    1357,
                    1358,
                    1359
                ],
                "url_parsed.path": [
                    1357
                ],
                "url_parsed.params": [
                    1358
                ],
                "url_parsed.query": [
                    1359
                ],
                "url_parsed.fragment": [
                    1360
                ],
                "struct.pack": [
                    1377,
                    1370,
                    1364
                ],
                "struct": [
                    1377,
                    1378,
                    1364,
                    1370,
                    1375
                ],
                "TypeError": [
                    1365
                ],
                "spec": [
                    1368,
                    1369,
                    1370,
                    1373,
                    1374,
                    1375
                ],
                "spec.encode": [
                    1369,
                    1374
                ],
                "struct.unpack": [
                    1378,
                    1375
                ],
                "struct_unpack": [
                    1378
                ],
                "url.decode": [
                    1384
                ],
                "BOM_UTF8": [
                    1385,
                    1386,
                    1387
                ],
                "url.startswith": [
                    1386,
                    1389
                ],
                "url.strip": [
                    1388
                ],
                "contextlib.closing": [
                    1393
                ],
                "contextlib": [
                    1393
                ],
                "batch_fd": [
                    1393
                ],
                "fd": [
                    1393,
                    1394
                ],
                "fixup": [
                    1394
                ],
                "kargs": [
                    1398
                ],
                "etree_iter": [
                    1417,
                    1402,
                    1404
                ],
                "xml.etree.ElementTree.Element.iter": [
                    1402
                ],
                "xml.etree.ElementTree.Element": [
                    1402
                ],
                "xml.etree.ElementTree": [
                    1408,
                    1402,
                    1412,
                    1414
                ],
                "xml.etree": [
                    1408,
                    1402,
                    1412,
                    1414
                ],
                "xml": [
                    1408,
                    1402,
                    1412,
                    1414
                ],
                "n.findall": [
                    1404
                ],
                "xml.etree.ElementTree.TreeBuilder": [
                    1408
                ],
                "parser": [
                    1412,
                    1413
                ],
                "xml.etree.ElementTree.XMLParser": [
                    1412
                ],
                "TreeBuilder": [
                    1412
                ],
                "tree": [
                    1417,
                    1421,
                    1414
                ],
                "xml.etree.ElementTree.XML": [
                    1414
                ],
                "n.text.decode": [
                    1420
                ],
                "US_RATINGS": [
                    1424,
                    1437
                ],
                "US_RATINGS.get": [
                    1437
                ],
                "v.startswith": [
                    1450,
                    1452
                ],
                "fix_kv": [
                    1465
                ],
                "quality_ids.index": [
                    1474
                ],
                "quality_ids": [
                    1474
                ],
                "qid": [
                    1474
                ],
                "q": [
                    1477
                ],
                "DEFAULT_OUTTMPL": [
                    1480
                ],
                "ELLIPSES": [
                    1489,
                    1487
                ],
                "length": [
                    1488,
                    1489
                ],
                "v.split": [
                    1494
                ],
                "version": [
                    1498,
                    1501
                ],
                "assume_new": [
                    1499,
                    1503
                ],
                "version_tuple": [
                    1501
                ],
                "limit": [
                    1501
                ],
                "get": [
                    1510
                ],
                "globals": [
                    1510
                ],
                "zipimporter": [
                    1510
                ],
                "shlex_quote": [
                    1515
                ]
            },
            "filtered_variables_in_file": {
                "compiled_regex_type": [
                    49
                ],
                "re.compile": [
                    49
                ],
                "re": [
                    132,
                    133,
                    657,
                    1436,
                    1441,
                    1193,
                    1454,
                    49,
                    1461,
                    311,
                    1207,
                    186,
                    1466,
                    700,
                    1340,
                    194,
                    1092,
                    1093,
                    330,
                    717,
                    210,
                    211,
                    213,
                    740,
                    1253,
                    1133,
                    243,
                    628
                ],
                "std_headers": [
                    569,
                    51
                ],
                "pref": [
                    72,
                    67,
                    68,
                    70
                ],
                "locale.getpreferredencoding": [
                    67
                ],
                "locale": [
                    67
                ],
                "encode": [
                    68,
                    1398
                ],
                "fn": [
                    78,
                    84,
                    117,
                    86,
                    120,
                    93,
                    94
                ],
                "encodeFilename": [
                    368,
                    250,
                    235,
                    78
                ],
                "sys.version_info": [
                    129,
                    100,
                    165,
                    582,
                    391,
                    870,
                    1348,
                    1413,
                    1416,
                    79,
                    342
                ],
                "sys": [
                    129,
                    898,
                    1413,
                    391,
                    1416,
                    165,
                    439,
                    1348,
                    582,
                    456,
                    79,
                    342,
                    345,
                    862,
                    865,
                    994,
                    100,
                    356,
                    870,
                    231,
                    1510,
                    233,
                    234,
                    113
                ],
                "sys.platform": [
                    865,
                    898,
                    231,
                    79,
                    113,
                    345
                ],
                "encoding": [
                    865,
                    354,
                    994,
                    356,
                    357,
                    358,
                    359,
                    871,
                    965,
                    874,
                    995,
                    1000,
                    1004,
                    80,
                    84,
                    86
                ],
                "get_filesystem_encoding": [
                    80,
                    1000
                ],
                "path_basename": [
                    88,
                    84,
                    93
                ],
                "decode": [
                    84,
                    86,
                    1252
                ],
                "os.path.basename": [
                    88,
                    84
                ],
                "os.path": [
                    1227,
                    242,
                    84,
                    244,
                    86,
                    88,
                    89
                ],
                "os": [
                    233,
                    1227,
                    242,
                    84,
                    117,
                    86,
                    244,
                    88,
                    89,
                    123,
                    120
                ],
                "path_dirname": [
                    89,
                    86,
                    94
                ],
                "os.path.dirname": [
                    89,
                    86
                ],
                "args": [
                    1248,
                    101,
                    987,
                    103,
                    1001,
                    1515,
                    396,
                    108,
                    1235,
                    1398,
                    1370,
                    91,
                    990,
                    1375
                ],
                "args.update": [
                    103
                ],
                "tf": [
                    108,
                    111,
                    112,
                    120,
                    123
                ],
                "tempfile.NamedTemporaryFile": [
                    108
                ],
                "tempfile": [
                    108
                ],
                "json.dump": [
                    112
                ],
                "json": [
                    112,
                    1022,
                    1031
                ],
                "obj": [
                    112
                ],
                "os.unlink": [
                    117
                ],
                "os.rename": [
                    120
                ],
                "tf.name": [
                    120,
                    123
                ],
                "os.remove": [
                    123
                ],
                "re.match": [
                    132,
                    133,
                    740,
                    1093,
                    717,
                    311,
                    1207,
                    700,
                    1436
                ],
                "key": [
                    144,
                    132,
                    134
                ],
                "val": [
                    144,
                    133,
                    134
                ],
                "expr": [
                    134,
                    135
                ],
                "xpath": [
                    166,
                    134,
                    168,
                    171,
                    140,
                    141,
                    143
                ],
                "node.find": [
                    168,
                    135
                ],
                "node": [
                    143,
                    168,
                    135
                ],
                "unicode": [
                    140,
                    1348
                ],
                "xpath.encode": [
                    141,
                    166
                ],
                "f": [
                    939,
                    940,
                    942,
                    143,
                    144,
                    145,
                    946,
                    947,
                    949,
                    956,
                    959
                ],
                "node.findall": [
                    143
                ],
                "f.attrib.get": [
                    144
                ],
                "f.attrib": [
                    144
                ],
                "components": [
                    153,
                    155
                ],
                "c.split": [
                    153
                ],
                "c": [
                    840,
                    888,
                    153,
                    155,
                    156,
                    157,
                    159
                ],
                "path.split": [
                    153
                ],
                "path": [
                    1168,
                    153,
                    1167
                ],
                "replaced": [
                    160,
                    161,
                    154,
                    157
                ],
                "replaced.append": [
                    160,
                    157
                ],
                "ns": [
                    160,
                    159
                ],
                "tag": [
                    160,
                    159
                ],
                "ns_map": [
                    160
                ],
                "join": [
                    161,
                    1092,
                    742,
                    1515,
                    1006,
                    463,
                    283
                ],
                "n": [
                    168,
                    169,
                    1417,
                    1418,
                    1419,
                    1420,
                    175,
                    1404
                ],
                "fatal": [
                    170
                ],
                "name": [
                    1126,
                    1227,
                    1228,
                    171,
                    172
                ],
                "ExtractorError": [
                    466,
                    172,
                    453
                ],
                "n.text": [
                    1418,
                    1419,
                    1420,
                    175
                ],
                "get_element_by_attribute": [
                    180
                ],
                "html": [
                    194,
                    209,
                    210,
                    211,
                    180,
                    213,
                    215,
                    216
                ],
                "m": [
                    640,
                    641,
                    1436,
                    1437,
                    1447,
                    1458,
                    1207,
                    186,
                    1466,
                    1214,
                    1342,
                    1216,
                    1217,
                    1218,
                    1219,
                    196,
                    1093,
                    198,
                    1095,
                    1220,
                    1221,
                    1098,
                    331,
                    1099,
                    1222,
                    1253,
                    1254,
                    1255,
                    628,
                    631,
                    634,
                    635,
                    638
                ],
                "re.search": [
                    186,
                    628,
                    1253
                ],
                "re.escape": [
                    194,
                    1092
                ],
                "attribute": [
                    194
                ],
                "value": [
                    194,
                    827
                ],
                "res": [
                    780,
                    781,
                    782,
                    1293,
                    784,
                    785,
                    1306,
                    1316,
                    298,
                    300,
                    301,
                    302,
                    1332,
                    1461,
                    1334,
                    1335,
                    1466,
                    1467,
                    1216,
                    1218,
                    1220,
                    198,
                    1222,
                    200,
                    201,
                    1223,
                    203,
                    1272
                ],
                "m.group": [
                    640,
                    641,
                    1437,
                    1447,
                    1458,
                    1466,
                    1342,
                    1216,
                    1217,
                    1218,
                    1219,
                    1220,
                    1221,
                    198,
                    1222,
                    1098,
                    331,
                    1099,
                    1255,
                    634,
                    635,
                    638
                ],
                "res.startswith": [
                    200
                ],
                "unescapeHTML": [
                    203,
                    215
                ],
                "html.replace": [
                    209
                ],
                "re.sub": [
                    1441,
                    1193,
                    330,
                    1133,
                    1454,
                    657,
                    210,
                    211,
                    243,
                    213,
                    1461,
                    1466,
                    1340
                ],
                "html.strip": [
                    216
                ],
                "filename": [
                    707,
                    965,
                    230,
                    234,
                    235,
                    236,
                    1227,
                    244,
                    246,
                    250
                ],
                "msvcrt.setmode": [
                    233
                ],
                "msvcrt": [
                    233,
                    947,
                    940
                ],
                "sys.stdout.fileno": [
                    233
                ],
                "sys.stdout": [
                    233,
                    234
                ],
                "os.O_BINARY": [
                    233
                ],
                "sys.stdout.buffer": [
                    234
                ],
                "stream": [
                    235,
                    236,
                    563,
                    564,
                    250,
                    251
                ],
                "open_mode": [
                    250,
                    235
                ],
                "err.errno": [
                    238
                ],
                "err": [
                    1112,
                    238,
                    1247
                ],
                "errno.EACCES": [
                    238
                ],
                "errno": [
                    238
                ],
                "alt_filename": [
                    242,
                    251,
                    246
                ],
                "os.path.join": [
                    242
                ],
                "path_part": [
                    243,
                    244
                ],
                "os.path.split": [
                    244
                ],
                "timestamp": [
                    256,
                    259,
                    260
                ],
                "timetuple": [
                    257,
                    258,
                    259,
                    690,
                    691,
                    692
                ],
                "email.utils.parsedate_tz": [
                    257,
                    690
                ],
                "email.utils": [
                    257,
                    690,
                    259
                ],
                "email": [
                    257,
                    690,
                    259
                ],
                "timestr": [
                    257
                ],
                "email.utils.mktime_tz": [
                    259
                ],
                "char": [
                    269,
                    271,
                    273,
                    275,
                    277,
                    279,
                    281
                ],
                "restricted": [
                    289,
                    272,
                    274,
                    277,
                    279
                ],
                "char.isspace": [
                    277
                ],
                "result": [
                    289,
                    290,
                    291,
                    292,
                    293,
                    283,
                    285,
                    286,
                    287
                ],
                "replace_insane": [
                    283
                ],
                "s": [
                    1155,
                    1156,
                    1157,
                    1414,
                    1161,
                    1162,
                    1163,
                    1050,
                    283,
                    1434,
                    1436,
                    1437,
                    1202,
                    1205,
                    1213,
                    1343,
                    1348,
                    1349,
                    326,
                    1094,
                    328,
                    840,
                    842,
                    331,
                    844,
                    845,
                    1350,
                    1485,
                    848,
                    1488,
                    1489,
                    339,
                    1490,
                    853,
                    343,
                    856,
                    350,
                    863,
                    866,
                    359,
                    871,
                    363,
                    875,
                    878,
                    367,
                    368
                ],
                "is_id": [
                    284
                ],
                "result.replace": [
                    286
                ],
                "result.strip": [
                    287
                ],
                "result.startswith": [
                    289
                ],
                "el": [
                    299,
                    300,
                    301
                ],
                "iterable": [
                    299
                ],
                "res.append": [
                    301
                ],
                "entity": [
                    322,
                    308,
                    309,
                    311
                ],
                "compat_html_entities.name2codepoint": [
                    308,
                    309
                ],
                "compat_html_entities": [
                    308,
                    309
                ],
                "compat_chr": [
                    309,
                    319
                ],
                "mobj": [
                    312,
                    313,
                    311
                ],
                "numstr": [
                    313,
                    314,
                    316,
                    319
                ],
                "mobj.group": [
                    313
                ],
                "numstr.startswith": [
                    314
                ],
                "base": [
                    315,
                    318,
                    319
                ],
                "compat_str": [
                    1186,
                    1383,
                    328,
                    363,
                    1419,
                    784,
                    339,
                    1140,
                    1368,
                    377,
                    1373,
                    863
                ],
                "_htmlentity_transform": [
                    331
                ],
                "sys.getwindowsversion": [
                    345
                ],
                "for_subprocess": [
                    349
                ],
                "preferredencoding": [
                    354,
                    871,
                    874,
                    782,
                    375
                ],
                "sys.getfilesystemencoding": [
                    994,
                    356
                ],
                "s.encode": [
                    1349,
                    1414,
                    871,
                    359,
                    875
                ],
                "s.decode": [
                    367
                ],
                "optval": [
                    372,
                    373,
                    374,
                    375,
                    377,
                    378
                ],
                "optval.decode": [
                    375
                ],
                "secs": [
                    384,
                    385,
                    387,
                    382,
                    383
                ],
                "httplib.HTTPSConnection": [
                    394,
                    396
                ],
                "httplib": [
                    394,
                    396
                ],
                "httplib.HTTPSConnection.__init__": [
                    396
                ],
                "self": [
                    1282,
                    772,
                    1273,
                    775,
                    1287,
                    1274,
                    396,
                    399,
                    400,
                    401,
                    402,
                    531,
                    404,
                    532,
                    406,
                    1299,
                    410,
                    1311,
                    1312,
                    1313,
                    1317,
                    1319,
                    1320,
                    1323,
                    453,
                    965,
                    455,
                    456,
                    457,
                    458,
                    966,
                    969,
                    461,
                    971,
                    463,
                    973,
                    975,
                    979,
                    981,
                    984,
                    987,
                    990,
                    481,
                    482,
                    609,
                    613,
                    614,
                    1263,
                    753,
                    755,
                    1268,
                    757,
                    502,
                    759,
                    760,
                    761,
                    1269,
                    1275,
                    1279
                ],
                "kwargs": [
                    417,
                    1413,
                    1414,
                    428,
                    396,
                    411
                ],
                "sock": [
                    401,
                    404,
                    406,
                    399
                ],
                "socket.create_connection": [
                    399
                ],
                "socket": [
                    439,
                    399
                ],
                "self.host": [
                    399
                ],
                "self.port": [
                    399
                ],
                "self.timeout": [
                    399
                ],
                "self.sock": [
                    401,
                    404,
                    406
                ],
                "self._tunnel": [
                    402
                ],
                "ssl.wrap_socket": [
                    404,
                    406
                ],
                "ssl": [
                    416,
                    419,
                    420,
                    422,
                    404,
                    405,
                    406,
                    412,
                    413,
                    414
                ],
                "self.key_file": [
                    404,
                    406
                ],
                "self.cert_file": [
                    404,
                    406
                ],
                "ssl.PROTOCOL_TLSv1": [
                    404
                ],
                "ssl.SSLError": [
                    405
                ],
                "ssl.PROTOCOL_SSLv23": [
                    419,
                    406
                ],
                "compat_urllib_request.HTTPSHandler": [
                    408,
                    417,
                    428
                ],
                "compat_urllib_request": [
                    417,
                    428,
                    562,
                    563,
                    564,
                    1171,
                    535,
                    408
                ],
                "self.do_open": [
                    410
                ],
                "HTTPSConnectionV3": [
                    410
                ],
                "req": [
                    576,
                    577,
                    578,
                    579,
                    580,
                    582,
                    584,
                    585,
                    587,
                    570,
                    410,
                    571,
                    572,
                    573,
                    574,
                    575
                ],
                "HTTPSHandlerV3": [
                    411
                ],
                "context": [
                    416,
                    417,
                    419,
                    420,
                    423,
                    425,
                    428,
                    413,
                    414
                ],
                "ssl.create_default_context": [
                    413
                ],
                "ssl.Purpose.CLIENT_AUTH": [
                    413
                ],
                "ssl.Purpose": [
                    413
                ],
                "context.options": [
                    414
                ],
                "ssl.OP_NO_SSLv3": [
                    414
                ],
                "opts_no_check_certificate": [
                    421,
                    415
                ],
                "context.verify_mode": [
                    416,
                    420
                ],
                "ssl.CERT_NONE": [
                    416,
                    420
                ],
                "ssl.SSLContext": [
                    419
                ],
                "ssl.CERT_REQUIRED": [
                    422
                ],
                "context.set_default_verify_paths": [
                    423
                ],
                "context.load_default_certs": [
                    425
                ],
                "sys.exc_info": [
                    456,
                    439
                ],
                "compat_urllib_error.URLError": [
                    439
                ],
                "compat_urllib_error": [
                    439
                ],
                "socket.timeout": [
                    439
                ],
                "UnavailableVideoError": [
                    439
                ],
                "expected": [
                    440,
                    528,
                    532,
                    445
                ],
                "video_id": [
                    441,
                    442,
                    458
                ],
                "msg": [
                    481,
                    450,
                    451,
                    452,
                    453,
                    502,
                    442,
                    444
                ],
                "cause": [
                    457,
                    443,
                    444
                ],
                "ytdl_is_updateable": [
                    446
                ],
                "update_cmd": [
                    449,
                    451,
                    447
                ],
                "__init__": [
                    481,
                    453
                ],
                "self.traceback": [
                    463,
                    461,
                    455
                ],
                "tb": [
                    455
                ],
                "self.exc_info": [
                    456,
                    482
                ],
                "self.cause": [
                    457
                ],
                "self.video_id": [
                    458
                ],
                "traceback.format_tb": [
                    463
                ],
                "traceback": [
                    463
                ],
                "DownloadError": [
                    481
                ],
                "exc_info": [
                    482
                ],
                "self.msg": [
                    502
                ],
                "downloaded": [
                    531,
                    527
                ],
                "self.downloaded": [
                    531
                ],
                "self.expected": [
                    532
                ],
                "compat_urllib_request.HTTPHandler": [
                    535
                ],
                "zlib.decompress": [
                    556,
                    558
                ],
                "zlib": [
                    556,
                    557,
                    558
                ],
                "data": [
                    1031,
                    1032,
                    556,
                    558,
                    1022
                ],
                "zlib.MAX_WBITS": [
                    556
                ],
                "zlib.error": [
                    557
                ],
                "compat_urllib_request.addinfourl": [
                    562,
                    563,
                    564
                ],
                "headers": [
                    563,
                    564
                ],
                "url": [
                    1029,
                    1383,
                    1032,
                    1384,
                    1386,
                    1355,
                    1387,
                    1388,
                    1389,
                    1167,
                    1391,
                    1394,
                    563,
                    564,
                    697,
                    699,
                    1023
                ],
                "code": [
                    1465,
                    1442,
                    563,
                    565
                ],
                "ret": [
                    847,
                    849,
                    564,
                    565,
                    566
                ],
                "ret.code": [
                    565
                ],
                "h": [
                    835,
                    812,
                    848,
                    569,
                    570,
                    571
                ],
                "v": [
                    1178,
                    1179,
                    1180,
                    1181,
                    1182,
                    1186,
                    1447,
                    1448,
                    1449,
                    1450,
                    1451,
                    1452,
                    1453,
                    1198,
                    1454,
                    1458,
                    1459,
                    569,
                    571,
                    1494
                ],
                "std_headers.items": [
                    569
                ],
                "req.headers": [
                    576,
                    577,
                    578,
                    579,
                    580,
                    570,
                    572,
                    573,
                    574,
                    575
                ],
                "req.add_header": [
                    571
                ],
                "req.get_full_url": [
                    582
                ],
                "req._Request__original": [
                    584
                ],
                "req._Request__original.partition": [
                    584
                ],
                "req._Request__r_type": [
                    585
                ],
                "req._Request__r_type.partition": [
                    585
                ],
                "old_resp": [
                    609,
                    610,
                    614,
                    615,
                    590
                ],
                "resp": [
                    609,
                    610,
                    612,
                    613,
                    614,
                    615,
                    616,
                    590,
                    592,
                    593
                ],
                "resp.headers.get": [
                    592,
                    612
                ],
                "resp.headers": [
                    592,
                    612
                ],
                "content": [
                    593,
                    594,
                    602
                ],
                "resp.read": [
                    593,
                    613
                ],
                "gz": [
                    613,
                    614,
                    594,
                    596,
                    602,
                    603
                ],
                "gzip.GzipFile": [
                    594,
                    602
                ],
                "gzip": [
                    594,
                    602
                ],
                "io.BytesIO": [
                    613,
                    594,
                    596,
                    602,
                    603
                ],
                "io": [
                    613,
                    965,
                    594,
                    596,
                    602,
                    603
                ],
                "uncompressed": [
                    609,
                    603,
                    596
                ],
                "gz.read": [
                    603,
                    596
                ],
                "i": [
                    600,
                    602,
                    840
                ],
                "original_ioerror": [
                    608
                ],
                "self.addinfourl_wrapper": [
                    609,
                    614
                ],
                "old_resp.headers": [
                    609,
                    614
                ],
                "old_resp.url": [
                    609,
                    614
                ],
                "old_resp.code": [
                    609,
                    614
                ],
                "resp.msg": [
                    610,
                    615
                ],
                "old_resp.msg": [
                    610,
                    615
                ],
                "self.deflate": [
                    613
                ],
                "https_request": [
                    618
                ],
                "http_request": [
                    618
                ],
                "https_response": [
                    619
                ],
                "http_response": [
                    619
                ],
                "date_str": [
                    643,
                    740,
                    744,
                    650,
                    715,
                    717,
                    686,
                    655,
                    625,
                    657,
                    690,
                    630,
                    634,
                    734
                ],
                "timezone": [
                    632,
                    643,
                    636,
                    639
                ],
                "datetime.timedelta": [
                    632,
                    732,
                    636,
                    639
                ],
                "datetime": [
                    770,
                    643,
                    732,
                    714,
                    686,
                    755,
                    692,
                    759,
                    632,
                    636,
                    734,
                    639
                ],
                "sign": [
                    640,
                    641,
                    719,
                    721,
                    638
                ],
                "date_format": [
                    642,
                    643
                ],
                "delimiter": [
                    642
                ],
                "dt": [
                    643,
                    644
                ],
                "datetime.datetime.strptime": [
                    643,
                    734,
                    686
                ],
                "datetime.datetime": [
                    643,
                    686,
                    755,
                    692,
                    759,
                    734
                ],
                "calendar.timegm": [
                    644
                ],
                "calendar": [
                    644
                ],
                "dt.timetuple": [
                    644
                ],
                "upload_date": [
                    653,
                    686,
                    689,
                    692,
                    693
                ],
                "date_str.replace": [
                    655
                ],
                "format_expressions": [
                    658,
                    684
                ],
                "expression": [
                    684,
                    686
                ],
                "strftime": [
                    692,
                    686
                ],
                "default_ext": [
                    698,
                    703
                ],
                "guess": [
                    699,
                    700,
                    701
                ],
                "rpartition": [
                    699
                ],
                "url.partition": [
                    699
                ],
                "filename.rsplit": [
                    707
                ],
                "sub_lang": [
                    707
                ],
                "sub_format": [
                    707
                ],
                "today": [
                    714,
                    716,
                    733
                ],
                "datetime.date.today": [
                    714
                ],
                "datetime.date": [
                    714,
                    770
                ],
                "match": [
                    740,
                    741,
                    742,
                    717,
                    718,
                    719,
                    720,
                    723
                ],
                "match.group": [
                    720,
                    723,
                    719
                ],
                "time": [
                    720,
                    722,
                    727,
                    730,
                    732
                ],
                "unit": [
                    723,
                    725,
                    726,
                    728,
                    729,
                    731,
                    732
                ],
                "delta": [
                    732,
                    733
                ],
                "date": [
                    770,
                    771,
                    772,
                    734
                ],
                "match.groups": [
                    742
                ],
                "start": [
                    1282,
                    1155,
                    1156,
                    1283,
                    1317,
                    1320,
                    1321,
                    752,
                    753,
                    1273,
                    1276
                ],
                "self.start": [
                    772,
                    775,
                    753,
                    755,
                    760
                ],
                "date_from_str": [
                    753,
                    771,
                    757
                ],
                "datetime.datetime.min.date": [
                    755
                ],
                "datetime.datetime.min": [
                    755
                ],
                "end": [
                    1287,
                    1288,
                    1161,
                    1162,
                    1319,
                    1321,
                    756,
                    757,
                    1304
                ],
                "self.end": [
                    772,
                    775,
                    757,
                    759,
                    760
                ],
                "datetime.datetime.max.date": [
                    759
                ],
                "datetime.datetime.max": [
                    759
                ],
                "cls": [
                    766
                ],
                "day": [
                    766
                ],
                "self.start.isoformat": [
                    775
                ],
                "self.end.isoformat": [
                    775
                ],
                "platform.platform": [
                    780
                ],
                "platform": [
                    780
                ],
                "res.decode": [
                    782
                ],
                "WIN_OUTPUT_IDS": [
                    796,
                    806,
                    812
                ],
                "fileno": [
                    802,
                    812,
                    806
                ],
                "out.fileno": [
                    802
                ],
                "out": [
                    865,
                    802,
                    866,
                    1252,
                    869,
                    872,
                    873,
                    874,
                    876,
                    878,
                    879,
                    1112,
                    1113,
                    861,
                    862,
                    1247
                ],
                "GetStdHandle": [
                    809,
                    812
                ],
                "ctypes.WINFUNCTYPE": [
                    809,
                    820,
                    814,
                    823
                ],
                "ctypes": [
                    902,
                    904,
                    905,
                    906,
                    907,
                    908,
                    911,
                    914,
                    915,
                    916,
                    917,
                    918,
                    919,
                    921,
                    924,
                    925,
                    926,
                    927,
                    928,
                    930,
                    809,
                    810,
                    811,
                    939,
                    814,
                    815,
                    816,
                    817,
                    818,
                    943,
                    820,
                    950,
                    823,
                    824,
                    825,
                    826,
                    827,
                    833,
                    848,
                    1142,
                    1146
                ],
                "ctypes.wintypes.HANDLE": [
                    810,
                    908,
                    815,
                    914,
                    824,
                    924
                ],
                "ctypes.wintypes": [
                    904,
                    905,
                    906,
                    907,
                    908,
                    914,
                    915,
                    916,
                    917,
                    918,
                    921,
                    924,
                    925,
                    926,
                    927,
                    930,
                    810,
                    815,
                    816,
                    817,
                    818,
                    820,
                    824,
                    825,
                    827,
                    833
                ],
                "ctypes.wintypes.DWORD": [
                    833,
                    810,
                    906,
                    907,
                    816,
                    818,
                    915,
                    820,
                    916,
                    917,
                    918,
                    825,
                    827,
                    925,
                    926,
                    927
                ],
                "ctypes.windll.kernel32": [
                    811,
                    911,
                    817,
                    820,
                    826
                ],
                "ctypes.windll": [
                    811,
                    911,
                    817,
                    820,
                    826
                ],
                "WriteConsoleW": [
                    814,
                    847
                ],
                "ctypes.wintypes.BOOL": [
                    824,
                    921,
                    930,
                    815
                ],
                "ctypes.wintypes.LPWSTR": [
                    815
                ],
                "ctypes.POINTER": [
                    816,
                    825,
                    928,
                    919
                ],
                "ctypes.wintypes.LPVOID": [
                    904,
                    817,
                    905
                ],
                "written": [
                    848,
                    818,
                    852,
                    855,
                    856
                ],
                "GetFileType": [
                    832,
                    820
                ],
                "FILE_TYPE_CHAR": [
                    832,
                    821
                ],
                "FILE_TYPE_REMOTE": [
                    832,
                    822
                ],
                "GetConsoleMode": [
                    833,
                    823
                ],
                "INVALID_HANDLE_VALUE": [
                    827,
                    830
                ],
                "handle": [
                    832,
                    833,
                    940,
                    941,
                    947,
                    948,
                    830
                ],
                "ctypes.byref": [
                    848,
                    833
                ],
                "not_a_console": [
                    835
                ],
                "count": [
                    848,
                    851,
                    845
                ],
                "next_nonbmp_pos": [
                    845
                ],
                "written.value": [
                    856,
                    852,
                    855
                ],
                "sys.stderr": [
                    862
                ],
                "_windows_write_string": [
                    866
                ],
                "byt": [
                    872,
                    875,
                    876,
                    871
                ],
                "out.write": [
                    872,
                    878
                ],
                "enc": [
                    874,
                    875
                ],
                "out.buffer.write": [
                    876
                ],
                "out.buffer": [
                    876
                ],
                "out.flush": [
                    879
                ],
                "bs": [
                    888,
                    883,
                    885,
                    886
                ],
                "xs": [
                    892,
                    894
                ],
                "struct_pack": [
                    1377,
                    894
                ],
                "ctypes.Structure": [
                    902
                ],
                "_fields_": [
                    903
                ],
                "kernel32": [
                    912,
                    922,
                    911
                ],
                "LockFileEx": [
                    912,
                    913,
                    921,
                    941
                ],
                "kernel32.LockFileEx": [
                    912
                ],
                "LockFileEx.argtypes": [
                    913
                ],
                "OVERLAPPED": [
                    928,
                    935,
                    919
                ],
                "LockFileEx.restype": [
                    921
                ],
                "UnlockFileEx": [
                    930,
                    922,
                    923,
                    948
                ],
                "kernel32.UnlockFileEx": [
                    922
                ],
                "UnlockFileEx.argtypes": [
                    923
                ],
                "UnlockFileEx.restype": [
                    930
                ],
                "whole_low": [
                    931,
                    949,
                    942
                ],
                "whole_high": [
                    932,
                    949,
                    942
                ],
                "overlapped": [
                    935,
                    936,
                    937,
                    938,
                    939
                ],
                "overlapped.Offset": [
                    936
                ],
                "overlapped.OffsetHigh": [
                    937
                ],
                "overlapped.hEvent": [
                    938
                ],
                "f._lock_file_overlapped_p": [
                    946,
                    939,
                    949,
                    942
                ],
                "ctypes.pointer": [
                    939
                ],
                "msvcrt.get_osfhandle": [
                    947,
                    940
                ],
                "f.fileno": [
                    947,
                    940
                ],
                "exclusive": [
                    969,
                    971,
                    956,
                    941
                ],
                "ctypes.FormatError": [
                    950,
                    943
                ],
                "fcntl.flock": [
                    956,
                    959
                ],
                "fcntl": [
                    956,
                    959
                ],
                "fcntl.LOCK_EX": [
                    956
                ],
                "fcntl.LOCK_SH": [
                    956
                ],
                "fcntl.LOCK_UN": [
                    959
                ],
                "mode": [
                    964,
                    965,
                    966
                ],
                "self.f": [
                    965,
                    971,
                    973,
                    979,
                    981,
                    984,
                    987,
                    990
                ],
                "io.open": [
                    965
                ],
                "self.mode": [
                    969,
                    966
                ],
                "_lock_file": [
                    971
                ],
                "self.f.close": [
                    981,
                    973
                ],
                "_unlock_file": [
                    979
                ],
                "self.f.write": [
                    987
                ],
                "self.f.read": [
                    990
                ],
                "quoted_args": [
                    1005,
                    1006,
                    999
                ],
                "a": [
                    1001,
                    1002,
                    1515,
                    1004,
                    1005
                ],
                "a.decode": [
                    1004
                ],
                "quoted_args.append": [
                    1005
                ],
                "pipes.quote": [
                    1005
                ],
                "pipes": [
                    1005
                ],
                "e": [
                    1494,
                    1012,
                    1013,
                    1014
                ],
                "seq": [
                    1012
                ],
                "pred": [
                    1014
                ],
                "sdata": [
                    1029,
                    1021,
                    1030,
                    1023
                ],
                "compat_urllib_parse.urlencode": [
                    1021,
                    1398
                ],
                "compat_urllib_parse": [
                    1398,
                    1021,
                    1350
                ],
                "json.dumps": [
                    1022
                ],
                "smug_url": [
                    1027,
                    1028,
                    1029
                ],
                "default": [
                    1186,
                    1028,
                    1182,
                    1198
                ],
                "_": [
                    1029
                ],
                "smug_url.rpartition": [
                    1029
                ],
                "jsond": [
                    1030,
                    1031
                ],
                "compat_parse_qs": [
                    1030
                ],
                "json.loads": [
                    1031
                ],
                "exponent": [
                    1041,
                    1043,
                    1044,
                    1045
                ],
                "math.log": [
                    1043
                ],
                "math": [
                    1043
                ],
                "suffix": [
                    1044,
                    1046
                ],
                "converted": [
                    1045,
                    1046
                ],
                "_UNIT_TABLE": [
                    1099,
                    1092,
                    1055
                ],
                "units_re": [
                    1092,
                    1094
                ],
                "u": [
                    1092
                ],
                "num_str": [
                    1098,
                    1100
                ],
                "replace": [
                    1098
                ],
                "mult": [
                    1099,
                    1100
                ],
                "columns": [
                    1104,
                    1105,
                    1106
                ],
                "compat_getenv": [
                    1104
                ],
                "sp": [
                    1112,
                    1109
                ],
                "subprocess.Popen": [
                    1235,
                    1109,
                    1247
                ],
                "subprocess": [
                    1249,
                    1235,
                    1109,
                    1111,
                    1247
                ],
                "subprocess.PIPE": [
                    1249,
                    1235,
                    1111
                ],
                "sp.communicate": [
                    1112
                ],
                "out.split": [
                    1113
                ],
                "ENGLISH_NAMES": [
                    1122,
                    1126
                ],
                "ENGLISH_NAMES.index": [
                    1126
                ],
                "xml_str": [
                    1136
                ],
                "title": [
                    1145,
                    1140
                ],
                "libc": [
                    1149,
                    1142
                ],
                "ctypes.cdll.LoadLibrary": [
                    1142
                ],
                "ctypes.cdll": [
                    1142
                ],
                "title_bytes": [
                    1145,
                    1146,
                    1147
                ],
                "title.encode": [
                    1145
                ],
                "buf": [
                    1146,
                    1147,
                    1149
                ],
                "ctypes.create_string_buffer": [
                    1146
                ],
                "buf.value": [
                    1147
                ],
                "libc.prctl": [
                    1149
                ],
                "s.startswith": [
                    1155
                ],
                "s.endswith": [
                    1161
                ],
                "compat_urlparse.urlparse": [
                    1167
                ],
                "compat_urlparse": [
                    1167
                ],
                "split": [
                    1168
                ],
                "path.strip": [
                    1168
                ],
                "compat_urllib_request.Request": [
                    1171
                ],
                "get_attr": [
                    1177,
                    1179
                ],
                "invscale": [
                    1198,
                    1182
                ],
                "scale": [
                    1198,
                    1182
                ],
                "int_str": [
                    1193,
                    1194,
                    1191
                ],
                "s.strip": [
                    1205
                ],
                "real_ext": [
                    1227,
                    1228
                ],
                "os.path.splitext": [
                    1227
                ],
                "ext": [
                    1228
                ],
                "communicate": [
                    1235,
                    1247
                ],
                "exe": [
                    1248,
                    1235,
                    1238
                ],
                "subprocess.STDOUT": [
                    1249
                ],
                "firstline": [
                    1252,
                    1253
                ],
                "out.partition": [
                    1252
                ],
                "version_re": [
                    1253
                ],
                "unrecognized": [
                    1257
                ],
                "self.getslice": [
                    1263
                ],
                "PagedList": [
                    1266,
                    1309
                ],
                "self._pagefunc": [
                    1323,
                    1268,
                    1311,
                    1279
                ],
                "pagefunc": [
                    1268,
                    1311
                ],
                "self._pagesize": [
                    1313,
                    1282,
                    1317,
                    1287,
                    1319,
                    1320,
                    1299,
                    1269,
                    1273,
                    1274,
                    1275
                ],
                "pagesize": [
                    1313,
                    1269
                ],
                "pagenum": [
                    1322,
                    1323,
                    1273,
                    1274,
                    1275,
                    1279
                ],
                "itertools.count": [
                    1273
                ],
                "itertools": [
                    1273
                ],
                "firstid": [
                    1288,
                    1274,
                    1283
                ],
                "nextfirstid": [
                    1283,
                    1288,
                    1304,
                    1275,
                    1276
                ],
                "page_results": [
                    1299,
                    1292,
                    1293,
                    1279
                ],
                "startv": [
                    1299,
                    1281,
                    1291,
                    1292
                ],
                "endv": [
                    1291,
                    1292,
                    1286
                ],
                "res.extend": [
                    1332,
                    1293,
                    1334
                ],
                "self._pagecount": [
                    1312,
                    1319
                ],
                "pagecount": [
                    1312
                ],
                "start_page": [
                    1320,
                    1322,
                    1317
                ],
                "end_page": [
                    1322,
                    1318
                ],
                "skip_elems": [
                    1320,
                    1324,
                    1325,
                    1326
                ],
                "only_more": [
                    1321,
                    1327,
                    1328,
                    1329,
                    1331
                ],
                "page": [
                    1323,
                    1325,
                    1328,
                    1329,
                    1331,
                    1332,
                    1334
                ],
                "unicode_escape": [
                    1339,
                    1342
                ],
                "codecs.getdecoder": [
                    1339
                ],
                "codecs": [
                    1339
                ],
                "compat_urllib_parse.quote": [
                    1350
                ],
                "url_parsed": [
                    1355,
                    1356,
                    1357,
                    1358,
                    1359,
                    1360
                ],
                "compat_urllib_parse_urlparse": [
                    1355
                ],
                "geturl": [
                    1356
                ],
                "url_parsed._replace": [
                    1356
                ],
                "escape_rfc3986": [
                    1360,
                    1357,
                    1358,
                    1359
                ],
                "url_parsed.path": [
                    1357
                ],
                "url_parsed.params": [
                    1358
                ],
                "url_parsed.query": [
                    1359
                ],
                "url_parsed.fragment": [
                    1360
                ],
                "struct.pack": [
                    1377,
                    1370,
                    1364
                ],
                "struct": [
                    1377,
                    1378,
                    1364,
                    1370,
                    1375
                ],
                "spec": [
                    1368,
                    1369,
                    1370,
                    1373,
                    1374,
                    1375
                ],
                "spec.encode": [
                    1369,
                    1374
                ],
                "struct.unpack": [
                    1378,
                    1375
                ],
                "struct_unpack": [
                    1378
                ],
                "url.decode": [
                    1384
                ],
                "BOM_UTF8": [
                    1385,
                    1386,
                    1387
                ],
                "url.startswith": [
                    1386,
                    1389
                ],
                "url.strip": [
                    1388
                ],
                "contextlib.closing": [
                    1393
                ],
                "contextlib": [
                    1393
                ],
                "batch_fd": [
                    1393
                ],
                "fd": [
                    1393,
                    1394
                ],
                "fixup": [
                    1394
                ],
                "kargs": [
                    1398
                ],
                "etree_iter": [
                    1417,
                    1402,
                    1404
                ],
                "xml.etree.ElementTree.Element.iter": [
                    1402
                ],
                "xml.etree.ElementTree.Element": [
                    1402
                ],
                "xml.etree.ElementTree": [
                    1408,
                    1402,
                    1412,
                    1414
                ],
                "xml.etree": [
                    1408,
                    1402,
                    1412,
                    1414
                ],
                "xml": [
                    1408,
                    1402,
                    1412,
                    1414
                ],
                "n.findall": [
                    1404
                ],
                "xml.etree.ElementTree.TreeBuilder": [
                    1408
                ],
                "parser": [
                    1412,
                    1413
                ],
                "xml.etree.ElementTree.XMLParser": [
                    1412
                ],
                "TreeBuilder": [
                    1412
                ],
                "tree": [
                    1417,
                    1421,
                    1414
                ],
                "xml.etree.ElementTree.XML": [
                    1414
                ],
                "n.text.decode": [
                    1420
                ],
                "US_RATINGS": [
                    1424,
                    1437
                ],
                "US_RATINGS.get": [
                    1437
                ],
                "v.startswith": [
                    1450,
                    1452
                ],
                "fix_kv": [
                    1465
                ],
                "quality_ids.index": [
                    1474
                ],
                "quality_ids": [
                    1474
                ],
                "qid": [
                    1474
                ],
                "q": [
                    1477
                ],
                "DEFAULT_OUTTMPL": [
                    1480
                ],
                "ELLIPSES": [
                    1489,
                    1487
                ],
                "length": [
                    1488,
                    1489
                ],
                "v.split": [
                    1494
                ],
                "version": [
                    1498,
                    1501
                ],
                "assume_new": [
                    1499,
                    1503
                ],
                "version_tuple": [
                    1501
                ],
                "limit": [
                    1501
                ],
                "get": [
                    1510
                ],
                "zipimporter": [
                    1510
                ],
                "shlex_quote": [
                    1515
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/SSD2T/bgp_envs_non_pandas/repos/youtube-dl_31/test/test_utils.py",
                "test_function": "test_parse_duration",
                "test_function_code": "    def test_parse_duration(self):\n        self.assertEqual(parse_duration(None), None)\n        self.assertEqual(parse_duration('1'), 1)\n        self.assertEqual(parse_duration('1337:12'), 80232)\n        self.assertEqual(parse_duration('9:12:43'), 33163)\n        self.assertEqual(parse_duration('12:00'), 720)\n        self.assertEqual(parse_duration('00:01:01'), 61)\n        self.assertEqual(parse_duration('x:y'), None)\n        self.assertEqual(parse_duration('3h11m53s'), 11513)\n        self.assertEqual(parse_duration('3h 11m 53s'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 minutes 53 seconds'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 mins 53 secs'), 11513)\n        self.assertEqual(parse_duration('62m45s'), 3765)\n        self.assertEqual(parse_duration('6m59s'), 419)\n        self.assertEqual(parse_duration('49s'), 49)\n        self.assertEqual(parse_duration('0h0m0s'), 0)\n        self.assertEqual(parse_duration('0m0s'), 0)\n        self.assertEqual(parse_duration('0s'), 0)\n        self.assertEqual(parse_duration('01:02:03.05'), 3723.05)\n        self.assertEqual(parse_duration('T30M38S'), 1838)\n        self.assertEqual(parse_duration('5 s'), 5)\n        self.assertEqual(parse_duration('3 min'), 180)\n        self.assertEqual(parse_duration('2.5 hours'), 9000)",
                "test_error": "AssertionError: None != 180",
                "full_test_error": "self = <test.test_utils.TestUtil testMethod=test_parse_duration>\n\n    def test_parse_duration(self):\n        self.assertEqual(parse_duration(None), None)\n        self.assertEqual(parse_duration('1'), 1)\n        self.assertEqual(parse_duration('1337:12'), 80232)\n        self.assertEqual(parse_duration('9:12:43'), 33163)\n        self.assertEqual(parse_duration('12:00'), 720)\n        self.assertEqual(parse_duration('00:01:01'), 61)\n        self.assertEqual(parse_duration('x:y'), None)\n        self.assertEqual(parse_duration('3h11m53s'), 11513)\n        self.assertEqual(parse_duration('3h 11m 53s'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 minutes 53 seconds'), 11513)\n        self.assertEqual(parse_duration('3 hours 11 mins 53 secs'), 11513)\n        self.assertEqual(parse_duration('62m45s'), 3765)\n        self.assertEqual(parse_duration('6m59s'), 419)\n        self.assertEqual(parse_duration('49s'), 49)\n        self.assertEqual(parse_duration('0h0m0s'), 0)\n        self.assertEqual(parse_duration('0m0s'), 0)\n        self.assertEqual(parse_duration('0s'), 0)\n        self.assertEqual(parse_duration('01:02:03.05'), 3723.05)\n        self.assertEqual(parse_duration('T30M38S'), 1838)\n        self.assertEqual(parse_duration('5 s'), 5)\n>       self.assertEqual(parse_duration('3 min'), 180)\nE       AssertionError: None != 180\n\ntest/test_utils.py:224: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}